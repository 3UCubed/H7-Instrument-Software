
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014f5c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b0  080151fc  080151fc  000251fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080155ac  080155ac  000255ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080155b4  080155b4  000255b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080155b8  080155b8  000255b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000100  24000000  080155bc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004fdc  24000100  080156bc  00030100  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  240050dc  080156bc  000350dc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030100  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003261f  00000000  00000000  0003012e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005473  00000000  00000000  0006274d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002620  00000000  00000000  00067bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002428  00000000  00000000  0006a1e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00007a9c  00000000  00000000  0006c608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003081c  00000000  00000000  000740a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001944a8  00000000  00000000  000a48c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00238d68  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000ad40  00000000  00000000  00238db8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000100 	.word	0x24000100
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080151e4 	.word	0x080151e4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000104 	.word	0x24000104
 80002dc:	080151e4 	.word	0x080151e4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000390:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <HAL_TIM_OC_DelayElapsedCallback>:
 *
 * @param htim Pointer to the timer handle structure.
 *             Supported timer instances are htim1, htim2, and htim3.
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  if (htim == &htim1)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	4a13      	ldr	r2, [pc, #76]	; (80006dc <HAL_TIM_OC_DelayElapsedCallback+0x58>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d106      	bne.n	80006a2 <HAL_TIM_OC_DelayElapsedCallback+0x1e>
  {
	  osEventFlagsSet(event_flags, PMT_FLAG_ID);
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2101      	movs	r1, #1
 800069a:	4618      	mov	r0, r3
 800069c:	f010 fb42 	bl	8010d24 <osEventFlagsSet>
  }
  else
  {
	  printf("Unknown Timer Interrupt\n");
  }
}
 80006a0:	e018      	b.n	80006d4 <HAL_TIM_OC_DelayElapsedCallback+0x50>
  else if (htim == &htim2)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	4a0f      	ldr	r2, [pc, #60]	; (80006e4 <HAL_TIM_OC_DelayElapsedCallback+0x60>)
 80006a6:	4293      	cmp	r3, r2
 80006a8:	d106      	bne.n	80006b8 <HAL_TIM_OC_DelayElapsedCallback+0x34>
	  osEventFlagsSet(event_flags, ERPA_FLAG_ID);
 80006aa:	4b0d      	ldr	r3, [pc, #52]	; (80006e0 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	2102      	movs	r1, #2
 80006b0:	4618      	mov	r0, r3
 80006b2:	f010 fb37 	bl	8010d24 <osEventFlagsSet>
}
 80006b6:	e00d      	b.n	80006d4 <HAL_TIM_OC_DelayElapsedCallback+0x50>
  else if (htim == &htim3)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	4a0b      	ldr	r2, [pc, #44]	; (80006e8 <HAL_TIM_OC_DelayElapsedCallback+0x64>)
 80006bc:	4293      	cmp	r3, r2
 80006be:	d106      	bne.n	80006ce <HAL_TIM_OC_DelayElapsedCallback+0x4a>
	  osEventFlagsSet(event_flags, HK_FLAG_ID);
 80006c0:	4b07      	ldr	r3, [pc, #28]	; (80006e0 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	2104      	movs	r1, #4
 80006c6:	4618      	mov	r0, r3
 80006c8:	f010 fb2c 	bl	8010d24 <osEventFlagsSet>
}
 80006cc:	e002      	b.n	80006d4 <HAL_TIM_OC_DelayElapsedCallback+0x50>
	  printf("Unknown Timer Interrupt\n");
 80006ce:	4807      	ldr	r0, [pc, #28]	; (80006ec <HAL_TIM_OC_DelayElapsedCallback+0x68>)
 80006d0:	f013 feea 	bl	80144a8 <puts>
}
 80006d4:	bf00      	nop
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	240004e8 	.word	0x240004e8
 80006e0:	24000688 	.word	0x24000688
 80006e4:	24000534 	.word	0x24000534
 80006e8:	24000580 	.word	0x24000580
 80006ec:	0801523c 	.word	0x0801523c

080006f0 <HAL_UART_RxCpltCallback>:
 * toggling GPIO pins, starting or stopping timers, and other operations.
 *
 * @param huart Pointer to a UART_HandleTypeDef structure that contains
 *              the configuration information for the specified UART module.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b086      	sub	sp, #24
 80006f4:	af02      	add	r7, sp, #8
 80006f6:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80006f8:	2201      	movs	r2, #1
 80006fa:	49bf      	ldr	r1, [pc, #764]	; (80009f8 <HAL_UART_RxCpltCallback+0x308>)
 80006fc:	48bf      	ldr	r0, [pc, #764]	; (80009fc <HAL_UART_RxCpltCallback+0x30c>)
 80006fe:	f00d fe27 	bl	800e350 <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 8000702:	4bbd      	ldr	r3, [pc, #756]	; (80009f8 <HAL_UART_RxCpltCallback+0x308>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 8000708:	7bfb      	ldrb	r3, [r7, #15]
 800070a:	2b25      	cmp	r3, #37	; 0x25
 800070c:	f200 8204 	bhi.w	8000b18 <HAL_UART_RxCpltCallback+0x428>
 8000710:	a201      	add	r2, pc, #4	; (adr r2, 8000718 <HAL_UART_RxCpltCallback+0x28>)
 8000712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000716:	bf00      	nop
 8000718:	080008e7 	.word	0x080008e7
 800071c:	0800090f 	.word	0x0800090f
 8000720:	08000937 	.word	0x08000937
 8000724:	08000963 	.word	0x08000963
 8000728:	0800098f 	.word	0x0800098f
 800072c:	080009b7 	.word	0x080009b7
 8000730:	080009e3 	.word	0x080009e3
 8000734:	08000a87 	.word	0x08000a87
 8000738:	08000b19 	.word	0x08000b19
 800073c:	08000b19 	.word	0x08000b19
 8000740:	080007c5 	.word	0x080007c5
 8000744:	080007b1 	.word	0x080007b1
 8000748:	08000aaf 	.word	0x08000aaf
 800074c:	08000ab7 	.word	0x08000ab7
 8000750:	08000ad3 	.word	0x08000ad3
 8000754:	08000aef 	.word	0x08000aef
 8000758:	08000ac5 	.word	0x08000ac5
 800075c:	08000ae1 	.word	0x08000ae1
 8000760:	08000afd 	.word	0x08000afd
 8000764:	080008fb 	.word	0x080008fb
 8000768:	08000923 	.word	0x08000923
 800076c:	0800094d 	.word	0x0800094d
 8000770:	08000979 	.word	0x08000979
 8000774:	080009a3 	.word	0x080009a3
 8000778:	080009cd 	.word	0x080009cd
 800077c:	08000a71 	.word	0x08000a71
 8000780:	08000a9b 	.word	0x08000a9b
 8000784:	080007d9 	.word	0x080007d9
 8000788:	08000815 	.word	0x08000815
 800078c:	08000851 	.word	0x08000851
 8000790:	08000b19 	.word	0x08000b19
 8000794:	08000b19 	.word	0x08000b19
 8000798:	08000b19 	.word	0x08000b19
 800079c:	08000b19 	.word	0x08000b19
 80007a0:	08000b19 	.word	0x08000b19
 80007a4:	08000b19 	.word	0x08000b19
 80007a8:	08000893 	.word	0x08000893
 80007ac:	080008bd 	.word	0x080008bd
	case 0x0B: {
		printf("SDN1 ON\n");
 80007b0:	4893      	ldr	r0, [pc, #588]	; (8000a00 <HAL_UART_RxCpltCallback+0x310>)
 80007b2:	f013 fe79 	bl	80144a8 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 80007b6:	4b93      	ldr	r3, [pc, #588]	; (8000a04 <HAL_UART_RxCpltCallback+0x314>)
 80007b8:	2104      	movs	r1, #4
 80007ba:	2201      	movs	r2, #1
 80007bc:	4618      	mov	r0, r3
 80007be:	f007 fd0d 	bl	80081dc <HAL_GPIO_WritePin>
		break;
 80007c2:	e1a9      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x0A: {
		printf("SDN1 OFF\n");
 80007c4:	4890      	ldr	r0, [pc, #576]	; (8000a08 <HAL_UART_RxCpltCallback+0x318>)
 80007c6:	f013 fe6f 	bl	80144a8 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 80007ca:	4b8e      	ldr	r3, [pc, #568]	; (8000a04 <HAL_UART_RxCpltCallback+0x314>)
 80007cc:	2104      	movs	r1, #4
 80007ce:	2200      	movs	r2, #0
 80007d0:	4618      	mov	r0, r3
 80007d2:	f007 fd03 	bl	80081dc <HAL_GPIO_WritePin>
		break;
 80007d6:	e19f      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x1B: {
		printf("Step Up\n");
 80007d8:	488c      	ldr	r0, [pc, #560]	; (8000a0c <HAL_UART_RxCpltCallback+0x31c>)
 80007da:	f013 fe65 	bl	80144a8 <puts>
		if (step < 17) {
 80007de:	4b8c      	ldr	r3, [pc, #560]	; (8000a10 <HAL_UART_RxCpltCallback+0x320>)
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	2b10      	cmp	r3, #16
 80007e4:	f200 8191 	bhi.w	8000b0a <HAL_UART_RxCpltCallback+0x41a>
			step+=2;
 80007e8:	4b89      	ldr	r3, [pc, #548]	; (8000a10 <HAL_UART_RxCpltCallback+0x320>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	3302      	adds	r3, #2
 80007ee:	b2da      	uxtb	r2, r3
 80007f0:	4b87      	ldr	r3, [pc, #540]	; (8000a10 <HAL_UART_RxCpltCallback+0x320>)
 80007f2:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_OUT[step]);
 80007f4:	4b86      	ldr	r3, [pc, #536]	; (8000a10 <HAL_UART_RxCpltCallback+0x320>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	461a      	mov	r2, r3
 80007fa:	4b86      	ldr	r3, [pc, #536]	; (8000a14 <HAL_UART_RxCpltCallback+0x324>)
 80007fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000800:	2200      	movs	r2, #0
 8000802:	2100      	movs	r1, #0
 8000804:	4884      	ldr	r0, [pc, #528]	; (8000a18 <HAL_UART_RxCpltCallback+0x328>)
 8000806:	f004 fabc 	bl	8004d82 <HAL_DAC_SetValue>
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800080a:	2100      	movs	r1, #0
 800080c:	4882      	ldr	r0, [pc, #520]	; (8000a18 <HAL_UART_RxCpltCallback+0x328>)
 800080e:	f004 f8fd 	bl	8004a0c <HAL_DAC_Start>

		}
		break;
 8000812:	e17a      	b.n	8000b0a <HAL_UART_RxCpltCallback+0x41a>
	}
	case 0x1C: {
		printf("Step Down\n");
 8000814:	4881      	ldr	r0, [pc, #516]	; (8000a1c <HAL_UART_RxCpltCallback+0x32c>)
 8000816:	f013 fe47 	bl	80144a8 <puts>
		if (step > 3) {
 800081a:	4b7d      	ldr	r3, [pc, #500]	; (8000a10 <HAL_UART_RxCpltCallback+0x320>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	2b03      	cmp	r3, #3
 8000820:	f240 8175 	bls.w	8000b0e <HAL_UART_RxCpltCallback+0x41e>
			step-=2;
 8000824:	4b7a      	ldr	r3, [pc, #488]	; (8000a10 <HAL_UART_RxCpltCallback+0x320>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	3b02      	subs	r3, #2
 800082a:	b2da      	uxtb	r2, r3
 800082c:	4b78      	ldr	r3, [pc, #480]	; (8000a10 <HAL_UART_RxCpltCallback+0x320>)
 800082e:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_OUT[step]);
 8000830:	4b77      	ldr	r3, [pc, #476]	; (8000a10 <HAL_UART_RxCpltCallback+0x320>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	461a      	mov	r2, r3
 8000836:	4b77      	ldr	r3, [pc, #476]	; (8000a14 <HAL_UART_RxCpltCallback+0x324>)
 8000838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800083c:	2200      	movs	r2, #0
 800083e:	2100      	movs	r1, #0
 8000840:	4875      	ldr	r0, [pc, #468]	; (8000a18 <HAL_UART_RxCpltCallback+0x328>)
 8000842:	f004 fa9e 	bl	8004d82 <HAL_DAC_SetValue>
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000846:	2100      	movs	r1, #0
 8000848:	4873      	ldr	r0, [pc, #460]	; (8000a18 <HAL_UART_RxCpltCallback+0x328>)
 800084a:	f004 f8df 	bl	8004a0c <HAL_DAC_Start>

		}
		break;
 800084e:	e15e      	b.n	8000b0e <HAL_UART_RxCpltCallback+0x41e>
	}
	case 0x1D: {
		printf("Toggle AutoSweep\n");
 8000850:	4873      	ldr	r0, [pc, #460]	; (8000a20 <HAL_UART_RxCpltCallback+0x330>)
 8000852:	f013 fe29 	bl	80144a8 <puts>
		if (!auto_sweep) {
 8000856:	4b73      	ldr	r3, [pc, #460]	; (8000a24 <HAL_UART_RxCpltCallback+0x334>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d10e      	bne.n	800087c <HAL_UART_RxCpltCallback+0x18c>
			auto_sweep = 1;
 800085e:	4b71      	ldr	r3, [pc, #452]	; (8000a24 <HAL_UART_RxCpltCallback+0x334>)
 8000860:	2201      	movs	r2, #1
 8000862:	601a      	str	r2, [r3, #0]
			HAL_TIM_Base_Start(&htim2);
 8000864:	4870      	ldr	r0, [pc, #448]	; (8000a28 <HAL_UART_RxCpltCallback+0x338>)
 8000866:	f00c f81f 	bl	800c8a8 <HAL_TIM_Base_Start>

			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 800086a:	2300      	movs	r3, #0
 800086c:	9300      	str	r3, [sp, #0]
 800086e:	2320      	movs	r3, #32
 8000870:	4a68      	ldr	r2, [pc, #416]	; (8000a14 <HAL_UART_RxCpltCallback+0x324>)
 8000872:	2100      	movs	r1, #0
 8000874:	4868      	ldr	r0, [pc, #416]	; (8000a18 <HAL_UART_RxCpltCallback+0x328>)
 8000876:	f004 f921 	bl	8004abc <HAL_DAC_Start_DMA>
			auto_sweep = 0;
			HAL_TIM_Base_Stop(&htim2);

			HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
		}
		break;
 800087a:	e14d      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
			auto_sweep = 0;
 800087c:	4b69      	ldr	r3, [pc, #420]	; (8000a24 <HAL_UART_RxCpltCallback+0x334>)
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
			HAL_TIM_Base_Stop(&htim2);
 8000882:	4869      	ldr	r0, [pc, #420]	; (8000a28 <HAL_UART_RxCpltCallback+0x338>)
 8000884:	f00c f880 	bl	800c988 <HAL_TIM_Base_Stop>
			HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8000888:	2100      	movs	r1, #0
 800088a:	4863      	ldr	r0, [pc, #396]	; (8000a18 <HAL_UART_RxCpltCallback+0x328>)
 800088c:	f004 f9d6 	bl	8004c3c <HAL_DAC_Stop_DMA>
		break;
 8000890:	e142      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x24: {
		printf("Factor Up\n");
 8000892:	4866      	ldr	r0, [pc, #408]	; (8000a2c <HAL_UART_RxCpltCallback+0x33c>)
 8000894:	f013 fe08 	bl	80144a8 <puts>
		if (cadence <= 50000){
 8000898:	4b65      	ldr	r3, [pc, #404]	; (8000a30 <HAL_UART_RxCpltCallback+0x340>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	f24c 3250 	movw	r2, #50000	; 0xc350
 80008a0:	4293      	cmp	r3, r2
 80008a2:	f200 8136 	bhi.w	8000b12 <HAL_UART_RxCpltCallback+0x422>
			cadence *= 2;
 80008a6:	4b62      	ldr	r3, [pc, #392]	; (8000a30 <HAL_UART_RxCpltCallback+0x340>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	005b      	lsls	r3, r3, #1
 80008ac:	4a60      	ldr	r2, [pc, #384]	; (8000a30 <HAL_UART_RxCpltCallback+0x340>)
 80008ae:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 80008b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008b4:	4b5e      	ldr	r3, [pc, #376]	; (8000a30 <HAL_UART_RxCpltCallback+0x340>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 80008ba:	e12a      	b.n	8000b12 <HAL_UART_RxCpltCallback+0x422>
	}
	case 0x25: {
		printf("Factor Down\n");
 80008bc:	485d      	ldr	r0, [pc, #372]	; (8000a34 <HAL_UART_RxCpltCallback+0x344>)
 80008be:	f013 fdf3 	bl	80144a8 <puts>
		if (cadence >= 6250){
 80008c2:	4b5b      	ldr	r3, [pc, #364]	; (8000a30 <HAL_UART_RxCpltCallback+0x340>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	f641 0269 	movw	r2, #6249	; 0x1869
 80008ca:	4293      	cmp	r3, r2
 80008cc:	f240 8123 	bls.w	8000b16 <HAL_UART_RxCpltCallback+0x426>
			cadence /= 2;
 80008d0:	4b57      	ldr	r3, [pc, #348]	; (8000a30 <HAL_UART_RxCpltCallback+0x340>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	4a56      	ldr	r2, [pc, #344]	; (8000a30 <HAL_UART_RxCpltCallback+0x340>)
 80008d8:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 80008da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008de:	4b54      	ldr	r3, [pc, #336]	; (8000a30 <HAL_UART_RxCpltCallback+0x340>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 80008e4:	e117      	b.n	8000b16 <HAL_UART_RxCpltCallback+0x426>
	}
	case 0x00: {
		printf("SYS ON PB5\n");
 80008e6:	4854      	ldr	r0, [pc, #336]	; (8000a38 <HAL_UART_RxCpltCallback+0x348>)
 80008e8:	f013 fdde 	bl	80144a8 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 80008ec:	4b45      	ldr	r3, [pc, #276]	; (8000a04 <HAL_UART_RxCpltCallback+0x314>)
 80008ee:	2120      	movs	r1, #32
 80008f0:	2201      	movs	r2, #1
 80008f2:	4618      	mov	r0, r3
 80008f4:	f007 fc72 	bl	80081dc <HAL_GPIO_WritePin>
		break;
 80008f8:	e10e      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x13: {
		printf("SYS OFF PB5\n");
 80008fa:	4850      	ldr	r0, [pc, #320]	; (8000a3c <HAL_UART_RxCpltCallback+0x34c>)
 80008fc:	f013 fdd4 	bl	80144a8 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 8000900:	4b40      	ldr	r3, [pc, #256]	; (8000a04 <HAL_UART_RxCpltCallback+0x314>)
 8000902:	2120      	movs	r1, #32
 8000904:	2200      	movs	r2, #0
 8000906:	4618      	mov	r0, r3
 8000908:	f007 fc68 	bl	80081dc <HAL_GPIO_WritePin>
		break;
 800090c:	e104      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x01: {

		printf("800v ON PB6\n");
 800090e:	484c      	ldr	r0, [pc, #304]	; (8000a40 <HAL_UART_RxCpltCallback+0x350>)
 8000910:	f013 fdca 	bl	80144a8 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000914:	4b3b      	ldr	r3, [pc, #236]	; (8000a04 <HAL_UART_RxCpltCallback+0x314>)
 8000916:	2140      	movs	r1, #64	; 0x40
 8000918:	2201      	movs	r2, #1
 800091a:	4618      	mov	r0, r3
 800091c:	f007 fc5e 	bl	80081dc <HAL_GPIO_WritePin>
		break;
 8000920:	e0fa      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x14: {
		printf("800v OFF PB6\n");
 8000922:	4848      	ldr	r0, [pc, #288]	; (8000a44 <HAL_UART_RxCpltCallback+0x354>)
 8000924:	f013 fdc0 	bl	80144a8 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000928:	4b36      	ldr	r3, [pc, #216]	; (8000a04 <HAL_UART_RxCpltCallback+0x314>)
 800092a:	2140      	movs	r1, #64	; 0x40
 800092c:	2200      	movs	r2, #0
 800092e:	4618      	mov	r0, r3
 8000930:	f007 fc54 	bl	80081dc <HAL_GPIO_WritePin>
		break;
 8000934:	e0f0      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x02: {
		printf("5v ON PC2\n");
 8000936:	4844      	ldr	r0, [pc, #272]	; (8000a48 <HAL_UART_RxCpltCallback+0x358>)
 8000938:	f013 fdb6 	bl	80144a8 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 800093c:	4b43      	ldr	r3, [pc, #268]	; (8000a4c <HAL_UART_RxCpltCallback+0x35c>)
 800093e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000942:	2201      	movs	r2, #1
 8000944:	4618      	mov	r0, r3
 8000946:	f007 fc49 	bl	80081dc <HAL_GPIO_WritePin>
		break;
 800094a:	e0e5      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x15: {
		printf("5v OFF PC2\n");
 800094c:	4840      	ldr	r0, [pc, #256]	; (8000a50 <HAL_UART_RxCpltCallback+0x360>)
 800094e:	f013 fdab 	bl	80144a8 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000952:	4b3e      	ldr	r3, [pc, #248]	; (8000a4c <HAL_UART_RxCpltCallback+0x35c>)
 8000954:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000958:	2200      	movs	r2, #0
 800095a:	4618      	mov	r0, r3
 800095c:	f007 fc3e 	bl	80081dc <HAL_GPIO_WritePin>
		break;
 8000960:	e0da      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x03: {
		printf("n200v ON PC13\n");
 8000962:	483c      	ldr	r0, [pc, #240]	; (8000a54 <HAL_UART_RxCpltCallback+0x364>)
 8000964:	f013 fda0 	bl	80144a8 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000968:	4b38      	ldr	r3, [pc, #224]	; (8000a4c <HAL_UART_RxCpltCallback+0x35c>)
 800096a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800096e:	2201      	movs	r2, #1
 8000970:	4618      	mov	r0, r3
 8000972:	f007 fc33 	bl	80081dc <HAL_GPIO_WritePin>
		break;
 8000976:	e0cf      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x16: {
		printf("n200v OFF PC13\n");
 8000978:	4837      	ldr	r0, [pc, #220]	; (8000a58 <HAL_UART_RxCpltCallback+0x368>)
 800097a:	f013 fd95 	bl	80144a8 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 800097e:	4b33      	ldr	r3, [pc, #204]	; (8000a4c <HAL_UART_RxCpltCallback+0x35c>)
 8000980:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000984:	2200      	movs	r2, #0
 8000986:	4618      	mov	r0, r3
 8000988:	f007 fc28 	bl	80081dc <HAL_GPIO_WritePin>
		break;
 800098c:	e0c4      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x04: {
		printf("3v3 ON PC7\n");
 800098e:	4833      	ldr	r0, [pc, #204]	; (8000a5c <HAL_UART_RxCpltCallback+0x36c>)
 8000990:	f013 fd8a 	bl	80144a8 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000994:	4b2d      	ldr	r3, [pc, #180]	; (8000a4c <HAL_UART_RxCpltCallback+0x35c>)
 8000996:	2180      	movs	r1, #128	; 0x80
 8000998:	2201      	movs	r2, #1
 800099a:	4618      	mov	r0, r3
 800099c:	f007 fc1e 	bl	80081dc <HAL_GPIO_WritePin>
		break;
 80009a0:	e0ba      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x17: {
		printf("3v3 OFF PC7\n");
 80009a2:	482f      	ldr	r0, [pc, #188]	; (8000a60 <HAL_UART_RxCpltCallback+0x370>)
 80009a4:	f013 fd80 	bl	80144a8 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 80009a8:	4b28      	ldr	r3, [pc, #160]	; (8000a4c <HAL_UART_RxCpltCallback+0x35c>)
 80009aa:	2180      	movs	r1, #128	; 0x80
 80009ac:	2200      	movs	r2, #0
 80009ae:	4618      	mov	r0, r3
 80009b0:	f007 fc14 	bl	80081dc <HAL_GPIO_WritePin>
		break;
 80009b4:	e0b0      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x05: {
		printf("n5v ON PC8\n");
 80009b6:	482b      	ldr	r0, [pc, #172]	; (8000a64 <HAL_UART_RxCpltCallback+0x374>)
 80009b8:	f013 fd76 	bl	80144a8 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 80009bc:	4b23      	ldr	r3, [pc, #140]	; (8000a4c <HAL_UART_RxCpltCallback+0x35c>)
 80009be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009c2:	2201      	movs	r2, #1
 80009c4:	4618      	mov	r0, r3
 80009c6:	f007 fc09 	bl	80081dc <HAL_GPIO_WritePin>
		break;
 80009ca:	e0a5      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x18: {
		printf("n5v OFF PC8\n");
 80009cc:	4826      	ldr	r0, [pc, #152]	; (8000a68 <HAL_UART_RxCpltCallback+0x378>)
 80009ce:	f013 fd6b 	bl	80144a8 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 80009d2:	4b1e      	ldr	r3, [pc, #120]	; (8000a4c <HAL_UART_RxCpltCallback+0x35c>)
 80009d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009d8:	2200      	movs	r2, #0
 80009da:	4618      	mov	r0, r3
 80009dc:	f007 fbfe 	bl	80081dc <HAL_GPIO_WritePin>
		break;
 80009e0:	e09a      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x06: {
		printf("15v ON PC9\n");
 80009e2:	4822      	ldr	r0, [pc, #136]	; (8000a6c <HAL_UART_RxCpltCallback+0x37c>)
 80009e4:	f013 fd60 	bl	80144a8 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 80009e8:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <HAL_UART_RxCpltCallback+0x35c>)
 80009ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009ee:	2201      	movs	r2, #1
 80009f0:	4618      	mov	r0, r3
 80009f2:	f007 fbf3 	bl	80081dc <HAL_GPIO_WritePin>
		break;
 80009f6:	e08f      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
 80009f8:	2400068c 	.word	0x2400068c
 80009fc:	240005cc 	.word	0x240005cc
 8000a00:	08015254 	.word	0x08015254
 8000a04:	58020400 	.word	0x58020400
 8000a08:	0801525c 	.word	0x0801525c
 8000a0c:	08015268 	.word	0x08015268
 8000a10:	24000004 	.word	0x24000004
 8000a14:	24000008 	.word	0x24000008
 8000a18:	240002d4 	.word	0x240002d4
 8000a1c:	08015270 	.word	0x08015270
 8000a20:	0801527c 	.word	0x0801527c
 8000a24:	24000684 	.word	0x24000684
 8000a28:	24000534 	.word	0x24000534
 8000a2c:	08015290 	.word	0x08015290
 8000a30:	24000000 	.word	0x24000000
 8000a34:	0801529c 	.word	0x0801529c
 8000a38:	080152a8 	.word	0x080152a8
 8000a3c:	080152b4 	.word	0x080152b4
 8000a40:	080152c0 	.word	0x080152c0
 8000a44:	080152cc 	.word	0x080152cc
 8000a48:	080152dc 	.word	0x080152dc
 8000a4c:	58020800 	.word	0x58020800
 8000a50:	080152e8 	.word	0x080152e8
 8000a54:	080152f4 	.word	0x080152f4
 8000a58:	08015304 	.word	0x08015304
 8000a5c:	08015314 	.word	0x08015314
 8000a60:	08015320 	.word	0x08015320
 8000a64:	0801532c 	.word	0x0801532c
 8000a68:	08015338 	.word	0x08015338
 8000a6c:	08015344 	.word	0x08015344
	}
	case 0x19: {
		printf("15v OFF PC9\n");
 8000a70:	482b      	ldr	r0, [pc, #172]	; (8000b20 <HAL_UART_RxCpltCallback+0x430>)
 8000a72:	f013 fd19 	bl	80144a8 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000a76:	4b2b      	ldr	r3, [pc, #172]	; (8000b24 <HAL_UART_RxCpltCallback+0x434>)
 8000a78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f007 fbac 	bl	80081dc <HAL_GPIO_WritePin>
		break;
 8000a84:	e048      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x07: {
		printf("n3v3 ON PC6\n");
 8000a86:	4828      	ldr	r0, [pc, #160]	; (8000b28 <HAL_UART_RxCpltCallback+0x438>)
 8000a88:	f013 fd0e 	bl	80144a8 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8000a8c:	4b25      	ldr	r3, [pc, #148]	; (8000b24 <HAL_UART_RxCpltCallback+0x434>)
 8000a8e:	2140      	movs	r1, #64	; 0x40
 8000a90:	2201      	movs	r2, #1
 8000a92:	4618      	mov	r0, r3
 8000a94:	f007 fba2 	bl	80081dc <HAL_GPIO_WritePin>
		break;
 8000a98:	e03e      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x1A: {
		printf("n3v3 OFF PC6\n");
 8000a9a:	4824      	ldr	r0, [pc, #144]	; (8000b2c <HAL_UART_RxCpltCallback+0x43c>)
 8000a9c:	f013 fd04 	bl	80144a8 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000aa0:	4b20      	ldr	r3, [pc, #128]	; (8000b24 <HAL_UART_RxCpltCallback+0x434>)
 8000aa2:	2140      	movs	r1, #64	; 0x40
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f007 fb98 	bl	80081dc <HAL_GPIO_WritePin>
		break;
 8000aac:	e034      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x0C: {
		printf("Enter STOP mode\n");
 8000aae:	4820      	ldr	r0, [pc, #128]	; (8000b30 <HAL_UART_RxCpltCallback+0x440>)
 8000ab0:	f013 fcfa 	bl	80144a8 <puts>
//		HAL_SuspendTick();
//		HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
//		NVIC_SystemReset();
		break;
 8000ab4:	e030      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x0D: {
		printf("PMT ON\n");
 8000ab6:	481f      	ldr	r0, [pc, #124]	; (8000b34 <HAL_UART_RxCpltCallback+0x444>)
 8000ab8:	f013 fcf6 	bl	80144a8 <puts>
		PMT_ON = 1;
 8000abc:	4b1e      	ldr	r3, [pc, #120]	; (8000b38 <HAL_UART_RxCpltCallback+0x448>)
 8000abe:	2201      	movs	r2, #1
 8000ac0:	701a      	strb	r2, [r3, #0]
		break;
 8000ac2:	e029      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x10: {
		printf("PMT OFF\n");
 8000ac4:	481d      	ldr	r0, [pc, #116]	; (8000b3c <HAL_UART_RxCpltCallback+0x44c>)
 8000ac6:	f013 fcef 	bl	80144a8 <puts>
		PMT_ON = 0;
 8000aca:	4b1b      	ldr	r3, [pc, #108]	; (8000b38 <HAL_UART_RxCpltCallback+0x448>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	701a      	strb	r2, [r3, #0]
		break;
 8000ad0:	e022      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x0E: {
		printf("ERPA ON\n");
 8000ad2:	481b      	ldr	r0, [pc, #108]	; (8000b40 <HAL_UART_RxCpltCallback+0x450>)
 8000ad4:	f013 fce8 	bl	80144a8 <puts>
		ERPA_ON = 1;
 8000ad8:	4b1a      	ldr	r3, [pc, #104]	; (8000b44 <HAL_UART_RxCpltCallback+0x454>)
 8000ada:	2201      	movs	r2, #1
 8000adc:	701a      	strb	r2, [r3, #0]
		break;
 8000ade:	e01b      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x11: {
		printf("ERPA OFF\n");
 8000ae0:	4819      	ldr	r0, [pc, #100]	; (8000b48 <HAL_UART_RxCpltCallback+0x458>)
 8000ae2:	f013 fce1 	bl	80144a8 <puts>
		ERPA_ON = 0;
 8000ae6:	4b17      	ldr	r3, [pc, #92]	; (8000b44 <HAL_UART_RxCpltCallback+0x454>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	701a      	strb	r2, [r3, #0]
		break;
 8000aec:	e014      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x0F: {
		printf("HK ON \n");
 8000aee:	4817      	ldr	r0, [pc, #92]	; (8000b4c <HAL_UART_RxCpltCallback+0x45c>)
 8000af0:	f013 fcda 	bl	80144a8 <puts>
		HK_ON = 1;
 8000af4:	4b16      	ldr	r3, [pc, #88]	; (8000b50 <HAL_UART_RxCpltCallback+0x460>)
 8000af6:	2201      	movs	r2, #1
 8000af8:	701a      	strb	r2, [r3, #0]
		break;
 8000afa:	e00d      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x12: {
		printf("HK OFF\n");
 8000afc:	4815      	ldr	r0, [pc, #84]	; (8000b54 <HAL_UART_RxCpltCallback+0x464>)
 8000afe:	f013 fcd3 	bl	80144a8 <puts>
		HK_ON = 0;
 8000b02:	4b13      	ldr	r3, [pc, #76]	; (8000b50 <HAL_UART_RxCpltCallback+0x460>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	701a      	strb	r2, [r3, #0]
		break;
 8000b08:	e006      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
		break;
 8000b0a:	bf00      	nop
 8000b0c:	e004      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
		break;
 8000b0e:	bf00      	nop
 8000b10:	e002      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
		break;
 8000b12:	bf00      	nop
 8000b14:	e000      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
		break;
 8000b16:	bf00      	nop
	}
	}
}
 8000b18:	bf00      	nop
 8000b1a:	3710      	adds	r7, #16
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	08015350 	.word	0x08015350
 8000b24:	58020800 	.word	0x58020800
 8000b28:	0801535c 	.word	0x0801535c
 8000b2c:	08015368 	.word	0x08015368
 8000b30:	08015378 	.word	0x08015378
 8000b34:	08015388 	.word	0x08015388
 8000b38:	2400067e 	.word	0x2400067e
 8000b3c:	08015390 	.word	0x08015390
 8000b40:	08015398 	.word	0x08015398
 8000b44:	2400067f 	.word	0x2400067f
 8000b48:	080153a0 	.word	0x080153a0
 8000b4c:	080153ac 	.word	0x080153ac
 8000b50:	24000680 	.word	0x24000680
 8000b54:	080153b4 	.word	0x080153b4

08000b58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b5c:	f002 f9c2 	bl	8002ee4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b60:	f000 f892 	bl	8000c88 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000b64:	f000 f910 	bl	8000d88 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b68:	f000 fe62 	bl	8001830 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b6c:	f000 fe30 	bl	80017d0 <MX_DMA_Init>
  MX_TIM3_Init();
 8000b70:	f000 fd94 	bl	800169c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000b74:	f000 fde0 	bl	8001738 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000b78:	f000 fb20 	bl	80011bc <MX_I2C1_Init>
  MX_SPI2_Init();
 8000b7c:	f000 fc12 	bl	80013a4 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000b80:	f000 fd16 	bl	80015b0 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000b84:	f000 fc66 	bl	8001454 <MX_TIM1_Init>
  MX_ADC3_Init();
 8000b88:	f000 fa54 	bl	8001034 <MX_ADC3_Init>
  MX_ADC1_Init();
 8000b8c:	f000 f92c 	bl	8000de8 <MX_ADC1_Init>
  MX_DAC1_Init();
 8000b90:	f000 fae2 	bl	8001158 <MX_DAC1_Init>
  MX_SPI1_Init();
 8000b94:	f000 fbae 	bl	80012f4 <MX_SPI1_Init>
  MX_RTC_Init();
 8000b98:	f000 fb50 	bl	800123c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	4825      	ldr	r0, [pc, #148]	; (8000c34 <main+0xdc>)
 8000ba0:	f00b ff92 	bl	800cac8 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	4824      	ldr	r0, [pc, #144]	; (8000c38 <main+0xe0>)
 8000ba8:	f00b ff8e 	bl	800cac8 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000bac:	2100      	movs	r1, #0
 8000bae:	4823      	ldr	r0, [pc, #140]	; (8000c3c <main+0xe4>)
 8000bb0:	f00b ff8a 	bl	800cac8 <HAL_TIM_OC_Start_IT>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000bb4:	f00f ff60 	bl	8010a78 <osKernelInitialize>
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
  mid_MsgQueue = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(packet_t), NULL);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2108      	movs	r1, #8
 8000bbc:	2010      	movs	r0, #16
 8000bbe:	f010 f95b 	bl	8010e78 <osMessageQueueNew>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	4a1e      	ldr	r2, [pc, #120]	; (8000c40 <main+0xe8>)
 8000bc6:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 8000bc8:	4a1e      	ldr	r2, [pc, #120]	; (8000c44 <main+0xec>)
 8000bca:	2100      	movs	r1, #0
 8000bcc:	481e      	ldr	r0, [pc, #120]	; (8000c48 <main+0xf0>)
 8000bce:	f00f ff9d 	bl	8010b0c <osThreadNew>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	4a1d      	ldr	r2, [pc, #116]	; (8000c4c <main+0xf4>)
 8000bd6:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 8000bd8:	4a1d      	ldr	r2, [pc, #116]	; (8000c50 <main+0xf8>)
 8000bda:	2100      	movs	r1, #0
 8000bdc:	481d      	ldr	r0, [pc, #116]	; (8000c54 <main+0xfc>)
 8000bde:	f00f ff95 	bl	8010b0c <osThreadNew>
 8000be2:	4603      	mov	r3, r0
 8000be4:	4a1c      	ldr	r2, [pc, #112]	; (8000c58 <main+0x100>)
 8000be6:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 8000be8:	4a1c      	ldr	r2, [pc, #112]	; (8000c5c <main+0x104>)
 8000bea:	2100      	movs	r1, #0
 8000bec:	481c      	ldr	r0, [pc, #112]	; (8000c60 <main+0x108>)
 8000bee:	f00f ff8d 	bl	8010b0c <osThreadNew>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	4a1b      	ldr	r2, [pc, #108]	; (8000c64 <main+0x10c>)
 8000bf6:	6013      	str	r3, [r2, #0]

  /* creation of UART_RX_task */
  UART_RX_taskHandle = osThreadNew(UART_RX_init, NULL, &UART_RX_task_attributes);
 8000bf8:	4a1b      	ldr	r2, [pc, #108]	; (8000c68 <main+0x110>)
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	481b      	ldr	r0, [pc, #108]	; (8000c6c <main+0x114>)
 8000bfe:	f00f ff85 	bl	8010b0c <osThreadNew>
 8000c02:	4603      	mov	r3, r0
 8000c04:	4a1a      	ldr	r2, [pc, #104]	; (8000c70 <main+0x118>)
 8000c06:	6013      	str	r3, [r2, #0]

  /* creation of UART_TX_task */
  UART_TX_taskHandle = osThreadNew(UART_TX_init, NULL, &UART_TX_task_attributes);
 8000c08:	4a1a      	ldr	r2, [pc, #104]	; (8000c74 <main+0x11c>)
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	481a      	ldr	r0, [pc, #104]	; (8000c78 <main+0x120>)
 8000c0e:	f00f ff7d 	bl	8010b0c <osThreadNew>
 8000c12:	4603      	mov	r3, r0
 8000c14:	4a19      	ldr	r2, [pc, #100]	; (8000c7c <main+0x124>)
 8000c16:	6013      	str	r3, [r2, #0]
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  event_flags = osEventFlagsNew(NULL);
 8000c18:	2000      	movs	r0, #0
 8000c1a:	f010 f844 	bl	8010ca6 <osEventFlagsNew>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	4a17      	ldr	r2, [pc, #92]	; (8000c80 <main+0x128>)
 8000c22:	6013      	str	r3, [r2, #0]
  system_setup();
 8000c24:	f000 fe7e 	bl	8001924 <system_setup>
  printf("Starting kernal...\n");
 8000c28:	4816      	ldr	r0, [pc, #88]	; (8000c84 <main+0x12c>)
 8000c2a:	f013 fc3d 	bl	80144a8 <puts>

  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000c2e:	f00f ff47 	bl	8010ac0 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000c32:	e7fe      	b.n	8000c32 <main+0xda>
 8000c34:	240004e8 	.word	0x240004e8
 8000c38:	24000534 	.word	0x24000534
 8000c3c:	24000580 	.word	0x24000580
 8000c40:	24000674 	.word	0x24000674
 8000c44:	08015420 	.word	0x08015420
 8000c48:	08001fbd 	.word	0x08001fbd
 8000c4c:	24000660 	.word	0x24000660
 8000c50:	08015444 	.word	0x08015444
 8000c54:	08002001 	.word	0x08002001
 8000c58:	24000664 	.word	0x24000664
 8000c5c:	08015468 	.word	0x08015468
 8000c60:	08002045 	.word	0x08002045
 8000c64:	24000668 	.word	0x24000668
 8000c68:	0801548c 	.word	0x0801548c
 8000c6c:	08002089 	.word	0x08002089
 8000c70:	2400066c 	.word	0x2400066c
 8000c74:	080154b0 	.word	0x080154b0
 8000c78:	080020ad 	.word	0x080020ad
 8000c7c:	24000670 	.word	0x24000670
 8000c80:	24000688 	.word	0x24000688
 8000c84:	080153bc 	.word	0x080153bc

08000c88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b09c      	sub	sp, #112	; 0x70
 8000c8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c92:	224c      	movs	r2, #76	; 0x4c
 8000c94:	2100      	movs	r1, #0
 8000c96:	4618      	mov	r0, r3
 8000c98:	f013 fa98 	bl	80141cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c9c:	1d3b      	adds	r3, r7, #4
 8000c9e:	2220      	movs	r2, #32
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f013 fa92 	bl	80141cc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000ca8:	2002      	movs	r0, #2
 8000caa:	f007 fbe5 	bl	8008478 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000cae:	2300      	movs	r3, #0
 8000cb0:	603b      	str	r3, [r7, #0]
 8000cb2:	4b33      	ldr	r3, [pc, #204]	; (8000d80 <SystemClock_Config+0xf8>)
 8000cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cb6:	4a32      	ldr	r2, [pc, #200]	; (8000d80 <SystemClock_Config+0xf8>)
 8000cb8:	f023 0301 	bic.w	r3, r3, #1
 8000cbc:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000cbe:	4b30      	ldr	r3, [pc, #192]	; (8000d80 <SystemClock_Config+0xf8>)
 8000cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cc2:	f003 0301 	and.w	r3, r3, #1
 8000cc6:	603b      	str	r3, [r7, #0]
 8000cc8:	4b2e      	ldr	r3, [pc, #184]	; (8000d84 <SystemClock_Config+0xfc>)
 8000cca:	699b      	ldr	r3, [r3, #24]
 8000ccc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000cd0:	4a2c      	ldr	r2, [pc, #176]	; (8000d84 <SystemClock_Config+0xfc>)
 8000cd2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cd6:	6193      	str	r3, [r2, #24]
 8000cd8:	4b2a      	ldr	r3, [pc, #168]	; (8000d84 <SystemClock_Config+0xfc>)
 8000cda:	699b      	ldr	r3, [r3, #24]
 8000cdc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ce0:	603b      	str	r3, [r7, #0]
 8000ce2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ce4:	bf00      	nop
 8000ce6:	4b27      	ldr	r3, [pc, #156]	; (8000d84 <SystemClock_Config+0xfc>)
 8000ce8:	699b      	ldr	r3, [r3, #24]
 8000cea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000cf2:	d1f8      	bne.n	8000ce6 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000cf4:	230a      	movs	r3, #10
 8000cf6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cfc:	2340      	movs	r3, #64	; 0x40
 8000cfe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000d00:	2301      	movs	r3, #1
 8000d02:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d04:	2302      	movs	r3, #2
 8000d06:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d0c:	2304      	movs	r3, #4
 8000d0e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000d10:	230c      	movs	r3, #12
 8000d12:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 4;
 8000d14:	2304      	movs	r3, #4
 8000d16:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000d20:	230c      	movs	r3, #12
 8000d22:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d24:	2300      	movs	r3, #0
 8000d26:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d30:	4618      	mov	r0, r3
 8000d32:	f007 fbdb 	bl	80084ec <HAL_RCC_OscConfig>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000d3c:	f001 f9f6 	bl	800212c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d40:	233f      	movs	r3, #63	; 0x3f
 8000d42:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d44:	2303      	movs	r3, #3
 8000d46:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000d50:	2300      	movs	r3, #0
 8000d52:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d54:	2340      	movs	r3, #64	; 0x40
 8000d56:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d5c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d62:	1d3b      	adds	r3, r7, #4
 8000d64:	2101      	movs	r1, #1
 8000d66:	4618      	mov	r0, r3
 8000d68:	f008 f81a 	bl	8008da0 <HAL_RCC_ClockConfig>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000d72:	f001 f9db 	bl	800212c <Error_Handler>
  }
}
 8000d76:	bf00      	nop
 8000d78:	3770      	adds	r7, #112	; 0x70
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	58000400 	.word	0x58000400
 8000d84:	58024800 	.word	0x58024800

08000d88 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b0b0      	sub	sp, #192	; 0xc0
 8000d8c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d8e:	463b      	mov	r3, r7
 8000d90:	22c0      	movs	r2, #192	; 0xc0
 8000d92:	2100      	movs	r1, #0
 8000d94:	4618      	mov	r0, r3
 8000d96:	f013 fa19 	bl	80141cc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d9a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000d9e:	f04f 0300 	mov.w	r3, #0
 8000da2:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000da6:	2304      	movs	r3, #4
 8000da8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 8000daa:	2309      	movs	r3, #9
 8000dac:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8000dae:	2304      	movs	r3, #4
 8000db0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000db2:	2302      	movs	r3, #2
 8000db4:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000db6:	2302      	movs	r3, #2
 8000db8:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000dba:	23c0      	movs	r3, #192	; 0xc0
 8000dbc:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000dbe:	2320      	movs	r3, #32
 8000dc0:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 8000dc2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000dc6:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dce:	463b      	mov	r3, r7
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f008 fbb3 	bl	800953c <HAL_RCCEx_PeriphCLKConfig>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 8000ddc:	f001 f9a6 	bl	800212c <Error_Handler>
  }
}
 8000de0:	bf00      	nop
 8000de2:	37c0      	adds	r7, #192	; 0xc0
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b08a      	sub	sp, #40	; 0x28
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000dee:	f107 031c 	add.w	r3, r7, #28
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	605a      	str	r2, [r3, #4]
 8000df8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]
 8000e04:	60da      	str	r2, [r3, #12]
 8000e06:	611a      	str	r2, [r3, #16]
 8000e08:	615a      	str	r2, [r3, #20]
 8000e0a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e0c:	4b7c      	ldr	r3, [pc, #496]	; (8001000 <MX_ADC1_Init+0x218>)
 8000e0e:	4a7d      	ldr	r2, [pc, #500]	; (8001004 <MX_ADC1_Init+0x21c>)
 8000e10:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000e12:	4b7b      	ldr	r3, [pc, #492]	; (8001000 <MX_ADC1_Init+0x218>)
 8000e14:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000e18:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e1a:	4b79      	ldr	r3, [pc, #484]	; (8001000 <MX_ADC1_Init+0x218>)
 8000e1c:	2208      	movs	r2, #8
 8000e1e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000e20:	4b77      	ldr	r3, [pc, #476]	; (8001000 <MX_ADC1_Init+0x218>)
 8000e22:	2201      	movs	r2, #1
 8000e24:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e26:	4b76      	ldr	r3, [pc, #472]	; (8001000 <MX_ADC1_Init+0x218>)
 8000e28:	2204      	movs	r2, #4
 8000e2a:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e2c:	4b74      	ldr	r3, [pc, #464]	; (8001000 <MX_ADC1_Init+0x218>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e32:	4b73      	ldr	r3, [pc, #460]	; (8001000 <MX_ADC1_Init+0x218>)
 8000e34:	2201      	movs	r2, #1
 8000e36:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 8000e38:	4b71      	ldr	r3, [pc, #452]	; (8001000 <MX_ADC1_Init+0x218>)
 8000e3a:	220b      	movs	r2, #11
 8000e3c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e3e:	4b70      	ldr	r3, [pc, #448]	; (8001000 <MX_ADC1_Init+0x218>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e44:	4b6e      	ldr	r3, [pc, #440]	; (8001000 <MX_ADC1_Init+0x218>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e4a:	4b6d      	ldr	r3, [pc, #436]	; (8001000 <MX_ADC1_Init+0x218>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000e50:	4b6b      	ldr	r3, [pc, #428]	; (8001000 <MX_ADC1_Init+0x218>)
 8000e52:	2203      	movs	r2, #3
 8000e54:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000e56:	4b6a      	ldr	r3, [pc, #424]	; (8001000 <MX_ADC1_Init+0x218>)
 8000e58:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e5c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000e5e:	4b68      	ldr	r3, [pc, #416]	; (8001000 <MX_ADC1_Init+0x218>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000e64:	4b66      	ldr	r3, [pc, #408]	; (8001000 <MX_ADC1_Init+0x218>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e6c:	4864      	ldr	r0, [pc, #400]	; (8001000 <MX_ADC1_Init+0x218>)
 8000e6e:	f002 fac5 	bl	80033fc <HAL_ADC_Init>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000e78:	f001 f958 	bl	800212c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000e80:	f107 031c 	add.w	r3, r7, #28
 8000e84:	4619      	mov	r1, r3
 8000e86:	485e      	ldr	r0, [pc, #376]	; (8001000 <MX_ADC1_Init+0x218>)
 8000e88:	f003 fbe0 	bl	800464c <HAL_ADCEx_MultiModeConfigChannel>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000e92:	f001 f94b 	bl	800212c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000e96:	4b5c      	ldr	r3, [pc, #368]	; (8001008 <MX_ADC1_Init+0x220>)
 8000e98:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e9a:	2306      	movs	r3, #6
 8000e9c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8000e9e:	2307      	movs	r3, #7
 8000ea0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ea2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000ea6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ea8:	2304      	movs	r3, #4
 8000eaa:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000eac:	2300      	movs	r3, #0
 8000eae:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eb4:	463b      	mov	r3, r7
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4851      	ldr	r0, [pc, #324]	; (8001000 <MX_ADC1_Init+0x218>)
 8000eba:	f002 fd23 	bl	8003904 <HAL_ADC_ConfigChannel>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8000ec4:	f001 f932 	bl	800212c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000ec8:	4b50      	ldr	r3, [pc, #320]	; (800100c <MX_ADC1_Init+0x224>)
 8000eca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000ecc:	230c      	movs	r3, #12
 8000ece:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ed0:	463b      	mov	r3, r7
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	484a      	ldr	r0, [pc, #296]	; (8001000 <MX_ADC1_Init+0x218>)
 8000ed6:	f002 fd15 	bl	8003904 <HAL_ADC_ConfigChannel>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8000ee0:	f001 f924 	bl	800212c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000ee4:	4b4a      	ldr	r3, [pc, #296]	; (8001010 <MX_ADC1_Init+0x228>)
 8000ee6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000ee8:	2312      	movs	r3, #18
 8000eea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eec:	463b      	mov	r3, r7
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4843      	ldr	r0, [pc, #268]	; (8001000 <MX_ADC1_Init+0x218>)
 8000ef2:	f002 fd07 	bl	8003904 <HAL_ADC_ConfigChannel>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 8000efc:	f001 f916 	bl	800212c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000f00:	4b44      	ldr	r3, [pc, #272]	; (8001014 <MX_ADC1_Init+0x22c>)
 8000f02:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000f04:	2318      	movs	r3, #24
 8000f06:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f08:	463b      	mov	r3, r7
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	483c      	ldr	r0, [pc, #240]	; (8001000 <MX_ADC1_Init+0x218>)
 8000f0e:	f002 fcf9 	bl	8003904 <HAL_ADC_ConfigChannel>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8000f18:	f001 f908 	bl	800212c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000f1c:	4b3e      	ldr	r3, [pc, #248]	; (8001018 <MX_ADC1_Init+0x230>)
 8000f1e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000f20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f24:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f26:	463b      	mov	r3, r7
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4835      	ldr	r0, [pc, #212]	; (8001000 <MX_ADC1_Init+0x218>)
 8000f2c:	f002 fcea 	bl	8003904 <HAL_ADC_ConfigChannel>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8000f36:	f001 f8f9 	bl	800212c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000f3a:	4b38      	ldr	r3, [pc, #224]	; (800101c <MX_ADC1_Init+0x234>)
 8000f3c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000f3e:	f44f 7383 	mov.w	r3, #262	; 0x106
 8000f42:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f44:	463b      	mov	r3, r7
 8000f46:	4619      	mov	r1, r3
 8000f48:	482d      	ldr	r0, [pc, #180]	; (8001000 <MX_ADC1_Init+0x218>)
 8000f4a:	f002 fcdb 	bl	8003904 <HAL_ADC_ConfigChannel>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8000f54:	f001 f8ea 	bl	800212c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000f58:	4b31      	ldr	r3, [pc, #196]	; (8001020 <MX_ADC1_Init+0x238>)
 8000f5a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000f5c:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8000f60:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f62:	463b      	mov	r3, r7
 8000f64:	4619      	mov	r1, r3
 8000f66:	4826      	ldr	r0, [pc, #152]	; (8001000 <MX_ADC1_Init+0x218>)
 8000f68:	f002 fccc 	bl	8003904 <HAL_ADC_ConfigChannel>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 8000f72:	f001 f8db 	bl	800212c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000f76:	4b2b      	ldr	r3, [pc, #172]	; (8001024 <MX_ADC1_Init+0x23c>)
 8000f78:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000f7a:	f44f 7389 	mov.w	r3, #274	; 0x112
 8000f7e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f80:	463b      	mov	r3, r7
 8000f82:	4619      	mov	r1, r3
 8000f84:	481e      	ldr	r0, [pc, #120]	; (8001000 <MX_ADC1_Init+0x218>)
 8000f86:	f002 fcbd 	bl	8003904 <HAL_ADC_ConfigChannel>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 8000f90:	f001 f8cc 	bl	800212c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000f94:	4b24      	ldr	r3, [pc, #144]	; (8001028 <MX_ADC1_Init+0x240>)
 8000f96:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000f98:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000f9c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f9e:	463b      	mov	r3, r7
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4817      	ldr	r0, [pc, #92]	; (8001000 <MX_ADC1_Init+0x218>)
 8000fa4:	f002 fcae 	bl	8003904 <HAL_ADC_ConfigChannel>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 8000fae:	f001 f8bd 	bl	800212c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000fb2:	4b1e      	ldr	r3, [pc, #120]	; (800102c <MX_ADC1_Init+0x244>)
 8000fb4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000fb6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fc0:	463b      	mov	r3, r7
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	480e      	ldr	r0, [pc, #56]	; (8001000 <MX_ADC1_Init+0x218>)
 8000fc6:	f002 fc9d 	bl	8003904 <HAL_ADC_ConfigChannel>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <MX_ADC1_Init+0x1ec>
  {
    Error_Handler();
 8000fd0:	f001 f8ac 	bl	800212c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8000fd4:	4b16      	ldr	r3, [pc, #88]	; (8001030 <MX_ADC1_Init+0x248>)
 8000fd6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8000fd8:	f240 2306 	movw	r3, #518	; 0x206
 8000fdc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8000fde:	2307      	movs	r3, #7
 8000fe0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fe2:	463b      	mov	r3, r7
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4806      	ldr	r0, [pc, #24]	; (8001000 <MX_ADC1_Init+0x218>)
 8000fe8:	f002 fc8c 	bl	8003904 <HAL_ADC_ConfigChannel>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_ADC1_Init+0x20e>
  {
    Error_Handler();
 8000ff2:	f001 f89b 	bl	800212c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ff6:	bf00      	nop
 8000ff8:	3728      	adds	r7, #40	; 0x28
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	2400011c 	.word	0x2400011c
 8001004:	40022000 	.word	0x40022000
 8001008:	0c900008 	.word	0x0c900008
 800100c:	10c00010 	.word	0x10c00010
 8001010:	14f00020 	.word	0x14f00020
 8001014:	1d500080 	.word	0x1d500080
 8001018:	21800100 	.word	0x21800100
 800101c:	25b00200 	.word	0x25b00200
 8001020:	2a000400 	.word	0x2a000400
 8001024:	2e300800 	.word	0x2e300800
 8001028:	3ac04000 	.word	0x3ac04000
 800102c:	3ef08000 	.word	0x3ef08000
 8001030:	47520000 	.word	0x47520000

08001034 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b088      	sub	sp, #32
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800103a:	1d3b      	adds	r3, r7, #4
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]
 8001046:	611a      	str	r2, [r3, #16]
 8001048:	615a      	str	r2, [r3, #20]
 800104a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800104c:	4b3d      	ldr	r3, [pc, #244]	; (8001144 <MX_ADC3_Init+0x110>)
 800104e:	4a3e      	ldr	r2, [pc, #248]	; (8001148 <MX_ADC3_Init+0x114>)
 8001050:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001052:	4b3c      	ldr	r3, [pc, #240]	; (8001144 <MX_ADC3_Init+0x110>)
 8001054:	2208      	movs	r2, #8
 8001056:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001058:	4b3a      	ldr	r3, [pc, #232]	; (8001144 <MX_ADC3_Init+0x110>)
 800105a:	2201      	movs	r2, #1
 800105c:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800105e:	4b39      	ldr	r3, [pc, #228]	; (8001144 <MX_ADC3_Init+0x110>)
 8001060:	2204      	movs	r2, #4
 8001062:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001064:	4b37      	ldr	r3, [pc, #220]	; (8001144 <MX_ADC3_Init+0x110>)
 8001066:	2200      	movs	r2, #0
 8001068:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800106a:	4b36      	ldr	r3, [pc, #216]	; (8001144 <MX_ADC3_Init+0x110>)
 800106c:	2201      	movs	r2, #1
 800106e:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 8001070:	4b34      	ldr	r3, [pc, #208]	; (8001144 <MX_ADC3_Init+0x110>)
 8001072:	2204      	movs	r2, #4
 8001074:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001076:	4b33      	ldr	r3, [pc, #204]	; (8001144 <MX_ADC3_Init+0x110>)
 8001078:	2200      	movs	r2, #0
 800107a:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800107c:	4b31      	ldr	r3, [pc, #196]	; (8001144 <MX_ADC3_Init+0x110>)
 800107e:	2200      	movs	r2, #0
 8001080:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001082:	4b30      	ldr	r3, [pc, #192]	; (8001144 <MX_ADC3_Init+0x110>)
 8001084:	2200      	movs	r2, #0
 8001086:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001088:	4b2e      	ldr	r3, [pc, #184]	; (8001144 <MX_ADC3_Init+0x110>)
 800108a:	2203      	movs	r2, #3
 800108c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800108e:	4b2d      	ldr	r3, [pc, #180]	; (8001144 <MX_ADC3_Init+0x110>)
 8001090:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001094:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001096:	4b2b      	ldr	r3, [pc, #172]	; (8001144 <MX_ADC3_Init+0x110>)
 8001098:	2200      	movs	r2, #0
 800109a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 800109c:	4b29      	ldr	r3, [pc, #164]	; (8001144 <MX_ADC3_Init+0x110>)
 800109e:	2200      	movs	r2, #0
 80010a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80010a4:	4827      	ldr	r0, [pc, #156]	; (8001144 <MX_ADC3_Init+0x110>)
 80010a6:	f002 f9a9 	bl	80033fc <HAL_ADC_Init>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 80010b0:	f001 f83c 	bl	800212c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80010b4:	4b25      	ldr	r3, [pc, #148]	; (800114c <MX_ADC3_Init+0x118>)
 80010b6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010b8:	2306      	movs	r3, #6
 80010ba:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80010bc:	2307      	movs	r3, #7
 80010be:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010c0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80010c4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010c6:	2304      	movs	r3, #4
 80010c8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80010ce:	2300      	movs	r3, #0
 80010d0:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80010d2:	1d3b      	adds	r3, r7, #4
 80010d4:	4619      	mov	r1, r3
 80010d6:	481b      	ldr	r0, [pc, #108]	; (8001144 <MX_ADC3_Init+0x110>)
 80010d8:	f002 fc14 	bl	8003904 <HAL_ADC_ConfigChannel>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80010e2:	f001 f823 	bl	800212c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80010e6:	4b1a      	ldr	r3, [pc, #104]	; (8001150 <MX_ADC3_Init+0x11c>)
 80010e8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80010ea:	230c      	movs	r3, #12
 80010ec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80010ee:	1d3b      	adds	r3, r7, #4
 80010f0:	4619      	mov	r1, r3
 80010f2:	4814      	ldr	r0, [pc, #80]	; (8001144 <MX_ADC3_Init+0x110>)
 80010f4:	f002 fc06 	bl	8003904 <HAL_ADC_ConfigChannel>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 80010fe:	f001 f815 	bl	800212c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001102:	2301      	movs	r3, #1
 8001104:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001106:	2312      	movs	r3, #18
 8001108:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800110a:	1d3b      	adds	r3, r7, #4
 800110c:	4619      	mov	r1, r3
 800110e:	480d      	ldr	r0, [pc, #52]	; (8001144 <MX_ADC3_Init+0x110>)
 8001110:	f002 fbf8 	bl	8003904 <HAL_ADC_ConfigChannel>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 800111a:	f001 f807 	bl	800212c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800111e:	4b0d      	ldr	r3, [pc, #52]	; (8001154 <MX_ADC3_Init+0x120>)
 8001120:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001122:	2318      	movs	r3, #24
 8001124:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001126:	1d3b      	adds	r3, r7, #4
 8001128:	4619      	mov	r1, r3
 800112a:	4806      	ldr	r0, [pc, #24]	; (8001144 <MX_ADC3_Init+0x110>)
 800112c:	f002 fbea 	bl	8003904 <HAL_ADC_ConfigChannel>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 8001136:	f000 fff9 	bl	800212c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800113a:	bf00      	nop
 800113c:	3720      	adds	r7, #32
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	24000180 	.word	0x24000180
 8001148:	58026000 	.word	0x58026000
 800114c:	cb840000 	.word	0xcb840000
 8001150:	cfb80000 	.word	0xcfb80000
 8001154:	04300002 	.word	0x04300002

08001158 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b08a      	sub	sp, #40	; 0x28
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800115e:	1d3b      	adds	r3, r7, #4
 8001160:	2224      	movs	r2, #36	; 0x24
 8001162:	2100      	movs	r1, #0
 8001164:	4618      	mov	r0, r3
 8001166:	f013 f831 	bl	80141cc <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800116a:	4b12      	ldr	r3, [pc, #72]	; (80011b4 <MX_DAC1_Init+0x5c>)
 800116c:	4a12      	ldr	r2, [pc, #72]	; (80011b8 <MX_DAC1_Init+0x60>)
 800116e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001170:	4810      	ldr	r0, [pc, #64]	; (80011b4 <MX_DAC1_Init+0x5c>)
 8001172:	f003 fc29 	bl	80049c8 <HAL_DAC_Init>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800117c:	f000 ffd6 	bl	800212c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001180:	2300      	movs	r3, #0
 8001182:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001184:	230a      	movs	r3, #10
 8001186:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001188:	2300      	movs	r3, #0
 800118a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800118c:	2301      	movs	r3, #1
 800118e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001194:	1d3b      	adds	r3, r7, #4
 8001196:	2200      	movs	r2, #0
 8001198:	4619      	mov	r1, r3
 800119a:	4806      	ldr	r0, [pc, #24]	; (80011b4 <MX_DAC1_Init+0x5c>)
 800119c:	f003 fe44 	bl	8004e28 <HAL_DAC_ConfigChannel>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80011a6:	f000 ffc1 	bl	800212c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80011aa:	bf00      	nop
 80011ac:	3728      	adds	r7, #40	; 0x28
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	240002d4 	.word	0x240002d4
 80011b8:	40007400 	.word	0x40007400

080011bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011c0:	4b1b      	ldr	r3, [pc, #108]	; (8001230 <MX_I2C1_Init+0x74>)
 80011c2:	4a1c      	ldr	r2, [pc, #112]	; (8001234 <MX_I2C1_Init+0x78>)
 80011c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00506682;
 80011c6:	4b1a      	ldr	r3, [pc, #104]	; (8001230 <MX_I2C1_Init+0x74>)
 80011c8:	4a1b      	ldr	r2, [pc, #108]	; (8001238 <MX_I2C1_Init+0x7c>)
 80011ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80011cc:	4b18      	ldr	r3, [pc, #96]	; (8001230 <MX_I2C1_Init+0x74>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011d2:	4b17      	ldr	r3, [pc, #92]	; (8001230 <MX_I2C1_Init+0x74>)
 80011d4:	2201      	movs	r2, #1
 80011d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011d8:	4b15      	ldr	r3, [pc, #84]	; (8001230 <MX_I2C1_Init+0x74>)
 80011da:	2200      	movs	r2, #0
 80011dc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80011de:	4b14      	ldr	r3, [pc, #80]	; (8001230 <MX_I2C1_Init+0x74>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011e4:	4b12      	ldr	r3, [pc, #72]	; (8001230 <MX_I2C1_Init+0x74>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011ea:	4b11      	ldr	r3, [pc, #68]	; (8001230 <MX_I2C1_Init+0x74>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011f0:	4b0f      	ldr	r3, [pc, #60]	; (8001230 <MX_I2C1_Init+0x74>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011f6:	480e      	ldr	r0, [pc, #56]	; (8001230 <MX_I2C1_Init+0x74>)
 80011f8:	f007 f80a 	bl	8008210 <HAL_I2C_Init>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001202:	f000 ff93 	bl	800212c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001206:	2100      	movs	r1, #0
 8001208:	4809      	ldr	r0, [pc, #36]	; (8001230 <MX_I2C1_Init+0x74>)
 800120a:	f007 f89d 	bl	8008348 <HAL_I2CEx_ConfigAnalogFilter>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001214:	f000 ff8a 	bl	800212c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001218:	2100      	movs	r1, #0
 800121a:	4805      	ldr	r0, [pc, #20]	; (8001230 <MX_I2C1_Init+0x74>)
 800121c:	f007 f8df 	bl	80083de <HAL_I2CEx_ConfigDigitalFilter>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001226:	f000 ff81 	bl	800212c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	24000360 	.word	0x24000360
 8001234:	40005400 	.word	0x40005400
 8001238:	00506682 	.word	0x00506682

0800123c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001242:	1d3b      	adds	r3, r7, #4
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
 800124e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001250:	2300      	movs	r3, #0
 8001252:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001254:	4b25      	ldr	r3, [pc, #148]	; (80012ec <MX_RTC_Init+0xb0>)
 8001256:	4a26      	ldr	r2, [pc, #152]	; (80012f0 <MX_RTC_Init+0xb4>)
 8001258:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800125a:	4b24      	ldr	r3, [pc, #144]	; (80012ec <MX_RTC_Init+0xb0>)
 800125c:	2200      	movs	r2, #0
 800125e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001260:	4b22      	ldr	r3, [pc, #136]	; (80012ec <MX_RTC_Init+0xb0>)
 8001262:	227f      	movs	r2, #127	; 0x7f
 8001264:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001266:	4b21      	ldr	r3, [pc, #132]	; (80012ec <MX_RTC_Init+0xb0>)
 8001268:	22ff      	movs	r2, #255	; 0xff
 800126a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800126c:	4b1f      	ldr	r3, [pc, #124]	; (80012ec <MX_RTC_Init+0xb0>)
 800126e:	2200      	movs	r2, #0
 8001270:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001272:	4b1e      	ldr	r3, [pc, #120]	; (80012ec <MX_RTC_Init+0xb0>)
 8001274:	2200      	movs	r2, #0
 8001276:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001278:	4b1c      	ldr	r3, [pc, #112]	; (80012ec <MX_RTC_Init+0xb0>)
 800127a:	2200      	movs	r2, #0
 800127c:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800127e:	4b1b      	ldr	r3, [pc, #108]	; (80012ec <MX_RTC_Init+0xb0>)
 8001280:	2200      	movs	r2, #0
 8001282:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001284:	4819      	ldr	r0, [pc, #100]	; (80012ec <MX_RTC_Init+0xb0>)
 8001286:	f00a fe57 	bl	800bf38 <HAL_RTC_Init>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8001290:	f000 ff4c 	bl	800212c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001294:	2300      	movs	r3, #0
 8001296:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001298:	2300      	movs	r3, #0
 800129a:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800129c:	2300      	movs	r3, #0
 800129e:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80012a0:	2300      	movs	r3, #0
 80012a2:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80012a4:	2300      	movs	r3, #0
 80012a6:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80012a8:	1d3b      	adds	r3, r7, #4
 80012aa:	2201      	movs	r2, #1
 80012ac:	4619      	mov	r1, r3
 80012ae:	480f      	ldr	r0, [pc, #60]	; (80012ec <MX_RTC_Init+0xb0>)
 80012b0:	f00a fec4 	bl	800c03c <HAL_RTC_SetTime>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80012ba:	f000 ff37 	bl	800212c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80012be:	2301      	movs	r3, #1
 80012c0:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80012c2:	2301      	movs	r3, #1
 80012c4:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80012c6:	2301      	movs	r3, #1
 80012c8:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80012ca:	2300      	movs	r3, #0
 80012cc:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80012ce:	463b      	mov	r3, r7
 80012d0:	2201      	movs	r2, #1
 80012d2:	4619      	mov	r1, r3
 80012d4:	4805      	ldr	r0, [pc, #20]	; (80012ec <MX_RTC_Init+0xb0>)
 80012d6:	f00a ffab 	bl	800c230 <HAL_RTC_SetDate>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 80012e0:	f000 ff24 	bl	800212c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80012e4:	bf00      	nop
 80012e6:	3718      	adds	r7, #24
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	240003b4 	.word	0x240003b4
 80012f0:	58004000 	.word	0x58004000

080012f4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80012f8:	4b28      	ldr	r3, [pc, #160]	; (800139c <MX_SPI1_Init+0xa8>)
 80012fa:	4a29      	ldr	r2, [pc, #164]	; (80013a0 <MX_SPI1_Init+0xac>)
 80012fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012fe:	4b27      	ldr	r3, [pc, #156]	; (800139c <MX_SPI1_Init+0xa8>)
 8001300:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001304:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001306:	4b25      	ldr	r3, [pc, #148]	; (800139c <MX_SPI1_Init+0xa8>)
 8001308:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800130c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800130e:	4b23      	ldr	r3, [pc, #140]	; (800139c <MX_SPI1_Init+0xa8>)
 8001310:	220f      	movs	r2, #15
 8001312:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001314:	4b21      	ldr	r3, [pc, #132]	; (800139c <MX_SPI1_Init+0xa8>)
 8001316:	2200      	movs	r2, #0
 8001318:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800131a:	4b20      	ldr	r3, [pc, #128]	; (800139c <MX_SPI1_Init+0xa8>)
 800131c:	2200      	movs	r2, #0
 800131e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001320:	4b1e      	ldr	r3, [pc, #120]	; (800139c <MX_SPI1_Init+0xa8>)
 8001322:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001326:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001328:	4b1c      	ldr	r3, [pc, #112]	; (800139c <MX_SPI1_Init+0xa8>)
 800132a:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800132e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001330:	4b1a      	ldr	r3, [pc, #104]	; (800139c <MX_SPI1_Init+0xa8>)
 8001332:	2200      	movs	r2, #0
 8001334:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001336:	4b19      	ldr	r3, [pc, #100]	; (800139c <MX_SPI1_Init+0xa8>)
 8001338:	2200      	movs	r2, #0
 800133a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800133c:	4b17      	ldr	r3, [pc, #92]	; (800139c <MX_SPI1_Init+0xa8>)
 800133e:	2200      	movs	r2, #0
 8001340:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001342:	4b16      	ldr	r3, [pc, #88]	; (800139c <MX_SPI1_Init+0xa8>)
 8001344:	2200      	movs	r2, #0
 8001346:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001348:	4b14      	ldr	r3, [pc, #80]	; (800139c <MX_SPI1_Init+0xa8>)
 800134a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800134e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001350:	4b12      	ldr	r3, [pc, #72]	; (800139c <MX_SPI1_Init+0xa8>)
 8001352:	2200      	movs	r2, #0
 8001354:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001356:	4b11      	ldr	r3, [pc, #68]	; (800139c <MX_SPI1_Init+0xa8>)
 8001358:	2200      	movs	r2, #0
 800135a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800135c:	4b0f      	ldr	r3, [pc, #60]	; (800139c <MX_SPI1_Init+0xa8>)
 800135e:	2200      	movs	r2, #0
 8001360:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001362:	4b0e      	ldr	r3, [pc, #56]	; (800139c <MX_SPI1_Init+0xa8>)
 8001364:	2200      	movs	r2, #0
 8001366:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001368:	4b0c      	ldr	r3, [pc, #48]	; (800139c <MX_SPI1_Init+0xa8>)
 800136a:	2200      	movs	r2, #0
 800136c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800136e:	4b0b      	ldr	r3, [pc, #44]	; (800139c <MX_SPI1_Init+0xa8>)
 8001370:	2200      	movs	r2, #0
 8001372:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001374:	4b09      	ldr	r3, [pc, #36]	; (800139c <MX_SPI1_Init+0xa8>)
 8001376:	2200      	movs	r2, #0
 8001378:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800137a:	4b08      	ldr	r3, [pc, #32]	; (800139c <MX_SPI1_Init+0xa8>)
 800137c:	2200      	movs	r2, #0
 800137e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001380:	4b06      	ldr	r3, [pc, #24]	; (800139c <MX_SPI1_Init+0xa8>)
 8001382:	2200      	movs	r2, #0
 8001384:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001386:	4805      	ldr	r0, [pc, #20]	; (800139c <MX_SPI1_Init+0xa8>)
 8001388:	f00b f8f8 	bl	800c57c <HAL_SPI_Init>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8001392:	f000 fecb 	bl	800212c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	240003d8 	.word	0x240003d8
 80013a0:	40013000 	.word	0x40013000

080013a4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80013a8:	4b28      	ldr	r3, [pc, #160]	; (800144c <MX_SPI2_Init+0xa8>)
 80013aa:	4a29      	ldr	r2, [pc, #164]	; (8001450 <MX_SPI2_Init+0xac>)
 80013ac:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80013ae:	4b27      	ldr	r3, [pc, #156]	; (800144c <MX_SPI2_Init+0xa8>)
 80013b0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80013b4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80013b6:	4b25      	ldr	r3, [pc, #148]	; (800144c <MX_SPI2_Init+0xa8>)
 80013b8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80013bc:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80013be:	4b23      	ldr	r3, [pc, #140]	; (800144c <MX_SPI2_Init+0xa8>)
 80013c0:	220f      	movs	r2, #15
 80013c2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013c4:	4b21      	ldr	r3, [pc, #132]	; (800144c <MX_SPI2_Init+0xa8>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013ca:	4b20      	ldr	r3, [pc, #128]	; (800144c <MX_SPI2_Init+0xa8>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80013d0:	4b1e      	ldr	r3, [pc, #120]	; (800144c <MX_SPI2_Init+0xa8>)
 80013d2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80013d6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80013d8:	4b1c      	ldr	r3, [pc, #112]	; (800144c <MX_SPI2_Init+0xa8>)
 80013da:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80013de:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013e0:	4b1a      	ldr	r3, [pc, #104]	; (800144c <MX_SPI2_Init+0xa8>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80013e6:	4b19      	ldr	r3, [pc, #100]	; (800144c <MX_SPI2_Init+0xa8>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013ec:	4b17      	ldr	r3, [pc, #92]	; (800144c <MX_SPI2_Init+0xa8>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80013f2:	4b16      	ldr	r3, [pc, #88]	; (800144c <MX_SPI2_Init+0xa8>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80013f8:	4b14      	ldr	r3, [pc, #80]	; (800144c <MX_SPI2_Init+0xa8>)
 80013fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013fe:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001400:	4b12      	ldr	r3, [pc, #72]	; (800144c <MX_SPI2_Init+0xa8>)
 8001402:	2200      	movs	r2, #0
 8001404:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001406:	4b11      	ldr	r3, [pc, #68]	; (800144c <MX_SPI2_Init+0xa8>)
 8001408:	2200      	movs	r2, #0
 800140a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800140c:	4b0f      	ldr	r3, [pc, #60]	; (800144c <MX_SPI2_Init+0xa8>)
 800140e:	2200      	movs	r2, #0
 8001410:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001412:	4b0e      	ldr	r3, [pc, #56]	; (800144c <MX_SPI2_Init+0xa8>)
 8001414:	2200      	movs	r2, #0
 8001416:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001418:	4b0c      	ldr	r3, [pc, #48]	; (800144c <MX_SPI2_Init+0xa8>)
 800141a:	2200      	movs	r2, #0
 800141c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800141e:	4b0b      	ldr	r3, [pc, #44]	; (800144c <MX_SPI2_Init+0xa8>)
 8001420:	2200      	movs	r2, #0
 8001422:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001424:	4b09      	ldr	r3, [pc, #36]	; (800144c <MX_SPI2_Init+0xa8>)
 8001426:	2200      	movs	r2, #0
 8001428:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800142a:	4b08      	ldr	r3, [pc, #32]	; (800144c <MX_SPI2_Init+0xa8>)
 800142c:	2200      	movs	r2, #0
 800142e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001430:	4b06      	ldr	r3, [pc, #24]	; (800144c <MX_SPI2_Init+0xa8>)
 8001432:	2200      	movs	r2, #0
 8001434:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001436:	4805      	ldr	r0, [pc, #20]	; (800144c <MX_SPI2_Init+0xa8>)
 8001438:	f00b f8a0 	bl	800c57c <HAL_SPI_Init>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 8001442:	f000 fe73 	bl	800212c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	24000460 	.word	0x24000460
 8001450:	40003800 	.word	0x40003800

08001454 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b09a      	sub	sp, #104	; 0x68
 8001458:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800145a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	605a      	str	r2, [r3, #4]
 8001464:	609a      	str	r2, [r3, #8]
 8001466:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001468:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001474:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	60da      	str	r2, [r3, #12]
 8001482:	611a      	str	r2, [r3, #16]
 8001484:	615a      	str	r2, [r3, #20]
 8001486:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001488:	1d3b      	adds	r3, r7, #4
 800148a:	222c      	movs	r2, #44	; 0x2c
 800148c:	2100      	movs	r1, #0
 800148e:	4618      	mov	r0, r3
 8001490:	f012 fe9c 	bl	80141cc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001494:	4b44      	ldr	r3, [pc, #272]	; (80015a8 <MX_TIM1_Init+0x154>)
 8001496:	4a45      	ldr	r2, [pc, #276]	; (80015ac <MX_TIM1_Init+0x158>)
 8001498:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 96-1;
 800149a:	4b43      	ldr	r3, [pc, #268]	; (80015a8 <MX_TIM1_Init+0x154>)
 800149c:	225f      	movs	r2, #95	; 0x5f
 800149e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014a0:	4b41      	ldr	r3, [pc, #260]	; (80015a8 <MX_TIM1_Init+0x154>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 80014a6:	4b40      	ldr	r3, [pc, #256]	; (80015a8 <MX_TIM1_Init+0x154>)
 80014a8:	f24f 4223 	movw	r2, #62499	; 0xf423
 80014ac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ae:	4b3e      	ldr	r3, [pc, #248]	; (80015a8 <MX_TIM1_Init+0x154>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014b4:	4b3c      	ldr	r3, [pc, #240]	; (80015a8 <MX_TIM1_Init+0x154>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ba:	4b3b      	ldr	r3, [pc, #236]	; (80015a8 <MX_TIM1_Init+0x154>)
 80014bc:	2200      	movs	r2, #0
 80014be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014c0:	4839      	ldr	r0, [pc, #228]	; (80015a8 <MX_TIM1_Init+0x154>)
 80014c2:	f00b f99a 	bl	800c7fa <HAL_TIM_Base_Init>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80014cc:	f000 fe2e 	bl	800212c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014d4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80014d6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80014da:	4619      	mov	r1, r3
 80014dc:	4832      	ldr	r0, [pc, #200]	; (80015a8 <MX_TIM1_Init+0x154>)
 80014de:	f00b ffd9 	bl	800d494 <HAL_TIM_ConfigClockSource>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80014e8:	f000 fe20 	bl	800212c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80014ec:	482e      	ldr	r0, [pc, #184]	; (80015a8 <MX_TIM1_Init+0x154>)
 80014ee:	f00b fc45 	bl	800cd7c <HAL_TIM_PWM_Init>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80014f8:	f000 fe18 	bl	800212c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014fc:	2300      	movs	r3, #0
 80014fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001500:	2300      	movs	r3, #0
 8001502:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001504:	2300      	movs	r3, #0
 8001506:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001508:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800150c:	4619      	mov	r1, r3
 800150e:	4826      	ldr	r0, [pc, #152]	; (80015a8 <MX_TIM1_Init+0x154>)
 8001510:	f00c fd16 	bl	800df40 <HAL_TIMEx_MasterConfigSynchronization>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800151a:	f000 fe07 	bl	800212c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800151e:	2360      	movs	r3, #96	; 0x60
 8001520:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 8001522:	f240 13df 	movw	r3, #479	; 0x1df
 8001526:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001528:	2300      	movs	r3, #0
 800152a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800152c:	2300      	movs	r3, #0
 800152e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001530:	2300      	movs	r3, #0
 8001532:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001534:	2300      	movs	r3, #0
 8001536:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001538:	2300      	movs	r3, #0
 800153a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800153c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001540:	2200      	movs	r2, #0
 8001542:	4619      	mov	r1, r3
 8001544:	4818      	ldr	r0, [pc, #96]	; (80015a8 <MX_TIM1_Init+0x154>)
 8001546:	f00b fe91 	bl	800d26c <HAL_TIM_PWM_ConfigChannel>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001550:	f000 fdec 	bl	800212c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001554:	2300      	movs	r3, #0
 8001556:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001558:	2300      	movs	r3, #0
 800155a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800155c:	2300      	movs	r3, #0
 800155e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001560:	2300      	movs	r3, #0
 8001562:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001564:	2300      	movs	r3, #0
 8001566:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001568:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800156c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800156e:	2300      	movs	r3, #0
 8001570:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001572:	2300      	movs	r3, #0
 8001574:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001576:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800157a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800157c:	2300      	movs	r3, #0
 800157e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001580:	2300      	movs	r3, #0
 8001582:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001584:	1d3b      	adds	r3, r7, #4
 8001586:	4619      	mov	r1, r3
 8001588:	4807      	ldr	r0, [pc, #28]	; (80015a8 <MX_TIM1_Init+0x154>)
 800158a:	f00c fd67 	bl	800e05c <HAL_TIMEx_ConfigBreakDeadTime>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8001594:	f000 fdca 	bl	800212c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001598:	4803      	ldr	r0, [pc, #12]	; (80015a8 <MX_TIM1_Init+0x154>)
 800159a:	f001 f955 	bl	8002848 <HAL_TIM_MspPostInit>

}
 800159e:	bf00      	nop
 80015a0:	3768      	adds	r7, #104	; 0x68
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	240004e8 	.word	0x240004e8
 80015ac:	40010000 	.word	0x40010000

080015b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b08e      	sub	sp, #56	; 0x38
 80015b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
 80015be:	605a      	str	r2, [r3, #4]
 80015c0:	609a      	str	r2, [r3, #8]
 80015c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015c4:	f107 031c 	add.w	r3, r7, #28
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015d0:	463b      	mov	r3, r7
 80015d2:	2200      	movs	r2, #0
 80015d4:	601a      	str	r2, [r3, #0]
 80015d6:	605a      	str	r2, [r3, #4]
 80015d8:	609a      	str	r2, [r3, #8]
 80015da:	60da      	str	r2, [r3, #12]
 80015dc:	611a      	str	r2, [r3, #16]
 80015de:	615a      	str	r2, [r3, #20]
 80015e0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015e2:	4b2d      	ldr	r3, [pc, #180]	; (8001698 <MX_TIM2_Init+0xe8>)
 80015e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015e8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48-1;
 80015ea:	4b2b      	ldr	r3, [pc, #172]	; (8001698 <MX_TIM2_Init+0xe8>)
 80015ec:	222f      	movs	r2, #47	; 0x2f
 80015ee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015f0:	4b29      	ldr	r3, [pc, #164]	; (8001698 <MX_TIM2_Init+0xe8>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 80015f6:	4b28      	ldr	r3, [pc, #160]	; (8001698 <MX_TIM2_Init+0xe8>)
 80015f8:	f640 4234 	movw	r2, #3124	; 0xc34
 80015fc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015fe:	4b26      	ldr	r3, [pc, #152]	; (8001698 <MX_TIM2_Init+0xe8>)
 8001600:	2200      	movs	r2, #0
 8001602:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001604:	4b24      	ldr	r3, [pc, #144]	; (8001698 <MX_TIM2_Init+0xe8>)
 8001606:	2280      	movs	r2, #128	; 0x80
 8001608:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800160a:	4823      	ldr	r0, [pc, #140]	; (8001698 <MX_TIM2_Init+0xe8>)
 800160c:	f00b f8f5 	bl	800c7fa <HAL_TIM_Base_Init>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001616:	f000 fd89 	bl	800212c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800161a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800161e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001620:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001624:	4619      	mov	r1, r3
 8001626:	481c      	ldr	r0, [pc, #112]	; (8001698 <MX_TIM2_Init+0xe8>)
 8001628:	f00b ff34 	bl	800d494 <HAL_TIM_ConfigClockSource>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001632:	f000 fd7b 	bl	800212c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001636:	4818      	ldr	r0, [pc, #96]	; (8001698 <MX_TIM2_Init+0xe8>)
 8001638:	f00b fba0 	bl	800cd7c <HAL_TIM_PWM_Init>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001642:	f000 fd73 	bl	800212c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001646:	2320      	movs	r3, #32
 8001648:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800164a:	2300      	movs	r3, #0
 800164c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800164e:	f107 031c 	add.w	r3, r7, #28
 8001652:	4619      	mov	r1, r3
 8001654:	4810      	ldr	r0, [pc, #64]	; (8001698 <MX_TIM2_Init+0xe8>)
 8001656:	f00c fc73 	bl	800df40 <HAL_TIMEx_MasterConfigSynchronization>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001660:	f000 fd64 	bl	800212c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001664:	2360      	movs	r3, #96	; 0x60
 8001666:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001668:	2300      	movs	r3, #0
 800166a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800166c:	2300      	movs	r3, #0
 800166e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001670:	2300      	movs	r3, #0
 8001672:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001674:	463b      	mov	r3, r7
 8001676:	220c      	movs	r2, #12
 8001678:	4619      	mov	r1, r3
 800167a:	4807      	ldr	r0, [pc, #28]	; (8001698 <MX_TIM2_Init+0xe8>)
 800167c:	f00b fdf6 	bl	800d26c <HAL_TIM_PWM_ConfigChannel>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001686:	f000 fd51 	bl	800212c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800168a:	4803      	ldr	r0, [pc, #12]	; (8001698 <MX_TIM2_Init+0xe8>)
 800168c:	f001 f8dc 	bl	8002848 <HAL_TIM_MspPostInit>

}
 8001690:	bf00      	nop
 8001692:	3738      	adds	r7, #56	; 0x38
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	24000534 	.word	0x24000534

0800169c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b088      	sub	sp, #32
 80016a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016a2:	f107 0310 	add.w	r3, r7, #16
 80016a6:	2200      	movs	r2, #0
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	605a      	str	r2, [r3, #4]
 80016ac:	609a      	str	r2, [r3, #8]
 80016ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016b0:	1d3b      	adds	r3, r7, #4
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	605a      	str	r2, [r3, #4]
 80016b8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016ba:	4b1d      	ldr	r3, [pc, #116]	; (8001730 <MX_TIM3_Init+0x94>)
 80016bc:	4a1d      	ldr	r2, [pc, #116]	; (8001734 <MX_TIM3_Init+0x98>)
 80016be:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48-1;
 80016c0:	4b1b      	ldr	r3, [pc, #108]	; (8001730 <MX_TIM3_Init+0x94>)
 80016c2:	222f      	movs	r2, #47	; 0x2f
 80016c4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016c6:	4b1a      	ldr	r3, [pc, #104]	; (8001730 <MX_TIM3_Init+0x94>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80016cc:	4b18      	ldr	r3, [pc, #96]	; (8001730 <MX_TIM3_Init+0x94>)
 80016ce:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016d2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016d4:	4b16      	ldr	r3, [pc, #88]	; (8001730 <MX_TIM3_Init+0x94>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016da:	4b15      	ldr	r3, [pc, #84]	; (8001730 <MX_TIM3_Init+0x94>)
 80016dc:	2200      	movs	r2, #0
 80016de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80016e0:	4813      	ldr	r0, [pc, #76]	; (8001730 <MX_TIM3_Init+0x94>)
 80016e2:	f00b f88a 	bl	800c7fa <HAL_TIM_Base_Init>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80016ec:	f000 fd1e 	bl	800212c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016f4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80016f6:	f107 0310 	add.w	r3, r7, #16
 80016fa:	4619      	mov	r1, r3
 80016fc:	480c      	ldr	r0, [pc, #48]	; (8001730 <MX_TIM3_Init+0x94>)
 80016fe:	f00b fec9 	bl	800d494 <HAL_TIM_ConfigClockSource>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001708:	f000 fd10 	bl	800212c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800170c:	2300      	movs	r3, #0
 800170e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001710:	2300      	movs	r3, #0
 8001712:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001714:	1d3b      	adds	r3, r7, #4
 8001716:	4619      	mov	r1, r3
 8001718:	4805      	ldr	r0, [pc, #20]	; (8001730 <MX_TIM3_Init+0x94>)
 800171a:	f00c fc11 	bl	800df40 <HAL_TIMEx_MasterConfigSynchronization>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001724:	f000 fd02 	bl	800212c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001728:	bf00      	nop
 800172a:	3720      	adds	r7, #32
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	24000580 	.word	0x24000580
 8001734:	40000400 	.word	0x40000400

08001738 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800173c:	4b22      	ldr	r3, [pc, #136]	; (80017c8 <MX_USART1_UART_Init+0x90>)
 800173e:	4a23      	ldr	r2, [pc, #140]	; (80017cc <MX_USART1_UART_Init+0x94>)
 8001740:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8001742:	4b21      	ldr	r3, [pc, #132]	; (80017c8 <MX_USART1_UART_Init+0x90>)
 8001744:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8001748:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800174a:	4b1f      	ldr	r3, [pc, #124]	; (80017c8 <MX_USART1_UART_Init+0x90>)
 800174c:	2200      	movs	r2, #0
 800174e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001750:	4b1d      	ldr	r3, [pc, #116]	; (80017c8 <MX_USART1_UART_Init+0x90>)
 8001752:	2200      	movs	r2, #0
 8001754:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001756:	4b1c      	ldr	r3, [pc, #112]	; (80017c8 <MX_USART1_UART_Init+0x90>)
 8001758:	2200      	movs	r2, #0
 800175a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800175c:	4b1a      	ldr	r3, [pc, #104]	; (80017c8 <MX_USART1_UART_Init+0x90>)
 800175e:	220c      	movs	r2, #12
 8001760:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001762:	4b19      	ldr	r3, [pc, #100]	; (80017c8 <MX_USART1_UART_Init+0x90>)
 8001764:	2200      	movs	r2, #0
 8001766:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001768:	4b17      	ldr	r3, [pc, #92]	; (80017c8 <MX_USART1_UART_Init+0x90>)
 800176a:	2200      	movs	r2, #0
 800176c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800176e:	4b16      	ldr	r3, [pc, #88]	; (80017c8 <MX_USART1_UART_Init+0x90>)
 8001770:	2200      	movs	r2, #0
 8001772:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001774:	4b14      	ldr	r3, [pc, #80]	; (80017c8 <MX_USART1_UART_Init+0x90>)
 8001776:	2200      	movs	r2, #0
 8001778:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800177a:	4b13      	ldr	r3, [pc, #76]	; (80017c8 <MX_USART1_UART_Init+0x90>)
 800177c:	2200      	movs	r2, #0
 800177e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001780:	4811      	ldr	r0, [pc, #68]	; (80017c8 <MX_USART1_UART_Init+0x90>)
 8001782:	f00c fd07 	bl	800e194 <HAL_UART_Init>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800178c:	f000 fcce 	bl	800212c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001790:	2100      	movs	r1, #0
 8001792:	480d      	ldr	r0, [pc, #52]	; (80017c8 <MX_USART1_UART_Init+0x90>)
 8001794:	f00f f861 	bl	801085a <HAL_UARTEx_SetTxFifoThreshold>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800179e:	f000 fcc5 	bl	800212c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017a2:	2100      	movs	r1, #0
 80017a4:	4808      	ldr	r0, [pc, #32]	; (80017c8 <MX_USART1_UART_Init+0x90>)
 80017a6:	f00f f896 	bl	80108d6 <HAL_UARTEx_SetRxFifoThreshold>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80017b0:	f000 fcbc 	bl	800212c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80017b4:	4804      	ldr	r0, [pc, #16]	; (80017c8 <MX_USART1_UART_Init+0x90>)
 80017b6:	f00f f817 	bl	80107e8 <HAL_UARTEx_DisableFifoMode>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80017c0:	f000 fcb4 	bl	800212c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017c4:	bf00      	nop
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	240005cc 	.word	0x240005cc
 80017cc:	40011000 	.word	0x40011000

080017d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017d6:	4b15      	ldr	r3, [pc, #84]	; (800182c <MX_DMA_Init+0x5c>)
 80017d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80017dc:	4a13      	ldr	r2, [pc, #76]	; (800182c <MX_DMA_Init+0x5c>)
 80017de:	f043 0301 	orr.w	r3, r3, #1
 80017e2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80017e6:	4b11      	ldr	r3, [pc, #68]	; (800182c <MX_DMA_Init+0x5c>)
 80017e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80017ec:	f003 0301 	and.w	r3, r3, #1
 80017f0:	607b      	str	r3, [r7, #4]
 80017f2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 80017f4:	2200      	movs	r2, #0
 80017f6:	2105      	movs	r1, #5
 80017f8:	200b      	movs	r0, #11
 80017fa:	f003 f8bd 	bl	8004978 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80017fe:	200b      	movs	r0, #11
 8001800:	f003 f8d4 	bl	80049ac <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001804:	2200      	movs	r2, #0
 8001806:	2105      	movs	r1, #5
 8001808:	200c      	movs	r0, #12
 800180a:	f003 f8b5 	bl	8004978 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800180e:	200c      	movs	r0, #12
 8001810:	f003 f8cc 	bl	80049ac <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001814:	2200      	movs	r2, #0
 8001816:	2105      	movs	r1, #5
 8001818:	2010      	movs	r0, #16
 800181a:	f003 f8ad 	bl	8004978 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800181e:	2010      	movs	r0, #16
 8001820:	f003 f8c4 	bl	80049ac <HAL_NVIC_EnableIRQ>

}
 8001824:	bf00      	nop
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	58024400 	.word	0x58024400

08001830 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b08a      	sub	sp, #40	; 0x28
 8001834:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001836:	f107 0314 	add.w	r3, r7, #20
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	605a      	str	r2, [r3, #4]
 8001840:	609a      	str	r2, [r3, #8]
 8001842:	60da      	str	r2, [r3, #12]
 8001844:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001846:	4b34      	ldr	r3, [pc, #208]	; (8001918 <MX_GPIO_Init+0xe8>)
 8001848:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800184c:	4a32      	ldr	r2, [pc, #200]	; (8001918 <MX_GPIO_Init+0xe8>)
 800184e:	f043 0304 	orr.w	r3, r3, #4
 8001852:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001856:	4b30      	ldr	r3, [pc, #192]	; (8001918 <MX_GPIO_Init+0xe8>)
 8001858:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800185c:	f003 0304 	and.w	r3, r3, #4
 8001860:	613b      	str	r3, [r7, #16]
 8001862:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001864:	4b2c      	ldr	r3, [pc, #176]	; (8001918 <MX_GPIO_Init+0xe8>)
 8001866:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800186a:	4a2b      	ldr	r2, [pc, #172]	; (8001918 <MX_GPIO_Init+0xe8>)
 800186c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001870:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001874:	4b28      	ldr	r3, [pc, #160]	; (8001918 <MX_GPIO_Init+0xe8>)
 8001876:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800187a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001882:	4b25      	ldr	r3, [pc, #148]	; (8001918 <MX_GPIO_Init+0xe8>)
 8001884:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001888:	4a23      	ldr	r2, [pc, #140]	; (8001918 <MX_GPIO_Init+0xe8>)
 800188a:	f043 0301 	orr.w	r3, r3, #1
 800188e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001892:	4b21      	ldr	r3, [pc, #132]	; (8001918 <MX_GPIO_Init+0xe8>)
 8001894:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001898:	f003 0301 	and.w	r3, r3, #1
 800189c:	60bb      	str	r3, [r7, #8]
 800189e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a0:	4b1d      	ldr	r3, [pc, #116]	; (8001918 <MX_GPIO_Init+0xe8>)
 80018a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018a6:	4a1c      	ldr	r2, [pc, #112]	; (8001918 <MX_GPIO_Init+0xe8>)
 80018a8:	f043 0302 	orr.w	r3, r3, #2
 80018ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018b0:	4b19      	ldr	r3, [pc, #100]	; (8001918 <MX_GPIO_Init+0xe8>)
 80018b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	607b      	str	r3, [r7, #4]
 80018bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80018be:	2200      	movs	r2, #0
 80018c0:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 80018c4:	4815      	ldr	r0, [pc, #84]	; (800191c <MX_GPIO_Init+0xec>)
 80018c6:	f006 fc89 	bl	80081dc <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 80018ca:	2200      	movs	r2, #0
 80018cc:	2164      	movs	r1, #100	; 0x64
 80018ce:	4814      	ldr	r0, [pc, #80]	; (8001920 <MX_GPIO_Init+0xf0>)
 80018d0:	f006 fc84 	bl	80081dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80018d4:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 80018d8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018da:	2301      	movs	r3, #1
 80018dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e2:	2300      	movs	r3, #0
 80018e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018e6:	f107 0314 	add.w	r3, r7, #20
 80018ea:	4619      	mov	r1, r3
 80018ec:	480b      	ldr	r0, [pc, #44]	; (800191c <MX_GPIO_Init+0xec>)
 80018ee:	f006 faad 	bl	8007e4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80018f2:	2364      	movs	r3, #100	; 0x64
 80018f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f6:	2301      	movs	r3, #1
 80018f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fa:	2300      	movs	r3, #0
 80018fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fe:	2300      	movs	r3, #0
 8001900:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001902:	f107 0314 	add.w	r3, r7, #20
 8001906:	4619      	mov	r1, r3
 8001908:	4805      	ldr	r0, [pc, #20]	; (8001920 <MX_GPIO_Init+0xf0>)
 800190a:	f006 fa9f 	bl	8007e4c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800190e:	bf00      	nop
 8001910:	3728      	adds	r7, #40	; 0x28
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	58024400 	.word	0x58024400
 800191c:	58020800 	.word	0x58020800
 8001920:	58020400 	.word	0x58020400

08001924 <system_setup>:
 * This function initializes various system components including timers, ADC calibration, and DMA for ADC data acquisition.
 * It starts PWM for TIM2, performs ADC calibration for ADC1 and ADC3, and starts DMA for ADC data acquisition.
 * Any errors encountered during these initialization steps are handled by the Error_Handler function.
 */
void system_setup()
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0

	  TIM2->CCR4 = 312;
 8001928:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800192c:	f44f 729c 	mov.w	r2, #312	; 0x138
 8001930:	641a      	str	r2, [r3, #64]	; 0x40
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001932:	210c      	movs	r1, #12
 8001934:	4818      	ldr	r0, [pc, #96]	; (8001998 <system_setup+0x74>)
 8001936:	f00b fa83 	bl	800ce40 <HAL_TIM_PWM_Start>

	  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 800193a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800193e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001942:	4816      	ldr	r0, [pc, #88]	; (800199c <system_setup+0x78>)
 8001944:	f002 fe1e 	bl	8004584 <HAL_ADCEx_Calibration_Start>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <system_setup+0x2e>
	  			ADC_SINGLE_ENDED) != HAL_OK) {
	  		/* Calibration Error */
	  		Error_Handler();
 800194e:	f000 fbed 	bl	800212c <Error_Handler>
	  	}

	  	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 8001952:	220b      	movs	r2, #11
 8001954:	4912      	ldr	r1, [pc, #72]	; (80019a0 <system_setup+0x7c>)
 8001956:	4811      	ldr	r0, [pc, #68]	; (800199c <system_setup+0x78>)
 8001958:	f001 fef2 	bl	8003740 <HAL_ADC_Start_DMA>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <system_setup+0x42>
	  	ADC1_NUM_CHANNELS) != HAL_OK) {
	  		Error_Handler();
 8001962:	f000 fbe3 	bl	800212c <Error_Handler>
	  	}

	  	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 8001966:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800196a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800196e:	480d      	ldr	r0, [pc, #52]	; (80019a4 <system_setup+0x80>)
 8001970:	f002 fe08 	bl	8004584 <HAL_ADCEx_Calibration_Start>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <system_setup+0x5a>
	  			ADC_SINGLE_ENDED) != HAL_OK) {
	  		/* Calibration Error */
	  		Error_Handler();
 800197a:	f000 fbd7 	bl	800212c <Error_Handler>
	  	}

	  	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 800197e:	2204      	movs	r2, #4
 8001980:	4909      	ldr	r1, [pc, #36]	; (80019a8 <system_setup+0x84>)
 8001982:	4808      	ldr	r0, [pc, #32]	; (80019a4 <system_setup+0x80>)
 8001984:	f001 fedc 	bl	8003740 <HAL_ADC_Start_DMA>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <system_setup+0x6e>
	  	ADC3_NUM_CHANNELS) != HAL_OK) {
	  		Error_Handler();
 800198e:	f000 fbcd 	bl	800212c <Error_Handler>
	  	}
}
 8001992:	bf00      	nop
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	24000534 	.word	0x24000534
 800199c:	2400011c 	.word	0x2400011c
 80019a0:	24000700 	.word	0x24000700
 80019a4:	24000180 	.word	0x24000180
 80019a8:	24000720 	.word	0x24000720

080019ac <getTimestamp>:


void getTimestamp(uint8_t *buffer)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b08a      	sub	sp, #40	; 0x28
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef currentTime;
	RTC_DateTypeDef currentDate;

	HAL_RTC_GetTime(&hrtc, &currentTime, RTC_FORMAT_BIN);
 80019b4:	f107 0310 	add.w	r3, r7, #16
 80019b8:	2200      	movs	r2, #0
 80019ba:	4619      	mov	r1, r3
 80019bc:	4817      	ldr	r0, [pc, #92]	; (8001a1c <getTimestamp+0x70>)
 80019be:	f00a fbdb 	bl	800c178 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);
 80019c2:	f107 030c 	add.w	r3, r7, #12
 80019c6:	2200      	movs	r2, #0
 80019c8:	4619      	mov	r1, r3
 80019ca:	4814      	ldr	r0, [pc, #80]	; (8001a1c <getTimestamp+0x70>)
 80019cc:	f00a fcb8 	bl	800c340 <HAL_RTC_GetDate>
    uint32_t milliseconds = (1000 - (currentTime.SubSeconds * 1000) / hrtc.Init.SynchPrediv);
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80019d6:	fb03 f202 	mul.w	r2, r3, r2
 80019da:	4b10      	ldr	r3, [pc, #64]	; (8001a1c <getTimestamp+0x70>)
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	fbb2 f3f3 	udiv	r3, r2, r3
 80019e2:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 80019e6:	627b      	str	r3, [r7, #36]	; 0x24

	buffer[0] = currentTime.Hours;
 80019e8:	7c3a      	ldrb	r2, [r7, #16]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	701a      	strb	r2, [r3, #0]
	buffer[1] = currentTime.Minutes;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	3301      	adds	r3, #1
 80019f2:	7c7a      	ldrb	r2, [r7, #17]
 80019f4:	701a      	strb	r2, [r3, #0]
	buffer[2] = currentTime.Seconds;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	3302      	adds	r3, #2
 80019fa:	7cba      	ldrb	r2, [r7, #18]
 80019fc:	701a      	strb	r2, [r3, #0]
    buffer[3] = (milliseconds >> 8) & 0xFF;  // High byte of milliseconds
 80019fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a00:	0a1a      	lsrs	r2, r3, #8
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	3303      	adds	r3, #3
 8001a06:	b2d2      	uxtb	r2, r2
 8001a08:	701a      	strb	r2, [r3, #0]
    buffer[4] = milliseconds & 0xFF;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	3304      	adds	r3, #4
 8001a0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a10:	b2d2      	uxtb	r2, r2
 8001a12:	701a      	strb	r2, [r3, #0]

}
 8001a14:	bf00      	nop
 8001a16:	3728      	adds	r7, #40	; 0x28
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	240003b4 	.word	0x240003b4

08001a20 <create_packet>:

packet_t create_packet(const uint8_t* data, uint16_t size) {
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b086      	sub	sp, #24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	80fb      	strh	r3, [r7, #6]
    packet_t packet;
    packet.array = (uint8_t*)malloc(size * sizeof(uint8_t)); // Allocate memory
 8001a2e:	88fb      	ldrh	r3, [r7, #6]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f012 fbad 	bl	8014190 <malloc>
 8001a36:	4603      	mov	r3, r0
 8001a38:	613b      	str	r3, [r7, #16]
    if (packet.array == NULL) {
        // Memory allocation failed
        // Handle the error accordingly (e.g., return an error code or terminate the program)
    }
    memcpy(packet.array, data, size); // Copy the data into the packet array
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	88fa      	ldrh	r2, [r7, #6]
 8001a3e:	68b9      	ldr	r1, [r7, #8]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f012 fbb5 	bl	80141b0 <memcpy>
    packet.size = size;
 8001a46:	88fb      	ldrh	r3, [r7, #6]
 8001a48:	82bb      	strh	r3, [r7, #20]
    return packet;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	f107 0310 	add.w	r3, r7, #16
 8001a52:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001a56:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001a5a:	68f8      	ldr	r0, [r7, #12]
 8001a5c:	3718      	adds	r7, #24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
	...

08001a64 <sample_pmt>:
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_pmt()
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 8001a6a:	bf00      	nop
 8001a6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a70:	483e      	ldr	r0, [pc, #248]	; (8001b6c <sample_pmt+0x108>)
 8001a72:	f006 fb9b 	bl	80081ac <HAL_GPIO_ReadPin>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d1f7      	bne.n	8001a6c <sample_pmt+0x8>
	}
    uint8_t* buffer = (uint8_t*)malloc(PMT_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 8001a7c:	200e      	movs	r0, #14
 8001a7e:	f012 fb87 	bl	8014190 <malloc>
 8001a82:	4603      	mov	r3, r0
 8001a84:	617b      	str	r3, [r7, #20]
	uint8_t* pmt_spi = (uint8_t*)malloc(2 * sizeof(uint8_t));
 8001a86:	2002      	movs	r0, #2
 8001a88:	f012 fb82 	bl	8014190 <malloc>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	613b      	str	r3, [r7, #16]
	uint8_t* timestamp = (uint8_t*)malloc(5 * sizeof(uint8_t));
 8001a90:	2005      	movs	r0, #5
 8001a92:	f012 fb7d 	bl	8014190 <malloc>
 8001a96:	4603      	mov	r3, r0
 8001a98:	60fb      	str	r3, [r7, #12]

    getTimestamp(timestamp);
 8001a9a:	68f8      	ldr	r0, [r7, #12]
 8001a9c:	f7ff ff86 	bl	80019ac <getTimestamp>

#ifdef SIMULATE
	pmt_spi[0] = 0xE;
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	220e      	movs	r2, #14
 8001aa4:	701a      	strb	r2, [r3, #0]
	pmt_spi[1] = 0xD;
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	220d      	movs	r2, #13
 8001aac:	701a      	strb	r2, [r3, #0]
#else
	receive_pmt_spi(pmt_spi);
#endif

	buffer[0] = PMT_SYNC;
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	22bb      	movs	r2, #187	; 0xbb
 8001ab2:	701a      	strb	r2, [r3, #0]
	buffer[1] = PMT_SYNC;
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	22bb      	movs	r2, #187	; 0xbb
 8001aba:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 8001abc:	4b2c      	ldr	r3, [pc, #176]	; (8001b70 <sample_pmt+0x10c>)
 8001abe:	881b      	ldrh	r3, [r3, #0]
 8001ac0:	0a1b      	lsrs	r3, r3, #8
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	3302      	adds	r3, #2
 8001ac8:	b2d2      	uxtb	r2, r2
 8001aca:	701a      	strb	r2, [r3, #0]
	buffer[3] = (pmt_seq & 0xFF);
 8001acc:	4b28      	ldr	r3, [pc, #160]	; (8001b70 <sample_pmt+0x10c>)
 8001ace:	881a      	ldrh	r2, [r3, #0]
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	3303      	adds	r3, #3
 8001ad4:	b2d2      	uxtb	r2, r2
 8001ad6:	701a      	strb	r2, [r3, #0]
	buffer[4] = pmt_spi[0];
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	3304      	adds	r3, #4
 8001adc:	693a      	ldr	r2, [r7, #16]
 8001ade:	7812      	ldrb	r2, [r2, #0]
 8001ae0:	701a      	strb	r2, [r3, #0]
	buffer[5] = pmt_spi[1];
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	3305      	adds	r3, #5
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	7852      	ldrb	r2, [r2, #1]
 8001aea:	701a      	strb	r2, [r3, #0]
	buffer[6] = 0x00;
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	3306      	adds	r3, #6
 8001af0:	2200      	movs	r2, #0
 8001af2:	701a      	strb	r2, [r3, #0]
	buffer[7] = timestamp[0];
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	3307      	adds	r3, #7
 8001af8:	68fa      	ldr	r2, [r7, #12]
 8001afa:	7812      	ldrb	r2, [r2, #0]
 8001afc:	701a      	strb	r2, [r3, #0]
	buffer[8] = 0x00;
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	3308      	adds	r3, #8
 8001b02:	2200      	movs	r2, #0
 8001b04:	701a      	strb	r2, [r3, #0]
	buffer[9] = timestamp[1];
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	3309      	adds	r3, #9
 8001b0a:	68fa      	ldr	r2, [r7, #12]
 8001b0c:	7852      	ldrb	r2, [r2, #1]
 8001b0e:	701a      	strb	r2, [r3, #0]
	buffer[10] = 0x00;
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	330a      	adds	r3, #10
 8001b14:	2200      	movs	r2, #0
 8001b16:	701a      	strb	r2, [r3, #0]
	buffer[11] = timestamp[2];
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	330b      	adds	r3, #11
 8001b1c:	68fa      	ldr	r2, [r7, #12]
 8001b1e:	7892      	ldrb	r2, [r2, #2]
 8001b20:	701a      	strb	r2, [r3, #0]
	buffer[12] = timestamp[3];
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	330c      	adds	r3, #12
 8001b26:	68fa      	ldr	r2, [r7, #12]
 8001b28:	78d2      	ldrb	r2, [r2, #3]
 8001b2a:	701a      	strb	r2, [r3, #0]
	buffer[13] = timestamp[4];
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	330d      	adds	r3, #13
 8001b30:	68fa      	ldr	r2, [r7, #12]
 8001b32:	7912      	ldrb	r2, [r2, #4]
 8001b34:	701a      	strb	r2, [r3, #0]

	packet_t pmt_packet = create_packet(buffer, PMT_DATA_SIZE);
 8001b36:	1d3b      	adds	r3, r7, #4
 8001b38:	220e      	movs	r2, #14
 8001b3a:	6979      	ldr	r1, [r7, #20]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7ff ff6f 	bl	8001a20 <create_packet>
    osMessageQueuePut(mid_MsgQueue, &pmt_packet, 0U, 0U);
 8001b42:	4b0c      	ldr	r3, [pc, #48]	; (8001b74 <sample_pmt+0x110>)
 8001b44:	6818      	ldr	r0, [r3, #0]
 8001b46:	1d39      	adds	r1, r7, #4
 8001b48:	2300      	movs	r3, #0
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f00f fa08 	bl	8010f60 <osMessageQueuePut>
	free(buffer);
 8001b50:	6978      	ldr	r0, [r7, #20]
 8001b52:	f012 fb25 	bl	80141a0 <free>
	free(pmt_spi);
 8001b56:	6938      	ldr	r0, [r7, #16]
 8001b58:	f012 fb22 	bl	80141a0 <free>
	free(timestamp);
 8001b5c:	68f8      	ldr	r0, [r7, #12]
 8001b5e:	f012 fb1f 	bl	80141a0 <free>
}
 8001b62:	bf00      	nop
 8001b64:	3718      	adds	r7, #24
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	58020000 	.word	0x58020000
 8001b70:	24000678 	.word	0x24000678
 8001b74:	24000674 	.word	0x24000674

08001b78 <sample_erpa>:
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_erpa()
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 8001b7e:	bf00      	nop
 8001b80:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b84:	483c      	ldr	r0, [pc, #240]	; (8001c78 <sample_erpa+0x100>)
 8001b86:	f006 fb11 	bl	80081ac <HAL_GPIO_ReadPin>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d1f7      	bne.n	8001b80 <sample_erpa+0x8>
	}

    uint8_t* buffer = (uint8_t*)malloc(ERPA_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 8001b90:	200a      	movs	r0, #10
 8001b92:	f012 fafd 	bl	8014190 <malloc>
 8001b96:	4603      	mov	r3, r0
 8001b98:	617b      	str	r3, [r7, #20]

	uint8_t* erpa_spi = (uint8_t*)malloc(2 * sizeof(uint8_t));
 8001b9a:	2002      	movs	r0, #2
 8001b9c:	f012 faf8 	bl	8014190 <malloc>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	613b      	str	r3, [r7, #16]
	uint16_t* erpa_adc = (uint16_t*)malloc(2 * sizeof(uint16_t));
 8001ba4:	2004      	movs	r0, #4
 8001ba6:	f012 faf3 	bl	8014190 <malloc>
 8001baa:	4603      	mov	r3, r0
 8001bac:	60fb      	str	r3, [r7, #12]

#ifdef SIMULATE
	erpa_spi[0] = 0xE;
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	220e      	movs	r2, #14
 8001bb2:	701a      	strb	r2, [r3, #0]
	erpa_spi[1] = 0xD;
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	220d      	movs	r2, #13
 8001bba:	701a      	strb	r2, [r3, #0]

	erpa_adc[0] = 0xEE;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	22ee      	movs	r2, #238	; 0xee
 8001bc0:	801a      	strh	r2, [r3, #0]
	erpa_adc[1] = 0xDD;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	3302      	adds	r3, #2
 8001bc6:	22dd      	movs	r2, #221	; 0xdd
 8001bc8:	801a      	strh	r2, [r3, #0]
#else
	receive_erpa_spi(erpa_spi);
	receive_erpa_adc(erpa_adc);
#endif

	buffer[0] = ERPA_SYNC;
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	22aa      	movs	r2, #170	; 0xaa
 8001bce:	701a      	strb	r2, [r3, #0]
	buffer[1] = ERPA_SYNC;
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	22aa      	movs	r2, #170	; 0xaa
 8001bd6:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((erpa_seq & 0xFF00) >> 8);
 8001bd8:	4b28      	ldr	r3, [pc, #160]	; (8001c7c <sample_erpa+0x104>)
 8001bda:	881b      	ldrh	r3, [r3, #0]
 8001bdc:	0a1b      	lsrs	r3, r3, #8
 8001bde:	b29a      	uxth	r2, r3
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	3302      	adds	r3, #2
 8001be4:	b2d2      	uxtb	r2, r2
 8001be6:	701a      	strb	r2, [r3, #0]
	buffer[3] = (erpa_seq & 0xFF);
 8001be8:	4b24      	ldr	r3, [pc, #144]	; (8001c7c <sample_erpa+0x104>)
 8001bea:	881a      	ldrh	r2, [r3, #0]
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	3303      	adds	r3, #3
 8001bf0:	b2d2      	uxtb	r2, r2
 8001bf2:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	881b      	ldrh	r3, [r3, #0]
 8001bf8:	0a1b      	lsrs	r3, r3, #8
 8001bfa:	b29a      	uxth	r2, r3
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	3304      	adds	r3, #4
 8001c00:	b2d2      	uxtb	r2, r2
 8001c02:	701a      	strb	r2, [r3, #0]
	buffer[5] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	881a      	ldrh	r2, [r3, #0]
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	3305      	adds	r3, #5
 8001c0c:	b2d2      	uxtb	r2, r2
 8001c0e:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((erpa_adc[1] & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	3302      	adds	r3, #2
 8001c14:	881b      	ldrh	r3, [r3, #0]
 8001c16:	0a1b      	lsrs	r3, r3, #8
 8001c18:	b29a      	uxth	r2, r3
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	3306      	adds	r3, #6
 8001c1e:	b2d2      	uxtb	r2, r2
 8001c20:	701a      	strb	r2, [r3, #0]
	buffer[7] = (erpa_adc[1] & 0xFF);           // TEMPURATURE 1 LSB
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	3302      	adds	r3, #2
 8001c26:	881a      	ldrh	r2, [r3, #0]
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	3307      	adds	r3, #7
 8001c2c:	b2d2      	uxtb	r2, r2
 8001c2e:	701a      	strb	r2, [r3, #0]
	buffer[8] = erpa_spi[0];					// ERPA eADC MSB
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	3308      	adds	r3, #8
 8001c34:	693a      	ldr	r2, [r7, #16]
 8001c36:	7812      	ldrb	r2, [r2, #0]
 8001c38:	701a      	strb	r2, [r3, #0]
	buffer[9] = erpa_spi[1];					// ERPA eADC LSB
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	3309      	adds	r3, #9
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	7852      	ldrb	r2, [r2, #1]
 8001c42:	701a      	strb	r2, [r3, #0]


	packet_t erpa_packet = create_packet(buffer, ERPA_DATA_SIZE);
 8001c44:	1d3b      	adds	r3, r7, #4
 8001c46:	220a      	movs	r2, #10
 8001c48:	6979      	ldr	r1, [r7, #20]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff fee8 	bl	8001a20 <create_packet>
    osMessageQueuePut(mid_MsgQueue, &erpa_packet, 0U, 0U);
 8001c50:	4b0b      	ldr	r3, [pc, #44]	; (8001c80 <sample_erpa+0x108>)
 8001c52:	6818      	ldr	r0, [r3, #0]
 8001c54:	1d39      	adds	r1, r7, #4
 8001c56:	2300      	movs	r3, #0
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f00f f981 	bl	8010f60 <osMessageQueuePut>
	free(buffer);
 8001c5e:	6978      	ldr	r0, [r7, #20]
 8001c60:	f012 fa9e 	bl	80141a0 <free>
	free(erpa_spi);
 8001c64:	6938      	ldr	r0, [r7, #16]
 8001c66:	f012 fa9b 	bl	80141a0 <free>
	free(erpa_adc);
 8001c6a:	68f8      	ldr	r0, [r7, #12]
 8001c6c:	f012 fa98 	bl	80141a0 <free>
}
 8001c70:	bf00      	nop
 8001c72:	3718      	adds	r7, #24
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	58020400 	.word	0x58020400
 8001c7c:	2400067a 	.word	0x2400067a
 8001c80:	24000674 	.word	0x24000674

08001c84 <sample_hk>:
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_hk()
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b086      	sub	sp, #24
 8001c88:	af00      	add	r7, sp, #0
    uint8_t* buffer = (uint8_t*)malloc(HK_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 8001c8a:	2026      	movs	r0, #38	; 0x26
 8001c8c:	f012 fa80 	bl	8014190 <malloc>
 8001c90:	4603      	mov	r3, r0
 8001c92:	617b      	str	r3, [r7, #20]

	int16_t* hk_i2c = (int16_t*)malloc(4 * sizeof(int16_t));
 8001c94:	2008      	movs	r0, #8
 8001c96:	f012 fa7b 	bl	8014190 <malloc>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	613b      	str	r3, [r7, #16]
	uint16_t* hk_adc1 = (uint16_t*)malloc(9 * sizeof(uint16_t));
 8001c9e:	2012      	movs	r0, #18
 8001ca0:	f012 fa76 	bl	8014190 <malloc>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	60fb      	str	r3, [r7, #12]
	uint16_t* hk_adc3 = (uint16_t*)malloc(4 * sizeof(uint16_t));
 8001ca8:	2008      	movs	r0, #8
 8001caa:	f012 fa71 	bl	8014190 <malloc>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	60bb      	str	r3, [r7, #8]

#ifdef SIMULATE
	hk_i2c[0] = 0x11;
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	2211      	movs	r2, #17
 8001cb6:	801a      	strh	r2, [r3, #0]
	hk_i2c[1] = 0x12;
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	3302      	adds	r3, #2
 8001cbc:	2212      	movs	r2, #18
 8001cbe:	801a      	strh	r2, [r3, #0]
	hk_i2c[2] = 0x13;
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	3304      	adds	r3, #4
 8001cc4:	2213      	movs	r2, #19
 8001cc6:	801a      	strh	r2, [r3, #0]
	hk_i2c[3] = 0x14;
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	3306      	adds	r3, #6
 8001ccc:	2214      	movs	r2, #20
 8001cce:	801a      	strh	r2, [r3, #0]

	hk_adc1[0] = 0xA0;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	22a0      	movs	r2, #160	; 0xa0
 8001cd4:	801a      	strh	r2, [r3, #0]
	hk_adc1[1] = 0xA1;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	3302      	adds	r3, #2
 8001cda:	22a1      	movs	r2, #161	; 0xa1
 8001cdc:	801a      	strh	r2, [r3, #0]
	hk_adc1[2] = 0xA2;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	3304      	adds	r3, #4
 8001ce2:	22a2      	movs	r2, #162	; 0xa2
 8001ce4:	801a      	strh	r2, [r3, #0]
	hk_adc1[3] = 0xA3;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	3306      	adds	r3, #6
 8001cea:	22a3      	movs	r2, #163	; 0xa3
 8001cec:	801a      	strh	r2, [r3, #0]
	hk_adc1[4] = 0xA4;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	3308      	adds	r3, #8
 8001cf2:	22a4      	movs	r2, #164	; 0xa4
 8001cf4:	801a      	strh	r2, [r3, #0]
	hk_adc1[5] = 0xA5;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	330a      	adds	r3, #10
 8001cfa:	22a5      	movs	r2, #165	; 0xa5
 8001cfc:	801a      	strh	r2, [r3, #0]
	hk_adc1[6] = 0xA6;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	330c      	adds	r3, #12
 8001d02:	22a6      	movs	r2, #166	; 0xa6
 8001d04:	801a      	strh	r2, [r3, #0]
	hk_adc1[7] = 0xA7;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	330e      	adds	r3, #14
 8001d0a:	22a7      	movs	r2, #167	; 0xa7
 8001d0c:	801a      	strh	r2, [r3, #0]
	hk_adc1[8] = 0xA8;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	3310      	adds	r3, #16
 8001d12:	22a8      	movs	r2, #168	; 0xa8
 8001d14:	801a      	strh	r2, [r3, #0]

	hk_adc3[0] = 0xB0;
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	22b0      	movs	r2, #176	; 0xb0
 8001d1a:	801a      	strh	r2, [r3, #0]
	hk_adc3[1] = 0xB1;
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	3302      	adds	r3, #2
 8001d20:	22b1      	movs	r2, #177	; 0xb1
 8001d22:	801a      	strh	r2, [r3, #0]
	hk_adc3[2] = 0xB2;
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	3304      	adds	r3, #4
 8001d28:	22b2      	movs	r2, #178	; 0xb2
 8001d2a:	801a      	strh	r2, [r3, #0]
	hk_adc3[3] = 0xB3;
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	3306      	adds	r3, #6
 8001d30:	22b3      	movs	r2, #179	; 0xb3
 8001d32:	801a      	strh	r2, [r3, #0]
	receive_hk_i2c(hk_i2c);
	receive_hk_adc1(hk_adc1);
	receive_hk_adc3(hk_adc3);
#endif

	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	22cc      	movs	r2, #204	; 0xcc
 8001d38:	701a      	strb	r2, [r3, #0]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	22cc      	movs	r2, #204	; 0xcc
 8001d40:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 8001d42:	4b9c      	ldr	r3, [pc, #624]	; (8001fb4 <sample_hk+0x330>)
 8001d44:	881b      	ldrh	r3, [r3, #0]
 8001d46:	0a1b      	lsrs	r3, r3, #8
 8001d48:	b29a      	uxth	r2, r3
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	3302      	adds	r3, #2
 8001d4e:	b2d2      	uxtb	r2, r2
 8001d50:	701a      	strb	r2, [r3, #0]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 8001d52:	4b98      	ldr	r3, [pc, #608]	; (8001fb4 <sample_hk+0x330>)
 8001d54:	881a      	ldrh	r2, [r3, #0]
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	3303      	adds	r3, #3
 8001d5a:	b2d2      	uxtb	r2, r2
 8001d5c:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((hk_adc3[1] & 0xFF00) >> 8);	// HK vsense MSB
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	3302      	adds	r3, #2
 8001d62:	881b      	ldrh	r3, [r3, #0]
 8001d64:	0a1b      	lsrs	r3, r3, #8
 8001d66:	b29a      	uxth	r2, r3
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	3304      	adds	r3, #4
 8001d6c:	b2d2      	uxtb	r2, r2
 8001d6e:	701a      	strb	r2, [r3, #0]
	buffer[5] = (hk_adc3[1] & 0xFF);			// HK vsense LSB
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	3302      	adds	r3, #2
 8001d74:	881a      	ldrh	r2, [r3, #0]
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	3305      	adds	r3, #5
 8001d7a:	b2d2      	uxtb	r2, r2
 8001d7c:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((hk_adc3[0] & 0xFF00) >> 8);	// HK vrefint MSB
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	881b      	ldrh	r3, [r3, #0]
 8001d82:	0a1b      	lsrs	r3, r3, #8
 8001d84:	b29a      	uxth	r2, r3
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	3306      	adds	r3, #6
 8001d8a:	b2d2      	uxtb	r2, r2
 8001d8c:	701a      	strb	r2, [r3, #0]
	buffer[7] = (hk_adc3[0] & 0xFF);			// HK vrefint LSB
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	881a      	ldrh	r2, [r3, #0]
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	3307      	adds	r3, #7
 8001d96:	b2d2      	uxtb	r2, r2
 8001d98:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((hk_i2c[0] & 0xFF00) >> 8);	// HK TEMP1 MSB
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001da0:	121a      	asrs	r2, r3, #8
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	3308      	adds	r3, #8
 8001da6:	b2d2      	uxtb	r2, r2
 8001da8:	701a      	strb	r2, [r3, #0]
	buffer[9] = (hk_i2c[0] & 0xFF);				// HK TEMP1 LSB
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	3309      	adds	r3, #9
 8001db4:	b2d2      	uxtb	r2, r2
 8001db6:	701a      	strb	r2, [r3, #0]
	buffer[10] = ((hk_i2c[1] & 0xFF00) >> 8);	// HK TEMP2 MSB
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	3302      	adds	r3, #2
 8001dbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dc0:	121a      	asrs	r2, r3, #8
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	330a      	adds	r3, #10
 8001dc6:	b2d2      	uxtb	r2, r2
 8001dc8:	701a      	strb	r2, [r3, #0]
	buffer[11] = (hk_i2c[1] & 0xFF);			// HK TEMP2 LSB
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	3302      	adds	r3, #2
 8001dce:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	330b      	adds	r3, #11
 8001dd6:	b2d2      	uxtb	r2, r2
 8001dd8:	701a      	strb	r2, [r3, #0]
	buffer[12] = ((hk_i2c[2] & 0xFF00) >> 8);	// HK TEMP3 MSB
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	3304      	adds	r3, #4
 8001dde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001de2:	121a      	asrs	r2, r3, #8
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	330c      	adds	r3, #12
 8001de8:	b2d2      	uxtb	r2, r2
 8001dea:	701a      	strb	r2, [r3, #0]
	buffer[13] = (hk_i2c[2] & 0xFF);			// HK TEMP3 LSB
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	3304      	adds	r3, #4
 8001df0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	330d      	adds	r3, #13
 8001df8:	b2d2      	uxtb	r2, r2
 8001dfa:	701a      	strb	r2, [r3, #0]
	buffer[14] = ((hk_i2c[3] & 0xFF00) >> 8);	// HK TEMP4 MSB
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	3306      	adds	r3, #6
 8001e00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e04:	121a      	asrs	r2, r3, #8
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	330e      	adds	r3, #14
 8001e0a:	b2d2      	uxtb	r2, r2
 8001e0c:	701a      	strb	r2, [r3, #0]
	buffer[15] = (hk_i2c[3] & 0xFF);			// HK TEMP4 LSB
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	3306      	adds	r3, #6
 8001e12:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	330f      	adds	r3, #15
 8001e1a:	b2d2      	uxtb	r2, r2
 8001e1c:	701a      	strb	r2, [r3, #0]
	buffer[16] = ((hk_adc1[0] & 0xFF00) >> 8);	// HK BUSvmon MSB
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	881b      	ldrh	r3, [r3, #0]
 8001e22:	0a1b      	lsrs	r3, r3, #8
 8001e24:	b29a      	uxth	r2, r3
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	3310      	adds	r3, #16
 8001e2a:	b2d2      	uxtb	r2, r2
 8001e2c:	701a      	strb	r2, [r3, #0]
	buffer[17] = (hk_adc1[0] & 0xFF);			// HK BUSvmon LSB
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	881a      	ldrh	r2, [r3, #0]
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	3311      	adds	r3, #17
 8001e36:	b2d2      	uxtb	r2, r2
 8001e38:	701a      	strb	r2, [r3, #0]
	buffer[18] = ((hk_adc1[1] & 0xFF00) >> 8);	// HK BUSimon MSB
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	3302      	adds	r3, #2
 8001e3e:	881b      	ldrh	r3, [r3, #0]
 8001e40:	0a1b      	lsrs	r3, r3, #8
 8001e42:	b29a      	uxth	r2, r3
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	3312      	adds	r3, #18
 8001e48:	b2d2      	uxtb	r2, r2
 8001e4a:	701a      	strb	r2, [r3, #0]
	buffer[19] = (hk_adc1[1] & 0xFF);			// HK BUSimon LSB
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	3302      	adds	r3, #2
 8001e50:	881a      	ldrh	r2, [r3, #0]
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	3313      	adds	r3, #19
 8001e56:	b2d2      	uxtb	r2, r2
 8001e58:	701a      	strb	r2, [r3, #0]
	buffer[20] = ((hk_adc1[2] & 0xFF00) >> 8);	// HK 2v5mon MSB
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	3304      	adds	r3, #4
 8001e5e:	881b      	ldrh	r3, [r3, #0]
 8001e60:	0a1b      	lsrs	r3, r3, #8
 8001e62:	b29a      	uxth	r2, r3
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	3314      	adds	r3, #20
 8001e68:	b2d2      	uxtb	r2, r2
 8001e6a:	701a      	strb	r2, [r3, #0]
	buffer[21] = (hk_adc1[2] & 0xFF);			// HK 2v5mon LSB
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	3304      	adds	r3, #4
 8001e70:	881a      	ldrh	r2, [r3, #0]
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	3315      	adds	r3, #21
 8001e76:	b2d2      	uxtb	r2, r2
 8001e78:	701a      	strb	r2, [r3, #0]
	buffer[22] = ((hk_adc1[3] & 0xFF00) >> 8);	// HK 3v3mon MSB
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	3306      	adds	r3, #6
 8001e7e:	881b      	ldrh	r3, [r3, #0]
 8001e80:	0a1b      	lsrs	r3, r3, #8
 8001e82:	b29a      	uxth	r2, r3
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	3316      	adds	r3, #22
 8001e88:	b2d2      	uxtb	r2, r2
 8001e8a:	701a      	strb	r2, [r3, #0]
	buffer[23] = (hk_adc1[3] & 0xFF);			// HK 3v3mon LSB
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	3306      	adds	r3, #6
 8001e90:	881a      	ldrh	r2, [r3, #0]
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	3317      	adds	r3, #23
 8001e96:	b2d2      	uxtb	r2, r2
 8001e98:	701a      	strb	r2, [r3, #0]
	buffer[24] = ((hk_adc1[6] & 0xFF00) >> 8);	// HK 5vmon MSB
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	330c      	adds	r3, #12
 8001e9e:	881b      	ldrh	r3, [r3, #0]
 8001ea0:	0a1b      	lsrs	r3, r3, #8
 8001ea2:	b29a      	uxth	r2, r3
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	3318      	adds	r3, #24
 8001ea8:	b2d2      	uxtb	r2, r2
 8001eaa:	701a      	strb	r2, [r3, #0]
	buffer[25] = (hk_adc1[6] & 0xFF);			// HK 5vmon LSB
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	330c      	adds	r3, #12
 8001eb0:	881a      	ldrh	r2, [r3, #0]
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	3319      	adds	r3, #25
 8001eb6:	b2d2      	uxtb	r2, r2
 8001eb8:	701a      	strb	r2, [r3, #0]
	buffer[26] = ((hk_adc1[3] & 0xFF00) >> 8);	// HK n3v3mon MSB
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	3306      	adds	r3, #6
 8001ebe:	881b      	ldrh	r3, [r3, #0]
 8001ec0:	0a1b      	lsrs	r3, r3, #8
 8001ec2:	b29a      	uxth	r2, r3
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	331a      	adds	r3, #26
 8001ec8:	b2d2      	uxtb	r2, r2
 8001eca:	701a      	strb	r2, [r3, #0]
	buffer[27] = (hk_adc1[3] & 0xFF);			// HK n3v3mon LSB
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	3306      	adds	r3, #6
 8001ed0:	881a      	ldrh	r2, [r3, #0]
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	331b      	adds	r3, #27
 8001ed6:	b2d2      	uxtb	r2, r2
 8001ed8:	701a      	strb	r2, [r3, #0]
	buffer[28] = ((hk_adc1[2] & 0xFF00) >> 8);	// HK n5vmon MSB
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	3304      	adds	r3, #4
 8001ede:	881b      	ldrh	r3, [r3, #0]
 8001ee0:	0a1b      	lsrs	r3, r3, #8
 8001ee2:	b29a      	uxth	r2, r3
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	331c      	adds	r3, #28
 8001ee8:	b2d2      	uxtb	r2, r2
 8001eea:	701a      	strb	r2, [r3, #0]
	buffer[29] = (hk_adc1[2] & 0xFF);			// HK n5vmon LSB
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	3304      	adds	r3, #4
 8001ef0:	881a      	ldrh	r2, [r3, #0]
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	331d      	adds	r3, #29
 8001ef6:	b2d2      	uxtb	r2, r2
 8001ef8:	701a      	strb	r2, [r3, #0]
	buffer[30] = ((hk_adc1[7] & 0xFF00) >> 8);	// HK 15vmon MSB
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	330e      	adds	r3, #14
 8001efe:	881b      	ldrh	r3, [r3, #0]
 8001f00:	0a1b      	lsrs	r3, r3, #8
 8001f02:	b29a      	uxth	r2, r3
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	331e      	adds	r3, #30
 8001f08:	b2d2      	uxtb	r2, r2
 8001f0a:	701a      	strb	r2, [r3, #0]
	buffer[31] = (hk_adc1[7] & 0xFF);			// HK 15vmon LSB
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	330e      	adds	r3, #14
 8001f10:	881a      	ldrh	r2, [r3, #0]
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	331f      	adds	r3, #31
 8001f16:	b2d2      	uxtb	r2, r2
 8001f18:	701a      	strb	r2, [r3, #0]
	buffer[32] = ((hk_adc1[8] & 0xFF00) >> 8);	// HK 5vrefmon MSB
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	3310      	adds	r3, #16
 8001f1e:	881b      	ldrh	r3, [r3, #0]
 8001f20:	0a1b      	lsrs	r3, r3, #8
 8001f22:	b29a      	uxth	r2, r3
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	3320      	adds	r3, #32
 8001f28:	b2d2      	uxtb	r2, r2
 8001f2a:	701a      	strb	r2, [r3, #0]
	buffer[33] = (hk_adc1[8] & 0xFF);			// HK 5vrefmon LSB
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	3310      	adds	r3, #16
 8001f30:	881a      	ldrh	r2, [r3, #0]
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	3321      	adds	r3, #33	; 0x21
 8001f36:	b2d2      	uxtb	r2, r2
 8001f38:	701a      	strb	r2, [r3, #0]
	buffer[34] = ((hk_adc1[4] & 0xFF00) >> 8);	// HK n150vmon MSB
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	3308      	adds	r3, #8
 8001f3e:	881b      	ldrh	r3, [r3, #0]
 8001f40:	0a1b      	lsrs	r3, r3, #8
 8001f42:	b29a      	uxth	r2, r3
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	3322      	adds	r3, #34	; 0x22
 8001f48:	b2d2      	uxtb	r2, r2
 8001f4a:	701a      	strb	r2, [r3, #0]
	buffer[35] = (hk_adc1[4] & 0xFF);			// HK n150vmon LSB
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	3308      	adds	r3, #8
 8001f50:	881a      	ldrh	r2, [r3, #0]
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	3323      	adds	r3, #35	; 0x23
 8001f56:	b2d2      	uxtb	r2, r2
 8001f58:	701a      	strb	r2, [r3, #0]
	buffer[36] = ((hk_adc1[5] & 0xFF00) >> 8);	// HK n800vmon MSB
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	330a      	adds	r3, #10
 8001f5e:	881b      	ldrh	r3, [r3, #0]
 8001f60:	0a1b      	lsrs	r3, r3, #8
 8001f62:	b29a      	uxth	r2, r3
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	3324      	adds	r3, #36	; 0x24
 8001f68:	b2d2      	uxtb	r2, r2
 8001f6a:	701a      	strb	r2, [r3, #0]
	buffer[37] = (hk_adc1[5] & 0xFF);			// HK n800vmon LSB
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	330a      	adds	r3, #10
 8001f70:	881a      	ldrh	r2, [r3, #0]
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	3325      	adds	r3, #37	; 0x25
 8001f76:	b2d2      	uxtb	r2, r2
 8001f78:	701a      	strb	r2, [r3, #0]

	packet_t hk_packet = create_packet(buffer, HK_DATA_SIZE);
 8001f7a:	463b      	mov	r3, r7
 8001f7c:	2226      	movs	r2, #38	; 0x26
 8001f7e:	6979      	ldr	r1, [r7, #20]
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7ff fd4d 	bl	8001a20 <create_packet>
    osMessageQueuePut(mid_MsgQueue, &hk_packet, 0U, 0U);
 8001f86:	4b0c      	ldr	r3, [pc, #48]	; (8001fb8 <sample_hk+0x334>)
 8001f88:	6818      	ldr	r0, [r3, #0]
 8001f8a:	4639      	mov	r1, r7
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f00e ffe6 	bl	8010f60 <osMessageQueuePut>
	free(buffer);
 8001f94:	6978      	ldr	r0, [r7, #20]
 8001f96:	f012 f903 	bl	80141a0 <free>
	free(hk_i2c);
 8001f9a:	6938      	ldr	r0, [r7, #16]
 8001f9c:	f012 f900 	bl	80141a0 <free>
	free(hk_adc1);
 8001fa0:	68f8      	ldr	r0, [r7, #12]
 8001fa2:	f012 f8fd 	bl	80141a0 <free>
	free(hk_adc3);
 8001fa6:	68b8      	ldr	r0, [r7, #8]
 8001fa8:	f012 f8fa 	bl	80141a0 <free>
}
 8001fac:	bf00      	nop
 8001fae:	3718      	adds	r7, #24
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	2400067c 	.word	0x2400067c
 8001fb8:	24000674 	.word	0x24000674

08001fbc <PMT_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {

	    osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8001fc4:	4b0b      	ldr	r3, [pc, #44]	; (8001ff4 <PMT_init+0x38>)
 8001fc6:	6818      	ldr	r0, [r3, #0]
 8001fc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001fcc:	2200      	movs	r2, #0
 8001fce:	2101      	movs	r1, #1
 8001fd0:	f00e feec 	bl	8010dac <osEventFlagsWait>
		if(PMT_ON){
 8001fd4:	4b08      	ldr	r3, [pc, #32]	; (8001ff8 <PMT_init+0x3c>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d007      	beq.n	8001fec <PMT_init+0x30>
	    sample_pmt();
 8001fdc:	f7ff fd42 	bl	8001a64 <sample_pmt>
		pmt_seq++;
 8001fe0:	4b06      	ldr	r3, [pc, #24]	; (8001ffc <PMT_init+0x40>)
 8001fe2:	881b      	ldrh	r3, [r3, #0]
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	b29a      	uxth	r2, r3
 8001fe8:	4b04      	ldr	r3, [pc, #16]	; (8001ffc <PMT_init+0x40>)
 8001fea:	801a      	strh	r2, [r3, #0]

		}
		osThreadYield();
 8001fec:	f00e fe20 	bl	8010c30 <osThreadYield>
	    osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8001ff0:	e7e8      	b.n	8001fc4 <PMT_init+0x8>
 8001ff2:	bf00      	nop
 8001ff4:	24000688 	.word	0x24000688
 8001ff8:	2400067e 	.word	0x2400067e
 8001ffc:	24000678 	.word	0x24000678

08002000 <ERPA_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */

  /* Infinite loop */
  for(;;)
  {
	    osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002008:	4b0b      	ldr	r3, [pc, #44]	; (8002038 <ERPA_init+0x38>)
 800200a:	6818      	ldr	r0, [r3, #0]
 800200c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002010:	2200      	movs	r2, #0
 8002012:	2102      	movs	r1, #2
 8002014:	f00e feca 	bl	8010dac <osEventFlagsWait>
	  if (ERPA_ON)
 8002018:	4b08      	ldr	r3, [pc, #32]	; (800203c <ERPA_init+0x3c>)
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d007      	beq.n	8002030 <ERPA_init+0x30>
	  {
	    sample_erpa();
 8002020:	f7ff fdaa 	bl	8001b78 <sample_erpa>
		erpa_seq++;
 8002024:	4b06      	ldr	r3, [pc, #24]	; (8002040 <ERPA_init+0x40>)
 8002026:	881b      	ldrh	r3, [r3, #0]
 8002028:	3301      	adds	r3, #1
 800202a:	b29a      	uxth	r2, r3
 800202c:	4b04      	ldr	r3, [pc, #16]	; (8002040 <ERPA_init+0x40>)
 800202e:	801a      	strh	r2, [r3, #0]

	  }
		osThreadYield();
 8002030:	f00e fdfe 	bl	8010c30 <osThreadYield>
	    osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002034:	e7e8      	b.n	8002008 <ERPA_init+0x8>
 8002036:	bf00      	nop
 8002038:	24000688 	.word	0x24000688
 800203c:	2400067f 	.word	0x2400067f
 8002040:	2400067a 	.word	0x2400067a

08002044 <HK_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */

  /* Infinite loop */
  for(;;)
  {
	    osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 800204c:	4b0b      	ldr	r3, [pc, #44]	; (800207c <HK_init+0x38>)
 800204e:	6818      	ldr	r0, [r3, #0]
 8002050:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002054:	2200      	movs	r2, #0
 8002056:	2104      	movs	r1, #4
 8002058:	f00e fea8 	bl	8010dac <osEventFlagsWait>
	  if(HK_ON)
 800205c:	4b08      	ldr	r3, [pc, #32]	; (8002080 <HK_init+0x3c>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d007      	beq.n	8002074 <HK_init+0x30>
	  {
	    sample_hk();
 8002064:	f7ff fe0e 	bl	8001c84 <sample_hk>
		hk_seq++;
 8002068:	4b06      	ldr	r3, [pc, #24]	; (8002084 <HK_init+0x40>)
 800206a:	881b      	ldrh	r3, [r3, #0]
 800206c:	3301      	adds	r3, #1
 800206e:	b29a      	uxth	r2, r3
 8002070:	4b04      	ldr	r3, [pc, #16]	; (8002084 <HK_init+0x40>)
 8002072:	801a      	strh	r2, [r3, #0]

	  }
		osThreadYield();
 8002074:	f00e fddc 	bl	8010c30 <osThreadYield>
	    osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002078:	e7e8      	b.n	800204c <HK_init+0x8>
 800207a:	bf00      	nop
 800207c:	24000688 	.word	0x24000688
 8002080:	24000680 	.word	0x24000680
 8002084:	2400067c 	.word	0x2400067c

08002088 <UART_RX_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UART_RX_init */
void UART_RX_init(void *argument)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART_RX_init */
  /* Infinite loop */
  for(;;)
  {
		HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8002090:	2201      	movs	r2, #1
 8002092:	4904      	ldr	r1, [pc, #16]	; (80020a4 <UART_RX_init+0x1c>)
 8002094:	4804      	ldr	r0, [pc, #16]	; (80020a8 <UART_RX_init+0x20>)
 8002096:	f00c f95b 	bl	800e350 <HAL_UART_Receive_IT>
		osDelay(5);
 800209a:	2005      	movs	r0, #5
 800209c:	f00e fde8 	bl	8010c70 <osDelay>
		HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80020a0:	e7f6      	b.n	8002090 <UART_RX_init+0x8>
 80020a2:	bf00      	nop
 80020a4:	2400068c 	.word	0x2400068c
 80020a8:	240005cc 	.word	0x240005cc

080020ac <UART_TX_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UART_TX_init */
void UART_TX_init(void *argument)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b086      	sub	sp, #24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
	osStatus_t status;

	while (1) {
	   ; // Insert thread code here...

	   status = osMessageQueueGet(mid_MsgQueue, &msg, NULL, osWaitForever); // wait for message
 80020b4:	4b11      	ldr	r3, [pc, #68]	; (80020fc <UART_TX_init+0x50>)
 80020b6:	6818      	ldr	r0, [r3, #0]
 80020b8:	f107 010c 	add.w	r1, r7, #12
 80020bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020c0:	2200      	movs	r2, #0
 80020c2:	f00e ffad 	bl	8011020 <osMessageQueueGet>
 80020c6:	6178      	str	r0, [r7, #20]

	   if (status == osOK) {
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d113      	bne.n	80020f6 <UART_TX_init+0x4a>
	       printf("RTS queue size: %ld\n", osMessageQueueGetCount(mid_MsgQueue));
 80020ce:	4b0b      	ldr	r3, [pc, #44]	; (80020fc <UART_TX_init+0x50>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f00f f802 	bl	80110dc <osMessageQueueGetCount>
 80020d8:	4603      	mov	r3, r0
 80020da:	4619      	mov	r1, r3
 80020dc:	4808      	ldr	r0, [pc, #32]	; (8002100 <UART_TX_init+0x54>)
 80020de:	f012 f95d 	bl	801439c <iprintf>
	       HAL_UART_Transmit(&huart1, msg.array, msg.size, 100);
 80020e2:	68f9      	ldr	r1, [r7, #12]
 80020e4:	8a3a      	ldrh	r2, [r7, #16]
 80020e6:	2364      	movs	r3, #100	; 0x64
 80020e8:	4806      	ldr	r0, [pc, #24]	; (8002104 <UART_TX_init+0x58>)
 80020ea:	f00c f8a3 	bl	800e234 <HAL_UART_Transmit>
	       free(msg.array);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	4618      	mov	r0, r3
 80020f2:	f012 f855 	bl	80141a0 <free>
	   }
	   osThreadYield();
 80020f6:	f00e fd9b 	bl	8010c30 <osThreadYield>
	   status = osMessageQueueGet(mid_MsgQueue, &msg, NULL, osWaitForever); // wait for message
 80020fa:	e7db      	b.n	80020b4 <UART_TX_init+0x8>
 80020fc:	24000674 	.word	0x24000674
 8002100:	080153f0 	.word	0x080153f0
 8002104:	240005cc 	.word	0x240005cc

08002108 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a04      	ldr	r2, [pc, #16]	; (8002128 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d101      	bne.n	800211e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800211a:	f000 ff1f 	bl	8002f5c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800211e:	bf00      	nop
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	40001000 	.word	0x40001000

0800212c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002130:	b672      	cpsid	i
}
 8002132:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002134:	e7fe      	b.n	8002134 <Error_Handler+0x8>
	...

08002138 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800213e:	4b0c      	ldr	r3, [pc, #48]	; (8002170 <HAL_MspInit+0x38>)
 8002140:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002144:	4a0a      	ldr	r2, [pc, #40]	; (8002170 <HAL_MspInit+0x38>)
 8002146:	f043 0302 	orr.w	r3, r3, #2
 800214a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800214e:	4b08      	ldr	r3, [pc, #32]	; (8002170 <HAL_MspInit+0x38>)
 8002150:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002154:	f003 0302 	and.w	r3, r3, #2
 8002158:	607b      	str	r3, [r7, #4]
 800215a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800215c:	2200      	movs	r2, #0
 800215e:	210f      	movs	r1, #15
 8002160:	f06f 0001 	mvn.w	r0, #1
 8002164:	f002 fc08 	bl	8004978 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002168:	bf00      	nop
 800216a:	3708      	adds	r7, #8
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	58024400 	.word	0x58024400

08002174 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b08e      	sub	sp, #56	; 0x38
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800217c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002180:	2200      	movs	r2, #0
 8002182:	601a      	str	r2, [r3, #0]
 8002184:	605a      	str	r2, [r3, #4]
 8002186:	609a      	str	r2, [r3, #8]
 8002188:	60da      	str	r2, [r3, #12]
 800218a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a7b      	ldr	r2, [pc, #492]	; (8002380 <HAL_ADC_MspInit+0x20c>)
 8002192:	4293      	cmp	r3, r2
 8002194:	f040 8091 	bne.w	80022ba <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002198:	4b7a      	ldr	r3, [pc, #488]	; (8002384 <HAL_ADC_MspInit+0x210>)
 800219a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800219e:	4a79      	ldr	r2, [pc, #484]	; (8002384 <HAL_ADC_MspInit+0x210>)
 80021a0:	f043 0320 	orr.w	r3, r3, #32
 80021a4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80021a8:	4b76      	ldr	r3, [pc, #472]	; (8002384 <HAL_ADC_MspInit+0x210>)
 80021aa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80021ae:	f003 0320 	and.w	r3, r3, #32
 80021b2:	623b      	str	r3, [r7, #32]
 80021b4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021b6:	4b73      	ldr	r3, [pc, #460]	; (8002384 <HAL_ADC_MspInit+0x210>)
 80021b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021bc:	4a71      	ldr	r2, [pc, #452]	; (8002384 <HAL_ADC_MspInit+0x210>)
 80021be:	f043 0304 	orr.w	r3, r3, #4
 80021c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021c6:	4b6f      	ldr	r3, [pc, #444]	; (8002384 <HAL_ADC_MspInit+0x210>)
 80021c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021cc:	f003 0304 	and.w	r3, r3, #4
 80021d0:	61fb      	str	r3, [r7, #28]
 80021d2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021d4:	4b6b      	ldr	r3, [pc, #428]	; (8002384 <HAL_ADC_MspInit+0x210>)
 80021d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021da:	4a6a      	ldr	r2, [pc, #424]	; (8002384 <HAL_ADC_MspInit+0x210>)
 80021dc:	f043 0301 	orr.w	r3, r3, #1
 80021e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021e4:	4b67      	ldr	r3, [pc, #412]	; (8002384 <HAL_ADC_MspInit+0x210>)
 80021e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021ea:	f003 0301 	and.w	r3, r3, #1
 80021ee:	61bb      	str	r3, [r7, #24]
 80021f0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021f2:	4b64      	ldr	r3, [pc, #400]	; (8002384 <HAL_ADC_MspInit+0x210>)
 80021f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021f8:	4a62      	ldr	r2, [pc, #392]	; (8002384 <HAL_ADC_MspInit+0x210>)
 80021fa:	f043 0302 	orr.w	r3, r3, #2
 80021fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002202:	4b60      	ldr	r3, [pc, #384]	; (8002384 <HAL_ADC_MspInit+0x210>)
 8002204:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002208:	f003 0302 	and.w	r3, r3, #2
 800220c:	617b      	str	r3, [r7, #20]
 800220e:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002210:	2333      	movs	r3, #51	; 0x33
 8002212:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002214:	2303      	movs	r3, #3
 8002216:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002218:	2300      	movs	r3, #0
 800221a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800221c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002220:	4619      	mov	r1, r3
 8002222:	4859      	ldr	r0, [pc, #356]	; (8002388 <HAL_ADC_MspInit+0x214>)
 8002224:	f005 fe12 	bl	8007e4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8002228:	23ce      	movs	r3, #206	; 0xce
 800222a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800222c:	2303      	movs	r3, #3
 800222e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002230:	2300      	movs	r3, #0
 8002232:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002234:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002238:	4619      	mov	r1, r3
 800223a:	4854      	ldr	r0, [pc, #336]	; (800238c <HAL_ADC_MspInit+0x218>)
 800223c:	f005 fe06 	bl	8007e4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002240:	2303      	movs	r3, #3
 8002242:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002244:	2303      	movs	r3, #3
 8002246:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002248:	2300      	movs	r3, #0
 800224a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800224c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002250:	4619      	mov	r1, r3
 8002252:	484f      	ldr	r0, [pc, #316]	; (8002390 <HAL_ADC_MspInit+0x21c>)
 8002254:	f005 fdfa 	bl	8007e4c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8002258:	4b4e      	ldr	r3, [pc, #312]	; (8002394 <HAL_ADC_MspInit+0x220>)
 800225a:	4a4f      	ldr	r2, [pc, #316]	; (8002398 <HAL_ADC_MspInit+0x224>)
 800225c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800225e:	4b4d      	ldr	r3, [pc, #308]	; (8002394 <HAL_ADC_MspInit+0x220>)
 8002260:	2209      	movs	r2, #9
 8002262:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002264:	4b4b      	ldr	r3, [pc, #300]	; (8002394 <HAL_ADC_MspInit+0x220>)
 8002266:	2200      	movs	r2, #0
 8002268:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800226a:	4b4a      	ldr	r3, [pc, #296]	; (8002394 <HAL_ADC_MspInit+0x220>)
 800226c:	2200      	movs	r2, #0
 800226e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002270:	4b48      	ldr	r3, [pc, #288]	; (8002394 <HAL_ADC_MspInit+0x220>)
 8002272:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002276:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002278:	4b46      	ldr	r3, [pc, #280]	; (8002394 <HAL_ADC_MspInit+0x220>)
 800227a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800227e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002280:	4b44      	ldr	r3, [pc, #272]	; (8002394 <HAL_ADC_MspInit+0x220>)
 8002282:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002286:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002288:	4b42      	ldr	r3, [pc, #264]	; (8002394 <HAL_ADC_MspInit+0x220>)
 800228a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800228e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002290:	4b40      	ldr	r3, [pc, #256]	; (8002394 <HAL_ADC_MspInit+0x220>)
 8002292:	2200      	movs	r2, #0
 8002294:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002296:	4b3f      	ldr	r3, [pc, #252]	; (8002394 <HAL_ADC_MspInit+0x220>)
 8002298:	2200      	movs	r2, #0
 800229a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800229c:	483d      	ldr	r0, [pc, #244]	; (8002394 <HAL_ADC_MspInit+0x220>)
 800229e:	f002 ff99 	bl	80051d4 <HAL_DMA_Init>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d001      	beq.n	80022ac <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 80022a8:	f7ff ff40 	bl	800212c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	4a39      	ldr	r2, [pc, #228]	; (8002394 <HAL_ADC_MspInit+0x220>)
 80022b0:	64da      	str	r2, [r3, #76]	; 0x4c
 80022b2:	4a38      	ldr	r2, [pc, #224]	; (8002394 <HAL_ADC_MspInit+0x220>)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80022b8:	e05e      	b.n	8002378 <HAL_ADC_MspInit+0x204>
  else if(hadc->Instance==ADC3)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a37      	ldr	r2, [pc, #220]	; (800239c <HAL_ADC_MspInit+0x228>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d159      	bne.n	8002378 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80022c4:	4b2f      	ldr	r3, [pc, #188]	; (8002384 <HAL_ADC_MspInit+0x210>)
 80022c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022ca:	4a2e      	ldr	r2, [pc, #184]	; (8002384 <HAL_ADC_MspInit+0x210>)
 80022cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022d4:	4b2b      	ldr	r3, [pc, #172]	; (8002384 <HAL_ADC_MspInit+0x210>)
 80022d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022de:	613b      	str	r3, [r7, #16]
 80022e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022e2:	4b28      	ldr	r3, [pc, #160]	; (8002384 <HAL_ADC_MspInit+0x210>)
 80022e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022e8:	4a26      	ldr	r2, [pc, #152]	; (8002384 <HAL_ADC_MspInit+0x210>)
 80022ea:	f043 0304 	orr.w	r3, r3, #4
 80022ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022f2:	4b24      	ldr	r3, [pc, #144]	; (8002384 <HAL_ADC_MspInit+0x210>)
 80022f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022f8:	f003 0304 	and.w	r3, r3, #4
 80022fc:	60fb      	str	r3, [r7, #12]
 80022fe:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8002300:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8002304:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002308:	f000 fe54 	bl	8002fb4 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 800230c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8002310:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002314:	f000 fe4e 	bl	8002fb4 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8002318:	4b21      	ldr	r3, [pc, #132]	; (80023a0 <HAL_ADC_MspInit+0x22c>)
 800231a:	4a22      	ldr	r2, [pc, #136]	; (80023a4 <HAL_ADC_MspInit+0x230>)
 800231c:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 800231e:	4b20      	ldr	r3, [pc, #128]	; (80023a0 <HAL_ADC_MspInit+0x22c>)
 8002320:	2273      	movs	r2, #115	; 0x73
 8002322:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002324:	4b1e      	ldr	r3, [pc, #120]	; (80023a0 <HAL_ADC_MspInit+0x22c>)
 8002326:	2200      	movs	r2, #0
 8002328:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800232a:	4b1d      	ldr	r3, [pc, #116]	; (80023a0 <HAL_ADC_MspInit+0x22c>)
 800232c:	2200      	movs	r2, #0
 800232e:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002330:	4b1b      	ldr	r3, [pc, #108]	; (80023a0 <HAL_ADC_MspInit+0x22c>)
 8002332:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002336:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002338:	4b19      	ldr	r3, [pc, #100]	; (80023a0 <HAL_ADC_MspInit+0x22c>)
 800233a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800233e:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002340:	4b17      	ldr	r3, [pc, #92]	; (80023a0 <HAL_ADC_MspInit+0x22c>)
 8002342:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002346:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002348:	4b15      	ldr	r3, [pc, #84]	; (80023a0 <HAL_ADC_MspInit+0x22c>)
 800234a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800234e:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8002350:	4b13      	ldr	r3, [pc, #76]	; (80023a0 <HAL_ADC_MspInit+0x22c>)
 8002352:	2200      	movs	r2, #0
 8002354:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002356:	4b12      	ldr	r3, [pc, #72]	; (80023a0 <HAL_ADC_MspInit+0x22c>)
 8002358:	2200      	movs	r2, #0
 800235a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800235c:	4810      	ldr	r0, [pc, #64]	; (80023a0 <HAL_ADC_MspInit+0x22c>)
 800235e:	f002 ff39 	bl	80051d4 <HAL_DMA_Init>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8002368:	f7ff fee0 	bl	800212c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4a0c      	ldr	r2, [pc, #48]	; (80023a0 <HAL_ADC_MspInit+0x22c>)
 8002370:	64da      	str	r2, [r3, #76]	; 0x4c
 8002372:	4a0b      	ldr	r2, [pc, #44]	; (80023a0 <HAL_ADC_MspInit+0x22c>)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002378:	bf00      	nop
 800237a:	3738      	adds	r7, #56	; 0x38
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	40022000 	.word	0x40022000
 8002384:	58024400 	.word	0x58024400
 8002388:	58020800 	.word	0x58020800
 800238c:	58020000 	.word	0x58020000
 8002390:	58020400 	.word	0x58020400
 8002394:	240001e4 	.word	0x240001e4
 8002398:	40020010 	.word	0x40020010
 800239c:	58026000 	.word	0x58026000
 80023a0:	2400025c 	.word	0x2400025c
 80023a4:	40020028 	.word	0x40020028

080023a8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b08a      	sub	sp, #40	; 0x28
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b0:	f107 0314 	add.w	r3, r7, #20
 80023b4:	2200      	movs	r2, #0
 80023b6:	601a      	str	r2, [r3, #0]
 80023b8:	605a      	str	r2, [r3, #4]
 80023ba:	609a      	str	r2, [r3, #8]
 80023bc:	60da      	str	r2, [r3, #12]
 80023be:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a34      	ldr	r2, [pc, #208]	; (8002498 <HAL_DAC_MspInit+0xf0>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d161      	bne.n	800248e <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80023ca:	4b34      	ldr	r3, [pc, #208]	; (800249c <HAL_DAC_MspInit+0xf4>)
 80023cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023d0:	4a32      	ldr	r2, [pc, #200]	; (800249c <HAL_DAC_MspInit+0xf4>)
 80023d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80023d6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80023da:	4b30      	ldr	r3, [pc, #192]	; (800249c <HAL_DAC_MspInit+0xf4>)
 80023dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80023e4:	613b      	str	r3, [r7, #16]
 80023e6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023e8:	4b2c      	ldr	r3, [pc, #176]	; (800249c <HAL_DAC_MspInit+0xf4>)
 80023ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023ee:	4a2b      	ldr	r2, [pc, #172]	; (800249c <HAL_DAC_MspInit+0xf4>)
 80023f0:	f043 0301 	orr.w	r3, r3, #1
 80023f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023f8:	4b28      	ldr	r3, [pc, #160]	; (800249c <HAL_DAC_MspInit+0xf4>)
 80023fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	60fb      	str	r3, [r7, #12]
 8002404:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002406:	2310      	movs	r3, #16
 8002408:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800240a:	2303      	movs	r3, #3
 800240c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240e:	2300      	movs	r3, #0
 8002410:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002412:	f107 0314 	add.w	r3, r7, #20
 8002416:	4619      	mov	r1, r3
 8002418:	4821      	ldr	r0, [pc, #132]	; (80024a0 <HAL_DAC_MspInit+0xf8>)
 800241a:	f005 fd17 	bl	8007e4c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 800241e:	4b21      	ldr	r3, [pc, #132]	; (80024a4 <HAL_DAC_MspInit+0xfc>)
 8002420:	4a21      	ldr	r2, [pc, #132]	; (80024a8 <HAL_DAC_MspInit+0x100>)
 8002422:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8002424:	4b1f      	ldr	r3, [pc, #124]	; (80024a4 <HAL_DAC_MspInit+0xfc>)
 8002426:	2243      	movs	r2, #67	; 0x43
 8002428:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800242a:	4b1e      	ldr	r3, [pc, #120]	; (80024a4 <HAL_DAC_MspInit+0xfc>)
 800242c:	2240      	movs	r2, #64	; 0x40
 800242e:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002430:	4b1c      	ldr	r3, [pc, #112]	; (80024a4 <HAL_DAC_MspInit+0xfc>)
 8002432:	2200      	movs	r2, #0
 8002434:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002436:	4b1b      	ldr	r3, [pc, #108]	; (80024a4 <HAL_DAC_MspInit+0xfc>)
 8002438:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800243c:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800243e:	4b19      	ldr	r3, [pc, #100]	; (80024a4 <HAL_DAC_MspInit+0xfc>)
 8002440:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002444:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002446:	4b17      	ldr	r3, [pc, #92]	; (80024a4 <HAL_DAC_MspInit+0xfc>)
 8002448:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800244c:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800244e:	4b15      	ldr	r3, [pc, #84]	; (80024a4 <HAL_DAC_MspInit+0xfc>)
 8002450:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002454:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002456:	4b13      	ldr	r3, [pc, #76]	; (80024a4 <HAL_DAC_MspInit+0xfc>)
 8002458:	2200      	movs	r2, #0
 800245a:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800245c:	4b11      	ldr	r3, [pc, #68]	; (80024a4 <HAL_DAC_MspInit+0xfc>)
 800245e:	2200      	movs	r2, #0
 8002460:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8002462:	4810      	ldr	r0, [pc, #64]	; (80024a4 <HAL_DAC_MspInit+0xfc>)
 8002464:	f002 feb6 	bl	80051d4 <HAL_DMA_Init>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 800246e:	f7ff fe5d 	bl	800212c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a0b      	ldr	r2, [pc, #44]	; (80024a4 <HAL_DAC_MspInit+0xfc>)
 8002476:	609a      	str	r2, [r3, #8]
 8002478:	4a0a      	ldr	r2, [pc, #40]	; (80024a4 <HAL_DAC_MspInit+0xfc>)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 800247e:	2200      	movs	r2, #0
 8002480:	2105      	movs	r1, #5
 8002482:	2036      	movs	r0, #54	; 0x36
 8002484:	f002 fa78 	bl	8004978 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002488:	2036      	movs	r0, #54	; 0x36
 800248a:	f002 fa8f 	bl	80049ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800248e:	bf00      	nop
 8002490:	3728      	adds	r7, #40	; 0x28
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	40007400 	.word	0x40007400
 800249c:	58024400 	.word	0x58024400
 80024a0:	58020000 	.word	0x58020000
 80024a4:	240002e8 	.word	0x240002e8
 80024a8:	40020088 	.word	0x40020088

080024ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b0ba      	sub	sp, #232	; 0xe8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80024b8:	2200      	movs	r2, #0
 80024ba:	601a      	str	r2, [r3, #0]
 80024bc:	605a      	str	r2, [r3, #4]
 80024be:	609a      	str	r2, [r3, #8]
 80024c0:	60da      	str	r2, [r3, #12]
 80024c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024c4:	f107 0310 	add.w	r3, r7, #16
 80024c8:	22c0      	movs	r2, #192	; 0xc0
 80024ca:	2100      	movs	r1, #0
 80024cc:	4618      	mov	r0, r3
 80024ce:	f011 fe7d 	bl	80141cc <memset>
  if(hi2c->Instance==I2C1)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a27      	ldr	r2, [pc, #156]	; (8002574 <HAL_I2C_MspInit+0xc8>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d146      	bne.n	800256a <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80024dc:	f04f 0208 	mov.w	r2, #8
 80024e0:	f04f 0300 	mov.w	r3, #0
 80024e4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80024e8:	2300      	movs	r3, #0
 80024ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024ee:	f107 0310 	add.w	r3, r7, #16
 80024f2:	4618      	mov	r0, r3
 80024f4:	f007 f822 	bl	800953c <HAL_RCCEx_PeriphCLKConfig>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80024fe:	f7ff fe15 	bl	800212c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002502:	4b1d      	ldr	r3, [pc, #116]	; (8002578 <HAL_I2C_MspInit+0xcc>)
 8002504:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002508:	4a1b      	ldr	r2, [pc, #108]	; (8002578 <HAL_I2C_MspInit+0xcc>)
 800250a:	f043 0302 	orr.w	r3, r3, #2
 800250e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002512:	4b19      	ldr	r3, [pc, #100]	; (8002578 <HAL_I2C_MspInit+0xcc>)
 8002514:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002518:	f003 0302 	and.w	r3, r3, #2
 800251c:	60fb      	str	r3, [r7, #12]
 800251e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002520:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002524:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002528:	2312      	movs	r3, #18
 800252a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252e:	2300      	movs	r3, #0
 8002530:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002534:	2300      	movs	r3, #0
 8002536:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800253a:	2304      	movs	r3, #4
 800253c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002540:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002544:	4619      	mov	r1, r3
 8002546:	480d      	ldr	r0, [pc, #52]	; (800257c <HAL_I2C_MspInit+0xd0>)
 8002548:	f005 fc80 	bl	8007e4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800254c:	4b0a      	ldr	r3, [pc, #40]	; (8002578 <HAL_I2C_MspInit+0xcc>)
 800254e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002552:	4a09      	ldr	r2, [pc, #36]	; (8002578 <HAL_I2C_MspInit+0xcc>)
 8002554:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002558:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800255c:	4b06      	ldr	r3, [pc, #24]	; (8002578 <HAL_I2C_MspInit+0xcc>)
 800255e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002562:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002566:	60bb      	str	r3, [r7, #8]
 8002568:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800256a:	bf00      	nop
 800256c:	37e8      	adds	r7, #232	; 0xe8
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	40005400 	.word	0x40005400
 8002578:	58024400 	.word	0x58024400
 800257c:	58020400 	.word	0x58020400

08002580 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b0b2      	sub	sp, #200	; 0xc8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002588:	f107 0308 	add.w	r3, r7, #8
 800258c:	22c0      	movs	r2, #192	; 0xc0
 800258e:	2100      	movs	r1, #0
 8002590:	4618      	mov	r0, r3
 8002592:	f011 fe1b 	bl	80141cc <memset>
  if(hrtc->Instance==RTC)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a10      	ldr	r2, [pc, #64]	; (80025dc <HAL_RTC_MspInit+0x5c>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d119      	bne.n	80025d4 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80025a0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80025a4:	f04f 0300 	mov.w	r3, #0
 80025a8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80025ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025b4:	f107 0308 	add.w	r3, r7, #8
 80025b8:	4618      	mov	r0, r3
 80025ba:	f006 ffbf 	bl	800953c <HAL_RCCEx_PeriphCLKConfig>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 80025c4:	f7ff fdb2 	bl	800212c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80025c8:	4b05      	ldr	r3, [pc, #20]	; (80025e0 <HAL_RTC_MspInit+0x60>)
 80025ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025cc:	4a04      	ldr	r2, [pc, #16]	; (80025e0 <HAL_RTC_MspInit+0x60>)
 80025ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025d2:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80025d4:	bf00      	nop
 80025d6:	37c8      	adds	r7, #200	; 0xc8
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	58004000 	.word	0x58004000
 80025e0:	58024400 	.word	0x58024400

080025e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b0bc      	sub	sp, #240	; 0xf0
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ec:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80025f0:	2200      	movs	r2, #0
 80025f2:	601a      	str	r2, [r3, #0]
 80025f4:	605a      	str	r2, [r3, #4]
 80025f6:	609a      	str	r2, [r3, #8]
 80025f8:	60da      	str	r2, [r3, #12]
 80025fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025fc:	f107 0318 	add.w	r3, r7, #24
 8002600:	22c0      	movs	r2, #192	; 0xc0
 8002602:	2100      	movs	r1, #0
 8002604:	4618      	mov	r0, r3
 8002606:	f011 fde1 	bl	80141cc <memset>
  if(hspi->Instance==SPI1)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a4c      	ldr	r2, [pc, #304]	; (8002740 <HAL_SPI_MspInit+0x15c>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d145      	bne.n	80026a0 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002614:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002618:	f04f 0300 	mov.w	r3, #0
 800261c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002620:	2300      	movs	r3, #0
 8002622:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002624:	f107 0318 	add.w	r3, r7, #24
 8002628:	4618      	mov	r0, r3
 800262a:	f006 ff87 	bl	800953c <HAL_RCCEx_PeriphCLKConfig>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8002634:	f7ff fd7a 	bl	800212c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002638:	4b42      	ldr	r3, [pc, #264]	; (8002744 <HAL_SPI_MspInit+0x160>)
 800263a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800263e:	4a41      	ldr	r2, [pc, #260]	; (8002744 <HAL_SPI_MspInit+0x160>)
 8002640:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002644:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002648:	4b3e      	ldr	r3, [pc, #248]	; (8002744 <HAL_SPI_MspInit+0x160>)
 800264a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800264e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002652:	617b      	str	r3, [r7, #20]
 8002654:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002656:	4b3b      	ldr	r3, [pc, #236]	; (8002744 <HAL_SPI_MspInit+0x160>)
 8002658:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800265c:	4a39      	ldr	r2, [pc, #228]	; (8002744 <HAL_SPI_MspInit+0x160>)
 800265e:	f043 0302 	orr.w	r3, r3, #2
 8002662:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002666:	4b37      	ldr	r3, [pc, #220]	; (8002744 <HAL_SPI_MspInit+0x160>)
 8002668:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800266c:	f003 0302 	and.w	r3, r3, #2
 8002670:	613b      	str	r3, [r7, #16]
 8002672:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002674:	2318      	movs	r3, #24
 8002676:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800267a:	2302      	movs	r3, #2
 800267c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002680:	2300      	movs	r3, #0
 8002682:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002686:	2300      	movs	r3, #0
 8002688:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800268c:	2305      	movs	r3, #5
 800268e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002692:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002696:	4619      	mov	r1, r3
 8002698:	482b      	ldr	r0, [pc, #172]	; (8002748 <HAL_SPI_MspInit+0x164>)
 800269a:	f005 fbd7 	bl	8007e4c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800269e:	e04a      	b.n	8002736 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a29      	ldr	r2, [pc, #164]	; (800274c <HAL_SPI_MspInit+0x168>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d145      	bne.n	8002736 <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80026aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80026ae:	f04f 0300 	mov.w	r3, #0
 80026b2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80026b6:	2300      	movs	r3, #0
 80026b8:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026ba:	f107 0318 	add.w	r3, r7, #24
 80026be:	4618      	mov	r0, r3
 80026c0:	f006 ff3c 	bl	800953c <HAL_RCCEx_PeriphCLKConfig>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <HAL_SPI_MspInit+0xea>
      Error_Handler();
 80026ca:	f7ff fd2f 	bl	800212c <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80026ce:	4b1d      	ldr	r3, [pc, #116]	; (8002744 <HAL_SPI_MspInit+0x160>)
 80026d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80026d4:	4a1b      	ldr	r2, [pc, #108]	; (8002744 <HAL_SPI_MspInit+0x160>)
 80026d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026da:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80026de:	4b19      	ldr	r3, [pc, #100]	; (8002744 <HAL_SPI_MspInit+0x160>)
 80026e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80026e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026e8:	60fb      	str	r3, [r7, #12]
 80026ea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ec:	4b15      	ldr	r3, [pc, #84]	; (8002744 <HAL_SPI_MspInit+0x160>)
 80026ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026f2:	4a14      	ldr	r2, [pc, #80]	; (8002744 <HAL_SPI_MspInit+0x160>)
 80026f4:	f043 0302 	orr.w	r3, r3, #2
 80026f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026fc:	4b11      	ldr	r3, [pc, #68]	; (8002744 <HAL_SPI_MspInit+0x160>)
 80026fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	60bb      	str	r3, [r7, #8]
 8002708:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800270a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800270e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002712:	2302      	movs	r3, #2
 8002714:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002718:	2300      	movs	r3, #0
 800271a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800271e:	2300      	movs	r3, #0
 8002720:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002724:	2305      	movs	r3, #5
 8002726:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800272a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800272e:	4619      	mov	r1, r3
 8002730:	4805      	ldr	r0, [pc, #20]	; (8002748 <HAL_SPI_MspInit+0x164>)
 8002732:	f005 fb8b 	bl	8007e4c <HAL_GPIO_Init>
}
 8002736:	bf00      	nop
 8002738:	37f0      	adds	r7, #240	; 0xf0
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	40013000 	.word	0x40013000
 8002744:	58024400 	.word	0x58024400
 8002748:	58020400 	.word	0x58020400
 800274c:	40003800 	.word	0x40003800

08002750 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b086      	sub	sp, #24
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a37      	ldr	r2, [pc, #220]	; (800283c <HAL_TIM_Base_MspInit+0xec>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d12f      	bne.n	80027c2 <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002762:	4b37      	ldr	r3, [pc, #220]	; (8002840 <HAL_TIM_Base_MspInit+0xf0>)
 8002764:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002768:	4a35      	ldr	r2, [pc, #212]	; (8002840 <HAL_TIM_Base_MspInit+0xf0>)
 800276a:	f043 0301 	orr.w	r3, r3, #1
 800276e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002772:	4b33      	ldr	r3, [pc, #204]	; (8002840 <HAL_TIM_Base_MspInit+0xf0>)
 8002774:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002778:	f003 0301 	and.w	r3, r3, #1
 800277c:	617b      	str	r3, [r7, #20]
 800277e:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 8002780:	2200      	movs	r2, #0
 8002782:	2105      	movs	r1, #5
 8002784:	2018      	movs	r0, #24
 8002786:	f002 f8f7 	bl	8004978 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 800278a:	2018      	movs	r0, #24
 800278c:	f002 f90e 	bl	80049ac <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8002790:	2200      	movs	r2, #0
 8002792:	2105      	movs	r1, #5
 8002794:	2019      	movs	r0, #25
 8002796:	f002 f8ef 	bl	8004978 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800279a:	2019      	movs	r0, #25
 800279c:	f002 f906 	bl	80049ac <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 80027a0:	2200      	movs	r2, #0
 80027a2:	2105      	movs	r1, #5
 80027a4:	201a      	movs	r0, #26
 80027a6:	f002 f8e7 	bl	8004978 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80027aa:	201a      	movs	r0, #26
 80027ac:	f002 f8fe 	bl	80049ac <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 80027b0:	2200      	movs	r2, #0
 80027b2:	2105      	movs	r1, #5
 80027b4:	201b      	movs	r0, #27
 80027b6:	f002 f8df 	bl	8004978 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80027ba:	201b      	movs	r0, #27
 80027bc:	f002 f8f6 	bl	80049ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80027c0:	e038      	b.n	8002834 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM2)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027ca:	d117      	bne.n	80027fc <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027cc:	4b1c      	ldr	r3, [pc, #112]	; (8002840 <HAL_TIM_Base_MspInit+0xf0>)
 80027ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80027d2:	4a1b      	ldr	r2, [pc, #108]	; (8002840 <HAL_TIM_Base_MspInit+0xf0>)
 80027d4:	f043 0301 	orr.w	r3, r3, #1
 80027d8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80027dc:	4b18      	ldr	r3, [pc, #96]	; (8002840 <HAL_TIM_Base_MspInit+0xf0>)
 80027de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80027e2:	f003 0301 	and.w	r3, r3, #1
 80027e6:	613b      	str	r3, [r7, #16]
 80027e8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80027ea:	2200      	movs	r2, #0
 80027ec:	2105      	movs	r1, #5
 80027ee:	201c      	movs	r0, #28
 80027f0:	f002 f8c2 	bl	8004978 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80027f4:	201c      	movs	r0, #28
 80027f6:	f002 f8d9 	bl	80049ac <HAL_NVIC_EnableIRQ>
}
 80027fa:	e01b      	b.n	8002834 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM3)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a10      	ldr	r2, [pc, #64]	; (8002844 <HAL_TIM_Base_MspInit+0xf4>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d116      	bne.n	8002834 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002806:	4b0e      	ldr	r3, [pc, #56]	; (8002840 <HAL_TIM_Base_MspInit+0xf0>)
 8002808:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800280c:	4a0c      	ldr	r2, [pc, #48]	; (8002840 <HAL_TIM_Base_MspInit+0xf0>)
 800280e:	f043 0302 	orr.w	r3, r3, #2
 8002812:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002816:	4b0a      	ldr	r3, [pc, #40]	; (8002840 <HAL_TIM_Base_MspInit+0xf0>)
 8002818:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800281c:	f003 0302 	and.w	r3, r3, #2
 8002820:	60fb      	str	r3, [r7, #12]
 8002822:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002824:	2200      	movs	r2, #0
 8002826:	2105      	movs	r1, #5
 8002828:	201d      	movs	r0, #29
 800282a:	f002 f8a5 	bl	8004978 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800282e:	201d      	movs	r0, #29
 8002830:	f002 f8bc 	bl	80049ac <HAL_NVIC_EnableIRQ>
}
 8002834:	bf00      	nop
 8002836:	3718      	adds	r7, #24
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	40010000 	.word	0x40010000
 8002840:	58024400 	.word	0x58024400
 8002844:	40000400 	.word	0x40000400

08002848 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b08a      	sub	sp, #40	; 0x28
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002850:	f107 0314 	add.w	r3, r7, #20
 8002854:	2200      	movs	r2, #0
 8002856:	601a      	str	r2, [r3, #0]
 8002858:	605a      	str	r2, [r3, #4]
 800285a:	609a      	str	r2, [r3, #8]
 800285c:	60da      	str	r2, [r3, #12]
 800285e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a26      	ldr	r2, [pc, #152]	; (8002900 <HAL_TIM_MspPostInit+0xb8>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d120      	bne.n	80028ac <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800286a:	4b26      	ldr	r3, [pc, #152]	; (8002904 <HAL_TIM_MspPostInit+0xbc>)
 800286c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002870:	4a24      	ldr	r2, [pc, #144]	; (8002904 <HAL_TIM_MspPostInit+0xbc>)
 8002872:	f043 0301 	orr.w	r3, r3, #1
 8002876:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800287a:	4b22      	ldr	r3, [pc, #136]	; (8002904 <HAL_TIM_MspPostInit+0xbc>)
 800287c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002880:	f003 0301 	and.w	r3, r3, #1
 8002884:	613b      	str	r3, [r7, #16]
 8002886:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002888:	f44f 7380 	mov.w	r3, #256	; 0x100
 800288c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800288e:	2302      	movs	r3, #2
 8002890:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002892:	2300      	movs	r3, #0
 8002894:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002896:	2300      	movs	r3, #0
 8002898:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800289a:	2301      	movs	r3, #1
 800289c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800289e:	f107 0314 	add.w	r3, r7, #20
 80028a2:	4619      	mov	r1, r3
 80028a4:	4818      	ldr	r0, [pc, #96]	; (8002908 <HAL_TIM_MspPostInit+0xc0>)
 80028a6:	f005 fad1 	bl	8007e4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80028aa:	e024      	b.n	80028f6 <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM2)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028b4:	d11f      	bne.n	80028f6 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028b6:	4b13      	ldr	r3, [pc, #76]	; (8002904 <HAL_TIM_MspPostInit+0xbc>)
 80028b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028bc:	4a11      	ldr	r2, [pc, #68]	; (8002904 <HAL_TIM_MspPostInit+0xbc>)
 80028be:	f043 0302 	orr.w	r3, r3, #2
 80028c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028c6:	4b0f      	ldr	r3, [pc, #60]	; (8002904 <HAL_TIM_MspPostInit+0xbc>)
 80028c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028cc:	f003 0302 	and.w	r3, r3, #2
 80028d0:	60fb      	str	r3, [r7, #12]
 80028d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80028d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80028d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028da:	2302      	movs	r3, #2
 80028dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028de:	2300      	movs	r3, #0
 80028e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e2:	2300      	movs	r3, #0
 80028e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80028e6:	2301      	movs	r3, #1
 80028e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028ea:	f107 0314 	add.w	r3, r7, #20
 80028ee:	4619      	mov	r1, r3
 80028f0:	4806      	ldr	r0, [pc, #24]	; (800290c <HAL_TIM_MspPostInit+0xc4>)
 80028f2:	f005 faab 	bl	8007e4c <HAL_GPIO_Init>
}
 80028f6:	bf00      	nop
 80028f8:	3728      	adds	r7, #40	; 0x28
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	40010000 	.word	0x40010000
 8002904:	58024400 	.word	0x58024400
 8002908:	58020000 	.word	0x58020000
 800290c:	58020400 	.word	0x58020400

08002910 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b0ba      	sub	sp, #232	; 0xe8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002918:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800291c:	2200      	movs	r2, #0
 800291e:	601a      	str	r2, [r3, #0]
 8002920:	605a      	str	r2, [r3, #4]
 8002922:	609a      	str	r2, [r3, #8]
 8002924:	60da      	str	r2, [r3, #12]
 8002926:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002928:	f107 0310 	add.w	r3, r7, #16
 800292c:	22c0      	movs	r2, #192	; 0xc0
 800292e:	2100      	movs	r1, #0
 8002930:	4618      	mov	r0, r3
 8002932:	f011 fc4b 	bl	80141cc <memset>
  if(huart->Instance==USART1)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a2b      	ldr	r2, [pc, #172]	; (80029e8 <HAL_UART_MspInit+0xd8>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d14e      	bne.n	80029de <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002940:	f04f 0201 	mov.w	r2, #1
 8002944:	f04f 0300 	mov.w	r3, #0
 8002948:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 800294c:	2300      	movs	r3, #0
 800294e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002952:	f107 0310 	add.w	r3, r7, #16
 8002956:	4618      	mov	r0, r3
 8002958:	f006 fdf0 	bl	800953c <HAL_RCCEx_PeriphCLKConfig>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002962:	f7ff fbe3 	bl	800212c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002966:	4b21      	ldr	r3, [pc, #132]	; (80029ec <HAL_UART_MspInit+0xdc>)
 8002968:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800296c:	4a1f      	ldr	r2, [pc, #124]	; (80029ec <HAL_UART_MspInit+0xdc>)
 800296e:	f043 0310 	orr.w	r3, r3, #16
 8002972:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002976:	4b1d      	ldr	r3, [pc, #116]	; (80029ec <HAL_UART_MspInit+0xdc>)
 8002978:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800297c:	f003 0310 	and.w	r3, r3, #16
 8002980:	60fb      	str	r3, [r7, #12]
 8002982:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002984:	4b19      	ldr	r3, [pc, #100]	; (80029ec <HAL_UART_MspInit+0xdc>)
 8002986:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800298a:	4a18      	ldr	r2, [pc, #96]	; (80029ec <HAL_UART_MspInit+0xdc>)
 800298c:	f043 0301 	orr.w	r3, r3, #1
 8002990:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002994:	4b15      	ldr	r3, [pc, #84]	; (80029ec <HAL_UART_MspInit+0xdc>)
 8002996:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	60bb      	str	r3, [r7, #8]
 80029a0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80029a2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80029a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029aa:	2302      	movs	r3, #2
 80029ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b0:	2300      	movs	r3, #0
 80029b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029b6:	2300      	movs	r3, #0
 80029b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80029bc:	2307      	movs	r3, #7
 80029be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029c2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80029c6:	4619      	mov	r1, r3
 80029c8:	4809      	ldr	r0, [pc, #36]	; (80029f0 <HAL_UART_MspInit+0xe0>)
 80029ca:	f005 fa3f 	bl	8007e4c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80029ce:	2200      	movs	r2, #0
 80029d0:	2105      	movs	r1, #5
 80029d2:	2025      	movs	r0, #37	; 0x25
 80029d4:	f001 ffd0 	bl	8004978 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80029d8:	2025      	movs	r0, #37	; 0x25
 80029da:	f001 ffe7 	bl	80049ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80029de:	bf00      	nop
 80029e0:	37e8      	adds	r7, #232	; 0xe8
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	40011000 	.word	0x40011000
 80029ec:	58024400 	.word	0x58024400
 80029f0:	58020000 	.word	0x58020000

080029f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b090      	sub	sp, #64	; 0x40
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2b0f      	cmp	r3, #15
 8002a00:	d827      	bhi.n	8002a52 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8002a02:	2200      	movs	r2, #0
 8002a04:	6879      	ldr	r1, [r7, #4]
 8002a06:	2036      	movs	r0, #54	; 0x36
 8002a08:	f001 ffb6 	bl	8004978 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002a0c:	2036      	movs	r0, #54	; 0x36
 8002a0e:	f001 ffcd 	bl	80049ac <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8002a12:	4a29      	ldr	r2, [pc, #164]	; (8002ab8 <HAL_InitTick+0xc4>)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002a18:	4b28      	ldr	r3, [pc, #160]	; (8002abc <HAL_InitTick+0xc8>)
 8002a1a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a1e:	4a27      	ldr	r2, [pc, #156]	; (8002abc <HAL_InitTick+0xc8>)
 8002a20:	f043 0310 	orr.w	r3, r3, #16
 8002a24:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002a28:	4b24      	ldr	r3, [pc, #144]	; (8002abc <HAL_InitTick+0xc8>)
 8002a2a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a2e:	f003 0310 	and.w	r3, r3, #16
 8002a32:	60fb      	str	r3, [r7, #12]
 8002a34:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002a36:	f107 0210 	add.w	r2, r7, #16
 8002a3a:	f107 0314 	add.w	r3, r7, #20
 8002a3e:	4611      	mov	r1, r2
 8002a40:	4618      	mov	r0, r3
 8002a42:	f006 fd39 	bl	80094b8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a48:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d106      	bne.n	8002a5e <HAL_InitTick+0x6a>
 8002a50:	e001      	b.n	8002a56 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e02b      	b.n	8002aae <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002a56:	f006 fd03 	bl	8009460 <HAL_RCC_GetPCLK1Freq>
 8002a5a:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002a5c:	e004      	b.n	8002a68 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002a5e:	f006 fcff 	bl	8009460 <HAL_RCC_GetPCLK1Freq>
 8002a62:	4603      	mov	r3, r0
 8002a64:	005b      	lsls	r3, r3, #1
 8002a66:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002a68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a6a:	4a15      	ldr	r2, [pc, #84]	; (8002ac0 <HAL_InitTick+0xcc>)
 8002a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a70:	0c9b      	lsrs	r3, r3, #18
 8002a72:	3b01      	subs	r3, #1
 8002a74:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002a76:	4b13      	ldr	r3, [pc, #76]	; (8002ac4 <HAL_InitTick+0xd0>)
 8002a78:	4a13      	ldr	r2, [pc, #76]	; (8002ac8 <HAL_InitTick+0xd4>)
 8002a7a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002a7c:	4b11      	ldr	r3, [pc, #68]	; (8002ac4 <HAL_InitTick+0xd0>)
 8002a7e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002a82:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002a84:	4a0f      	ldr	r2, [pc, #60]	; (8002ac4 <HAL_InitTick+0xd0>)
 8002a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a88:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002a8a:	4b0e      	ldr	r3, [pc, #56]	; (8002ac4 <HAL_InitTick+0xd0>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a90:	4b0c      	ldr	r3, [pc, #48]	; (8002ac4 <HAL_InitTick+0xd0>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002a96:	480b      	ldr	r0, [pc, #44]	; (8002ac4 <HAL_InitTick+0xd0>)
 8002a98:	f009 feaf 	bl	800c7fa <HAL_TIM_Base_Init>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d104      	bne.n	8002aac <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002aa2:	4808      	ldr	r0, [pc, #32]	; (8002ac4 <HAL_InitTick+0xd0>)
 8002aa4:	f009 ff98 	bl	800c9d8 <HAL_TIM_Base_Start_IT>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	e000      	b.n	8002aae <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3740      	adds	r7, #64	; 0x40
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	24000090 	.word	0x24000090
 8002abc:	58024400 	.word	0x58024400
 8002ac0:	431bde83 	.word	0x431bde83
 8002ac4:	24000728 	.word	0x24000728
 8002ac8:	40001000 	.word	0x40001000

08002acc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8002ad0:	e7fe      	b.n	8002ad0 <NMI_Handler+0x4>

08002ad2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ad6:	e7fe      	b.n	8002ad6 <HardFault_Handler+0x4>

08002ad8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002adc:	e7fe      	b.n	8002adc <MemManage_Handler+0x4>

08002ade <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ade:	b480      	push	{r7}
 8002ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ae2:	e7fe      	b.n	8002ae2 <BusFault_Handler+0x4>

08002ae4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ae8:	e7fe      	b.n	8002ae8 <UsageFault_Handler+0x4>

08002aea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002aea:	b480      	push	{r7}
 8002aec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002aee:	bf00      	nop
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002afc:	4802      	ldr	r0, [pc, #8]	; (8002b08 <DMA1_Stream0_IRQHandler+0x10>)
 8002afe:	f003 fe93 	bl	8006828 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002b02:	bf00      	nop
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	240001e4 	.word	0x240001e4

08002b0c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002b10:	4802      	ldr	r0, [pc, #8]	; (8002b1c <DMA1_Stream1_IRQHandler+0x10>)
 8002b12:	f003 fe89 	bl	8006828 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002b16:	bf00      	nop
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	2400025c 	.word	0x2400025c

08002b20 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8002b24:	4802      	ldr	r0, [pc, #8]	; (8002b30 <DMA1_Stream5_IRQHandler+0x10>)
 8002b26:	f003 fe7f 	bl	8006828 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002b2a:	bf00      	nop
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	240002e8 	.word	0x240002e8

08002b34 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002b38:	4802      	ldr	r0, [pc, #8]	; (8002b44 <TIM1_BRK_IRQHandler+0x10>)
 8002b3a:	f00a fa8f 	bl	800d05c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8002b3e:	bf00      	nop
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	240004e8 	.word	0x240004e8

08002b48 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002b4c:	4802      	ldr	r0, [pc, #8]	; (8002b58 <TIM1_UP_IRQHandler+0x10>)
 8002b4e:	f00a fa85 	bl	800d05c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002b52:	bf00      	nop
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	240004e8 	.word	0x240004e8

08002b5c <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002b60:	4802      	ldr	r0, [pc, #8]	; (8002b6c <TIM1_TRG_COM_IRQHandler+0x10>)
 8002b62:	f00a fa7b 	bl	800d05c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8002b66:	bf00      	nop
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	240004e8 	.word	0x240004e8

08002b70 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002b74:	4802      	ldr	r0, [pc, #8]	; (8002b80 <TIM1_CC_IRQHandler+0x10>)
 8002b76:	f00a fa71 	bl	800d05c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002b7a:	bf00      	nop
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	240004e8 	.word	0x240004e8

08002b84 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002b88:	4802      	ldr	r0, [pc, #8]	; (8002b94 <TIM2_IRQHandler+0x10>)
 8002b8a:	f00a fa67 	bl	800d05c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002b8e:	bf00      	nop
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	24000534 	.word	0x24000534

08002b98 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002b9c:	4802      	ldr	r0, [pc, #8]	; (8002ba8 <TIM3_IRQHandler+0x10>)
 8002b9e:	f00a fa5d 	bl	800d05c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002ba2:	bf00      	nop
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	24000580 	.word	0x24000580

08002bac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002bb0:	4802      	ldr	r0, [pc, #8]	; (8002bbc <USART1_IRQHandler+0x10>)
 8002bb2:	f00b fc19 	bl	800e3e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002bb6:	bf00      	nop
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	240005cc 	.word	0x240005cc

08002bc0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 8002bc4:	4b06      	ldr	r3, [pc, #24]	; (8002be0 <TIM6_DAC_IRQHandler+0x20>)
 8002bc6:	791b      	ldrb	r3, [r3, #4]
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d002      	beq.n	8002bd4 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 8002bce:	4804      	ldr	r0, [pc, #16]	; (8002be0 <TIM6_DAC_IRQHandler+0x20>)
 8002bd0:	f002 f881 	bl	8004cd6 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8002bd4:	4803      	ldr	r0, [pc, #12]	; (8002be4 <TIM6_DAC_IRQHandler+0x24>)
 8002bd6:	f00a fa41 	bl	800d05c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002bda:	bf00      	nop
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	240002d4 	.word	0x240002d4
 8002be4:	24000728 	.word	0x24000728

08002be8 <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	4603      	mov	r3, r0
 8002bf0:	71fb      	strb	r3, [r7, #7]
	DEMCR |= (1 << 24);
 8002bf2:	4b0f      	ldr	r3, [pc, #60]	; (8002c30 <ITM_SendChar+0x48>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a0e      	ldr	r2, [pc, #56]	; (8002c30 <ITM_SendChar+0x48>)
 8002bf8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bfc:	6013      	str	r3, [r2, #0]

	ITM_TRACE_EN |= (1 << 0);
 8002bfe:	4b0d      	ldr	r3, [pc, #52]	; (8002c34 <ITM_SendChar+0x4c>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a0c      	ldr	r2, [pc, #48]	; (8002c34 <ITM_SendChar+0x4c>)
 8002c04:	f043 0301 	orr.w	r3, r3, #1
 8002c08:	6013      	str	r3, [r2, #0]

	while (!(ITM_STIMULUS_PORT0 & 1))
 8002c0a:	bf00      	nop
 8002c0c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0301 	and.w	r3, r3, #1
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d0f8      	beq.n	8002c0c <ITM_SendChar+0x24>
		;

	ITM_STIMULUS_PORT0 = ch;
 8002c1a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8002c1e:	79fb      	ldrb	r3, [r7, #7]
 8002c20:	6013      	str	r3, [r2, #0]
}
 8002c22:	bf00      	nop
 8002c24:	370c      	adds	r7, #12
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	e000edfc 	.word	0xe000edfc
 8002c34:	e0000e00 	.word	0xe0000e00

08002c38 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b086      	sub	sp, #24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002c44:	2300      	movs	r3, #0
 8002c46:	617b      	str	r3, [r7, #20]
 8002c48:	e00a      	b.n	8002c60 <_read+0x28>
		*ptr++ = __io_getchar();
 8002c4a:	f3af 8000 	nop.w
 8002c4e:	4601      	mov	r1, r0
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	1c5a      	adds	r2, r3, #1
 8002c54:	60ba      	str	r2, [r7, #8]
 8002c56:	b2ca      	uxtb	r2, r1
 8002c58:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	617b      	str	r3, [r7, #20]
 8002c60:	697a      	ldr	r2, [r7, #20]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	dbf0      	blt.n	8002c4a <_read+0x12>
	}

	return len;
 8002c68:	687b      	ldr	r3, [r7, #4]
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3718      	adds	r7, #24
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8002c72:	b580      	push	{r7, lr}
 8002c74:	b086      	sub	sp, #24
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	60f8      	str	r0, [r7, #12]
 8002c7a:	60b9      	str	r1, [r7, #8]
 8002c7c:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002c7e:	2300      	movs	r3, #0
 8002c80:	617b      	str	r3, [r7, #20]
 8002c82:	e009      	b.n	8002c98 <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	1c5a      	adds	r2, r3, #1
 8002c88:	60ba      	str	r2, [r7, #8]
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7ff ffab 	bl	8002be8 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	3301      	adds	r3, #1
 8002c96:	617b      	str	r3, [r7, #20]
 8002c98:	697a      	ldr	r2, [r7, #20]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	dbf1      	blt.n	8002c84 <_write+0x12>
	}
	return len;
 8002ca0:	687b      	ldr	r3, [r7, #4]
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3718      	adds	r7, #24
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}

08002caa <_close>:

int _close(int file) {
 8002caa:	b480      	push	{r7}
 8002cac:	b083      	sub	sp, #12
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8002cb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr

08002cc2 <_fstat>:

int _fstat(int file, struct stat *st) {
 8002cc2:	b480      	push	{r7}
 8002cc4:	b083      	sub	sp, #12
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
 8002cca:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002cd2:	605a      	str	r2, [r3, #4]
	return 0;
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	370c      	adds	r7, #12
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr

08002ce2 <_isatty>:

int _isatty(int file) {
 8002ce2:	b480      	push	{r7}
 8002ce4:	b083      	sub	sp, #12
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8002cea:	2301      	movs	r3, #1
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8002cf8:	b480      	push	{r7}
 8002cfa:	b085      	sub	sp, #20
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3714      	adds	r7, #20
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
	...

08002d14 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b086      	sub	sp, #24
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8002d1c:	4a14      	ldr	r2, [pc, #80]	; (8002d70 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8002d1e:	4b15      	ldr	r3, [pc, #84]	; (8002d74 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8002d28:	4b13      	ldr	r3, [pc, #76]	; (8002d78 <_sbrk+0x64>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d102      	bne.n	8002d36 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8002d30:	4b11      	ldr	r3, [pc, #68]	; (8002d78 <_sbrk+0x64>)
 8002d32:	4a12      	ldr	r2, [pc, #72]	; (8002d7c <_sbrk+0x68>)
 8002d34:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8002d36:	4b10      	ldr	r3, [pc, #64]	; (8002d78 <_sbrk+0x64>)
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	693a      	ldr	r2, [r7, #16]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d207      	bcs.n	8002d54 <_sbrk+0x40>
		errno = ENOMEM;
 8002d44:	f011 f9fa 	bl	801413c <__errno>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	220c      	movs	r2, #12
 8002d4c:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8002d4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d52:	e009      	b.n	8002d68 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8002d54:	4b08      	ldr	r3, [pc, #32]	; (8002d78 <_sbrk+0x64>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8002d5a:	4b07      	ldr	r3, [pc, #28]	; (8002d78 <_sbrk+0x64>)
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4413      	add	r3, r2
 8002d62:	4a05      	ldr	r2, [pc, #20]	; (8002d78 <_sbrk+0x64>)
 8002d64:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8002d66:	68fb      	ldr	r3, [r7, #12]
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3718      	adds	r7, #24
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	24080000 	.word	0x24080000
 8002d74:	00000400 	.word	0x00000400
 8002d78:	24000774 	.word	0x24000774
 8002d7c:	240050e0 	.word	0x240050e0

08002d80 <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8002d84:	4b37      	ldr	r3, [pc, #220]	; (8002e64 <SystemInit+0xe4>)
 8002d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d8a:	4a36      	ldr	r2, [pc, #216]	; (8002e64 <SystemInit+0xe4>)
 8002d8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8002d94:	4b34      	ldr	r3, [pc, #208]	; (8002e68 <SystemInit+0xe8>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 030f 	and.w	r3, r3, #15
 8002d9c:	2b06      	cmp	r3, #6
 8002d9e:	d807      	bhi.n	8002db0 <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8002da0:	4b31      	ldr	r3, [pc, #196]	; (8002e68 <SystemInit+0xe8>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f023 030f 	bic.w	r3, r3, #15
 8002da8:	4a2f      	ldr	r2, [pc, #188]	; (8002e68 <SystemInit+0xe8>)
 8002daa:	f043 0307 	orr.w	r3, r3, #7
 8002dae:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 8002db0:	4b2e      	ldr	r3, [pc, #184]	; (8002e6c <SystemInit+0xec>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a2d      	ldr	r2, [pc, #180]	; (8002e6c <SystemInit+0xec>)
 8002db6:	f043 0301 	orr.w	r3, r3, #1
 8002dba:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8002dbc:	4b2b      	ldr	r3, [pc, #172]	; (8002e6c <SystemInit+0xec>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 8002dc2:	4b2a      	ldr	r3, [pc, #168]	; (8002e6c <SystemInit+0xec>)
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	4929      	ldr	r1, [pc, #164]	; (8002e6c <SystemInit+0xec>)
 8002dc8:	4b29      	ldr	r3, [pc, #164]	; (8002e70 <SystemInit+0xf0>)
 8002dca:	4013      	ands	r3, r2
 8002dcc:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8002dce:	4b26      	ldr	r3, [pc, #152]	; (8002e68 <SystemInit+0xe8>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0308 	and.w	r3, r3, #8
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d007      	beq.n	8002dea <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8002dda:	4b23      	ldr	r3, [pc, #140]	; (8002e68 <SystemInit+0xe8>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f023 030f 	bic.w	r3, r3, #15
 8002de2:	4a21      	ldr	r2, [pc, #132]	; (8002e68 <SystemInit+0xe8>)
 8002de4:	f043 0307 	orr.w	r3, r3, #7
 8002de8:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 8002dea:	4b20      	ldr	r3, [pc, #128]	; (8002e6c <SystemInit+0xec>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8002df0:	4b1e      	ldr	r3, [pc, #120]	; (8002e6c <SystemInit+0xec>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 8002df6:	4b1d      	ldr	r3, [pc, #116]	; (8002e6c <SystemInit+0xec>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8002dfc:	4b1b      	ldr	r3, [pc, #108]	; (8002e6c <SystemInit+0xec>)
 8002dfe:	4a1d      	ldr	r2, [pc, #116]	; (8002e74 <SystemInit+0xf4>)
 8002e00:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 8002e02:	4b1a      	ldr	r3, [pc, #104]	; (8002e6c <SystemInit+0xec>)
 8002e04:	4a1c      	ldr	r2, [pc, #112]	; (8002e78 <SystemInit+0xf8>)
 8002e06:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8002e08:	4b18      	ldr	r3, [pc, #96]	; (8002e6c <SystemInit+0xec>)
 8002e0a:	4a1c      	ldr	r2, [pc, #112]	; (8002e7c <SystemInit+0xfc>)
 8002e0c:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 8002e0e:	4b17      	ldr	r3, [pc, #92]	; (8002e6c <SystemInit+0xec>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8002e14:	4b15      	ldr	r3, [pc, #84]	; (8002e6c <SystemInit+0xec>)
 8002e16:	4a19      	ldr	r2, [pc, #100]	; (8002e7c <SystemInit+0xfc>)
 8002e18:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 8002e1a:	4b14      	ldr	r3, [pc, #80]	; (8002e6c <SystemInit+0xec>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 8002e20:	4b12      	ldr	r3, [pc, #72]	; (8002e6c <SystemInit+0xec>)
 8002e22:	4a16      	ldr	r2, [pc, #88]	; (8002e7c <SystemInit+0xfc>)
 8002e24:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8002e26:	4b11      	ldr	r3, [pc, #68]	; (8002e6c <SystemInit+0xec>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8002e2c:	4b0f      	ldr	r3, [pc, #60]	; (8002e6c <SystemInit+0xec>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a0e      	ldr	r2, [pc, #56]	; (8002e6c <SystemInit+0xec>)
 8002e32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e36:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8002e38:	4b0c      	ldr	r3, [pc, #48]	; (8002e6c <SystemInit+0xec>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 8002e3e:	4b10      	ldr	r3, [pc, #64]	; (8002e80 <SystemInit+0x100>)
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	4b10      	ldr	r3, [pc, #64]	; (8002e84 <SystemInit+0x104>)
 8002e44:	4013      	ands	r3, r2
 8002e46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e4a:	d202      	bcs.n	8002e52 <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8002e4c:	4b0e      	ldr	r3, [pc, #56]	; (8002e88 <SystemInit+0x108>)
 8002e4e:	2201      	movs	r2, #1
 8002e50:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002e52:	4b0e      	ldr	r3, [pc, #56]	; (8002e8c <SystemInit+0x10c>)
 8002e54:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002e58:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002e5a:	bf00      	nop
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr
 8002e64:	e000ed00 	.word	0xe000ed00
 8002e68:	52002000 	.word	0x52002000
 8002e6c:	58024400 	.word	0x58024400
 8002e70:	eaf6ed7f 	.word	0xeaf6ed7f
 8002e74:	02020200 	.word	0x02020200
 8002e78:	01ff0000 	.word	0x01ff0000
 8002e7c:	01010280 	.word	0x01010280
 8002e80:	5c001000 	.word	0x5c001000
 8002e84:	ffff0000 	.word	0xffff0000
 8002e88:	51008108 	.word	0x51008108
 8002e8c:	52004000 	.word	0x52004000

08002e90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002e90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ec8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002e94:	f7ff ff74 	bl	8002d80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e98:	480c      	ldr	r0, [pc, #48]	; (8002ecc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002e9a:	490d      	ldr	r1, [pc, #52]	; (8002ed0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002e9c:	4a0d      	ldr	r2, [pc, #52]	; (8002ed4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002e9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ea0:	e002      	b.n	8002ea8 <LoopCopyDataInit>

08002ea2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ea2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ea4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ea6:	3304      	adds	r3, #4

08002ea8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ea8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002eaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002eac:	d3f9      	bcc.n	8002ea2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002eae:	4a0a      	ldr	r2, [pc, #40]	; (8002ed8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002eb0:	4c0a      	ldr	r4, [pc, #40]	; (8002edc <LoopFillZerobss+0x22>)
  movs r3, #0
 8002eb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002eb4:	e001      	b.n	8002eba <LoopFillZerobss>

08002eb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002eb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002eb8:	3204      	adds	r2, #4

08002eba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002eba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ebc:	d3fb      	bcc.n	8002eb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002ebe:	f011 f943 	bl	8014148 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ec2:	f7fd fe49 	bl	8000b58 <main>
  bx  lr
 8002ec6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002ec8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002ecc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002ed0:	24000100 	.word	0x24000100
  ldr r2, =_sidata
 8002ed4:	080155bc 	.word	0x080155bc
  ldr r2, =_sbss
 8002ed8:	24000100 	.word	0x24000100
  ldr r4, =_ebss
 8002edc:	240050dc 	.word	0x240050dc

08002ee0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ee0:	e7fe      	b.n	8002ee0 <ADC3_IRQHandler>
	...

08002ee4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002eea:	2003      	movs	r0, #3
 8002eec:	f001 fd39 	bl	8004962 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002ef0:	f006 f90c 	bl	800910c <HAL_RCC_GetSysClockFreq>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	4b15      	ldr	r3, [pc, #84]	; (8002f4c <HAL_Init+0x68>)
 8002ef8:	699b      	ldr	r3, [r3, #24]
 8002efa:	0a1b      	lsrs	r3, r3, #8
 8002efc:	f003 030f 	and.w	r3, r3, #15
 8002f00:	4913      	ldr	r1, [pc, #76]	; (8002f50 <HAL_Init+0x6c>)
 8002f02:	5ccb      	ldrb	r3, [r1, r3]
 8002f04:	f003 031f 	and.w	r3, r3, #31
 8002f08:	fa22 f303 	lsr.w	r3, r2, r3
 8002f0c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002f0e:	4b0f      	ldr	r3, [pc, #60]	; (8002f4c <HAL_Init+0x68>)
 8002f10:	699b      	ldr	r3, [r3, #24]
 8002f12:	f003 030f 	and.w	r3, r3, #15
 8002f16:	4a0e      	ldr	r2, [pc, #56]	; (8002f50 <HAL_Init+0x6c>)
 8002f18:	5cd3      	ldrb	r3, [r2, r3]
 8002f1a:	f003 031f 	and.w	r3, r3, #31
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	fa22 f303 	lsr.w	r3, r2, r3
 8002f24:	4a0b      	ldr	r2, [pc, #44]	; (8002f54 <HAL_Init+0x70>)
 8002f26:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002f28:	4a0b      	ldr	r2, [pc, #44]	; (8002f58 <HAL_Init+0x74>)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f2e:	2005      	movs	r0, #5
 8002f30:	f7ff fd60 	bl	80029f4 <HAL_InitTick>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d001      	beq.n	8002f3e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e002      	b.n	8002f44 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002f3e:	f7ff f8fb 	bl	8002138 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3708      	adds	r7, #8
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	58024400 	.word	0x58024400
 8002f50:	080154d4 	.word	0x080154d4
 8002f54:	2400008c 	.word	0x2400008c
 8002f58:	24000088 	.word	0x24000088

08002f5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002f60:	4b06      	ldr	r3, [pc, #24]	; (8002f7c <HAL_IncTick+0x20>)
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	461a      	mov	r2, r3
 8002f66:	4b06      	ldr	r3, [pc, #24]	; (8002f80 <HAL_IncTick+0x24>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	4a04      	ldr	r2, [pc, #16]	; (8002f80 <HAL_IncTick+0x24>)
 8002f6e:	6013      	str	r3, [r2, #0]
}
 8002f70:	bf00      	nop
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	24000094 	.word	0x24000094
 8002f80:	24000778 	.word	0x24000778

08002f84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f84:	b480      	push	{r7}
 8002f86:	af00      	add	r7, sp, #0
  return uwTick;
 8002f88:	4b03      	ldr	r3, [pc, #12]	; (8002f98 <HAL_GetTick+0x14>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	24000778 	.word	0x24000778

08002f9c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002fa0:	4b03      	ldr	r3, [pc, #12]	; (8002fb0 <HAL_GetREVID+0x14>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	0c1b      	lsrs	r3, r3, #16
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr
 8002fb0:	5c001000 	.word	0x5c001000

08002fb4 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8002fbe:	4b07      	ldr	r3, [pc, #28]	; (8002fdc <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002fc0:	685a      	ldr	r2, [r3, #4]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	43db      	mvns	r3, r3
 8002fc6:	401a      	ands	r2, r3
 8002fc8:	4904      	ldr	r1, [pc, #16]	; (8002fdc <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	604b      	str	r3, [r1, #4]
}
 8002fd0:	bf00      	nop
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr
 8002fdc:	58000400 	.word	0x58000400

08002fe0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	431a      	orrs	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	609a      	str	r2, [r3, #8]
}
 8002ffa:	bf00      	nop
 8002ffc:	370c      	adds	r7, #12
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr

08003006 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003006:	b480      	push	{r7}
 8003008:	b083      	sub	sp, #12
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
 800300e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	431a      	orrs	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	609a      	str	r2, [r3, #8]
}
 8003020:	bf00      	nop
 8003022:	370c      	adds	r7, #12
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800303c:	4618      	mov	r0, r3
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003048:	b480      	push	{r7}
 800304a:	b087      	sub	sp, #28
 800304c:	af00      	add	r7, sp, #0
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	607a      	str	r2, [r7, #4]
 8003054:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	3360      	adds	r3, #96	; 0x60
 800305a:	461a      	mov	r2, r3
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	4413      	add	r3, r2
 8003062:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	430b      	orrs	r3, r1
 8003076:	431a      	orrs	r2, r3
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800307c:	bf00      	nop
 800307e:	371c      	adds	r7, #28
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003088:	b480      	push	{r7}
 800308a:	b085      	sub	sp, #20
 800308c:	af00      	add	r7, sp, #0
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	691b      	ldr	r3, [r3, #16]
 8003098:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	f003 031f 	and.w	r3, r3, #31
 80030a2:	6879      	ldr	r1, [r7, #4]
 80030a4:	fa01 f303 	lsl.w	r3, r1, r3
 80030a8:	431a      	orrs	r2, r3
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	611a      	str	r2, [r3, #16]
}
 80030ae:	bf00      	nop
 80030b0:	3714      	adds	r7, #20
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr

080030ba <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80030ba:	b480      	push	{r7}
 80030bc:	b087      	sub	sp, #28
 80030be:	af00      	add	r7, sp, #0
 80030c0:	60f8      	str	r0, [r7, #12]
 80030c2:	60b9      	str	r1, [r7, #8]
 80030c4:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	3360      	adds	r3, #96	; 0x60
 80030ca:	461a      	mov	r2, r3
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	4413      	add	r3, r2
 80030d2:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	431a      	orrs	r2, r3
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	601a      	str	r2, [r3, #0]
  }
}
 80030e4:	bf00      	nop
 80030e6:	371c      	adds	r7, #28
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003100:	2b00      	cmp	r3, #0
 8003102:	d101      	bne.n	8003108 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003104:	2301      	movs	r3, #1
 8003106:	e000      	b.n	800310a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	370c      	adds	r7, #12
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr

08003116 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003116:	b480      	push	{r7}
 8003118:	b087      	sub	sp, #28
 800311a:	af00      	add	r7, sp, #0
 800311c:	60f8      	str	r0, [r7, #12]
 800311e:	60b9      	str	r1, [r7, #8]
 8003120:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	3330      	adds	r3, #48	; 0x30
 8003126:	461a      	mov	r2, r3
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	0a1b      	lsrs	r3, r3, #8
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	f003 030c 	and.w	r3, r3, #12
 8003132:	4413      	add	r3, r2
 8003134:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	f003 031f 	and.w	r3, r3, #31
 8003140:	211f      	movs	r1, #31
 8003142:	fa01 f303 	lsl.w	r3, r1, r3
 8003146:	43db      	mvns	r3, r3
 8003148:	401a      	ands	r2, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	0e9b      	lsrs	r3, r3, #26
 800314e:	f003 011f 	and.w	r1, r3, #31
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	f003 031f 	and.w	r3, r3, #31
 8003158:	fa01 f303 	lsl.w	r3, r1, r3
 800315c:	431a      	orrs	r2, r3
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003162:	bf00      	nop
 8003164:	371c      	adds	r7, #28
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr

0800316e <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800316e:	b480      	push	{r7}
 8003170:	b083      	sub	sp, #12
 8003172:	af00      	add	r7, sp, #0
 8003174:	6078      	str	r0, [r7, #4]
 8003176:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	f023 0203 	bic.w	r2, r3, #3
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	431a      	orrs	r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	60da      	str	r2, [r3, #12]
}
 8003188:	bf00      	nop
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003194:	b480      	push	{r7}
 8003196:	b087      	sub	sp, #28
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	3314      	adds	r3, #20
 80031a4:	461a      	mov	r2, r3
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	0e5b      	lsrs	r3, r3, #25
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	f003 0304 	and.w	r3, r3, #4
 80031b0:	4413      	add	r3, r2
 80031b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	0d1b      	lsrs	r3, r3, #20
 80031bc:	f003 031f 	and.w	r3, r3, #31
 80031c0:	2107      	movs	r1, #7
 80031c2:	fa01 f303 	lsl.w	r3, r1, r3
 80031c6:	43db      	mvns	r3, r3
 80031c8:	401a      	ands	r2, r3
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	0d1b      	lsrs	r3, r3, #20
 80031ce:	f003 031f 	and.w	r3, r3, #31
 80031d2:	6879      	ldr	r1, [r7, #4]
 80031d4:	fa01 f303 	lsl.w	r3, r1, r3
 80031d8:	431a      	orrs	r2, r3
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80031de:	bf00      	nop
 80031e0:	371c      	adds	r7, #28
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr
	...

080031ec <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b085      	sub	sp, #20
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003204:	43db      	mvns	r3, r3
 8003206:	401a      	ands	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f003 0318 	and.w	r3, r3, #24
 800320e:	4908      	ldr	r1, [pc, #32]	; (8003230 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003210:	40d9      	lsrs	r1, r3
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	400b      	ands	r3, r1
 8003216:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800321a:	431a      	orrs	r2, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003222:	bf00      	nop
 8003224:	3714      	adds	r7, #20
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	000fffff 	.word	0x000fffff

08003234 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	f003 031f 	and.w	r3, r3, #31
}
 8003244:	4618      	mov	r0, r3
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	689a      	ldr	r2, [r3, #8]
 800325c:	4b04      	ldr	r3, [pc, #16]	; (8003270 <LL_ADC_DisableDeepPowerDown+0x20>)
 800325e:	4013      	ands	r3, r2
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	6093      	str	r3, [r2, #8]
}
 8003264:	bf00      	nop
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr
 8003270:	5fffffc0 	.word	0x5fffffc0

08003274 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003284:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003288:	d101      	bne.n	800328e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800328a:	2301      	movs	r3, #1
 800328c:	e000      	b.n	8003290 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800328e:	2300      	movs	r3, #0
}
 8003290:	4618      	mov	r0, r3
 8003292:	370c      	adds	r7, #12
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr

0800329c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	689a      	ldr	r2, [r3, #8]
 80032a8:	4b05      	ldr	r3, [pc, #20]	; (80032c0 <LL_ADC_EnableInternalRegulator+0x24>)
 80032aa:	4013      	ands	r3, r2
 80032ac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80032b4:	bf00      	nop
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr
 80032c0:	6fffffc0 	.word	0x6fffffc0

080032c4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80032d8:	d101      	bne.n	80032de <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80032da:	2301      	movs	r3, #1
 80032dc:	e000      	b.n	80032e0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	689a      	ldr	r2, [r3, #8]
 80032f8:	4b05      	ldr	r3, [pc, #20]	; (8003310 <LL_ADC_Enable+0x24>)
 80032fa:	4013      	ands	r3, r2
 80032fc:	f043 0201 	orr.w	r2, r3, #1
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003304:	bf00      	nop
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr
 8003310:	7fffffc0 	.word	0x7fffffc0

08003314 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	689a      	ldr	r2, [r3, #8]
 8003320:	4b05      	ldr	r3, [pc, #20]	; (8003338 <LL_ADC_Disable+0x24>)
 8003322:	4013      	ands	r3, r2
 8003324:	f043 0202 	orr.w	r2, r3, #2
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800332c:	bf00      	nop
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr
 8003338:	7fffffc0 	.word	0x7fffffc0

0800333c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f003 0301 	and.w	r3, r3, #1
 800334c:	2b01      	cmp	r3, #1
 800334e:	d101      	bne.n	8003354 <LL_ADC_IsEnabled+0x18>
 8003350:	2301      	movs	r3, #1
 8003352:	e000      	b.n	8003356 <LL_ADC_IsEnabled+0x1a>
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	370c      	adds	r7, #12
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr

08003362 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003362:	b480      	push	{r7}
 8003364:	b083      	sub	sp, #12
 8003366:	af00      	add	r7, sp, #0
 8003368:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	2b02      	cmp	r3, #2
 8003374:	d101      	bne.n	800337a <LL_ADC_IsDisableOngoing+0x18>
 8003376:	2301      	movs	r3, #1
 8003378:	e000      	b.n	800337c <LL_ADC_IsDisableOngoing+0x1a>
 800337a:	2300      	movs	r3, #0
}
 800337c:	4618      	mov	r0, r3
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	689a      	ldr	r2, [r3, #8]
 8003394:	4b05      	ldr	r3, [pc, #20]	; (80033ac <LL_ADC_REG_StartConversion+0x24>)
 8003396:	4013      	ands	r3, r2
 8003398:	f043 0204 	orr.w	r2, r3, #4
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80033a0:	bf00      	nop
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr
 80033ac:	7fffffc0 	.word	0x7fffffc0

080033b0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f003 0304 	and.w	r3, r3, #4
 80033c0:	2b04      	cmp	r3, #4
 80033c2:	d101      	bne.n	80033c8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80033c4:	2301      	movs	r3, #1
 80033c6:	e000      	b.n	80033ca <LL_ADC_REG_IsConversionOngoing+0x1a>
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	370c      	adds	r7, #12
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr

080033d6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80033d6:	b480      	push	{r7}
 80033d8:	b083      	sub	sp, #12
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f003 0308 	and.w	r3, r3, #8
 80033e6:	2b08      	cmp	r3, #8
 80033e8:	d101      	bne.n	80033ee <LL_ADC_INJ_IsConversionOngoing+0x18>
 80033ea:	2301      	movs	r3, #1
 80033ec:	e000      	b.n	80033f0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80033ee:	2300      	movs	r3, #0
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	370c      	adds	r7, #12
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr

080033fc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80033fc:	b590      	push	{r4, r7, lr}
 80033fe:	b089      	sub	sp, #36	; 0x24
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003404:	2300      	movs	r3, #0
 8003406:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003408:	2300      	movs	r3, #0
 800340a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d101      	bne.n	8003416 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e18f      	b.n	8003736 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003420:	2b00      	cmp	r3, #0
 8003422:	d109      	bne.n	8003438 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f7fe fea5 	bl	8002174 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4618      	mov	r0, r3
 800343e:	f7ff ff19 	bl	8003274 <LL_ADC_IsDeepPowerDownEnabled>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d004      	beq.n	8003452 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4618      	mov	r0, r3
 800344e:	f7ff feff 	bl	8003250 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4618      	mov	r0, r3
 8003458:	f7ff ff34 	bl	80032c4 <LL_ADC_IsInternalRegulatorEnabled>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d114      	bne.n	800348c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4618      	mov	r0, r3
 8003468:	f7ff ff18 	bl	800329c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800346c:	4b87      	ldr	r3, [pc, #540]	; (800368c <HAL_ADC_Init+0x290>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	099b      	lsrs	r3, r3, #6
 8003472:	4a87      	ldr	r2, [pc, #540]	; (8003690 <HAL_ADC_Init+0x294>)
 8003474:	fba2 2303 	umull	r2, r3, r2, r3
 8003478:	099b      	lsrs	r3, r3, #6
 800347a:	3301      	adds	r3, #1
 800347c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800347e:	e002      	b.n	8003486 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	3b01      	subs	r3, #1
 8003484:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d1f9      	bne.n	8003480 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4618      	mov	r0, r3
 8003492:	f7ff ff17 	bl	80032c4 <LL_ADC_IsInternalRegulatorEnabled>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d10d      	bne.n	80034b8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034a0:	f043 0210 	orr.w	r2, r3, #16
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ac:	f043 0201 	orr.w	r2, r3, #1
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4618      	mov	r0, r3
 80034be:	f7ff ff77 	bl	80033b0 <LL_ADC_REG_IsConversionOngoing>
 80034c2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034c8:	f003 0310 	and.w	r3, r3, #16
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	f040 8129 	bne.w	8003724 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	f040 8125 	bne.w	8003724 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034de:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80034e2:	f043 0202 	orr.w	r2, r3, #2
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7ff ff24 	bl	800333c <LL_ADC_IsEnabled>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d136      	bne.n	8003568 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a65      	ldr	r2, [pc, #404]	; (8003694 <HAL_ADC_Init+0x298>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d004      	beq.n	800350e <HAL_ADC_Init+0x112>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a63      	ldr	r2, [pc, #396]	; (8003698 <HAL_ADC_Init+0x29c>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d10e      	bne.n	800352c <HAL_ADC_Init+0x130>
 800350e:	4861      	ldr	r0, [pc, #388]	; (8003694 <HAL_ADC_Init+0x298>)
 8003510:	f7ff ff14 	bl	800333c <LL_ADC_IsEnabled>
 8003514:	4604      	mov	r4, r0
 8003516:	4860      	ldr	r0, [pc, #384]	; (8003698 <HAL_ADC_Init+0x29c>)
 8003518:	f7ff ff10 	bl	800333c <LL_ADC_IsEnabled>
 800351c:	4603      	mov	r3, r0
 800351e:	4323      	orrs	r3, r4
 8003520:	2b00      	cmp	r3, #0
 8003522:	bf0c      	ite	eq
 8003524:	2301      	moveq	r3, #1
 8003526:	2300      	movne	r3, #0
 8003528:	b2db      	uxtb	r3, r3
 800352a:	e008      	b.n	800353e <HAL_ADC_Init+0x142>
 800352c:	485b      	ldr	r0, [pc, #364]	; (800369c <HAL_ADC_Init+0x2a0>)
 800352e:	f7ff ff05 	bl	800333c <LL_ADC_IsEnabled>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	bf0c      	ite	eq
 8003538:	2301      	moveq	r3, #1
 800353a:	2300      	movne	r3, #0
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d012      	beq.n	8003568 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a53      	ldr	r2, [pc, #332]	; (8003694 <HAL_ADC_Init+0x298>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d004      	beq.n	8003556 <HAL_ADC_Init+0x15a>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a51      	ldr	r2, [pc, #324]	; (8003698 <HAL_ADC_Init+0x29c>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d101      	bne.n	800355a <HAL_ADC_Init+0x15e>
 8003556:	4a52      	ldr	r2, [pc, #328]	; (80036a0 <HAL_ADC_Init+0x2a4>)
 8003558:	e000      	b.n	800355c <HAL_ADC_Init+0x160>
 800355a:	4a52      	ldr	r2, [pc, #328]	; (80036a4 <HAL_ADC_Init+0x2a8>)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	4619      	mov	r1, r3
 8003562:	4610      	mov	r0, r2
 8003564:	f7ff fd3c 	bl	8002fe0 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003568:	f7ff fd18 	bl	8002f9c <HAL_GetREVID>
 800356c:	4603      	mov	r3, r0
 800356e:	f241 0203 	movw	r2, #4099	; 0x1003
 8003572:	4293      	cmp	r3, r2
 8003574:	d914      	bls.n	80035a0 <HAL_ADC_Init+0x1a4>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	2b10      	cmp	r3, #16
 800357c:	d110      	bne.n	80035a0 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	7d5b      	ldrb	r3, [r3, #21]
 8003582:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003588:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800358e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	7f1b      	ldrb	r3, [r3, #28]
 8003594:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003596:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003598:	f043 030c 	orr.w	r3, r3, #12
 800359c:	61bb      	str	r3, [r7, #24]
 800359e:	e00d      	b.n	80035bc <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	7d5b      	ldrb	r3, [r3, #21]
 80035a4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80035aa:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80035b0:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	7f1b      	ldrb	r3, [r3, #28]
 80035b6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80035b8:	4313      	orrs	r3, r2
 80035ba:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	7f1b      	ldrb	r3, [r3, #28]
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d106      	bne.n	80035d2 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a1b      	ldr	r3, [r3, #32]
 80035c8:	3b01      	subs	r3, #1
 80035ca:	045b      	lsls	r3, r3, #17
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d009      	beq.n	80035ee <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035de:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e6:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80035e8:	69ba      	ldr	r2, [r7, #24]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68da      	ldr	r2, [r3, #12]
 80035f4:	4b2c      	ldr	r3, [pc, #176]	; (80036a8 <HAL_ADC_Init+0x2ac>)
 80035f6:	4013      	ands	r3, r2
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	6812      	ldr	r2, [r2, #0]
 80035fc:	69b9      	ldr	r1, [r7, #24]
 80035fe:	430b      	orrs	r3, r1
 8003600:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4618      	mov	r0, r3
 8003608:	f7ff fed2 	bl	80033b0 <LL_ADC_REG_IsConversionOngoing>
 800360c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4618      	mov	r0, r3
 8003614:	f7ff fedf 	bl	80033d6 <LL_ADC_INJ_IsConversionOngoing>
 8003618:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d15f      	bne.n	80036e0 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d15c      	bne.n	80036e0 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	7d1b      	ldrb	r3, [r3, #20]
 800362a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8003630:	4313      	orrs	r3, r2
 8003632:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	68da      	ldr	r2, [r3, #12]
 800363a:	4b1c      	ldr	r3, [pc, #112]	; (80036ac <HAL_ADC_Init+0x2b0>)
 800363c:	4013      	ands	r3, r2
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	6812      	ldr	r2, [r2, #0]
 8003642:	69b9      	ldr	r1, [r7, #24]
 8003644:	430b      	orrs	r3, r1
 8003646:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800364e:	2b01      	cmp	r3, #1
 8003650:	d130      	bne.n	80036b4 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003656:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	691a      	ldr	r2, [r3, #16]
 800365e:	4b14      	ldr	r3, [pc, #80]	; (80036b0 <HAL_ADC_Init+0x2b4>)
 8003660:	4013      	ands	r3, r2
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003666:	3a01      	subs	r2, #1
 8003668:	0411      	lsls	r1, r2, #16
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800366e:	4311      	orrs	r1, r2
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003674:	4311      	orrs	r1, r2
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800367a:	430a      	orrs	r2, r1
 800367c:	431a      	orrs	r2, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f042 0201 	orr.w	r2, r2, #1
 8003686:	611a      	str	r2, [r3, #16]
 8003688:	e01c      	b.n	80036c4 <HAL_ADC_Init+0x2c8>
 800368a:	bf00      	nop
 800368c:	24000088 	.word	0x24000088
 8003690:	053e2d63 	.word	0x053e2d63
 8003694:	40022000 	.word	0x40022000
 8003698:	40022100 	.word	0x40022100
 800369c:	58026000 	.word	0x58026000
 80036a0:	40022300 	.word	0x40022300
 80036a4:	58026300 	.word	0x58026300
 80036a8:	fff0c003 	.word	0xfff0c003
 80036ac:	ffffbffc 	.word	0xffffbffc
 80036b0:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	691a      	ldr	r2, [r3, #16]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f022 0201 	bic.w	r2, r2, #1
 80036c2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	430a      	orrs	r2, r1
 80036d8:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 fdec 	bl	80042b8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d10c      	bne.n	8003702 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ee:	f023 010f 	bic.w	r1, r3, #15
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	699b      	ldr	r3, [r3, #24]
 80036f6:	1e5a      	subs	r2, r3, #1
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	430a      	orrs	r2, r1
 80036fe:	631a      	str	r2, [r3, #48]	; 0x30
 8003700:	e007      	b.n	8003712 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f022 020f 	bic.w	r2, r2, #15
 8003710:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003716:	f023 0303 	bic.w	r3, r3, #3
 800371a:	f043 0201 	orr.w	r2, r3, #1
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	655a      	str	r2, [r3, #84]	; 0x54
 8003722:	e007      	b.n	8003734 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003728:	f043 0210 	orr.w	r2, r3, #16
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003734:	7ffb      	ldrb	r3, [r7, #31]
}
 8003736:	4618      	mov	r0, r3
 8003738:	3724      	adds	r7, #36	; 0x24
 800373a:	46bd      	mov	sp, r7
 800373c:	bd90      	pop	{r4, r7, pc}
 800373e:	bf00      	nop

08003740 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b086      	sub	sp, #24
 8003744:	af00      	add	r7, sp, #0
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a55      	ldr	r2, [pc, #340]	; (80038a8 <HAL_ADC_Start_DMA+0x168>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d004      	beq.n	8003760 <HAL_ADC_Start_DMA+0x20>
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a54      	ldr	r2, [pc, #336]	; (80038ac <HAL_ADC_Start_DMA+0x16c>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d101      	bne.n	8003764 <HAL_ADC_Start_DMA+0x24>
 8003760:	4b53      	ldr	r3, [pc, #332]	; (80038b0 <HAL_ADC_Start_DMA+0x170>)
 8003762:	e000      	b.n	8003766 <HAL_ADC_Start_DMA+0x26>
 8003764:	4b53      	ldr	r3, [pc, #332]	; (80038b4 <HAL_ADC_Start_DMA+0x174>)
 8003766:	4618      	mov	r0, r3
 8003768:	f7ff fd64 	bl	8003234 <LL_ADC_GetMultimode>
 800376c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4618      	mov	r0, r3
 8003774:	f7ff fe1c 	bl	80033b0 <LL_ADC_REG_IsConversionOngoing>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	f040 808c 	bne.w	8003898 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003786:	2b01      	cmp	r3, #1
 8003788:	d101      	bne.n	800378e <HAL_ADC_Start_DMA+0x4e>
 800378a:	2302      	movs	r3, #2
 800378c:	e087      	b.n	800389e <HAL_ADC_Start_DMA+0x15e>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2201      	movs	r2, #1
 8003792:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d005      	beq.n	80037a8 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	2b05      	cmp	r3, #5
 80037a0:	d002      	beq.n	80037a8 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	2b09      	cmp	r3, #9
 80037a6:	d170      	bne.n	800388a <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80037a8:	68f8      	ldr	r0, [r7, #12]
 80037aa:	f000 fc07 	bl	8003fbc <ADC_Enable>
 80037ae:	4603      	mov	r3, r0
 80037b0:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80037b2:	7dfb      	ldrb	r3, [r7, #23]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d163      	bne.n	8003880 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80037bc:	4b3e      	ldr	r3, [pc, #248]	; (80038b8 <HAL_ADC_Start_DMA+0x178>)
 80037be:	4013      	ands	r3, r2
 80037c0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a37      	ldr	r2, [pc, #220]	; (80038ac <HAL_ADC_Start_DMA+0x16c>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d002      	beq.n	80037d8 <HAL_ADC_Start_DMA+0x98>
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	e000      	b.n	80037da <HAL_ADC_Start_DMA+0x9a>
 80037d8:	4b33      	ldr	r3, [pc, #204]	; (80038a8 <HAL_ADC_Start_DMA+0x168>)
 80037da:	68fa      	ldr	r2, [r7, #12]
 80037dc:	6812      	ldr	r2, [r2, #0]
 80037de:	4293      	cmp	r3, r2
 80037e0:	d002      	beq.n	80037e8 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d105      	bne.n	80037f4 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ec:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d006      	beq.n	800380e <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003804:	f023 0206 	bic.w	r2, r3, #6
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	659a      	str	r2, [r3, #88]	; 0x58
 800380c:	e002      	b.n	8003814 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2200      	movs	r2, #0
 8003812:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003818:	4a28      	ldr	r2, [pc, #160]	; (80038bc <HAL_ADC_Start_DMA+0x17c>)
 800381a:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003820:	4a27      	ldr	r2, [pc, #156]	; (80038c0 <HAL_ADC_Start_DMA+0x180>)
 8003822:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003828:	4a26      	ldr	r2, [pc, #152]	; (80038c4 <HAL_ADC_Start_DMA+0x184>)
 800382a:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	221c      	movs	r2, #28
 8003832:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2200      	movs	r2, #0
 8003838:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	685a      	ldr	r2, [r3, #4]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f042 0210 	orr.w	r2, r2, #16
 800384a:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003854:	4619      	mov	r1, r3
 8003856:	4610      	mov	r0, r2
 8003858:	f7ff fc89 	bl	800316e <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	3340      	adds	r3, #64	; 0x40
 8003866:	4619      	mov	r1, r3
 8003868:	68ba      	ldr	r2, [r7, #8]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f002 f80e 	bl	800588c <HAL_DMA_Start_IT>
 8003870:	4603      	mov	r3, r0
 8003872:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4618      	mov	r0, r3
 800387a:	f7ff fd85 	bl	8003388 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800387e:	e00d      	b.n	800389c <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2200      	movs	r2, #0
 8003884:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8003888:	e008      	b.n	800389c <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003896:	e001      	b.n	800389c <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003898:	2302      	movs	r3, #2
 800389a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800389c:	7dfb      	ldrb	r3, [r7, #23]
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3718      	adds	r7, #24
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	40022000 	.word	0x40022000
 80038ac:	40022100 	.word	0x40022100
 80038b0:	40022300 	.word	0x40022300
 80038b4:	58026300 	.word	0x58026300
 80038b8:	fffff0fe 	.word	0xfffff0fe
 80038bc:	0800418f 	.word	0x0800418f
 80038c0:	08004267 	.word	0x08004267
 80038c4:	08004283 	.word	0x08004283

080038c8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80038d0:	bf00      	nop
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80038e4:	bf00      	nop
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80038f8:	bf00      	nop
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr

08003904 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003904:	b590      	push	{r4, r7, lr}
 8003906:	b0a1      	sub	sp, #132	; 0x84
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800390e:	2300      	movs	r3, #0
 8003910:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003914:	2300      	movs	r3, #0
 8003916:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	4a65      	ldr	r2, [pc, #404]	; (8003ab4 <HAL_ADC_ConfigChannel+0x1b0>)
 800391e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003926:	2b01      	cmp	r3, #1
 8003928:	d101      	bne.n	800392e <HAL_ADC_ConfigChannel+0x2a>
 800392a:	2302      	movs	r3, #2
 800392c:	e32e      	b.n	8003f8c <HAL_ADC_ConfigChannel+0x688>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2201      	movs	r2, #1
 8003932:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4618      	mov	r0, r3
 800393c:	f7ff fd38 	bl	80033b0 <LL_ADC_REG_IsConversionOngoing>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	f040 8313 	bne.w	8003f6e <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2b00      	cmp	r3, #0
 800394e:	db2c      	blt.n	80039aa <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003958:	2b00      	cmp	r3, #0
 800395a:	d108      	bne.n	800396e <HAL_ADC_ConfigChannel+0x6a>
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	0e9b      	lsrs	r3, r3, #26
 8003962:	f003 031f 	and.w	r3, r3, #31
 8003966:	2201      	movs	r2, #1
 8003968:	fa02 f303 	lsl.w	r3, r2, r3
 800396c:	e016      	b.n	800399c <HAL_ADC_ConfigChannel+0x98>
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003974:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003976:	fa93 f3a3 	rbit	r3, r3
 800397a:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800397c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800397e:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003980:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003982:	2b00      	cmp	r3, #0
 8003984:	d101      	bne.n	800398a <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8003986:	2320      	movs	r3, #32
 8003988:	e003      	b.n	8003992 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 800398a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800398c:	fab3 f383 	clz	r3, r3
 8003990:	b2db      	uxtb	r3, r3
 8003992:	f003 031f 	and.w	r3, r3, #31
 8003996:	2201      	movs	r2, #1
 8003998:	fa02 f303 	lsl.w	r3, r2, r3
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	6812      	ldr	r2, [r2, #0]
 80039a0:	69d1      	ldr	r1, [r2, #28]
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	6812      	ldr	r2, [r2, #0]
 80039a6:	430b      	orrs	r3, r1
 80039a8:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6818      	ldr	r0, [r3, #0]
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	6859      	ldr	r1, [r3, #4]
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	461a      	mov	r2, r3
 80039b8:	f7ff fbad 	bl	8003116 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4618      	mov	r0, r3
 80039c2:	f7ff fcf5 	bl	80033b0 <LL_ADC_REG_IsConversionOngoing>
 80039c6:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7ff fd02 	bl	80033d6 <LL_ADC_INJ_IsConversionOngoing>
 80039d2:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80039d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	f040 80b8 	bne.w	8003b4c <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80039dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039de:	2b00      	cmp	r3, #0
 80039e0:	f040 80b4 	bne.w	8003b4c <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6818      	ldr	r0, [r3, #0]
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	6819      	ldr	r1, [r3, #0]
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	461a      	mov	r2, r3
 80039f2:	f7ff fbcf 	bl	8003194 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80039f6:	4b30      	ldr	r3, [pc, #192]	; (8003ab8 <HAL_ADC_ConfigChannel+0x1b4>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80039fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a02:	d10b      	bne.n	8003a1c <HAL_ADC_ConfigChannel+0x118>
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	695a      	ldr	r2, [r3, #20]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	089b      	lsrs	r3, r3, #2
 8003a10:	f003 0307 	and.w	r3, r3, #7
 8003a14:	005b      	lsls	r3, r3, #1
 8003a16:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1a:	e01d      	b.n	8003a58 <HAL_ADC_ConfigChannel+0x154>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	f003 0310 	and.w	r3, r3, #16
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d10b      	bne.n	8003a42 <HAL_ADC_ConfigChannel+0x13e>
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	695a      	ldr	r2, [r3, #20]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	089b      	lsrs	r3, r3, #2
 8003a36:	f003 0307 	and.w	r3, r3, #7
 8003a3a:	005b      	lsls	r3, r3, #1
 8003a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a40:	e00a      	b.n	8003a58 <HAL_ADC_ConfigChannel+0x154>
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	695a      	ldr	r2, [r3, #20]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	089b      	lsrs	r3, r3, #2
 8003a4e:	f003 0304 	and.w	r3, r3, #4
 8003a52:	005b      	lsls	r3, r3, #1
 8003a54:	fa02 f303 	lsl.w	r3, r2, r3
 8003a58:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	2b04      	cmp	r3, #4
 8003a60:	d02c      	beq.n	8003abc <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6818      	ldr	r0, [r3, #0]
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	6919      	ldr	r1, [r3, #16]
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a70:	f7ff faea 	bl	8003048 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6818      	ldr	r0, [r3, #0]
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	6919      	ldr	r1, [r3, #16]
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	7e5b      	ldrb	r3, [r3, #25]
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d102      	bne.n	8003a8a <HAL_ADC_ConfigChannel+0x186>
 8003a84:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003a88:	e000      	b.n	8003a8c <HAL_ADC_ConfigChannel+0x188>
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	f7ff fb14 	bl	80030ba <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6818      	ldr	r0, [r3, #0]
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	6919      	ldr	r1, [r3, #16]
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	7e1b      	ldrb	r3, [r3, #24]
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d102      	bne.n	8003aa8 <HAL_ADC_ConfigChannel+0x1a4>
 8003aa2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003aa6:	e000      	b.n	8003aaa <HAL_ADC_ConfigChannel+0x1a6>
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	461a      	mov	r2, r3
 8003aac:	f7ff faec 	bl	8003088 <LL_ADC_SetDataRightShift>
 8003ab0:	e04c      	b.n	8003b4c <HAL_ADC_ConfigChannel+0x248>
 8003ab2:	bf00      	nop
 8003ab4:	47ff0000 	.word	0x47ff0000
 8003ab8:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ac2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	069b      	lsls	r3, r3, #26
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d107      	bne.n	8003ae0 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003ade:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ae6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	069b      	lsls	r3, r3, #26
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d107      	bne.n	8003b04 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003b02:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b0a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	069b      	lsls	r3, r3, #26
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d107      	bne.n	8003b28 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003b26:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b2e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	069b      	lsls	r3, r3, #26
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d107      	bne.n	8003b4c <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003b4a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4618      	mov	r0, r3
 8003b52:	f7ff fbf3 	bl	800333c <LL_ADC_IsEnabled>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	f040 8211 	bne.w	8003f80 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6818      	ldr	r0, [r3, #0]
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	6819      	ldr	r1, [r3, #0]
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	f7ff fb3e 	bl	80031ec <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	4aa1      	ldr	r2, [pc, #644]	; (8003dfc <HAL_ADC_ConfigChannel+0x4f8>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	f040 812e 	bne.w	8003dd8 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d10b      	bne.n	8003ba4 <HAL_ADC_ConfigChannel+0x2a0>
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	0e9b      	lsrs	r3, r3, #26
 8003b92:	3301      	adds	r3, #1
 8003b94:	f003 031f 	and.w	r3, r3, #31
 8003b98:	2b09      	cmp	r3, #9
 8003b9a:	bf94      	ite	ls
 8003b9c:	2301      	movls	r3, #1
 8003b9e:	2300      	movhi	r3, #0
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	e019      	b.n	8003bd8 <HAL_ADC_ConfigChannel+0x2d4>
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003baa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003bac:	fa93 f3a3 	rbit	r3, r3
 8003bb0:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003bb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bb4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003bb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d101      	bne.n	8003bc0 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8003bbc:	2320      	movs	r3, #32
 8003bbe:	e003      	b.n	8003bc8 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8003bc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bc2:	fab3 f383 	clz	r3, r3
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	3301      	adds	r3, #1
 8003bca:	f003 031f 	and.w	r3, r3, #31
 8003bce:	2b09      	cmp	r3, #9
 8003bd0:	bf94      	ite	ls
 8003bd2:	2301      	movls	r3, #1
 8003bd4:	2300      	movhi	r3, #0
 8003bd6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d079      	beq.n	8003cd0 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d107      	bne.n	8003bf8 <HAL_ADC_ConfigChannel+0x2f4>
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	0e9b      	lsrs	r3, r3, #26
 8003bee:	3301      	adds	r3, #1
 8003bf0:	069b      	lsls	r3, r3, #26
 8003bf2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003bf6:	e015      	b.n	8003c24 <HAL_ADC_ConfigChannel+0x320>
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c00:	fa93 f3a3 	rbit	r3, r3
 8003c04:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003c06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c08:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003c0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d101      	bne.n	8003c14 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8003c10:	2320      	movs	r3, #32
 8003c12:	e003      	b.n	8003c1c <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8003c14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c16:	fab3 f383 	clz	r3, r3
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	3301      	adds	r3, #1
 8003c1e:	069b      	lsls	r3, r3, #26
 8003c20:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d109      	bne.n	8003c44 <HAL_ADC_ConfigChannel+0x340>
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	0e9b      	lsrs	r3, r3, #26
 8003c36:	3301      	adds	r3, #1
 8003c38:	f003 031f 	and.w	r3, r3, #31
 8003c3c:	2101      	movs	r1, #1
 8003c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c42:	e017      	b.n	8003c74 <HAL_ADC_ConfigChannel+0x370>
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c4c:	fa93 f3a3 	rbit	r3, r3
 8003c50:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003c52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c54:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003c56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d101      	bne.n	8003c60 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8003c5c:	2320      	movs	r3, #32
 8003c5e:	e003      	b.n	8003c68 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8003c60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c62:	fab3 f383 	clz	r3, r3
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	3301      	adds	r3, #1
 8003c6a:	f003 031f 	and.w	r3, r3, #31
 8003c6e:	2101      	movs	r1, #1
 8003c70:	fa01 f303 	lsl.w	r3, r1, r3
 8003c74:	ea42 0103 	orr.w	r1, r2, r3
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d10a      	bne.n	8003c9a <HAL_ADC_ConfigChannel+0x396>
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	0e9b      	lsrs	r3, r3, #26
 8003c8a:	3301      	adds	r3, #1
 8003c8c:	f003 021f 	and.w	r2, r3, #31
 8003c90:	4613      	mov	r3, r2
 8003c92:	005b      	lsls	r3, r3, #1
 8003c94:	4413      	add	r3, r2
 8003c96:	051b      	lsls	r3, r3, #20
 8003c98:	e018      	b.n	8003ccc <HAL_ADC_ConfigChannel+0x3c8>
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ca2:	fa93 f3a3 	rbit	r3, r3
 8003ca6:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003caa:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d101      	bne.n	8003cb6 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8003cb2:	2320      	movs	r3, #32
 8003cb4:	e003      	b.n	8003cbe <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8003cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cb8:	fab3 f383 	clz	r3, r3
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	f003 021f 	and.w	r2, r3, #31
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	005b      	lsls	r3, r3, #1
 8003cc8:	4413      	add	r3, r2
 8003cca:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ccc:	430b      	orrs	r3, r1
 8003cce:	e07e      	b.n	8003dce <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d107      	bne.n	8003cec <HAL_ADC_ConfigChannel+0x3e8>
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	0e9b      	lsrs	r3, r3, #26
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	069b      	lsls	r3, r3, #26
 8003ce6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003cea:	e015      	b.n	8003d18 <HAL_ADC_ConfigChannel+0x414>
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf4:	fa93 f3a3 	rbit	r3, r3
 8003cf8:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d101      	bne.n	8003d08 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8003d04:	2320      	movs	r3, #32
 8003d06:	e003      	b.n	8003d10 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8003d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d0a:	fab3 f383 	clz	r3, r3
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	3301      	adds	r3, #1
 8003d12:	069b      	lsls	r3, r3, #26
 8003d14:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d109      	bne.n	8003d38 <HAL_ADC_ConfigChannel+0x434>
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	0e9b      	lsrs	r3, r3, #26
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	f003 031f 	and.w	r3, r3, #31
 8003d30:	2101      	movs	r1, #1
 8003d32:	fa01 f303 	lsl.w	r3, r1, r3
 8003d36:	e017      	b.n	8003d68 <HAL_ADC_ConfigChannel+0x464>
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	fa93 f3a3 	rbit	r3, r3
 8003d44:	61bb      	str	r3, [r7, #24]
  return result;
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003d4a:	6a3b      	ldr	r3, [r7, #32]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d101      	bne.n	8003d54 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8003d50:	2320      	movs	r3, #32
 8003d52:	e003      	b.n	8003d5c <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8003d54:	6a3b      	ldr	r3, [r7, #32]
 8003d56:	fab3 f383 	clz	r3, r3
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	3301      	adds	r3, #1
 8003d5e:	f003 031f 	and.w	r3, r3, #31
 8003d62:	2101      	movs	r1, #1
 8003d64:	fa01 f303 	lsl.w	r3, r1, r3
 8003d68:	ea42 0103 	orr.w	r1, r2, r3
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d10d      	bne.n	8003d94 <HAL_ADC_ConfigChannel+0x490>
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	0e9b      	lsrs	r3, r3, #26
 8003d7e:	3301      	adds	r3, #1
 8003d80:	f003 021f 	and.w	r2, r3, #31
 8003d84:	4613      	mov	r3, r2
 8003d86:	005b      	lsls	r3, r3, #1
 8003d88:	4413      	add	r3, r2
 8003d8a:	3b1e      	subs	r3, #30
 8003d8c:	051b      	lsls	r3, r3, #20
 8003d8e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003d92:	e01b      	b.n	8003dcc <HAL_ADC_ConfigChannel+0x4c8>
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	fa93 f3a3 	rbit	r3, r3
 8003da0:	60fb      	str	r3, [r7, #12]
  return result;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d101      	bne.n	8003db0 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8003dac:	2320      	movs	r3, #32
 8003dae:	e003      	b.n	8003db8 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	fab3 f383 	clz	r3, r3
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	3301      	adds	r3, #1
 8003dba:	f003 021f 	and.w	r2, r3, #31
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	005b      	lsls	r3, r3, #1
 8003dc2:	4413      	add	r3, r2
 8003dc4:	3b1e      	subs	r3, #30
 8003dc6:	051b      	lsls	r3, r3, #20
 8003dc8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003dcc:	430b      	orrs	r3, r1
 8003dce:	683a      	ldr	r2, [r7, #0]
 8003dd0:	6892      	ldr	r2, [r2, #8]
 8003dd2:	4619      	mov	r1, r3
 8003dd4:	f7ff f9de 	bl	8003194 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f280 80cf 	bge.w	8003f80 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a06      	ldr	r2, [pc, #24]	; (8003e00 <HAL_ADC_ConfigChannel+0x4fc>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d004      	beq.n	8003df6 <HAL_ADC_ConfigChannel+0x4f2>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a04      	ldr	r2, [pc, #16]	; (8003e04 <HAL_ADC_ConfigChannel+0x500>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d10a      	bne.n	8003e0c <HAL_ADC_ConfigChannel+0x508>
 8003df6:	4b04      	ldr	r3, [pc, #16]	; (8003e08 <HAL_ADC_ConfigChannel+0x504>)
 8003df8:	e009      	b.n	8003e0e <HAL_ADC_ConfigChannel+0x50a>
 8003dfa:	bf00      	nop
 8003dfc:	47ff0000 	.word	0x47ff0000
 8003e00:	40022000 	.word	0x40022000
 8003e04:	40022100 	.word	0x40022100
 8003e08:	40022300 	.word	0x40022300
 8003e0c:	4b61      	ldr	r3, [pc, #388]	; (8003f94 <HAL_ADC_ConfigChannel+0x690>)
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f7ff f90c 	bl	800302c <LL_ADC_GetCommonPathInternalCh>
 8003e14:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a5f      	ldr	r2, [pc, #380]	; (8003f98 <HAL_ADC_ConfigChannel+0x694>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d004      	beq.n	8003e2a <HAL_ADC_ConfigChannel+0x526>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a5d      	ldr	r2, [pc, #372]	; (8003f9c <HAL_ADC_ConfigChannel+0x698>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d10e      	bne.n	8003e48 <HAL_ADC_ConfigChannel+0x544>
 8003e2a:	485b      	ldr	r0, [pc, #364]	; (8003f98 <HAL_ADC_ConfigChannel+0x694>)
 8003e2c:	f7ff fa86 	bl	800333c <LL_ADC_IsEnabled>
 8003e30:	4604      	mov	r4, r0
 8003e32:	485a      	ldr	r0, [pc, #360]	; (8003f9c <HAL_ADC_ConfigChannel+0x698>)
 8003e34:	f7ff fa82 	bl	800333c <LL_ADC_IsEnabled>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	4323      	orrs	r3, r4
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	bf0c      	ite	eq
 8003e40:	2301      	moveq	r3, #1
 8003e42:	2300      	movne	r3, #0
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	e008      	b.n	8003e5a <HAL_ADC_ConfigChannel+0x556>
 8003e48:	4855      	ldr	r0, [pc, #340]	; (8003fa0 <HAL_ADC_ConfigChannel+0x69c>)
 8003e4a:	f7ff fa77 	bl	800333c <LL_ADC_IsEnabled>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	bf0c      	ite	eq
 8003e54:	2301      	moveq	r3, #1
 8003e56:	2300      	movne	r3, #0
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d07d      	beq.n	8003f5a <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a50      	ldr	r2, [pc, #320]	; (8003fa4 <HAL_ADC_ConfigChannel+0x6a0>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d130      	bne.n	8003eca <HAL_ADC_ConfigChannel+0x5c6>
 8003e68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d12b      	bne.n	8003eca <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a4a      	ldr	r2, [pc, #296]	; (8003fa0 <HAL_ADC_ConfigChannel+0x69c>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	f040 8081 	bne.w	8003f80 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a45      	ldr	r2, [pc, #276]	; (8003f98 <HAL_ADC_ConfigChannel+0x694>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d004      	beq.n	8003e92 <HAL_ADC_ConfigChannel+0x58e>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a43      	ldr	r2, [pc, #268]	; (8003f9c <HAL_ADC_ConfigChannel+0x698>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d101      	bne.n	8003e96 <HAL_ADC_ConfigChannel+0x592>
 8003e92:	4a45      	ldr	r2, [pc, #276]	; (8003fa8 <HAL_ADC_ConfigChannel+0x6a4>)
 8003e94:	e000      	b.n	8003e98 <HAL_ADC_ConfigChannel+0x594>
 8003e96:	4a3f      	ldr	r2, [pc, #252]	; (8003f94 <HAL_ADC_ConfigChannel+0x690>)
 8003e98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e9a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	4610      	mov	r0, r2
 8003ea2:	f7ff f8b0 	bl	8003006 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003ea6:	4b41      	ldr	r3, [pc, #260]	; (8003fac <HAL_ADC_ConfigChannel+0x6a8>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	099b      	lsrs	r3, r3, #6
 8003eac:	4a40      	ldr	r2, [pc, #256]	; (8003fb0 <HAL_ADC_ConfigChannel+0x6ac>)
 8003eae:	fba2 2303 	umull	r2, r3, r2, r3
 8003eb2:	099b      	lsrs	r3, r3, #6
 8003eb4:	3301      	adds	r3, #1
 8003eb6:	005b      	lsls	r3, r3, #1
 8003eb8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003eba:	e002      	b.n	8003ec2 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d1f9      	bne.n	8003ebc <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ec8:	e05a      	b.n	8003f80 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a39      	ldr	r2, [pc, #228]	; (8003fb4 <HAL_ADC_ConfigChannel+0x6b0>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d11e      	bne.n	8003f12 <HAL_ADC_ConfigChannel+0x60e>
 8003ed4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ed6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d119      	bne.n	8003f12 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a2f      	ldr	r2, [pc, #188]	; (8003fa0 <HAL_ADC_ConfigChannel+0x69c>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d14b      	bne.n	8003f80 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a2a      	ldr	r2, [pc, #168]	; (8003f98 <HAL_ADC_ConfigChannel+0x694>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d004      	beq.n	8003efc <HAL_ADC_ConfigChannel+0x5f8>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a29      	ldr	r2, [pc, #164]	; (8003f9c <HAL_ADC_ConfigChannel+0x698>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d101      	bne.n	8003f00 <HAL_ADC_ConfigChannel+0x5fc>
 8003efc:	4a2a      	ldr	r2, [pc, #168]	; (8003fa8 <HAL_ADC_ConfigChannel+0x6a4>)
 8003efe:	e000      	b.n	8003f02 <HAL_ADC_ConfigChannel+0x5fe>
 8003f00:	4a24      	ldr	r2, [pc, #144]	; (8003f94 <HAL_ADC_ConfigChannel+0x690>)
 8003f02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f08:	4619      	mov	r1, r3
 8003f0a:	4610      	mov	r0, r2
 8003f0c:	f7ff f87b 	bl	8003006 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003f10:	e036      	b.n	8003f80 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a28      	ldr	r2, [pc, #160]	; (8003fb8 <HAL_ADC_ConfigChannel+0x6b4>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d131      	bne.n	8003f80 <HAL_ADC_ConfigChannel+0x67c>
 8003f1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d12c      	bne.n	8003f80 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a1d      	ldr	r2, [pc, #116]	; (8003fa0 <HAL_ADC_ConfigChannel+0x69c>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d127      	bne.n	8003f80 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a18      	ldr	r2, [pc, #96]	; (8003f98 <HAL_ADC_ConfigChannel+0x694>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d004      	beq.n	8003f44 <HAL_ADC_ConfigChannel+0x640>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a17      	ldr	r2, [pc, #92]	; (8003f9c <HAL_ADC_ConfigChannel+0x698>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d101      	bne.n	8003f48 <HAL_ADC_ConfigChannel+0x644>
 8003f44:	4a18      	ldr	r2, [pc, #96]	; (8003fa8 <HAL_ADC_ConfigChannel+0x6a4>)
 8003f46:	e000      	b.n	8003f4a <HAL_ADC_ConfigChannel+0x646>
 8003f48:	4a12      	ldr	r2, [pc, #72]	; (8003f94 <HAL_ADC_ConfigChannel+0x690>)
 8003f4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f4c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003f50:	4619      	mov	r1, r3
 8003f52:	4610      	mov	r0, r2
 8003f54:	f7ff f857 	bl	8003006 <LL_ADC_SetCommonPathInternalCh>
 8003f58:	e012      	b.n	8003f80 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f5e:	f043 0220 	orr.w	r2, r3, #32
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003f6c:	e008      	b.n	8003f80 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f72:	f043 0220 	orr.w	r2, r3, #32
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003f88:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3784      	adds	r7, #132	; 0x84
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd90      	pop	{r4, r7, pc}
 8003f94:	58026300 	.word	0x58026300
 8003f98:	40022000 	.word	0x40022000
 8003f9c:	40022100 	.word	0x40022100
 8003fa0:	58026000 	.word	0x58026000
 8003fa4:	cb840000 	.word	0xcb840000
 8003fa8:	40022300 	.word	0x40022300
 8003fac:	24000088 	.word	0x24000088
 8003fb0:	053e2d63 	.word	0x053e2d63
 8003fb4:	c7520000 	.word	0xc7520000
 8003fb8:	cfb80000 	.word	0xcfb80000

08003fbc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b084      	sub	sp, #16
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f7ff f9b7 	bl	800333c <LL_ADC_IsEnabled>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d16e      	bne.n	80040b2 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	689a      	ldr	r2, [r3, #8]
 8003fda:	4b38      	ldr	r3, [pc, #224]	; (80040bc <ADC_Enable+0x100>)
 8003fdc:	4013      	ands	r3, r2
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d00d      	beq.n	8003ffe <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fe6:	f043 0210 	orr.w	r2, r3, #16
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ff2:	f043 0201 	orr.w	r2, r3, #1
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e05a      	b.n	80040b4 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4618      	mov	r0, r3
 8004004:	f7ff f972 	bl	80032ec <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004008:	f7fe ffbc 	bl	8002f84 <HAL_GetTick>
 800400c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a2b      	ldr	r2, [pc, #172]	; (80040c0 <ADC_Enable+0x104>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d004      	beq.n	8004022 <ADC_Enable+0x66>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a29      	ldr	r2, [pc, #164]	; (80040c4 <ADC_Enable+0x108>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d101      	bne.n	8004026 <ADC_Enable+0x6a>
 8004022:	4b29      	ldr	r3, [pc, #164]	; (80040c8 <ADC_Enable+0x10c>)
 8004024:	e000      	b.n	8004028 <ADC_Enable+0x6c>
 8004026:	4b29      	ldr	r3, [pc, #164]	; (80040cc <ADC_Enable+0x110>)
 8004028:	4618      	mov	r0, r3
 800402a:	f7ff f903 	bl	8003234 <LL_ADC_GetMultimode>
 800402e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a23      	ldr	r2, [pc, #140]	; (80040c4 <ADC_Enable+0x108>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d002      	beq.n	8004040 <ADC_Enable+0x84>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	e000      	b.n	8004042 <ADC_Enable+0x86>
 8004040:	4b1f      	ldr	r3, [pc, #124]	; (80040c0 <ADC_Enable+0x104>)
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	6812      	ldr	r2, [r2, #0]
 8004046:	4293      	cmp	r3, r2
 8004048:	d02c      	beq.n	80040a4 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d130      	bne.n	80040b2 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004050:	e028      	b.n	80040a4 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4618      	mov	r0, r3
 8004058:	f7ff f970 	bl	800333c <LL_ADC_IsEnabled>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d104      	bne.n	800406c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4618      	mov	r0, r3
 8004068:	f7ff f940 	bl	80032ec <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800406c:	f7fe ff8a 	bl	8002f84 <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	2b02      	cmp	r3, #2
 8004078:	d914      	bls.n	80040a4 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0301 	and.w	r3, r3, #1
 8004084:	2b01      	cmp	r3, #1
 8004086:	d00d      	beq.n	80040a4 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800408c:	f043 0210 	orr.w	r2, r3, #16
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004098:	f043 0201 	orr.w	r2, r3, #1
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e007      	b.n	80040b4 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0301 	and.w	r3, r3, #1
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d1cf      	bne.n	8004052 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80040b2:	2300      	movs	r3, #0
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3710      	adds	r7, #16
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	8000003f 	.word	0x8000003f
 80040c0:	40022000 	.word	0x40022000
 80040c4:	40022100 	.word	0x40022100
 80040c8:	40022300 	.word	0x40022300
 80040cc:	58026300 	.word	0x58026300

080040d0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4618      	mov	r0, r3
 80040de:	f7ff f940 	bl	8003362 <LL_ADC_IsDisableOngoing>
 80040e2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4618      	mov	r0, r3
 80040ea:	f7ff f927 	bl	800333c <LL_ADC_IsEnabled>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d047      	beq.n	8004184 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d144      	bne.n	8004184 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	f003 030d 	and.w	r3, r3, #13
 8004104:	2b01      	cmp	r3, #1
 8004106:	d10c      	bne.n	8004122 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4618      	mov	r0, r3
 800410e:	f7ff f901 	bl	8003314 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	2203      	movs	r2, #3
 8004118:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800411a:	f7fe ff33 	bl	8002f84 <HAL_GetTick>
 800411e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004120:	e029      	b.n	8004176 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004126:	f043 0210 	orr.w	r2, r3, #16
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004132:	f043 0201 	orr.w	r2, r3, #1
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e023      	b.n	8004186 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800413e:	f7fe ff21 	bl	8002f84 <HAL_GetTick>
 8004142:	4602      	mov	r2, r0
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	2b02      	cmp	r3, #2
 800414a:	d914      	bls.n	8004176 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	f003 0301 	and.w	r3, r3, #1
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00d      	beq.n	8004176 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800415e:	f043 0210 	orr.w	r2, r3, #16
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800416a:	f043 0201 	orr.w	r2, r3, #1
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e007      	b.n	8004186 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	f003 0301 	and.w	r3, r3, #1
 8004180:	2b00      	cmp	r3, #0
 8004182:	d1dc      	bne.n	800413e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004184:	2300      	movs	r3, #0
}
 8004186:	4618      	mov	r0, r3
 8004188:	3710      	adds	r7, #16
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}

0800418e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800418e:	b580      	push	{r7, lr}
 8004190:	b084      	sub	sp, #16
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800419a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041a0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d14b      	bne.n	8004240 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ac:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0308 	and.w	r3, r3, #8
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d021      	beq.n	8004206 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4618      	mov	r0, r3
 80041c8:	f7fe ff92 	bl	80030f0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d032      	beq.n	8004238 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d12b      	bne.n	8004238 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d11f      	bne.n	8004238 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041fc:	f043 0201 	orr.w	r2, r3, #1
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	655a      	str	r2, [r3, #84]	; 0x54
 8004204:	e018      	b.n	8004238 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	f003 0303 	and.w	r3, r3, #3
 8004210:	2b00      	cmp	r3, #0
 8004212:	d111      	bne.n	8004238 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004218:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004224:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d105      	bne.n	8004238 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004230:	f043 0201 	orr.w	r2, r3, #1
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004238:	68f8      	ldr	r0, [r7, #12]
 800423a:	f7ff fb45 	bl	80038c8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800423e:	e00e      	b.n	800425e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004244:	f003 0310 	and.w	r3, r3, #16
 8004248:	2b00      	cmp	r3, #0
 800424a:	d003      	beq.n	8004254 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800424c:	68f8      	ldr	r0, [r7, #12]
 800424e:	f7ff fb4f 	bl	80038f0 <HAL_ADC_ErrorCallback>
}
 8004252:	e004      	b.n	800425e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	4798      	blx	r3
}
 800425e:	bf00      	nop
 8004260:	3710      	adds	r7, #16
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}

08004266 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004266:	b580      	push	{r7, lr}
 8004268:	b084      	sub	sp, #16
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004272:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004274:	68f8      	ldr	r0, [r7, #12]
 8004276:	f7ff fb31 	bl	80038dc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800427a:	bf00      	nop
 800427c:	3710      	adds	r7, #16
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}

08004282 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004282:	b580      	push	{r7, lr}
 8004284:	b084      	sub	sp, #16
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800428e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004294:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042a0:	f043 0204 	orr.w	r2, r3, #4
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80042a8:	68f8      	ldr	r0, [r7, #12]
 80042aa:	f7ff fb21 	bl	80038f0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80042ae:	bf00      	nop
 80042b0:	3710      	adds	r7, #16
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
	...

080042b8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a7a      	ldr	r2, [pc, #488]	; (80044b0 <ADC_ConfigureBoostMode+0x1f8>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d004      	beq.n	80042d4 <ADC_ConfigureBoostMode+0x1c>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a79      	ldr	r2, [pc, #484]	; (80044b4 <ADC_ConfigureBoostMode+0x1fc>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d109      	bne.n	80042e8 <ADC_ConfigureBoostMode+0x30>
 80042d4:	4b78      	ldr	r3, [pc, #480]	; (80044b8 <ADC_ConfigureBoostMode+0x200>)
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	bf14      	ite	ne
 80042e0:	2301      	movne	r3, #1
 80042e2:	2300      	moveq	r3, #0
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	e008      	b.n	80042fa <ADC_ConfigureBoostMode+0x42>
 80042e8:	4b74      	ldr	r3, [pc, #464]	; (80044bc <ADC_ConfigureBoostMode+0x204>)
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	bf14      	ite	ne
 80042f4:	2301      	movne	r3, #1
 80042f6:	2300      	moveq	r3, #0
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d01c      	beq.n	8004338 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80042fe:	f005 f87f 	bl	8009400 <HAL_RCC_GetHCLKFreq>
 8004302:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800430c:	d010      	beq.n	8004330 <ADC_ConfigureBoostMode+0x78>
 800430e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004312:	d873      	bhi.n	80043fc <ADC_ConfigureBoostMode+0x144>
 8004314:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004318:	d002      	beq.n	8004320 <ADC_ConfigureBoostMode+0x68>
 800431a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800431e:	d16d      	bne.n	80043fc <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	0c1b      	lsrs	r3, r3, #16
 8004326:	68fa      	ldr	r2, [r7, #12]
 8004328:	fbb2 f3f3 	udiv	r3, r2, r3
 800432c:	60fb      	str	r3, [r7, #12]
        break;
 800432e:	e068      	b.n	8004402 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	089b      	lsrs	r3, r3, #2
 8004334:	60fb      	str	r3, [r7, #12]
        break;
 8004336:	e064      	b.n	8004402 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004338:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800433c:	f04f 0100 	mov.w	r1, #0
 8004340:	f006 fb06 	bl	800a950 <HAL_RCCEx_GetPeriphCLKFreq>
 8004344:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800434e:	d051      	beq.n	80043f4 <ADC_ConfigureBoostMode+0x13c>
 8004350:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004354:	d854      	bhi.n	8004400 <ADC_ConfigureBoostMode+0x148>
 8004356:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800435a:	d047      	beq.n	80043ec <ADC_ConfigureBoostMode+0x134>
 800435c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004360:	d84e      	bhi.n	8004400 <ADC_ConfigureBoostMode+0x148>
 8004362:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004366:	d03d      	beq.n	80043e4 <ADC_ConfigureBoostMode+0x12c>
 8004368:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800436c:	d848      	bhi.n	8004400 <ADC_ConfigureBoostMode+0x148>
 800436e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004372:	d033      	beq.n	80043dc <ADC_ConfigureBoostMode+0x124>
 8004374:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004378:	d842      	bhi.n	8004400 <ADC_ConfigureBoostMode+0x148>
 800437a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800437e:	d029      	beq.n	80043d4 <ADC_ConfigureBoostMode+0x11c>
 8004380:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004384:	d83c      	bhi.n	8004400 <ADC_ConfigureBoostMode+0x148>
 8004386:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800438a:	d01a      	beq.n	80043c2 <ADC_ConfigureBoostMode+0x10a>
 800438c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004390:	d836      	bhi.n	8004400 <ADC_ConfigureBoostMode+0x148>
 8004392:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004396:	d014      	beq.n	80043c2 <ADC_ConfigureBoostMode+0x10a>
 8004398:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800439c:	d830      	bhi.n	8004400 <ADC_ConfigureBoostMode+0x148>
 800439e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043a2:	d00e      	beq.n	80043c2 <ADC_ConfigureBoostMode+0x10a>
 80043a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043a8:	d82a      	bhi.n	8004400 <ADC_ConfigureBoostMode+0x148>
 80043aa:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80043ae:	d008      	beq.n	80043c2 <ADC_ConfigureBoostMode+0x10a>
 80043b0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80043b4:	d824      	bhi.n	8004400 <ADC_ConfigureBoostMode+0x148>
 80043b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80043ba:	d002      	beq.n	80043c2 <ADC_ConfigureBoostMode+0x10a>
 80043bc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80043c0:	d11e      	bne.n	8004400 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	0c9b      	lsrs	r3, r3, #18
 80043c8:	005b      	lsls	r3, r3, #1
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80043d0:	60fb      	str	r3, [r7, #12]
        break;
 80043d2:	e016      	b.n	8004402 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	091b      	lsrs	r3, r3, #4
 80043d8:	60fb      	str	r3, [r7, #12]
        break;
 80043da:	e012      	b.n	8004402 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	095b      	lsrs	r3, r3, #5
 80043e0:	60fb      	str	r3, [r7, #12]
        break;
 80043e2:	e00e      	b.n	8004402 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	099b      	lsrs	r3, r3, #6
 80043e8:	60fb      	str	r3, [r7, #12]
        break;
 80043ea:	e00a      	b.n	8004402 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	09db      	lsrs	r3, r3, #7
 80043f0:	60fb      	str	r3, [r7, #12]
        break;
 80043f2:	e006      	b.n	8004402 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	0a1b      	lsrs	r3, r3, #8
 80043f8:	60fb      	str	r3, [r7, #12]
        break;
 80043fa:	e002      	b.n	8004402 <ADC_ConfigureBoostMode+0x14a>
        break;
 80043fc:	bf00      	nop
 80043fe:	e000      	b.n	8004402 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004400:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8004402:	f7fe fdcb 	bl	8002f9c <HAL_GetREVID>
 8004406:	4603      	mov	r3, r0
 8004408:	f241 0203 	movw	r2, #4099	; 0x1003
 800440c:	4293      	cmp	r3, r2
 800440e:	d815      	bhi.n	800443c <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	4a2b      	ldr	r2, [pc, #172]	; (80044c0 <ADC_ConfigureBoostMode+0x208>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d908      	bls.n	800442a <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	689a      	ldr	r2, [r3, #8]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004426:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004428:	e03e      	b.n	80044a8 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	689a      	ldr	r2, [r3, #8]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004438:	609a      	str	r2, [r3, #8]
}
 800443a:	e035      	b.n	80044a8 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	085b      	lsrs	r3, r3, #1
 8004440:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	4a1f      	ldr	r2, [pc, #124]	; (80044c4 <ADC_ConfigureBoostMode+0x20c>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d808      	bhi.n	800445c <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	689a      	ldr	r2, [r3, #8]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004458:	609a      	str	r2, [r3, #8]
}
 800445a:	e025      	b.n	80044a8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	4a1a      	ldr	r2, [pc, #104]	; (80044c8 <ADC_ConfigureBoostMode+0x210>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d80a      	bhi.n	800447a <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004476:	609a      	str	r2, [r3, #8]
}
 8004478:	e016      	b.n	80044a8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	4a13      	ldr	r2, [pc, #76]	; (80044cc <ADC_ConfigureBoostMode+0x214>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d80a      	bhi.n	8004498 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004494:	609a      	str	r2, [r3, #8]
}
 8004496:	e007      	b.n	80044a8 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	689a      	ldr	r2, [r3, #8]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80044a6:	609a      	str	r2, [r3, #8]
}
 80044a8:	bf00      	nop
 80044aa:	3710      	adds	r7, #16
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	40022000 	.word	0x40022000
 80044b4:	40022100 	.word	0x40022100
 80044b8:	40022300 	.word	0x40022300
 80044bc:	58026300 	.word	0x58026300
 80044c0:	01312d00 	.word	0x01312d00
 80044c4:	005f5e10 	.word	0x005f5e10
 80044c8:	00bebc20 	.word	0x00bebc20
 80044cc:	017d7840 	.word	0x017d7840

080044d0 <LL_ADC_IsEnabled>:
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	f003 0301 	and.w	r3, r3, #1
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d101      	bne.n	80044e8 <LL_ADC_IsEnabled+0x18>
 80044e4:	2301      	movs	r3, #1
 80044e6:	e000      	b.n	80044ea <LL_ADC_IsEnabled+0x1a>
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	370c      	adds	r7, #12
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr
	...

080044f8 <LL_ADC_StartCalibration>:
{
 80044f8:	b480      	push	{r7}
 80044fa:	b085      	sub	sp, #20
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	689a      	ldr	r2, [r3, #8]
 8004508:	4b09      	ldr	r3, [pc, #36]	; (8004530 <LL_ADC_StartCalibration+0x38>)
 800450a:	4013      	ands	r3, r2
 800450c:	68ba      	ldr	r2, [r7, #8]
 800450e:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004518:	430a      	orrs	r2, r1
 800451a:	4313      	orrs	r3, r2
 800451c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	609a      	str	r2, [r3, #8]
}
 8004524:	bf00      	nop
 8004526:	3714      	adds	r7, #20
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr
 8004530:	3ffeffc0 	.word	0x3ffeffc0

08004534 <LL_ADC_IsCalibrationOnGoing>:
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004544:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004548:	d101      	bne.n	800454e <LL_ADC_IsCalibrationOnGoing+0x1a>
 800454a:	2301      	movs	r3, #1
 800454c:	e000      	b.n	8004550 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800454e:	2300      	movs	r3, #0
}
 8004550:	4618      	mov	r0, r3
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr

0800455c <LL_ADC_REG_IsConversionOngoing>:
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	f003 0304 	and.w	r3, r3, #4
 800456c:	2b04      	cmp	r3, #4
 800456e:	d101      	bne.n	8004574 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004570:	2301      	movs	r3, #1
 8004572:	e000      	b.n	8004576 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004574:	2300      	movs	r3, #0
}
 8004576:	4618      	mov	r0, r3
 8004578:	370c      	adds	r7, #12
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr
	...

08004584 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b086      	sub	sp, #24
 8004588:	af00      	add	r7, sp, #0
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	60b9      	str	r1, [r7, #8]
 800458e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004590:	2300      	movs	r3, #0
 8004592:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800459a:	2b01      	cmp	r3, #1
 800459c:	d101      	bne.n	80045a2 <HAL_ADCEx_Calibration_Start+0x1e>
 800459e:	2302      	movs	r3, #2
 80045a0:	e04c      	b.n	800463c <HAL_ADCEx_Calibration_Start+0xb8>
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80045aa:	68f8      	ldr	r0, [r7, #12]
 80045ac:	f7ff fd90 	bl	80040d0 <ADC_Disable>
 80045b0:	4603      	mov	r3, r0
 80045b2:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80045b4:	7dfb      	ldrb	r3, [r7, #23]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d135      	bne.n	8004626 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045be:	4b21      	ldr	r3, [pc, #132]	; (8004644 <HAL_ADCEx_Calibration_Start+0xc0>)
 80045c0:	4013      	ands	r3, r2
 80045c2:	f043 0202 	orr.w	r2, r3, #2
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	68b9      	ldr	r1, [r7, #8]
 80045d2:	4618      	mov	r0, r3
 80045d4:	f7ff ff90 	bl	80044f8 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80045d8:	e014      	b.n	8004604 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	3301      	adds	r3, #1
 80045de:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	4a19      	ldr	r2, [pc, #100]	; (8004648 <HAL_ADCEx_Calibration_Start+0xc4>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d30d      	bcc.n	8004604 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ec:	f023 0312 	bic.w	r3, r3, #18
 80045f0:	f043 0210 	orr.w	r2, r3, #16
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2200      	movs	r2, #0
 80045fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e01b      	b.n	800463c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4618      	mov	r0, r3
 800460a:	f7ff ff93 	bl	8004534 <LL_ADC_IsCalibrationOnGoing>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d1e2      	bne.n	80045da <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004618:	f023 0303 	bic.w	r3, r3, #3
 800461c:	f043 0201 	orr.w	r2, r3, #1
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	655a      	str	r2, [r3, #84]	; 0x54
 8004624:	e005      	b.n	8004632 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800462a:	f043 0210 	orr.w	r2, r3, #16
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2200      	movs	r2, #0
 8004636:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800463a:	7dfb      	ldrb	r3, [r7, #23]
}
 800463c:	4618      	mov	r0, r3
 800463e:	3718      	adds	r7, #24
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}
 8004644:	ffffeefd 	.word	0xffffeefd
 8004648:	25c3f800 	.word	0x25c3f800

0800464c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800464c:	b590      	push	{r4, r7, lr}
 800464e:	b09f      	sub	sp, #124	; 0x7c
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004656:	2300      	movs	r3, #0
 8004658:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004662:	2b01      	cmp	r3, #1
 8004664:	d101      	bne.n	800466a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004666:	2302      	movs	r3, #2
 8004668:	e0be      	b.n	80047e8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2201      	movs	r2, #1
 800466e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004672:	2300      	movs	r3, #0
 8004674:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004676:	2300      	movs	r3, #0
 8004678:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a5c      	ldr	r2, [pc, #368]	; (80047f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d102      	bne.n	800468a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004684:	4b5b      	ldr	r3, [pc, #364]	; (80047f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004686:	60bb      	str	r3, [r7, #8]
 8004688:	e001      	b.n	800468e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800468a:	2300      	movs	r3, #0
 800468c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d10b      	bne.n	80046ac <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004698:	f043 0220 	orr.w	r2, r3, #32
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e09d      	b.n	80047e8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	4618      	mov	r0, r3
 80046b0:	f7ff ff54 	bl	800455c <LL_ADC_REG_IsConversionOngoing>
 80046b4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4618      	mov	r0, r3
 80046bc:	f7ff ff4e 	bl	800455c <LL_ADC_REG_IsConversionOngoing>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d17f      	bne.n	80047c6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80046c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d17c      	bne.n	80047c6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a47      	ldr	r2, [pc, #284]	; (80047f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d004      	beq.n	80046e0 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a46      	ldr	r2, [pc, #280]	; (80047f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d101      	bne.n	80046e4 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80046e0:	4b45      	ldr	r3, [pc, #276]	; (80047f8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80046e2:	e000      	b.n	80046e6 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80046e4:	4b45      	ldr	r3, [pc, #276]	; (80047fc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80046e6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d039      	beq.n	8004764 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80046f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	431a      	orrs	r2, r3
 80046fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004700:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a3a      	ldr	r2, [pc, #232]	; (80047f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d004      	beq.n	8004716 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a38      	ldr	r2, [pc, #224]	; (80047f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d10e      	bne.n	8004734 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004716:	4836      	ldr	r0, [pc, #216]	; (80047f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004718:	f7ff feda 	bl	80044d0 <LL_ADC_IsEnabled>
 800471c:	4604      	mov	r4, r0
 800471e:	4835      	ldr	r0, [pc, #212]	; (80047f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004720:	f7ff fed6 	bl	80044d0 <LL_ADC_IsEnabled>
 8004724:	4603      	mov	r3, r0
 8004726:	4323      	orrs	r3, r4
 8004728:	2b00      	cmp	r3, #0
 800472a:	bf0c      	ite	eq
 800472c:	2301      	moveq	r3, #1
 800472e:	2300      	movne	r3, #0
 8004730:	b2db      	uxtb	r3, r3
 8004732:	e008      	b.n	8004746 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8004734:	4832      	ldr	r0, [pc, #200]	; (8004800 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004736:	f7ff fecb 	bl	80044d0 <LL_ADC_IsEnabled>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	bf0c      	ite	eq
 8004740:	2301      	moveq	r3, #1
 8004742:	2300      	movne	r3, #0
 8004744:	b2db      	uxtb	r3, r3
 8004746:	2b00      	cmp	r3, #0
 8004748:	d047      	beq.n	80047da <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800474a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800474c:	689a      	ldr	r2, [r3, #8]
 800474e:	4b2d      	ldr	r3, [pc, #180]	; (8004804 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004750:	4013      	ands	r3, r2
 8004752:	683a      	ldr	r2, [r7, #0]
 8004754:	6811      	ldr	r1, [r2, #0]
 8004756:	683a      	ldr	r2, [r7, #0]
 8004758:	6892      	ldr	r2, [r2, #8]
 800475a:	430a      	orrs	r2, r1
 800475c:	431a      	orrs	r2, r3
 800475e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004760:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004762:	e03a      	b.n	80047da <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004764:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800476c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800476e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a1e      	ldr	r2, [pc, #120]	; (80047f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d004      	beq.n	8004784 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a1d      	ldr	r2, [pc, #116]	; (80047f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d10e      	bne.n	80047a2 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8004784:	481a      	ldr	r0, [pc, #104]	; (80047f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004786:	f7ff fea3 	bl	80044d0 <LL_ADC_IsEnabled>
 800478a:	4604      	mov	r4, r0
 800478c:	4819      	ldr	r0, [pc, #100]	; (80047f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800478e:	f7ff fe9f 	bl	80044d0 <LL_ADC_IsEnabled>
 8004792:	4603      	mov	r3, r0
 8004794:	4323      	orrs	r3, r4
 8004796:	2b00      	cmp	r3, #0
 8004798:	bf0c      	ite	eq
 800479a:	2301      	moveq	r3, #1
 800479c:	2300      	movne	r3, #0
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	e008      	b.n	80047b4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80047a2:	4817      	ldr	r0, [pc, #92]	; (8004800 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80047a4:	f7ff fe94 	bl	80044d0 <LL_ADC_IsEnabled>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	bf0c      	ite	eq
 80047ae:	2301      	moveq	r3, #1
 80047b0:	2300      	movne	r3, #0
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d010      	beq.n	80047da <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80047b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047ba:	689a      	ldr	r2, [r3, #8]
 80047bc:	4b11      	ldr	r3, [pc, #68]	; (8004804 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80047be:	4013      	ands	r3, r2
 80047c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80047c2:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80047c4:	e009      	b.n	80047da <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ca:	f043 0220 	orr.w	r2, r3, #32
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80047d8:	e000      	b.n	80047dc <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80047da:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80047e4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	377c      	adds	r7, #124	; 0x7c
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd90      	pop	{r4, r7, pc}
 80047f0:	40022000 	.word	0x40022000
 80047f4:	40022100 	.word	0x40022100
 80047f8:	40022300 	.word	0x40022300
 80047fc:	58026300 	.word	0x58026300
 8004800:	58026000 	.word	0x58026000
 8004804:	fffff0e0 	.word	0xfffff0e0

08004808 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004808:	b480      	push	{r7}
 800480a:	b085      	sub	sp, #20
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f003 0307 	and.w	r3, r3, #7
 8004816:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004818:	4b0b      	ldr	r3, [pc, #44]	; (8004848 <__NVIC_SetPriorityGrouping+0x40>)
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800481e:	68ba      	ldr	r2, [r7, #8]
 8004820:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004824:	4013      	ands	r3, r2
 8004826:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004830:	4b06      	ldr	r3, [pc, #24]	; (800484c <__NVIC_SetPriorityGrouping+0x44>)
 8004832:	4313      	orrs	r3, r2
 8004834:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004836:	4a04      	ldr	r2, [pc, #16]	; (8004848 <__NVIC_SetPriorityGrouping+0x40>)
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	60d3      	str	r3, [r2, #12]
}
 800483c:	bf00      	nop
 800483e:	3714      	adds	r7, #20
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr
 8004848:	e000ed00 	.word	0xe000ed00
 800484c:	05fa0000 	.word	0x05fa0000

08004850 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004850:	b480      	push	{r7}
 8004852:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004854:	4b04      	ldr	r3, [pc, #16]	; (8004868 <__NVIC_GetPriorityGrouping+0x18>)
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	0a1b      	lsrs	r3, r3, #8
 800485a:	f003 0307 	and.w	r3, r3, #7
}
 800485e:	4618      	mov	r0, r3
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr
 8004868:	e000ed00 	.word	0xe000ed00

0800486c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	4603      	mov	r3, r0
 8004874:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004876:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800487a:	2b00      	cmp	r3, #0
 800487c:	db0b      	blt.n	8004896 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800487e:	88fb      	ldrh	r3, [r7, #6]
 8004880:	f003 021f 	and.w	r2, r3, #31
 8004884:	4907      	ldr	r1, [pc, #28]	; (80048a4 <__NVIC_EnableIRQ+0x38>)
 8004886:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800488a:	095b      	lsrs	r3, r3, #5
 800488c:	2001      	movs	r0, #1
 800488e:	fa00 f202 	lsl.w	r2, r0, r2
 8004892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004896:	bf00      	nop
 8004898:	370c      	adds	r7, #12
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop
 80048a4:	e000e100 	.word	0xe000e100

080048a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	4603      	mov	r3, r0
 80048b0:	6039      	str	r1, [r7, #0]
 80048b2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80048b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	db0a      	blt.n	80048d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	b2da      	uxtb	r2, r3
 80048c0:	490c      	ldr	r1, [pc, #48]	; (80048f4 <__NVIC_SetPriority+0x4c>)
 80048c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80048c6:	0112      	lsls	r2, r2, #4
 80048c8:	b2d2      	uxtb	r2, r2
 80048ca:	440b      	add	r3, r1
 80048cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80048d0:	e00a      	b.n	80048e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	b2da      	uxtb	r2, r3
 80048d6:	4908      	ldr	r1, [pc, #32]	; (80048f8 <__NVIC_SetPriority+0x50>)
 80048d8:	88fb      	ldrh	r3, [r7, #6]
 80048da:	f003 030f 	and.w	r3, r3, #15
 80048de:	3b04      	subs	r3, #4
 80048e0:	0112      	lsls	r2, r2, #4
 80048e2:	b2d2      	uxtb	r2, r2
 80048e4:	440b      	add	r3, r1
 80048e6:	761a      	strb	r2, [r3, #24]
}
 80048e8:	bf00      	nop
 80048ea:	370c      	adds	r7, #12
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr
 80048f4:	e000e100 	.word	0xe000e100
 80048f8:	e000ed00 	.word	0xe000ed00

080048fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b089      	sub	sp, #36	; 0x24
 8004900:	af00      	add	r7, sp, #0
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f003 0307 	and.w	r3, r3, #7
 800490e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	f1c3 0307 	rsb	r3, r3, #7
 8004916:	2b04      	cmp	r3, #4
 8004918:	bf28      	it	cs
 800491a:	2304      	movcs	r3, #4
 800491c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	3304      	adds	r3, #4
 8004922:	2b06      	cmp	r3, #6
 8004924:	d902      	bls.n	800492c <NVIC_EncodePriority+0x30>
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	3b03      	subs	r3, #3
 800492a:	e000      	b.n	800492e <NVIC_EncodePriority+0x32>
 800492c:	2300      	movs	r3, #0
 800492e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004930:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	fa02 f303 	lsl.w	r3, r2, r3
 800493a:	43da      	mvns	r2, r3
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	401a      	ands	r2, r3
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004944:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	fa01 f303 	lsl.w	r3, r1, r3
 800494e:	43d9      	mvns	r1, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004954:	4313      	orrs	r3, r2
         );
}
 8004956:	4618      	mov	r0, r3
 8004958:	3724      	adds	r7, #36	; 0x24
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr

08004962 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004962:	b580      	push	{r7, lr}
 8004964:	b082      	sub	sp, #8
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f7ff ff4c 	bl	8004808 <__NVIC_SetPriorityGrouping>
}
 8004970:	bf00      	nop
 8004972:	3708      	adds	r7, #8
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}

08004978 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b086      	sub	sp, #24
 800497c:	af00      	add	r7, sp, #0
 800497e:	4603      	mov	r3, r0
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	607a      	str	r2, [r7, #4]
 8004984:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004986:	f7ff ff63 	bl	8004850 <__NVIC_GetPriorityGrouping>
 800498a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	68b9      	ldr	r1, [r7, #8]
 8004990:	6978      	ldr	r0, [r7, #20]
 8004992:	f7ff ffb3 	bl	80048fc <NVIC_EncodePriority>
 8004996:	4602      	mov	r2, r0
 8004998:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800499c:	4611      	mov	r1, r2
 800499e:	4618      	mov	r0, r3
 80049a0:	f7ff ff82 	bl	80048a8 <__NVIC_SetPriority>
}
 80049a4:	bf00      	nop
 80049a6:	3718      	adds	r7, #24
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}

080049ac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b082      	sub	sp, #8
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	4603      	mov	r3, r0
 80049b4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80049b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7ff ff56 	bl	800486c <__NVIC_EnableIRQ>
}
 80049c0:	bf00      	nop
 80049c2:	3708      	adds	r7, #8
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d101      	bne.n	80049da <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e014      	b.n	8004a04 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	791b      	ldrb	r3, [r3, #4]
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d105      	bne.n	80049f0 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f7fd fcdc 	bl	80023a8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2202      	movs	r2, #2
 80049f4:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004a02:	2300      	movs	r3, #0
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3708      	adds	r7, #8
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d101      	bne.n	8004a20 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e046      	b.n	8004aae <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	795b      	ldrb	r3, [r3, #5]
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d101      	bne.n	8004a2c <HAL_DAC_Start+0x20>
 8004a28:	2302      	movs	r3, #2
 8004a2a:	e040      	b.n	8004aae <HAL_DAC_Start+0xa2>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2202      	movs	r2, #2
 8004a36:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	6819      	ldr	r1, [r3, #0]
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	f003 0310 	and.w	r3, r3, #16
 8004a44:	2201      	movs	r2, #1
 8004a46:	409a      	lsls	r2, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	430a      	orrs	r2, r1
 8004a4e:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d10f      	bne.n	8004a76 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8004a60:	2b02      	cmp	r3, #2
 8004a62:	d11d      	bne.n	8004aa0 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	685a      	ldr	r2, [r3, #4]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f042 0201 	orr.w	r2, r2, #1
 8004a72:	605a      	str	r2, [r3, #4]
 8004a74:	e014      	b.n	8004aa0 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	f003 0310 	and.w	r3, r3, #16
 8004a86:	2102      	movs	r1, #2
 8004a88:	fa01 f303 	lsl.w	r3, r1, r3
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d107      	bne.n	8004aa0 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	685a      	ldr	r2, [r3, #4]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f042 0202 	orr.w	r2, r2, #2
 8004a9e:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004aac:	2300      	movs	r3, #0
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	370c      	adds	r7, #12
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr
	...

08004abc <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b086      	sub	sp, #24
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	60b9      	str	r1, [r7, #8]
 8004ac6:	607a      	str	r2, [r7, #4]
 8004ac8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d101      	bne.n	8004ad4 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e0a2      	b.n	8004c1a <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	795b      	ldrb	r3, [r3, #5]
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d101      	bne.n	8004ae0 <HAL_DAC_Start_DMA+0x24>
 8004adc:	2302      	movs	r3, #2
 8004ade:	e09c      	b.n	8004c1a <HAL_DAC_Start_DMA+0x15e>
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2202      	movs	r2, #2
 8004aea:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d129      	bne.n	8004b46 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	4a4b      	ldr	r2, [pc, #300]	; (8004c24 <HAL_DAC_Start_DMA+0x168>)
 8004af8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	4a4a      	ldr	r2, [pc, #296]	; (8004c28 <HAL_DAC_Start_DMA+0x16c>)
 8004b00:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	4a49      	ldr	r2, [pc, #292]	; (8004c2c <HAL_DAC_Start_DMA+0x170>)
 8004b08:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004b18:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8004b1a:	6a3b      	ldr	r3, [r7, #32]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d003      	beq.n	8004b28 <HAL_DAC_Start_DMA+0x6c>
 8004b20:	6a3b      	ldr	r3, [r7, #32]
 8004b22:	2b04      	cmp	r3, #4
 8004b24:	d005      	beq.n	8004b32 <HAL_DAC_Start_DMA+0x76>
 8004b26:	e009      	b.n	8004b3c <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	3308      	adds	r3, #8
 8004b2e:	613b      	str	r3, [r7, #16]
        break;
 8004b30:	e033      	b.n	8004b9a <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	330c      	adds	r3, #12
 8004b38:	613b      	str	r3, [r7, #16]
        break;
 8004b3a:	e02e      	b.n	8004b9a <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	3310      	adds	r3, #16
 8004b42:	613b      	str	r3, [r7, #16]
        break;
 8004b44:	e029      	b.n	8004b9a <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	4a39      	ldr	r2, [pc, #228]	; (8004c30 <HAL_DAC_Start_DMA+0x174>)
 8004b4c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	4a38      	ldr	r2, [pc, #224]	; (8004c34 <HAL_DAC_Start_DMA+0x178>)
 8004b54:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	4a37      	ldr	r2, [pc, #220]	; (8004c38 <HAL_DAC_Start_DMA+0x17c>)
 8004b5c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004b6c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8004b6e:	6a3b      	ldr	r3, [r7, #32]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d003      	beq.n	8004b7c <HAL_DAC_Start_DMA+0xc0>
 8004b74:	6a3b      	ldr	r3, [r7, #32]
 8004b76:	2b04      	cmp	r3, #4
 8004b78:	d005      	beq.n	8004b86 <HAL_DAC_Start_DMA+0xca>
 8004b7a:	e009      	b.n	8004b90 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	3314      	adds	r3, #20
 8004b82:	613b      	str	r3, [r7, #16]
        break;
 8004b84:	e009      	b.n	8004b9a <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	3318      	adds	r3, #24
 8004b8c:	613b      	str	r3, [r7, #16]
        break;
 8004b8e:	e004      	b.n	8004b9a <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	331c      	adds	r3, #28
 8004b96:	613b      	str	r3, [r7, #16]
        break;
 8004b98:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d111      	bne.n	8004bc4 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004bae:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6898      	ldr	r0, [r3, #8]
 8004bb4:	6879      	ldr	r1, [r7, #4]
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	693a      	ldr	r2, [r7, #16]
 8004bba:	f000 fe67 	bl	800588c <HAL_DMA_Start_IT>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	75fb      	strb	r3, [r7, #23]
 8004bc2:	e010      	b.n	8004be6 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004bd2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	68d8      	ldr	r0, [r3, #12]
 8004bd8:	6879      	ldr	r1, [r7, #4]
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	693a      	ldr	r2, [r7, #16]
 8004bde:	f000 fe55 	bl	800588c <HAL_DMA_Start_IT>
 8004be2:	4603      	mov	r3, r0
 8004be4:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2200      	movs	r2, #0
 8004bea:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8004bec:	7dfb      	ldrb	r3, [r7, #23]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d10c      	bne.n	8004c0c <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	6819      	ldr	r1, [r3, #0]
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	f003 0310 	and.w	r3, r3, #16
 8004bfe:	2201      	movs	r2, #1
 8004c00:	409a      	lsls	r2, r3
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	430a      	orrs	r2, r1
 8004c08:	601a      	str	r2, [r3, #0]
 8004c0a:	e005      	b.n	8004c18 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	f043 0204 	orr.w	r2, r3, #4
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8004c18:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3718      	adds	r7, #24
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	bf00      	nop
 8004c24:	080050ad 	.word	0x080050ad
 8004c28:	080050cf 	.word	0x080050cf
 8004c2c:	080050eb 	.word	0x080050eb
 8004c30:	08005169 	.word	0x08005169
 8004c34:	0800518b 	.word	0x0800518b
 8004c38:	080051a7 	.word	0x080051a7

08004c3c <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b082      	sub	sp, #8
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d101      	bne.n	8004c50 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e03e      	b.n	8004cce <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	6819      	ldr	r1, [r3, #0]
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	f003 0310 	and.w	r3, r3, #16
 8004c5c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004c60:	fa02 f303 	lsl.w	r3, r2, r3
 8004c64:	43da      	mvns	r2, r3
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	400a      	ands	r2, r1
 8004c6c:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	6819      	ldr	r1, [r3, #0]
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	f003 0310 	and.w	r3, r3, #16
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c80:	43da      	mvns	r2, r3
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	400a      	ands	r2, r1
 8004c88:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d10d      	bne.n	8004cac <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	4618      	mov	r0, r3
 8004c96:	f001 f863 	bl	8005d60 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ca8:	601a      	str	r2, [r3, #0]
 8004caa:	e00c      	b.n	8004cc6 <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f001 f855 	bl	8005d60 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8004cc4:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2201      	movs	r2, #1
 8004cca:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3708      	adds	r7, #8
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}

08004cd6 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8004cd6:	b580      	push	{r7, lr}
 8004cd8:	b084      	sub	sp, #16
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cec:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d01d      	beq.n	8004d34 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d018      	beq.n	8004d34 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2204      	movs	r2, #4
 8004d06:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	691b      	ldr	r3, [r3, #16]
 8004d0c:	f043 0201 	orr.w	r2, r3, #1
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004d1c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004d2c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 f86f 	bl	8004e12 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d01d      	beq.n	8004d7a <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d018      	beq.n	8004d7a <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2204      	movs	r2, #4
 8004d4c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	691b      	ldr	r3, [r3, #16]
 8004d52:	f043 0202 	orr.w	r2, r3, #2
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004d62:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8004d72:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f000 f9ed 	bl	8005154 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8004d7a:	bf00      	nop
 8004d7c:	3710      	adds	r7, #16
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}

08004d82 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8004d82:	b480      	push	{r7}
 8004d84:	b087      	sub	sp, #28
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	60f8      	str	r0, [r7, #12]
 8004d8a:	60b9      	str	r1, [r7, #8]
 8004d8c:	607a      	str	r2, [r7, #4]
 8004d8e:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8004d90:	2300      	movs	r3, #0
 8004d92:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d101      	bne.n	8004d9e <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e015      	b.n	8004dca <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d105      	bne.n	8004db6 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8004daa:	697a      	ldr	r2, [r7, #20]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	4413      	add	r3, r2
 8004db0:	3308      	adds	r3, #8
 8004db2:	617b      	str	r3, [r7, #20]
 8004db4:	e004      	b.n	8004dc0 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8004db6:	697a      	ldr	r2, [r7, #20]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4413      	add	r3, r2
 8004dbc:	3314      	adds	r3, #20
 8004dbe:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	371c      	adds	r7, #28
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr

08004dd6 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004dd6:	b480      	push	{r7}
 8004dd8:	b083      	sub	sp, #12
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8004dde:	bf00      	nop
 8004de0:	370c      	adds	r7, #12
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr

08004dea <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004dea:	b480      	push	{r7}
 8004dec:	b083      	sub	sp, #12
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8004df2:	bf00      	nop
 8004df4:	370c      	adds	r7, #12
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr

08004dfe <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004dfe:	b480      	push	{r7}
 8004e00:	b083      	sub	sp, #12
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8004e06:	bf00      	nop
 8004e08:	370c      	adds	r7, #12
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr

08004e12 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004e12:	b480      	push	{r7}
 8004e14:	b083      	sub	sp, #12
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8004e1a:	bf00      	nop
 8004e1c:	370c      	adds	r7, #12
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr
	...

08004e28 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b08a      	sub	sp, #40	; 0x28
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	60f8      	str	r0, [r7, #12]
 8004e30:	60b9      	str	r1, [r7, #8]
 8004e32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e34:	2300      	movs	r3, #0
 8004e36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d002      	beq.n	8004e46 <HAL_DAC_ConfigChannel+0x1e>
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d101      	bne.n	8004e4a <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e12a      	b.n	80050a0 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	795b      	ldrb	r3, [r3, #5]
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d101      	bne.n	8004e56 <HAL_DAC_ConfigChannel+0x2e>
 8004e52:	2302      	movs	r3, #2
 8004e54:	e124      	b.n	80050a0 <HAL_DAC_ConfigChannel+0x278>
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2202      	movs	r2, #2
 8004e60:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	2b04      	cmp	r3, #4
 8004e68:	d17a      	bne.n	8004f60 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004e6a:	f7fe f88b 	bl	8002f84 <HAL_GetTick>
 8004e6e:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d13d      	bne.n	8004ef2 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004e76:	e018      	b.n	8004eaa <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004e78:	f7fe f884 	bl	8002f84 <HAL_GetTick>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	69fb      	ldr	r3, [r7, #28]
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d911      	bls.n	8004eaa <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e8c:	4b86      	ldr	r3, [pc, #536]	; (80050a8 <HAL_DAC_ConfigChannel+0x280>)
 8004e8e:	4013      	ands	r3, r2
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d00a      	beq.n	8004eaa <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	691b      	ldr	r3, [r3, #16]
 8004e98:	f043 0208 	orr.w	r2, r3, #8
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2203      	movs	r2, #3
 8004ea4:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	e0fa      	b.n	80050a0 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004eb0:	4b7d      	ldr	r3, [pc, #500]	; (80050a8 <HAL_DAC_ConfigChannel+0x280>)
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d1df      	bne.n	8004e78 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	68ba      	ldr	r2, [r7, #8]
 8004ebe:	6992      	ldr	r2, [r2, #24]
 8004ec0:	641a      	str	r2, [r3, #64]	; 0x40
 8004ec2:	e020      	b.n	8004f06 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004ec4:	f7fe f85e 	bl	8002f84 <HAL_GetTick>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d90f      	bls.n	8004ef2 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	da0a      	bge.n	8004ef2 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	f043 0208 	orr.w	r2, r3, #8
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2203      	movs	r2, #3
 8004eec:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e0d6      	b.n	80050a0 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	dbe3      	blt.n	8004ec4 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	68ba      	ldr	r2, [r7, #8]
 8004f02:	6992      	ldr	r2, [r2, #24]
 8004f04:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f003 0310 	and.w	r3, r3, #16
 8004f12:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004f16:	fa01 f303 	lsl.w	r3, r1, r3
 8004f1a:	43db      	mvns	r3, r3
 8004f1c:	ea02 0103 	and.w	r1, r2, r3
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	69da      	ldr	r2, [r3, #28]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f003 0310 	and.w	r3, r3, #16
 8004f2a:	409a      	lsls	r2, r3
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	430a      	orrs	r2, r1
 8004f32:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f003 0310 	and.w	r3, r3, #16
 8004f40:	21ff      	movs	r1, #255	; 0xff
 8004f42:	fa01 f303 	lsl.w	r3, r1, r3
 8004f46:	43db      	mvns	r3, r3
 8004f48:	ea02 0103 	and.w	r1, r2, r3
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	6a1a      	ldr	r2, [r3, #32]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f003 0310 	and.w	r3, r3, #16
 8004f56:	409a      	lsls	r2, r3
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	430a      	orrs	r2, r1
 8004f5e:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	691b      	ldr	r3, [r3, #16]
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d11d      	bne.n	8004fa4 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f6e:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f003 0310 	and.w	r3, r3, #16
 8004f76:	221f      	movs	r2, #31
 8004f78:	fa02 f303 	lsl.w	r3, r2, r3
 8004f7c:	43db      	mvns	r3, r3
 8004f7e:	69ba      	ldr	r2, [r7, #24]
 8004f80:	4013      	ands	r3, r2
 8004f82:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	695b      	ldr	r3, [r3, #20]
 8004f88:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f003 0310 	and.w	r3, r3, #16
 8004f90:	697a      	ldr	r2, [r7, #20]
 8004f92:	fa02 f303 	lsl.w	r3, r2, r3
 8004f96:	69ba      	ldr	r2, [r7, #24]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	69ba      	ldr	r2, [r7, #24]
 8004fa2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004faa:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f003 0310 	and.w	r3, r3, #16
 8004fb2:	2207      	movs	r2, #7
 8004fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb8:	43db      	mvns	r3, r3
 8004fba:	69ba      	ldr	r2, [r7, #24]
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d102      	bne.n	8004fce <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	627b      	str	r3, [r7, #36]	; 0x24
 8004fcc:	e00f      	b.n	8004fee <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	2b02      	cmp	r3, #2
 8004fd4:	d102      	bne.n	8004fdc <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	627b      	str	r3, [r7, #36]	; 0x24
 8004fda:	e008      	b.n	8004fee <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d102      	bne.n	8004fea <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	627b      	str	r3, [r7, #36]	; 0x24
 8004fe8:	e001      	b.n	8004fee <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004fea:	2300      	movs	r3, #0
 8004fec:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f003 0310 	and.w	r3, r3, #16
 8005004:	697a      	ldr	r2, [r7, #20]
 8005006:	fa02 f303 	lsl.w	r3, r2, r3
 800500a:	69ba      	ldr	r2, [r7, #24]
 800500c:	4313      	orrs	r3, r2
 800500e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	69ba      	ldr	r2, [r7, #24]
 8005016:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	6819      	ldr	r1, [r3, #0]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f003 0310 	and.w	r3, r3, #16
 8005024:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005028:	fa02 f303 	lsl.w	r3, r2, r3
 800502c:	43da      	mvns	r2, r3
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	400a      	ands	r2, r1
 8005034:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f003 0310 	and.w	r3, r3, #16
 8005044:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005048:	fa02 f303 	lsl.w	r3, r2, r3
 800504c:	43db      	mvns	r3, r3
 800504e:	69ba      	ldr	r2, [r7, #24]
 8005050:	4013      	ands	r3, r2
 8005052:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f003 0310 	and.w	r3, r3, #16
 8005060:	697a      	ldr	r2, [r7, #20]
 8005062:	fa02 f303 	lsl.w	r3, r2, r3
 8005066:	69ba      	ldr	r2, [r7, #24]
 8005068:	4313      	orrs	r3, r2
 800506a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	69ba      	ldr	r2, [r7, #24]
 8005072:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	6819      	ldr	r1, [r3, #0]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f003 0310 	and.w	r3, r3, #16
 8005080:	22c0      	movs	r2, #192	; 0xc0
 8005082:	fa02 f303 	lsl.w	r3, r2, r3
 8005086:	43da      	mvns	r2, r3
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	400a      	ands	r2, r1
 800508e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2201      	movs	r2, #1
 8005094:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2200      	movs	r2, #0
 800509a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800509c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3728      	adds	r7, #40	; 0x28
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	20008000 	.word	0x20008000

080050ac <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b084      	sub	sp, #16
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80050ba:	68f8      	ldr	r0, [r7, #12]
 80050bc:	f7ff fe8b 	bl	8004dd6 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2201      	movs	r2, #1
 80050c4:	711a      	strb	r2, [r3, #4]
}
 80050c6:	bf00      	nop
 80050c8:	3710      	adds	r7, #16
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}

080050ce <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80050ce:	b580      	push	{r7, lr}
 80050d0:	b084      	sub	sp, #16
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050da:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80050dc:	68f8      	ldr	r0, [r7, #12]
 80050de:	f7ff fe84 	bl	8004dea <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80050e2:	bf00      	nop
 80050e4:	3710      	adds	r7, #16
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}

080050ea <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80050ea:	b580      	push	{r7, lr}
 80050ec:	b084      	sub	sp, #16
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	691b      	ldr	r3, [r3, #16]
 80050fc:	f043 0204 	orr.w	r2, r3, #4
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8005104:	68f8      	ldr	r0, [r7, #12]
 8005106:	f7ff fe7a 	bl	8004dfe <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2201      	movs	r2, #1
 800510e:	711a      	strb	r2, [r3, #4]
}
 8005110:	bf00      	nop
 8005112:	3710      	adds	r7, #16
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}

08005118 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8005120:	bf00      	nop
 8005122:	370c      	adds	r7, #12
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr

0800512c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800512c:	b480      	push	{r7}
 800512e:	b083      	sub	sp, #12
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8005134:	bf00      	nop
 8005136:	370c      	adds	r7, #12
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr

08005140 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005140:	b480      	push	{r7}
 8005142:	b083      	sub	sp, #12
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8005148:	bf00      	nop
 800514a:	370c      	adds	r7, #12
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr

08005154 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800515c:	bf00      	nop
 800515e:	370c      	adds	r7, #12
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr

08005168 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b084      	sub	sp, #16
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005174:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8005176:	68f8      	ldr	r0, [r7, #12]
 8005178:	f7ff ffce 	bl	8005118 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2201      	movs	r2, #1
 8005180:	711a      	strb	r2, [r3, #4]
}
 8005182:	bf00      	nop
 8005184:	3710      	adds	r7, #16
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}

0800518a <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800518a:	b580      	push	{r7, lr}
 800518c:	b084      	sub	sp, #16
 800518e:	af00      	add	r7, sp, #0
 8005190:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005196:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8005198:	68f8      	ldr	r0, [r7, #12]
 800519a:	f7ff ffc7 	bl	800512c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800519e:	bf00      	nop
 80051a0:	3710      	adds	r7, #16
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}

080051a6 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80051a6:	b580      	push	{r7, lr}
 80051a8:	b084      	sub	sp, #16
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	691b      	ldr	r3, [r3, #16]
 80051b8:	f043 0204 	orr.w	r2, r3, #4
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80051c0:	68f8      	ldr	r0, [r7, #12]
 80051c2:	f7ff ffbd 	bl	8005140 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2201      	movs	r2, #1
 80051ca:	711a      	strb	r2, [r3, #4]
}
 80051cc:	bf00      	nop
 80051ce:	3710      	adds	r7, #16
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b086      	sub	sp, #24
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80051dc:	f7fd fed2 	bl	8002f84 <HAL_GetTick>
 80051e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d101      	bne.n	80051ec <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	e316      	b.n	800581a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a66      	ldr	r2, [pc, #408]	; (800538c <HAL_DMA_Init+0x1b8>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d04a      	beq.n	800528c <HAL_DMA_Init+0xb8>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a65      	ldr	r2, [pc, #404]	; (8005390 <HAL_DMA_Init+0x1bc>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d045      	beq.n	800528c <HAL_DMA_Init+0xb8>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a63      	ldr	r2, [pc, #396]	; (8005394 <HAL_DMA_Init+0x1c0>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d040      	beq.n	800528c <HAL_DMA_Init+0xb8>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a62      	ldr	r2, [pc, #392]	; (8005398 <HAL_DMA_Init+0x1c4>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d03b      	beq.n	800528c <HAL_DMA_Init+0xb8>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a60      	ldr	r2, [pc, #384]	; (800539c <HAL_DMA_Init+0x1c8>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d036      	beq.n	800528c <HAL_DMA_Init+0xb8>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a5f      	ldr	r2, [pc, #380]	; (80053a0 <HAL_DMA_Init+0x1cc>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d031      	beq.n	800528c <HAL_DMA_Init+0xb8>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a5d      	ldr	r2, [pc, #372]	; (80053a4 <HAL_DMA_Init+0x1d0>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d02c      	beq.n	800528c <HAL_DMA_Init+0xb8>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a5c      	ldr	r2, [pc, #368]	; (80053a8 <HAL_DMA_Init+0x1d4>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d027      	beq.n	800528c <HAL_DMA_Init+0xb8>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a5a      	ldr	r2, [pc, #360]	; (80053ac <HAL_DMA_Init+0x1d8>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d022      	beq.n	800528c <HAL_DMA_Init+0xb8>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a59      	ldr	r2, [pc, #356]	; (80053b0 <HAL_DMA_Init+0x1dc>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d01d      	beq.n	800528c <HAL_DMA_Init+0xb8>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a57      	ldr	r2, [pc, #348]	; (80053b4 <HAL_DMA_Init+0x1e0>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d018      	beq.n	800528c <HAL_DMA_Init+0xb8>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a56      	ldr	r2, [pc, #344]	; (80053b8 <HAL_DMA_Init+0x1e4>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d013      	beq.n	800528c <HAL_DMA_Init+0xb8>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a54      	ldr	r2, [pc, #336]	; (80053bc <HAL_DMA_Init+0x1e8>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d00e      	beq.n	800528c <HAL_DMA_Init+0xb8>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a53      	ldr	r2, [pc, #332]	; (80053c0 <HAL_DMA_Init+0x1ec>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d009      	beq.n	800528c <HAL_DMA_Init+0xb8>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a51      	ldr	r2, [pc, #324]	; (80053c4 <HAL_DMA_Init+0x1f0>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d004      	beq.n	800528c <HAL_DMA_Init+0xb8>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a50      	ldr	r2, [pc, #320]	; (80053c8 <HAL_DMA_Init+0x1f4>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d101      	bne.n	8005290 <HAL_DMA_Init+0xbc>
 800528c:	2301      	movs	r3, #1
 800528e:	e000      	b.n	8005292 <HAL_DMA_Init+0xbe>
 8005290:	2300      	movs	r3, #0
 8005292:	2b00      	cmp	r3, #0
 8005294:	f000 813b 	beq.w	800550e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2202      	movs	r2, #2
 800529c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a37      	ldr	r2, [pc, #220]	; (800538c <HAL_DMA_Init+0x1b8>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d04a      	beq.n	8005348 <HAL_DMA_Init+0x174>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a36      	ldr	r2, [pc, #216]	; (8005390 <HAL_DMA_Init+0x1bc>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d045      	beq.n	8005348 <HAL_DMA_Init+0x174>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a34      	ldr	r2, [pc, #208]	; (8005394 <HAL_DMA_Init+0x1c0>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d040      	beq.n	8005348 <HAL_DMA_Init+0x174>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a33      	ldr	r2, [pc, #204]	; (8005398 <HAL_DMA_Init+0x1c4>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d03b      	beq.n	8005348 <HAL_DMA_Init+0x174>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a31      	ldr	r2, [pc, #196]	; (800539c <HAL_DMA_Init+0x1c8>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d036      	beq.n	8005348 <HAL_DMA_Init+0x174>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a30      	ldr	r2, [pc, #192]	; (80053a0 <HAL_DMA_Init+0x1cc>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d031      	beq.n	8005348 <HAL_DMA_Init+0x174>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a2e      	ldr	r2, [pc, #184]	; (80053a4 <HAL_DMA_Init+0x1d0>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d02c      	beq.n	8005348 <HAL_DMA_Init+0x174>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a2d      	ldr	r2, [pc, #180]	; (80053a8 <HAL_DMA_Init+0x1d4>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d027      	beq.n	8005348 <HAL_DMA_Init+0x174>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a2b      	ldr	r2, [pc, #172]	; (80053ac <HAL_DMA_Init+0x1d8>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d022      	beq.n	8005348 <HAL_DMA_Init+0x174>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a2a      	ldr	r2, [pc, #168]	; (80053b0 <HAL_DMA_Init+0x1dc>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d01d      	beq.n	8005348 <HAL_DMA_Init+0x174>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a28      	ldr	r2, [pc, #160]	; (80053b4 <HAL_DMA_Init+0x1e0>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d018      	beq.n	8005348 <HAL_DMA_Init+0x174>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a27      	ldr	r2, [pc, #156]	; (80053b8 <HAL_DMA_Init+0x1e4>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d013      	beq.n	8005348 <HAL_DMA_Init+0x174>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a25      	ldr	r2, [pc, #148]	; (80053bc <HAL_DMA_Init+0x1e8>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d00e      	beq.n	8005348 <HAL_DMA_Init+0x174>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a24      	ldr	r2, [pc, #144]	; (80053c0 <HAL_DMA_Init+0x1ec>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d009      	beq.n	8005348 <HAL_DMA_Init+0x174>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a22      	ldr	r2, [pc, #136]	; (80053c4 <HAL_DMA_Init+0x1f0>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d004      	beq.n	8005348 <HAL_DMA_Init+0x174>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a21      	ldr	r2, [pc, #132]	; (80053c8 <HAL_DMA_Init+0x1f4>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d108      	bne.n	800535a <HAL_DMA_Init+0x186>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f022 0201 	bic.w	r2, r2, #1
 8005356:	601a      	str	r2, [r3, #0]
 8005358:	e007      	b.n	800536a <HAL_DMA_Init+0x196>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f022 0201 	bic.w	r2, r2, #1
 8005368:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800536a:	e02f      	b.n	80053cc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800536c:	f7fd fe0a 	bl	8002f84 <HAL_GetTick>
 8005370:	4602      	mov	r2, r0
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	2b05      	cmp	r3, #5
 8005378:	d928      	bls.n	80053cc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2220      	movs	r2, #32
 800537e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2203      	movs	r2, #3
 8005384:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	e246      	b.n	800581a <HAL_DMA_Init+0x646>
 800538c:	40020010 	.word	0x40020010
 8005390:	40020028 	.word	0x40020028
 8005394:	40020040 	.word	0x40020040
 8005398:	40020058 	.word	0x40020058
 800539c:	40020070 	.word	0x40020070
 80053a0:	40020088 	.word	0x40020088
 80053a4:	400200a0 	.word	0x400200a0
 80053a8:	400200b8 	.word	0x400200b8
 80053ac:	40020410 	.word	0x40020410
 80053b0:	40020428 	.word	0x40020428
 80053b4:	40020440 	.word	0x40020440
 80053b8:	40020458 	.word	0x40020458
 80053bc:	40020470 	.word	0x40020470
 80053c0:	40020488 	.word	0x40020488
 80053c4:	400204a0 	.word	0x400204a0
 80053c8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 0301 	and.w	r3, r3, #1
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d1c8      	bne.n	800536c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80053e2:	697a      	ldr	r2, [r7, #20]
 80053e4:	4b83      	ldr	r3, [pc, #524]	; (80055f4 <HAL_DMA_Init+0x420>)
 80053e6:	4013      	ands	r3, r2
 80053e8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80053f2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	691b      	ldr	r3, [r3, #16]
 80053f8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053fe:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	699b      	ldr	r3, [r3, #24]
 8005404:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800540a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6a1b      	ldr	r3, [r3, #32]
 8005410:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005412:	697a      	ldr	r2, [r7, #20]
 8005414:	4313      	orrs	r3, r2
 8005416:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800541c:	2b04      	cmp	r3, #4
 800541e:	d107      	bne.n	8005430 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005428:	4313      	orrs	r3, r2
 800542a:	697a      	ldr	r2, [r7, #20]
 800542c:	4313      	orrs	r3, r2
 800542e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005430:	4b71      	ldr	r3, [pc, #452]	; (80055f8 <HAL_DMA_Init+0x424>)
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	4b71      	ldr	r3, [pc, #452]	; (80055fc <HAL_DMA_Init+0x428>)
 8005436:	4013      	ands	r3, r2
 8005438:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800543c:	d328      	bcc.n	8005490 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	2b28      	cmp	r3, #40	; 0x28
 8005444:	d903      	bls.n	800544e <HAL_DMA_Init+0x27a>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	2b2e      	cmp	r3, #46	; 0x2e
 800544c:	d917      	bls.n	800547e <HAL_DMA_Init+0x2aa>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	2b3e      	cmp	r3, #62	; 0x3e
 8005454:	d903      	bls.n	800545e <HAL_DMA_Init+0x28a>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	2b42      	cmp	r3, #66	; 0x42
 800545c:	d90f      	bls.n	800547e <HAL_DMA_Init+0x2aa>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	2b46      	cmp	r3, #70	; 0x46
 8005464:	d903      	bls.n	800546e <HAL_DMA_Init+0x29a>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	2b48      	cmp	r3, #72	; 0x48
 800546c:	d907      	bls.n	800547e <HAL_DMA_Init+0x2aa>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	2b4e      	cmp	r3, #78	; 0x4e
 8005474:	d905      	bls.n	8005482 <HAL_DMA_Init+0x2ae>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	2b52      	cmp	r3, #82	; 0x52
 800547c:	d801      	bhi.n	8005482 <HAL_DMA_Init+0x2ae>
 800547e:	2301      	movs	r3, #1
 8005480:	e000      	b.n	8005484 <HAL_DMA_Init+0x2b0>
 8005482:	2300      	movs	r3, #0
 8005484:	2b00      	cmp	r3, #0
 8005486:	d003      	beq.n	8005490 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800548e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	697a      	ldr	r2, [r7, #20]
 8005496:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	695b      	ldr	r3, [r3, #20]
 800549e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	f023 0307 	bic.w	r3, r3, #7
 80054a6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ac:	697a      	ldr	r2, [r7, #20]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b6:	2b04      	cmp	r3, #4
 80054b8:	d117      	bne.n	80054ea <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054be:	697a      	ldr	r2, [r7, #20]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d00e      	beq.n	80054ea <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f002 fb33 	bl	8007b38 <DMA_CheckFifoParam>
 80054d2:	4603      	mov	r3, r0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d008      	beq.n	80054ea <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2240      	movs	r2, #64	; 0x40
 80054dc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2201      	movs	r2, #1
 80054e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e197      	b.n	800581a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	697a      	ldr	r2, [r7, #20]
 80054f0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f002 fa6e 	bl	80079d4 <DMA_CalcBaseAndBitshift>
 80054f8:	4603      	mov	r3, r0
 80054fa:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005500:	f003 031f 	and.w	r3, r3, #31
 8005504:	223f      	movs	r2, #63	; 0x3f
 8005506:	409a      	lsls	r2, r3
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	609a      	str	r2, [r3, #8]
 800550c:	e0cd      	b.n	80056aa <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a3b      	ldr	r2, [pc, #236]	; (8005600 <HAL_DMA_Init+0x42c>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d022      	beq.n	800555e <HAL_DMA_Init+0x38a>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a39      	ldr	r2, [pc, #228]	; (8005604 <HAL_DMA_Init+0x430>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d01d      	beq.n	800555e <HAL_DMA_Init+0x38a>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a38      	ldr	r2, [pc, #224]	; (8005608 <HAL_DMA_Init+0x434>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d018      	beq.n	800555e <HAL_DMA_Init+0x38a>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a36      	ldr	r2, [pc, #216]	; (800560c <HAL_DMA_Init+0x438>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d013      	beq.n	800555e <HAL_DMA_Init+0x38a>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a35      	ldr	r2, [pc, #212]	; (8005610 <HAL_DMA_Init+0x43c>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d00e      	beq.n	800555e <HAL_DMA_Init+0x38a>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a33      	ldr	r2, [pc, #204]	; (8005614 <HAL_DMA_Init+0x440>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d009      	beq.n	800555e <HAL_DMA_Init+0x38a>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a32      	ldr	r2, [pc, #200]	; (8005618 <HAL_DMA_Init+0x444>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d004      	beq.n	800555e <HAL_DMA_Init+0x38a>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a30      	ldr	r2, [pc, #192]	; (800561c <HAL_DMA_Init+0x448>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d101      	bne.n	8005562 <HAL_DMA_Init+0x38e>
 800555e:	2301      	movs	r3, #1
 8005560:	e000      	b.n	8005564 <HAL_DMA_Init+0x390>
 8005562:	2300      	movs	r3, #0
 8005564:	2b00      	cmp	r3, #0
 8005566:	f000 8097 	beq.w	8005698 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a24      	ldr	r2, [pc, #144]	; (8005600 <HAL_DMA_Init+0x42c>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d021      	beq.n	80055b8 <HAL_DMA_Init+0x3e4>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a22      	ldr	r2, [pc, #136]	; (8005604 <HAL_DMA_Init+0x430>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d01c      	beq.n	80055b8 <HAL_DMA_Init+0x3e4>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a21      	ldr	r2, [pc, #132]	; (8005608 <HAL_DMA_Init+0x434>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d017      	beq.n	80055b8 <HAL_DMA_Init+0x3e4>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a1f      	ldr	r2, [pc, #124]	; (800560c <HAL_DMA_Init+0x438>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d012      	beq.n	80055b8 <HAL_DMA_Init+0x3e4>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a1e      	ldr	r2, [pc, #120]	; (8005610 <HAL_DMA_Init+0x43c>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d00d      	beq.n	80055b8 <HAL_DMA_Init+0x3e4>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a1c      	ldr	r2, [pc, #112]	; (8005614 <HAL_DMA_Init+0x440>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d008      	beq.n	80055b8 <HAL_DMA_Init+0x3e4>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a1b      	ldr	r2, [pc, #108]	; (8005618 <HAL_DMA_Init+0x444>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d003      	beq.n	80055b8 <HAL_DMA_Init+0x3e4>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a19      	ldr	r2, [pc, #100]	; (800561c <HAL_DMA_Init+0x448>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2202      	movs	r2, #2
 80055be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80055d2:	697a      	ldr	r2, [r7, #20]
 80055d4:	4b12      	ldr	r3, [pc, #72]	; (8005620 <HAL_DMA_Init+0x44c>)
 80055d6:	4013      	ands	r3, r2
 80055d8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	2b40      	cmp	r3, #64	; 0x40
 80055e0:	d020      	beq.n	8005624 <HAL_DMA_Init+0x450>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	2b80      	cmp	r3, #128	; 0x80
 80055e8:	d102      	bne.n	80055f0 <HAL_DMA_Init+0x41c>
 80055ea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80055ee:	e01a      	b.n	8005626 <HAL_DMA_Init+0x452>
 80055f0:	2300      	movs	r3, #0
 80055f2:	e018      	b.n	8005626 <HAL_DMA_Init+0x452>
 80055f4:	fe10803f 	.word	0xfe10803f
 80055f8:	5c001000 	.word	0x5c001000
 80055fc:	ffff0000 	.word	0xffff0000
 8005600:	58025408 	.word	0x58025408
 8005604:	5802541c 	.word	0x5802541c
 8005608:	58025430 	.word	0x58025430
 800560c:	58025444 	.word	0x58025444
 8005610:	58025458 	.word	0x58025458
 8005614:	5802546c 	.word	0x5802546c
 8005618:	58025480 	.word	0x58025480
 800561c:	58025494 	.word	0x58025494
 8005620:	fffe000f 	.word	0xfffe000f
 8005624:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	68d2      	ldr	r2, [r2, #12]
 800562a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800562c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	691b      	ldr	r3, [r3, #16]
 8005632:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005634:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	695b      	ldr	r3, [r3, #20]
 800563a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800563c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	699b      	ldr	r3, [r3, #24]
 8005642:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005644:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	69db      	ldr	r3, [r3, #28]
 800564a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800564c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6a1b      	ldr	r3, [r3, #32]
 8005652:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005654:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005656:	697a      	ldr	r2, [r7, #20]
 8005658:	4313      	orrs	r3, r2
 800565a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	697a      	ldr	r2, [r7, #20]
 8005662:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	461a      	mov	r2, r3
 800566a:	4b6e      	ldr	r3, [pc, #440]	; (8005824 <HAL_DMA_Init+0x650>)
 800566c:	4413      	add	r3, r2
 800566e:	4a6e      	ldr	r2, [pc, #440]	; (8005828 <HAL_DMA_Init+0x654>)
 8005670:	fba2 2303 	umull	r2, r3, r2, r3
 8005674:	091b      	lsrs	r3, r3, #4
 8005676:	009a      	lsls	r2, r3, #2
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f002 f9a9 	bl	80079d4 <DMA_CalcBaseAndBitshift>
 8005682:	4603      	mov	r3, r0
 8005684:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800568a:	f003 031f 	and.w	r3, r3, #31
 800568e:	2201      	movs	r2, #1
 8005690:	409a      	lsls	r2, r3
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	605a      	str	r2, [r3, #4]
 8005696:	e008      	b.n	80056aa <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2240      	movs	r2, #64	; 0x40
 800569c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2203      	movs	r2, #3
 80056a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	e0b7      	b.n	800581a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a5f      	ldr	r2, [pc, #380]	; (800582c <HAL_DMA_Init+0x658>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d072      	beq.n	800579a <HAL_DMA_Init+0x5c6>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a5d      	ldr	r2, [pc, #372]	; (8005830 <HAL_DMA_Init+0x65c>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d06d      	beq.n	800579a <HAL_DMA_Init+0x5c6>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a5c      	ldr	r2, [pc, #368]	; (8005834 <HAL_DMA_Init+0x660>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d068      	beq.n	800579a <HAL_DMA_Init+0x5c6>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a5a      	ldr	r2, [pc, #360]	; (8005838 <HAL_DMA_Init+0x664>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d063      	beq.n	800579a <HAL_DMA_Init+0x5c6>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a59      	ldr	r2, [pc, #356]	; (800583c <HAL_DMA_Init+0x668>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d05e      	beq.n	800579a <HAL_DMA_Init+0x5c6>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a57      	ldr	r2, [pc, #348]	; (8005840 <HAL_DMA_Init+0x66c>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d059      	beq.n	800579a <HAL_DMA_Init+0x5c6>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a56      	ldr	r2, [pc, #344]	; (8005844 <HAL_DMA_Init+0x670>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d054      	beq.n	800579a <HAL_DMA_Init+0x5c6>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a54      	ldr	r2, [pc, #336]	; (8005848 <HAL_DMA_Init+0x674>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d04f      	beq.n	800579a <HAL_DMA_Init+0x5c6>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a53      	ldr	r2, [pc, #332]	; (800584c <HAL_DMA_Init+0x678>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d04a      	beq.n	800579a <HAL_DMA_Init+0x5c6>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a51      	ldr	r2, [pc, #324]	; (8005850 <HAL_DMA_Init+0x67c>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d045      	beq.n	800579a <HAL_DMA_Init+0x5c6>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a50      	ldr	r2, [pc, #320]	; (8005854 <HAL_DMA_Init+0x680>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d040      	beq.n	800579a <HAL_DMA_Init+0x5c6>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a4e      	ldr	r2, [pc, #312]	; (8005858 <HAL_DMA_Init+0x684>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d03b      	beq.n	800579a <HAL_DMA_Init+0x5c6>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a4d      	ldr	r2, [pc, #308]	; (800585c <HAL_DMA_Init+0x688>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d036      	beq.n	800579a <HAL_DMA_Init+0x5c6>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a4b      	ldr	r2, [pc, #300]	; (8005860 <HAL_DMA_Init+0x68c>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d031      	beq.n	800579a <HAL_DMA_Init+0x5c6>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a4a      	ldr	r2, [pc, #296]	; (8005864 <HAL_DMA_Init+0x690>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d02c      	beq.n	800579a <HAL_DMA_Init+0x5c6>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a48      	ldr	r2, [pc, #288]	; (8005868 <HAL_DMA_Init+0x694>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d027      	beq.n	800579a <HAL_DMA_Init+0x5c6>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a47      	ldr	r2, [pc, #284]	; (800586c <HAL_DMA_Init+0x698>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d022      	beq.n	800579a <HAL_DMA_Init+0x5c6>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a45      	ldr	r2, [pc, #276]	; (8005870 <HAL_DMA_Init+0x69c>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d01d      	beq.n	800579a <HAL_DMA_Init+0x5c6>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a44      	ldr	r2, [pc, #272]	; (8005874 <HAL_DMA_Init+0x6a0>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d018      	beq.n	800579a <HAL_DMA_Init+0x5c6>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a42      	ldr	r2, [pc, #264]	; (8005878 <HAL_DMA_Init+0x6a4>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d013      	beq.n	800579a <HAL_DMA_Init+0x5c6>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a41      	ldr	r2, [pc, #260]	; (800587c <HAL_DMA_Init+0x6a8>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d00e      	beq.n	800579a <HAL_DMA_Init+0x5c6>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a3f      	ldr	r2, [pc, #252]	; (8005880 <HAL_DMA_Init+0x6ac>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d009      	beq.n	800579a <HAL_DMA_Init+0x5c6>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a3e      	ldr	r2, [pc, #248]	; (8005884 <HAL_DMA_Init+0x6b0>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d004      	beq.n	800579a <HAL_DMA_Init+0x5c6>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a3c      	ldr	r2, [pc, #240]	; (8005888 <HAL_DMA_Init+0x6b4>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d101      	bne.n	800579e <HAL_DMA_Init+0x5ca>
 800579a:	2301      	movs	r3, #1
 800579c:	e000      	b.n	80057a0 <HAL_DMA_Init+0x5cc>
 800579e:	2300      	movs	r3, #0
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d032      	beq.n	800580a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f002 fa43 	bl	8007c30 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	2b80      	cmp	r3, #128	; 0x80
 80057b0:	d102      	bne.n	80057b8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	685a      	ldr	r2, [r3, #4]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057c0:	b2d2      	uxtb	r2, r2
 80057c2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80057cc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d010      	beq.n	80057f8 <HAL_DMA_Init+0x624>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	2b08      	cmp	r3, #8
 80057dc:	d80c      	bhi.n	80057f8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f002 fac0 	bl	8007d64 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057e8:	2200      	movs	r2, #0
 80057ea:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80057f4:	605a      	str	r2, [r3, #4]
 80057f6:	e008      	b.n	800580a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005818:	2300      	movs	r3, #0
}
 800581a:	4618      	mov	r0, r3
 800581c:	3718      	adds	r7, #24
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
 8005822:	bf00      	nop
 8005824:	a7fdabf8 	.word	0xa7fdabf8
 8005828:	cccccccd 	.word	0xcccccccd
 800582c:	40020010 	.word	0x40020010
 8005830:	40020028 	.word	0x40020028
 8005834:	40020040 	.word	0x40020040
 8005838:	40020058 	.word	0x40020058
 800583c:	40020070 	.word	0x40020070
 8005840:	40020088 	.word	0x40020088
 8005844:	400200a0 	.word	0x400200a0
 8005848:	400200b8 	.word	0x400200b8
 800584c:	40020410 	.word	0x40020410
 8005850:	40020428 	.word	0x40020428
 8005854:	40020440 	.word	0x40020440
 8005858:	40020458 	.word	0x40020458
 800585c:	40020470 	.word	0x40020470
 8005860:	40020488 	.word	0x40020488
 8005864:	400204a0 	.word	0x400204a0
 8005868:	400204b8 	.word	0x400204b8
 800586c:	58025408 	.word	0x58025408
 8005870:	5802541c 	.word	0x5802541c
 8005874:	58025430 	.word	0x58025430
 8005878:	58025444 	.word	0x58025444
 800587c:	58025458 	.word	0x58025458
 8005880:	5802546c 	.word	0x5802546c
 8005884:	58025480 	.word	0x58025480
 8005888:	58025494 	.word	0x58025494

0800588c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b086      	sub	sp, #24
 8005890:	af00      	add	r7, sp, #0
 8005892:	60f8      	str	r0, [r7, #12]
 8005894:	60b9      	str	r1, [r7, #8]
 8005896:	607a      	str	r2, [r7, #4]
 8005898:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800589a:	2300      	movs	r3, #0
 800589c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d101      	bne.n	80058a8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	e226      	b.n	8005cf6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d101      	bne.n	80058b6 <HAL_DMA_Start_IT+0x2a>
 80058b2:	2302      	movs	r3, #2
 80058b4:	e21f      	b.n	8005cf6 <HAL_DMA_Start_IT+0x46a>
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2201      	movs	r2, #1
 80058ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	f040 820a 	bne.w	8005ce0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2202      	movs	r2, #2
 80058d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2200      	movs	r2, #0
 80058d8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a68      	ldr	r2, [pc, #416]	; (8005a80 <HAL_DMA_Start_IT+0x1f4>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d04a      	beq.n	800597a <HAL_DMA_Start_IT+0xee>
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a66      	ldr	r2, [pc, #408]	; (8005a84 <HAL_DMA_Start_IT+0x1f8>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d045      	beq.n	800597a <HAL_DMA_Start_IT+0xee>
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a65      	ldr	r2, [pc, #404]	; (8005a88 <HAL_DMA_Start_IT+0x1fc>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d040      	beq.n	800597a <HAL_DMA_Start_IT+0xee>
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a63      	ldr	r2, [pc, #396]	; (8005a8c <HAL_DMA_Start_IT+0x200>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d03b      	beq.n	800597a <HAL_DMA_Start_IT+0xee>
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a62      	ldr	r2, [pc, #392]	; (8005a90 <HAL_DMA_Start_IT+0x204>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d036      	beq.n	800597a <HAL_DMA_Start_IT+0xee>
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a60      	ldr	r2, [pc, #384]	; (8005a94 <HAL_DMA_Start_IT+0x208>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d031      	beq.n	800597a <HAL_DMA_Start_IT+0xee>
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a5f      	ldr	r2, [pc, #380]	; (8005a98 <HAL_DMA_Start_IT+0x20c>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d02c      	beq.n	800597a <HAL_DMA_Start_IT+0xee>
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a5d      	ldr	r2, [pc, #372]	; (8005a9c <HAL_DMA_Start_IT+0x210>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d027      	beq.n	800597a <HAL_DMA_Start_IT+0xee>
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a5c      	ldr	r2, [pc, #368]	; (8005aa0 <HAL_DMA_Start_IT+0x214>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d022      	beq.n	800597a <HAL_DMA_Start_IT+0xee>
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a5a      	ldr	r2, [pc, #360]	; (8005aa4 <HAL_DMA_Start_IT+0x218>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d01d      	beq.n	800597a <HAL_DMA_Start_IT+0xee>
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a59      	ldr	r2, [pc, #356]	; (8005aa8 <HAL_DMA_Start_IT+0x21c>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d018      	beq.n	800597a <HAL_DMA_Start_IT+0xee>
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a57      	ldr	r2, [pc, #348]	; (8005aac <HAL_DMA_Start_IT+0x220>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d013      	beq.n	800597a <HAL_DMA_Start_IT+0xee>
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a56      	ldr	r2, [pc, #344]	; (8005ab0 <HAL_DMA_Start_IT+0x224>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d00e      	beq.n	800597a <HAL_DMA_Start_IT+0xee>
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a54      	ldr	r2, [pc, #336]	; (8005ab4 <HAL_DMA_Start_IT+0x228>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d009      	beq.n	800597a <HAL_DMA_Start_IT+0xee>
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a53      	ldr	r2, [pc, #332]	; (8005ab8 <HAL_DMA_Start_IT+0x22c>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d004      	beq.n	800597a <HAL_DMA_Start_IT+0xee>
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a51      	ldr	r2, [pc, #324]	; (8005abc <HAL_DMA_Start_IT+0x230>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d108      	bne.n	800598c <HAL_DMA_Start_IT+0x100>
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f022 0201 	bic.w	r2, r2, #1
 8005988:	601a      	str	r2, [r3, #0]
 800598a:	e007      	b.n	800599c <HAL_DMA_Start_IT+0x110>
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f022 0201 	bic.w	r2, r2, #1
 800599a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	68b9      	ldr	r1, [r7, #8]
 80059a2:	68f8      	ldr	r0, [r7, #12]
 80059a4:	f001 fe6a 	bl	800767c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a34      	ldr	r2, [pc, #208]	; (8005a80 <HAL_DMA_Start_IT+0x1f4>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d04a      	beq.n	8005a48 <HAL_DMA_Start_IT+0x1bc>
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a33      	ldr	r2, [pc, #204]	; (8005a84 <HAL_DMA_Start_IT+0x1f8>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d045      	beq.n	8005a48 <HAL_DMA_Start_IT+0x1bc>
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a31      	ldr	r2, [pc, #196]	; (8005a88 <HAL_DMA_Start_IT+0x1fc>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d040      	beq.n	8005a48 <HAL_DMA_Start_IT+0x1bc>
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a30      	ldr	r2, [pc, #192]	; (8005a8c <HAL_DMA_Start_IT+0x200>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d03b      	beq.n	8005a48 <HAL_DMA_Start_IT+0x1bc>
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a2e      	ldr	r2, [pc, #184]	; (8005a90 <HAL_DMA_Start_IT+0x204>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d036      	beq.n	8005a48 <HAL_DMA_Start_IT+0x1bc>
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a2d      	ldr	r2, [pc, #180]	; (8005a94 <HAL_DMA_Start_IT+0x208>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d031      	beq.n	8005a48 <HAL_DMA_Start_IT+0x1bc>
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a2b      	ldr	r2, [pc, #172]	; (8005a98 <HAL_DMA_Start_IT+0x20c>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d02c      	beq.n	8005a48 <HAL_DMA_Start_IT+0x1bc>
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a2a      	ldr	r2, [pc, #168]	; (8005a9c <HAL_DMA_Start_IT+0x210>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d027      	beq.n	8005a48 <HAL_DMA_Start_IT+0x1bc>
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a28      	ldr	r2, [pc, #160]	; (8005aa0 <HAL_DMA_Start_IT+0x214>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d022      	beq.n	8005a48 <HAL_DMA_Start_IT+0x1bc>
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a27      	ldr	r2, [pc, #156]	; (8005aa4 <HAL_DMA_Start_IT+0x218>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d01d      	beq.n	8005a48 <HAL_DMA_Start_IT+0x1bc>
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a25      	ldr	r2, [pc, #148]	; (8005aa8 <HAL_DMA_Start_IT+0x21c>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d018      	beq.n	8005a48 <HAL_DMA_Start_IT+0x1bc>
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a24      	ldr	r2, [pc, #144]	; (8005aac <HAL_DMA_Start_IT+0x220>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d013      	beq.n	8005a48 <HAL_DMA_Start_IT+0x1bc>
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a22      	ldr	r2, [pc, #136]	; (8005ab0 <HAL_DMA_Start_IT+0x224>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d00e      	beq.n	8005a48 <HAL_DMA_Start_IT+0x1bc>
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a21      	ldr	r2, [pc, #132]	; (8005ab4 <HAL_DMA_Start_IT+0x228>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d009      	beq.n	8005a48 <HAL_DMA_Start_IT+0x1bc>
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a1f      	ldr	r2, [pc, #124]	; (8005ab8 <HAL_DMA_Start_IT+0x22c>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d004      	beq.n	8005a48 <HAL_DMA_Start_IT+0x1bc>
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a1e      	ldr	r2, [pc, #120]	; (8005abc <HAL_DMA_Start_IT+0x230>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d101      	bne.n	8005a4c <HAL_DMA_Start_IT+0x1c0>
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e000      	b.n	8005a4e <HAL_DMA_Start_IT+0x1c2>
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d036      	beq.n	8005ac0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f023 021e 	bic.w	r2, r3, #30
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f042 0216 	orr.w	r2, r2, #22
 8005a64:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d03e      	beq.n	8005aec <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f042 0208 	orr.w	r2, r2, #8
 8005a7c:	601a      	str	r2, [r3, #0]
 8005a7e:	e035      	b.n	8005aec <HAL_DMA_Start_IT+0x260>
 8005a80:	40020010 	.word	0x40020010
 8005a84:	40020028 	.word	0x40020028
 8005a88:	40020040 	.word	0x40020040
 8005a8c:	40020058 	.word	0x40020058
 8005a90:	40020070 	.word	0x40020070
 8005a94:	40020088 	.word	0x40020088
 8005a98:	400200a0 	.word	0x400200a0
 8005a9c:	400200b8 	.word	0x400200b8
 8005aa0:	40020410 	.word	0x40020410
 8005aa4:	40020428 	.word	0x40020428
 8005aa8:	40020440 	.word	0x40020440
 8005aac:	40020458 	.word	0x40020458
 8005ab0:	40020470 	.word	0x40020470
 8005ab4:	40020488 	.word	0x40020488
 8005ab8:	400204a0 	.word	0x400204a0
 8005abc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f023 020e 	bic.w	r2, r3, #14
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f042 020a 	orr.w	r2, r2, #10
 8005ad2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d007      	beq.n	8005aec <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	681a      	ldr	r2, [r3, #0]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f042 0204 	orr.w	r2, r2, #4
 8005aea:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a83      	ldr	r2, [pc, #524]	; (8005d00 <HAL_DMA_Start_IT+0x474>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d072      	beq.n	8005bdc <HAL_DMA_Start_IT+0x350>
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a82      	ldr	r2, [pc, #520]	; (8005d04 <HAL_DMA_Start_IT+0x478>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d06d      	beq.n	8005bdc <HAL_DMA_Start_IT+0x350>
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a80      	ldr	r2, [pc, #512]	; (8005d08 <HAL_DMA_Start_IT+0x47c>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d068      	beq.n	8005bdc <HAL_DMA_Start_IT+0x350>
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a7f      	ldr	r2, [pc, #508]	; (8005d0c <HAL_DMA_Start_IT+0x480>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d063      	beq.n	8005bdc <HAL_DMA_Start_IT+0x350>
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a7d      	ldr	r2, [pc, #500]	; (8005d10 <HAL_DMA_Start_IT+0x484>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d05e      	beq.n	8005bdc <HAL_DMA_Start_IT+0x350>
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a7c      	ldr	r2, [pc, #496]	; (8005d14 <HAL_DMA_Start_IT+0x488>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d059      	beq.n	8005bdc <HAL_DMA_Start_IT+0x350>
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a7a      	ldr	r2, [pc, #488]	; (8005d18 <HAL_DMA_Start_IT+0x48c>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d054      	beq.n	8005bdc <HAL_DMA_Start_IT+0x350>
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a79      	ldr	r2, [pc, #484]	; (8005d1c <HAL_DMA_Start_IT+0x490>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d04f      	beq.n	8005bdc <HAL_DMA_Start_IT+0x350>
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a77      	ldr	r2, [pc, #476]	; (8005d20 <HAL_DMA_Start_IT+0x494>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d04a      	beq.n	8005bdc <HAL_DMA_Start_IT+0x350>
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a76      	ldr	r2, [pc, #472]	; (8005d24 <HAL_DMA_Start_IT+0x498>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d045      	beq.n	8005bdc <HAL_DMA_Start_IT+0x350>
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a74      	ldr	r2, [pc, #464]	; (8005d28 <HAL_DMA_Start_IT+0x49c>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d040      	beq.n	8005bdc <HAL_DMA_Start_IT+0x350>
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a73      	ldr	r2, [pc, #460]	; (8005d2c <HAL_DMA_Start_IT+0x4a0>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d03b      	beq.n	8005bdc <HAL_DMA_Start_IT+0x350>
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a71      	ldr	r2, [pc, #452]	; (8005d30 <HAL_DMA_Start_IT+0x4a4>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d036      	beq.n	8005bdc <HAL_DMA_Start_IT+0x350>
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a70      	ldr	r2, [pc, #448]	; (8005d34 <HAL_DMA_Start_IT+0x4a8>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d031      	beq.n	8005bdc <HAL_DMA_Start_IT+0x350>
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a6e      	ldr	r2, [pc, #440]	; (8005d38 <HAL_DMA_Start_IT+0x4ac>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d02c      	beq.n	8005bdc <HAL_DMA_Start_IT+0x350>
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a6d      	ldr	r2, [pc, #436]	; (8005d3c <HAL_DMA_Start_IT+0x4b0>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d027      	beq.n	8005bdc <HAL_DMA_Start_IT+0x350>
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a6b      	ldr	r2, [pc, #428]	; (8005d40 <HAL_DMA_Start_IT+0x4b4>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d022      	beq.n	8005bdc <HAL_DMA_Start_IT+0x350>
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a6a      	ldr	r2, [pc, #424]	; (8005d44 <HAL_DMA_Start_IT+0x4b8>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d01d      	beq.n	8005bdc <HAL_DMA_Start_IT+0x350>
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a68      	ldr	r2, [pc, #416]	; (8005d48 <HAL_DMA_Start_IT+0x4bc>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d018      	beq.n	8005bdc <HAL_DMA_Start_IT+0x350>
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a67      	ldr	r2, [pc, #412]	; (8005d4c <HAL_DMA_Start_IT+0x4c0>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d013      	beq.n	8005bdc <HAL_DMA_Start_IT+0x350>
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a65      	ldr	r2, [pc, #404]	; (8005d50 <HAL_DMA_Start_IT+0x4c4>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d00e      	beq.n	8005bdc <HAL_DMA_Start_IT+0x350>
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a64      	ldr	r2, [pc, #400]	; (8005d54 <HAL_DMA_Start_IT+0x4c8>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d009      	beq.n	8005bdc <HAL_DMA_Start_IT+0x350>
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a62      	ldr	r2, [pc, #392]	; (8005d58 <HAL_DMA_Start_IT+0x4cc>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d004      	beq.n	8005bdc <HAL_DMA_Start_IT+0x350>
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a61      	ldr	r2, [pc, #388]	; (8005d5c <HAL_DMA_Start_IT+0x4d0>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d101      	bne.n	8005be0 <HAL_DMA_Start_IT+0x354>
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e000      	b.n	8005be2 <HAL_DMA_Start_IT+0x356>
 8005be0:	2300      	movs	r3, #0
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d01a      	beq.n	8005c1c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d007      	beq.n	8005c04 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bfe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c02:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d007      	beq.n	8005c1c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c1a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a37      	ldr	r2, [pc, #220]	; (8005d00 <HAL_DMA_Start_IT+0x474>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d04a      	beq.n	8005cbc <HAL_DMA_Start_IT+0x430>
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a36      	ldr	r2, [pc, #216]	; (8005d04 <HAL_DMA_Start_IT+0x478>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d045      	beq.n	8005cbc <HAL_DMA_Start_IT+0x430>
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a34      	ldr	r2, [pc, #208]	; (8005d08 <HAL_DMA_Start_IT+0x47c>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d040      	beq.n	8005cbc <HAL_DMA_Start_IT+0x430>
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a33      	ldr	r2, [pc, #204]	; (8005d0c <HAL_DMA_Start_IT+0x480>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d03b      	beq.n	8005cbc <HAL_DMA_Start_IT+0x430>
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a31      	ldr	r2, [pc, #196]	; (8005d10 <HAL_DMA_Start_IT+0x484>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d036      	beq.n	8005cbc <HAL_DMA_Start_IT+0x430>
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a30      	ldr	r2, [pc, #192]	; (8005d14 <HAL_DMA_Start_IT+0x488>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d031      	beq.n	8005cbc <HAL_DMA_Start_IT+0x430>
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a2e      	ldr	r2, [pc, #184]	; (8005d18 <HAL_DMA_Start_IT+0x48c>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d02c      	beq.n	8005cbc <HAL_DMA_Start_IT+0x430>
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a2d      	ldr	r2, [pc, #180]	; (8005d1c <HAL_DMA_Start_IT+0x490>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d027      	beq.n	8005cbc <HAL_DMA_Start_IT+0x430>
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a2b      	ldr	r2, [pc, #172]	; (8005d20 <HAL_DMA_Start_IT+0x494>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d022      	beq.n	8005cbc <HAL_DMA_Start_IT+0x430>
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a2a      	ldr	r2, [pc, #168]	; (8005d24 <HAL_DMA_Start_IT+0x498>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d01d      	beq.n	8005cbc <HAL_DMA_Start_IT+0x430>
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a28      	ldr	r2, [pc, #160]	; (8005d28 <HAL_DMA_Start_IT+0x49c>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d018      	beq.n	8005cbc <HAL_DMA_Start_IT+0x430>
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a27      	ldr	r2, [pc, #156]	; (8005d2c <HAL_DMA_Start_IT+0x4a0>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d013      	beq.n	8005cbc <HAL_DMA_Start_IT+0x430>
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a25      	ldr	r2, [pc, #148]	; (8005d30 <HAL_DMA_Start_IT+0x4a4>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d00e      	beq.n	8005cbc <HAL_DMA_Start_IT+0x430>
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a24      	ldr	r2, [pc, #144]	; (8005d34 <HAL_DMA_Start_IT+0x4a8>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d009      	beq.n	8005cbc <HAL_DMA_Start_IT+0x430>
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a22      	ldr	r2, [pc, #136]	; (8005d38 <HAL_DMA_Start_IT+0x4ac>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d004      	beq.n	8005cbc <HAL_DMA_Start_IT+0x430>
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a21      	ldr	r2, [pc, #132]	; (8005d3c <HAL_DMA_Start_IT+0x4b0>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d108      	bne.n	8005cce <HAL_DMA_Start_IT+0x442>
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f042 0201 	orr.w	r2, r2, #1
 8005cca:	601a      	str	r2, [r3, #0]
 8005ccc:	e012      	b.n	8005cf4 <HAL_DMA_Start_IT+0x468>
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f042 0201 	orr.w	r2, r2, #1
 8005cdc:	601a      	str	r2, [r3, #0]
 8005cde:	e009      	b.n	8005cf4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ce6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005cf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3718      	adds	r7, #24
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
 8005cfe:	bf00      	nop
 8005d00:	40020010 	.word	0x40020010
 8005d04:	40020028 	.word	0x40020028
 8005d08:	40020040 	.word	0x40020040
 8005d0c:	40020058 	.word	0x40020058
 8005d10:	40020070 	.word	0x40020070
 8005d14:	40020088 	.word	0x40020088
 8005d18:	400200a0 	.word	0x400200a0
 8005d1c:	400200b8 	.word	0x400200b8
 8005d20:	40020410 	.word	0x40020410
 8005d24:	40020428 	.word	0x40020428
 8005d28:	40020440 	.word	0x40020440
 8005d2c:	40020458 	.word	0x40020458
 8005d30:	40020470 	.word	0x40020470
 8005d34:	40020488 	.word	0x40020488
 8005d38:	400204a0 	.word	0x400204a0
 8005d3c:	400204b8 	.word	0x400204b8
 8005d40:	58025408 	.word	0x58025408
 8005d44:	5802541c 	.word	0x5802541c
 8005d48:	58025430 	.word	0x58025430
 8005d4c:	58025444 	.word	0x58025444
 8005d50:	58025458 	.word	0x58025458
 8005d54:	5802546c 	.word	0x5802546c
 8005d58:	58025480 	.word	0x58025480
 8005d5c:	58025494 	.word	0x58025494

08005d60 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b086      	sub	sp, #24
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005d68:	f7fd f90c 	bl	8002f84 <HAL_GetTick>
 8005d6c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d101      	bne.n	8005d78 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	e2dc      	b.n	8006332 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d7e:	b2db      	uxtb	r3, r3
 8005d80:	2b02      	cmp	r3, #2
 8005d82:	d008      	beq.n	8005d96 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2280      	movs	r2, #128	; 0x80
 8005d88:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	e2cd      	b.n	8006332 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a76      	ldr	r2, [pc, #472]	; (8005f74 <HAL_DMA_Abort+0x214>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d04a      	beq.n	8005e36 <HAL_DMA_Abort+0xd6>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a74      	ldr	r2, [pc, #464]	; (8005f78 <HAL_DMA_Abort+0x218>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d045      	beq.n	8005e36 <HAL_DMA_Abort+0xd6>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a73      	ldr	r2, [pc, #460]	; (8005f7c <HAL_DMA_Abort+0x21c>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d040      	beq.n	8005e36 <HAL_DMA_Abort+0xd6>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a71      	ldr	r2, [pc, #452]	; (8005f80 <HAL_DMA_Abort+0x220>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d03b      	beq.n	8005e36 <HAL_DMA_Abort+0xd6>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a70      	ldr	r2, [pc, #448]	; (8005f84 <HAL_DMA_Abort+0x224>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d036      	beq.n	8005e36 <HAL_DMA_Abort+0xd6>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a6e      	ldr	r2, [pc, #440]	; (8005f88 <HAL_DMA_Abort+0x228>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d031      	beq.n	8005e36 <HAL_DMA_Abort+0xd6>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a6d      	ldr	r2, [pc, #436]	; (8005f8c <HAL_DMA_Abort+0x22c>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d02c      	beq.n	8005e36 <HAL_DMA_Abort+0xd6>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a6b      	ldr	r2, [pc, #428]	; (8005f90 <HAL_DMA_Abort+0x230>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d027      	beq.n	8005e36 <HAL_DMA_Abort+0xd6>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a6a      	ldr	r2, [pc, #424]	; (8005f94 <HAL_DMA_Abort+0x234>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d022      	beq.n	8005e36 <HAL_DMA_Abort+0xd6>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a68      	ldr	r2, [pc, #416]	; (8005f98 <HAL_DMA_Abort+0x238>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d01d      	beq.n	8005e36 <HAL_DMA_Abort+0xd6>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a67      	ldr	r2, [pc, #412]	; (8005f9c <HAL_DMA_Abort+0x23c>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d018      	beq.n	8005e36 <HAL_DMA_Abort+0xd6>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a65      	ldr	r2, [pc, #404]	; (8005fa0 <HAL_DMA_Abort+0x240>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d013      	beq.n	8005e36 <HAL_DMA_Abort+0xd6>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a64      	ldr	r2, [pc, #400]	; (8005fa4 <HAL_DMA_Abort+0x244>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d00e      	beq.n	8005e36 <HAL_DMA_Abort+0xd6>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a62      	ldr	r2, [pc, #392]	; (8005fa8 <HAL_DMA_Abort+0x248>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d009      	beq.n	8005e36 <HAL_DMA_Abort+0xd6>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a61      	ldr	r2, [pc, #388]	; (8005fac <HAL_DMA_Abort+0x24c>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d004      	beq.n	8005e36 <HAL_DMA_Abort+0xd6>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a5f      	ldr	r2, [pc, #380]	; (8005fb0 <HAL_DMA_Abort+0x250>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d101      	bne.n	8005e3a <HAL_DMA_Abort+0xda>
 8005e36:	2301      	movs	r3, #1
 8005e38:	e000      	b.n	8005e3c <HAL_DMA_Abort+0xdc>
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d013      	beq.n	8005e68 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f022 021e 	bic.w	r2, r2, #30
 8005e4e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	695a      	ldr	r2, [r3, #20]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e5e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	617b      	str	r3, [r7, #20]
 8005e66:	e00a      	b.n	8005e7e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f022 020e 	bic.w	r2, r2, #14
 8005e76:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a3c      	ldr	r2, [pc, #240]	; (8005f74 <HAL_DMA_Abort+0x214>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d072      	beq.n	8005f6e <HAL_DMA_Abort+0x20e>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a3a      	ldr	r2, [pc, #232]	; (8005f78 <HAL_DMA_Abort+0x218>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d06d      	beq.n	8005f6e <HAL_DMA_Abort+0x20e>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a39      	ldr	r2, [pc, #228]	; (8005f7c <HAL_DMA_Abort+0x21c>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d068      	beq.n	8005f6e <HAL_DMA_Abort+0x20e>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a37      	ldr	r2, [pc, #220]	; (8005f80 <HAL_DMA_Abort+0x220>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d063      	beq.n	8005f6e <HAL_DMA_Abort+0x20e>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a36      	ldr	r2, [pc, #216]	; (8005f84 <HAL_DMA_Abort+0x224>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d05e      	beq.n	8005f6e <HAL_DMA_Abort+0x20e>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a34      	ldr	r2, [pc, #208]	; (8005f88 <HAL_DMA_Abort+0x228>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d059      	beq.n	8005f6e <HAL_DMA_Abort+0x20e>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a33      	ldr	r2, [pc, #204]	; (8005f8c <HAL_DMA_Abort+0x22c>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d054      	beq.n	8005f6e <HAL_DMA_Abort+0x20e>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a31      	ldr	r2, [pc, #196]	; (8005f90 <HAL_DMA_Abort+0x230>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d04f      	beq.n	8005f6e <HAL_DMA_Abort+0x20e>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a30      	ldr	r2, [pc, #192]	; (8005f94 <HAL_DMA_Abort+0x234>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d04a      	beq.n	8005f6e <HAL_DMA_Abort+0x20e>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a2e      	ldr	r2, [pc, #184]	; (8005f98 <HAL_DMA_Abort+0x238>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d045      	beq.n	8005f6e <HAL_DMA_Abort+0x20e>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a2d      	ldr	r2, [pc, #180]	; (8005f9c <HAL_DMA_Abort+0x23c>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d040      	beq.n	8005f6e <HAL_DMA_Abort+0x20e>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a2b      	ldr	r2, [pc, #172]	; (8005fa0 <HAL_DMA_Abort+0x240>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d03b      	beq.n	8005f6e <HAL_DMA_Abort+0x20e>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a2a      	ldr	r2, [pc, #168]	; (8005fa4 <HAL_DMA_Abort+0x244>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d036      	beq.n	8005f6e <HAL_DMA_Abort+0x20e>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a28      	ldr	r2, [pc, #160]	; (8005fa8 <HAL_DMA_Abort+0x248>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d031      	beq.n	8005f6e <HAL_DMA_Abort+0x20e>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a27      	ldr	r2, [pc, #156]	; (8005fac <HAL_DMA_Abort+0x24c>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d02c      	beq.n	8005f6e <HAL_DMA_Abort+0x20e>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a25      	ldr	r2, [pc, #148]	; (8005fb0 <HAL_DMA_Abort+0x250>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d027      	beq.n	8005f6e <HAL_DMA_Abort+0x20e>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a24      	ldr	r2, [pc, #144]	; (8005fb4 <HAL_DMA_Abort+0x254>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d022      	beq.n	8005f6e <HAL_DMA_Abort+0x20e>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a22      	ldr	r2, [pc, #136]	; (8005fb8 <HAL_DMA_Abort+0x258>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d01d      	beq.n	8005f6e <HAL_DMA_Abort+0x20e>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a21      	ldr	r2, [pc, #132]	; (8005fbc <HAL_DMA_Abort+0x25c>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d018      	beq.n	8005f6e <HAL_DMA_Abort+0x20e>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a1f      	ldr	r2, [pc, #124]	; (8005fc0 <HAL_DMA_Abort+0x260>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d013      	beq.n	8005f6e <HAL_DMA_Abort+0x20e>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a1e      	ldr	r2, [pc, #120]	; (8005fc4 <HAL_DMA_Abort+0x264>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d00e      	beq.n	8005f6e <HAL_DMA_Abort+0x20e>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a1c      	ldr	r2, [pc, #112]	; (8005fc8 <HAL_DMA_Abort+0x268>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d009      	beq.n	8005f6e <HAL_DMA_Abort+0x20e>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a1b      	ldr	r2, [pc, #108]	; (8005fcc <HAL_DMA_Abort+0x26c>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d004      	beq.n	8005f6e <HAL_DMA_Abort+0x20e>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a19      	ldr	r2, [pc, #100]	; (8005fd0 <HAL_DMA_Abort+0x270>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d132      	bne.n	8005fd4 <HAL_DMA_Abort+0x274>
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e031      	b.n	8005fd6 <HAL_DMA_Abort+0x276>
 8005f72:	bf00      	nop
 8005f74:	40020010 	.word	0x40020010
 8005f78:	40020028 	.word	0x40020028
 8005f7c:	40020040 	.word	0x40020040
 8005f80:	40020058 	.word	0x40020058
 8005f84:	40020070 	.word	0x40020070
 8005f88:	40020088 	.word	0x40020088
 8005f8c:	400200a0 	.word	0x400200a0
 8005f90:	400200b8 	.word	0x400200b8
 8005f94:	40020410 	.word	0x40020410
 8005f98:	40020428 	.word	0x40020428
 8005f9c:	40020440 	.word	0x40020440
 8005fa0:	40020458 	.word	0x40020458
 8005fa4:	40020470 	.word	0x40020470
 8005fa8:	40020488 	.word	0x40020488
 8005fac:	400204a0 	.word	0x400204a0
 8005fb0:	400204b8 	.word	0x400204b8
 8005fb4:	58025408 	.word	0x58025408
 8005fb8:	5802541c 	.word	0x5802541c
 8005fbc:	58025430 	.word	0x58025430
 8005fc0:	58025444 	.word	0x58025444
 8005fc4:	58025458 	.word	0x58025458
 8005fc8:	5802546c 	.word	0x5802546c
 8005fcc:	58025480 	.word	0x58025480
 8005fd0:	58025494 	.word	0x58025494
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d007      	beq.n	8005fea <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fe4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005fe8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a6d      	ldr	r2, [pc, #436]	; (80061a4 <HAL_DMA_Abort+0x444>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d04a      	beq.n	800608a <HAL_DMA_Abort+0x32a>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a6b      	ldr	r2, [pc, #428]	; (80061a8 <HAL_DMA_Abort+0x448>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d045      	beq.n	800608a <HAL_DMA_Abort+0x32a>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a6a      	ldr	r2, [pc, #424]	; (80061ac <HAL_DMA_Abort+0x44c>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d040      	beq.n	800608a <HAL_DMA_Abort+0x32a>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a68      	ldr	r2, [pc, #416]	; (80061b0 <HAL_DMA_Abort+0x450>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d03b      	beq.n	800608a <HAL_DMA_Abort+0x32a>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a67      	ldr	r2, [pc, #412]	; (80061b4 <HAL_DMA_Abort+0x454>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d036      	beq.n	800608a <HAL_DMA_Abort+0x32a>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a65      	ldr	r2, [pc, #404]	; (80061b8 <HAL_DMA_Abort+0x458>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d031      	beq.n	800608a <HAL_DMA_Abort+0x32a>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a64      	ldr	r2, [pc, #400]	; (80061bc <HAL_DMA_Abort+0x45c>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d02c      	beq.n	800608a <HAL_DMA_Abort+0x32a>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a62      	ldr	r2, [pc, #392]	; (80061c0 <HAL_DMA_Abort+0x460>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d027      	beq.n	800608a <HAL_DMA_Abort+0x32a>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a61      	ldr	r2, [pc, #388]	; (80061c4 <HAL_DMA_Abort+0x464>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d022      	beq.n	800608a <HAL_DMA_Abort+0x32a>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a5f      	ldr	r2, [pc, #380]	; (80061c8 <HAL_DMA_Abort+0x468>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d01d      	beq.n	800608a <HAL_DMA_Abort+0x32a>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a5e      	ldr	r2, [pc, #376]	; (80061cc <HAL_DMA_Abort+0x46c>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d018      	beq.n	800608a <HAL_DMA_Abort+0x32a>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a5c      	ldr	r2, [pc, #368]	; (80061d0 <HAL_DMA_Abort+0x470>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d013      	beq.n	800608a <HAL_DMA_Abort+0x32a>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a5b      	ldr	r2, [pc, #364]	; (80061d4 <HAL_DMA_Abort+0x474>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d00e      	beq.n	800608a <HAL_DMA_Abort+0x32a>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a59      	ldr	r2, [pc, #356]	; (80061d8 <HAL_DMA_Abort+0x478>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d009      	beq.n	800608a <HAL_DMA_Abort+0x32a>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a58      	ldr	r2, [pc, #352]	; (80061dc <HAL_DMA_Abort+0x47c>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d004      	beq.n	800608a <HAL_DMA_Abort+0x32a>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a56      	ldr	r2, [pc, #344]	; (80061e0 <HAL_DMA_Abort+0x480>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d108      	bne.n	800609c <HAL_DMA_Abort+0x33c>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f022 0201 	bic.w	r2, r2, #1
 8006098:	601a      	str	r2, [r3, #0]
 800609a:	e007      	b.n	80060ac <HAL_DMA_Abort+0x34c>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	681a      	ldr	r2, [r3, #0]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f022 0201 	bic.w	r2, r2, #1
 80060aa:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80060ac:	e013      	b.n	80060d6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80060ae:	f7fc ff69 	bl	8002f84 <HAL_GetTick>
 80060b2:	4602      	mov	r2, r0
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	1ad3      	subs	r3, r2, r3
 80060b8:	2b05      	cmp	r3, #5
 80060ba:	d90c      	bls.n	80060d6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2220      	movs	r2, #32
 80060c0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2203      	movs	r2, #3
 80060c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2200      	movs	r2, #0
 80060ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	e12d      	b.n	8006332 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f003 0301 	and.w	r3, r3, #1
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d1e5      	bne.n	80060ae <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a2f      	ldr	r2, [pc, #188]	; (80061a4 <HAL_DMA_Abort+0x444>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d04a      	beq.n	8006182 <HAL_DMA_Abort+0x422>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a2d      	ldr	r2, [pc, #180]	; (80061a8 <HAL_DMA_Abort+0x448>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d045      	beq.n	8006182 <HAL_DMA_Abort+0x422>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a2c      	ldr	r2, [pc, #176]	; (80061ac <HAL_DMA_Abort+0x44c>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d040      	beq.n	8006182 <HAL_DMA_Abort+0x422>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a2a      	ldr	r2, [pc, #168]	; (80061b0 <HAL_DMA_Abort+0x450>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d03b      	beq.n	8006182 <HAL_DMA_Abort+0x422>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a29      	ldr	r2, [pc, #164]	; (80061b4 <HAL_DMA_Abort+0x454>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d036      	beq.n	8006182 <HAL_DMA_Abort+0x422>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a27      	ldr	r2, [pc, #156]	; (80061b8 <HAL_DMA_Abort+0x458>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d031      	beq.n	8006182 <HAL_DMA_Abort+0x422>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a26      	ldr	r2, [pc, #152]	; (80061bc <HAL_DMA_Abort+0x45c>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d02c      	beq.n	8006182 <HAL_DMA_Abort+0x422>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a24      	ldr	r2, [pc, #144]	; (80061c0 <HAL_DMA_Abort+0x460>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d027      	beq.n	8006182 <HAL_DMA_Abort+0x422>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a23      	ldr	r2, [pc, #140]	; (80061c4 <HAL_DMA_Abort+0x464>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d022      	beq.n	8006182 <HAL_DMA_Abort+0x422>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a21      	ldr	r2, [pc, #132]	; (80061c8 <HAL_DMA_Abort+0x468>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d01d      	beq.n	8006182 <HAL_DMA_Abort+0x422>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a20      	ldr	r2, [pc, #128]	; (80061cc <HAL_DMA_Abort+0x46c>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d018      	beq.n	8006182 <HAL_DMA_Abort+0x422>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a1e      	ldr	r2, [pc, #120]	; (80061d0 <HAL_DMA_Abort+0x470>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d013      	beq.n	8006182 <HAL_DMA_Abort+0x422>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a1d      	ldr	r2, [pc, #116]	; (80061d4 <HAL_DMA_Abort+0x474>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d00e      	beq.n	8006182 <HAL_DMA_Abort+0x422>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a1b      	ldr	r2, [pc, #108]	; (80061d8 <HAL_DMA_Abort+0x478>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d009      	beq.n	8006182 <HAL_DMA_Abort+0x422>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a1a      	ldr	r2, [pc, #104]	; (80061dc <HAL_DMA_Abort+0x47c>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d004      	beq.n	8006182 <HAL_DMA_Abort+0x422>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a18      	ldr	r2, [pc, #96]	; (80061e0 <HAL_DMA_Abort+0x480>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d101      	bne.n	8006186 <HAL_DMA_Abort+0x426>
 8006182:	2301      	movs	r3, #1
 8006184:	e000      	b.n	8006188 <HAL_DMA_Abort+0x428>
 8006186:	2300      	movs	r3, #0
 8006188:	2b00      	cmp	r3, #0
 800618a:	d02b      	beq.n	80061e4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006190:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006196:	f003 031f 	and.w	r3, r3, #31
 800619a:	223f      	movs	r2, #63	; 0x3f
 800619c:	409a      	lsls	r2, r3
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	609a      	str	r2, [r3, #8]
 80061a2:	e02a      	b.n	80061fa <HAL_DMA_Abort+0x49a>
 80061a4:	40020010 	.word	0x40020010
 80061a8:	40020028 	.word	0x40020028
 80061ac:	40020040 	.word	0x40020040
 80061b0:	40020058 	.word	0x40020058
 80061b4:	40020070 	.word	0x40020070
 80061b8:	40020088 	.word	0x40020088
 80061bc:	400200a0 	.word	0x400200a0
 80061c0:	400200b8 	.word	0x400200b8
 80061c4:	40020410 	.word	0x40020410
 80061c8:	40020428 	.word	0x40020428
 80061cc:	40020440 	.word	0x40020440
 80061d0:	40020458 	.word	0x40020458
 80061d4:	40020470 	.word	0x40020470
 80061d8:	40020488 	.word	0x40020488
 80061dc:	400204a0 	.word	0x400204a0
 80061e0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061e8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061ee:	f003 031f 	and.w	r3, r3, #31
 80061f2:	2201      	movs	r2, #1
 80061f4:	409a      	lsls	r2, r3
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a4f      	ldr	r2, [pc, #316]	; (800633c <HAL_DMA_Abort+0x5dc>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d072      	beq.n	80062ea <HAL_DMA_Abort+0x58a>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a4d      	ldr	r2, [pc, #308]	; (8006340 <HAL_DMA_Abort+0x5e0>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d06d      	beq.n	80062ea <HAL_DMA_Abort+0x58a>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a4c      	ldr	r2, [pc, #304]	; (8006344 <HAL_DMA_Abort+0x5e4>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d068      	beq.n	80062ea <HAL_DMA_Abort+0x58a>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a4a      	ldr	r2, [pc, #296]	; (8006348 <HAL_DMA_Abort+0x5e8>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d063      	beq.n	80062ea <HAL_DMA_Abort+0x58a>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a49      	ldr	r2, [pc, #292]	; (800634c <HAL_DMA_Abort+0x5ec>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d05e      	beq.n	80062ea <HAL_DMA_Abort+0x58a>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a47      	ldr	r2, [pc, #284]	; (8006350 <HAL_DMA_Abort+0x5f0>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d059      	beq.n	80062ea <HAL_DMA_Abort+0x58a>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a46      	ldr	r2, [pc, #280]	; (8006354 <HAL_DMA_Abort+0x5f4>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d054      	beq.n	80062ea <HAL_DMA_Abort+0x58a>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a44      	ldr	r2, [pc, #272]	; (8006358 <HAL_DMA_Abort+0x5f8>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d04f      	beq.n	80062ea <HAL_DMA_Abort+0x58a>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a43      	ldr	r2, [pc, #268]	; (800635c <HAL_DMA_Abort+0x5fc>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d04a      	beq.n	80062ea <HAL_DMA_Abort+0x58a>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a41      	ldr	r2, [pc, #260]	; (8006360 <HAL_DMA_Abort+0x600>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d045      	beq.n	80062ea <HAL_DMA_Abort+0x58a>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a40      	ldr	r2, [pc, #256]	; (8006364 <HAL_DMA_Abort+0x604>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d040      	beq.n	80062ea <HAL_DMA_Abort+0x58a>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a3e      	ldr	r2, [pc, #248]	; (8006368 <HAL_DMA_Abort+0x608>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d03b      	beq.n	80062ea <HAL_DMA_Abort+0x58a>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a3d      	ldr	r2, [pc, #244]	; (800636c <HAL_DMA_Abort+0x60c>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d036      	beq.n	80062ea <HAL_DMA_Abort+0x58a>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a3b      	ldr	r2, [pc, #236]	; (8006370 <HAL_DMA_Abort+0x610>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d031      	beq.n	80062ea <HAL_DMA_Abort+0x58a>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a3a      	ldr	r2, [pc, #232]	; (8006374 <HAL_DMA_Abort+0x614>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d02c      	beq.n	80062ea <HAL_DMA_Abort+0x58a>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a38      	ldr	r2, [pc, #224]	; (8006378 <HAL_DMA_Abort+0x618>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d027      	beq.n	80062ea <HAL_DMA_Abort+0x58a>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a37      	ldr	r2, [pc, #220]	; (800637c <HAL_DMA_Abort+0x61c>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d022      	beq.n	80062ea <HAL_DMA_Abort+0x58a>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a35      	ldr	r2, [pc, #212]	; (8006380 <HAL_DMA_Abort+0x620>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d01d      	beq.n	80062ea <HAL_DMA_Abort+0x58a>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a34      	ldr	r2, [pc, #208]	; (8006384 <HAL_DMA_Abort+0x624>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d018      	beq.n	80062ea <HAL_DMA_Abort+0x58a>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a32      	ldr	r2, [pc, #200]	; (8006388 <HAL_DMA_Abort+0x628>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d013      	beq.n	80062ea <HAL_DMA_Abort+0x58a>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a31      	ldr	r2, [pc, #196]	; (800638c <HAL_DMA_Abort+0x62c>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d00e      	beq.n	80062ea <HAL_DMA_Abort+0x58a>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a2f      	ldr	r2, [pc, #188]	; (8006390 <HAL_DMA_Abort+0x630>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d009      	beq.n	80062ea <HAL_DMA_Abort+0x58a>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a2e      	ldr	r2, [pc, #184]	; (8006394 <HAL_DMA_Abort+0x634>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d004      	beq.n	80062ea <HAL_DMA_Abort+0x58a>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a2c      	ldr	r2, [pc, #176]	; (8006398 <HAL_DMA_Abort+0x638>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d101      	bne.n	80062ee <HAL_DMA_Abort+0x58e>
 80062ea:	2301      	movs	r3, #1
 80062ec:	e000      	b.n	80062f0 <HAL_DMA_Abort+0x590>
 80062ee:	2300      	movs	r3, #0
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d015      	beq.n	8006320 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80062fc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006302:	2b00      	cmp	r3, #0
 8006304:	d00c      	beq.n	8006320 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800630a:	681a      	ldr	r2, [r3, #0]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006310:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006314:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800631e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2201      	movs	r2, #1
 8006324:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8006330:	2300      	movs	r3, #0
}
 8006332:	4618      	mov	r0, r3
 8006334:	3718      	adds	r7, #24
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}
 800633a:	bf00      	nop
 800633c:	40020010 	.word	0x40020010
 8006340:	40020028 	.word	0x40020028
 8006344:	40020040 	.word	0x40020040
 8006348:	40020058 	.word	0x40020058
 800634c:	40020070 	.word	0x40020070
 8006350:	40020088 	.word	0x40020088
 8006354:	400200a0 	.word	0x400200a0
 8006358:	400200b8 	.word	0x400200b8
 800635c:	40020410 	.word	0x40020410
 8006360:	40020428 	.word	0x40020428
 8006364:	40020440 	.word	0x40020440
 8006368:	40020458 	.word	0x40020458
 800636c:	40020470 	.word	0x40020470
 8006370:	40020488 	.word	0x40020488
 8006374:	400204a0 	.word	0x400204a0
 8006378:	400204b8 	.word	0x400204b8
 800637c:	58025408 	.word	0x58025408
 8006380:	5802541c 	.word	0x5802541c
 8006384:	58025430 	.word	0x58025430
 8006388:	58025444 	.word	0x58025444
 800638c:	58025458 	.word	0x58025458
 8006390:	5802546c 	.word	0x5802546c
 8006394:	58025480 	.word	0x58025480
 8006398:	58025494 	.word	0x58025494

0800639c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b084      	sub	sp, #16
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d101      	bne.n	80063ae <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
 80063ac:	e237      	b.n	800681e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	2b02      	cmp	r3, #2
 80063b8:	d004      	beq.n	80063c4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2280      	movs	r2, #128	; 0x80
 80063be:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	e22c      	b.n	800681e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a5c      	ldr	r2, [pc, #368]	; (800653c <HAL_DMA_Abort_IT+0x1a0>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d04a      	beq.n	8006464 <HAL_DMA_Abort_IT+0xc8>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a5b      	ldr	r2, [pc, #364]	; (8006540 <HAL_DMA_Abort_IT+0x1a4>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d045      	beq.n	8006464 <HAL_DMA_Abort_IT+0xc8>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a59      	ldr	r2, [pc, #356]	; (8006544 <HAL_DMA_Abort_IT+0x1a8>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d040      	beq.n	8006464 <HAL_DMA_Abort_IT+0xc8>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a58      	ldr	r2, [pc, #352]	; (8006548 <HAL_DMA_Abort_IT+0x1ac>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d03b      	beq.n	8006464 <HAL_DMA_Abort_IT+0xc8>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a56      	ldr	r2, [pc, #344]	; (800654c <HAL_DMA_Abort_IT+0x1b0>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d036      	beq.n	8006464 <HAL_DMA_Abort_IT+0xc8>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a55      	ldr	r2, [pc, #340]	; (8006550 <HAL_DMA_Abort_IT+0x1b4>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d031      	beq.n	8006464 <HAL_DMA_Abort_IT+0xc8>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a53      	ldr	r2, [pc, #332]	; (8006554 <HAL_DMA_Abort_IT+0x1b8>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d02c      	beq.n	8006464 <HAL_DMA_Abort_IT+0xc8>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a52      	ldr	r2, [pc, #328]	; (8006558 <HAL_DMA_Abort_IT+0x1bc>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d027      	beq.n	8006464 <HAL_DMA_Abort_IT+0xc8>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a50      	ldr	r2, [pc, #320]	; (800655c <HAL_DMA_Abort_IT+0x1c0>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d022      	beq.n	8006464 <HAL_DMA_Abort_IT+0xc8>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a4f      	ldr	r2, [pc, #316]	; (8006560 <HAL_DMA_Abort_IT+0x1c4>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d01d      	beq.n	8006464 <HAL_DMA_Abort_IT+0xc8>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a4d      	ldr	r2, [pc, #308]	; (8006564 <HAL_DMA_Abort_IT+0x1c8>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d018      	beq.n	8006464 <HAL_DMA_Abort_IT+0xc8>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a4c      	ldr	r2, [pc, #304]	; (8006568 <HAL_DMA_Abort_IT+0x1cc>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d013      	beq.n	8006464 <HAL_DMA_Abort_IT+0xc8>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a4a      	ldr	r2, [pc, #296]	; (800656c <HAL_DMA_Abort_IT+0x1d0>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d00e      	beq.n	8006464 <HAL_DMA_Abort_IT+0xc8>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a49      	ldr	r2, [pc, #292]	; (8006570 <HAL_DMA_Abort_IT+0x1d4>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d009      	beq.n	8006464 <HAL_DMA_Abort_IT+0xc8>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a47      	ldr	r2, [pc, #284]	; (8006574 <HAL_DMA_Abort_IT+0x1d8>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d004      	beq.n	8006464 <HAL_DMA_Abort_IT+0xc8>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a46      	ldr	r2, [pc, #280]	; (8006578 <HAL_DMA_Abort_IT+0x1dc>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d101      	bne.n	8006468 <HAL_DMA_Abort_IT+0xcc>
 8006464:	2301      	movs	r3, #1
 8006466:	e000      	b.n	800646a <HAL_DMA_Abort_IT+0xce>
 8006468:	2300      	movs	r3, #0
 800646a:	2b00      	cmp	r3, #0
 800646c:	f000 8086 	beq.w	800657c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2204      	movs	r2, #4
 8006474:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a2f      	ldr	r2, [pc, #188]	; (800653c <HAL_DMA_Abort_IT+0x1a0>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d04a      	beq.n	8006518 <HAL_DMA_Abort_IT+0x17c>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a2e      	ldr	r2, [pc, #184]	; (8006540 <HAL_DMA_Abort_IT+0x1a4>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d045      	beq.n	8006518 <HAL_DMA_Abort_IT+0x17c>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a2c      	ldr	r2, [pc, #176]	; (8006544 <HAL_DMA_Abort_IT+0x1a8>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d040      	beq.n	8006518 <HAL_DMA_Abort_IT+0x17c>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a2b      	ldr	r2, [pc, #172]	; (8006548 <HAL_DMA_Abort_IT+0x1ac>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d03b      	beq.n	8006518 <HAL_DMA_Abort_IT+0x17c>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a29      	ldr	r2, [pc, #164]	; (800654c <HAL_DMA_Abort_IT+0x1b0>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d036      	beq.n	8006518 <HAL_DMA_Abort_IT+0x17c>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a28      	ldr	r2, [pc, #160]	; (8006550 <HAL_DMA_Abort_IT+0x1b4>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d031      	beq.n	8006518 <HAL_DMA_Abort_IT+0x17c>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a26      	ldr	r2, [pc, #152]	; (8006554 <HAL_DMA_Abort_IT+0x1b8>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d02c      	beq.n	8006518 <HAL_DMA_Abort_IT+0x17c>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a25      	ldr	r2, [pc, #148]	; (8006558 <HAL_DMA_Abort_IT+0x1bc>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d027      	beq.n	8006518 <HAL_DMA_Abort_IT+0x17c>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a23      	ldr	r2, [pc, #140]	; (800655c <HAL_DMA_Abort_IT+0x1c0>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d022      	beq.n	8006518 <HAL_DMA_Abort_IT+0x17c>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a22      	ldr	r2, [pc, #136]	; (8006560 <HAL_DMA_Abort_IT+0x1c4>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d01d      	beq.n	8006518 <HAL_DMA_Abort_IT+0x17c>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a20      	ldr	r2, [pc, #128]	; (8006564 <HAL_DMA_Abort_IT+0x1c8>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d018      	beq.n	8006518 <HAL_DMA_Abort_IT+0x17c>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a1f      	ldr	r2, [pc, #124]	; (8006568 <HAL_DMA_Abort_IT+0x1cc>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d013      	beq.n	8006518 <HAL_DMA_Abort_IT+0x17c>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a1d      	ldr	r2, [pc, #116]	; (800656c <HAL_DMA_Abort_IT+0x1d0>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d00e      	beq.n	8006518 <HAL_DMA_Abort_IT+0x17c>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a1c      	ldr	r2, [pc, #112]	; (8006570 <HAL_DMA_Abort_IT+0x1d4>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d009      	beq.n	8006518 <HAL_DMA_Abort_IT+0x17c>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a1a      	ldr	r2, [pc, #104]	; (8006574 <HAL_DMA_Abort_IT+0x1d8>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d004      	beq.n	8006518 <HAL_DMA_Abort_IT+0x17c>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a19      	ldr	r2, [pc, #100]	; (8006578 <HAL_DMA_Abort_IT+0x1dc>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d108      	bne.n	800652a <HAL_DMA_Abort_IT+0x18e>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f022 0201 	bic.w	r2, r2, #1
 8006526:	601a      	str	r2, [r3, #0]
 8006528:	e178      	b.n	800681c <HAL_DMA_Abort_IT+0x480>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f022 0201 	bic.w	r2, r2, #1
 8006538:	601a      	str	r2, [r3, #0]
 800653a:	e16f      	b.n	800681c <HAL_DMA_Abort_IT+0x480>
 800653c:	40020010 	.word	0x40020010
 8006540:	40020028 	.word	0x40020028
 8006544:	40020040 	.word	0x40020040
 8006548:	40020058 	.word	0x40020058
 800654c:	40020070 	.word	0x40020070
 8006550:	40020088 	.word	0x40020088
 8006554:	400200a0 	.word	0x400200a0
 8006558:	400200b8 	.word	0x400200b8
 800655c:	40020410 	.word	0x40020410
 8006560:	40020428 	.word	0x40020428
 8006564:	40020440 	.word	0x40020440
 8006568:	40020458 	.word	0x40020458
 800656c:	40020470 	.word	0x40020470
 8006570:	40020488 	.word	0x40020488
 8006574:	400204a0 	.word	0x400204a0
 8006578:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f022 020e 	bic.w	r2, r2, #14
 800658a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a6c      	ldr	r2, [pc, #432]	; (8006744 <HAL_DMA_Abort_IT+0x3a8>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d04a      	beq.n	800662c <HAL_DMA_Abort_IT+0x290>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a6b      	ldr	r2, [pc, #428]	; (8006748 <HAL_DMA_Abort_IT+0x3ac>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d045      	beq.n	800662c <HAL_DMA_Abort_IT+0x290>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a69      	ldr	r2, [pc, #420]	; (800674c <HAL_DMA_Abort_IT+0x3b0>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d040      	beq.n	800662c <HAL_DMA_Abort_IT+0x290>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a68      	ldr	r2, [pc, #416]	; (8006750 <HAL_DMA_Abort_IT+0x3b4>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d03b      	beq.n	800662c <HAL_DMA_Abort_IT+0x290>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a66      	ldr	r2, [pc, #408]	; (8006754 <HAL_DMA_Abort_IT+0x3b8>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d036      	beq.n	800662c <HAL_DMA_Abort_IT+0x290>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a65      	ldr	r2, [pc, #404]	; (8006758 <HAL_DMA_Abort_IT+0x3bc>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d031      	beq.n	800662c <HAL_DMA_Abort_IT+0x290>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a63      	ldr	r2, [pc, #396]	; (800675c <HAL_DMA_Abort_IT+0x3c0>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d02c      	beq.n	800662c <HAL_DMA_Abort_IT+0x290>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a62      	ldr	r2, [pc, #392]	; (8006760 <HAL_DMA_Abort_IT+0x3c4>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d027      	beq.n	800662c <HAL_DMA_Abort_IT+0x290>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a60      	ldr	r2, [pc, #384]	; (8006764 <HAL_DMA_Abort_IT+0x3c8>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d022      	beq.n	800662c <HAL_DMA_Abort_IT+0x290>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a5f      	ldr	r2, [pc, #380]	; (8006768 <HAL_DMA_Abort_IT+0x3cc>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d01d      	beq.n	800662c <HAL_DMA_Abort_IT+0x290>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a5d      	ldr	r2, [pc, #372]	; (800676c <HAL_DMA_Abort_IT+0x3d0>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d018      	beq.n	800662c <HAL_DMA_Abort_IT+0x290>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a5c      	ldr	r2, [pc, #368]	; (8006770 <HAL_DMA_Abort_IT+0x3d4>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d013      	beq.n	800662c <HAL_DMA_Abort_IT+0x290>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a5a      	ldr	r2, [pc, #360]	; (8006774 <HAL_DMA_Abort_IT+0x3d8>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d00e      	beq.n	800662c <HAL_DMA_Abort_IT+0x290>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a59      	ldr	r2, [pc, #356]	; (8006778 <HAL_DMA_Abort_IT+0x3dc>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d009      	beq.n	800662c <HAL_DMA_Abort_IT+0x290>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a57      	ldr	r2, [pc, #348]	; (800677c <HAL_DMA_Abort_IT+0x3e0>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d004      	beq.n	800662c <HAL_DMA_Abort_IT+0x290>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a56      	ldr	r2, [pc, #344]	; (8006780 <HAL_DMA_Abort_IT+0x3e4>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d108      	bne.n	800663e <HAL_DMA_Abort_IT+0x2a2>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f022 0201 	bic.w	r2, r2, #1
 800663a:	601a      	str	r2, [r3, #0]
 800663c:	e007      	b.n	800664e <HAL_DMA_Abort_IT+0x2b2>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f022 0201 	bic.w	r2, r2, #1
 800664c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a3c      	ldr	r2, [pc, #240]	; (8006744 <HAL_DMA_Abort_IT+0x3a8>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d072      	beq.n	800673e <HAL_DMA_Abort_IT+0x3a2>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a3a      	ldr	r2, [pc, #232]	; (8006748 <HAL_DMA_Abort_IT+0x3ac>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d06d      	beq.n	800673e <HAL_DMA_Abort_IT+0x3a2>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a39      	ldr	r2, [pc, #228]	; (800674c <HAL_DMA_Abort_IT+0x3b0>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d068      	beq.n	800673e <HAL_DMA_Abort_IT+0x3a2>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a37      	ldr	r2, [pc, #220]	; (8006750 <HAL_DMA_Abort_IT+0x3b4>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d063      	beq.n	800673e <HAL_DMA_Abort_IT+0x3a2>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a36      	ldr	r2, [pc, #216]	; (8006754 <HAL_DMA_Abort_IT+0x3b8>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d05e      	beq.n	800673e <HAL_DMA_Abort_IT+0x3a2>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a34      	ldr	r2, [pc, #208]	; (8006758 <HAL_DMA_Abort_IT+0x3bc>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d059      	beq.n	800673e <HAL_DMA_Abort_IT+0x3a2>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a33      	ldr	r2, [pc, #204]	; (800675c <HAL_DMA_Abort_IT+0x3c0>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d054      	beq.n	800673e <HAL_DMA_Abort_IT+0x3a2>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a31      	ldr	r2, [pc, #196]	; (8006760 <HAL_DMA_Abort_IT+0x3c4>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d04f      	beq.n	800673e <HAL_DMA_Abort_IT+0x3a2>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a30      	ldr	r2, [pc, #192]	; (8006764 <HAL_DMA_Abort_IT+0x3c8>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d04a      	beq.n	800673e <HAL_DMA_Abort_IT+0x3a2>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a2e      	ldr	r2, [pc, #184]	; (8006768 <HAL_DMA_Abort_IT+0x3cc>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d045      	beq.n	800673e <HAL_DMA_Abort_IT+0x3a2>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a2d      	ldr	r2, [pc, #180]	; (800676c <HAL_DMA_Abort_IT+0x3d0>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d040      	beq.n	800673e <HAL_DMA_Abort_IT+0x3a2>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a2b      	ldr	r2, [pc, #172]	; (8006770 <HAL_DMA_Abort_IT+0x3d4>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d03b      	beq.n	800673e <HAL_DMA_Abort_IT+0x3a2>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a2a      	ldr	r2, [pc, #168]	; (8006774 <HAL_DMA_Abort_IT+0x3d8>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d036      	beq.n	800673e <HAL_DMA_Abort_IT+0x3a2>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a28      	ldr	r2, [pc, #160]	; (8006778 <HAL_DMA_Abort_IT+0x3dc>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d031      	beq.n	800673e <HAL_DMA_Abort_IT+0x3a2>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a27      	ldr	r2, [pc, #156]	; (800677c <HAL_DMA_Abort_IT+0x3e0>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d02c      	beq.n	800673e <HAL_DMA_Abort_IT+0x3a2>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a25      	ldr	r2, [pc, #148]	; (8006780 <HAL_DMA_Abort_IT+0x3e4>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d027      	beq.n	800673e <HAL_DMA_Abort_IT+0x3a2>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a24      	ldr	r2, [pc, #144]	; (8006784 <HAL_DMA_Abort_IT+0x3e8>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d022      	beq.n	800673e <HAL_DMA_Abort_IT+0x3a2>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a22      	ldr	r2, [pc, #136]	; (8006788 <HAL_DMA_Abort_IT+0x3ec>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d01d      	beq.n	800673e <HAL_DMA_Abort_IT+0x3a2>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a21      	ldr	r2, [pc, #132]	; (800678c <HAL_DMA_Abort_IT+0x3f0>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d018      	beq.n	800673e <HAL_DMA_Abort_IT+0x3a2>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a1f      	ldr	r2, [pc, #124]	; (8006790 <HAL_DMA_Abort_IT+0x3f4>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d013      	beq.n	800673e <HAL_DMA_Abort_IT+0x3a2>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a1e      	ldr	r2, [pc, #120]	; (8006794 <HAL_DMA_Abort_IT+0x3f8>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d00e      	beq.n	800673e <HAL_DMA_Abort_IT+0x3a2>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a1c      	ldr	r2, [pc, #112]	; (8006798 <HAL_DMA_Abort_IT+0x3fc>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d009      	beq.n	800673e <HAL_DMA_Abort_IT+0x3a2>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a1b      	ldr	r2, [pc, #108]	; (800679c <HAL_DMA_Abort_IT+0x400>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d004      	beq.n	800673e <HAL_DMA_Abort_IT+0x3a2>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a19      	ldr	r2, [pc, #100]	; (80067a0 <HAL_DMA_Abort_IT+0x404>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d132      	bne.n	80067a4 <HAL_DMA_Abort_IT+0x408>
 800673e:	2301      	movs	r3, #1
 8006740:	e031      	b.n	80067a6 <HAL_DMA_Abort_IT+0x40a>
 8006742:	bf00      	nop
 8006744:	40020010 	.word	0x40020010
 8006748:	40020028 	.word	0x40020028
 800674c:	40020040 	.word	0x40020040
 8006750:	40020058 	.word	0x40020058
 8006754:	40020070 	.word	0x40020070
 8006758:	40020088 	.word	0x40020088
 800675c:	400200a0 	.word	0x400200a0
 8006760:	400200b8 	.word	0x400200b8
 8006764:	40020410 	.word	0x40020410
 8006768:	40020428 	.word	0x40020428
 800676c:	40020440 	.word	0x40020440
 8006770:	40020458 	.word	0x40020458
 8006774:	40020470 	.word	0x40020470
 8006778:	40020488 	.word	0x40020488
 800677c:	400204a0 	.word	0x400204a0
 8006780:	400204b8 	.word	0x400204b8
 8006784:	58025408 	.word	0x58025408
 8006788:	5802541c 	.word	0x5802541c
 800678c:	58025430 	.word	0x58025430
 8006790:	58025444 	.word	0x58025444
 8006794:	58025458 	.word	0x58025458
 8006798:	5802546c 	.word	0x5802546c
 800679c:	58025480 	.word	0x58025480
 80067a0:	58025494 	.word	0x58025494
 80067a4:	2300      	movs	r3, #0
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d028      	beq.n	80067fc <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80067b8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067be:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067c4:	f003 031f 	and.w	r3, r3, #31
 80067c8:	2201      	movs	r2, #1
 80067ca:	409a      	lsls	r2, r3
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067d4:	687a      	ldr	r2, [r7, #4]
 80067d6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80067d8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d00c      	beq.n	80067fc <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80067f0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80067fa:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2201      	movs	r2, #1
 8006800:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006810:	2b00      	cmp	r3, #0
 8006812:	d003      	beq.n	800681c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800681c:	2300      	movs	r3, #0
}
 800681e:	4618      	mov	r0, r3
 8006820:	3710      	adds	r7, #16
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}
 8006826:	bf00      	nop

08006828 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b08a      	sub	sp, #40	; 0x28
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006830:	2300      	movs	r3, #0
 8006832:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006834:	4b67      	ldr	r3, [pc, #412]	; (80069d4 <HAL_DMA_IRQHandler+0x1ac>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a67      	ldr	r2, [pc, #412]	; (80069d8 <HAL_DMA_IRQHandler+0x1b0>)
 800683a:	fba2 2303 	umull	r2, r3, r2, r3
 800683e:	0a9b      	lsrs	r3, r3, #10
 8006840:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006846:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800684c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800684e:	6a3b      	ldr	r3, [r7, #32]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006854:	69fb      	ldr	r3, [r7, #28]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a5f      	ldr	r2, [pc, #380]	; (80069dc <HAL_DMA_IRQHandler+0x1b4>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d04a      	beq.n	80068fa <HAL_DMA_IRQHandler+0xd2>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a5d      	ldr	r2, [pc, #372]	; (80069e0 <HAL_DMA_IRQHandler+0x1b8>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d045      	beq.n	80068fa <HAL_DMA_IRQHandler+0xd2>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a5c      	ldr	r2, [pc, #368]	; (80069e4 <HAL_DMA_IRQHandler+0x1bc>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d040      	beq.n	80068fa <HAL_DMA_IRQHandler+0xd2>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a5a      	ldr	r2, [pc, #360]	; (80069e8 <HAL_DMA_IRQHandler+0x1c0>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d03b      	beq.n	80068fa <HAL_DMA_IRQHandler+0xd2>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a59      	ldr	r2, [pc, #356]	; (80069ec <HAL_DMA_IRQHandler+0x1c4>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d036      	beq.n	80068fa <HAL_DMA_IRQHandler+0xd2>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a57      	ldr	r2, [pc, #348]	; (80069f0 <HAL_DMA_IRQHandler+0x1c8>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d031      	beq.n	80068fa <HAL_DMA_IRQHandler+0xd2>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a56      	ldr	r2, [pc, #344]	; (80069f4 <HAL_DMA_IRQHandler+0x1cc>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d02c      	beq.n	80068fa <HAL_DMA_IRQHandler+0xd2>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a54      	ldr	r2, [pc, #336]	; (80069f8 <HAL_DMA_IRQHandler+0x1d0>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d027      	beq.n	80068fa <HAL_DMA_IRQHandler+0xd2>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a53      	ldr	r2, [pc, #332]	; (80069fc <HAL_DMA_IRQHandler+0x1d4>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d022      	beq.n	80068fa <HAL_DMA_IRQHandler+0xd2>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a51      	ldr	r2, [pc, #324]	; (8006a00 <HAL_DMA_IRQHandler+0x1d8>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d01d      	beq.n	80068fa <HAL_DMA_IRQHandler+0xd2>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a50      	ldr	r2, [pc, #320]	; (8006a04 <HAL_DMA_IRQHandler+0x1dc>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d018      	beq.n	80068fa <HAL_DMA_IRQHandler+0xd2>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a4e      	ldr	r2, [pc, #312]	; (8006a08 <HAL_DMA_IRQHandler+0x1e0>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d013      	beq.n	80068fa <HAL_DMA_IRQHandler+0xd2>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a4d      	ldr	r2, [pc, #308]	; (8006a0c <HAL_DMA_IRQHandler+0x1e4>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d00e      	beq.n	80068fa <HAL_DMA_IRQHandler+0xd2>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a4b      	ldr	r2, [pc, #300]	; (8006a10 <HAL_DMA_IRQHandler+0x1e8>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d009      	beq.n	80068fa <HAL_DMA_IRQHandler+0xd2>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a4a      	ldr	r2, [pc, #296]	; (8006a14 <HAL_DMA_IRQHandler+0x1ec>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d004      	beq.n	80068fa <HAL_DMA_IRQHandler+0xd2>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a48      	ldr	r2, [pc, #288]	; (8006a18 <HAL_DMA_IRQHandler+0x1f0>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d101      	bne.n	80068fe <HAL_DMA_IRQHandler+0xd6>
 80068fa:	2301      	movs	r3, #1
 80068fc:	e000      	b.n	8006900 <HAL_DMA_IRQHandler+0xd8>
 80068fe:	2300      	movs	r3, #0
 8006900:	2b00      	cmp	r3, #0
 8006902:	f000 842b 	beq.w	800715c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800690a:	f003 031f 	and.w	r3, r3, #31
 800690e:	2208      	movs	r2, #8
 8006910:	409a      	lsls	r2, r3
 8006912:	69bb      	ldr	r3, [r7, #24]
 8006914:	4013      	ands	r3, r2
 8006916:	2b00      	cmp	r3, #0
 8006918:	f000 80a2 	beq.w	8006a60 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a2e      	ldr	r2, [pc, #184]	; (80069dc <HAL_DMA_IRQHandler+0x1b4>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d04a      	beq.n	80069bc <HAL_DMA_IRQHandler+0x194>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a2d      	ldr	r2, [pc, #180]	; (80069e0 <HAL_DMA_IRQHandler+0x1b8>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d045      	beq.n	80069bc <HAL_DMA_IRQHandler+0x194>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a2b      	ldr	r2, [pc, #172]	; (80069e4 <HAL_DMA_IRQHandler+0x1bc>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d040      	beq.n	80069bc <HAL_DMA_IRQHandler+0x194>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a2a      	ldr	r2, [pc, #168]	; (80069e8 <HAL_DMA_IRQHandler+0x1c0>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d03b      	beq.n	80069bc <HAL_DMA_IRQHandler+0x194>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a28      	ldr	r2, [pc, #160]	; (80069ec <HAL_DMA_IRQHandler+0x1c4>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d036      	beq.n	80069bc <HAL_DMA_IRQHandler+0x194>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a27      	ldr	r2, [pc, #156]	; (80069f0 <HAL_DMA_IRQHandler+0x1c8>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d031      	beq.n	80069bc <HAL_DMA_IRQHandler+0x194>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a25      	ldr	r2, [pc, #148]	; (80069f4 <HAL_DMA_IRQHandler+0x1cc>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d02c      	beq.n	80069bc <HAL_DMA_IRQHandler+0x194>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a24      	ldr	r2, [pc, #144]	; (80069f8 <HAL_DMA_IRQHandler+0x1d0>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d027      	beq.n	80069bc <HAL_DMA_IRQHandler+0x194>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a22      	ldr	r2, [pc, #136]	; (80069fc <HAL_DMA_IRQHandler+0x1d4>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d022      	beq.n	80069bc <HAL_DMA_IRQHandler+0x194>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a21      	ldr	r2, [pc, #132]	; (8006a00 <HAL_DMA_IRQHandler+0x1d8>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d01d      	beq.n	80069bc <HAL_DMA_IRQHandler+0x194>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a1f      	ldr	r2, [pc, #124]	; (8006a04 <HAL_DMA_IRQHandler+0x1dc>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d018      	beq.n	80069bc <HAL_DMA_IRQHandler+0x194>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a1e      	ldr	r2, [pc, #120]	; (8006a08 <HAL_DMA_IRQHandler+0x1e0>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d013      	beq.n	80069bc <HAL_DMA_IRQHandler+0x194>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a1c      	ldr	r2, [pc, #112]	; (8006a0c <HAL_DMA_IRQHandler+0x1e4>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d00e      	beq.n	80069bc <HAL_DMA_IRQHandler+0x194>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a1b      	ldr	r2, [pc, #108]	; (8006a10 <HAL_DMA_IRQHandler+0x1e8>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d009      	beq.n	80069bc <HAL_DMA_IRQHandler+0x194>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a19      	ldr	r2, [pc, #100]	; (8006a14 <HAL_DMA_IRQHandler+0x1ec>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d004      	beq.n	80069bc <HAL_DMA_IRQHandler+0x194>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a18      	ldr	r2, [pc, #96]	; (8006a18 <HAL_DMA_IRQHandler+0x1f0>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d12f      	bne.n	8006a1c <HAL_DMA_IRQHandler+0x1f4>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f003 0304 	and.w	r3, r3, #4
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	bf14      	ite	ne
 80069ca:	2301      	movne	r3, #1
 80069cc:	2300      	moveq	r3, #0
 80069ce:	b2db      	uxtb	r3, r3
 80069d0:	e02e      	b.n	8006a30 <HAL_DMA_IRQHandler+0x208>
 80069d2:	bf00      	nop
 80069d4:	24000088 	.word	0x24000088
 80069d8:	1b4e81b5 	.word	0x1b4e81b5
 80069dc:	40020010 	.word	0x40020010
 80069e0:	40020028 	.word	0x40020028
 80069e4:	40020040 	.word	0x40020040
 80069e8:	40020058 	.word	0x40020058
 80069ec:	40020070 	.word	0x40020070
 80069f0:	40020088 	.word	0x40020088
 80069f4:	400200a0 	.word	0x400200a0
 80069f8:	400200b8 	.word	0x400200b8
 80069fc:	40020410 	.word	0x40020410
 8006a00:	40020428 	.word	0x40020428
 8006a04:	40020440 	.word	0x40020440
 8006a08:	40020458 	.word	0x40020458
 8006a0c:	40020470 	.word	0x40020470
 8006a10:	40020488 	.word	0x40020488
 8006a14:	400204a0 	.word	0x400204a0
 8006a18:	400204b8 	.word	0x400204b8
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f003 0308 	and.w	r3, r3, #8
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	bf14      	ite	ne
 8006a2a:	2301      	movne	r3, #1
 8006a2c:	2300      	moveq	r3, #0
 8006a2e:	b2db      	uxtb	r3, r3
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d015      	beq.n	8006a60 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f022 0204 	bic.w	r2, r2, #4
 8006a42:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a48:	f003 031f 	and.w	r3, r3, #31
 8006a4c:	2208      	movs	r2, #8
 8006a4e:	409a      	lsls	r2, r3
 8006a50:	6a3b      	ldr	r3, [r7, #32]
 8006a52:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a58:	f043 0201 	orr.w	r2, r3, #1
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a64:	f003 031f 	and.w	r3, r3, #31
 8006a68:	69ba      	ldr	r2, [r7, #24]
 8006a6a:	fa22 f303 	lsr.w	r3, r2, r3
 8006a6e:	f003 0301 	and.w	r3, r3, #1
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d06e      	beq.n	8006b54 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a69      	ldr	r2, [pc, #420]	; (8006c20 <HAL_DMA_IRQHandler+0x3f8>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d04a      	beq.n	8006b16 <HAL_DMA_IRQHandler+0x2ee>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a67      	ldr	r2, [pc, #412]	; (8006c24 <HAL_DMA_IRQHandler+0x3fc>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d045      	beq.n	8006b16 <HAL_DMA_IRQHandler+0x2ee>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a66      	ldr	r2, [pc, #408]	; (8006c28 <HAL_DMA_IRQHandler+0x400>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d040      	beq.n	8006b16 <HAL_DMA_IRQHandler+0x2ee>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a64      	ldr	r2, [pc, #400]	; (8006c2c <HAL_DMA_IRQHandler+0x404>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d03b      	beq.n	8006b16 <HAL_DMA_IRQHandler+0x2ee>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a63      	ldr	r2, [pc, #396]	; (8006c30 <HAL_DMA_IRQHandler+0x408>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d036      	beq.n	8006b16 <HAL_DMA_IRQHandler+0x2ee>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a61      	ldr	r2, [pc, #388]	; (8006c34 <HAL_DMA_IRQHandler+0x40c>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d031      	beq.n	8006b16 <HAL_DMA_IRQHandler+0x2ee>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a60      	ldr	r2, [pc, #384]	; (8006c38 <HAL_DMA_IRQHandler+0x410>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d02c      	beq.n	8006b16 <HAL_DMA_IRQHandler+0x2ee>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a5e      	ldr	r2, [pc, #376]	; (8006c3c <HAL_DMA_IRQHandler+0x414>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d027      	beq.n	8006b16 <HAL_DMA_IRQHandler+0x2ee>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a5d      	ldr	r2, [pc, #372]	; (8006c40 <HAL_DMA_IRQHandler+0x418>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d022      	beq.n	8006b16 <HAL_DMA_IRQHandler+0x2ee>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a5b      	ldr	r2, [pc, #364]	; (8006c44 <HAL_DMA_IRQHandler+0x41c>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d01d      	beq.n	8006b16 <HAL_DMA_IRQHandler+0x2ee>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a5a      	ldr	r2, [pc, #360]	; (8006c48 <HAL_DMA_IRQHandler+0x420>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d018      	beq.n	8006b16 <HAL_DMA_IRQHandler+0x2ee>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a58      	ldr	r2, [pc, #352]	; (8006c4c <HAL_DMA_IRQHandler+0x424>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d013      	beq.n	8006b16 <HAL_DMA_IRQHandler+0x2ee>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a57      	ldr	r2, [pc, #348]	; (8006c50 <HAL_DMA_IRQHandler+0x428>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d00e      	beq.n	8006b16 <HAL_DMA_IRQHandler+0x2ee>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a55      	ldr	r2, [pc, #340]	; (8006c54 <HAL_DMA_IRQHandler+0x42c>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d009      	beq.n	8006b16 <HAL_DMA_IRQHandler+0x2ee>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a54      	ldr	r2, [pc, #336]	; (8006c58 <HAL_DMA_IRQHandler+0x430>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d004      	beq.n	8006b16 <HAL_DMA_IRQHandler+0x2ee>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a52      	ldr	r2, [pc, #328]	; (8006c5c <HAL_DMA_IRQHandler+0x434>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d10a      	bne.n	8006b2c <HAL_DMA_IRQHandler+0x304>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	695b      	ldr	r3, [r3, #20]
 8006b1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	bf14      	ite	ne
 8006b24:	2301      	movne	r3, #1
 8006b26:	2300      	moveq	r3, #0
 8006b28:	b2db      	uxtb	r3, r3
 8006b2a:	e003      	b.n	8006b34 <HAL_DMA_IRQHandler+0x30c>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	2300      	movs	r3, #0
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d00d      	beq.n	8006b54 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b3c:	f003 031f 	and.w	r3, r3, #31
 8006b40:	2201      	movs	r2, #1
 8006b42:	409a      	lsls	r2, r3
 8006b44:	6a3b      	ldr	r3, [r7, #32]
 8006b46:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b4c:	f043 0202 	orr.w	r2, r3, #2
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b58:	f003 031f 	and.w	r3, r3, #31
 8006b5c:	2204      	movs	r2, #4
 8006b5e:	409a      	lsls	r2, r3
 8006b60:	69bb      	ldr	r3, [r7, #24]
 8006b62:	4013      	ands	r3, r2
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	f000 808f 	beq.w	8006c88 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a2c      	ldr	r2, [pc, #176]	; (8006c20 <HAL_DMA_IRQHandler+0x3f8>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d04a      	beq.n	8006c0a <HAL_DMA_IRQHandler+0x3e2>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a2a      	ldr	r2, [pc, #168]	; (8006c24 <HAL_DMA_IRQHandler+0x3fc>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d045      	beq.n	8006c0a <HAL_DMA_IRQHandler+0x3e2>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a29      	ldr	r2, [pc, #164]	; (8006c28 <HAL_DMA_IRQHandler+0x400>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d040      	beq.n	8006c0a <HAL_DMA_IRQHandler+0x3e2>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a27      	ldr	r2, [pc, #156]	; (8006c2c <HAL_DMA_IRQHandler+0x404>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d03b      	beq.n	8006c0a <HAL_DMA_IRQHandler+0x3e2>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a26      	ldr	r2, [pc, #152]	; (8006c30 <HAL_DMA_IRQHandler+0x408>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d036      	beq.n	8006c0a <HAL_DMA_IRQHandler+0x3e2>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a24      	ldr	r2, [pc, #144]	; (8006c34 <HAL_DMA_IRQHandler+0x40c>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d031      	beq.n	8006c0a <HAL_DMA_IRQHandler+0x3e2>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a23      	ldr	r2, [pc, #140]	; (8006c38 <HAL_DMA_IRQHandler+0x410>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d02c      	beq.n	8006c0a <HAL_DMA_IRQHandler+0x3e2>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a21      	ldr	r2, [pc, #132]	; (8006c3c <HAL_DMA_IRQHandler+0x414>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d027      	beq.n	8006c0a <HAL_DMA_IRQHandler+0x3e2>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a20      	ldr	r2, [pc, #128]	; (8006c40 <HAL_DMA_IRQHandler+0x418>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d022      	beq.n	8006c0a <HAL_DMA_IRQHandler+0x3e2>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a1e      	ldr	r2, [pc, #120]	; (8006c44 <HAL_DMA_IRQHandler+0x41c>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d01d      	beq.n	8006c0a <HAL_DMA_IRQHandler+0x3e2>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a1d      	ldr	r2, [pc, #116]	; (8006c48 <HAL_DMA_IRQHandler+0x420>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d018      	beq.n	8006c0a <HAL_DMA_IRQHandler+0x3e2>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a1b      	ldr	r2, [pc, #108]	; (8006c4c <HAL_DMA_IRQHandler+0x424>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d013      	beq.n	8006c0a <HAL_DMA_IRQHandler+0x3e2>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a1a      	ldr	r2, [pc, #104]	; (8006c50 <HAL_DMA_IRQHandler+0x428>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d00e      	beq.n	8006c0a <HAL_DMA_IRQHandler+0x3e2>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a18      	ldr	r2, [pc, #96]	; (8006c54 <HAL_DMA_IRQHandler+0x42c>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d009      	beq.n	8006c0a <HAL_DMA_IRQHandler+0x3e2>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a17      	ldr	r2, [pc, #92]	; (8006c58 <HAL_DMA_IRQHandler+0x430>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d004      	beq.n	8006c0a <HAL_DMA_IRQHandler+0x3e2>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a15      	ldr	r2, [pc, #84]	; (8006c5c <HAL_DMA_IRQHandler+0x434>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d12a      	bne.n	8006c60 <HAL_DMA_IRQHandler+0x438>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f003 0302 	and.w	r3, r3, #2
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	bf14      	ite	ne
 8006c18:	2301      	movne	r3, #1
 8006c1a:	2300      	moveq	r3, #0
 8006c1c:	b2db      	uxtb	r3, r3
 8006c1e:	e023      	b.n	8006c68 <HAL_DMA_IRQHandler+0x440>
 8006c20:	40020010 	.word	0x40020010
 8006c24:	40020028 	.word	0x40020028
 8006c28:	40020040 	.word	0x40020040
 8006c2c:	40020058 	.word	0x40020058
 8006c30:	40020070 	.word	0x40020070
 8006c34:	40020088 	.word	0x40020088
 8006c38:	400200a0 	.word	0x400200a0
 8006c3c:	400200b8 	.word	0x400200b8
 8006c40:	40020410 	.word	0x40020410
 8006c44:	40020428 	.word	0x40020428
 8006c48:	40020440 	.word	0x40020440
 8006c4c:	40020458 	.word	0x40020458
 8006c50:	40020470 	.word	0x40020470
 8006c54:	40020488 	.word	0x40020488
 8006c58:	400204a0 	.word	0x400204a0
 8006c5c:	400204b8 	.word	0x400204b8
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	2300      	movs	r3, #0
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d00d      	beq.n	8006c88 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c70:	f003 031f 	and.w	r3, r3, #31
 8006c74:	2204      	movs	r2, #4
 8006c76:	409a      	lsls	r2, r3
 8006c78:	6a3b      	ldr	r3, [r7, #32]
 8006c7a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c80:	f043 0204 	orr.w	r2, r3, #4
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c8c:	f003 031f 	and.w	r3, r3, #31
 8006c90:	2210      	movs	r2, #16
 8006c92:	409a      	lsls	r2, r3
 8006c94:	69bb      	ldr	r3, [r7, #24]
 8006c96:	4013      	ands	r3, r2
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	f000 80a6 	beq.w	8006dea <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a85      	ldr	r2, [pc, #532]	; (8006eb8 <HAL_DMA_IRQHandler+0x690>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d04a      	beq.n	8006d3e <HAL_DMA_IRQHandler+0x516>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a83      	ldr	r2, [pc, #524]	; (8006ebc <HAL_DMA_IRQHandler+0x694>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d045      	beq.n	8006d3e <HAL_DMA_IRQHandler+0x516>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a82      	ldr	r2, [pc, #520]	; (8006ec0 <HAL_DMA_IRQHandler+0x698>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d040      	beq.n	8006d3e <HAL_DMA_IRQHandler+0x516>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a80      	ldr	r2, [pc, #512]	; (8006ec4 <HAL_DMA_IRQHandler+0x69c>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d03b      	beq.n	8006d3e <HAL_DMA_IRQHandler+0x516>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a7f      	ldr	r2, [pc, #508]	; (8006ec8 <HAL_DMA_IRQHandler+0x6a0>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d036      	beq.n	8006d3e <HAL_DMA_IRQHandler+0x516>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a7d      	ldr	r2, [pc, #500]	; (8006ecc <HAL_DMA_IRQHandler+0x6a4>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d031      	beq.n	8006d3e <HAL_DMA_IRQHandler+0x516>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a7c      	ldr	r2, [pc, #496]	; (8006ed0 <HAL_DMA_IRQHandler+0x6a8>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d02c      	beq.n	8006d3e <HAL_DMA_IRQHandler+0x516>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a7a      	ldr	r2, [pc, #488]	; (8006ed4 <HAL_DMA_IRQHandler+0x6ac>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d027      	beq.n	8006d3e <HAL_DMA_IRQHandler+0x516>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a79      	ldr	r2, [pc, #484]	; (8006ed8 <HAL_DMA_IRQHandler+0x6b0>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d022      	beq.n	8006d3e <HAL_DMA_IRQHandler+0x516>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a77      	ldr	r2, [pc, #476]	; (8006edc <HAL_DMA_IRQHandler+0x6b4>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d01d      	beq.n	8006d3e <HAL_DMA_IRQHandler+0x516>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a76      	ldr	r2, [pc, #472]	; (8006ee0 <HAL_DMA_IRQHandler+0x6b8>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d018      	beq.n	8006d3e <HAL_DMA_IRQHandler+0x516>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a74      	ldr	r2, [pc, #464]	; (8006ee4 <HAL_DMA_IRQHandler+0x6bc>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d013      	beq.n	8006d3e <HAL_DMA_IRQHandler+0x516>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a73      	ldr	r2, [pc, #460]	; (8006ee8 <HAL_DMA_IRQHandler+0x6c0>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d00e      	beq.n	8006d3e <HAL_DMA_IRQHandler+0x516>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a71      	ldr	r2, [pc, #452]	; (8006eec <HAL_DMA_IRQHandler+0x6c4>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d009      	beq.n	8006d3e <HAL_DMA_IRQHandler+0x516>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a70      	ldr	r2, [pc, #448]	; (8006ef0 <HAL_DMA_IRQHandler+0x6c8>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d004      	beq.n	8006d3e <HAL_DMA_IRQHandler+0x516>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a6e      	ldr	r2, [pc, #440]	; (8006ef4 <HAL_DMA_IRQHandler+0x6cc>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d10a      	bne.n	8006d54 <HAL_DMA_IRQHandler+0x52c>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f003 0308 	and.w	r3, r3, #8
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	bf14      	ite	ne
 8006d4c:	2301      	movne	r3, #1
 8006d4e:	2300      	moveq	r3, #0
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	e009      	b.n	8006d68 <HAL_DMA_IRQHandler+0x540>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f003 0304 	and.w	r3, r3, #4
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	bf14      	ite	ne
 8006d62:	2301      	movne	r3, #1
 8006d64:	2300      	moveq	r3, #0
 8006d66:	b2db      	uxtb	r3, r3
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d03e      	beq.n	8006dea <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d70:	f003 031f 	and.w	r3, r3, #31
 8006d74:	2210      	movs	r2, #16
 8006d76:	409a      	lsls	r2, r3
 8006d78:	6a3b      	ldr	r3, [r7, #32]
 8006d7a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d018      	beq.n	8006dbc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d108      	bne.n	8006daa <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d024      	beq.n	8006dea <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	4798      	blx	r3
 8006da8:	e01f      	b.n	8006dea <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d01b      	beq.n	8006dea <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	4798      	blx	r3
 8006dba:	e016      	b.n	8006dea <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d107      	bne.n	8006dda <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f022 0208 	bic.w	r2, r2, #8
 8006dd8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d003      	beq.n	8006dea <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dee:	f003 031f 	and.w	r3, r3, #31
 8006df2:	2220      	movs	r2, #32
 8006df4:	409a      	lsls	r2, r3
 8006df6:	69bb      	ldr	r3, [r7, #24]
 8006df8:	4013      	ands	r3, r2
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	f000 8110 	beq.w	8007020 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a2c      	ldr	r2, [pc, #176]	; (8006eb8 <HAL_DMA_IRQHandler+0x690>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d04a      	beq.n	8006ea0 <HAL_DMA_IRQHandler+0x678>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a2b      	ldr	r2, [pc, #172]	; (8006ebc <HAL_DMA_IRQHandler+0x694>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d045      	beq.n	8006ea0 <HAL_DMA_IRQHandler+0x678>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a29      	ldr	r2, [pc, #164]	; (8006ec0 <HAL_DMA_IRQHandler+0x698>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d040      	beq.n	8006ea0 <HAL_DMA_IRQHandler+0x678>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a28      	ldr	r2, [pc, #160]	; (8006ec4 <HAL_DMA_IRQHandler+0x69c>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d03b      	beq.n	8006ea0 <HAL_DMA_IRQHandler+0x678>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a26      	ldr	r2, [pc, #152]	; (8006ec8 <HAL_DMA_IRQHandler+0x6a0>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d036      	beq.n	8006ea0 <HAL_DMA_IRQHandler+0x678>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a25      	ldr	r2, [pc, #148]	; (8006ecc <HAL_DMA_IRQHandler+0x6a4>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d031      	beq.n	8006ea0 <HAL_DMA_IRQHandler+0x678>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a23      	ldr	r2, [pc, #140]	; (8006ed0 <HAL_DMA_IRQHandler+0x6a8>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d02c      	beq.n	8006ea0 <HAL_DMA_IRQHandler+0x678>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a22      	ldr	r2, [pc, #136]	; (8006ed4 <HAL_DMA_IRQHandler+0x6ac>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d027      	beq.n	8006ea0 <HAL_DMA_IRQHandler+0x678>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a20      	ldr	r2, [pc, #128]	; (8006ed8 <HAL_DMA_IRQHandler+0x6b0>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d022      	beq.n	8006ea0 <HAL_DMA_IRQHandler+0x678>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a1f      	ldr	r2, [pc, #124]	; (8006edc <HAL_DMA_IRQHandler+0x6b4>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d01d      	beq.n	8006ea0 <HAL_DMA_IRQHandler+0x678>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a1d      	ldr	r2, [pc, #116]	; (8006ee0 <HAL_DMA_IRQHandler+0x6b8>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d018      	beq.n	8006ea0 <HAL_DMA_IRQHandler+0x678>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a1c      	ldr	r2, [pc, #112]	; (8006ee4 <HAL_DMA_IRQHandler+0x6bc>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d013      	beq.n	8006ea0 <HAL_DMA_IRQHandler+0x678>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a1a      	ldr	r2, [pc, #104]	; (8006ee8 <HAL_DMA_IRQHandler+0x6c0>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d00e      	beq.n	8006ea0 <HAL_DMA_IRQHandler+0x678>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a19      	ldr	r2, [pc, #100]	; (8006eec <HAL_DMA_IRQHandler+0x6c4>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d009      	beq.n	8006ea0 <HAL_DMA_IRQHandler+0x678>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a17      	ldr	r2, [pc, #92]	; (8006ef0 <HAL_DMA_IRQHandler+0x6c8>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d004      	beq.n	8006ea0 <HAL_DMA_IRQHandler+0x678>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a16      	ldr	r2, [pc, #88]	; (8006ef4 <HAL_DMA_IRQHandler+0x6cc>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d12b      	bne.n	8006ef8 <HAL_DMA_IRQHandler+0x6d0>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f003 0310 	and.w	r3, r3, #16
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	bf14      	ite	ne
 8006eae:	2301      	movne	r3, #1
 8006eb0:	2300      	moveq	r3, #0
 8006eb2:	b2db      	uxtb	r3, r3
 8006eb4:	e02a      	b.n	8006f0c <HAL_DMA_IRQHandler+0x6e4>
 8006eb6:	bf00      	nop
 8006eb8:	40020010 	.word	0x40020010
 8006ebc:	40020028 	.word	0x40020028
 8006ec0:	40020040 	.word	0x40020040
 8006ec4:	40020058 	.word	0x40020058
 8006ec8:	40020070 	.word	0x40020070
 8006ecc:	40020088 	.word	0x40020088
 8006ed0:	400200a0 	.word	0x400200a0
 8006ed4:	400200b8 	.word	0x400200b8
 8006ed8:	40020410 	.word	0x40020410
 8006edc:	40020428 	.word	0x40020428
 8006ee0:	40020440 	.word	0x40020440
 8006ee4:	40020458 	.word	0x40020458
 8006ee8:	40020470 	.word	0x40020470
 8006eec:	40020488 	.word	0x40020488
 8006ef0:	400204a0 	.word	0x400204a0
 8006ef4:	400204b8 	.word	0x400204b8
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f003 0302 	and.w	r3, r3, #2
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	bf14      	ite	ne
 8006f06:	2301      	movne	r3, #1
 8006f08:	2300      	moveq	r3, #0
 8006f0a:	b2db      	uxtb	r3, r3
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	f000 8087 	beq.w	8007020 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f16:	f003 031f 	and.w	r3, r3, #31
 8006f1a:	2220      	movs	r2, #32
 8006f1c:	409a      	lsls	r2, r3
 8006f1e:	6a3b      	ldr	r3, [r7, #32]
 8006f20:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006f28:	b2db      	uxtb	r3, r3
 8006f2a:	2b04      	cmp	r3, #4
 8006f2c:	d139      	bne.n	8006fa2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	681a      	ldr	r2, [r3, #0]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f022 0216 	bic.w	r2, r2, #22
 8006f3c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	695a      	ldr	r2, [r3, #20]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f4c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d103      	bne.n	8006f5e <HAL_DMA_IRQHandler+0x736>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d007      	beq.n	8006f6e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f022 0208 	bic.w	r2, r2, #8
 8006f6c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f72:	f003 031f 	and.w	r3, r3, #31
 8006f76:	223f      	movs	r2, #63	; 0x3f
 8006f78:	409a      	lsls	r2, r3
 8006f7a:	6a3b      	ldr	r3, [r7, #32]
 8006f7c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2201      	movs	r2, #1
 8006f82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	f000 834a 	beq.w	800762c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	4798      	blx	r3
          }
          return;
 8006fa0:	e344      	b.n	800762c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d018      	beq.n	8006fe2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d108      	bne.n	8006fd0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d02c      	beq.n	8007020 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	4798      	blx	r3
 8006fce:	e027      	b.n	8007020 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d023      	beq.n	8007020 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	4798      	blx	r3
 8006fe0:	e01e      	b.n	8007020 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d10f      	bne.n	8007010 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	681a      	ldr	r2, [r3, #0]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f022 0210 	bic.w	r2, r2, #16
 8006ffe:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2201      	movs	r2, #1
 8007004:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2200      	movs	r2, #0
 800700c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007014:	2b00      	cmp	r3, #0
 8007016:	d003      	beq.n	8007020 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007024:	2b00      	cmp	r3, #0
 8007026:	f000 8306 	beq.w	8007636 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800702e:	f003 0301 	and.w	r3, r3, #1
 8007032:	2b00      	cmp	r3, #0
 8007034:	f000 8088 	beq.w	8007148 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2204      	movs	r2, #4
 800703c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a7a      	ldr	r2, [pc, #488]	; (8007230 <HAL_DMA_IRQHandler+0xa08>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d04a      	beq.n	80070e0 <HAL_DMA_IRQHandler+0x8b8>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a79      	ldr	r2, [pc, #484]	; (8007234 <HAL_DMA_IRQHandler+0xa0c>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d045      	beq.n	80070e0 <HAL_DMA_IRQHandler+0x8b8>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a77      	ldr	r2, [pc, #476]	; (8007238 <HAL_DMA_IRQHandler+0xa10>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d040      	beq.n	80070e0 <HAL_DMA_IRQHandler+0x8b8>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a76      	ldr	r2, [pc, #472]	; (800723c <HAL_DMA_IRQHandler+0xa14>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d03b      	beq.n	80070e0 <HAL_DMA_IRQHandler+0x8b8>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a74      	ldr	r2, [pc, #464]	; (8007240 <HAL_DMA_IRQHandler+0xa18>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d036      	beq.n	80070e0 <HAL_DMA_IRQHandler+0x8b8>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a73      	ldr	r2, [pc, #460]	; (8007244 <HAL_DMA_IRQHandler+0xa1c>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d031      	beq.n	80070e0 <HAL_DMA_IRQHandler+0x8b8>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a71      	ldr	r2, [pc, #452]	; (8007248 <HAL_DMA_IRQHandler+0xa20>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d02c      	beq.n	80070e0 <HAL_DMA_IRQHandler+0x8b8>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a70      	ldr	r2, [pc, #448]	; (800724c <HAL_DMA_IRQHandler+0xa24>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d027      	beq.n	80070e0 <HAL_DMA_IRQHandler+0x8b8>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a6e      	ldr	r2, [pc, #440]	; (8007250 <HAL_DMA_IRQHandler+0xa28>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d022      	beq.n	80070e0 <HAL_DMA_IRQHandler+0x8b8>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a6d      	ldr	r2, [pc, #436]	; (8007254 <HAL_DMA_IRQHandler+0xa2c>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d01d      	beq.n	80070e0 <HAL_DMA_IRQHandler+0x8b8>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a6b      	ldr	r2, [pc, #428]	; (8007258 <HAL_DMA_IRQHandler+0xa30>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d018      	beq.n	80070e0 <HAL_DMA_IRQHandler+0x8b8>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a6a      	ldr	r2, [pc, #424]	; (800725c <HAL_DMA_IRQHandler+0xa34>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d013      	beq.n	80070e0 <HAL_DMA_IRQHandler+0x8b8>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a68      	ldr	r2, [pc, #416]	; (8007260 <HAL_DMA_IRQHandler+0xa38>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d00e      	beq.n	80070e0 <HAL_DMA_IRQHandler+0x8b8>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a67      	ldr	r2, [pc, #412]	; (8007264 <HAL_DMA_IRQHandler+0xa3c>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d009      	beq.n	80070e0 <HAL_DMA_IRQHandler+0x8b8>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a65      	ldr	r2, [pc, #404]	; (8007268 <HAL_DMA_IRQHandler+0xa40>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d004      	beq.n	80070e0 <HAL_DMA_IRQHandler+0x8b8>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a64      	ldr	r2, [pc, #400]	; (800726c <HAL_DMA_IRQHandler+0xa44>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d108      	bne.n	80070f2 <HAL_DMA_IRQHandler+0x8ca>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	681a      	ldr	r2, [r3, #0]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f022 0201 	bic.w	r2, r2, #1
 80070ee:	601a      	str	r2, [r3, #0]
 80070f0:	e007      	b.n	8007102 <HAL_DMA_IRQHandler+0x8da>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	681a      	ldr	r2, [r3, #0]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f022 0201 	bic.w	r2, r2, #1
 8007100:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	3301      	adds	r3, #1
 8007106:	60fb      	str	r3, [r7, #12]
 8007108:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800710a:	429a      	cmp	r2, r3
 800710c:	d307      	bcc.n	800711e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f003 0301 	and.w	r3, r3, #1
 8007118:	2b00      	cmp	r3, #0
 800711a:	d1f2      	bne.n	8007102 <HAL_DMA_IRQHandler+0x8da>
 800711c:	e000      	b.n	8007120 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800711e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f003 0301 	and.w	r3, r3, #1
 800712a:	2b00      	cmp	r3, #0
 800712c:	d004      	beq.n	8007138 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2203      	movs	r2, #3
 8007132:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8007136:	e003      	b.n	8007140 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2201      	movs	r2, #1
 800713c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2200      	movs	r2, #0
 8007144:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800714c:	2b00      	cmp	r3, #0
 800714e:	f000 8272 	beq.w	8007636 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	4798      	blx	r3
 800715a:	e26c      	b.n	8007636 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a43      	ldr	r2, [pc, #268]	; (8007270 <HAL_DMA_IRQHandler+0xa48>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d022      	beq.n	80071ac <HAL_DMA_IRQHandler+0x984>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a42      	ldr	r2, [pc, #264]	; (8007274 <HAL_DMA_IRQHandler+0xa4c>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d01d      	beq.n	80071ac <HAL_DMA_IRQHandler+0x984>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a40      	ldr	r2, [pc, #256]	; (8007278 <HAL_DMA_IRQHandler+0xa50>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d018      	beq.n	80071ac <HAL_DMA_IRQHandler+0x984>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a3f      	ldr	r2, [pc, #252]	; (800727c <HAL_DMA_IRQHandler+0xa54>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d013      	beq.n	80071ac <HAL_DMA_IRQHandler+0x984>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a3d      	ldr	r2, [pc, #244]	; (8007280 <HAL_DMA_IRQHandler+0xa58>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d00e      	beq.n	80071ac <HAL_DMA_IRQHandler+0x984>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a3c      	ldr	r2, [pc, #240]	; (8007284 <HAL_DMA_IRQHandler+0xa5c>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d009      	beq.n	80071ac <HAL_DMA_IRQHandler+0x984>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a3a      	ldr	r2, [pc, #232]	; (8007288 <HAL_DMA_IRQHandler+0xa60>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d004      	beq.n	80071ac <HAL_DMA_IRQHandler+0x984>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a39      	ldr	r2, [pc, #228]	; (800728c <HAL_DMA_IRQHandler+0xa64>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d101      	bne.n	80071b0 <HAL_DMA_IRQHandler+0x988>
 80071ac:	2301      	movs	r3, #1
 80071ae:	e000      	b.n	80071b2 <HAL_DMA_IRQHandler+0x98a>
 80071b0:	2300      	movs	r3, #0
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	f000 823f 	beq.w	8007636 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071c4:	f003 031f 	and.w	r3, r3, #31
 80071c8:	2204      	movs	r2, #4
 80071ca:	409a      	lsls	r2, r3
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	4013      	ands	r3, r2
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	f000 80cd 	beq.w	8007370 <HAL_DMA_IRQHandler+0xb48>
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	f003 0304 	and.w	r3, r3, #4
 80071dc:	2b00      	cmp	r3, #0
 80071de:	f000 80c7 	beq.w	8007370 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071e6:	f003 031f 	and.w	r3, r3, #31
 80071ea:	2204      	movs	r2, #4
 80071ec:	409a      	lsls	r2, r3
 80071ee:	69fb      	ldr	r3, [r7, #28]
 80071f0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d049      	beq.n	8007290 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007202:	2b00      	cmp	r3, #0
 8007204:	d109      	bne.n	800721a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800720a:	2b00      	cmp	r3, #0
 800720c:	f000 8210 	beq.w	8007630 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007218:	e20a      	b.n	8007630 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800721e:	2b00      	cmp	r3, #0
 8007220:	f000 8206 	beq.w	8007630 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800722c:	e200      	b.n	8007630 <HAL_DMA_IRQHandler+0xe08>
 800722e:	bf00      	nop
 8007230:	40020010 	.word	0x40020010
 8007234:	40020028 	.word	0x40020028
 8007238:	40020040 	.word	0x40020040
 800723c:	40020058 	.word	0x40020058
 8007240:	40020070 	.word	0x40020070
 8007244:	40020088 	.word	0x40020088
 8007248:	400200a0 	.word	0x400200a0
 800724c:	400200b8 	.word	0x400200b8
 8007250:	40020410 	.word	0x40020410
 8007254:	40020428 	.word	0x40020428
 8007258:	40020440 	.word	0x40020440
 800725c:	40020458 	.word	0x40020458
 8007260:	40020470 	.word	0x40020470
 8007264:	40020488 	.word	0x40020488
 8007268:	400204a0 	.word	0x400204a0
 800726c:	400204b8 	.word	0x400204b8
 8007270:	58025408 	.word	0x58025408
 8007274:	5802541c 	.word	0x5802541c
 8007278:	58025430 	.word	0x58025430
 800727c:	58025444 	.word	0x58025444
 8007280:	58025458 	.word	0x58025458
 8007284:	5802546c 	.word	0x5802546c
 8007288:	58025480 	.word	0x58025480
 800728c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	f003 0320 	and.w	r3, r3, #32
 8007296:	2b00      	cmp	r3, #0
 8007298:	d160      	bne.n	800735c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a7f      	ldr	r2, [pc, #508]	; (800749c <HAL_DMA_IRQHandler+0xc74>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d04a      	beq.n	800733a <HAL_DMA_IRQHandler+0xb12>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a7d      	ldr	r2, [pc, #500]	; (80074a0 <HAL_DMA_IRQHandler+0xc78>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d045      	beq.n	800733a <HAL_DMA_IRQHandler+0xb12>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a7c      	ldr	r2, [pc, #496]	; (80074a4 <HAL_DMA_IRQHandler+0xc7c>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d040      	beq.n	800733a <HAL_DMA_IRQHandler+0xb12>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a7a      	ldr	r2, [pc, #488]	; (80074a8 <HAL_DMA_IRQHandler+0xc80>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d03b      	beq.n	800733a <HAL_DMA_IRQHandler+0xb12>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a79      	ldr	r2, [pc, #484]	; (80074ac <HAL_DMA_IRQHandler+0xc84>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d036      	beq.n	800733a <HAL_DMA_IRQHandler+0xb12>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a77      	ldr	r2, [pc, #476]	; (80074b0 <HAL_DMA_IRQHandler+0xc88>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d031      	beq.n	800733a <HAL_DMA_IRQHandler+0xb12>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a76      	ldr	r2, [pc, #472]	; (80074b4 <HAL_DMA_IRQHandler+0xc8c>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d02c      	beq.n	800733a <HAL_DMA_IRQHandler+0xb12>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a74      	ldr	r2, [pc, #464]	; (80074b8 <HAL_DMA_IRQHandler+0xc90>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d027      	beq.n	800733a <HAL_DMA_IRQHandler+0xb12>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a73      	ldr	r2, [pc, #460]	; (80074bc <HAL_DMA_IRQHandler+0xc94>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d022      	beq.n	800733a <HAL_DMA_IRQHandler+0xb12>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a71      	ldr	r2, [pc, #452]	; (80074c0 <HAL_DMA_IRQHandler+0xc98>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d01d      	beq.n	800733a <HAL_DMA_IRQHandler+0xb12>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a70      	ldr	r2, [pc, #448]	; (80074c4 <HAL_DMA_IRQHandler+0xc9c>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d018      	beq.n	800733a <HAL_DMA_IRQHandler+0xb12>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a6e      	ldr	r2, [pc, #440]	; (80074c8 <HAL_DMA_IRQHandler+0xca0>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d013      	beq.n	800733a <HAL_DMA_IRQHandler+0xb12>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a6d      	ldr	r2, [pc, #436]	; (80074cc <HAL_DMA_IRQHandler+0xca4>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d00e      	beq.n	800733a <HAL_DMA_IRQHandler+0xb12>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a6b      	ldr	r2, [pc, #428]	; (80074d0 <HAL_DMA_IRQHandler+0xca8>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d009      	beq.n	800733a <HAL_DMA_IRQHandler+0xb12>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a6a      	ldr	r2, [pc, #424]	; (80074d4 <HAL_DMA_IRQHandler+0xcac>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d004      	beq.n	800733a <HAL_DMA_IRQHandler+0xb12>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a68      	ldr	r2, [pc, #416]	; (80074d8 <HAL_DMA_IRQHandler+0xcb0>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d108      	bne.n	800734c <HAL_DMA_IRQHandler+0xb24>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	681a      	ldr	r2, [r3, #0]
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f022 0208 	bic.w	r2, r2, #8
 8007348:	601a      	str	r2, [r3, #0]
 800734a:	e007      	b.n	800735c <HAL_DMA_IRQHandler+0xb34>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	681a      	ldr	r2, [r3, #0]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f022 0204 	bic.w	r2, r2, #4
 800735a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007360:	2b00      	cmp	r3, #0
 8007362:	f000 8165 	beq.w	8007630 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800736e:	e15f      	b.n	8007630 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007374:	f003 031f 	and.w	r3, r3, #31
 8007378:	2202      	movs	r2, #2
 800737a:	409a      	lsls	r2, r3
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	4013      	ands	r3, r2
 8007380:	2b00      	cmp	r3, #0
 8007382:	f000 80c5 	beq.w	8007510 <HAL_DMA_IRQHandler+0xce8>
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	f003 0302 	and.w	r3, r3, #2
 800738c:	2b00      	cmp	r3, #0
 800738e:	f000 80bf 	beq.w	8007510 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007396:	f003 031f 	and.w	r3, r3, #31
 800739a:	2202      	movs	r2, #2
 800739c:	409a      	lsls	r2, r3
 800739e:	69fb      	ldr	r3, [r7, #28]
 80073a0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d018      	beq.n	80073de <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d109      	bne.n	80073ca <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	f000 813a 	beq.w	8007634 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80073c8:	e134      	b.n	8007634 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	f000 8130 	beq.w	8007634 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80073dc:	e12a      	b.n	8007634 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	f003 0320 	and.w	r3, r3, #32
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	f040 8089 	bne.w	80074fc <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a2b      	ldr	r2, [pc, #172]	; (800749c <HAL_DMA_IRQHandler+0xc74>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d04a      	beq.n	800748a <HAL_DMA_IRQHandler+0xc62>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a29      	ldr	r2, [pc, #164]	; (80074a0 <HAL_DMA_IRQHandler+0xc78>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d045      	beq.n	800748a <HAL_DMA_IRQHandler+0xc62>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a28      	ldr	r2, [pc, #160]	; (80074a4 <HAL_DMA_IRQHandler+0xc7c>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d040      	beq.n	800748a <HAL_DMA_IRQHandler+0xc62>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a26      	ldr	r2, [pc, #152]	; (80074a8 <HAL_DMA_IRQHandler+0xc80>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d03b      	beq.n	800748a <HAL_DMA_IRQHandler+0xc62>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a25      	ldr	r2, [pc, #148]	; (80074ac <HAL_DMA_IRQHandler+0xc84>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d036      	beq.n	800748a <HAL_DMA_IRQHandler+0xc62>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a23      	ldr	r2, [pc, #140]	; (80074b0 <HAL_DMA_IRQHandler+0xc88>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d031      	beq.n	800748a <HAL_DMA_IRQHandler+0xc62>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a22      	ldr	r2, [pc, #136]	; (80074b4 <HAL_DMA_IRQHandler+0xc8c>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d02c      	beq.n	800748a <HAL_DMA_IRQHandler+0xc62>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a20      	ldr	r2, [pc, #128]	; (80074b8 <HAL_DMA_IRQHandler+0xc90>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d027      	beq.n	800748a <HAL_DMA_IRQHandler+0xc62>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a1f      	ldr	r2, [pc, #124]	; (80074bc <HAL_DMA_IRQHandler+0xc94>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d022      	beq.n	800748a <HAL_DMA_IRQHandler+0xc62>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a1d      	ldr	r2, [pc, #116]	; (80074c0 <HAL_DMA_IRQHandler+0xc98>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d01d      	beq.n	800748a <HAL_DMA_IRQHandler+0xc62>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a1c      	ldr	r2, [pc, #112]	; (80074c4 <HAL_DMA_IRQHandler+0xc9c>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d018      	beq.n	800748a <HAL_DMA_IRQHandler+0xc62>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a1a      	ldr	r2, [pc, #104]	; (80074c8 <HAL_DMA_IRQHandler+0xca0>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d013      	beq.n	800748a <HAL_DMA_IRQHandler+0xc62>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a19      	ldr	r2, [pc, #100]	; (80074cc <HAL_DMA_IRQHandler+0xca4>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d00e      	beq.n	800748a <HAL_DMA_IRQHandler+0xc62>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a17      	ldr	r2, [pc, #92]	; (80074d0 <HAL_DMA_IRQHandler+0xca8>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d009      	beq.n	800748a <HAL_DMA_IRQHandler+0xc62>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a16      	ldr	r2, [pc, #88]	; (80074d4 <HAL_DMA_IRQHandler+0xcac>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d004      	beq.n	800748a <HAL_DMA_IRQHandler+0xc62>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a14      	ldr	r2, [pc, #80]	; (80074d8 <HAL_DMA_IRQHandler+0xcb0>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d128      	bne.n	80074dc <HAL_DMA_IRQHandler+0xcb4>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f022 0214 	bic.w	r2, r2, #20
 8007498:	601a      	str	r2, [r3, #0]
 800749a:	e027      	b.n	80074ec <HAL_DMA_IRQHandler+0xcc4>
 800749c:	40020010 	.word	0x40020010
 80074a0:	40020028 	.word	0x40020028
 80074a4:	40020040 	.word	0x40020040
 80074a8:	40020058 	.word	0x40020058
 80074ac:	40020070 	.word	0x40020070
 80074b0:	40020088 	.word	0x40020088
 80074b4:	400200a0 	.word	0x400200a0
 80074b8:	400200b8 	.word	0x400200b8
 80074bc:	40020410 	.word	0x40020410
 80074c0:	40020428 	.word	0x40020428
 80074c4:	40020440 	.word	0x40020440
 80074c8:	40020458 	.word	0x40020458
 80074cc:	40020470 	.word	0x40020470
 80074d0:	40020488 	.word	0x40020488
 80074d4:	400204a0 	.word	0x400204a0
 80074d8:	400204b8 	.word	0x400204b8
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	681a      	ldr	r2, [r3, #0]
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f022 020a 	bic.w	r2, r2, #10
 80074ea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2201      	movs	r2, #1
 80074f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2200      	movs	r2, #0
 80074f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007500:	2b00      	cmp	r3, #0
 8007502:	f000 8097 	beq.w	8007634 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800750e:	e091      	b.n	8007634 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007514:	f003 031f 	and.w	r3, r3, #31
 8007518:	2208      	movs	r2, #8
 800751a:	409a      	lsls	r2, r3
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	4013      	ands	r3, r2
 8007520:	2b00      	cmp	r3, #0
 8007522:	f000 8088 	beq.w	8007636 <HAL_DMA_IRQHandler+0xe0e>
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	f003 0308 	and.w	r3, r3, #8
 800752c:	2b00      	cmp	r3, #0
 800752e:	f000 8082 	beq.w	8007636 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a41      	ldr	r2, [pc, #260]	; (800763c <HAL_DMA_IRQHandler+0xe14>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d04a      	beq.n	80075d2 <HAL_DMA_IRQHandler+0xdaa>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a3f      	ldr	r2, [pc, #252]	; (8007640 <HAL_DMA_IRQHandler+0xe18>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d045      	beq.n	80075d2 <HAL_DMA_IRQHandler+0xdaa>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a3e      	ldr	r2, [pc, #248]	; (8007644 <HAL_DMA_IRQHandler+0xe1c>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d040      	beq.n	80075d2 <HAL_DMA_IRQHandler+0xdaa>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a3c      	ldr	r2, [pc, #240]	; (8007648 <HAL_DMA_IRQHandler+0xe20>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d03b      	beq.n	80075d2 <HAL_DMA_IRQHandler+0xdaa>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a3b      	ldr	r2, [pc, #236]	; (800764c <HAL_DMA_IRQHandler+0xe24>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d036      	beq.n	80075d2 <HAL_DMA_IRQHandler+0xdaa>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a39      	ldr	r2, [pc, #228]	; (8007650 <HAL_DMA_IRQHandler+0xe28>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d031      	beq.n	80075d2 <HAL_DMA_IRQHandler+0xdaa>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a38      	ldr	r2, [pc, #224]	; (8007654 <HAL_DMA_IRQHandler+0xe2c>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d02c      	beq.n	80075d2 <HAL_DMA_IRQHandler+0xdaa>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a36      	ldr	r2, [pc, #216]	; (8007658 <HAL_DMA_IRQHandler+0xe30>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d027      	beq.n	80075d2 <HAL_DMA_IRQHandler+0xdaa>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a35      	ldr	r2, [pc, #212]	; (800765c <HAL_DMA_IRQHandler+0xe34>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d022      	beq.n	80075d2 <HAL_DMA_IRQHandler+0xdaa>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a33      	ldr	r2, [pc, #204]	; (8007660 <HAL_DMA_IRQHandler+0xe38>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d01d      	beq.n	80075d2 <HAL_DMA_IRQHandler+0xdaa>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a32      	ldr	r2, [pc, #200]	; (8007664 <HAL_DMA_IRQHandler+0xe3c>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d018      	beq.n	80075d2 <HAL_DMA_IRQHandler+0xdaa>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a30      	ldr	r2, [pc, #192]	; (8007668 <HAL_DMA_IRQHandler+0xe40>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d013      	beq.n	80075d2 <HAL_DMA_IRQHandler+0xdaa>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a2f      	ldr	r2, [pc, #188]	; (800766c <HAL_DMA_IRQHandler+0xe44>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d00e      	beq.n	80075d2 <HAL_DMA_IRQHandler+0xdaa>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a2d      	ldr	r2, [pc, #180]	; (8007670 <HAL_DMA_IRQHandler+0xe48>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d009      	beq.n	80075d2 <HAL_DMA_IRQHandler+0xdaa>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a2c      	ldr	r2, [pc, #176]	; (8007674 <HAL_DMA_IRQHandler+0xe4c>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d004      	beq.n	80075d2 <HAL_DMA_IRQHandler+0xdaa>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a2a      	ldr	r2, [pc, #168]	; (8007678 <HAL_DMA_IRQHandler+0xe50>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d108      	bne.n	80075e4 <HAL_DMA_IRQHandler+0xdbc>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	681a      	ldr	r2, [r3, #0]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f022 021c 	bic.w	r2, r2, #28
 80075e0:	601a      	str	r2, [r3, #0]
 80075e2:	e007      	b.n	80075f4 <HAL_DMA_IRQHandler+0xdcc>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	681a      	ldr	r2, [r3, #0]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f022 020e 	bic.w	r2, r2, #14
 80075f2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075f8:	f003 031f 	and.w	r3, r3, #31
 80075fc:	2201      	movs	r2, #1
 80075fe:	409a      	lsls	r2, r3
 8007600:	69fb      	ldr	r3, [r7, #28]
 8007602:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2201      	movs	r2, #1
 8007608:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2201      	movs	r2, #1
 800760e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2200      	movs	r2, #0
 8007616:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800761e:	2b00      	cmp	r3, #0
 8007620:	d009      	beq.n	8007636 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	4798      	blx	r3
 800762a:	e004      	b.n	8007636 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800762c:	bf00      	nop
 800762e:	e002      	b.n	8007636 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007630:	bf00      	nop
 8007632:	e000      	b.n	8007636 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007634:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007636:	3728      	adds	r7, #40	; 0x28
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}
 800763c:	40020010 	.word	0x40020010
 8007640:	40020028 	.word	0x40020028
 8007644:	40020040 	.word	0x40020040
 8007648:	40020058 	.word	0x40020058
 800764c:	40020070 	.word	0x40020070
 8007650:	40020088 	.word	0x40020088
 8007654:	400200a0 	.word	0x400200a0
 8007658:	400200b8 	.word	0x400200b8
 800765c:	40020410 	.word	0x40020410
 8007660:	40020428 	.word	0x40020428
 8007664:	40020440 	.word	0x40020440
 8007668:	40020458 	.word	0x40020458
 800766c:	40020470 	.word	0x40020470
 8007670:	40020488 	.word	0x40020488
 8007674:	400204a0 	.word	0x400204a0
 8007678:	400204b8 	.word	0x400204b8

0800767c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800767c:	b480      	push	{r7}
 800767e:	b087      	sub	sp, #28
 8007680:	af00      	add	r7, sp, #0
 8007682:	60f8      	str	r0, [r7, #12]
 8007684:	60b9      	str	r1, [r7, #8]
 8007686:	607a      	str	r2, [r7, #4]
 8007688:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800768e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007694:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a7f      	ldr	r2, [pc, #508]	; (8007898 <DMA_SetConfig+0x21c>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d072      	beq.n	8007786 <DMA_SetConfig+0x10a>
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4a7d      	ldr	r2, [pc, #500]	; (800789c <DMA_SetConfig+0x220>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d06d      	beq.n	8007786 <DMA_SetConfig+0x10a>
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a7c      	ldr	r2, [pc, #496]	; (80078a0 <DMA_SetConfig+0x224>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d068      	beq.n	8007786 <DMA_SetConfig+0x10a>
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a7a      	ldr	r2, [pc, #488]	; (80078a4 <DMA_SetConfig+0x228>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d063      	beq.n	8007786 <DMA_SetConfig+0x10a>
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a79      	ldr	r2, [pc, #484]	; (80078a8 <DMA_SetConfig+0x22c>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d05e      	beq.n	8007786 <DMA_SetConfig+0x10a>
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a77      	ldr	r2, [pc, #476]	; (80078ac <DMA_SetConfig+0x230>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d059      	beq.n	8007786 <DMA_SetConfig+0x10a>
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a76      	ldr	r2, [pc, #472]	; (80078b0 <DMA_SetConfig+0x234>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d054      	beq.n	8007786 <DMA_SetConfig+0x10a>
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a74      	ldr	r2, [pc, #464]	; (80078b4 <DMA_SetConfig+0x238>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d04f      	beq.n	8007786 <DMA_SetConfig+0x10a>
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4a73      	ldr	r2, [pc, #460]	; (80078b8 <DMA_SetConfig+0x23c>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d04a      	beq.n	8007786 <DMA_SetConfig+0x10a>
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a71      	ldr	r2, [pc, #452]	; (80078bc <DMA_SetConfig+0x240>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d045      	beq.n	8007786 <DMA_SetConfig+0x10a>
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a70      	ldr	r2, [pc, #448]	; (80078c0 <DMA_SetConfig+0x244>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d040      	beq.n	8007786 <DMA_SetConfig+0x10a>
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a6e      	ldr	r2, [pc, #440]	; (80078c4 <DMA_SetConfig+0x248>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d03b      	beq.n	8007786 <DMA_SetConfig+0x10a>
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a6d      	ldr	r2, [pc, #436]	; (80078c8 <DMA_SetConfig+0x24c>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d036      	beq.n	8007786 <DMA_SetConfig+0x10a>
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a6b      	ldr	r2, [pc, #428]	; (80078cc <DMA_SetConfig+0x250>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d031      	beq.n	8007786 <DMA_SetConfig+0x10a>
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a6a      	ldr	r2, [pc, #424]	; (80078d0 <DMA_SetConfig+0x254>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d02c      	beq.n	8007786 <DMA_SetConfig+0x10a>
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a68      	ldr	r2, [pc, #416]	; (80078d4 <DMA_SetConfig+0x258>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d027      	beq.n	8007786 <DMA_SetConfig+0x10a>
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4a67      	ldr	r2, [pc, #412]	; (80078d8 <DMA_SetConfig+0x25c>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d022      	beq.n	8007786 <DMA_SetConfig+0x10a>
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a65      	ldr	r2, [pc, #404]	; (80078dc <DMA_SetConfig+0x260>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d01d      	beq.n	8007786 <DMA_SetConfig+0x10a>
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a64      	ldr	r2, [pc, #400]	; (80078e0 <DMA_SetConfig+0x264>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d018      	beq.n	8007786 <DMA_SetConfig+0x10a>
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a62      	ldr	r2, [pc, #392]	; (80078e4 <DMA_SetConfig+0x268>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d013      	beq.n	8007786 <DMA_SetConfig+0x10a>
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a61      	ldr	r2, [pc, #388]	; (80078e8 <DMA_SetConfig+0x26c>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d00e      	beq.n	8007786 <DMA_SetConfig+0x10a>
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a5f      	ldr	r2, [pc, #380]	; (80078ec <DMA_SetConfig+0x270>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d009      	beq.n	8007786 <DMA_SetConfig+0x10a>
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4a5e      	ldr	r2, [pc, #376]	; (80078f0 <DMA_SetConfig+0x274>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d004      	beq.n	8007786 <DMA_SetConfig+0x10a>
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a5c      	ldr	r2, [pc, #368]	; (80078f4 <DMA_SetConfig+0x278>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d101      	bne.n	800778a <DMA_SetConfig+0x10e>
 8007786:	2301      	movs	r3, #1
 8007788:	e000      	b.n	800778c <DMA_SetConfig+0x110>
 800778a:	2300      	movs	r3, #0
 800778c:	2b00      	cmp	r3, #0
 800778e:	d00d      	beq.n	80077ac <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007794:	68fa      	ldr	r2, [r7, #12]
 8007796:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007798:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d004      	beq.n	80077ac <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077a6:	68fa      	ldr	r2, [r7, #12]
 80077a8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80077aa:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a39      	ldr	r2, [pc, #228]	; (8007898 <DMA_SetConfig+0x21c>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d04a      	beq.n	800784c <DMA_SetConfig+0x1d0>
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a38      	ldr	r2, [pc, #224]	; (800789c <DMA_SetConfig+0x220>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d045      	beq.n	800784c <DMA_SetConfig+0x1d0>
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a36      	ldr	r2, [pc, #216]	; (80078a0 <DMA_SetConfig+0x224>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d040      	beq.n	800784c <DMA_SetConfig+0x1d0>
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a35      	ldr	r2, [pc, #212]	; (80078a4 <DMA_SetConfig+0x228>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d03b      	beq.n	800784c <DMA_SetConfig+0x1d0>
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a33      	ldr	r2, [pc, #204]	; (80078a8 <DMA_SetConfig+0x22c>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d036      	beq.n	800784c <DMA_SetConfig+0x1d0>
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4a32      	ldr	r2, [pc, #200]	; (80078ac <DMA_SetConfig+0x230>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d031      	beq.n	800784c <DMA_SetConfig+0x1d0>
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4a30      	ldr	r2, [pc, #192]	; (80078b0 <DMA_SetConfig+0x234>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d02c      	beq.n	800784c <DMA_SetConfig+0x1d0>
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4a2f      	ldr	r2, [pc, #188]	; (80078b4 <DMA_SetConfig+0x238>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d027      	beq.n	800784c <DMA_SetConfig+0x1d0>
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4a2d      	ldr	r2, [pc, #180]	; (80078b8 <DMA_SetConfig+0x23c>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d022      	beq.n	800784c <DMA_SetConfig+0x1d0>
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4a2c      	ldr	r2, [pc, #176]	; (80078bc <DMA_SetConfig+0x240>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d01d      	beq.n	800784c <DMA_SetConfig+0x1d0>
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4a2a      	ldr	r2, [pc, #168]	; (80078c0 <DMA_SetConfig+0x244>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d018      	beq.n	800784c <DMA_SetConfig+0x1d0>
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a29      	ldr	r2, [pc, #164]	; (80078c4 <DMA_SetConfig+0x248>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d013      	beq.n	800784c <DMA_SetConfig+0x1d0>
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4a27      	ldr	r2, [pc, #156]	; (80078c8 <DMA_SetConfig+0x24c>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d00e      	beq.n	800784c <DMA_SetConfig+0x1d0>
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a26      	ldr	r2, [pc, #152]	; (80078cc <DMA_SetConfig+0x250>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d009      	beq.n	800784c <DMA_SetConfig+0x1d0>
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a24      	ldr	r2, [pc, #144]	; (80078d0 <DMA_SetConfig+0x254>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d004      	beq.n	800784c <DMA_SetConfig+0x1d0>
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a23      	ldr	r2, [pc, #140]	; (80078d4 <DMA_SetConfig+0x258>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d101      	bne.n	8007850 <DMA_SetConfig+0x1d4>
 800784c:	2301      	movs	r3, #1
 800784e:	e000      	b.n	8007852 <DMA_SetConfig+0x1d6>
 8007850:	2300      	movs	r3, #0
 8007852:	2b00      	cmp	r3, #0
 8007854:	d059      	beq.n	800790a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800785a:	f003 031f 	and.w	r3, r3, #31
 800785e:	223f      	movs	r2, #63	; 0x3f
 8007860:	409a      	lsls	r2, r3
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	681a      	ldr	r2, [r3, #0]
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007874:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	683a      	ldr	r2, [r7, #0]
 800787c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	689b      	ldr	r3, [r3, #8]
 8007882:	2b40      	cmp	r3, #64	; 0x40
 8007884:	d138      	bne.n	80078f8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	687a      	ldr	r2, [r7, #4]
 800788c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	68ba      	ldr	r2, [r7, #8]
 8007894:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007896:	e086      	b.n	80079a6 <DMA_SetConfig+0x32a>
 8007898:	40020010 	.word	0x40020010
 800789c:	40020028 	.word	0x40020028
 80078a0:	40020040 	.word	0x40020040
 80078a4:	40020058 	.word	0x40020058
 80078a8:	40020070 	.word	0x40020070
 80078ac:	40020088 	.word	0x40020088
 80078b0:	400200a0 	.word	0x400200a0
 80078b4:	400200b8 	.word	0x400200b8
 80078b8:	40020410 	.word	0x40020410
 80078bc:	40020428 	.word	0x40020428
 80078c0:	40020440 	.word	0x40020440
 80078c4:	40020458 	.word	0x40020458
 80078c8:	40020470 	.word	0x40020470
 80078cc:	40020488 	.word	0x40020488
 80078d0:	400204a0 	.word	0x400204a0
 80078d4:	400204b8 	.word	0x400204b8
 80078d8:	58025408 	.word	0x58025408
 80078dc:	5802541c 	.word	0x5802541c
 80078e0:	58025430 	.word	0x58025430
 80078e4:	58025444 	.word	0x58025444
 80078e8:	58025458 	.word	0x58025458
 80078ec:	5802546c 	.word	0x5802546c
 80078f0:	58025480 	.word	0x58025480
 80078f4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	68ba      	ldr	r2, [r7, #8]
 80078fe:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	687a      	ldr	r2, [r7, #4]
 8007906:	60da      	str	r2, [r3, #12]
}
 8007908:	e04d      	b.n	80079a6 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a29      	ldr	r2, [pc, #164]	; (80079b4 <DMA_SetConfig+0x338>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d022      	beq.n	800795a <DMA_SetConfig+0x2de>
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a27      	ldr	r2, [pc, #156]	; (80079b8 <DMA_SetConfig+0x33c>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d01d      	beq.n	800795a <DMA_SetConfig+0x2de>
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a26      	ldr	r2, [pc, #152]	; (80079bc <DMA_SetConfig+0x340>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d018      	beq.n	800795a <DMA_SetConfig+0x2de>
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a24      	ldr	r2, [pc, #144]	; (80079c0 <DMA_SetConfig+0x344>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d013      	beq.n	800795a <DMA_SetConfig+0x2de>
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4a23      	ldr	r2, [pc, #140]	; (80079c4 <DMA_SetConfig+0x348>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d00e      	beq.n	800795a <DMA_SetConfig+0x2de>
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a21      	ldr	r2, [pc, #132]	; (80079c8 <DMA_SetConfig+0x34c>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d009      	beq.n	800795a <DMA_SetConfig+0x2de>
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a20      	ldr	r2, [pc, #128]	; (80079cc <DMA_SetConfig+0x350>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d004      	beq.n	800795a <DMA_SetConfig+0x2de>
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a1e      	ldr	r2, [pc, #120]	; (80079d0 <DMA_SetConfig+0x354>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d101      	bne.n	800795e <DMA_SetConfig+0x2e2>
 800795a:	2301      	movs	r3, #1
 800795c:	e000      	b.n	8007960 <DMA_SetConfig+0x2e4>
 800795e:	2300      	movs	r3, #0
 8007960:	2b00      	cmp	r3, #0
 8007962:	d020      	beq.n	80079a6 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007968:	f003 031f 	and.w	r3, r3, #31
 800796c:	2201      	movs	r2, #1
 800796e:	409a      	lsls	r2, r3
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	683a      	ldr	r2, [r7, #0]
 800797a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	689b      	ldr	r3, [r3, #8]
 8007980:	2b40      	cmp	r3, #64	; 0x40
 8007982:	d108      	bne.n	8007996 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	687a      	ldr	r2, [r7, #4]
 800798a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	68ba      	ldr	r2, [r7, #8]
 8007992:	60da      	str	r2, [r3, #12]
}
 8007994:	e007      	b.n	80079a6 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	68ba      	ldr	r2, [r7, #8]
 800799c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	687a      	ldr	r2, [r7, #4]
 80079a4:	60da      	str	r2, [r3, #12]
}
 80079a6:	bf00      	nop
 80079a8:	371c      	adds	r7, #28
 80079aa:	46bd      	mov	sp, r7
 80079ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b0:	4770      	bx	lr
 80079b2:	bf00      	nop
 80079b4:	58025408 	.word	0x58025408
 80079b8:	5802541c 	.word	0x5802541c
 80079bc:	58025430 	.word	0x58025430
 80079c0:	58025444 	.word	0x58025444
 80079c4:	58025458 	.word	0x58025458
 80079c8:	5802546c 	.word	0x5802546c
 80079cc:	58025480 	.word	0x58025480
 80079d0:	58025494 	.word	0x58025494

080079d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b085      	sub	sp, #20
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a42      	ldr	r2, [pc, #264]	; (8007aec <DMA_CalcBaseAndBitshift+0x118>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d04a      	beq.n	8007a7c <DMA_CalcBaseAndBitshift+0xa8>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a41      	ldr	r2, [pc, #260]	; (8007af0 <DMA_CalcBaseAndBitshift+0x11c>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d045      	beq.n	8007a7c <DMA_CalcBaseAndBitshift+0xa8>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a3f      	ldr	r2, [pc, #252]	; (8007af4 <DMA_CalcBaseAndBitshift+0x120>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d040      	beq.n	8007a7c <DMA_CalcBaseAndBitshift+0xa8>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a3e      	ldr	r2, [pc, #248]	; (8007af8 <DMA_CalcBaseAndBitshift+0x124>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d03b      	beq.n	8007a7c <DMA_CalcBaseAndBitshift+0xa8>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a3c      	ldr	r2, [pc, #240]	; (8007afc <DMA_CalcBaseAndBitshift+0x128>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d036      	beq.n	8007a7c <DMA_CalcBaseAndBitshift+0xa8>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a3b      	ldr	r2, [pc, #236]	; (8007b00 <DMA_CalcBaseAndBitshift+0x12c>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d031      	beq.n	8007a7c <DMA_CalcBaseAndBitshift+0xa8>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a39      	ldr	r2, [pc, #228]	; (8007b04 <DMA_CalcBaseAndBitshift+0x130>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d02c      	beq.n	8007a7c <DMA_CalcBaseAndBitshift+0xa8>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a38      	ldr	r2, [pc, #224]	; (8007b08 <DMA_CalcBaseAndBitshift+0x134>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d027      	beq.n	8007a7c <DMA_CalcBaseAndBitshift+0xa8>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a36      	ldr	r2, [pc, #216]	; (8007b0c <DMA_CalcBaseAndBitshift+0x138>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d022      	beq.n	8007a7c <DMA_CalcBaseAndBitshift+0xa8>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a35      	ldr	r2, [pc, #212]	; (8007b10 <DMA_CalcBaseAndBitshift+0x13c>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d01d      	beq.n	8007a7c <DMA_CalcBaseAndBitshift+0xa8>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4a33      	ldr	r2, [pc, #204]	; (8007b14 <DMA_CalcBaseAndBitshift+0x140>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d018      	beq.n	8007a7c <DMA_CalcBaseAndBitshift+0xa8>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4a32      	ldr	r2, [pc, #200]	; (8007b18 <DMA_CalcBaseAndBitshift+0x144>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d013      	beq.n	8007a7c <DMA_CalcBaseAndBitshift+0xa8>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4a30      	ldr	r2, [pc, #192]	; (8007b1c <DMA_CalcBaseAndBitshift+0x148>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d00e      	beq.n	8007a7c <DMA_CalcBaseAndBitshift+0xa8>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4a2f      	ldr	r2, [pc, #188]	; (8007b20 <DMA_CalcBaseAndBitshift+0x14c>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d009      	beq.n	8007a7c <DMA_CalcBaseAndBitshift+0xa8>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4a2d      	ldr	r2, [pc, #180]	; (8007b24 <DMA_CalcBaseAndBitshift+0x150>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d004      	beq.n	8007a7c <DMA_CalcBaseAndBitshift+0xa8>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4a2c      	ldr	r2, [pc, #176]	; (8007b28 <DMA_CalcBaseAndBitshift+0x154>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d101      	bne.n	8007a80 <DMA_CalcBaseAndBitshift+0xac>
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	e000      	b.n	8007a82 <DMA_CalcBaseAndBitshift+0xae>
 8007a80:	2300      	movs	r3, #0
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d024      	beq.n	8007ad0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	b2db      	uxtb	r3, r3
 8007a8c:	3b10      	subs	r3, #16
 8007a8e:	4a27      	ldr	r2, [pc, #156]	; (8007b2c <DMA_CalcBaseAndBitshift+0x158>)
 8007a90:	fba2 2303 	umull	r2, r3, r2, r3
 8007a94:	091b      	lsrs	r3, r3, #4
 8007a96:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	f003 0307 	and.w	r3, r3, #7
 8007a9e:	4a24      	ldr	r2, [pc, #144]	; (8007b30 <DMA_CalcBaseAndBitshift+0x15c>)
 8007aa0:	5cd3      	ldrb	r3, [r2, r3]
 8007aa2:	461a      	mov	r2, r3
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2b03      	cmp	r3, #3
 8007aac:	d908      	bls.n	8007ac0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	461a      	mov	r2, r3
 8007ab4:	4b1f      	ldr	r3, [pc, #124]	; (8007b34 <DMA_CalcBaseAndBitshift+0x160>)
 8007ab6:	4013      	ands	r3, r2
 8007ab8:	1d1a      	adds	r2, r3, #4
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	659a      	str	r2, [r3, #88]	; 0x58
 8007abe:	e00d      	b.n	8007adc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	461a      	mov	r2, r3
 8007ac6:	4b1b      	ldr	r3, [pc, #108]	; (8007b34 <DMA_CalcBaseAndBitshift+0x160>)
 8007ac8:	4013      	ands	r3, r2
 8007aca:	687a      	ldr	r2, [r7, #4]
 8007acc:	6593      	str	r3, [r2, #88]	; 0x58
 8007ace:	e005      	b.n	8007adc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	3714      	adds	r7, #20
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aea:	4770      	bx	lr
 8007aec:	40020010 	.word	0x40020010
 8007af0:	40020028 	.word	0x40020028
 8007af4:	40020040 	.word	0x40020040
 8007af8:	40020058 	.word	0x40020058
 8007afc:	40020070 	.word	0x40020070
 8007b00:	40020088 	.word	0x40020088
 8007b04:	400200a0 	.word	0x400200a0
 8007b08:	400200b8 	.word	0x400200b8
 8007b0c:	40020410 	.word	0x40020410
 8007b10:	40020428 	.word	0x40020428
 8007b14:	40020440 	.word	0x40020440
 8007b18:	40020458 	.word	0x40020458
 8007b1c:	40020470 	.word	0x40020470
 8007b20:	40020488 	.word	0x40020488
 8007b24:	400204a0 	.word	0x400204a0
 8007b28:	400204b8 	.word	0x400204b8
 8007b2c:	aaaaaaab 	.word	0xaaaaaaab
 8007b30:	080154e4 	.word	0x080154e4
 8007b34:	fffffc00 	.word	0xfffffc00

08007b38 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b085      	sub	sp, #20
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b40:	2300      	movs	r3, #0
 8007b42:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	699b      	ldr	r3, [r3, #24]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d120      	bne.n	8007b8e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b50:	2b03      	cmp	r3, #3
 8007b52:	d858      	bhi.n	8007c06 <DMA_CheckFifoParam+0xce>
 8007b54:	a201      	add	r2, pc, #4	; (adr r2, 8007b5c <DMA_CheckFifoParam+0x24>)
 8007b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b5a:	bf00      	nop
 8007b5c:	08007b6d 	.word	0x08007b6d
 8007b60:	08007b7f 	.word	0x08007b7f
 8007b64:	08007b6d 	.word	0x08007b6d
 8007b68:	08007c07 	.word	0x08007c07
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d048      	beq.n	8007c0a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007b78:	2301      	movs	r3, #1
 8007b7a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007b7c:	e045      	b.n	8007c0a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b82:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007b86:	d142      	bne.n	8007c0e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007b88:	2301      	movs	r3, #1
 8007b8a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007b8c:	e03f      	b.n	8007c0e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	699b      	ldr	r3, [r3, #24]
 8007b92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b96:	d123      	bne.n	8007be0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b9c:	2b03      	cmp	r3, #3
 8007b9e:	d838      	bhi.n	8007c12 <DMA_CheckFifoParam+0xda>
 8007ba0:	a201      	add	r2, pc, #4	; (adr r2, 8007ba8 <DMA_CheckFifoParam+0x70>)
 8007ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ba6:	bf00      	nop
 8007ba8:	08007bb9 	.word	0x08007bb9
 8007bac:	08007bbf 	.word	0x08007bbf
 8007bb0:	08007bb9 	.word	0x08007bb9
 8007bb4:	08007bd1 	.word	0x08007bd1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007bb8:	2301      	movs	r3, #1
 8007bba:	73fb      	strb	r3, [r7, #15]
        break;
 8007bbc:	e030      	b.n	8007c20 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bc2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d025      	beq.n	8007c16 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007bca:	2301      	movs	r3, #1
 8007bcc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007bce:	e022      	b.n	8007c16 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bd4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007bd8:	d11f      	bne.n	8007c1a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007bda:	2301      	movs	r3, #1
 8007bdc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007bde:	e01c      	b.n	8007c1a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007be4:	2b02      	cmp	r3, #2
 8007be6:	d902      	bls.n	8007bee <DMA_CheckFifoParam+0xb6>
 8007be8:	2b03      	cmp	r3, #3
 8007bea:	d003      	beq.n	8007bf4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007bec:	e018      	b.n	8007c20 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	73fb      	strb	r3, [r7, #15]
        break;
 8007bf2:	e015      	b.n	8007c20 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bf8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d00e      	beq.n	8007c1e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007c00:	2301      	movs	r3, #1
 8007c02:	73fb      	strb	r3, [r7, #15]
    break;
 8007c04:	e00b      	b.n	8007c1e <DMA_CheckFifoParam+0xe6>
        break;
 8007c06:	bf00      	nop
 8007c08:	e00a      	b.n	8007c20 <DMA_CheckFifoParam+0xe8>
        break;
 8007c0a:	bf00      	nop
 8007c0c:	e008      	b.n	8007c20 <DMA_CheckFifoParam+0xe8>
        break;
 8007c0e:	bf00      	nop
 8007c10:	e006      	b.n	8007c20 <DMA_CheckFifoParam+0xe8>
        break;
 8007c12:	bf00      	nop
 8007c14:	e004      	b.n	8007c20 <DMA_CheckFifoParam+0xe8>
        break;
 8007c16:	bf00      	nop
 8007c18:	e002      	b.n	8007c20 <DMA_CheckFifoParam+0xe8>
        break;
 8007c1a:	bf00      	nop
 8007c1c:	e000      	b.n	8007c20 <DMA_CheckFifoParam+0xe8>
    break;
 8007c1e:	bf00      	nop
    }
  }

  return status;
 8007c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3714      	adds	r7, #20
 8007c26:	46bd      	mov	sp, r7
 8007c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2c:	4770      	bx	lr
 8007c2e:	bf00      	nop

08007c30 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b085      	sub	sp, #20
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	4a38      	ldr	r2, [pc, #224]	; (8007d24 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d022      	beq.n	8007c8e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a36      	ldr	r2, [pc, #216]	; (8007d28 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d01d      	beq.n	8007c8e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4a35      	ldr	r2, [pc, #212]	; (8007d2c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d018      	beq.n	8007c8e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a33      	ldr	r2, [pc, #204]	; (8007d30 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d013      	beq.n	8007c8e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a32      	ldr	r2, [pc, #200]	; (8007d34 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d00e      	beq.n	8007c8e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4a30      	ldr	r2, [pc, #192]	; (8007d38 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d009      	beq.n	8007c8e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4a2f      	ldr	r2, [pc, #188]	; (8007d3c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d004      	beq.n	8007c8e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4a2d      	ldr	r2, [pc, #180]	; (8007d40 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d101      	bne.n	8007c92 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007c8e:	2301      	movs	r3, #1
 8007c90:	e000      	b.n	8007c94 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007c92:	2300      	movs	r3, #0
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d01a      	beq.n	8007cce <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	b2db      	uxtb	r3, r3
 8007c9e:	3b08      	subs	r3, #8
 8007ca0:	4a28      	ldr	r2, [pc, #160]	; (8007d44 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ca6:	091b      	lsrs	r3, r3, #4
 8007ca8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007caa:	68fa      	ldr	r2, [r7, #12]
 8007cac:	4b26      	ldr	r3, [pc, #152]	; (8007d48 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007cae:	4413      	add	r3, r2
 8007cb0:	009b      	lsls	r3, r3, #2
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	4a24      	ldr	r2, [pc, #144]	; (8007d4c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007cbc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	f003 031f 	and.w	r3, r3, #31
 8007cc4:	2201      	movs	r2, #1
 8007cc6:	409a      	lsls	r2, r3
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007ccc:	e024      	b.n	8007d18 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	b2db      	uxtb	r3, r3
 8007cd4:	3b10      	subs	r3, #16
 8007cd6:	4a1e      	ldr	r2, [pc, #120]	; (8007d50 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8007cdc:	091b      	lsrs	r3, r3, #4
 8007cde:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	4a1c      	ldr	r2, [pc, #112]	; (8007d54 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d806      	bhi.n	8007cf6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	4a1b      	ldr	r2, [pc, #108]	; (8007d58 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d902      	bls.n	8007cf6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	3308      	adds	r3, #8
 8007cf4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007cf6:	68fa      	ldr	r2, [r7, #12]
 8007cf8:	4b18      	ldr	r3, [pc, #96]	; (8007d5c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007cfa:	4413      	add	r3, r2
 8007cfc:	009b      	lsls	r3, r3, #2
 8007cfe:	461a      	mov	r2, r3
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	4a16      	ldr	r2, [pc, #88]	; (8007d60 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007d08:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	f003 031f 	and.w	r3, r3, #31
 8007d10:	2201      	movs	r2, #1
 8007d12:	409a      	lsls	r2, r3
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007d18:	bf00      	nop
 8007d1a:	3714      	adds	r7, #20
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d22:	4770      	bx	lr
 8007d24:	58025408 	.word	0x58025408
 8007d28:	5802541c 	.word	0x5802541c
 8007d2c:	58025430 	.word	0x58025430
 8007d30:	58025444 	.word	0x58025444
 8007d34:	58025458 	.word	0x58025458
 8007d38:	5802546c 	.word	0x5802546c
 8007d3c:	58025480 	.word	0x58025480
 8007d40:	58025494 	.word	0x58025494
 8007d44:	cccccccd 	.word	0xcccccccd
 8007d48:	16009600 	.word	0x16009600
 8007d4c:	58025880 	.word	0x58025880
 8007d50:	aaaaaaab 	.word	0xaaaaaaab
 8007d54:	400204b8 	.word	0x400204b8
 8007d58:	4002040f 	.word	0x4002040f
 8007d5c:	10008200 	.word	0x10008200
 8007d60:	40020880 	.word	0x40020880

08007d64 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b085      	sub	sp, #20
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	b2db      	uxtb	r3, r3
 8007d72:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d04a      	beq.n	8007e10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	2b08      	cmp	r3, #8
 8007d7e:	d847      	bhi.n	8007e10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a25      	ldr	r2, [pc, #148]	; (8007e1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d022      	beq.n	8007dd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a24      	ldr	r2, [pc, #144]	; (8007e20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d01d      	beq.n	8007dd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4a22      	ldr	r2, [pc, #136]	; (8007e24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d018      	beq.n	8007dd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4a21      	ldr	r2, [pc, #132]	; (8007e28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d013      	beq.n	8007dd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a1f      	ldr	r2, [pc, #124]	; (8007e2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d00e      	beq.n	8007dd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	4a1e      	ldr	r2, [pc, #120]	; (8007e30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d009      	beq.n	8007dd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4a1c      	ldr	r2, [pc, #112]	; (8007e34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d004      	beq.n	8007dd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	4a1b      	ldr	r2, [pc, #108]	; (8007e38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d101      	bne.n	8007dd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	e000      	b.n	8007dd6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d00a      	beq.n	8007df0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007dda:	68fa      	ldr	r2, [r7, #12]
 8007ddc:	4b17      	ldr	r3, [pc, #92]	; (8007e3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007dde:	4413      	add	r3, r2
 8007de0:	009b      	lsls	r3, r3, #2
 8007de2:	461a      	mov	r2, r3
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	4a15      	ldr	r2, [pc, #84]	; (8007e40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007dec:	671a      	str	r2, [r3, #112]	; 0x70
 8007dee:	e009      	b.n	8007e04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007df0:	68fa      	ldr	r2, [r7, #12]
 8007df2:	4b14      	ldr	r3, [pc, #80]	; (8007e44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007df4:	4413      	add	r3, r2
 8007df6:	009b      	lsls	r3, r3, #2
 8007df8:	461a      	mov	r2, r3
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	4a11      	ldr	r2, [pc, #68]	; (8007e48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007e02:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	3b01      	subs	r3, #1
 8007e08:	2201      	movs	r2, #1
 8007e0a:	409a      	lsls	r2, r3
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007e10:	bf00      	nop
 8007e12:	3714      	adds	r7, #20
 8007e14:	46bd      	mov	sp, r7
 8007e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1a:	4770      	bx	lr
 8007e1c:	58025408 	.word	0x58025408
 8007e20:	5802541c 	.word	0x5802541c
 8007e24:	58025430 	.word	0x58025430
 8007e28:	58025444 	.word	0x58025444
 8007e2c:	58025458 	.word	0x58025458
 8007e30:	5802546c 	.word	0x5802546c
 8007e34:	58025480 	.word	0x58025480
 8007e38:	58025494 	.word	0x58025494
 8007e3c:	1600963f 	.word	0x1600963f
 8007e40:	58025940 	.word	0x58025940
 8007e44:	1000823f 	.word	0x1000823f
 8007e48:	40020940 	.word	0x40020940

08007e4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b089      	sub	sp, #36	; 0x24
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
 8007e54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007e56:	2300      	movs	r3, #0
 8007e58:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007e5a:	4b89      	ldr	r3, [pc, #548]	; (8008080 <HAL_GPIO_Init+0x234>)
 8007e5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007e5e:	e194      	b.n	800818a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	681a      	ldr	r2, [r3, #0]
 8007e64:	2101      	movs	r1, #1
 8007e66:	69fb      	ldr	r3, [r7, #28]
 8007e68:	fa01 f303 	lsl.w	r3, r1, r3
 8007e6c:	4013      	ands	r3, r2
 8007e6e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	f000 8186 	beq.w	8008184 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	685b      	ldr	r3, [r3, #4]
 8007e7c:	f003 0303 	and.w	r3, r3, #3
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	d005      	beq.n	8007e90 <HAL_GPIO_Init+0x44>
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	f003 0303 	and.w	r3, r3, #3
 8007e8c:	2b02      	cmp	r3, #2
 8007e8e:	d130      	bne.n	8007ef2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	689b      	ldr	r3, [r3, #8]
 8007e94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007e96:	69fb      	ldr	r3, [r7, #28]
 8007e98:	005b      	lsls	r3, r3, #1
 8007e9a:	2203      	movs	r2, #3
 8007e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8007ea0:	43db      	mvns	r3, r3
 8007ea2:	69ba      	ldr	r2, [r7, #24]
 8007ea4:	4013      	ands	r3, r2
 8007ea6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	68da      	ldr	r2, [r3, #12]
 8007eac:	69fb      	ldr	r3, [r7, #28]
 8007eae:	005b      	lsls	r3, r3, #1
 8007eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8007eb4:	69ba      	ldr	r2, [r7, #24]
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	69ba      	ldr	r2, [r7, #24]
 8007ebe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	685b      	ldr	r3, [r3, #4]
 8007ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	69fb      	ldr	r3, [r7, #28]
 8007eca:	fa02 f303 	lsl.w	r3, r2, r3
 8007ece:	43db      	mvns	r3, r3
 8007ed0:	69ba      	ldr	r2, [r7, #24]
 8007ed2:	4013      	ands	r3, r2
 8007ed4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	685b      	ldr	r3, [r3, #4]
 8007eda:	091b      	lsrs	r3, r3, #4
 8007edc:	f003 0201 	and.w	r2, r3, #1
 8007ee0:	69fb      	ldr	r3, [r7, #28]
 8007ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ee6:	69ba      	ldr	r2, [r7, #24]
 8007ee8:	4313      	orrs	r3, r2
 8007eea:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	69ba      	ldr	r2, [r7, #24]
 8007ef0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	f003 0303 	and.w	r3, r3, #3
 8007efa:	2b03      	cmp	r3, #3
 8007efc:	d017      	beq.n	8007f2e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	68db      	ldr	r3, [r3, #12]
 8007f02:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007f04:	69fb      	ldr	r3, [r7, #28]
 8007f06:	005b      	lsls	r3, r3, #1
 8007f08:	2203      	movs	r2, #3
 8007f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f0e:	43db      	mvns	r3, r3
 8007f10:	69ba      	ldr	r2, [r7, #24]
 8007f12:	4013      	ands	r3, r2
 8007f14:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	689a      	ldr	r2, [r3, #8]
 8007f1a:	69fb      	ldr	r3, [r7, #28]
 8007f1c:	005b      	lsls	r3, r3, #1
 8007f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8007f22:	69ba      	ldr	r2, [r7, #24]
 8007f24:	4313      	orrs	r3, r2
 8007f26:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	69ba      	ldr	r2, [r7, #24]
 8007f2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	685b      	ldr	r3, [r3, #4]
 8007f32:	f003 0303 	and.w	r3, r3, #3
 8007f36:	2b02      	cmp	r3, #2
 8007f38:	d123      	bne.n	8007f82 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007f3a:	69fb      	ldr	r3, [r7, #28]
 8007f3c:	08da      	lsrs	r2, r3, #3
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	3208      	adds	r2, #8
 8007f42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007f48:	69fb      	ldr	r3, [r7, #28]
 8007f4a:	f003 0307 	and.w	r3, r3, #7
 8007f4e:	009b      	lsls	r3, r3, #2
 8007f50:	220f      	movs	r2, #15
 8007f52:	fa02 f303 	lsl.w	r3, r2, r3
 8007f56:	43db      	mvns	r3, r3
 8007f58:	69ba      	ldr	r2, [r7, #24]
 8007f5a:	4013      	ands	r3, r2
 8007f5c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	691a      	ldr	r2, [r3, #16]
 8007f62:	69fb      	ldr	r3, [r7, #28]
 8007f64:	f003 0307 	and.w	r3, r3, #7
 8007f68:	009b      	lsls	r3, r3, #2
 8007f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f6e:	69ba      	ldr	r2, [r7, #24]
 8007f70:	4313      	orrs	r3, r2
 8007f72:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007f74:	69fb      	ldr	r3, [r7, #28]
 8007f76:	08da      	lsrs	r2, r3, #3
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	3208      	adds	r2, #8
 8007f7c:	69b9      	ldr	r1, [r7, #24]
 8007f7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007f88:	69fb      	ldr	r3, [r7, #28]
 8007f8a:	005b      	lsls	r3, r3, #1
 8007f8c:	2203      	movs	r2, #3
 8007f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8007f92:	43db      	mvns	r3, r3
 8007f94:	69ba      	ldr	r2, [r7, #24]
 8007f96:	4013      	ands	r3, r2
 8007f98:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	f003 0203 	and.w	r2, r3, #3
 8007fa2:	69fb      	ldr	r3, [r7, #28]
 8007fa4:	005b      	lsls	r3, r3, #1
 8007fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8007faa:	69ba      	ldr	r2, [r7, #24]
 8007fac:	4313      	orrs	r3, r2
 8007fae:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	69ba      	ldr	r2, [r7, #24]
 8007fb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	685b      	ldr	r3, [r3, #4]
 8007fba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	f000 80e0 	beq.w	8008184 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007fc4:	4b2f      	ldr	r3, [pc, #188]	; (8008084 <HAL_GPIO_Init+0x238>)
 8007fc6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007fca:	4a2e      	ldr	r2, [pc, #184]	; (8008084 <HAL_GPIO_Init+0x238>)
 8007fcc:	f043 0302 	orr.w	r3, r3, #2
 8007fd0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007fd4:	4b2b      	ldr	r3, [pc, #172]	; (8008084 <HAL_GPIO_Init+0x238>)
 8007fd6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007fda:	f003 0302 	and.w	r3, r3, #2
 8007fde:	60fb      	str	r3, [r7, #12]
 8007fe0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007fe2:	4a29      	ldr	r2, [pc, #164]	; (8008088 <HAL_GPIO_Init+0x23c>)
 8007fe4:	69fb      	ldr	r3, [r7, #28]
 8007fe6:	089b      	lsrs	r3, r3, #2
 8007fe8:	3302      	adds	r3, #2
 8007fea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007ff0:	69fb      	ldr	r3, [r7, #28]
 8007ff2:	f003 0303 	and.w	r3, r3, #3
 8007ff6:	009b      	lsls	r3, r3, #2
 8007ff8:	220f      	movs	r2, #15
 8007ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8007ffe:	43db      	mvns	r3, r3
 8008000:	69ba      	ldr	r2, [r7, #24]
 8008002:	4013      	ands	r3, r2
 8008004:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	4a20      	ldr	r2, [pc, #128]	; (800808c <HAL_GPIO_Init+0x240>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d052      	beq.n	80080b4 <HAL_GPIO_Init+0x268>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	4a1f      	ldr	r2, [pc, #124]	; (8008090 <HAL_GPIO_Init+0x244>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d031      	beq.n	800807a <HAL_GPIO_Init+0x22e>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	4a1e      	ldr	r2, [pc, #120]	; (8008094 <HAL_GPIO_Init+0x248>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d02b      	beq.n	8008076 <HAL_GPIO_Init+0x22a>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	4a1d      	ldr	r2, [pc, #116]	; (8008098 <HAL_GPIO_Init+0x24c>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d025      	beq.n	8008072 <HAL_GPIO_Init+0x226>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	4a1c      	ldr	r2, [pc, #112]	; (800809c <HAL_GPIO_Init+0x250>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d01f      	beq.n	800806e <HAL_GPIO_Init+0x222>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	4a1b      	ldr	r2, [pc, #108]	; (80080a0 <HAL_GPIO_Init+0x254>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d019      	beq.n	800806a <HAL_GPIO_Init+0x21e>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	4a1a      	ldr	r2, [pc, #104]	; (80080a4 <HAL_GPIO_Init+0x258>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d013      	beq.n	8008066 <HAL_GPIO_Init+0x21a>
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	4a19      	ldr	r2, [pc, #100]	; (80080a8 <HAL_GPIO_Init+0x25c>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d00d      	beq.n	8008062 <HAL_GPIO_Init+0x216>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	4a18      	ldr	r2, [pc, #96]	; (80080ac <HAL_GPIO_Init+0x260>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d007      	beq.n	800805e <HAL_GPIO_Init+0x212>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	4a17      	ldr	r2, [pc, #92]	; (80080b0 <HAL_GPIO_Init+0x264>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d101      	bne.n	800805a <HAL_GPIO_Init+0x20e>
 8008056:	2309      	movs	r3, #9
 8008058:	e02d      	b.n	80080b6 <HAL_GPIO_Init+0x26a>
 800805a:	230a      	movs	r3, #10
 800805c:	e02b      	b.n	80080b6 <HAL_GPIO_Init+0x26a>
 800805e:	2308      	movs	r3, #8
 8008060:	e029      	b.n	80080b6 <HAL_GPIO_Init+0x26a>
 8008062:	2307      	movs	r3, #7
 8008064:	e027      	b.n	80080b6 <HAL_GPIO_Init+0x26a>
 8008066:	2306      	movs	r3, #6
 8008068:	e025      	b.n	80080b6 <HAL_GPIO_Init+0x26a>
 800806a:	2305      	movs	r3, #5
 800806c:	e023      	b.n	80080b6 <HAL_GPIO_Init+0x26a>
 800806e:	2304      	movs	r3, #4
 8008070:	e021      	b.n	80080b6 <HAL_GPIO_Init+0x26a>
 8008072:	2303      	movs	r3, #3
 8008074:	e01f      	b.n	80080b6 <HAL_GPIO_Init+0x26a>
 8008076:	2302      	movs	r3, #2
 8008078:	e01d      	b.n	80080b6 <HAL_GPIO_Init+0x26a>
 800807a:	2301      	movs	r3, #1
 800807c:	e01b      	b.n	80080b6 <HAL_GPIO_Init+0x26a>
 800807e:	bf00      	nop
 8008080:	58000080 	.word	0x58000080
 8008084:	58024400 	.word	0x58024400
 8008088:	58000400 	.word	0x58000400
 800808c:	58020000 	.word	0x58020000
 8008090:	58020400 	.word	0x58020400
 8008094:	58020800 	.word	0x58020800
 8008098:	58020c00 	.word	0x58020c00
 800809c:	58021000 	.word	0x58021000
 80080a0:	58021400 	.word	0x58021400
 80080a4:	58021800 	.word	0x58021800
 80080a8:	58021c00 	.word	0x58021c00
 80080ac:	58022000 	.word	0x58022000
 80080b0:	58022400 	.word	0x58022400
 80080b4:	2300      	movs	r3, #0
 80080b6:	69fa      	ldr	r2, [r7, #28]
 80080b8:	f002 0203 	and.w	r2, r2, #3
 80080bc:	0092      	lsls	r2, r2, #2
 80080be:	4093      	lsls	r3, r2
 80080c0:	69ba      	ldr	r2, [r7, #24]
 80080c2:	4313      	orrs	r3, r2
 80080c4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80080c6:	4938      	ldr	r1, [pc, #224]	; (80081a8 <HAL_GPIO_Init+0x35c>)
 80080c8:	69fb      	ldr	r3, [r7, #28]
 80080ca:	089b      	lsrs	r3, r3, #2
 80080cc:	3302      	adds	r3, #2
 80080ce:	69ba      	ldr	r2, [r7, #24]
 80080d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80080d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	43db      	mvns	r3, r3
 80080e0:	69ba      	ldr	r2, [r7, #24]
 80080e2:	4013      	ands	r3, r2
 80080e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	685b      	ldr	r3, [r3, #4]
 80080ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d003      	beq.n	80080fa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80080f2:	69ba      	ldr	r2, [r7, #24]
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	4313      	orrs	r3, r2
 80080f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80080fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80080fe:	69bb      	ldr	r3, [r7, #24]
 8008100:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008102:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008106:	685b      	ldr	r3, [r3, #4]
 8008108:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	43db      	mvns	r3, r3
 800810e:	69ba      	ldr	r2, [r7, #24]
 8008110:	4013      	ands	r3, r2
 8008112:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	685b      	ldr	r3, [r3, #4]
 8008118:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800811c:	2b00      	cmp	r3, #0
 800811e:	d003      	beq.n	8008128 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008120:	69ba      	ldr	r2, [r7, #24]
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	4313      	orrs	r3, r2
 8008126:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008128:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800812c:	69bb      	ldr	r3, [r7, #24]
 800812e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008130:	697b      	ldr	r3, [r7, #20]
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	43db      	mvns	r3, r3
 800813a:	69ba      	ldr	r2, [r7, #24]
 800813c:	4013      	ands	r3, r2
 800813e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	685b      	ldr	r3, [r3, #4]
 8008144:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008148:	2b00      	cmp	r3, #0
 800814a:	d003      	beq.n	8008154 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800814c:	69ba      	ldr	r2, [r7, #24]
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	4313      	orrs	r3, r2
 8008152:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	69ba      	ldr	r2, [r7, #24]
 8008158:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	43db      	mvns	r3, r3
 8008164:	69ba      	ldr	r2, [r7, #24]
 8008166:	4013      	ands	r3, r2
 8008168:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008172:	2b00      	cmp	r3, #0
 8008174:	d003      	beq.n	800817e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8008176:	69ba      	ldr	r2, [r7, #24]
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	4313      	orrs	r3, r2
 800817c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	69ba      	ldr	r2, [r7, #24]
 8008182:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008184:	69fb      	ldr	r3, [r7, #28]
 8008186:	3301      	adds	r3, #1
 8008188:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	681a      	ldr	r2, [r3, #0]
 800818e:	69fb      	ldr	r3, [r7, #28]
 8008190:	fa22 f303 	lsr.w	r3, r2, r3
 8008194:	2b00      	cmp	r3, #0
 8008196:	f47f ae63 	bne.w	8007e60 <HAL_GPIO_Init+0x14>
  }
}
 800819a:	bf00      	nop
 800819c:	bf00      	nop
 800819e:	3724      	adds	r7, #36	; 0x24
 80081a0:	46bd      	mov	sp, r7
 80081a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a6:	4770      	bx	lr
 80081a8:	58000400 	.word	0x58000400

080081ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80081ac:	b480      	push	{r7}
 80081ae:	b085      	sub	sp, #20
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
 80081b4:	460b      	mov	r3, r1
 80081b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	691a      	ldr	r2, [r3, #16]
 80081bc:	887b      	ldrh	r3, [r7, #2]
 80081be:	4013      	ands	r3, r2
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d002      	beq.n	80081ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80081c4:	2301      	movs	r3, #1
 80081c6:	73fb      	strb	r3, [r7, #15]
 80081c8:	e001      	b.n	80081ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80081ca:	2300      	movs	r3, #0
 80081cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80081ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	3714      	adds	r7, #20
 80081d4:	46bd      	mov	sp, r7
 80081d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081da:	4770      	bx	lr

080081dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80081dc:	b480      	push	{r7}
 80081de:	b083      	sub	sp, #12
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
 80081e4:	460b      	mov	r3, r1
 80081e6:	807b      	strh	r3, [r7, #2]
 80081e8:	4613      	mov	r3, r2
 80081ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80081ec:	787b      	ldrb	r3, [r7, #1]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d003      	beq.n	80081fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80081f2:	887a      	ldrh	r2, [r7, #2]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80081f8:	e003      	b.n	8008202 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80081fa:	887b      	ldrh	r3, [r7, #2]
 80081fc:	041a      	lsls	r2, r3, #16
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	619a      	str	r2, [r3, #24]
}
 8008202:	bf00      	nop
 8008204:	370c      	adds	r7, #12
 8008206:	46bd      	mov	sp, r7
 8008208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820c:	4770      	bx	lr
	...

08008210 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b082      	sub	sp, #8
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d101      	bne.n	8008222 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800821e:	2301      	movs	r3, #1
 8008220:	e08b      	b.n	800833a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008228:	b2db      	uxtb	r3, r3
 800822a:	2b00      	cmp	r3, #0
 800822c:	d106      	bne.n	800823c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2200      	movs	r2, #0
 8008232:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f7fa f938 	bl	80024ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2224      	movs	r2, #36	; 0x24
 8008240:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	681a      	ldr	r2, [r3, #0]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f022 0201 	bic.w	r2, r2, #1
 8008252:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	685a      	ldr	r2, [r3, #4]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008260:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	689a      	ldr	r2, [r3, #8]
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008270:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	68db      	ldr	r3, [r3, #12]
 8008276:	2b01      	cmp	r3, #1
 8008278:	d107      	bne.n	800828a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	689a      	ldr	r2, [r3, #8]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008286:	609a      	str	r2, [r3, #8]
 8008288:	e006      	b.n	8008298 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	689a      	ldr	r2, [r3, #8]
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008296:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	68db      	ldr	r3, [r3, #12]
 800829c:	2b02      	cmp	r3, #2
 800829e:	d108      	bne.n	80082b2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	685a      	ldr	r2, [r3, #4]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80082ae:	605a      	str	r2, [r3, #4]
 80082b0:	e007      	b.n	80082c2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	685a      	ldr	r2, [r3, #4]
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80082c0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	6859      	ldr	r1, [r3, #4]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681a      	ldr	r2, [r3, #0]
 80082cc:	4b1d      	ldr	r3, [pc, #116]	; (8008344 <HAL_I2C_Init+0x134>)
 80082ce:	430b      	orrs	r3, r1
 80082d0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	68da      	ldr	r2, [r3, #12]
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80082e0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	691a      	ldr	r2, [r3, #16]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	695b      	ldr	r3, [r3, #20]
 80082ea:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	699b      	ldr	r3, [r3, #24]
 80082f2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	430a      	orrs	r2, r1
 80082fa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	69d9      	ldr	r1, [r3, #28]
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6a1a      	ldr	r2, [r3, #32]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	430a      	orrs	r2, r1
 800830a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	681a      	ldr	r2, [r3, #0]
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f042 0201 	orr.w	r2, r2, #1
 800831a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2200      	movs	r2, #0
 8008320:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2220      	movs	r2, #32
 8008326:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2200      	movs	r2, #0
 800832e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2200      	movs	r2, #0
 8008334:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008338:	2300      	movs	r3, #0
}
 800833a:	4618      	mov	r0, r3
 800833c:	3708      	adds	r7, #8
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}
 8008342:	bf00      	nop
 8008344:	02008000 	.word	0x02008000

08008348 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008348:	b480      	push	{r7}
 800834a:	b083      	sub	sp, #12
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008358:	b2db      	uxtb	r3, r3
 800835a:	2b20      	cmp	r3, #32
 800835c:	d138      	bne.n	80083d0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008364:	2b01      	cmp	r3, #1
 8008366:	d101      	bne.n	800836c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008368:	2302      	movs	r3, #2
 800836a:	e032      	b.n	80083d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2201      	movs	r2, #1
 8008370:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2224      	movs	r2, #36	; 0x24
 8008378:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	681a      	ldr	r2, [r3, #0]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f022 0201 	bic.w	r2, r2, #1
 800838a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	681a      	ldr	r2, [r3, #0]
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800839a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	6819      	ldr	r1, [r3, #0]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	683a      	ldr	r2, [r7, #0]
 80083a8:	430a      	orrs	r2, r1
 80083aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	681a      	ldr	r2, [r3, #0]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f042 0201 	orr.w	r2, r2, #1
 80083ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2220      	movs	r2, #32
 80083c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2200      	movs	r2, #0
 80083c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80083cc:	2300      	movs	r3, #0
 80083ce:	e000      	b.n	80083d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80083d0:	2302      	movs	r3, #2
  }
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	370c      	adds	r7, #12
 80083d6:	46bd      	mov	sp, r7
 80083d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083dc:	4770      	bx	lr

080083de <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80083de:	b480      	push	{r7}
 80083e0:	b085      	sub	sp, #20
 80083e2:	af00      	add	r7, sp, #0
 80083e4:	6078      	str	r0, [r7, #4]
 80083e6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80083ee:	b2db      	uxtb	r3, r3
 80083f0:	2b20      	cmp	r3, #32
 80083f2:	d139      	bne.n	8008468 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80083fa:	2b01      	cmp	r3, #1
 80083fc:	d101      	bne.n	8008402 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80083fe:	2302      	movs	r3, #2
 8008400:	e033      	b.n	800846a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2201      	movs	r2, #1
 8008406:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2224      	movs	r2, #36	; 0x24
 800840e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	681a      	ldr	r2, [r3, #0]
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f022 0201 	bic.w	r2, r2, #1
 8008420:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008430:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	021b      	lsls	r3, r3, #8
 8008436:	68fa      	ldr	r2, [r7, #12]
 8008438:	4313      	orrs	r3, r2
 800843a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	68fa      	ldr	r2, [r7, #12]
 8008442:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	681a      	ldr	r2, [r3, #0]
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f042 0201 	orr.w	r2, r2, #1
 8008452:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2220      	movs	r2, #32
 8008458:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2200      	movs	r2, #0
 8008460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008464:	2300      	movs	r3, #0
 8008466:	e000      	b.n	800846a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008468:	2302      	movs	r3, #2
  }
}
 800846a:	4618      	mov	r0, r3
 800846c:	3714      	adds	r7, #20
 800846e:	46bd      	mov	sp, r7
 8008470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008474:	4770      	bx	lr
	...

08008478 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b084      	sub	sp, #16
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008480:	4b19      	ldr	r3, [pc, #100]	; (80084e8 <HAL_PWREx_ConfigSupply+0x70>)
 8008482:	68db      	ldr	r3, [r3, #12]
 8008484:	f003 0304 	and.w	r3, r3, #4
 8008488:	2b04      	cmp	r3, #4
 800848a:	d00a      	beq.n	80084a2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800848c:	4b16      	ldr	r3, [pc, #88]	; (80084e8 <HAL_PWREx_ConfigSupply+0x70>)
 800848e:	68db      	ldr	r3, [r3, #12]
 8008490:	f003 0307 	and.w	r3, r3, #7
 8008494:	687a      	ldr	r2, [r7, #4]
 8008496:	429a      	cmp	r2, r3
 8008498:	d001      	beq.n	800849e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800849a:	2301      	movs	r3, #1
 800849c:	e01f      	b.n	80084de <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800849e:	2300      	movs	r3, #0
 80084a0:	e01d      	b.n	80084de <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80084a2:	4b11      	ldr	r3, [pc, #68]	; (80084e8 <HAL_PWREx_ConfigSupply+0x70>)
 80084a4:	68db      	ldr	r3, [r3, #12]
 80084a6:	f023 0207 	bic.w	r2, r3, #7
 80084aa:	490f      	ldr	r1, [pc, #60]	; (80084e8 <HAL_PWREx_ConfigSupply+0x70>)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	4313      	orrs	r3, r2
 80084b0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80084b2:	f7fa fd67 	bl	8002f84 <HAL_GetTick>
 80084b6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80084b8:	e009      	b.n	80084ce <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80084ba:	f7fa fd63 	bl	8002f84 <HAL_GetTick>
 80084be:	4602      	mov	r2, r0
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	1ad3      	subs	r3, r2, r3
 80084c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80084c8:	d901      	bls.n	80084ce <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80084ca:	2301      	movs	r3, #1
 80084cc:	e007      	b.n	80084de <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80084ce:	4b06      	ldr	r3, [pc, #24]	; (80084e8 <HAL_PWREx_ConfigSupply+0x70>)
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80084d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084da:	d1ee      	bne.n	80084ba <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80084dc:	2300      	movs	r3, #0
}
 80084de:	4618      	mov	r0, r3
 80084e0:	3710      	adds	r7, #16
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}
 80084e6:	bf00      	nop
 80084e8:	58024800 	.word	0x58024800

080084ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b08c      	sub	sp, #48	; 0x30
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d102      	bne.n	8008500 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80084fa:	2301      	movs	r3, #1
 80084fc:	f000 bc48 	b.w	8008d90 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f003 0301 	and.w	r3, r3, #1
 8008508:	2b00      	cmp	r3, #0
 800850a:	f000 8088 	beq.w	800861e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800850e:	4b99      	ldr	r3, [pc, #612]	; (8008774 <HAL_RCC_OscConfig+0x288>)
 8008510:	691b      	ldr	r3, [r3, #16]
 8008512:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008516:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008518:	4b96      	ldr	r3, [pc, #600]	; (8008774 <HAL_RCC_OscConfig+0x288>)
 800851a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800851c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800851e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008520:	2b10      	cmp	r3, #16
 8008522:	d007      	beq.n	8008534 <HAL_RCC_OscConfig+0x48>
 8008524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008526:	2b18      	cmp	r3, #24
 8008528:	d111      	bne.n	800854e <HAL_RCC_OscConfig+0x62>
 800852a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800852c:	f003 0303 	and.w	r3, r3, #3
 8008530:	2b02      	cmp	r3, #2
 8008532:	d10c      	bne.n	800854e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008534:	4b8f      	ldr	r3, [pc, #572]	; (8008774 <HAL_RCC_OscConfig+0x288>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800853c:	2b00      	cmp	r3, #0
 800853e:	d06d      	beq.n	800861c <HAL_RCC_OscConfig+0x130>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	685b      	ldr	r3, [r3, #4]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d169      	bne.n	800861c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008548:	2301      	movs	r3, #1
 800854a:	f000 bc21 	b.w	8008d90 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	685b      	ldr	r3, [r3, #4]
 8008552:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008556:	d106      	bne.n	8008566 <HAL_RCC_OscConfig+0x7a>
 8008558:	4b86      	ldr	r3, [pc, #536]	; (8008774 <HAL_RCC_OscConfig+0x288>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4a85      	ldr	r2, [pc, #532]	; (8008774 <HAL_RCC_OscConfig+0x288>)
 800855e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008562:	6013      	str	r3, [r2, #0]
 8008564:	e02e      	b.n	80085c4 <HAL_RCC_OscConfig+0xd8>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	685b      	ldr	r3, [r3, #4]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d10c      	bne.n	8008588 <HAL_RCC_OscConfig+0x9c>
 800856e:	4b81      	ldr	r3, [pc, #516]	; (8008774 <HAL_RCC_OscConfig+0x288>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	4a80      	ldr	r2, [pc, #512]	; (8008774 <HAL_RCC_OscConfig+0x288>)
 8008574:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008578:	6013      	str	r3, [r2, #0]
 800857a:	4b7e      	ldr	r3, [pc, #504]	; (8008774 <HAL_RCC_OscConfig+0x288>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	4a7d      	ldr	r2, [pc, #500]	; (8008774 <HAL_RCC_OscConfig+0x288>)
 8008580:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008584:	6013      	str	r3, [r2, #0]
 8008586:	e01d      	b.n	80085c4 <HAL_RCC_OscConfig+0xd8>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008590:	d10c      	bne.n	80085ac <HAL_RCC_OscConfig+0xc0>
 8008592:	4b78      	ldr	r3, [pc, #480]	; (8008774 <HAL_RCC_OscConfig+0x288>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a77      	ldr	r2, [pc, #476]	; (8008774 <HAL_RCC_OscConfig+0x288>)
 8008598:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800859c:	6013      	str	r3, [r2, #0]
 800859e:	4b75      	ldr	r3, [pc, #468]	; (8008774 <HAL_RCC_OscConfig+0x288>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	4a74      	ldr	r2, [pc, #464]	; (8008774 <HAL_RCC_OscConfig+0x288>)
 80085a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085a8:	6013      	str	r3, [r2, #0]
 80085aa:	e00b      	b.n	80085c4 <HAL_RCC_OscConfig+0xd8>
 80085ac:	4b71      	ldr	r3, [pc, #452]	; (8008774 <HAL_RCC_OscConfig+0x288>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4a70      	ldr	r2, [pc, #448]	; (8008774 <HAL_RCC_OscConfig+0x288>)
 80085b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80085b6:	6013      	str	r3, [r2, #0]
 80085b8:	4b6e      	ldr	r3, [pc, #440]	; (8008774 <HAL_RCC_OscConfig+0x288>)
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	4a6d      	ldr	r2, [pc, #436]	; (8008774 <HAL_RCC_OscConfig+0x288>)
 80085be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80085c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	685b      	ldr	r3, [r3, #4]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d013      	beq.n	80085f4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085cc:	f7fa fcda 	bl	8002f84 <HAL_GetTick>
 80085d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80085d2:	e008      	b.n	80085e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80085d4:	f7fa fcd6 	bl	8002f84 <HAL_GetTick>
 80085d8:	4602      	mov	r2, r0
 80085da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085dc:	1ad3      	subs	r3, r2, r3
 80085de:	2b64      	cmp	r3, #100	; 0x64
 80085e0:	d901      	bls.n	80085e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80085e2:	2303      	movs	r3, #3
 80085e4:	e3d4      	b.n	8008d90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80085e6:	4b63      	ldr	r3, [pc, #396]	; (8008774 <HAL_RCC_OscConfig+0x288>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d0f0      	beq.n	80085d4 <HAL_RCC_OscConfig+0xe8>
 80085f2:	e014      	b.n	800861e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085f4:	f7fa fcc6 	bl	8002f84 <HAL_GetTick>
 80085f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80085fa:	e008      	b.n	800860e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80085fc:	f7fa fcc2 	bl	8002f84 <HAL_GetTick>
 8008600:	4602      	mov	r2, r0
 8008602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008604:	1ad3      	subs	r3, r2, r3
 8008606:	2b64      	cmp	r3, #100	; 0x64
 8008608:	d901      	bls.n	800860e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800860a:	2303      	movs	r3, #3
 800860c:	e3c0      	b.n	8008d90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800860e:	4b59      	ldr	r3, [pc, #356]	; (8008774 <HAL_RCC_OscConfig+0x288>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008616:	2b00      	cmp	r3, #0
 8008618:	d1f0      	bne.n	80085fc <HAL_RCC_OscConfig+0x110>
 800861a:	e000      	b.n	800861e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800861c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f003 0302 	and.w	r3, r3, #2
 8008626:	2b00      	cmp	r3, #0
 8008628:	f000 80ca 	beq.w	80087c0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800862c:	4b51      	ldr	r3, [pc, #324]	; (8008774 <HAL_RCC_OscConfig+0x288>)
 800862e:	691b      	ldr	r3, [r3, #16]
 8008630:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008634:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008636:	4b4f      	ldr	r3, [pc, #316]	; (8008774 <HAL_RCC_OscConfig+0x288>)
 8008638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800863a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800863c:	6a3b      	ldr	r3, [r7, #32]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d007      	beq.n	8008652 <HAL_RCC_OscConfig+0x166>
 8008642:	6a3b      	ldr	r3, [r7, #32]
 8008644:	2b18      	cmp	r3, #24
 8008646:	d156      	bne.n	80086f6 <HAL_RCC_OscConfig+0x20a>
 8008648:	69fb      	ldr	r3, [r7, #28]
 800864a:	f003 0303 	and.w	r3, r3, #3
 800864e:	2b00      	cmp	r3, #0
 8008650:	d151      	bne.n	80086f6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008652:	4b48      	ldr	r3, [pc, #288]	; (8008774 <HAL_RCC_OscConfig+0x288>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f003 0304 	and.w	r3, r3, #4
 800865a:	2b00      	cmp	r3, #0
 800865c:	d005      	beq.n	800866a <HAL_RCC_OscConfig+0x17e>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	68db      	ldr	r3, [r3, #12]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d101      	bne.n	800866a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8008666:	2301      	movs	r3, #1
 8008668:	e392      	b.n	8008d90 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800866a:	4b42      	ldr	r3, [pc, #264]	; (8008774 <HAL_RCC_OscConfig+0x288>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f023 0219 	bic.w	r2, r3, #25
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	68db      	ldr	r3, [r3, #12]
 8008676:	493f      	ldr	r1, [pc, #252]	; (8008774 <HAL_RCC_OscConfig+0x288>)
 8008678:	4313      	orrs	r3, r2
 800867a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800867c:	f7fa fc82 	bl	8002f84 <HAL_GetTick>
 8008680:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008682:	e008      	b.n	8008696 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008684:	f7fa fc7e 	bl	8002f84 <HAL_GetTick>
 8008688:	4602      	mov	r2, r0
 800868a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800868c:	1ad3      	subs	r3, r2, r3
 800868e:	2b02      	cmp	r3, #2
 8008690:	d901      	bls.n	8008696 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008692:	2303      	movs	r3, #3
 8008694:	e37c      	b.n	8008d90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008696:	4b37      	ldr	r3, [pc, #220]	; (8008774 <HAL_RCC_OscConfig+0x288>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f003 0304 	and.w	r3, r3, #4
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d0f0      	beq.n	8008684 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80086a2:	f7fa fc7b 	bl	8002f9c <HAL_GetREVID>
 80086a6:	4603      	mov	r3, r0
 80086a8:	f241 0203 	movw	r2, #4099	; 0x1003
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d817      	bhi.n	80086e0 <HAL_RCC_OscConfig+0x1f4>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	691b      	ldr	r3, [r3, #16]
 80086b4:	2b40      	cmp	r3, #64	; 0x40
 80086b6:	d108      	bne.n	80086ca <HAL_RCC_OscConfig+0x1de>
 80086b8:	4b2e      	ldr	r3, [pc, #184]	; (8008774 <HAL_RCC_OscConfig+0x288>)
 80086ba:	685b      	ldr	r3, [r3, #4]
 80086bc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80086c0:	4a2c      	ldr	r2, [pc, #176]	; (8008774 <HAL_RCC_OscConfig+0x288>)
 80086c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80086c6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80086c8:	e07a      	b.n	80087c0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80086ca:	4b2a      	ldr	r3, [pc, #168]	; (8008774 <HAL_RCC_OscConfig+0x288>)
 80086cc:	685b      	ldr	r3, [r3, #4]
 80086ce:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	691b      	ldr	r3, [r3, #16]
 80086d6:	031b      	lsls	r3, r3, #12
 80086d8:	4926      	ldr	r1, [pc, #152]	; (8008774 <HAL_RCC_OscConfig+0x288>)
 80086da:	4313      	orrs	r3, r2
 80086dc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80086de:	e06f      	b.n	80087c0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80086e0:	4b24      	ldr	r3, [pc, #144]	; (8008774 <HAL_RCC_OscConfig+0x288>)
 80086e2:	685b      	ldr	r3, [r3, #4]
 80086e4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	691b      	ldr	r3, [r3, #16]
 80086ec:	061b      	lsls	r3, r3, #24
 80086ee:	4921      	ldr	r1, [pc, #132]	; (8008774 <HAL_RCC_OscConfig+0x288>)
 80086f0:	4313      	orrs	r3, r2
 80086f2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80086f4:	e064      	b.n	80087c0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	68db      	ldr	r3, [r3, #12]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d047      	beq.n	800878e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80086fe:	4b1d      	ldr	r3, [pc, #116]	; (8008774 <HAL_RCC_OscConfig+0x288>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f023 0219 	bic.w	r2, r3, #25
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	68db      	ldr	r3, [r3, #12]
 800870a:	491a      	ldr	r1, [pc, #104]	; (8008774 <HAL_RCC_OscConfig+0x288>)
 800870c:	4313      	orrs	r3, r2
 800870e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008710:	f7fa fc38 	bl	8002f84 <HAL_GetTick>
 8008714:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008716:	e008      	b.n	800872a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008718:	f7fa fc34 	bl	8002f84 <HAL_GetTick>
 800871c:	4602      	mov	r2, r0
 800871e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008720:	1ad3      	subs	r3, r2, r3
 8008722:	2b02      	cmp	r3, #2
 8008724:	d901      	bls.n	800872a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8008726:	2303      	movs	r3, #3
 8008728:	e332      	b.n	8008d90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800872a:	4b12      	ldr	r3, [pc, #72]	; (8008774 <HAL_RCC_OscConfig+0x288>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f003 0304 	and.w	r3, r3, #4
 8008732:	2b00      	cmp	r3, #0
 8008734:	d0f0      	beq.n	8008718 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008736:	f7fa fc31 	bl	8002f9c <HAL_GetREVID>
 800873a:	4603      	mov	r3, r0
 800873c:	f241 0203 	movw	r2, #4099	; 0x1003
 8008740:	4293      	cmp	r3, r2
 8008742:	d819      	bhi.n	8008778 <HAL_RCC_OscConfig+0x28c>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	691b      	ldr	r3, [r3, #16]
 8008748:	2b40      	cmp	r3, #64	; 0x40
 800874a:	d108      	bne.n	800875e <HAL_RCC_OscConfig+0x272>
 800874c:	4b09      	ldr	r3, [pc, #36]	; (8008774 <HAL_RCC_OscConfig+0x288>)
 800874e:	685b      	ldr	r3, [r3, #4]
 8008750:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008754:	4a07      	ldr	r2, [pc, #28]	; (8008774 <HAL_RCC_OscConfig+0x288>)
 8008756:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800875a:	6053      	str	r3, [r2, #4]
 800875c:	e030      	b.n	80087c0 <HAL_RCC_OscConfig+0x2d4>
 800875e:	4b05      	ldr	r3, [pc, #20]	; (8008774 <HAL_RCC_OscConfig+0x288>)
 8008760:	685b      	ldr	r3, [r3, #4]
 8008762:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	691b      	ldr	r3, [r3, #16]
 800876a:	031b      	lsls	r3, r3, #12
 800876c:	4901      	ldr	r1, [pc, #4]	; (8008774 <HAL_RCC_OscConfig+0x288>)
 800876e:	4313      	orrs	r3, r2
 8008770:	604b      	str	r3, [r1, #4]
 8008772:	e025      	b.n	80087c0 <HAL_RCC_OscConfig+0x2d4>
 8008774:	58024400 	.word	0x58024400
 8008778:	4b9a      	ldr	r3, [pc, #616]	; (80089e4 <HAL_RCC_OscConfig+0x4f8>)
 800877a:	685b      	ldr	r3, [r3, #4]
 800877c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	691b      	ldr	r3, [r3, #16]
 8008784:	061b      	lsls	r3, r3, #24
 8008786:	4997      	ldr	r1, [pc, #604]	; (80089e4 <HAL_RCC_OscConfig+0x4f8>)
 8008788:	4313      	orrs	r3, r2
 800878a:	604b      	str	r3, [r1, #4]
 800878c:	e018      	b.n	80087c0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800878e:	4b95      	ldr	r3, [pc, #596]	; (80089e4 <HAL_RCC_OscConfig+0x4f8>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	4a94      	ldr	r2, [pc, #592]	; (80089e4 <HAL_RCC_OscConfig+0x4f8>)
 8008794:	f023 0301 	bic.w	r3, r3, #1
 8008798:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800879a:	f7fa fbf3 	bl	8002f84 <HAL_GetTick>
 800879e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80087a0:	e008      	b.n	80087b4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80087a2:	f7fa fbef 	bl	8002f84 <HAL_GetTick>
 80087a6:	4602      	mov	r2, r0
 80087a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087aa:	1ad3      	subs	r3, r2, r3
 80087ac:	2b02      	cmp	r3, #2
 80087ae:	d901      	bls.n	80087b4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80087b0:	2303      	movs	r3, #3
 80087b2:	e2ed      	b.n	8008d90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80087b4:	4b8b      	ldr	r3, [pc, #556]	; (80089e4 <HAL_RCC_OscConfig+0x4f8>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f003 0304 	and.w	r3, r3, #4
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d1f0      	bne.n	80087a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f003 0310 	and.w	r3, r3, #16
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	f000 80a9 	beq.w	8008920 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80087ce:	4b85      	ldr	r3, [pc, #532]	; (80089e4 <HAL_RCC_OscConfig+0x4f8>)
 80087d0:	691b      	ldr	r3, [r3, #16]
 80087d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80087d6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80087d8:	4b82      	ldr	r3, [pc, #520]	; (80089e4 <HAL_RCC_OscConfig+0x4f8>)
 80087da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087dc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80087de:	69bb      	ldr	r3, [r7, #24]
 80087e0:	2b08      	cmp	r3, #8
 80087e2:	d007      	beq.n	80087f4 <HAL_RCC_OscConfig+0x308>
 80087e4:	69bb      	ldr	r3, [r7, #24]
 80087e6:	2b18      	cmp	r3, #24
 80087e8:	d13a      	bne.n	8008860 <HAL_RCC_OscConfig+0x374>
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	f003 0303 	and.w	r3, r3, #3
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	d135      	bne.n	8008860 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80087f4:	4b7b      	ldr	r3, [pc, #492]	; (80089e4 <HAL_RCC_OscConfig+0x4f8>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d005      	beq.n	800880c <HAL_RCC_OscConfig+0x320>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	69db      	ldr	r3, [r3, #28]
 8008804:	2b80      	cmp	r3, #128	; 0x80
 8008806:	d001      	beq.n	800880c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8008808:	2301      	movs	r3, #1
 800880a:	e2c1      	b.n	8008d90 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800880c:	f7fa fbc6 	bl	8002f9c <HAL_GetREVID>
 8008810:	4603      	mov	r3, r0
 8008812:	f241 0203 	movw	r2, #4099	; 0x1003
 8008816:	4293      	cmp	r3, r2
 8008818:	d817      	bhi.n	800884a <HAL_RCC_OscConfig+0x35e>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6a1b      	ldr	r3, [r3, #32]
 800881e:	2b20      	cmp	r3, #32
 8008820:	d108      	bne.n	8008834 <HAL_RCC_OscConfig+0x348>
 8008822:	4b70      	ldr	r3, [pc, #448]	; (80089e4 <HAL_RCC_OscConfig+0x4f8>)
 8008824:	685b      	ldr	r3, [r3, #4]
 8008826:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800882a:	4a6e      	ldr	r2, [pc, #440]	; (80089e4 <HAL_RCC_OscConfig+0x4f8>)
 800882c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008830:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008832:	e075      	b.n	8008920 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008834:	4b6b      	ldr	r3, [pc, #428]	; (80089e4 <HAL_RCC_OscConfig+0x4f8>)
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6a1b      	ldr	r3, [r3, #32]
 8008840:	069b      	lsls	r3, r3, #26
 8008842:	4968      	ldr	r1, [pc, #416]	; (80089e4 <HAL_RCC_OscConfig+0x4f8>)
 8008844:	4313      	orrs	r3, r2
 8008846:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008848:	e06a      	b.n	8008920 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800884a:	4b66      	ldr	r3, [pc, #408]	; (80089e4 <HAL_RCC_OscConfig+0x4f8>)
 800884c:	68db      	ldr	r3, [r3, #12]
 800884e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6a1b      	ldr	r3, [r3, #32]
 8008856:	061b      	lsls	r3, r3, #24
 8008858:	4962      	ldr	r1, [pc, #392]	; (80089e4 <HAL_RCC_OscConfig+0x4f8>)
 800885a:	4313      	orrs	r3, r2
 800885c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800885e:	e05f      	b.n	8008920 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	69db      	ldr	r3, [r3, #28]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d042      	beq.n	80088ee <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008868:	4b5e      	ldr	r3, [pc, #376]	; (80089e4 <HAL_RCC_OscConfig+0x4f8>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4a5d      	ldr	r2, [pc, #372]	; (80089e4 <HAL_RCC_OscConfig+0x4f8>)
 800886e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008872:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008874:	f7fa fb86 	bl	8002f84 <HAL_GetTick>
 8008878:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800887a:	e008      	b.n	800888e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800887c:	f7fa fb82 	bl	8002f84 <HAL_GetTick>
 8008880:	4602      	mov	r2, r0
 8008882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008884:	1ad3      	subs	r3, r2, r3
 8008886:	2b02      	cmp	r3, #2
 8008888:	d901      	bls.n	800888e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800888a:	2303      	movs	r3, #3
 800888c:	e280      	b.n	8008d90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800888e:	4b55      	ldr	r3, [pc, #340]	; (80089e4 <HAL_RCC_OscConfig+0x4f8>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008896:	2b00      	cmp	r3, #0
 8008898:	d0f0      	beq.n	800887c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800889a:	f7fa fb7f 	bl	8002f9c <HAL_GetREVID>
 800889e:	4603      	mov	r3, r0
 80088a0:	f241 0203 	movw	r2, #4099	; 0x1003
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d817      	bhi.n	80088d8 <HAL_RCC_OscConfig+0x3ec>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6a1b      	ldr	r3, [r3, #32]
 80088ac:	2b20      	cmp	r3, #32
 80088ae:	d108      	bne.n	80088c2 <HAL_RCC_OscConfig+0x3d6>
 80088b0:	4b4c      	ldr	r3, [pc, #304]	; (80089e4 <HAL_RCC_OscConfig+0x4f8>)
 80088b2:	685b      	ldr	r3, [r3, #4]
 80088b4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80088b8:	4a4a      	ldr	r2, [pc, #296]	; (80089e4 <HAL_RCC_OscConfig+0x4f8>)
 80088ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80088be:	6053      	str	r3, [r2, #4]
 80088c0:	e02e      	b.n	8008920 <HAL_RCC_OscConfig+0x434>
 80088c2:	4b48      	ldr	r3, [pc, #288]	; (80089e4 <HAL_RCC_OscConfig+0x4f8>)
 80088c4:	685b      	ldr	r3, [r3, #4]
 80088c6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6a1b      	ldr	r3, [r3, #32]
 80088ce:	069b      	lsls	r3, r3, #26
 80088d0:	4944      	ldr	r1, [pc, #272]	; (80089e4 <HAL_RCC_OscConfig+0x4f8>)
 80088d2:	4313      	orrs	r3, r2
 80088d4:	604b      	str	r3, [r1, #4]
 80088d6:	e023      	b.n	8008920 <HAL_RCC_OscConfig+0x434>
 80088d8:	4b42      	ldr	r3, [pc, #264]	; (80089e4 <HAL_RCC_OscConfig+0x4f8>)
 80088da:	68db      	ldr	r3, [r3, #12]
 80088dc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6a1b      	ldr	r3, [r3, #32]
 80088e4:	061b      	lsls	r3, r3, #24
 80088e6:	493f      	ldr	r1, [pc, #252]	; (80089e4 <HAL_RCC_OscConfig+0x4f8>)
 80088e8:	4313      	orrs	r3, r2
 80088ea:	60cb      	str	r3, [r1, #12]
 80088ec:	e018      	b.n	8008920 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80088ee:	4b3d      	ldr	r3, [pc, #244]	; (80089e4 <HAL_RCC_OscConfig+0x4f8>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	4a3c      	ldr	r2, [pc, #240]	; (80089e4 <HAL_RCC_OscConfig+0x4f8>)
 80088f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80088f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088fa:	f7fa fb43 	bl	8002f84 <HAL_GetTick>
 80088fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008900:	e008      	b.n	8008914 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008902:	f7fa fb3f 	bl	8002f84 <HAL_GetTick>
 8008906:	4602      	mov	r2, r0
 8008908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800890a:	1ad3      	subs	r3, r2, r3
 800890c:	2b02      	cmp	r3, #2
 800890e:	d901      	bls.n	8008914 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008910:	2303      	movs	r3, #3
 8008912:	e23d      	b.n	8008d90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008914:	4b33      	ldr	r3, [pc, #204]	; (80089e4 <HAL_RCC_OscConfig+0x4f8>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800891c:	2b00      	cmp	r3, #0
 800891e:	d1f0      	bne.n	8008902 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f003 0308 	and.w	r3, r3, #8
 8008928:	2b00      	cmp	r3, #0
 800892a:	d036      	beq.n	800899a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	695b      	ldr	r3, [r3, #20]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d019      	beq.n	8008968 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008934:	4b2b      	ldr	r3, [pc, #172]	; (80089e4 <HAL_RCC_OscConfig+0x4f8>)
 8008936:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008938:	4a2a      	ldr	r2, [pc, #168]	; (80089e4 <HAL_RCC_OscConfig+0x4f8>)
 800893a:	f043 0301 	orr.w	r3, r3, #1
 800893e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008940:	f7fa fb20 	bl	8002f84 <HAL_GetTick>
 8008944:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008946:	e008      	b.n	800895a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008948:	f7fa fb1c 	bl	8002f84 <HAL_GetTick>
 800894c:	4602      	mov	r2, r0
 800894e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008950:	1ad3      	subs	r3, r2, r3
 8008952:	2b02      	cmp	r3, #2
 8008954:	d901      	bls.n	800895a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8008956:	2303      	movs	r3, #3
 8008958:	e21a      	b.n	8008d90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800895a:	4b22      	ldr	r3, [pc, #136]	; (80089e4 <HAL_RCC_OscConfig+0x4f8>)
 800895c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800895e:	f003 0302 	and.w	r3, r3, #2
 8008962:	2b00      	cmp	r3, #0
 8008964:	d0f0      	beq.n	8008948 <HAL_RCC_OscConfig+0x45c>
 8008966:	e018      	b.n	800899a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008968:	4b1e      	ldr	r3, [pc, #120]	; (80089e4 <HAL_RCC_OscConfig+0x4f8>)
 800896a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800896c:	4a1d      	ldr	r2, [pc, #116]	; (80089e4 <HAL_RCC_OscConfig+0x4f8>)
 800896e:	f023 0301 	bic.w	r3, r3, #1
 8008972:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008974:	f7fa fb06 	bl	8002f84 <HAL_GetTick>
 8008978:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800897a:	e008      	b.n	800898e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800897c:	f7fa fb02 	bl	8002f84 <HAL_GetTick>
 8008980:	4602      	mov	r2, r0
 8008982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008984:	1ad3      	subs	r3, r2, r3
 8008986:	2b02      	cmp	r3, #2
 8008988:	d901      	bls.n	800898e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800898a:	2303      	movs	r3, #3
 800898c:	e200      	b.n	8008d90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800898e:	4b15      	ldr	r3, [pc, #84]	; (80089e4 <HAL_RCC_OscConfig+0x4f8>)
 8008990:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008992:	f003 0302 	and.w	r3, r3, #2
 8008996:	2b00      	cmp	r3, #0
 8008998:	d1f0      	bne.n	800897c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f003 0320 	and.w	r3, r3, #32
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d039      	beq.n	8008a1a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	699b      	ldr	r3, [r3, #24]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d01c      	beq.n	80089e8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80089ae:	4b0d      	ldr	r3, [pc, #52]	; (80089e4 <HAL_RCC_OscConfig+0x4f8>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	4a0c      	ldr	r2, [pc, #48]	; (80089e4 <HAL_RCC_OscConfig+0x4f8>)
 80089b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80089b8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80089ba:	f7fa fae3 	bl	8002f84 <HAL_GetTick>
 80089be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80089c0:	e008      	b.n	80089d4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80089c2:	f7fa fadf 	bl	8002f84 <HAL_GetTick>
 80089c6:	4602      	mov	r2, r0
 80089c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ca:	1ad3      	subs	r3, r2, r3
 80089cc:	2b02      	cmp	r3, #2
 80089ce:	d901      	bls.n	80089d4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80089d0:	2303      	movs	r3, #3
 80089d2:	e1dd      	b.n	8008d90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80089d4:	4b03      	ldr	r3, [pc, #12]	; (80089e4 <HAL_RCC_OscConfig+0x4f8>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d0f0      	beq.n	80089c2 <HAL_RCC_OscConfig+0x4d6>
 80089e0:	e01b      	b.n	8008a1a <HAL_RCC_OscConfig+0x52e>
 80089e2:	bf00      	nop
 80089e4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80089e8:	4b9b      	ldr	r3, [pc, #620]	; (8008c58 <HAL_RCC_OscConfig+0x76c>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4a9a      	ldr	r2, [pc, #616]	; (8008c58 <HAL_RCC_OscConfig+0x76c>)
 80089ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80089f2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80089f4:	f7fa fac6 	bl	8002f84 <HAL_GetTick>
 80089f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80089fa:	e008      	b.n	8008a0e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80089fc:	f7fa fac2 	bl	8002f84 <HAL_GetTick>
 8008a00:	4602      	mov	r2, r0
 8008a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a04:	1ad3      	subs	r3, r2, r3
 8008a06:	2b02      	cmp	r3, #2
 8008a08:	d901      	bls.n	8008a0e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8008a0a:	2303      	movs	r3, #3
 8008a0c:	e1c0      	b.n	8008d90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008a0e:	4b92      	ldr	r3, [pc, #584]	; (8008c58 <HAL_RCC_OscConfig+0x76c>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d1f0      	bne.n	80089fc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f003 0304 	and.w	r3, r3, #4
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	f000 8081 	beq.w	8008b2a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008a28:	4b8c      	ldr	r3, [pc, #560]	; (8008c5c <HAL_RCC_OscConfig+0x770>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	4a8b      	ldr	r2, [pc, #556]	; (8008c5c <HAL_RCC_OscConfig+0x770>)
 8008a2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a32:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008a34:	f7fa faa6 	bl	8002f84 <HAL_GetTick>
 8008a38:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008a3a:	e008      	b.n	8008a4e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008a3c:	f7fa faa2 	bl	8002f84 <HAL_GetTick>
 8008a40:	4602      	mov	r2, r0
 8008a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a44:	1ad3      	subs	r3, r2, r3
 8008a46:	2b64      	cmp	r3, #100	; 0x64
 8008a48:	d901      	bls.n	8008a4e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8008a4a:	2303      	movs	r3, #3
 8008a4c:	e1a0      	b.n	8008d90 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008a4e:	4b83      	ldr	r3, [pc, #524]	; (8008c5c <HAL_RCC_OscConfig+0x770>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d0f0      	beq.n	8008a3c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	689b      	ldr	r3, [r3, #8]
 8008a5e:	2b01      	cmp	r3, #1
 8008a60:	d106      	bne.n	8008a70 <HAL_RCC_OscConfig+0x584>
 8008a62:	4b7d      	ldr	r3, [pc, #500]	; (8008c58 <HAL_RCC_OscConfig+0x76c>)
 8008a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a66:	4a7c      	ldr	r2, [pc, #496]	; (8008c58 <HAL_RCC_OscConfig+0x76c>)
 8008a68:	f043 0301 	orr.w	r3, r3, #1
 8008a6c:	6713      	str	r3, [r2, #112]	; 0x70
 8008a6e:	e02d      	b.n	8008acc <HAL_RCC_OscConfig+0x5e0>
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	689b      	ldr	r3, [r3, #8]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d10c      	bne.n	8008a92 <HAL_RCC_OscConfig+0x5a6>
 8008a78:	4b77      	ldr	r3, [pc, #476]	; (8008c58 <HAL_RCC_OscConfig+0x76c>)
 8008a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a7c:	4a76      	ldr	r2, [pc, #472]	; (8008c58 <HAL_RCC_OscConfig+0x76c>)
 8008a7e:	f023 0301 	bic.w	r3, r3, #1
 8008a82:	6713      	str	r3, [r2, #112]	; 0x70
 8008a84:	4b74      	ldr	r3, [pc, #464]	; (8008c58 <HAL_RCC_OscConfig+0x76c>)
 8008a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a88:	4a73      	ldr	r2, [pc, #460]	; (8008c58 <HAL_RCC_OscConfig+0x76c>)
 8008a8a:	f023 0304 	bic.w	r3, r3, #4
 8008a8e:	6713      	str	r3, [r2, #112]	; 0x70
 8008a90:	e01c      	b.n	8008acc <HAL_RCC_OscConfig+0x5e0>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	689b      	ldr	r3, [r3, #8]
 8008a96:	2b05      	cmp	r3, #5
 8008a98:	d10c      	bne.n	8008ab4 <HAL_RCC_OscConfig+0x5c8>
 8008a9a:	4b6f      	ldr	r3, [pc, #444]	; (8008c58 <HAL_RCC_OscConfig+0x76c>)
 8008a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a9e:	4a6e      	ldr	r2, [pc, #440]	; (8008c58 <HAL_RCC_OscConfig+0x76c>)
 8008aa0:	f043 0304 	orr.w	r3, r3, #4
 8008aa4:	6713      	str	r3, [r2, #112]	; 0x70
 8008aa6:	4b6c      	ldr	r3, [pc, #432]	; (8008c58 <HAL_RCC_OscConfig+0x76c>)
 8008aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008aaa:	4a6b      	ldr	r2, [pc, #428]	; (8008c58 <HAL_RCC_OscConfig+0x76c>)
 8008aac:	f043 0301 	orr.w	r3, r3, #1
 8008ab0:	6713      	str	r3, [r2, #112]	; 0x70
 8008ab2:	e00b      	b.n	8008acc <HAL_RCC_OscConfig+0x5e0>
 8008ab4:	4b68      	ldr	r3, [pc, #416]	; (8008c58 <HAL_RCC_OscConfig+0x76c>)
 8008ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ab8:	4a67      	ldr	r2, [pc, #412]	; (8008c58 <HAL_RCC_OscConfig+0x76c>)
 8008aba:	f023 0301 	bic.w	r3, r3, #1
 8008abe:	6713      	str	r3, [r2, #112]	; 0x70
 8008ac0:	4b65      	ldr	r3, [pc, #404]	; (8008c58 <HAL_RCC_OscConfig+0x76c>)
 8008ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ac4:	4a64      	ldr	r2, [pc, #400]	; (8008c58 <HAL_RCC_OscConfig+0x76c>)
 8008ac6:	f023 0304 	bic.w	r3, r3, #4
 8008aca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	689b      	ldr	r3, [r3, #8]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d015      	beq.n	8008b00 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ad4:	f7fa fa56 	bl	8002f84 <HAL_GetTick>
 8008ad8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008ada:	e00a      	b.n	8008af2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008adc:	f7fa fa52 	bl	8002f84 <HAL_GetTick>
 8008ae0:	4602      	mov	r2, r0
 8008ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae4:	1ad3      	subs	r3, r2, r3
 8008ae6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d901      	bls.n	8008af2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8008aee:	2303      	movs	r3, #3
 8008af0:	e14e      	b.n	8008d90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008af2:	4b59      	ldr	r3, [pc, #356]	; (8008c58 <HAL_RCC_OscConfig+0x76c>)
 8008af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008af6:	f003 0302 	and.w	r3, r3, #2
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d0ee      	beq.n	8008adc <HAL_RCC_OscConfig+0x5f0>
 8008afe:	e014      	b.n	8008b2a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b00:	f7fa fa40 	bl	8002f84 <HAL_GetTick>
 8008b04:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008b06:	e00a      	b.n	8008b1e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b08:	f7fa fa3c 	bl	8002f84 <HAL_GetTick>
 8008b0c:	4602      	mov	r2, r0
 8008b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b10:	1ad3      	subs	r3, r2, r3
 8008b12:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b16:	4293      	cmp	r3, r2
 8008b18:	d901      	bls.n	8008b1e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8008b1a:	2303      	movs	r3, #3
 8008b1c:	e138      	b.n	8008d90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008b1e:	4b4e      	ldr	r3, [pc, #312]	; (8008c58 <HAL_RCC_OscConfig+0x76c>)
 8008b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b22:	f003 0302 	and.w	r3, r3, #2
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d1ee      	bne.n	8008b08 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	f000 812d 	beq.w	8008d8e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008b34:	4b48      	ldr	r3, [pc, #288]	; (8008c58 <HAL_RCC_OscConfig+0x76c>)
 8008b36:	691b      	ldr	r3, [r3, #16]
 8008b38:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008b3c:	2b18      	cmp	r3, #24
 8008b3e:	f000 80bd 	beq.w	8008cbc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b46:	2b02      	cmp	r3, #2
 8008b48:	f040 809e 	bne.w	8008c88 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b4c:	4b42      	ldr	r3, [pc, #264]	; (8008c58 <HAL_RCC_OscConfig+0x76c>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4a41      	ldr	r2, [pc, #260]	; (8008c58 <HAL_RCC_OscConfig+0x76c>)
 8008b52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008b56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b58:	f7fa fa14 	bl	8002f84 <HAL_GetTick>
 8008b5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008b5e:	e008      	b.n	8008b72 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b60:	f7fa fa10 	bl	8002f84 <HAL_GetTick>
 8008b64:	4602      	mov	r2, r0
 8008b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b68:	1ad3      	subs	r3, r2, r3
 8008b6a:	2b02      	cmp	r3, #2
 8008b6c:	d901      	bls.n	8008b72 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8008b6e:	2303      	movs	r3, #3
 8008b70:	e10e      	b.n	8008d90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008b72:	4b39      	ldr	r3, [pc, #228]	; (8008c58 <HAL_RCC_OscConfig+0x76c>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d1f0      	bne.n	8008b60 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008b7e:	4b36      	ldr	r3, [pc, #216]	; (8008c58 <HAL_RCC_OscConfig+0x76c>)
 8008b80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008b82:	4b37      	ldr	r3, [pc, #220]	; (8008c60 <HAL_RCC_OscConfig+0x774>)
 8008b84:	4013      	ands	r3, r2
 8008b86:	687a      	ldr	r2, [r7, #4]
 8008b88:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008b8a:	687a      	ldr	r2, [r7, #4]
 8008b8c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008b8e:	0112      	lsls	r2, r2, #4
 8008b90:	430a      	orrs	r2, r1
 8008b92:	4931      	ldr	r1, [pc, #196]	; (8008c58 <HAL_RCC_OscConfig+0x76c>)
 8008b94:	4313      	orrs	r3, r2
 8008b96:	628b      	str	r3, [r1, #40]	; 0x28
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b9c:	3b01      	subs	r3, #1
 8008b9e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ba6:	3b01      	subs	r3, #1
 8008ba8:	025b      	lsls	r3, r3, #9
 8008baa:	b29b      	uxth	r3, r3
 8008bac:	431a      	orrs	r2, r3
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bb2:	3b01      	subs	r3, #1
 8008bb4:	041b      	lsls	r3, r3, #16
 8008bb6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008bba:	431a      	orrs	r2, r3
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bc0:	3b01      	subs	r3, #1
 8008bc2:	061b      	lsls	r3, r3, #24
 8008bc4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008bc8:	4923      	ldr	r1, [pc, #140]	; (8008c58 <HAL_RCC_OscConfig+0x76c>)
 8008bca:	4313      	orrs	r3, r2
 8008bcc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008bce:	4b22      	ldr	r3, [pc, #136]	; (8008c58 <HAL_RCC_OscConfig+0x76c>)
 8008bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bd2:	4a21      	ldr	r2, [pc, #132]	; (8008c58 <HAL_RCC_OscConfig+0x76c>)
 8008bd4:	f023 0301 	bic.w	r3, r3, #1
 8008bd8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008bda:	4b1f      	ldr	r3, [pc, #124]	; (8008c58 <HAL_RCC_OscConfig+0x76c>)
 8008bdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008bde:	4b21      	ldr	r3, [pc, #132]	; (8008c64 <HAL_RCC_OscConfig+0x778>)
 8008be0:	4013      	ands	r3, r2
 8008be2:	687a      	ldr	r2, [r7, #4]
 8008be4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008be6:	00d2      	lsls	r2, r2, #3
 8008be8:	491b      	ldr	r1, [pc, #108]	; (8008c58 <HAL_RCC_OscConfig+0x76c>)
 8008bea:	4313      	orrs	r3, r2
 8008bec:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008bee:	4b1a      	ldr	r3, [pc, #104]	; (8008c58 <HAL_RCC_OscConfig+0x76c>)
 8008bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bf2:	f023 020c 	bic.w	r2, r3, #12
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bfa:	4917      	ldr	r1, [pc, #92]	; (8008c58 <HAL_RCC_OscConfig+0x76c>)
 8008bfc:	4313      	orrs	r3, r2
 8008bfe:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008c00:	4b15      	ldr	r3, [pc, #84]	; (8008c58 <HAL_RCC_OscConfig+0x76c>)
 8008c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c04:	f023 0202 	bic.w	r2, r3, #2
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c0c:	4912      	ldr	r1, [pc, #72]	; (8008c58 <HAL_RCC_OscConfig+0x76c>)
 8008c0e:	4313      	orrs	r3, r2
 8008c10:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008c12:	4b11      	ldr	r3, [pc, #68]	; (8008c58 <HAL_RCC_OscConfig+0x76c>)
 8008c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c16:	4a10      	ldr	r2, [pc, #64]	; (8008c58 <HAL_RCC_OscConfig+0x76c>)
 8008c18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c1c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c1e:	4b0e      	ldr	r3, [pc, #56]	; (8008c58 <HAL_RCC_OscConfig+0x76c>)
 8008c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c22:	4a0d      	ldr	r2, [pc, #52]	; (8008c58 <HAL_RCC_OscConfig+0x76c>)
 8008c24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c28:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008c2a:	4b0b      	ldr	r3, [pc, #44]	; (8008c58 <HAL_RCC_OscConfig+0x76c>)
 8008c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c2e:	4a0a      	ldr	r2, [pc, #40]	; (8008c58 <HAL_RCC_OscConfig+0x76c>)
 8008c30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008c34:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008c36:	4b08      	ldr	r3, [pc, #32]	; (8008c58 <HAL_RCC_OscConfig+0x76c>)
 8008c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c3a:	4a07      	ldr	r2, [pc, #28]	; (8008c58 <HAL_RCC_OscConfig+0x76c>)
 8008c3c:	f043 0301 	orr.w	r3, r3, #1
 8008c40:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008c42:	4b05      	ldr	r3, [pc, #20]	; (8008c58 <HAL_RCC_OscConfig+0x76c>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	4a04      	ldr	r2, [pc, #16]	; (8008c58 <HAL_RCC_OscConfig+0x76c>)
 8008c48:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008c4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c4e:	f7fa f999 	bl	8002f84 <HAL_GetTick>
 8008c52:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008c54:	e011      	b.n	8008c7a <HAL_RCC_OscConfig+0x78e>
 8008c56:	bf00      	nop
 8008c58:	58024400 	.word	0x58024400
 8008c5c:	58024800 	.word	0x58024800
 8008c60:	fffffc0c 	.word	0xfffffc0c
 8008c64:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c68:	f7fa f98c 	bl	8002f84 <HAL_GetTick>
 8008c6c:	4602      	mov	r2, r0
 8008c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c70:	1ad3      	subs	r3, r2, r3
 8008c72:	2b02      	cmp	r3, #2
 8008c74:	d901      	bls.n	8008c7a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008c76:	2303      	movs	r3, #3
 8008c78:	e08a      	b.n	8008d90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008c7a:	4b47      	ldr	r3, [pc, #284]	; (8008d98 <HAL_RCC_OscConfig+0x8ac>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d0f0      	beq.n	8008c68 <HAL_RCC_OscConfig+0x77c>
 8008c86:	e082      	b.n	8008d8e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008c88:	4b43      	ldr	r3, [pc, #268]	; (8008d98 <HAL_RCC_OscConfig+0x8ac>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	4a42      	ldr	r2, [pc, #264]	; (8008d98 <HAL_RCC_OscConfig+0x8ac>)
 8008c8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008c92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c94:	f7fa f976 	bl	8002f84 <HAL_GetTick>
 8008c98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008c9a:	e008      	b.n	8008cae <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c9c:	f7fa f972 	bl	8002f84 <HAL_GetTick>
 8008ca0:	4602      	mov	r2, r0
 8008ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ca4:	1ad3      	subs	r3, r2, r3
 8008ca6:	2b02      	cmp	r3, #2
 8008ca8:	d901      	bls.n	8008cae <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8008caa:	2303      	movs	r3, #3
 8008cac:	e070      	b.n	8008d90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008cae:	4b3a      	ldr	r3, [pc, #232]	; (8008d98 <HAL_RCC_OscConfig+0x8ac>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d1f0      	bne.n	8008c9c <HAL_RCC_OscConfig+0x7b0>
 8008cba:	e068      	b.n	8008d8e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008cbc:	4b36      	ldr	r3, [pc, #216]	; (8008d98 <HAL_RCC_OscConfig+0x8ac>)
 8008cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cc0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008cc2:	4b35      	ldr	r3, [pc, #212]	; (8008d98 <HAL_RCC_OscConfig+0x8ac>)
 8008cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cc6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ccc:	2b01      	cmp	r3, #1
 8008cce:	d031      	beq.n	8008d34 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008cd0:	693b      	ldr	r3, [r7, #16]
 8008cd2:	f003 0203 	and.w	r2, r3, #3
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008cda:	429a      	cmp	r2, r3
 8008cdc:	d12a      	bne.n	8008d34 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008cde:	693b      	ldr	r3, [r7, #16]
 8008ce0:	091b      	lsrs	r3, r3, #4
 8008ce2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008cea:	429a      	cmp	r2, r3
 8008cec:	d122      	bne.n	8008d34 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cf8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008cfa:	429a      	cmp	r2, r3
 8008cfc:	d11a      	bne.n	8008d34 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	0a5b      	lsrs	r3, r3, #9
 8008d02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d0a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008d0c:	429a      	cmp	r2, r3
 8008d0e:	d111      	bne.n	8008d34 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	0c1b      	lsrs	r3, r3, #16
 8008d14:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d1c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008d1e:	429a      	cmp	r2, r3
 8008d20:	d108      	bne.n	8008d34 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	0e1b      	lsrs	r3, r3, #24
 8008d26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d2e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008d30:	429a      	cmp	r2, r3
 8008d32:	d001      	beq.n	8008d38 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008d34:	2301      	movs	r3, #1
 8008d36:	e02b      	b.n	8008d90 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008d38:	4b17      	ldr	r3, [pc, #92]	; (8008d98 <HAL_RCC_OscConfig+0x8ac>)
 8008d3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d3c:	08db      	lsrs	r3, r3, #3
 8008d3e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008d42:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d48:	693a      	ldr	r2, [r7, #16]
 8008d4a:	429a      	cmp	r2, r3
 8008d4c:	d01f      	beq.n	8008d8e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008d4e:	4b12      	ldr	r3, [pc, #72]	; (8008d98 <HAL_RCC_OscConfig+0x8ac>)
 8008d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d52:	4a11      	ldr	r2, [pc, #68]	; (8008d98 <HAL_RCC_OscConfig+0x8ac>)
 8008d54:	f023 0301 	bic.w	r3, r3, #1
 8008d58:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008d5a:	f7fa f913 	bl	8002f84 <HAL_GetTick>
 8008d5e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008d60:	bf00      	nop
 8008d62:	f7fa f90f 	bl	8002f84 <HAL_GetTick>
 8008d66:	4602      	mov	r2, r0
 8008d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d0f9      	beq.n	8008d62 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008d6e:	4b0a      	ldr	r3, [pc, #40]	; (8008d98 <HAL_RCC_OscConfig+0x8ac>)
 8008d70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d72:	4b0a      	ldr	r3, [pc, #40]	; (8008d9c <HAL_RCC_OscConfig+0x8b0>)
 8008d74:	4013      	ands	r3, r2
 8008d76:	687a      	ldr	r2, [r7, #4]
 8008d78:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008d7a:	00d2      	lsls	r2, r2, #3
 8008d7c:	4906      	ldr	r1, [pc, #24]	; (8008d98 <HAL_RCC_OscConfig+0x8ac>)
 8008d7e:	4313      	orrs	r3, r2
 8008d80:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008d82:	4b05      	ldr	r3, [pc, #20]	; (8008d98 <HAL_RCC_OscConfig+0x8ac>)
 8008d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d86:	4a04      	ldr	r2, [pc, #16]	; (8008d98 <HAL_RCC_OscConfig+0x8ac>)
 8008d88:	f043 0301 	orr.w	r3, r3, #1
 8008d8c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008d8e:	2300      	movs	r3, #0
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	3730      	adds	r7, #48	; 0x30
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd80      	pop	{r7, pc}
 8008d98:	58024400 	.word	0x58024400
 8008d9c:	ffff0007 	.word	0xffff0007

08008da0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b086      	sub	sp, #24
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
 8008da8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d101      	bne.n	8008db4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008db0:	2301      	movs	r3, #1
 8008db2:	e19c      	b.n	80090ee <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008db4:	4b8a      	ldr	r3, [pc, #552]	; (8008fe0 <HAL_RCC_ClockConfig+0x240>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f003 030f 	and.w	r3, r3, #15
 8008dbc:	683a      	ldr	r2, [r7, #0]
 8008dbe:	429a      	cmp	r2, r3
 8008dc0:	d910      	bls.n	8008de4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008dc2:	4b87      	ldr	r3, [pc, #540]	; (8008fe0 <HAL_RCC_ClockConfig+0x240>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f023 020f 	bic.w	r2, r3, #15
 8008dca:	4985      	ldr	r1, [pc, #532]	; (8008fe0 <HAL_RCC_ClockConfig+0x240>)
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	4313      	orrs	r3, r2
 8008dd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008dd2:	4b83      	ldr	r3, [pc, #524]	; (8008fe0 <HAL_RCC_ClockConfig+0x240>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f003 030f 	and.w	r3, r3, #15
 8008dda:	683a      	ldr	r2, [r7, #0]
 8008ddc:	429a      	cmp	r2, r3
 8008dde:	d001      	beq.n	8008de4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008de0:	2301      	movs	r3, #1
 8008de2:	e184      	b.n	80090ee <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f003 0304 	and.w	r3, r3, #4
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d010      	beq.n	8008e12 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	691a      	ldr	r2, [r3, #16]
 8008df4:	4b7b      	ldr	r3, [pc, #492]	; (8008fe4 <HAL_RCC_ClockConfig+0x244>)
 8008df6:	699b      	ldr	r3, [r3, #24]
 8008df8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008dfc:	429a      	cmp	r2, r3
 8008dfe:	d908      	bls.n	8008e12 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008e00:	4b78      	ldr	r3, [pc, #480]	; (8008fe4 <HAL_RCC_ClockConfig+0x244>)
 8008e02:	699b      	ldr	r3, [r3, #24]
 8008e04:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	691b      	ldr	r3, [r3, #16]
 8008e0c:	4975      	ldr	r1, [pc, #468]	; (8008fe4 <HAL_RCC_ClockConfig+0x244>)
 8008e0e:	4313      	orrs	r3, r2
 8008e10:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f003 0308 	and.w	r3, r3, #8
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d010      	beq.n	8008e40 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	695a      	ldr	r2, [r3, #20]
 8008e22:	4b70      	ldr	r3, [pc, #448]	; (8008fe4 <HAL_RCC_ClockConfig+0x244>)
 8008e24:	69db      	ldr	r3, [r3, #28]
 8008e26:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008e2a:	429a      	cmp	r2, r3
 8008e2c:	d908      	bls.n	8008e40 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008e2e:	4b6d      	ldr	r3, [pc, #436]	; (8008fe4 <HAL_RCC_ClockConfig+0x244>)
 8008e30:	69db      	ldr	r3, [r3, #28]
 8008e32:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	695b      	ldr	r3, [r3, #20]
 8008e3a:	496a      	ldr	r1, [pc, #424]	; (8008fe4 <HAL_RCC_ClockConfig+0x244>)
 8008e3c:	4313      	orrs	r3, r2
 8008e3e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f003 0310 	and.w	r3, r3, #16
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d010      	beq.n	8008e6e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	699a      	ldr	r2, [r3, #24]
 8008e50:	4b64      	ldr	r3, [pc, #400]	; (8008fe4 <HAL_RCC_ClockConfig+0x244>)
 8008e52:	69db      	ldr	r3, [r3, #28]
 8008e54:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008e58:	429a      	cmp	r2, r3
 8008e5a:	d908      	bls.n	8008e6e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008e5c:	4b61      	ldr	r3, [pc, #388]	; (8008fe4 <HAL_RCC_ClockConfig+0x244>)
 8008e5e:	69db      	ldr	r3, [r3, #28]
 8008e60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	699b      	ldr	r3, [r3, #24]
 8008e68:	495e      	ldr	r1, [pc, #376]	; (8008fe4 <HAL_RCC_ClockConfig+0x244>)
 8008e6a:	4313      	orrs	r3, r2
 8008e6c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f003 0320 	and.w	r3, r3, #32
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d010      	beq.n	8008e9c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	69da      	ldr	r2, [r3, #28]
 8008e7e:	4b59      	ldr	r3, [pc, #356]	; (8008fe4 <HAL_RCC_ClockConfig+0x244>)
 8008e80:	6a1b      	ldr	r3, [r3, #32]
 8008e82:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008e86:	429a      	cmp	r2, r3
 8008e88:	d908      	bls.n	8008e9c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008e8a:	4b56      	ldr	r3, [pc, #344]	; (8008fe4 <HAL_RCC_ClockConfig+0x244>)
 8008e8c:	6a1b      	ldr	r3, [r3, #32]
 8008e8e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	69db      	ldr	r3, [r3, #28]
 8008e96:	4953      	ldr	r1, [pc, #332]	; (8008fe4 <HAL_RCC_ClockConfig+0x244>)
 8008e98:	4313      	orrs	r3, r2
 8008e9a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f003 0302 	and.w	r3, r3, #2
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d010      	beq.n	8008eca <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	68da      	ldr	r2, [r3, #12]
 8008eac:	4b4d      	ldr	r3, [pc, #308]	; (8008fe4 <HAL_RCC_ClockConfig+0x244>)
 8008eae:	699b      	ldr	r3, [r3, #24]
 8008eb0:	f003 030f 	and.w	r3, r3, #15
 8008eb4:	429a      	cmp	r2, r3
 8008eb6:	d908      	bls.n	8008eca <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008eb8:	4b4a      	ldr	r3, [pc, #296]	; (8008fe4 <HAL_RCC_ClockConfig+0x244>)
 8008eba:	699b      	ldr	r3, [r3, #24]
 8008ebc:	f023 020f 	bic.w	r2, r3, #15
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	68db      	ldr	r3, [r3, #12]
 8008ec4:	4947      	ldr	r1, [pc, #284]	; (8008fe4 <HAL_RCC_ClockConfig+0x244>)
 8008ec6:	4313      	orrs	r3, r2
 8008ec8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f003 0301 	and.w	r3, r3, #1
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d055      	beq.n	8008f82 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008ed6:	4b43      	ldr	r3, [pc, #268]	; (8008fe4 <HAL_RCC_ClockConfig+0x244>)
 8008ed8:	699b      	ldr	r3, [r3, #24]
 8008eda:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	689b      	ldr	r3, [r3, #8]
 8008ee2:	4940      	ldr	r1, [pc, #256]	; (8008fe4 <HAL_RCC_ClockConfig+0x244>)
 8008ee4:	4313      	orrs	r3, r2
 8008ee6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	685b      	ldr	r3, [r3, #4]
 8008eec:	2b02      	cmp	r3, #2
 8008eee:	d107      	bne.n	8008f00 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008ef0:	4b3c      	ldr	r3, [pc, #240]	; (8008fe4 <HAL_RCC_ClockConfig+0x244>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d121      	bne.n	8008f40 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008efc:	2301      	movs	r3, #1
 8008efe:	e0f6      	b.n	80090ee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	685b      	ldr	r3, [r3, #4]
 8008f04:	2b03      	cmp	r3, #3
 8008f06:	d107      	bne.n	8008f18 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008f08:	4b36      	ldr	r3, [pc, #216]	; (8008fe4 <HAL_RCC_ClockConfig+0x244>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d115      	bne.n	8008f40 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008f14:	2301      	movs	r3, #1
 8008f16:	e0ea      	b.n	80090ee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	685b      	ldr	r3, [r3, #4]
 8008f1c:	2b01      	cmp	r3, #1
 8008f1e:	d107      	bne.n	8008f30 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008f20:	4b30      	ldr	r3, [pc, #192]	; (8008fe4 <HAL_RCC_ClockConfig+0x244>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d109      	bne.n	8008f40 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	e0de      	b.n	80090ee <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008f30:	4b2c      	ldr	r3, [pc, #176]	; (8008fe4 <HAL_RCC_ClockConfig+0x244>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f003 0304 	and.w	r3, r3, #4
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d101      	bne.n	8008f40 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	e0d6      	b.n	80090ee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008f40:	4b28      	ldr	r3, [pc, #160]	; (8008fe4 <HAL_RCC_ClockConfig+0x244>)
 8008f42:	691b      	ldr	r3, [r3, #16]
 8008f44:	f023 0207 	bic.w	r2, r3, #7
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	685b      	ldr	r3, [r3, #4]
 8008f4c:	4925      	ldr	r1, [pc, #148]	; (8008fe4 <HAL_RCC_ClockConfig+0x244>)
 8008f4e:	4313      	orrs	r3, r2
 8008f50:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f52:	f7fa f817 	bl	8002f84 <HAL_GetTick>
 8008f56:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008f58:	e00a      	b.n	8008f70 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008f5a:	f7fa f813 	bl	8002f84 <HAL_GetTick>
 8008f5e:	4602      	mov	r2, r0
 8008f60:	697b      	ldr	r3, [r7, #20]
 8008f62:	1ad3      	subs	r3, r2, r3
 8008f64:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d901      	bls.n	8008f70 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008f6c:	2303      	movs	r3, #3
 8008f6e:	e0be      	b.n	80090ee <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008f70:	4b1c      	ldr	r3, [pc, #112]	; (8008fe4 <HAL_RCC_ClockConfig+0x244>)
 8008f72:	691b      	ldr	r3, [r3, #16]
 8008f74:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	685b      	ldr	r3, [r3, #4]
 8008f7c:	00db      	lsls	r3, r3, #3
 8008f7e:	429a      	cmp	r2, r3
 8008f80:	d1eb      	bne.n	8008f5a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f003 0302 	and.w	r3, r3, #2
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d010      	beq.n	8008fb0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	68da      	ldr	r2, [r3, #12]
 8008f92:	4b14      	ldr	r3, [pc, #80]	; (8008fe4 <HAL_RCC_ClockConfig+0x244>)
 8008f94:	699b      	ldr	r3, [r3, #24]
 8008f96:	f003 030f 	and.w	r3, r3, #15
 8008f9a:	429a      	cmp	r2, r3
 8008f9c:	d208      	bcs.n	8008fb0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008f9e:	4b11      	ldr	r3, [pc, #68]	; (8008fe4 <HAL_RCC_ClockConfig+0x244>)
 8008fa0:	699b      	ldr	r3, [r3, #24]
 8008fa2:	f023 020f 	bic.w	r2, r3, #15
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	68db      	ldr	r3, [r3, #12]
 8008faa:	490e      	ldr	r1, [pc, #56]	; (8008fe4 <HAL_RCC_ClockConfig+0x244>)
 8008fac:	4313      	orrs	r3, r2
 8008fae:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008fb0:	4b0b      	ldr	r3, [pc, #44]	; (8008fe0 <HAL_RCC_ClockConfig+0x240>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f003 030f 	and.w	r3, r3, #15
 8008fb8:	683a      	ldr	r2, [r7, #0]
 8008fba:	429a      	cmp	r2, r3
 8008fbc:	d214      	bcs.n	8008fe8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008fbe:	4b08      	ldr	r3, [pc, #32]	; (8008fe0 <HAL_RCC_ClockConfig+0x240>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f023 020f 	bic.w	r2, r3, #15
 8008fc6:	4906      	ldr	r1, [pc, #24]	; (8008fe0 <HAL_RCC_ClockConfig+0x240>)
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	4313      	orrs	r3, r2
 8008fcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008fce:	4b04      	ldr	r3, [pc, #16]	; (8008fe0 <HAL_RCC_ClockConfig+0x240>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f003 030f 	and.w	r3, r3, #15
 8008fd6:	683a      	ldr	r2, [r7, #0]
 8008fd8:	429a      	cmp	r2, r3
 8008fda:	d005      	beq.n	8008fe8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008fdc:	2301      	movs	r3, #1
 8008fde:	e086      	b.n	80090ee <HAL_RCC_ClockConfig+0x34e>
 8008fe0:	52002000 	.word	0x52002000
 8008fe4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f003 0304 	and.w	r3, r3, #4
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d010      	beq.n	8009016 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	691a      	ldr	r2, [r3, #16]
 8008ff8:	4b3f      	ldr	r3, [pc, #252]	; (80090f8 <HAL_RCC_ClockConfig+0x358>)
 8008ffa:	699b      	ldr	r3, [r3, #24]
 8008ffc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009000:	429a      	cmp	r2, r3
 8009002:	d208      	bcs.n	8009016 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009004:	4b3c      	ldr	r3, [pc, #240]	; (80090f8 <HAL_RCC_ClockConfig+0x358>)
 8009006:	699b      	ldr	r3, [r3, #24]
 8009008:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	691b      	ldr	r3, [r3, #16]
 8009010:	4939      	ldr	r1, [pc, #228]	; (80090f8 <HAL_RCC_ClockConfig+0x358>)
 8009012:	4313      	orrs	r3, r2
 8009014:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f003 0308 	and.w	r3, r3, #8
 800901e:	2b00      	cmp	r3, #0
 8009020:	d010      	beq.n	8009044 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	695a      	ldr	r2, [r3, #20]
 8009026:	4b34      	ldr	r3, [pc, #208]	; (80090f8 <HAL_RCC_ClockConfig+0x358>)
 8009028:	69db      	ldr	r3, [r3, #28]
 800902a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800902e:	429a      	cmp	r2, r3
 8009030:	d208      	bcs.n	8009044 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009032:	4b31      	ldr	r3, [pc, #196]	; (80090f8 <HAL_RCC_ClockConfig+0x358>)
 8009034:	69db      	ldr	r3, [r3, #28]
 8009036:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	695b      	ldr	r3, [r3, #20]
 800903e:	492e      	ldr	r1, [pc, #184]	; (80090f8 <HAL_RCC_ClockConfig+0x358>)
 8009040:	4313      	orrs	r3, r2
 8009042:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f003 0310 	and.w	r3, r3, #16
 800904c:	2b00      	cmp	r3, #0
 800904e:	d010      	beq.n	8009072 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	699a      	ldr	r2, [r3, #24]
 8009054:	4b28      	ldr	r3, [pc, #160]	; (80090f8 <HAL_RCC_ClockConfig+0x358>)
 8009056:	69db      	ldr	r3, [r3, #28]
 8009058:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800905c:	429a      	cmp	r2, r3
 800905e:	d208      	bcs.n	8009072 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009060:	4b25      	ldr	r3, [pc, #148]	; (80090f8 <HAL_RCC_ClockConfig+0x358>)
 8009062:	69db      	ldr	r3, [r3, #28]
 8009064:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	699b      	ldr	r3, [r3, #24]
 800906c:	4922      	ldr	r1, [pc, #136]	; (80090f8 <HAL_RCC_ClockConfig+0x358>)
 800906e:	4313      	orrs	r3, r2
 8009070:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f003 0320 	and.w	r3, r3, #32
 800907a:	2b00      	cmp	r3, #0
 800907c:	d010      	beq.n	80090a0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	69da      	ldr	r2, [r3, #28]
 8009082:	4b1d      	ldr	r3, [pc, #116]	; (80090f8 <HAL_RCC_ClockConfig+0x358>)
 8009084:	6a1b      	ldr	r3, [r3, #32]
 8009086:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800908a:	429a      	cmp	r2, r3
 800908c:	d208      	bcs.n	80090a0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800908e:	4b1a      	ldr	r3, [pc, #104]	; (80090f8 <HAL_RCC_ClockConfig+0x358>)
 8009090:	6a1b      	ldr	r3, [r3, #32]
 8009092:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	69db      	ldr	r3, [r3, #28]
 800909a:	4917      	ldr	r1, [pc, #92]	; (80090f8 <HAL_RCC_ClockConfig+0x358>)
 800909c:	4313      	orrs	r3, r2
 800909e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80090a0:	f000 f834 	bl	800910c <HAL_RCC_GetSysClockFreq>
 80090a4:	4602      	mov	r2, r0
 80090a6:	4b14      	ldr	r3, [pc, #80]	; (80090f8 <HAL_RCC_ClockConfig+0x358>)
 80090a8:	699b      	ldr	r3, [r3, #24]
 80090aa:	0a1b      	lsrs	r3, r3, #8
 80090ac:	f003 030f 	and.w	r3, r3, #15
 80090b0:	4912      	ldr	r1, [pc, #72]	; (80090fc <HAL_RCC_ClockConfig+0x35c>)
 80090b2:	5ccb      	ldrb	r3, [r1, r3]
 80090b4:	f003 031f 	and.w	r3, r3, #31
 80090b8:	fa22 f303 	lsr.w	r3, r2, r3
 80090bc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80090be:	4b0e      	ldr	r3, [pc, #56]	; (80090f8 <HAL_RCC_ClockConfig+0x358>)
 80090c0:	699b      	ldr	r3, [r3, #24]
 80090c2:	f003 030f 	and.w	r3, r3, #15
 80090c6:	4a0d      	ldr	r2, [pc, #52]	; (80090fc <HAL_RCC_ClockConfig+0x35c>)
 80090c8:	5cd3      	ldrb	r3, [r2, r3]
 80090ca:	f003 031f 	and.w	r3, r3, #31
 80090ce:	693a      	ldr	r2, [r7, #16]
 80090d0:	fa22 f303 	lsr.w	r3, r2, r3
 80090d4:	4a0a      	ldr	r2, [pc, #40]	; (8009100 <HAL_RCC_ClockConfig+0x360>)
 80090d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80090d8:	4a0a      	ldr	r2, [pc, #40]	; (8009104 <HAL_RCC_ClockConfig+0x364>)
 80090da:	693b      	ldr	r3, [r7, #16]
 80090dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80090de:	4b0a      	ldr	r3, [pc, #40]	; (8009108 <HAL_RCC_ClockConfig+0x368>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	4618      	mov	r0, r3
 80090e4:	f7f9 fc86 	bl	80029f4 <HAL_InitTick>
 80090e8:	4603      	mov	r3, r0
 80090ea:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80090ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	3718      	adds	r7, #24
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}
 80090f6:	bf00      	nop
 80090f8:	58024400 	.word	0x58024400
 80090fc:	080154d4 	.word	0x080154d4
 8009100:	2400008c 	.word	0x2400008c
 8009104:	24000088 	.word	0x24000088
 8009108:	24000090 	.word	0x24000090

0800910c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800910c:	b480      	push	{r7}
 800910e:	b089      	sub	sp, #36	; 0x24
 8009110:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009112:	4bb3      	ldr	r3, [pc, #716]	; (80093e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009114:	691b      	ldr	r3, [r3, #16]
 8009116:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800911a:	2b18      	cmp	r3, #24
 800911c:	f200 8155 	bhi.w	80093ca <HAL_RCC_GetSysClockFreq+0x2be>
 8009120:	a201      	add	r2, pc, #4	; (adr r2, 8009128 <HAL_RCC_GetSysClockFreq+0x1c>)
 8009122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009126:	bf00      	nop
 8009128:	0800918d 	.word	0x0800918d
 800912c:	080093cb 	.word	0x080093cb
 8009130:	080093cb 	.word	0x080093cb
 8009134:	080093cb 	.word	0x080093cb
 8009138:	080093cb 	.word	0x080093cb
 800913c:	080093cb 	.word	0x080093cb
 8009140:	080093cb 	.word	0x080093cb
 8009144:	080093cb 	.word	0x080093cb
 8009148:	080091b3 	.word	0x080091b3
 800914c:	080093cb 	.word	0x080093cb
 8009150:	080093cb 	.word	0x080093cb
 8009154:	080093cb 	.word	0x080093cb
 8009158:	080093cb 	.word	0x080093cb
 800915c:	080093cb 	.word	0x080093cb
 8009160:	080093cb 	.word	0x080093cb
 8009164:	080093cb 	.word	0x080093cb
 8009168:	080091b9 	.word	0x080091b9
 800916c:	080093cb 	.word	0x080093cb
 8009170:	080093cb 	.word	0x080093cb
 8009174:	080093cb 	.word	0x080093cb
 8009178:	080093cb 	.word	0x080093cb
 800917c:	080093cb 	.word	0x080093cb
 8009180:	080093cb 	.word	0x080093cb
 8009184:	080093cb 	.word	0x080093cb
 8009188:	080091bf 	.word	0x080091bf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800918c:	4b94      	ldr	r3, [pc, #592]	; (80093e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f003 0320 	and.w	r3, r3, #32
 8009194:	2b00      	cmp	r3, #0
 8009196:	d009      	beq.n	80091ac <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009198:	4b91      	ldr	r3, [pc, #580]	; (80093e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	08db      	lsrs	r3, r3, #3
 800919e:	f003 0303 	and.w	r3, r3, #3
 80091a2:	4a90      	ldr	r2, [pc, #576]	; (80093e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80091a4:	fa22 f303 	lsr.w	r3, r2, r3
 80091a8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80091aa:	e111      	b.n	80093d0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80091ac:	4b8d      	ldr	r3, [pc, #564]	; (80093e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80091ae:	61bb      	str	r3, [r7, #24]
      break;
 80091b0:	e10e      	b.n	80093d0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80091b2:	4b8d      	ldr	r3, [pc, #564]	; (80093e8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80091b4:	61bb      	str	r3, [r7, #24]
      break;
 80091b6:	e10b      	b.n	80093d0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80091b8:	4b8c      	ldr	r3, [pc, #560]	; (80093ec <HAL_RCC_GetSysClockFreq+0x2e0>)
 80091ba:	61bb      	str	r3, [r7, #24]
      break;
 80091bc:	e108      	b.n	80093d0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80091be:	4b88      	ldr	r3, [pc, #544]	; (80093e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80091c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091c2:	f003 0303 	and.w	r3, r3, #3
 80091c6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80091c8:	4b85      	ldr	r3, [pc, #532]	; (80093e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80091ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091cc:	091b      	lsrs	r3, r3, #4
 80091ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80091d2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80091d4:	4b82      	ldr	r3, [pc, #520]	; (80093e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80091d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091d8:	f003 0301 	and.w	r3, r3, #1
 80091dc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80091de:	4b80      	ldr	r3, [pc, #512]	; (80093e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80091e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091e2:	08db      	lsrs	r3, r3, #3
 80091e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80091e8:	68fa      	ldr	r2, [r7, #12]
 80091ea:	fb02 f303 	mul.w	r3, r2, r3
 80091ee:	ee07 3a90 	vmov	s15, r3
 80091f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091f6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80091fa:	693b      	ldr	r3, [r7, #16]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	f000 80e1 	beq.w	80093c4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	2b02      	cmp	r3, #2
 8009206:	f000 8083 	beq.w	8009310 <HAL_RCC_GetSysClockFreq+0x204>
 800920a:	697b      	ldr	r3, [r7, #20]
 800920c:	2b02      	cmp	r3, #2
 800920e:	f200 80a1 	bhi.w	8009354 <HAL_RCC_GetSysClockFreq+0x248>
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d003      	beq.n	8009220 <HAL_RCC_GetSysClockFreq+0x114>
 8009218:	697b      	ldr	r3, [r7, #20]
 800921a:	2b01      	cmp	r3, #1
 800921c:	d056      	beq.n	80092cc <HAL_RCC_GetSysClockFreq+0x1c0>
 800921e:	e099      	b.n	8009354 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009220:	4b6f      	ldr	r3, [pc, #444]	; (80093e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f003 0320 	and.w	r3, r3, #32
 8009228:	2b00      	cmp	r3, #0
 800922a:	d02d      	beq.n	8009288 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800922c:	4b6c      	ldr	r3, [pc, #432]	; (80093e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	08db      	lsrs	r3, r3, #3
 8009232:	f003 0303 	and.w	r3, r3, #3
 8009236:	4a6b      	ldr	r2, [pc, #428]	; (80093e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009238:	fa22 f303 	lsr.w	r3, r2, r3
 800923c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	ee07 3a90 	vmov	s15, r3
 8009244:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009248:	693b      	ldr	r3, [r7, #16]
 800924a:	ee07 3a90 	vmov	s15, r3
 800924e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009252:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009256:	4b62      	ldr	r3, [pc, #392]	; (80093e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800925a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800925e:	ee07 3a90 	vmov	s15, r3
 8009262:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009266:	ed97 6a02 	vldr	s12, [r7, #8]
 800926a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80093f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800926e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009272:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009276:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800927a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800927e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009282:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8009286:	e087      	b.n	8009398 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	ee07 3a90 	vmov	s15, r3
 800928e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009292:	eddf 6a58 	vldr	s13, [pc, #352]	; 80093f4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009296:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800929a:	4b51      	ldr	r3, [pc, #324]	; (80093e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800929c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800929e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092a2:	ee07 3a90 	vmov	s15, r3
 80092a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80092ae:	eddf 5a50 	vldr	s11, [pc, #320]	; 80093f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80092b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80092be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80092ca:	e065      	b.n	8009398 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80092cc:	693b      	ldr	r3, [r7, #16]
 80092ce:	ee07 3a90 	vmov	s15, r3
 80092d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092d6:	eddf 6a48 	vldr	s13, [pc, #288]	; 80093f8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80092da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092de:	4b40      	ldr	r3, [pc, #256]	; (80093e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092e6:	ee07 3a90 	vmov	s15, r3
 80092ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80092f2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80093f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80092f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009302:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009306:	ee67 7a27 	vmul.f32	s15, s14, s15
 800930a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800930e:	e043      	b.n	8009398 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009310:	693b      	ldr	r3, [r7, #16]
 8009312:	ee07 3a90 	vmov	s15, r3
 8009316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800931a:	eddf 6a38 	vldr	s13, [pc, #224]	; 80093fc <HAL_RCC_GetSysClockFreq+0x2f0>
 800931e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009322:	4b2f      	ldr	r3, [pc, #188]	; (80093e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009326:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800932a:	ee07 3a90 	vmov	s15, r3
 800932e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009332:	ed97 6a02 	vldr	s12, [r7, #8]
 8009336:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80093f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800933a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800933e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009342:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009346:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800934a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800934e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009352:	e021      	b.n	8009398 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009354:	693b      	ldr	r3, [r7, #16]
 8009356:	ee07 3a90 	vmov	s15, r3
 800935a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800935e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80093f8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009362:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009366:	4b1e      	ldr	r3, [pc, #120]	; (80093e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800936a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800936e:	ee07 3a90 	vmov	s15, r3
 8009372:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009376:	ed97 6a02 	vldr	s12, [r7, #8]
 800937a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80093f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800937e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009382:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009386:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800938a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800938e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009392:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009396:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009398:	4b11      	ldr	r3, [pc, #68]	; (80093e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800939a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800939c:	0a5b      	lsrs	r3, r3, #9
 800939e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093a2:	3301      	adds	r3, #1
 80093a4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	ee07 3a90 	vmov	s15, r3
 80093ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80093b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80093b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80093b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80093bc:	ee17 3a90 	vmov	r3, s15
 80093c0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80093c2:	e005      	b.n	80093d0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80093c4:	2300      	movs	r3, #0
 80093c6:	61bb      	str	r3, [r7, #24]
      break;
 80093c8:	e002      	b.n	80093d0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80093ca:	4b07      	ldr	r3, [pc, #28]	; (80093e8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80093cc:	61bb      	str	r3, [r7, #24]
      break;
 80093ce:	bf00      	nop
  }

  return sysclockfreq;
 80093d0:	69bb      	ldr	r3, [r7, #24]
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	3724      	adds	r7, #36	; 0x24
 80093d6:	46bd      	mov	sp, r7
 80093d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093dc:	4770      	bx	lr
 80093de:	bf00      	nop
 80093e0:	58024400 	.word	0x58024400
 80093e4:	03d09000 	.word	0x03d09000
 80093e8:	003d0900 	.word	0x003d0900
 80093ec:	017d7840 	.word	0x017d7840
 80093f0:	46000000 	.word	0x46000000
 80093f4:	4c742400 	.word	0x4c742400
 80093f8:	4a742400 	.word	0x4a742400
 80093fc:	4bbebc20 	.word	0x4bbebc20

08009400 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b082      	sub	sp, #8
 8009404:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009406:	f7ff fe81 	bl	800910c <HAL_RCC_GetSysClockFreq>
 800940a:	4602      	mov	r2, r0
 800940c:	4b10      	ldr	r3, [pc, #64]	; (8009450 <HAL_RCC_GetHCLKFreq+0x50>)
 800940e:	699b      	ldr	r3, [r3, #24]
 8009410:	0a1b      	lsrs	r3, r3, #8
 8009412:	f003 030f 	and.w	r3, r3, #15
 8009416:	490f      	ldr	r1, [pc, #60]	; (8009454 <HAL_RCC_GetHCLKFreq+0x54>)
 8009418:	5ccb      	ldrb	r3, [r1, r3]
 800941a:	f003 031f 	and.w	r3, r3, #31
 800941e:	fa22 f303 	lsr.w	r3, r2, r3
 8009422:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009424:	4b0a      	ldr	r3, [pc, #40]	; (8009450 <HAL_RCC_GetHCLKFreq+0x50>)
 8009426:	699b      	ldr	r3, [r3, #24]
 8009428:	f003 030f 	and.w	r3, r3, #15
 800942c:	4a09      	ldr	r2, [pc, #36]	; (8009454 <HAL_RCC_GetHCLKFreq+0x54>)
 800942e:	5cd3      	ldrb	r3, [r2, r3]
 8009430:	f003 031f 	and.w	r3, r3, #31
 8009434:	687a      	ldr	r2, [r7, #4]
 8009436:	fa22 f303 	lsr.w	r3, r2, r3
 800943a:	4a07      	ldr	r2, [pc, #28]	; (8009458 <HAL_RCC_GetHCLKFreq+0x58>)
 800943c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800943e:	4a07      	ldr	r2, [pc, #28]	; (800945c <HAL_RCC_GetHCLKFreq+0x5c>)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009444:	4b04      	ldr	r3, [pc, #16]	; (8009458 <HAL_RCC_GetHCLKFreq+0x58>)
 8009446:	681b      	ldr	r3, [r3, #0]
}
 8009448:	4618      	mov	r0, r3
 800944a:	3708      	adds	r7, #8
 800944c:	46bd      	mov	sp, r7
 800944e:	bd80      	pop	{r7, pc}
 8009450:	58024400 	.word	0x58024400
 8009454:	080154d4 	.word	0x080154d4
 8009458:	2400008c 	.word	0x2400008c
 800945c:	24000088 	.word	0x24000088

08009460 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009464:	f7ff ffcc 	bl	8009400 <HAL_RCC_GetHCLKFreq>
 8009468:	4602      	mov	r2, r0
 800946a:	4b06      	ldr	r3, [pc, #24]	; (8009484 <HAL_RCC_GetPCLK1Freq+0x24>)
 800946c:	69db      	ldr	r3, [r3, #28]
 800946e:	091b      	lsrs	r3, r3, #4
 8009470:	f003 0307 	and.w	r3, r3, #7
 8009474:	4904      	ldr	r1, [pc, #16]	; (8009488 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009476:	5ccb      	ldrb	r3, [r1, r3]
 8009478:	f003 031f 	and.w	r3, r3, #31
 800947c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009480:	4618      	mov	r0, r3
 8009482:	bd80      	pop	{r7, pc}
 8009484:	58024400 	.word	0x58024400
 8009488:	080154d4 	.word	0x080154d4

0800948c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009490:	f7ff ffb6 	bl	8009400 <HAL_RCC_GetHCLKFreq>
 8009494:	4602      	mov	r2, r0
 8009496:	4b06      	ldr	r3, [pc, #24]	; (80094b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009498:	69db      	ldr	r3, [r3, #28]
 800949a:	0a1b      	lsrs	r3, r3, #8
 800949c:	f003 0307 	and.w	r3, r3, #7
 80094a0:	4904      	ldr	r1, [pc, #16]	; (80094b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80094a2:	5ccb      	ldrb	r3, [r1, r3]
 80094a4:	f003 031f 	and.w	r3, r3, #31
 80094a8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80094ac:	4618      	mov	r0, r3
 80094ae:	bd80      	pop	{r7, pc}
 80094b0:	58024400 	.word	0x58024400
 80094b4:	080154d4 	.word	0x080154d4

080094b8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80094b8:	b480      	push	{r7}
 80094ba:	b083      	sub	sp, #12
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
 80094c0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	223f      	movs	r2, #63	; 0x3f
 80094c6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80094c8:	4b1a      	ldr	r3, [pc, #104]	; (8009534 <HAL_RCC_GetClockConfig+0x7c>)
 80094ca:	691b      	ldr	r3, [r3, #16]
 80094cc:	f003 0207 	and.w	r2, r3, #7
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80094d4:	4b17      	ldr	r3, [pc, #92]	; (8009534 <HAL_RCC_GetClockConfig+0x7c>)
 80094d6:	699b      	ldr	r3, [r3, #24]
 80094d8:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80094e0:	4b14      	ldr	r3, [pc, #80]	; (8009534 <HAL_RCC_GetClockConfig+0x7c>)
 80094e2:	699b      	ldr	r3, [r3, #24]
 80094e4:	f003 020f 	and.w	r2, r3, #15
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80094ec:	4b11      	ldr	r3, [pc, #68]	; (8009534 <HAL_RCC_GetClockConfig+0x7c>)
 80094ee:	699b      	ldr	r3, [r3, #24]
 80094f0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80094f8:	4b0e      	ldr	r3, [pc, #56]	; (8009534 <HAL_RCC_GetClockConfig+0x7c>)
 80094fa:	69db      	ldr	r3, [r3, #28]
 80094fc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8009504:	4b0b      	ldr	r3, [pc, #44]	; (8009534 <HAL_RCC_GetClockConfig+0x7c>)
 8009506:	69db      	ldr	r3, [r3, #28]
 8009508:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8009510:	4b08      	ldr	r3, [pc, #32]	; (8009534 <HAL_RCC_GetClockConfig+0x7c>)
 8009512:	6a1b      	ldr	r3, [r3, #32]
 8009514:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800951c:	4b06      	ldr	r3, [pc, #24]	; (8009538 <HAL_RCC_GetClockConfig+0x80>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f003 020f 	and.w	r2, r3, #15
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	601a      	str	r2, [r3, #0]
}
 8009528:	bf00      	nop
 800952a:	370c      	adds	r7, #12
 800952c:	46bd      	mov	sp, r7
 800952e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009532:	4770      	bx	lr
 8009534:	58024400 	.word	0x58024400
 8009538:	52002000 	.word	0x52002000

0800953c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800953c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009540:	b0ca      	sub	sp, #296	; 0x128
 8009542:	af00      	add	r7, sp, #0
 8009544:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009548:	2300      	movs	r3, #0
 800954a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800954e:	2300      	movs	r3, #0
 8009550:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009554:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800955c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8009560:	2500      	movs	r5, #0
 8009562:	ea54 0305 	orrs.w	r3, r4, r5
 8009566:	d049      	beq.n	80095fc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009568:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800956c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800956e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009572:	d02f      	beq.n	80095d4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009574:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009578:	d828      	bhi.n	80095cc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800957a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800957e:	d01a      	beq.n	80095b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009580:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009584:	d822      	bhi.n	80095cc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009586:	2b00      	cmp	r3, #0
 8009588:	d003      	beq.n	8009592 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800958a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800958e:	d007      	beq.n	80095a0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009590:	e01c      	b.n	80095cc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009592:	4bb8      	ldr	r3, [pc, #736]	; (8009874 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009596:	4ab7      	ldr	r2, [pc, #732]	; (8009874 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009598:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800959c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800959e:	e01a      	b.n	80095d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80095a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095a4:	3308      	adds	r3, #8
 80095a6:	2102      	movs	r1, #2
 80095a8:	4618      	mov	r0, r3
 80095aa:	f002 fb61 	bl	800bc70 <RCCEx_PLL2_Config>
 80095ae:	4603      	mov	r3, r0
 80095b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80095b4:	e00f      	b.n	80095d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80095b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095ba:	3328      	adds	r3, #40	; 0x28
 80095bc:	2102      	movs	r1, #2
 80095be:	4618      	mov	r0, r3
 80095c0:	f002 fc08 	bl	800bdd4 <RCCEx_PLL3_Config>
 80095c4:	4603      	mov	r3, r0
 80095c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80095ca:	e004      	b.n	80095d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80095cc:	2301      	movs	r3, #1
 80095ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80095d2:	e000      	b.n	80095d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80095d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d10a      	bne.n	80095f4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80095de:	4ba5      	ldr	r3, [pc, #660]	; (8009874 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80095e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095e2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80095e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095ec:	4aa1      	ldr	r2, [pc, #644]	; (8009874 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80095ee:	430b      	orrs	r3, r1
 80095f0:	6513      	str	r3, [r2, #80]	; 0x50
 80095f2:	e003      	b.n	80095fc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80095f8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80095fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009604:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8009608:	f04f 0900 	mov.w	r9, #0
 800960c:	ea58 0309 	orrs.w	r3, r8, r9
 8009610:	d047      	beq.n	80096a2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8009612:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009618:	2b04      	cmp	r3, #4
 800961a:	d82a      	bhi.n	8009672 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800961c:	a201      	add	r2, pc, #4	; (adr r2, 8009624 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800961e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009622:	bf00      	nop
 8009624:	08009639 	.word	0x08009639
 8009628:	08009647 	.word	0x08009647
 800962c:	0800965d 	.word	0x0800965d
 8009630:	0800967b 	.word	0x0800967b
 8009634:	0800967b 	.word	0x0800967b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009638:	4b8e      	ldr	r3, [pc, #568]	; (8009874 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800963a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800963c:	4a8d      	ldr	r2, [pc, #564]	; (8009874 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800963e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009642:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009644:	e01a      	b.n	800967c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009646:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800964a:	3308      	adds	r3, #8
 800964c:	2100      	movs	r1, #0
 800964e:	4618      	mov	r0, r3
 8009650:	f002 fb0e 	bl	800bc70 <RCCEx_PLL2_Config>
 8009654:	4603      	mov	r3, r0
 8009656:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800965a:	e00f      	b.n	800967c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800965c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009660:	3328      	adds	r3, #40	; 0x28
 8009662:	2100      	movs	r1, #0
 8009664:	4618      	mov	r0, r3
 8009666:	f002 fbb5 	bl	800bdd4 <RCCEx_PLL3_Config>
 800966a:	4603      	mov	r3, r0
 800966c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009670:	e004      	b.n	800967c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009672:	2301      	movs	r3, #1
 8009674:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009678:	e000      	b.n	800967c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800967a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800967c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009680:	2b00      	cmp	r3, #0
 8009682:	d10a      	bne.n	800969a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009684:	4b7b      	ldr	r3, [pc, #492]	; (8009874 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009686:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009688:	f023 0107 	bic.w	r1, r3, #7
 800968c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009692:	4a78      	ldr	r2, [pc, #480]	; (8009874 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009694:	430b      	orrs	r3, r1
 8009696:	6513      	str	r3, [r2, #80]	; 0x50
 8009698:	e003      	b.n	80096a2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800969a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800969e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80096a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096aa:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80096ae:	f04f 0b00 	mov.w	fp, #0
 80096b2:	ea5a 030b 	orrs.w	r3, sl, fp
 80096b6:	d04c      	beq.n	8009752 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80096b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096c2:	d030      	beq.n	8009726 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80096c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096c8:	d829      	bhi.n	800971e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80096ca:	2bc0      	cmp	r3, #192	; 0xc0
 80096cc:	d02d      	beq.n	800972a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80096ce:	2bc0      	cmp	r3, #192	; 0xc0
 80096d0:	d825      	bhi.n	800971e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80096d2:	2b80      	cmp	r3, #128	; 0x80
 80096d4:	d018      	beq.n	8009708 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80096d6:	2b80      	cmp	r3, #128	; 0x80
 80096d8:	d821      	bhi.n	800971e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d002      	beq.n	80096e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80096de:	2b40      	cmp	r3, #64	; 0x40
 80096e0:	d007      	beq.n	80096f2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80096e2:	e01c      	b.n	800971e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096e4:	4b63      	ldr	r3, [pc, #396]	; (8009874 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80096e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096e8:	4a62      	ldr	r2, [pc, #392]	; (8009874 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80096ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80096ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80096f0:	e01c      	b.n	800972c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80096f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096f6:	3308      	adds	r3, #8
 80096f8:	2100      	movs	r1, #0
 80096fa:	4618      	mov	r0, r3
 80096fc:	f002 fab8 	bl	800bc70 <RCCEx_PLL2_Config>
 8009700:	4603      	mov	r3, r0
 8009702:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009706:	e011      	b.n	800972c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009708:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800970c:	3328      	adds	r3, #40	; 0x28
 800970e:	2100      	movs	r1, #0
 8009710:	4618      	mov	r0, r3
 8009712:	f002 fb5f 	bl	800bdd4 <RCCEx_PLL3_Config>
 8009716:	4603      	mov	r3, r0
 8009718:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800971c:	e006      	b.n	800972c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800971e:	2301      	movs	r3, #1
 8009720:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009724:	e002      	b.n	800972c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009726:	bf00      	nop
 8009728:	e000      	b.n	800972c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800972a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800972c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009730:	2b00      	cmp	r3, #0
 8009732:	d10a      	bne.n	800974a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009734:	4b4f      	ldr	r3, [pc, #316]	; (8009874 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009736:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009738:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800973c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009740:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009742:	4a4c      	ldr	r2, [pc, #304]	; (8009874 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009744:	430b      	orrs	r3, r1
 8009746:	6513      	str	r3, [r2, #80]	; 0x50
 8009748:	e003      	b.n	8009752 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800974a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800974e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009752:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800975a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800975e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009762:	2300      	movs	r3, #0
 8009764:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009768:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800976c:	460b      	mov	r3, r1
 800976e:	4313      	orrs	r3, r2
 8009770:	d053      	beq.n	800981a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8009772:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009776:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800977a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800977e:	d035      	beq.n	80097ec <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8009780:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009784:	d82e      	bhi.n	80097e4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009786:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800978a:	d031      	beq.n	80097f0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800978c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009790:	d828      	bhi.n	80097e4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009792:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009796:	d01a      	beq.n	80097ce <HAL_RCCEx_PeriphCLKConfig+0x292>
 8009798:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800979c:	d822      	bhi.n	80097e4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d003      	beq.n	80097aa <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80097a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80097a6:	d007      	beq.n	80097b8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80097a8:	e01c      	b.n	80097e4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097aa:	4b32      	ldr	r3, [pc, #200]	; (8009874 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80097ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097ae:	4a31      	ldr	r2, [pc, #196]	; (8009874 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80097b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80097b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80097b6:	e01c      	b.n	80097f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80097b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097bc:	3308      	adds	r3, #8
 80097be:	2100      	movs	r1, #0
 80097c0:	4618      	mov	r0, r3
 80097c2:	f002 fa55 	bl	800bc70 <RCCEx_PLL2_Config>
 80097c6:	4603      	mov	r3, r0
 80097c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80097cc:	e011      	b.n	80097f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80097ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097d2:	3328      	adds	r3, #40	; 0x28
 80097d4:	2100      	movs	r1, #0
 80097d6:	4618      	mov	r0, r3
 80097d8:	f002 fafc 	bl	800bdd4 <RCCEx_PLL3_Config>
 80097dc:	4603      	mov	r3, r0
 80097de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80097e2:	e006      	b.n	80097f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80097e4:	2301      	movs	r3, #1
 80097e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80097ea:	e002      	b.n	80097f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80097ec:	bf00      	nop
 80097ee:	e000      	b.n	80097f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80097f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d10b      	bne.n	8009812 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80097fa:	4b1e      	ldr	r3, [pc, #120]	; (8009874 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80097fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097fe:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8009802:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009806:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800980a:	4a1a      	ldr	r2, [pc, #104]	; (8009874 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800980c:	430b      	orrs	r3, r1
 800980e:	6593      	str	r3, [r2, #88]	; 0x58
 8009810:	e003      	b.n	800981a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009812:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009816:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800981a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800981e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009822:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8009826:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800982a:	2300      	movs	r3, #0
 800982c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009830:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8009834:	460b      	mov	r3, r1
 8009836:	4313      	orrs	r3, r2
 8009838:	d056      	beq.n	80098e8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800983a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800983e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009842:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009846:	d038      	beq.n	80098ba <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009848:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800984c:	d831      	bhi.n	80098b2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800984e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009852:	d034      	beq.n	80098be <HAL_RCCEx_PeriphCLKConfig+0x382>
 8009854:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009858:	d82b      	bhi.n	80098b2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800985a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800985e:	d01d      	beq.n	800989c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8009860:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009864:	d825      	bhi.n	80098b2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009866:	2b00      	cmp	r3, #0
 8009868:	d006      	beq.n	8009878 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800986a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800986e:	d00a      	beq.n	8009886 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009870:	e01f      	b.n	80098b2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009872:	bf00      	nop
 8009874:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009878:	4ba2      	ldr	r3, [pc, #648]	; (8009b04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800987a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800987c:	4aa1      	ldr	r2, [pc, #644]	; (8009b04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800987e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009882:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009884:	e01c      	b.n	80098c0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009886:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800988a:	3308      	adds	r3, #8
 800988c:	2100      	movs	r1, #0
 800988e:	4618      	mov	r0, r3
 8009890:	f002 f9ee 	bl	800bc70 <RCCEx_PLL2_Config>
 8009894:	4603      	mov	r3, r0
 8009896:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800989a:	e011      	b.n	80098c0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800989c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098a0:	3328      	adds	r3, #40	; 0x28
 80098a2:	2100      	movs	r1, #0
 80098a4:	4618      	mov	r0, r3
 80098a6:	f002 fa95 	bl	800bdd4 <RCCEx_PLL3_Config>
 80098aa:	4603      	mov	r3, r0
 80098ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80098b0:	e006      	b.n	80098c0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80098b2:	2301      	movs	r3, #1
 80098b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80098b8:	e002      	b.n	80098c0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80098ba:	bf00      	nop
 80098bc:	e000      	b.n	80098c0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80098be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d10b      	bne.n	80098e0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80098c8:	4b8e      	ldr	r3, [pc, #568]	; (8009b04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80098ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098cc:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80098d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098d4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80098d8:	4a8a      	ldr	r2, [pc, #552]	; (8009b04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80098da:	430b      	orrs	r3, r1
 80098dc:	6593      	str	r3, [r2, #88]	; 0x58
 80098de:	e003      	b.n	80098e8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80098e4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80098e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098f0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80098f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80098f8:	2300      	movs	r3, #0
 80098fa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80098fe:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8009902:	460b      	mov	r3, r1
 8009904:	4313      	orrs	r3, r2
 8009906:	d03a      	beq.n	800997e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8009908:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800990c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800990e:	2b30      	cmp	r3, #48	; 0x30
 8009910:	d01f      	beq.n	8009952 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8009912:	2b30      	cmp	r3, #48	; 0x30
 8009914:	d819      	bhi.n	800994a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009916:	2b20      	cmp	r3, #32
 8009918:	d00c      	beq.n	8009934 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800991a:	2b20      	cmp	r3, #32
 800991c:	d815      	bhi.n	800994a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800991e:	2b00      	cmp	r3, #0
 8009920:	d019      	beq.n	8009956 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8009922:	2b10      	cmp	r3, #16
 8009924:	d111      	bne.n	800994a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009926:	4b77      	ldr	r3, [pc, #476]	; (8009b04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800992a:	4a76      	ldr	r2, [pc, #472]	; (8009b04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800992c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009930:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009932:	e011      	b.n	8009958 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009934:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009938:	3308      	adds	r3, #8
 800993a:	2102      	movs	r1, #2
 800993c:	4618      	mov	r0, r3
 800993e:	f002 f997 	bl	800bc70 <RCCEx_PLL2_Config>
 8009942:	4603      	mov	r3, r0
 8009944:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009948:	e006      	b.n	8009958 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800994a:	2301      	movs	r3, #1
 800994c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009950:	e002      	b.n	8009958 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009952:	bf00      	nop
 8009954:	e000      	b.n	8009958 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009956:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009958:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800995c:	2b00      	cmp	r3, #0
 800995e:	d10a      	bne.n	8009976 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009960:	4b68      	ldr	r3, [pc, #416]	; (8009b04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009962:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009964:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8009968:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800996c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800996e:	4a65      	ldr	r2, [pc, #404]	; (8009b04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009970:	430b      	orrs	r3, r1
 8009972:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009974:	e003      	b.n	800997e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009976:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800997a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800997e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009986:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800998a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800998e:	2300      	movs	r3, #0
 8009990:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009994:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8009998:	460b      	mov	r3, r1
 800999a:	4313      	orrs	r3, r2
 800999c:	d051      	beq.n	8009a42 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800999e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80099a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80099a8:	d035      	beq.n	8009a16 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80099aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80099ae:	d82e      	bhi.n	8009a0e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80099b0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80099b4:	d031      	beq.n	8009a1a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80099b6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80099ba:	d828      	bhi.n	8009a0e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80099bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80099c0:	d01a      	beq.n	80099f8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80099c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80099c6:	d822      	bhi.n	8009a0e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d003      	beq.n	80099d4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80099cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099d0:	d007      	beq.n	80099e2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80099d2:	e01c      	b.n	8009a0e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80099d4:	4b4b      	ldr	r3, [pc, #300]	; (8009b04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80099d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099d8:	4a4a      	ldr	r2, [pc, #296]	; (8009b04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80099da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80099de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80099e0:	e01c      	b.n	8009a1c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80099e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099e6:	3308      	adds	r3, #8
 80099e8:	2100      	movs	r1, #0
 80099ea:	4618      	mov	r0, r3
 80099ec:	f002 f940 	bl	800bc70 <RCCEx_PLL2_Config>
 80099f0:	4603      	mov	r3, r0
 80099f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80099f6:	e011      	b.n	8009a1c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80099f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099fc:	3328      	adds	r3, #40	; 0x28
 80099fe:	2100      	movs	r1, #0
 8009a00:	4618      	mov	r0, r3
 8009a02:	f002 f9e7 	bl	800bdd4 <RCCEx_PLL3_Config>
 8009a06:	4603      	mov	r3, r0
 8009a08:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009a0c:	e006      	b.n	8009a1c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a0e:	2301      	movs	r3, #1
 8009a10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009a14:	e002      	b.n	8009a1c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009a16:	bf00      	nop
 8009a18:	e000      	b.n	8009a1c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009a1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a1c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d10a      	bne.n	8009a3a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009a24:	4b37      	ldr	r3, [pc, #220]	; (8009b04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009a26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a28:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8009a2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a32:	4a34      	ldr	r2, [pc, #208]	; (8009b04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009a34:	430b      	orrs	r3, r1
 8009a36:	6513      	str	r3, [r2, #80]	; 0x50
 8009a38:	e003      	b.n	8009a42 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a3e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009a42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a4a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8009a4e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009a52:	2300      	movs	r3, #0
 8009a54:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009a58:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8009a5c:	460b      	mov	r3, r1
 8009a5e:	4313      	orrs	r3, r2
 8009a60:	d056      	beq.n	8009b10 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009a62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009a6c:	d033      	beq.n	8009ad6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8009a6e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009a72:	d82c      	bhi.n	8009ace <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009a74:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009a78:	d02f      	beq.n	8009ada <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8009a7a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009a7e:	d826      	bhi.n	8009ace <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009a80:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009a84:	d02b      	beq.n	8009ade <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8009a86:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009a8a:	d820      	bhi.n	8009ace <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009a8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009a90:	d012      	beq.n	8009ab8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8009a92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009a96:	d81a      	bhi.n	8009ace <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d022      	beq.n	8009ae2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8009a9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009aa0:	d115      	bne.n	8009ace <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009aa6:	3308      	adds	r3, #8
 8009aa8:	2101      	movs	r1, #1
 8009aaa:	4618      	mov	r0, r3
 8009aac:	f002 f8e0 	bl	800bc70 <RCCEx_PLL2_Config>
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009ab6:	e015      	b.n	8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009ab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009abc:	3328      	adds	r3, #40	; 0x28
 8009abe:	2101      	movs	r1, #1
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	f002 f987 	bl	800bdd4 <RCCEx_PLL3_Config>
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009acc:	e00a      	b.n	8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ace:	2301      	movs	r3, #1
 8009ad0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009ad4:	e006      	b.n	8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009ad6:	bf00      	nop
 8009ad8:	e004      	b.n	8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009ada:	bf00      	nop
 8009adc:	e002      	b.n	8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009ade:	bf00      	nop
 8009ae0:	e000      	b.n	8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009ae2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ae4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d10d      	bne.n	8009b08 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009aec:	4b05      	ldr	r3, [pc, #20]	; (8009b04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009aee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009af0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8009af4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009af8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009afa:	4a02      	ldr	r2, [pc, #8]	; (8009b04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009afc:	430b      	orrs	r3, r1
 8009afe:	6513      	str	r3, [r2, #80]	; 0x50
 8009b00:	e006      	b.n	8009b10 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009b02:	bf00      	nop
 8009b04:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b08:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b0c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009b10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b18:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8009b1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009b20:	2300      	movs	r3, #0
 8009b22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009b26:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8009b2a:	460b      	mov	r3, r1
 8009b2c:	4313      	orrs	r3, r2
 8009b2e:	d055      	beq.n	8009bdc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009b30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b34:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009b38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009b3c:	d033      	beq.n	8009ba6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8009b3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009b42:	d82c      	bhi.n	8009b9e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009b44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b48:	d02f      	beq.n	8009baa <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8009b4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b4e:	d826      	bhi.n	8009b9e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009b50:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009b54:	d02b      	beq.n	8009bae <HAL_RCCEx_PeriphCLKConfig+0x672>
 8009b56:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009b5a:	d820      	bhi.n	8009b9e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009b5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b60:	d012      	beq.n	8009b88 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8009b62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b66:	d81a      	bhi.n	8009b9e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d022      	beq.n	8009bb2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8009b6c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009b70:	d115      	bne.n	8009b9e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009b72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b76:	3308      	adds	r3, #8
 8009b78:	2101      	movs	r1, #1
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f002 f878 	bl	800bc70 <RCCEx_PLL2_Config>
 8009b80:	4603      	mov	r3, r0
 8009b82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009b86:	e015      	b.n	8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009b88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b8c:	3328      	adds	r3, #40	; 0x28
 8009b8e:	2101      	movs	r1, #1
 8009b90:	4618      	mov	r0, r3
 8009b92:	f002 f91f 	bl	800bdd4 <RCCEx_PLL3_Config>
 8009b96:	4603      	mov	r3, r0
 8009b98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009b9c:	e00a      	b.n	8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009b9e:	2301      	movs	r3, #1
 8009ba0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009ba4:	e006      	b.n	8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009ba6:	bf00      	nop
 8009ba8:	e004      	b.n	8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009baa:	bf00      	nop
 8009bac:	e002      	b.n	8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009bae:	bf00      	nop
 8009bb0:	e000      	b.n	8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009bb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009bb4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d10b      	bne.n	8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009bbc:	4ba3      	ldr	r3, [pc, #652]	; (8009e4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bc0:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8009bc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bc8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009bcc:	4a9f      	ldr	r2, [pc, #636]	; (8009e4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009bce:	430b      	orrs	r3, r1
 8009bd0:	6593      	str	r3, [r2, #88]	; 0x58
 8009bd2:	e003      	b.n	8009bdc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bd4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009bd8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009bdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009be4:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8009be8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009bec:	2300      	movs	r3, #0
 8009bee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009bf2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009bf6:	460b      	mov	r3, r1
 8009bf8:	4313      	orrs	r3, r2
 8009bfa:	d037      	beq.n	8009c6c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009bfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c06:	d00e      	beq.n	8009c26 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8009c08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c0c:	d816      	bhi.n	8009c3c <HAL_RCCEx_PeriphCLKConfig+0x700>
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d018      	beq.n	8009c44 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8009c12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009c16:	d111      	bne.n	8009c3c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c18:	4b8c      	ldr	r3, [pc, #560]	; (8009e4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c1c:	4a8b      	ldr	r2, [pc, #556]	; (8009e4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009c1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009c24:	e00f      	b.n	8009c46 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c2a:	3308      	adds	r3, #8
 8009c2c:	2101      	movs	r1, #1
 8009c2e:	4618      	mov	r0, r3
 8009c30:	f002 f81e 	bl	800bc70 <RCCEx_PLL2_Config>
 8009c34:	4603      	mov	r3, r0
 8009c36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009c3a:	e004      	b.n	8009c46 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009c42:	e000      	b.n	8009c46 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8009c44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d10a      	bne.n	8009c64 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009c4e:	4b7f      	ldr	r3, [pc, #508]	; (8009e4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009c50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c52:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8009c56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c5c:	4a7b      	ldr	r2, [pc, #492]	; (8009e4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009c5e:	430b      	orrs	r3, r1
 8009c60:	6513      	str	r3, [r2, #80]	; 0x50
 8009c62:	e003      	b.n	8009c6c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c64:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c68:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009c6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c74:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8009c78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009c82:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8009c86:	460b      	mov	r3, r1
 8009c88:	4313      	orrs	r3, r2
 8009c8a:	d039      	beq.n	8009d00 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009c8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c92:	2b03      	cmp	r3, #3
 8009c94:	d81c      	bhi.n	8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8009c96:	a201      	add	r2, pc, #4	; (adr r2, 8009c9c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8009c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c9c:	08009cd9 	.word	0x08009cd9
 8009ca0:	08009cad 	.word	0x08009cad
 8009ca4:	08009cbb 	.word	0x08009cbb
 8009ca8:	08009cd9 	.word	0x08009cd9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009cac:	4b67      	ldr	r3, [pc, #412]	; (8009e4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cb0:	4a66      	ldr	r2, [pc, #408]	; (8009e4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009cb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009cb6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009cb8:	e00f      	b.n	8009cda <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cbe:	3308      	adds	r3, #8
 8009cc0:	2102      	movs	r1, #2
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	f001 ffd4 	bl	800bc70 <RCCEx_PLL2_Config>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009cce:	e004      	b.n	8009cda <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009cd0:	2301      	movs	r3, #1
 8009cd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009cd6:	e000      	b.n	8009cda <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8009cd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009cda:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d10a      	bne.n	8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009ce2:	4b5a      	ldr	r3, [pc, #360]	; (8009e4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ce6:	f023 0103 	bic.w	r1, r3, #3
 8009cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009cf0:	4a56      	ldr	r2, [pc, #344]	; (8009e4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009cf2:	430b      	orrs	r3, r1
 8009cf4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009cf6:	e003      	b.n	8009d00 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cf8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009cfc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009d00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d08:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8009d0c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009d10:	2300      	movs	r3, #0
 8009d12:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009d16:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8009d1a:	460b      	mov	r3, r1
 8009d1c:	4313      	orrs	r3, r2
 8009d1e:	f000 809f 	beq.w	8009e60 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009d22:	4b4b      	ldr	r3, [pc, #300]	; (8009e50 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	4a4a      	ldr	r2, [pc, #296]	; (8009e50 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009d28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d2c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009d2e:	f7f9 f929 	bl	8002f84 <HAL_GetTick>
 8009d32:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009d36:	e00b      	b.n	8009d50 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009d38:	f7f9 f924 	bl	8002f84 <HAL_GetTick>
 8009d3c:	4602      	mov	r2, r0
 8009d3e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009d42:	1ad3      	subs	r3, r2, r3
 8009d44:	2b64      	cmp	r3, #100	; 0x64
 8009d46:	d903      	bls.n	8009d50 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8009d48:	2303      	movs	r3, #3
 8009d4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009d4e:	e005      	b.n	8009d5c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009d50:	4b3f      	ldr	r3, [pc, #252]	; (8009e50 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d0ed      	beq.n	8009d38 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8009d5c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d179      	bne.n	8009e58 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009d64:	4b39      	ldr	r3, [pc, #228]	; (8009e4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009d66:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009d68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d6c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009d70:	4053      	eors	r3, r2
 8009d72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d015      	beq.n	8009da6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009d7a:	4b34      	ldr	r3, [pc, #208]	; (8009e4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d82:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009d86:	4b31      	ldr	r3, [pc, #196]	; (8009e4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d8a:	4a30      	ldr	r2, [pc, #192]	; (8009e4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009d8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009d90:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009d92:	4b2e      	ldr	r3, [pc, #184]	; (8009e4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d96:	4a2d      	ldr	r2, [pc, #180]	; (8009e4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009d98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d9c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009d9e:	4a2b      	ldr	r2, [pc, #172]	; (8009e4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009da0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009da4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009da6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009daa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009dae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009db2:	d118      	bne.n	8009de6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009db4:	f7f9 f8e6 	bl	8002f84 <HAL_GetTick>
 8009db8:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009dbc:	e00d      	b.n	8009dda <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009dbe:	f7f9 f8e1 	bl	8002f84 <HAL_GetTick>
 8009dc2:	4602      	mov	r2, r0
 8009dc4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009dc8:	1ad2      	subs	r2, r2, r3
 8009dca:	f241 3388 	movw	r3, #5000	; 0x1388
 8009dce:	429a      	cmp	r2, r3
 8009dd0:	d903      	bls.n	8009dda <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8009dd2:	2303      	movs	r3, #3
 8009dd4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8009dd8:	e005      	b.n	8009de6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009dda:	4b1c      	ldr	r3, [pc, #112]	; (8009e4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dde:	f003 0302 	and.w	r3, r3, #2
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d0eb      	beq.n	8009dbe <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8009de6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d129      	bne.n	8009e42 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009df2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009df6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009dfa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009dfe:	d10e      	bne.n	8009e1e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8009e00:	4b12      	ldr	r3, [pc, #72]	; (8009e4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e02:	691b      	ldr	r3, [r3, #16]
 8009e04:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8009e08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e0c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009e10:	091a      	lsrs	r2, r3, #4
 8009e12:	4b10      	ldr	r3, [pc, #64]	; (8009e54 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8009e14:	4013      	ands	r3, r2
 8009e16:	4a0d      	ldr	r2, [pc, #52]	; (8009e4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e18:	430b      	orrs	r3, r1
 8009e1a:	6113      	str	r3, [r2, #16]
 8009e1c:	e005      	b.n	8009e2a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8009e1e:	4b0b      	ldr	r3, [pc, #44]	; (8009e4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e20:	691b      	ldr	r3, [r3, #16]
 8009e22:	4a0a      	ldr	r2, [pc, #40]	; (8009e4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e24:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009e28:	6113      	str	r3, [r2, #16]
 8009e2a:	4b08      	ldr	r3, [pc, #32]	; (8009e4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e2c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009e2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e32:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009e36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009e3a:	4a04      	ldr	r2, [pc, #16]	; (8009e4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e3c:	430b      	orrs	r3, r1
 8009e3e:	6713      	str	r3, [r2, #112]	; 0x70
 8009e40:	e00e      	b.n	8009e60 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009e42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e46:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8009e4a:	e009      	b.n	8009e60 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8009e4c:	58024400 	.word	0x58024400
 8009e50:	58024800 	.word	0x58024800
 8009e54:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e58:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e5c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009e60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e68:	f002 0301 	and.w	r3, r2, #1
 8009e6c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009e70:	2300      	movs	r3, #0
 8009e72:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009e76:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009e7a:	460b      	mov	r3, r1
 8009e7c:	4313      	orrs	r3, r2
 8009e7e:	f000 8089 	beq.w	8009f94 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009e88:	2b28      	cmp	r3, #40	; 0x28
 8009e8a:	d86b      	bhi.n	8009f64 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8009e8c:	a201      	add	r2, pc, #4	; (adr r2, 8009e94 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e92:	bf00      	nop
 8009e94:	08009f6d 	.word	0x08009f6d
 8009e98:	08009f65 	.word	0x08009f65
 8009e9c:	08009f65 	.word	0x08009f65
 8009ea0:	08009f65 	.word	0x08009f65
 8009ea4:	08009f65 	.word	0x08009f65
 8009ea8:	08009f65 	.word	0x08009f65
 8009eac:	08009f65 	.word	0x08009f65
 8009eb0:	08009f65 	.word	0x08009f65
 8009eb4:	08009f39 	.word	0x08009f39
 8009eb8:	08009f65 	.word	0x08009f65
 8009ebc:	08009f65 	.word	0x08009f65
 8009ec0:	08009f65 	.word	0x08009f65
 8009ec4:	08009f65 	.word	0x08009f65
 8009ec8:	08009f65 	.word	0x08009f65
 8009ecc:	08009f65 	.word	0x08009f65
 8009ed0:	08009f65 	.word	0x08009f65
 8009ed4:	08009f4f 	.word	0x08009f4f
 8009ed8:	08009f65 	.word	0x08009f65
 8009edc:	08009f65 	.word	0x08009f65
 8009ee0:	08009f65 	.word	0x08009f65
 8009ee4:	08009f65 	.word	0x08009f65
 8009ee8:	08009f65 	.word	0x08009f65
 8009eec:	08009f65 	.word	0x08009f65
 8009ef0:	08009f65 	.word	0x08009f65
 8009ef4:	08009f6d 	.word	0x08009f6d
 8009ef8:	08009f65 	.word	0x08009f65
 8009efc:	08009f65 	.word	0x08009f65
 8009f00:	08009f65 	.word	0x08009f65
 8009f04:	08009f65 	.word	0x08009f65
 8009f08:	08009f65 	.word	0x08009f65
 8009f0c:	08009f65 	.word	0x08009f65
 8009f10:	08009f65 	.word	0x08009f65
 8009f14:	08009f6d 	.word	0x08009f6d
 8009f18:	08009f65 	.word	0x08009f65
 8009f1c:	08009f65 	.word	0x08009f65
 8009f20:	08009f65 	.word	0x08009f65
 8009f24:	08009f65 	.word	0x08009f65
 8009f28:	08009f65 	.word	0x08009f65
 8009f2c:	08009f65 	.word	0x08009f65
 8009f30:	08009f65 	.word	0x08009f65
 8009f34:	08009f6d 	.word	0x08009f6d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f3c:	3308      	adds	r3, #8
 8009f3e:	2101      	movs	r1, #1
 8009f40:	4618      	mov	r0, r3
 8009f42:	f001 fe95 	bl	800bc70 <RCCEx_PLL2_Config>
 8009f46:	4603      	mov	r3, r0
 8009f48:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009f4c:	e00f      	b.n	8009f6e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009f4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f52:	3328      	adds	r3, #40	; 0x28
 8009f54:	2101      	movs	r1, #1
 8009f56:	4618      	mov	r0, r3
 8009f58:	f001 ff3c 	bl	800bdd4 <RCCEx_PLL3_Config>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009f62:	e004      	b.n	8009f6e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f64:	2301      	movs	r3, #1
 8009f66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009f6a:	e000      	b.n	8009f6e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8009f6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d10a      	bne.n	8009f8c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009f76:	4bbf      	ldr	r3, [pc, #764]	; (800a274 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f7a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8009f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009f84:	4abb      	ldr	r2, [pc, #748]	; (800a274 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009f86:	430b      	orrs	r3, r1
 8009f88:	6553      	str	r3, [r2, #84]	; 0x54
 8009f8a:	e003      	b.n	8009f94 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f8c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f90:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009f94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f9c:	f002 0302 	and.w	r3, r2, #2
 8009fa0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009faa:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8009fae:	460b      	mov	r3, r1
 8009fb0:	4313      	orrs	r3, r2
 8009fb2:	d041      	beq.n	800a038 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009fb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009fba:	2b05      	cmp	r3, #5
 8009fbc:	d824      	bhi.n	800a008 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8009fbe:	a201      	add	r2, pc, #4	; (adr r2, 8009fc4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8009fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fc4:	0800a011 	.word	0x0800a011
 8009fc8:	08009fdd 	.word	0x08009fdd
 8009fcc:	08009ff3 	.word	0x08009ff3
 8009fd0:	0800a011 	.word	0x0800a011
 8009fd4:	0800a011 	.word	0x0800a011
 8009fd8:	0800a011 	.word	0x0800a011
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009fdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fe0:	3308      	adds	r3, #8
 8009fe2:	2101      	movs	r1, #1
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	f001 fe43 	bl	800bc70 <RCCEx_PLL2_Config>
 8009fea:	4603      	mov	r3, r0
 8009fec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009ff0:	e00f      	b.n	800a012 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009ff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ff6:	3328      	adds	r3, #40	; 0x28
 8009ff8:	2101      	movs	r1, #1
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	f001 feea 	bl	800bdd4 <RCCEx_PLL3_Config>
 800a000:	4603      	mov	r3, r0
 800a002:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a006:	e004      	b.n	800a012 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a008:	2301      	movs	r3, #1
 800a00a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a00e:	e000      	b.n	800a012 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800a010:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a012:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a016:	2b00      	cmp	r3, #0
 800a018:	d10a      	bne.n	800a030 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a01a:	4b96      	ldr	r3, [pc, #600]	; (800a274 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a01c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a01e:	f023 0107 	bic.w	r1, r3, #7
 800a022:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a026:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a028:	4a92      	ldr	r2, [pc, #584]	; (800a274 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a02a:	430b      	orrs	r3, r1
 800a02c:	6553      	str	r3, [r2, #84]	; 0x54
 800a02e:	e003      	b.n	800a038 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a030:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a034:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a038:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a03c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a040:	f002 0304 	and.w	r3, r2, #4
 800a044:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a048:	2300      	movs	r3, #0
 800a04a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a04e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800a052:	460b      	mov	r3, r1
 800a054:	4313      	orrs	r3, r2
 800a056:	d044      	beq.n	800a0e2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a058:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a05c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a060:	2b05      	cmp	r3, #5
 800a062:	d825      	bhi.n	800a0b0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800a064:	a201      	add	r2, pc, #4	; (adr r2, 800a06c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800a066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a06a:	bf00      	nop
 800a06c:	0800a0b9 	.word	0x0800a0b9
 800a070:	0800a085 	.word	0x0800a085
 800a074:	0800a09b 	.word	0x0800a09b
 800a078:	0800a0b9 	.word	0x0800a0b9
 800a07c:	0800a0b9 	.word	0x0800a0b9
 800a080:	0800a0b9 	.word	0x0800a0b9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a084:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a088:	3308      	adds	r3, #8
 800a08a:	2101      	movs	r1, #1
 800a08c:	4618      	mov	r0, r3
 800a08e:	f001 fdef 	bl	800bc70 <RCCEx_PLL2_Config>
 800a092:	4603      	mov	r3, r0
 800a094:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a098:	e00f      	b.n	800a0ba <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a09a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a09e:	3328      	adds	r3, #40	; 0x28
 800a0a0:	2101      	movs	r1, #1
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f001 fe96 	bl	800bdd4 <RCCEx_PLL3_Config>
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a0ae:	e004      	b.n	800a0ba <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a0b0:	2301      	movs	r3, #1
 800a0b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a0b6:	e000      	b.n	800a0ba <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800a0b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a0ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d10b      	bne.n	800a0da <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a0c2:	4b6c      	ldr	r3, [pc, #432]	; (800a274 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a0c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0c6:	f023 0107 	bic.w	r1, r3, #7
 800a0ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a0d2:	4a68      	ldr	r2, [pc, #416]	; (800a274 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a0d4:	430b      	orrs	r3, r1
 800a0d6:	6593      	str	r3, [r2, #88]	; 0x58
 800a0d8:	e003      	b.n	800a0e2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a0de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a0e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ea:	f002 0320 	and.w	r3, r2, #32
 800a0ee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a0f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a0fc:	460b      	mov	r3, r1
 800a0fe:	4313      	orrs	r3, r2
 800a100:	d055      	beq.n	800a1ae <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a102:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a10a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a10e:	d033      	beq.n	800a178 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800a110:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a114:	d82c      	bhi.n	800a170 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a116:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a11a:	d02f      	beq.n	800a17c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800a11c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a120:	d826      	bhi.n	800a170 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a122:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a126:	d02b      	beq.n	800a180 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800a128:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a12c:	d820      	bhi.n	800a170 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a12e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a132:	d012      	beq.n	800a15a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800a134:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a138:	d81a      	bhi.n	800a170 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d022      	beq.n	800a184 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800a13e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a142:	d115      	bne.n	800a170 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a144:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a148:	3308      	adds	r3, #8
 800a14a:	2100      	movs	r1, #0
 800a14c:	4618      	mov	r0, r3
 800a14e:	f001 fd8f 	bl	800bc70 <RCCEx_PLL2_Config>
 800a152:	4603      	mov	r3, r0
 800a154:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a158:	e015      	b.n	800a186 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a15a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a15e:	3328      	adds	r3, #40	; 0x28
 800a160:	2102      	movs	r1, #2
 800a162:	4618      	mov	r0, r3
 800a164:	f001 fe36 	bl	800bdd4 <RCCEx_PLL3_Config>
 800a168:	4603      	mov	r3, r0
 800a16a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a16e:	e00a      	b.n	800a186 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a170:	2301      	movs	r3, #1
 800a172:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a176:	e006      	b.n	800a186 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a178:	bf00      	nop
 800a17a:	e004      	b.n	800a186 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a17c:	bf00      	nop
 800a17e:	e002      	b.n	800a186 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a180:	bf00      	nop
 800a182:	e000      	b.n	800a186 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a184:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a186:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d10b      	bne.n	800a1a6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a18e:	4b39      	ldr	r3, [pc, #228]	; (800a274 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a192:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800a196:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a19a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a19e:	4a35      	ldr	r2, [pc, #212]	; (800a274 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a1a0:	430b      	orrs	r3, r1
 800a1a2:	6553      	str	r3, [r2, #84]	; 0x54
 800a1a4:	e003      	b.n	800a1ae <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a1aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a1ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1b6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800a1ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a1be:	2300      	movs	r3, #0
 800a1c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a1c4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800a1c8:	460b      	mov	r3, r1
 800a1ca:	4313      	orrs	r3, r2
 800a1cc:	d058      	beq.n	800a280 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a1ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a1d6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a1da:	d033      	beq.n	800a244 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a1dc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a1e0:	d82c      	bhi.n	800a23c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a1e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1e6:	d02f      	beq.n	800a248 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800a1e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1ec:	d826      	bhi.n	800a23c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a1ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a1f2:	d02b      	beq.n	800a24c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800a1f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a1f8:	d820      	bhi.n	800a23c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a1fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a1fe:	d012      	beq.n	800a226 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800a200:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a204:	d81a      	bhi.n	800a23c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a206:	2b00      	cmp	r3, #0
 800a208:	d022      	beq.n	800a250 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800a20a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a20e:	d115      	bne.n	800a23c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a210:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a214:	3308      	adds	r3, #8
 800a216:	2100      	movs	r1, #0
 800a218:	4618      	mov	r0, r3
 800a21a:	f001 fd29 	bl	800bc70 <RCCEx_PLL2_Config>
 800a21e:	4603      	mov	r3, r0
 800a220:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a224:	e015      	b.n	800a252 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a226:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a22a:	3328      	adds	r3, #40	; 0x28
 800a22c:	2102      	movs	r1, #2
 800a22e:	4618      	mov	r0, r3
 800a230:	f001 fdd0 	bl	800bdd4 <RCCEx_PLL3_Config>
 800a234:	4603      	mov	r3, r0
 800a236:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a23a:	e00a      	b.n	800a252 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a23c:	2301      	movs	r3, #1
 800a23e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a242:	e006      	b.n	800a252 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a244:	bf00      	nop
 800a246:	e004      	b.n	800a252 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a248:	bf00      	nop
 800a24a:	e002      	b.n	800a252 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a24c:	bf00      	nop
 800a24e:	e000      	b.n	800a252 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a250:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a252:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a256:	2b00      	cmp	r3, #0
 800a258:	d10e      	bne.n	800a278 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a25a:	4b06      	ldr	r3, [pc, #24]	; (800a274 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a25c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a25e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800a262:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a266:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a26a:	4a02      	ldr	r2, [pc, #8]	; (800a274 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a26c:	430b      	orrs	r3, r1
 800a26e:	6593      	str	r3, [r2, #88]	; 0x58
 800a270:	e006      	b.n	800a280 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800a272:	bf00      	nop
 800a274:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a278:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a27c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a280:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a284:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a288:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800a28c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a290:	2300      	movs	r3, #0
 800a292:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a296:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800a29a:	460b      	mov	r3, r1
 800a29c:	4313      	orrs	r3, r2
 800a29e:	d055      	beq.n	800a34c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a2a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2a4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a2a8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a2ac:	d033      	beq.n	800a316 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800a2ae:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a2b2:	d82c      	bhi.n	800a30e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a2b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a2b8:	d02f      	beq.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800a2ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a2be:	d826      	bhi.n	800a30e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a2c0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a2c4:	d02b      	beq.n	800a31e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800a2c6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a2ca:	d820      	bhi.n	800a30e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a2cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a2d0:	d012      	beq.n	800a2f8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800a2d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a2d6:	d81a      	bhi.n	800a30e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d022      	beq.n	800a322 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800a2dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a2e0:	d115      	bne.n	800a30e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a2e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2e6:	3308      	adds	r3, #8
 800a2e8:	2100      	movs	r1, #0
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	f001 fcc0 	bl	800bc70 <RCCEx_PLL2_Config>
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a2f6:	e015      	b.n	800a324 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a2f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2fc:	3328      	adds	r3, #40	; 0x28
 800a2fe:	2102      	movs	r1, #2
 800a300:	4618      	mov	r0, r3
 800a302:	f001 fd67 	bl	800bdd4 <RCCEx_PLL3_Config>
 800a306:	4603      	mov	r3, r0
 800a308:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a30c:	e00a      	b.n	800a324 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a30e:	2301      	movs	r3, #1
 800a310:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a314:	e006      	b.n	800a324 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a316:	bf00      	nop
 800a318:	e004      	b.n	800a324 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a31a:	bf00      	nop
 800a31c:	e002      	b.n	800a324 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a31e:	bf00      	nop
 800a320:	e000      	b.n	800a324 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a322:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a324:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d10b      	bne.n	800a344 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a32c:	4ba1      	ldr	r3, [pc, #644]	; (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a32e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a330:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800a334:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a338:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a33c:	4a9d      	ldr	r2, [pc, #628]	; (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a33e:	430b      	orrs	r3, r1
 800a340:	6593      	str	r3, [r2, #88]	; 0x58
 800a342:	e003      	b.n	800a34c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a344:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a348:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a34c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a350:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a354:	f002 0308 	and.w	r3, r2, #8
 800a358:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a35c:	2300      	movs	r3, #0
 800a35e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a362:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800a366:	460b      	mov	r3, r1
 800a368:	4313      	orrs	r3, r2
 800a36a:	d01e      	beq.n	800a3aa <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800a36c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a370:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a374:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a378:	d10c      	bne.n	800a394 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a37a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a37e:	3328      	adds	r3, #40	; 0x28
 800a380:	2102      	movs	r1, #2
 800a382:	4618      	mov	r0, r3
 800a384:	f001 fd26 	bl	800bdd4 <RCCEx_PLL3_Config>
 800a388:	4603      	mov	r3, r0
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d002      	beq.n	800a394 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800a38e:	2301      	movs	r3, #1
 800a390:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a394:	4b87      	ldr	r3, [pc, #540]	; (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a398:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a39c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a3a4:	4a83      	ldr	r2, [pc, #524]	; (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a3a6:	430b      	orrs	r3, r1
 800a3a8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a3aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b2:	f002 0310 	and.w	r3, r2, #16
 800a3b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a3c0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800a3c4:	460b      	mov	r3, r1
 800a3c6:	4313      	orrs	r3, r2
 800a3c8:	d01e      	beq.n	800a408 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a3ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a3d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3d6:	d10c      	bne.n	800a3f2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a3d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3dc:	3328      	adds	r3, #40	; 0x28
 800a3de:	2102      	movs	r1, #2
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	f001 fcf7 	bl	800bdd4 <RCCEx_PLL3_Config>
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d002      	beq.n	800a3f2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800a3ec:	2301      	movs	r3, #1
 800a3ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a3f2:	4b70      	ldr	r3, [pc, #448]	; (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a3f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3f6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a3fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a402:	4a6c      	ldr	r2, [pc, #432]	; (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a404:	430b      	orrs	r3, r1
 800a406:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a408:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a40c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a410:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800a414:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a418:	2300      	movs	r3, #0
 800a41a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a41e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800a422:	460b      	mov	r3, r1
 800a424:	4313      	orrs	r3, r2
 800a426:	d03e      	beq.n	800a4a6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a428:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a42c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a430:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a434:	d022      	beq.n	800a47c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800a436:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a43a:	d81b      	bhi.n	800a474 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d003      	beq.n	800a448 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800a440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a444:	d00b      	beq.n	800a45e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800a446:	e015      	b.n	800a474 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a448:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a44c:	3308      	adds	r3, #8
 800a44e:	2100      	movs	r1, #0
 800a450:	4618      	mov	r0, r3
 800a452:	f001 fc0d 	bl	800bc70 <RCCEx_PLL2_Config>
 800a456:	4603      	mov	r3, r0
 800a458:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a45c:	e00f      	b.n	800a47e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a45e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a462:	3328      	adds	r3, #40	; 0x28
 800a464:	2102      	movs	r1, #2
 800a466:	4618      	mov	r0, r3
 800a468:	f001 fcb4 	bl	800bdd4 <RCCEx_PLL3_Config>
 800a46c:	4603      	mov	r3, r0
 800a46e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a472:	e004      	b.n	800a47e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a474:	2301      	movs	r3, #1
 800a476:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a47a:	e000      	b.n	800a47e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800a47c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a47e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a482:	2b00      	cmp	r3, #0
 800a484:	d10b      	bne.n	800a49e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a486:	4b4b      	ldr	r3, [pc, #300]	; (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a48a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800a48e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a492:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a496:	4a47      	ldr	r2, [pc, #284]	; (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a498:	430b      	orrs	r3, r1
 800a49a:	6593      	str	r3, [r2, #88]	; 0x58
 800a49c:	e003      	b.n	800a4a6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a49e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a4a2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a4a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ae:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800a4b2:	67bb      	str	r3, [r7, #120]	; 0x78
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a4b8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800a4bc:	460b      	mov	r3, r1
 800a4be:	4313      	orrs	r3, r2
 800a4c0:	d03b      	beq.n	800a53a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a4c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4ca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a4ce:	d01f      	beq.n	800a510 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800a4d0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a4d4:	d818      	bhi.n	800a508 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800a4d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a4da:	d003      	beq.n	800a4e4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800a4dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a4e0:	d007      	beq.n	800a4f2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800a4e2:	e011      	b.n	800a508 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a4e4:	4b33      	ldr	r3, [pc, #204]	; (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a4e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4e8:	4a32      	ldr	r2, [pc, #200]	; (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a4ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a4ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a4f0:	e00f      	b.n	800a512 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a4f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4f6:	3328      	adds	r3, #40	; 0x28
 800a4f8:	2101      	movs	r1, #1
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	f001 fc6a 	bl	800bdd4 <RCCEx_PLL3_Config>
 800a500:	4603      	mov	r3, r0
 800a502:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800a506:	e004      	b.n	800a512 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a508:	2301      	movs	r3, #1
 800a50a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a50e:	e000      	b.n	800a512 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800a510:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a512:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a516:	2b00      	cmp	r3, #0
 800a518:	d10b      	bne.n	800a532 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a51a:	4b26      	ldr	r3, [pc, #152]	; (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a51c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a51e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a522:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a52a:	4a22      	ldr	r2, [pc, #136]	; (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a52c:	430b      	orrs	r3, r1
 800a52e:	6553      	str	r3, [r2, #84]	; 0x54
 800a530:	e003      	b.n	800a53a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a532:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a536:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a53a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a53e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a542:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800a546:	673b      	str	r3, [r7, #112]	; 0x70
 800a548:	2300      	movs	r3, #0
 800a54a:	677b      	str	r3, [r7, #116]	; 0x74
 800a54c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800a550:	460b      	mov	r3, r1
 800a552:	4313      	orrs	r3, r2
 800a554:	d034      	beq.n	800a5c0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a556:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a55a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d003      	beq.n	800a568 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800a560:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a564:	d007      	beq.n	800a576 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800a566:	e011      	b.n	800a58c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a568:	4b12      	ldr	r3, [pc, #72]	; (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a56a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a56c:	4a11      	ldr	r2, [pc, #68]	; (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a56e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a572:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a574:	e00e      	b.n	800a594 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a576:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a57a:	3308      	adds	r3, #8
 800a57c:	2102      	movs	r1, #2
 800a57e:	4618      	mov	r0, r3
 800a580:	f001 fb76 	bl	800bc70 <RCCEx_PLL2_Config>
 800a584:	4603      	mov	r3, r0
 800a586:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a58a:	e003      	b.n	800a594 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800a58c:	2301      	movs	r3, #1
 800a58e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a592:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a594:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d10d      	bne.n	800a5b8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a59c:	4b05      	ldr	r3, [pc, #20]	; (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a59e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a5a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5aa:	4a02      	ldr	r2, [pc, #8]	; (800a5b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a5ac:	430b      	orrs	r3, r1
 800a5ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a5b0:	e006      	b.n	800a5c0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800a5b2:	bf00      	nop
 800a5b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a5bc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a5c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5c8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800a5cc:	66bb      	str	r3, [r7, #104]	; 0x68
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a5d2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800a5d6:	460b      	mov	r3, r1
 800a5d8:	4313      	orrs	r3, r2
 800a5da:	d00c      	beq.n	800a5f6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a5dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5e0:	3328      	adds	r3, #40	; 0x28
 800a5e2:	2102      	movs	r1, #2
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	f001 fbf5 	bl	800bdd4 <RCCEx_PLL3_Config>
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d002      	beq.n	800a5f6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800a5f0:	2301      	movs	r3, #1
 800a5f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a5f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5fe:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800a602:	663b      	str	r3, [r7, #96]	; 0x60
 800a604:	2300      	movs	r3, #0
 800a606:	667b      	str	r3, [r7, #100]	; 0x64
 800a608:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800a60c:	460b      	mov	r3, r1
 800a60e:	4313      	orrs	r3, r2
 800a610:	d038      	beq.n	800a684 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a612:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a616:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a61a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a61e:	d018      	beq.n	800a652 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800a620:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a624:	d811      	bhi.n	800a64a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a626:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a62a:	d014      	beq.n	800a656 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800a62c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a630:	d80b      	bhi.n	800a64a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a632:	2b00      	cmp	r3, #0
 800a634:	d011      	beq.n	800a65a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800a636:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a63a:	d106      	bne.n	800a64a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a63c:	4bc3      	ldr	r3, [pc, #780]	; (800a94c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a63e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a640:	4ac2      	ldr	r2, [pc, #776]	; (800a94c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a642:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a646:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a648:	e008      	b.n	800a65c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a64a:	2301      	movs	r3, #1
 800a64c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a650:	e004      	b.n	800a65c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a652:	bf00      	nop
 800a654:	e002      	b.n	800a65c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a656:	bf00      	nop
 800a658:	e000      	b.n	800a65c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a65a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a65c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a660:	2b00      	cmp	r3, #0
 800a662:	d10b      	bne.n	800a67c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a664:	4bb9      	ldr	r3, [pc, #740]	; (800a94c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a668:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a66c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a670:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a674:	4ab5      	ldr	r2, [pc, #724]	; (800a94c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a676:	430b      	orrs	r3, r1
 800a678:	6553      	str	r3, [r2, #84]	; 0x54
 800a67a:	e003      	b.n	800a684 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a67c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a680:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a684:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a68c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800a690:	65bb      	str	r3, [r7, #88]	; 0x58
 800a692:	2300      	movs	r3, #0
 800a694:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a696:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800a69a:	460b      	mov	r3, r1
 800a69c:	4313      	orrs	r3, r2
 800a69e:	d009      	beq.n	800a6b4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a6a0:	4baa      	ldr	r3, [pc, #680]	; (800a94c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a6a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6a4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a6a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a6ae:	4aa7      	ldr	r2, [pc, #668]	; (800a94c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a6b0:	430b      	orrs	r3, r1
 800a6b2:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a6b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6bc:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800a6c0:	653b      	str	r3, [r7, #80]	; 0x50
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	657b      	str	r3, [r7, #84]	; 0x54
 800a6c6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800a6ca:	460b      	mov	r3, r1
 800a6cc:	4313      	orrs	r3, r2
 800a6ce:	d00a      	beq.n	800a6e6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a6d0:	4b9e      	ldr	r3, [pc, #632]	; (800a94c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a6d2:	691b      	ldr	r3, [r3, #16]
 800a6d4:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800a6d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6dc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a6e0:	4a9a      	ldr	r2, [pc, #616]	; (800a94c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a6e2:	430b      	orrs	r3, r1
 800a6e4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a6e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ee:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800a6f2:	64bb      	str	r3, [r7, #72]	; 0x48
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a6f8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800a6fc:	460b      	mov	r3, r1
 800a6fe:	4313      	orrs	r3, r2
 800a700:	d009      	beq.n	800a716 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a702:	4b92      	ldr	r3, [pc, #584]	; (800a94c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a704:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a706:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800a70a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a70e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a710:	4a8e      	ldr	r2, [pc, #568]	; (800a94c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a712:	430b      	orrs	r3, r1
 800a714:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a716:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a71a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a71e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800a722:	643b      	str	r3, [r7, #64]	; 0x40
 800a724:	2300      	movs	r3, #0
 800a726:	647b      	str	r3, [r7, #68]	; 0x44
 800a728:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800a72c:	460b      	mov	r3, r1
 800a72e:	4313      	orrs	r3, r2
 800a730:	d00e      	beq.n	800a750 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a732:	4b86      	ldr	r3, [pc, #536]	; (800a94c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a734:	691b      	ldr	r3, [r3, #16]
 800a736:	4a85      	ldr	r2, [pc, #532]	; (800a94c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a738:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a73c:	6113      	str	r3, [r2, #16]
 800a73e:	4b83      	ldr	r3, [pc, #524]	; (800a94c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a740:	6919      	ldr	r1, [r3, #16]
 800a742:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a746:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800a74a:	4a80      	ldr	r2, [pc, #512]	; (800a94c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a74c:	430b      	orrs	r3, r1
 800a74e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a750:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a754:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a758:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800a75c:	63bb      	str	r3, [r7, #56]	; 0x38
 800a75e:	2300      	movs	r3, #0
 800a760:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a762:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800a766:	460b      	mov	r3, r1
 800a768:	4313      	orrs	r3, r2
 800a76a:	d009      	beq.n	800a780 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a76c:	4b77      	ldr	r3, [pc, #476]	; (800a94c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a76e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a770:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800a774:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a77a:	4a74      	ldr	r2, [pc, #464]	; (800a94c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a77c:	430b      	orrs	r3, r1
 800a77e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a780:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a784:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a788:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800a78c:	633b      	str	r3, [r7, #48]	; 0x30
 800a78e:	2300      	movs	r3, #0
 800a790:	637b      	str	r3, [r7, #52]	; 0x34
 800a792:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800a796:	460b      	mov	r3, r1
 800a798:	4313      	orrs	r3, r2
 800a79a:	d00a      	beq.n	800a7b2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a79c:	4b6b      	ldr	r3, [pc, #428]	; (800a94c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a79e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7a0:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800a7a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a7ac:	4a67      	ldr	r2, [pc, #412]	; (800a94c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a7ae:	430b      	orrs	r3, r1
 800a7b0:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a7b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ba:	2100      	movs	r1, #0
 800a7bc:	62b9      	str	r1, [r7, #40]	; 0x28
 800a7be:	f003 0301 	and.w	r3, r3, #1
 800a7c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a7c4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800a7c8:	460b      	mov	r3, r1
 800a7ca:	4313      	orrs	r3, r2
 800a7cc:	d011      	beq.n	800a7f2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a7ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7d2:	3308      	adds	r3, #8
 800a7d4:	2100      	movs	r1, #0
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	f001 fa4a 	bl	800bc70 <RCCEx_PLL2_Config>
 800a7dc:	4603      	mov	r3, r0
 800a7de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a7e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d003      	beq.n	800a7f2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a7ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a7f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7fa:	2100      	movs	r1, #0
 800a7fc:	6239      	str	r1, [r7, #32]
 800a7fe:	f003 0302 	and.w	r3, r3, #2
 800a802:	627b      	str	r3, [r7, #36]	; 0x24
 800a804:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a808:	460b      	mov	r3, r1
 800a80a:	4313      	orrs	r3, r2
 800a80c:	d011      	beq.n	800a832 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a80e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a812:	3308      	adds	r3, #8
 800a814:	2101      	movs	r1, #1
 800a816:	4618      	mov	r0, r3
 800a818:	f001 fa2a 	bl	800bc70 <RCCEx_PLL2_Config>
 800a81c:	4603      	mov	r3, r0
 800a81e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a822:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a826:	2b00      	cmp	r3, #0
 800a828:	d003      	beq.n	800a832 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a82a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a82e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a832:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a83a:	2100      	movs	r1, #0
 800a83c:	61b9      	str	r1, [r7, #24]
 800a83e:	f003 0304 	and.w	r3, r3, #4
 800a842:	61fb      	str	r3, [r7, #28]
 800a844:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a848:	460b      	mov	r3, r1
 800a84a:	4313      	orrs	r3, r2
 800a84c:	d011      	beq.n	800a872 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a84e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a852:	3308      	adds	r3, #8
 800a854:	2102      	movs	r1, #2
 800a856:	4618      	mov	r0, r3
 800a858:	f001 fa0a 	bl	800bc70 <RCCEx_PLL2_Config>
 800a85c:	4603      	mov	r3, r0
 800a85e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a862:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a866:	2b00      	cmp	r3, #0
 800a868:	d003      	beq.n	800a872 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a86a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a86e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a872:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a87a:	2100      	movs	r1, #0
 800a87c:	6139      	str	r1, [r7, #16]
 800a87e:	f003 0308 	and.w	r3, r3, #8
 800a882:	617b      	str	r3, [r7, #20]
 800a884:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a888:	460b      	mov	r3, r1
 800a88a:	4313      	orrs	r3, r2
 800a88c:	d011      	beq.n	800a8b2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a88e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a892:	3328      	adds	r3, #40	; 0x28
 800a894:	2100      	movs	r1, #0
 800a896:	4618      	mov	r0, r3
 800a898:	f001 fa9c 	bl	800bdd4 <RCCEx_PLL3_Config>
 800a89c:	4603      	mov	r3, r0
 800a89e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800a8a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d003      	beq.n	800a8b2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a8ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a8b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ba:	2100      	movs	r1, #0
 800a8bc:	60b9      	str	r1, [r7, #8]
 800a8be:	f003 0310 	and.w	r3, r3, #16
 800a8c2:	60fb      	str	r3, [r7, #12]
 800a8c4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a8c8:	460b      	mov	r3, r1
 800a8ca:	4313      	orrs	r3, r2
 800a8cc:	d011      	beq.n	800a8f2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a8ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8d2:	3328      	adds	r3, #40	; 0x28
 800a8d4:	2101      	movs	r1, #1
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	f001 fa7c 	bl	800bdd4 <RCCEx_PLL3_Config>
 800a8dc:	4603      	mov	r3, r0
 800a8de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a8e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d003      	beq.n	800a8f2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a8ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a8f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8fa:	2100      	movs	r1, #0
 800a8fc:	6039      	str	r1, [r7, #0]
 800a8fe:	f003 0320 	and.w	r3, r3, #32
 800a902:	607b      	str	r3, [r7, #4]
 800a904:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a908:	460b      	mov	r3, r1
 800a90a:	4313      	orrs	r3, r2
 800a90c:	d011      	beq.n	800a932 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a90e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a912:	3328      	adds	r3, #40	; 0x28
 800a914:	2102      	movs	r1, #2
 800a916:	4618      	mov	r0, r3
 800a918:	f001 fa5c 	bl	800bdd4 <RCCEx_PLL3_Config>
 800a91c:	4603      	mov	r3, r0
 800a91e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a922:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a926:	2b00      	cmp	r3, #0
 800a928:	d003      	beq.n	800a932 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a92a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a92e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800a932:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800a936:	2b00      	cmp	r3, #0
 800a938:	d101      	bne.n	800a93e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800a93a:	2300      	movs	r3, #0
 800a93c:	e000      	b.n	800a940 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800a93e:	2301      	movs	r3, #1
}
 800a940:	4618      	mov	r0, r3
 800a942:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800a946:	46bd      	mov	sp, r7
 800a948:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a94c:	58024400 	.word	0x58024400

0800a950 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b090      	sub	sp, #64	; 0x40
 800a954:	af00      	add	r7, sp, #0
 800a956:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a95a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a95e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800a962:	430b      	orrs	r3, r1
 800a964:	f040 8094 	bne.w	800aa90 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800a968:	4b9e      	ldr	r3, [pc, #632]	; (800abe4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a96a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a96c:	f003 0307 	and.w	r3, r3, #7
 800a970:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a974:	2b04      	cmp	r3, #4
 800a976:	f200 8087 	bhi.w	800aa88 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a97a:	a201      	add	r2, pc, #4	; (adr r2, 800a980 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800a97c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a980:	0800a995 	.word	0x0800a995
 800a984:	0800a9bd 	.word	0x0800a9bd
 800a988:	0800a9e5 	.word	0x0800a9e5
 800a98c:	0800aa81 	.word	0x0800aa81
 800a990:	0800aa0d 	.word	0x0800aa0d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a994:	4b93      	ldr	r3, [pc, #588]	; (800abe4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a99c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a9a0:	d108      	bne.n	800a9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a9a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	f001 f810 	bl	800b9cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a9ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9b0:	f000 bd45 	b.w	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a9b8:	f000 bd41 	b.w	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a9bc:	4b89      	ldr	r3, [pc, #548]	; (800abe4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a9c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a9c8:	d108      	bne.n	800a9dc <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a9ca:	f107 0318 	add.w	r3, r7, #24
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	f000 fd54 	bl	800b47c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a9d4:	69bb      	ldr	r3, [r7, #24]
 800a9d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9d8:	f000 bd31 	b.w	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a9dc:	2300      	movs	r3, #0
 800a9de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a9e0:	f000 bd2d 	b.w	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a9e4:	4b7f      	ldr	r3, [pc, #508]	; (800abe4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a9ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a9f0:	d108      	bne.n	800aa04 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a9f2:	f107 030c 	add.w	r3, r7, #12
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	f000 fe94 	bl	800b724 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa00:	f000 bd1d 	b.w	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa04:	2300      	movs	r3, #0
 800aa06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa08:	f000 bd19 	b.w	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800aa0c:	4b75      	ldr	r3, [pc, #468]	; (800abe4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800aa0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa10:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800aa14:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aa16:	4b73      	ldr	r3, [pc, #460]	; (800abe4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	f003 0304 	and.w	r3, r3, #4
 800aa1e:	2b04      	cmp	r3, #4
 800aa20:	d10c      	bne.n	800aa3c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800aa22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d109      	bne.n	800aa3c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aa28:	4b6e      	ldr	r3, [pc, #440]	; (800abe4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	08db      	lsrs	r3, r3, #3
 800aa2e:	f003 0303 	and.w	r3, r3, #3
 800aa32:	4a6d      	ldr	r2, [pc, #436]	; (800abe8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800aa34:	fa22 f303 	lsr.w	r3, r2, r3
 800aa38:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa3a:	e01f      	b.n	800aa7c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aa3c:	4b69      	ldr	r3, [pc, #420]	; (800abe4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa48:	d106      	bne.n	800aa58 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800aa4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aa50:	d102      	bne.n	800aa58 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800aa52:	4b66      	ldr	r3, [pc, #408]	; (800abec <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800aa54:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa56:	e011      	b.n	800aa7c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aa58:	4b62      	ldr	r3, [pc, #392]	; (800abe4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa64:	d106      	bne.n	800aa74 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800aa66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa6c:	d102      	bne.n	800aa74 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800aa6e:	4b60      	ldr	r3, [pc, #384]	; (800abf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800aa70:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa72:	e003      	b.n	800aa7c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800aa74:	2300      	movs	r3, #0
 800aa76:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800aa78:	f000 bce1 	b.w	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800aa7c:	f000 bcdf 	b.w	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800aa80:	4b5c      	ldr	r3, [pc, #368]	; (800abf4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800aa82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa84:	f000 bcdb 	b.w	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800aa88:	2300      	movs	r3, #0
 800aa8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa8c:	f000 bcd7 	b.w	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800aa90:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa94:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800aa98:	430b      	orrs	r3, r1
 800aa9a:	f040 80ad 	bne.w	800abf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800aa9e:	4b51      	ldr	r3, [pc, #324]	; (800abe4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800aaa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aaa2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800aaa6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800aaa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aaae:	d056      	beq.n	800ab5e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800aab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aab2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aab6:	f200 8090 	bhi.w	800abda <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800aaba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aabc:	2bc0      	cmp	r3, #192	; 0xc0
 800aabe:	f000 8088 	beq.w	800abd2 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800aac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aac4:	2bc0      	cmp	r3, #192	; 0xc0
 800aac6:	f200 8088 	bhi.w	800abda <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800aaca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aacc:	2b80      	cmp	r3, #128	; 0x80
 800aace:	d032      	beq.n	800ab36 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800aad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aad2:	2b80      	cmp	r3, #128	; 0x80
 800aad4:	f200 8081 	bhi.w	800abda <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800aad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d003      	beq.n	800aae6 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800aade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aae0:	2b40      	cmp	r3, #64	; 0x40
 800aae2:	d014      	beq.n	800ab0e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800aae4:	e079      	b.n	800abda <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aae6:	4b3f      	ldr	r3, [pc, #252]	; (800abe4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aaee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aaf2:	d108      	bne.n	800ab06 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aaf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aaf8:	4618      	mov	r0, r3
 800aafa:	f000 ff67 	bl	800b9cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aafe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab00:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab02:	f000 bc9c 	b.w	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab06:	2300      	movs	r3, #0
 800ab08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab0a:	f000 bc98 	b.w	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ab0e:	4b35      	ldr	r3, [pc, #212]	; (800abe4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ab16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ab1a:	d108      	bne.n	800ab2e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab1c:	f107 0318 	add.w	r3, r7, #24
 800ab20:	4618      	mov	r0, r3
 800ab22:	f000 fcab 	bl	800b47c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ab26:	69bb      	ldr	r3, [r7, #24]
 800ab28:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab2a:	f000 bc88 	b.w	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab2e:	2300      	movs	r3, #0
 800ab30:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab32:	f000 bc84 	b.w	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ab36:	4b2b      	ldr	r3, [pc, #172]	; (800abe4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ab3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab42:	d108      	bne.n	800ab56 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab44:	f107 030c 	add.w	r3, r7, #12
 800ab48:	4618      	mov	r0, r3
 800ab4a:	f000 fdeb 	bl	800b724 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab52:	f000 bc74 	b.w	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab56:	2300      	movs	r3, #0
 800ab58:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab5a:	f000 bc70 	b.w	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ab5e:	4b21      	ldr	r3, [pc, #132]	; (800abe4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ab60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab62:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ab66:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ab68:	4b1e      	ldr	r3, [pc, #120]	; (800abe4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	f003 0304 	and.w	r3, r3, #4
 800ab70:	2b04      	cmp	r3, #4
 800ab72:	d10c      	bne.n	800ab8e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800ab74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d109      	bne.n	800ab8e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ab7a:	4b1a      	ldr	r3, [pc, #104]	; (800abe4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	08db      	lsrs	r3, r3, #3
 800ab80:	f003 0303 	and.w	r3, r3, #3
 800ab84:	4a18      	ldr	r2, [pc, #96]	; (800abe8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800ab86:	fa22 f303 	lsr.w	r3, r2, r3
 800ab8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab8c:	e01f      	b.n	800abce <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ab8e:	4b15      	ldr	r3, [pc, #84]	; (800abe4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab9a:	d106      	bne.n	800abaa <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800ab9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aba2:	d102      	bne.n	800abaa <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800aba4:	4b11      	ldr	r3, [pc, #68]	; (800abec <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800aba6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aba8:	e011      	b.n	800abce <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800abaa:	4b0e      	ldr	r3, [pc, #56]	; (800abe4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800abb2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800abb6:	d106      	bne.n	800abc6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800abb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800abbe:	d102      	bne.n	800abc6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800abc0:	4b0b      	ldr	r3, [pc, #44]	; (800abf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800abc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800abc4:	e003      	b.n	800abce <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800abc6:	2300      	movs	r3, #0
 800abc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800abca:	f000 bc38 	b.w	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800abce:	f000 bc36 	b.w	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800abd2:	4b08      	ldr	r3, [pc, #32]	; (800abf4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800abd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800abd6:	f000 bc32 	b.w	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800abda:	2300      	movs	r3, #0
 800abdc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800abde:	f000 bc2e 	b.w	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800abe2:	bf00      	nop
 800abe4:	58024400 	.word	0x58024400
 800abe8:	03d09000 	.word	0x03d09000
 800abec:	003d0900 	.word	0x003d0900
 800abf0:	017d7840 	.word	0x017d7840
 800abf4:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800abf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800abfc:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800ac00:	430b      	orrs	r3, r1
 800ac02:	f040 809c 	bne.w	800ad3e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800ac06:	4b9e      	ldr	r3, [pc, #632]	; (800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ac08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac0a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800ac0e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ac10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac12:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ac16:	d054      	beq.n	800acc2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800ac18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac1a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ac1e:	f200 808b 	bhi.w	800ad38 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800ac22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac24:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ac28:	f000 8083 	beq.w	800ad32 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800ac2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac2e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ac32:	f200 8081 	bhi.w	800ad38 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800ac36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ac3c:	d02f      	beq.n	800ac9e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800ac3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ac44:	d878      	bhi.n	800ad38 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800ac46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d004      	beq.n	800ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800ac4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac4e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ac52:	d012      	beq.n	800ac7a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800ac54:	e070      	b.n	800ad38 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ac56:	4b8a      	ldr	r3, [pc, #552]	; (800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ac62:	d107      	bne.n	800ac74 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ac64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ac68:	4618      	mov	r0, r3
 800ac6a:	f000 feaf 	bl	800b9cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ac6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac70:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac72:	e3e4      	b.n	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac74:	2300      	movs	r3, #0
 800ac76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac78:	e3e1      	b.n	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ac7a:	4b81      	ldr	r3, [pc, #516]	; (800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ac82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ac86:	d107      	bne.n	800ac98 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac88:	f107 0318 	add.w	r3, r7, #24
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	f000 fbf5 	bl	800b47c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ac92:	69bb      	ldr	r3, [r7, #24]
 800ac94:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac96:	e3d2      	b.n	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac98:	2300      	movs	r3, #0
 800ac9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac9c:	e3cf      	b.n	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ac9e:	4b78      	ldr	r3, [pc, #480]	; (800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aca6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800acaa:	d107      	bne.n	800acbc <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800acac:	f107 030c 	add.w	r3, r7, #12
 800acb0:	4618      	mov	r0, r3
 800acb2:	f000 fd37 	bl	800b724 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acba:	e3c0      	b.n	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800acbc:	2300      	movs	r3, #0
 800acbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800acc0:	e3bd      	b.n	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800acc2:	4b6f      	ldr	r3, [pc, #444]	; (800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800acc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800acc6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800acca:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800accc:	4b6c      	ldr	r3, [pc, #432]	; (800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	f003 0304 	and.w	r3, r3, #4
 800acd4:	2b04      	cmp	r3, #4
 800acd6:	d10c      	bne.n	800acf2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800acd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d109      	bne.n	800acf2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800acde:	4b68      	ldr	r3, [pc, #416]	; (800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	08db      	lsrs	r3, r3, #3
 800ace4:	f003 0303 	and.w	r3, r3, #3
 800ace8:	4a66      	ldr	r2, [pc, #408]	; (800ae84 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800acea:	fa22 f303 	lsr.w	r3, r2, r3
 800acee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800acf0:	e01e      	b.n	800ad30 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800acf2:	4b63      	ldr	r3, [pc, #396]	; (800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800acfe:	d106      	bne.n	800ad0e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800ad00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ad06:	d102      	bne.n	800ad0e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ad08:	4b5f      	ldr	r3, [pc, #380]	; (800ae88 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800ad0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad0c:	e010      	b.n	800ad30 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ad0e:	4b5c      	ldr	r3, [pc, #368]	; (800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad1a:	d106      	bne.n	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800ad1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad22:	d102      	bne.n	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ad24:	4b59      	ldr	r3, [pc, #356]	; (800ae8c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800ad26:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad28:	e002      	b.n	800ad30 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ad2e:	e386      	b.n	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ad30:	e385      	b.n	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ad32:	4b57      	ldr	r3, [pc, #348]	; (800ae90 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800ad34:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad36:	e382      	b.n	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800ad38:	2300      	movs	r3, #0
 800ad3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad3c:	e37f      	b.n	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800ad3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad42:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800ad46:	430b      	orrs	r3, r1
 800ad48:	f040 80a7 	bne.w	800ae9a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800ad4c:	4b4c      	ldr	r3, [pc, #304]	; (800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ad4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad50:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800ad54:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ad56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ad5c:	d055      	beq.n	800ae0a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800ad5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad60:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ad64:	f200 8096 	bhi.w	800ae94 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800ad68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad6a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ad6e:	f000 8084 	beq.w	800ae7a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800ad72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad74:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ad78:	f200 808c 	bhi.w	800ae94 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800ad7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ad82:	d030      	beq.n	800ade6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800ad84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad86:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ad8a:	f200 8083 	bhi.w	800ae94 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800ad8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d004      	beq.n	800ad9e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800ad94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad96:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ad9a:	d012      	beq.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800ad9c:	e07a      	b.n	800ae94 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ad9e:	4b38      	ldr	r3, [pc, #224]	; (800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ada6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800adaa:	d107      	bne.n	800adbc <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800adac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800adb0:	4618      	mov	r0, r3
 800adb2:	f000 fe0b 	bl	800b9cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800adb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800adba:	e340      	b.n	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800adbc:	2300      	movs	r3, #0
 800adbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800adc0:	e33d      	b.n	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800adc2:	4b2f      	ldr	r3, [pc, #188]	; (800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800adca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800adce:	d107      	bne.n	800ade0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800add0:	f107 0318 	add.w	r3, r7, #24
 800add4:	4618      	mov	r0, r3
 800add6:	f000 fb51 	bl	800b47c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800adda:	69bb      	ldr	r3, [r7, #24]
 800addc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800adde:	e32e      	b.n	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ade0:	2300      	movs	r3, #0
 800ade2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ade4:	e32b      	b.n	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ade6:	4b26      	ldr	r3, [pc, #152]	; (800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800adee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800adf2:	d107      	bne.n	800ae04 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800adf4:	f107 030c 	add.w	r3, r7, #12
 800adf8:	4618      	mov	r0, r3
 800adfa:	f000 fc93 	bl	800b724 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae02:	e31c      	b.n	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae04:	2300      	movs	r3, #0
 800ae06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae08:	e319      	b.n	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ae0a:	4b1d      	ldr	r3, [pc, #116]	; (800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ae0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae0e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ae12:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ae14:	4b1a      	ldr	r3, [pc, #104]	; (800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	f003 0304 	and.w	r3, r3, #4
 800ae1c:	2b04      	cmp	r3, #4
 800ae1e:	d10c      	bne.n	800ae3a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800ae20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d109      	bne.n	800ae3a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ae26:	4b16      	ldr	r3, [pc, #88]	; (800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	08db      	lsrs	r3, r3, #3
 800ae2c:	f003 0303 	and.w	r3, r3, #3
 800ae30:	4a14      	ldr	r2, [pc, #80]	; (800ae84 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800ae32:	fa22 f303 	lsr.w	r3, r2, r3
 800ae36:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae38:	e01e      	b.n	800ae78 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ae3a:	4b11      	ldr	r3, [pc, #68]	; (800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae46:	d106      	bne.n	800ae56 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800ae48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ae4e:	d102      	bne.n	800ae56 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ae50:	4b0d      	ldr	r3, [pc, #52]	; (800ae88 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800ae52:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae54:	e010      	b.n	800ae78 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ae56:	4b0a      	ldr	r3, [pc, #40]	; (800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ae62:	d106      	bne.n	800ae72 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800ae64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae6a:	d102      	bne.n	800ae72 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ae6c:	4b07      	ldr	r3, [pc, #28]	; (800ae8c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800ae6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae70:	e002      	b.n	800ae78 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ae72:	2300      	movs	r3, #0
 800ae74:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ae76:	e2e2      	b.n	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ae78:	e2e1      	b.n	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ae7a:	4b05      	ldr	r3, [pc, #20]	; (800ae90 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800ae7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae7e:	e2de      	b.n	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ae80:	58024400 	.word	0x58024400
 800ae84:	03d09000 	.word	0x03d09000
 800ae88:	003d0900 	.word	0x003d0900
 800ae8c:	017d7840 	.word	0x017d7840
 800ae90:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800ae94:	2300      	movs	r3, #0
 800ae96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae98:	e2d1      	b.n	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800ae9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae9e:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800aea2:	430b      	orrs	r3, r1
 800aea4:	f040 809c 	bne.w	800afe0 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800aea8:	4b93      	ldr	r3, [pc, #588]	; (800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aeaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aeac:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800aeb0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800aeb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aeb8:	d054      	beq.n	800af64 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800aeba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aebc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aec0:	f200 808b 	bhi.w	800afda <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800aec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aec6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800aeca:	f000 8083 	beq.w	800afd4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800aece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aed0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800aed4:	f200 8081 	bhi.w	800afda <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800aed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aede:	d02f      	beq.n	800af40 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800aee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aee2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aee6:	d878      	bhi.n	800afda <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800aee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d004      	beq.n	800aef8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800aeee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aef0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aef4:	d012      	beq.n	800af1c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800aef6:	e070      	b.n	800afda <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aef8:	4b7f      	ldr	r3, [pc, #508]	; (800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af00:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800af04:	d107      	bne.n	800af16 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800af06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800af0a:	4618      	mov	r0, r3
 800af0c:	f000 fd5e 	bl	800b9cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800af10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af12:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af14:	e293      	b.n	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800af16:	2300      	movs	r3, #0
 800af18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af1a:	e290      	b.n	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800af1c:	4b76      	ldr	r3, [pc, #472]	; (800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800af24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800af28:	d107      	bne.n	800af3a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af2a:	f107 0318 	add.w	r3, r7, #24
 800af2e:	4618      	mov	r0, r3
 800af30:	f000 faa4 	bl	800b47c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800af34:	69bb      	ldr	r3, [r7, #24]
 800af36:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af38:	e281      	b.n	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800af3a:	2300      	movs	r3, #0
 800af3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af3e:	e27e      	b.n	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800af40:	4b6d      	ldr	r3, [pc, #436]	; (800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800af48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af4c:	d107      	bne.n	800af5e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af4e:	f107 030c 	add.w	r3, r7, #12
 800af52:	4618      	mov	r0, r3
 800af54:	f000 fbe6 	bl	800b724 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af5c:	e26f      	b.n	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800af5e:	2300      	movs	r3, #0
 800af60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af62:	e26c      	b.n	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800af64:	4b64      	ldr	r3, [pc, #400]	; (800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800af66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af68:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800af6c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800af6e:	4b62      	ldr	r3, [pc, #392]	; (800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	f003 0304 	and.w	r3, r3, #4
 800af76:	2b04      	cmp	r3, #4
 800af78:	d10c      	bne.n	800af94 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800af7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d109      	bne.n	800af94 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800af80:	4b5d      	ldr	r3, [pc, #372]	; (800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	08db      	lsrs	r3, r3, #3
 800af86:	f003 0303 	and.w	r3, r3, #3
 800af8a:	4a5c      	ldr	r2, [pc, #368]	; (800b0fc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800af8c:	fa22 f303 	lsr.w	r3, r2, r3
 800af90:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af92:	e01e      	b.n	800afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800af94:	4b58      	ldr	r3, [pc, #352]	; (800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800afa0:	d106      	bne.n	800afb0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800afa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afa4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800afa8:	d102      	bne.n	800afb0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800afaa:	4b55      	ldr	r3, [pc, #340]	; (800b100 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800afac:	63fb      	str	r3, [r7, #60]	; 0x3c
 800afae:	e010      	b.n	800afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800afb0:	4b51      	ldr	r3, [pc, #324]	; (800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800afb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800afbc:	d106      	bne.n	800afcc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800afbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800afc4:	d102      	bne.n	800afcc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800afc6:	4b4f      	ldr	r3, [pc, #316]	; (800b104 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800afc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800afca:	e002      	b.n	800afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800afcc:	2300      	movs	r3, #0
 800afce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800afd0:	e235      	b.n	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800afd2:	e234      	b.n	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800afd4:	4b4c      	ldr	r3, [pc, #304]	; (800b108 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800afd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800afd8:	e231      	b.n	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800afda:	2300      	movs	r3, #0
 800afdc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800afde:	e22e      	b.n	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800afe0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800afe4:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800afe8:	430b      	orrs	r3, r1
 800afea:	f040 808f 	bne.w	800b10c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800afee:	4b42      	ldr	r3, [pc, #264]	; (800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aff0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aff2:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800aff6:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800aff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800affa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800affe:	d06b      	beq.n	800b0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800b000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b002:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b006:	d874      	bhi.n	800b0f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b00a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b00e:	d056      	beq.n	800b0be <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800b010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b012:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b016:	d86c      	bhi.n	800b0f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b01a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b01e:	d03b      	beq.n	800b098 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800b020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b022:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b026:	d864      	bhi.n	800b0f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b02a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b02e:	d021      	beq.n	800b074 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800b030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b032:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b036:	d85c      	bhi.n	800b0f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d004      	beq.n	800b048 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800b03e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b040:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b044:	d004      	beq.n	800b050 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800b046:	e054      	b.n	800b0f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800b048:	f7fe fa0a 	bl	8009460 <HAL_RCC_GetPCLK1Freq>
 800b04c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b04e:	e1f6      	b.n	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b050:	4b29      	ldr	r3, [pc, #164]	; (800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b058:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b05c:	d107      	bne.n	800b06e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b05e:	f107 0318 	add.w	r3, r7, #24
 800b062:	4618      	mov	r0, r3
 800b064:	f000 fa0a 	bl	800b47c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b068:	69fb      	ldr	r3, [r7, #28]
 800b06a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b06c:	e1e7      	b.n	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b06e:	2300      	movs	r3, #0
 800b070:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b072:	e1e4      	b.n	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b074:	4b20      	ldr	r3, [pc, #128]	; (800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b07c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b080:	d107      	bne.n	800b092 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b082:	f107 030c 	add.w	r3, r7, #12
 800b086:	4618      	mov	r0, r3
 800b088:	f000 fb4c 	bl	800b724 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b08c:	693b      	ldr	r3, [r7, #16]
 800b08e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b090:	e1d5      	b.n	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b092:	2300      	movs	r3, #0
 800b094:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b096:	e1d2      	b.n	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b098:	4b17      	ldr	r3, [pc, #92]	; (800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	f003 0304 	and.w	r3, r3, #4
 800b0a0:	2b04      	cmp	r3, #4
 800b0a2:	d109      	bne.n	800b0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b0a4:	4b14      	ldr	r3, [pc, #80]	; (800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	08db      	lsrs	r3, r3, #3
 800b0aa:	f003 0303 	and.w	r3, r3, #3
 800b0ae:	4a13      	ldr	r2, [pc, #76]	; (800b0fc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800b0b0:	fa22 f303 	lsr.w	r3, r2, r3
 800b0b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0b6:	e1c2      	b.n	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0bc:	e1bf      	b.n	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b0be:	4b0e      	ldr	r3, [pc, #56]	; (800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0ca:	d102      	bne.n	800b0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800b0cc:	4b0c      	ldr	r3, [pc, #48]	; (800b100 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b0ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0d0:	e1b5      	b.n	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0d6:	e1b2      	b.n	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b0d8:	4b07      	ldr	r3, [pc, #28]	; (800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b0e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b0e4:	d102      	bne.n	800b0ec <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800b0e6:	4b07      	ldr	r3, [pc, #28]	; (800b104 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800b0e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0ea:	e1a8      	b.n	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0f0:	e1a5      	b.n	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0f6:	e1a2      	b.n	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b0f8:	58024400 	.word	0x58024400
 800b0fc:	03d09000 	.word	0x03d09000
 800b100:	003d0900 	.word	0x003d0900
 800b104:	017d7840 	.word	0x017d7840
 800b108:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b10c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b110:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800b114:	430b      	orrs	r3, r1
 800b116:	d173      	bne.n	800b200 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800b118:	4b9c      	ldr	r3, [pc, #624]	; (800b38c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b11a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b11c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b120:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b124:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b128:	d02f      	beq.n	800b18a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800b12a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b12c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b130:	d863      	bhi.n	800b1fa <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800b132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b134:	2b00      	cmp	r3, #0
 800b136:	d004      	beq.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800b138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b13a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b13e:	d012      	beq.n	800b166 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800b140:	e05b      	b.n	800b1fa <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b142:	4b92      	ldr	r3, [pc, #584]	; (800b38c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b14a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b14e:	d107      	bne.n	800b160 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b150:	f107 0318 	add.w	r3, r7, #24
 800b154:	4618      	mov	r0, r3
 800b156:	f000 f991 	bl	800b47c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b15a:	69bb      	ldr	r3, [r7, #24]
 800b15c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b15e:	e16e      	b.n	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b160:	2300      	movs	r3, #0
 800b162:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b164:	e16b      	b.n	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b166:	4b89      	ldr	r3, [pc, #548]	; (800b38c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b16e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b172:	d107      	bne.n	800b184 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b174:	f107 030c 	add.w	r3, r7, #12
 800b178:	4618      	mov	r0, r3
 800b17a:	f000 fad3 	bl	800b724 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b17e:	697b      	ldr	r3, [r7, #20]
 800b180:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b182:	e15c      	b.n	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b184:	2300      	movs	r3, #0
 800b186:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b188:	e159      	b.n	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b18a:	4b80      	ldr	r3, [pc, #512]	; (800b38c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b18c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b18e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b192:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b194:	4b7d      	ldr	r3, [pc, #500]	; (800b38c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	f003 0304 	and.w	r3, r3, #4
 800b19c:	2b04      	cmp	r3, #4
 800b19e:	d10c      	bne.n	800b1ba <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800b1a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d109      	bne.n	800b1ba <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b1a6:	4b79      	ldr	r3, [pc, #484]	; (800b38c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	08db      	lsrs	r3, r3, #3
 800b1ac:	f003 0303 	and.w	r3, r3, #3
 800b1b0:	4a77      	ldr	r2, [pc, #476]	; (800b390 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800b1b2:	fa22 f303 	lsr.w	r3, r2, r3
 800b1b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b1b8:	e01e      	b.n	800b1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b1ba:	4b74      	ldr	r3, [pc, #464]	; (800b38c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b1c6:	d106      	bne.n	800b1d6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800b1c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b1ce:	d102      	bne.n	800b1d6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b1d0:	4b70      	ldr	r3, [pc, #448]	; (800b394 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800b1d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b1d4:	e010      	b.n	800b1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b1d6:	4b6d      	ldr	r3, [pc, #436]	; (800b38c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b1de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b1e2:	d106      	bne.n	800b1f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800b1e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b1ea:	d102      	bne.n	800b1f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b1ec:	4b6a      	ldr	r3, [pc, #424]	; (800b398 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800b1ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b1f0:	e002      	b.n	800b1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b1f6:	e122      	b.n	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b1f8:	e121      	b.n	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b1fe:	e11e      	b.n	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b200:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b204:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800b208:	430b      	orrs	r3, r1
 800b20a:	d133      	bne.n	800b274 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800b20c:	4b5f      	ldr	r3, [pc, #380]	; (800b38c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b20e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b210:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b214:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d004      	beq.n	800b226 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800b21c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b21e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b222:	d012      	beq.n	800b24a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800b224:	e023      	b.n	800b26e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b226:	4b59      	ldr	r3, [pc, #356]	; (800b38c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b22e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b232:	d107      	bne.n	800b244 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b234:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b238:	4618      	mov	r0, r3
 800b23a:	f000 fbc7 	bl	800b9cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b23e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b240:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b242:	e0fc      	b.n	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b244:	2300      	movs	r3, #0
 800b246:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b248:	e0f9      	b.n	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b24a:	4b50      	ldr	r3, [pc, #320]	; (800b38c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b252:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b256:	d107      	bne.n	800b268 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b258:	f107 0318 	add.w	r3, r7, #24
 800b25c:	4618      	mov	r0, r3
 800b25e:	f000 f90d 	bl	800b47c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b262:	6a3b      	ldr	r3, [r7, #32]
 800b264:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b266:	e0ea      	b.n	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b268:	2300      	movs	r3, #0
 800b26a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b26c:	e0e7      	b.n	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b26e:	2300      	movs	r3, #0
 800b270:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b272:	e0e4      	b.n	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b274:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b278:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800b27c:	430b      	orrs	r3, r1
 800b27e:	f040 808d 	bne.w	800b39c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800b282:	4b42      	ldr	r3, [pc, #264]	; (800b38c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b286:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800b28a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b28c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b28e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b292:	d06b      	beq.n	800b36c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800b294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b296:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b29a:	d874      	bhi.n	800b386 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b29c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b29e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2a2:	d056      	beq.n	800b352 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800b2a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2aa:	d86c      	bhi.n	800b386 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b2ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2ae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b2b2:	d03b      	beq.n	800b32c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800b2b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2b6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b2ba:	d864      	bhi.n	800b386 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b2bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b2c2:	d021      	beq.n	800b308 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800b2c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b2ca:	d85c      	bhi.n	800b386 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b2cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d004      	beq.n	800b2dc <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800b2d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b2d8:	d004      	beq.n	800b2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800b2da:	e054      	b.n	800b386 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b2dc:	f000 f8b8 	bl	800b450 <HAL_RCCEx_GetD3PCLK1Freq>
 800b2e0:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b2e2:	e0ac      	b.n	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b2e4:	4b29      	ldr	r3, [pc, #164]	; (800b38c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b2ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b2f0:	d107      	bne.n	800b302 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b2f2:	f107 0318 	add.w	r3, r7, #24
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	f000 f8c0 	bl	800b47c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b2fc:	69fb      	ldr	r3, [r7, #28]
 800b2fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b300:	e09d      	b.n	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b302:	2300      	movs	r3, #0
 800b304:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b306:	e09a      	b.n	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b308:	4b20      	ldr	r3, [pc, #128]	; (800b38c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b310:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b314:	d107      	bne.n	800b326 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b316:	f107 030c 	add.w	r3, r7, #12
 800b31a:	4618      	mov	r0, r3
 800b31c:	f000 fa02 	bl	800b724 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b320:	693b      	ldr	r3, [r7, #16]
 800b322:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b324:	e08b      	b.n	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b326:	2300      	movs	r3, #0
 800b328:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b32a:	e088      	b.n	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b32c:	4b17      	ldr	r3, [pc, #92]	; (800b38c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	f003 0304 	and.w	r3, r3, #4
 800b334:	2b04      	cmp	r3, #4
 800b336:	d109      	bne.n	800b34c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b338:	4b14      	ldr	r3, [pc, #80]	; (800b38c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	08db      	lsrs	r3, r3, #3
 800b33e:	f003 0303 	and.w	r3, r3, #3
 800b342:	4a13      	ldr	r2, [pc, #76]	; (800b390 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800b344:	fa22 f303 	lsr.w	r3, r2, r3
 800b348:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b34a:	e078      	b.n	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b34c:	2300      	movs	r3, #0
 800b34e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b350:	e075      	b.n	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b352:	4b0e      	ldr	r3, [pc, #56]	; (800b38c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b35a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b35e:	d102      	bne.n	800b366 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800b360:	4b0c      	ldr	r3, [pc, #48]	; (800b394 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800b362:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b364:	e06b      	b.n	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b366:	2300      	movs	r3, #0
 800b368:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b36a:	e068      	b.n	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b36c:	4b07      	ldr	r3, [pc, #28]	; (800b38c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b374:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b378:	d102      	bne.n	800b380 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800b37a:	4b07      	ldr	r3, [pc, #28]	; (800b398 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800b37c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b37e:	e05e      	b.n	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b380:	2300      	movs	r3, #0
 800b382:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b384:	e05b      	b.n	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800b386:	2300      	movs	r3, #0
 800b388:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b38a:	e058      	b.n	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b38c:	58024400 	.word	0x58024400
 800b390:	03d09000 	.word	0x03d09000
 800b394:	003d0900 	.word	0x003d0900
 800b398:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b39c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b3a0:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800b3a4:	430b      	orrs	r3, r1
 800b3a6:	d148      	bne.n	800b43a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800b3a8:	4b27      	ldr	r3, [pc, #156]	; (800b448 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b3aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b3b0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b3b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b3b8:	d02a      	beq.n	800b410 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800b3ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b3c0:	d838      	bhi.n	800b434 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800b3c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d004      	beq.n	800b3d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800b3c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b3ce:	d00d      	beq.n	800b3ec <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800b3d0:	e030      	b.n	800b434 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b3d2:	4b1d      	ldr	r3, [pc, #116]	; (800b448 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b3da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b3de:	d102      	bne.n	800b3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800b3e0:	4b1a      	ldr	r3, [pc, #104]	; (800b44c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800b3e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b3e4:	e02b      	b.n	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b3ea:	e028      	b.n	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b3ec:	4b16      	ldr	r3, [pc, #88]	; (800b448 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b3f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b3f8:	d107      	bne.n	800b40a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b3fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b3fe:	4618      	mov	r0, r3
 800b400:	f000 fae4 	bl	800b9cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b406:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b408:	e019      	b.n	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b40a:	2300      	movs	r3, #0
 800b40c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b40e:	e016      	b.n	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b410:	4b0d      	ldr	r3, [pc, #52]	; (800b448 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b418:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b41c:	d107      	bne.n	800b42e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b41e:	f107 0318 	add.w	r3, r7, #24
 800b422:	4618      	mov	r0, r3
 800b424:	f000 f82a 	bl	800b47c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b428:	69fb      	ldr	r3, [r7, #28]
 800b42a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b42c:	e007      	b.n	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b42e:	2300      	movs	r3, #0
 800b430:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b432:	e004      	b.n	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b434:	2300      	movs	r3, #0
 800b436:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b438:	e001      	b.n	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800b43a:	2300      	movs	r3, #0
 800b43c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800b43e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b440:	4618      	mov	r0, r3
 800b442:	3740      	adds	r7, #64	; 0x40
 800b444:	46bd      	mov	sp, r7
 800b446:	bd80      	pop	{r7, pc}
 800b448:	58024400 	.word	0x58024400
 800b44c:	017d7840 	.word	0x017d7840

0800b450 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b450:	b580      	push	{r7, lr}
 800b452:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b454:	f7fd ffd4 	bl	8009400 <HAL_RCC_GetHCLKFreq>
 800b458:	4602      	mov	r2, r0
 800b45a:	4b06      	ldr	r3, [pc, #24]	; (800b474 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b45c:	6a1b      	ldr	r3, [r3, #32]
 800b45e:	091b      	lsrs	r3, r3, #4
 800b460:	f003 0307 	and.w	r3, r3, #7
 800b464:	4904      	ldr	r1, [pc, #16]	; (800b478 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b466:	5ccb      	ldrb	r3, [r1, r3]
 800b468:	f003 031f 	and.w	r3, r3, #31
 800b46c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b470:	4618      	mov	r0, r3
 800b472:	bd80      	pop	{r7, pc}
 800b474:	58024400 	.word	0x58024400
 800b478:	080154d4 	.word	0x080154d4

0800b47c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b47c:	b480      	push	{r7}
 800b47e:	b089      	sub	sp, #36	; 0x24
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b484:	4ba1      	ldr	r3, [pc, #644]	; (800b70c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b488:	f003 0303 	and.w	r3, r3, #3
 800b48c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b48e:	4b9f      	ldr	r3, [pc, #636]	; (800b70c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b492:	0b1b      	lsrs	r3, r3, #12
 800b494:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b498:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b49a:	4b9c      	ldr	r3, [pc, #624]	; (800b70c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b49c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b49e:	091b      	lsrs	r3, r3, #4
 800b4a0:	f003 0301 	and.w	r3, r3, #1
 800b4a4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b4a6:	4b99      	ldr	r3, [pc, #612]	; (800b70c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b4a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4aa:	08db      	lsrs	r3, r3, #3
 800b4ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b4b0:	693a      	ldr	r2, [r7, #16]
 800b4b2:	fb02 f303 	mul.w	r3, r2, r3
 800b4b6:	ee07 3a90 	vmov	s15, r3
 800b4ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4be:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b4c2:	697b      	ldr	r3, [r7, #20]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	f000 8111 	beq.w	800b6ec <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b4ca:	69bb      	ldr	r3, [r7, #24]
 800b4cc:	2b02      	cmp	r3, #2
 800b4ce:	f000 8083 	beq.w	800b5d8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b4d2:	69bb      	ldr	r3, [r7, #24]
 800b4d4:	2b02      	cmp	r3, #2
 800b4d6:	f200 80a1 	bhi.w	800b61c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b4da:	69bb      	ldr	r3, [r7, #24]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d003      	beq.n	800b4e8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b4e0:	69bb      	ldr	r3, [r7, #24]
 800b4e2:	2b01      	cmp	r3, #1
 800b4e4:	d056      	beq.n	800b594 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b4e6:	e099      	b.n	800b61c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b4e8:	4b88      	ldr	r3, [pc, #544]	; (800b70c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	f003 0320 	and.w	r3, r3, #32
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d02d      	beq.n	800b550 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b4f4:	4b85      	ldr	r3, [pc, #532]	; (800b70c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	08db      	lsrs	r3, r3, #3
 800b4fa:	f003 0303 	and.w	r3, r3, #3
 800b4fe:	4a84      	ldr	r2, [pc, #528]	; (800b710 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b500:	fa22 f303 	lsr.w	r3, r2, r3
 800b504:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b506:	68bb      	ldr	r3, [r7, #8]
 800b508:	ee07 3a90 	vmov	s15, r3
 800b50c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b510:	697b      	ldr	r3, [r7, #20]
 800b512:	ee07 3a90 	vmov	s15, r3
 800b516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b51a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b51e:	4b7b      	ldr	r3, [pc, #492]	; (800b70c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b522:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b526:	ee07 3a90 	vmov	s15, r3
 800b52a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b52e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b532:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b714 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b536:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b53a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b53e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b542:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b54a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b54e:	e087      	b.n	800b660 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b550:	697b      	ldr	r3, [r7, #20]
 800b552:	ee07 3a90 	vmov	s15, r3
 800b556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b55a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b718 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b55e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b562:	4b6a      	ldr	r3, [pc, #424]	; (800b70c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b566:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b56a:	ee07 3a90 	vmov	s15, r3
 800b56e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b572:	ed97 6a03 	vldr	s12, [r7, #12]
 800b576:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b714 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b57a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b57e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b582:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b586:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b58a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b58e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b592:	e065      	b.n	800b660 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b594:	697b      	ldr	r3, [r7, #20]
 800b596:	ee07 3a90 	vmov	s15, r3
 800b59a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b59e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b71c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b5a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5a6:	4b59      	ldr	r3, [pc, #356]	; (800b70c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b5a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5ae:	ee07 3a90 	vmov	s15, r3
 800b5b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5b6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b5ba:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b714 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b5be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b5c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b5ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b5d6:	e043      	b.n	800b660 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b5d8:	697b      	ldr	r3, [r7, #20]
 800b5da:	ee07 3a90 	vmov	s15, r3
 800b5de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5e2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b720 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b5e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5ea:	4b48      	ldr	r3, [pc, #288]	; (800b70c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b5ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5f2:	ee07 3a90 	vmov	s15, r3
 800b5f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5fa:	ed97 6a03 	vldr	s12, [r7, #12]
 800b5fe:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b714 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b602:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b606:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b60a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b60e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b612:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b616:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b61a:	e021      	b.n	800b660 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b61c:	697b      	ldr	r3, [r7, #20]
 800b61e:	ee07 3a90 	vmov	s15, r3
 800b622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b626:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b71c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b62a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b62e:	4b37      	ldr	r3, [pc, #220]	; (800b70c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b632:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b636:	ee07 3a90 	vmov	s15, r3
 800b63a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b63e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b642:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b714 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b646:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b64a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b64e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b652:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b656:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b65a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b65e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b660:	4b2a      	ldr	r3, [pc, #168]	; (800b70c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b664:	0a5b      	lsrs	r3, r3, #9
 800b666:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b66a:	ee07 3a90 	vmov	s15, r3
 800b66e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b672:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b676:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b67a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b67e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b682:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b686:	ee17 2a90 	vmov	r2, s15
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b68e:	4b1f      	ldr	r3, [pc, #124]	; (800b70c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b692:	0c1b      	lsrs	r3, r3, #16
 800b694:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b698:	ee07 3a90 	vmov	s15, r3
 800b69c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b6a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b6a8:	edd7 6a07 	vldr	s13, [r7, #28]
 800b6ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b6b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b6b4:	ee17 2a90 	vmov	r2, s15
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b6bc:	4b13      	ldr	r3, [pc, #76]	; (800b70c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b6be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6c0:	0e1b      	lsrs	r3, r3, #24
 800b6c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b6c6:	ee07 3a90 	vmov	s15, r3
 800b6ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b6d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b6d6:	edd7 6a07 	vldr	s13, [r7, #28]
 800b6da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b6de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b6e2:	ee17 2a90 	vmov	r2, s15
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b6ea:	e008      	b.n	800b6fe <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	609a      	str	r2, [r3, #8]
}
 800b6fe:	bf00      	nop
 800b700:	3724      	adds	r7, #36	; 0x24
 800b702:	46bd      	mov	sp, r7
 800b704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b708:	4770      	bx	lr
 800b70a:	bf00      	nop
 800b70c:	58024400 	.word	0x58024400
 800b710:	03d09000 	.word	0x03d09000
 800b714:	46000000 	.word	0x46000000
 800b718:	4c742400 	.word	0x4c742400
 800b71c:	4a742400 	.word	0x4a742400
 800b720:	4bbebc20 	.word	0x4bbebc20

0800b724 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b724:	b480      	push	{r7}
 800b726:	b089      	sub	sp, #36	; 0x24
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b72c:	4ba1      	ldr	r3, [pc, #644]	; (800b9b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b72e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b730:	f003 0303 	and.w	r3, r3, #3
 800b734:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b736:	4b9f      	ldr	r3, [pc, #636]	; (800b9b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b73a:	0d1b      	lsrs	r3, r3, #20
 800b73c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b740:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b742:	4b9c      	ldr	r3, [pc, #624]	; (800b9b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b746:	0a1b      	lsrs	r3, r3, #8
 800b748:	f003 0301 	and.w	r3, r3, #1
 800b74c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b74e:	4b99      	ldr	r3, [pc, #612]	; (800b9b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b752:	08db      	lsrs	r3, r3, #3
 800b754:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b758:	693a      	ldr	r2, [r7, #16]
 800b75a:	fb02 f303 	mul.w	r3, r2, r3
 800b75e:	ee07 3a90 	vmov	s15, r3
 800b762:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b766:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b76a:	697b      	ldr	r3, [r7, #20]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	f000 8111 	beq.w	800b994 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b772:	69bb      	ldr	r3, [r7, #24]
 800b774:	2b02      	cmp	r3, #2
 800b776:	f000 8083 	beq.w	800b880 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b77a:	69bb      	ldr	r3, [r7, #24]
 800b77c:	2b02      	cmp	r3, #2
 800b77e:	f200 80a1 	bhi.w	800b8c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b782:	69bb      	ldr	r3, [r7, #24]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d003      	beq.n	800b790 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b788:	69bb      	ldr	r3, [r7, #24]
 800b78a:	2b01      	cmp	r3, #1
 800b78c:	d056      	beq.n	800b83c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b78e:	e099      	b.n	800b8c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b790:	4b88      	ldr	r3, [pc, #544]	; (800b9b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	f003 0320 	and.w	r3, r3, #32
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d02d      	beq.n	800b7f8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b79c:	4b85      	ldr	r3, [pc, #532]	; (800b9b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	08db      	lsrs	r3, r3, #3
 800b7a2:	f003 0303 	and.w	r3, r3, #3
 800b7a6:	4a84      	ldr	r2, [pc, #528]	; (800b9b8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b7a8:	fa22 f303 	lsr.w	r3, r2, r3
 800b7ac:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b7ae:	68bb      	ldr	r3, [r7, #8]
 800b7b0:	ee07 3a90 	vmov	s15, r3
 800b7b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7b8:	697b      	ldr	r3, [r7, #20]
 800b7ba:	ee07 3a90 	vmov	s15, r3
 800b7be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b7c6:	4b7b      	ldr	r3, [pc, #492]	; (800b9b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b7c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7ce:	ee07 3a90 	vmov	s15, r3
 800b7d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b7da:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b9bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b7de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b7ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7f2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b7f6:	e087      	b.n	800b908 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b7f8:	697b      	ldr	r3, [r7, #20]
 800b7fa:	ee07 3a90 	vmov	s15, r3
 800b7fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b802:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b9c0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b806:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b80a:	4b6a      	ldr	r3, [pc, #424]	; (800b9b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b80c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b80e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b812:	ee07 3a90 	vmov	s15, r3
 800b816:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b81a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b81e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b9bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b822:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b826:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b82a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b82e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b832:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b836:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b83a:	e065      	b.n	800b908 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b83c:	697b      	ldr	r3, [r7, #20]
 800b83e:	ee07 3a90 	vmov	s15, r3
 800b842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b846:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b9c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b84a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b84e:	4b59      	ldr	r3, [pc, #356]	; (800b9b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b856:	ee07 3a90 	vmov	s15, r3
 800b85a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b85e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b862:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b9bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b866:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b86a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b86e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b872:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b876:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b87a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b87e:	e043      	b.n	800b908 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b880:	697b      	ldr	r3, [r7, #20]
 800b882:	ee07 3a90 	vmov	s15, r3
 800b886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b88a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b9c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b88e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b892:	4b48      	ldr	r3, [pc, #288]	; (800b9b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b896:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b89a:	ee07 3a90 	vmov	s15, r3
 800b89e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8a2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b8a6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b9bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b8aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b8ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b8b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b8b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b8ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b8c2:	e021      	b.n	800b908 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b8c4:	697b      	ldr	r3, [r7, #20]
 800b8c6:	ee07 3a90 	vmov	s15, r3
 800b8ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8ce:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b9c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b8d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b8d6:	4b37      	ldr	r3, [pc, #220]	; (800b9b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b8d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8de:	ee07 3a90 	vmov	s15, r3
 800b8e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8e6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b8ea:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b9bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b8ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b8f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b8f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b8fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b8fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b902:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b906:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b908:	4b2a      	ldr	r3, [pc, #168]	; (800b9b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b90a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b90c:	0a5b      	lsrs	r3, r3, #9
 800b90e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b912:	ee07 3a90 	vmov	s15, r3
 800b916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b91a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b91e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b922:	edd7 6a07 	vldr	s13, [r7, #28]
 800b926:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b92a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b92e:	ee17 2a90 	vmov	r2, s15
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b936:	4b1f      	ldr	r3, [pc, #124]	; (800b9b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b93a:	0c1b      	lsrs	r3, r3, #16
 800b93c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b940:	ee07 3a90 	vmov	s15, r3
 800b944:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b948:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b94c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b950:	edd7 6a07 	vldr	s13, [r7, #28]
 800b954:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b958:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b95c:	ee17 2a90 	vmov	r2, s15
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b964:	4b13      	ldr	r3, [pc, #76]	; (800b9b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b968:	0e1b      	lsrs	r3, r3, #24
 800b96a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b96e:	ee07 3a90 	vmov	s15, r3
 800b972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b976:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b97a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b97e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b982:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b986:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b98a:	ee17 2a90 	vmov	r2, s15
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b992:	e008      	b.n	800b9a6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2200      	movs	r2, #0
 800b998:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	2200      	movs	r2, #0
 800b99e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	609a      	str	r2, [r3, #8]
}
 800b9a6:	bf00      	nop
 800b9a8:	3724      	adds	r7, #36	; 0x24
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b0:	4770      	bx	lr
 800b9b2:	bf00      	nop
 800b9b4:	58024400 	.word	0x58024400
 800b9b8:	03d09000 	.word	0x03d09000
 800b9bc:	46000000 	.word	0x46000000
 800b9c0:	4c742400 	.word	0x4c742400
 800b9c4:	4a742400 	.word	0x4a742400
 800b9c8:	4bbebc20 	.word	0x4bbebc20

0800b9cc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b9cc:	b480      	push	{r7}
 800b9ce:	b089      	sub	sp, #36	; 0x24
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b9d4:	4ba0      	ldr	r3, [pc, #640]	; (800bc58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b9d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9d8:	f003 0303 	and.w	r3, r3, #3
 800b9dc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800b9de:	4b9e      	ldr	r3, [pc, #632]	; (800bc58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b9e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9e2:	091b      	lsrs	r3, r3, #4
 800b9e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b9e8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b9ea:	4b9b      	ldr	r3, [pc, #620]	; (800bc58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b9ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9ee:	f003 0301 	and.w	r3, r3, #1
 800b9f2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b9f4:	4b98      	ldr	r3, [pc, #608]	; (800bc58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b9f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9f8:	08db      	lsrs	r3, r3, #3
 800b9fa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b9fe:	693a      	ldr	r2, [r7, #16]
 800ba00:	fb02 f303 	mul.w	r3, r2, r3
 800ba04:	ee07 3a90 	vmov	s15, r3
 800ba08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba0c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800ba10:	697b      	ldr	r3, [r7, #20]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	f000 8111 	beq.w	800bc3a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800ba18:	69bb      	ldr	r3, [r7, #24]
 800ba1a:	2b02      	cmp	r3, #2
 800ba1c:	f000 8083 	beq.w	800bb26 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800ba20:	69bb      	ldr	r3, [r7, #24]
 800ba22:	2b02      	cmp	r3, #2
 800ba24:	f200 80a1 	bhi.w	800bb6a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800ba28:	69bb      	ldr	r3, [r7, #24]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d003      	beq.n	800ba36 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800ba2e:	69bb      	ldr	r3, [r7, #24]
 800ba30:	2b01      	cmp	r3, #1
 800ba32:	d056      	beq.n	800bae2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800ba34:	e099      	b.n	800bb6a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ba36:	4b88      	ldr	r3, [pc, #544]	; (800bc58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	f003 0320 	and.w	r3, r3, #32
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d02d      	beq.n	800ba9e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ba42:	4b85      	ldr	r3, [pc, #532]	; (800bc58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	08db      	lsrs	r3, r3, #3
 800ba48:	f003 0303 	and.w	r3, r3, #3
 800ba4c:	4a83      	ldr	r2, [pc, #524]	; (800bc5c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800ba4e:	fa22 f303 	lsr.w	r3, r2, r3
 800ba52:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ba54:	68bb      	ldr	r3, [r7, #8]
 800ba56:	ee07 3a90 	vmov	s15, r3
 800ba5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba5e:	697b      	ldr	r3, [r7, #20]
 800ba60:	ee07 3a90 	vmov	s15, r3
 800ba64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba6c:	4b7a      	ldr	r3, [pc, #488]	; (800bc58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ba6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba74:	ee07 3a90 	vmov	s15, r3
 800ba78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba7c:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba80:	eddf 5a77 	vldr	s11, [pc, #476]	; 800bc60 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ba84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ba90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba94:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba98:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ba9c:	e087      	b.n	800bbae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ba9e:	697b      	ldr	r3, [r7, #20]
 800baa0:	ee07 3a90 	vmov	s15, r3
 800baa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800baa8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800bc64 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800baac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bab0:	4b69      	ldr	r3, [pc, #420]	; (800bc58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bab4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bab8:	ee07 3a90 	vmov	s15, r3
 800babc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bac0:	ed97 6a03 	vldr	s12, [r7, #12]
 800bac4:	eddf 5a66 	vldr	s11, [pc, #408]	; 800bc60 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bac8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bacc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bad0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bad4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bad8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800badc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bae0:	e065      	b.n	800bbae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bae2:	697b      	ldr	r3, [r7, #20]
 800bae4:	ee07 3a90 	vmov	s15, r3
 800bae8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800baec:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800bc68 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800baf0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800baf4:	4b58      	ldr	r3, [pc, #352]	; (800bc58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800baf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800baf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bafc:	ee07 3a90 	vmov	s15, r3
 800bb00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb04:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb08:	eddf 5a55 	vldr	s11, [pc, #340]	; 800bc60 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bb0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb20:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bb24:	e043      	b.n	800bbae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bb26:	697b      	ldr	r3, [r7, #20]
 800bb28:	ee07 3a90 	vmov	s15, r3
 800bb2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb30:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800bc6c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800bb34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb38:	4b47      	ldr	r3, [pc, #284]	; (800bc58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bb3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb40:	ee07 3a90 	vmov	s15, r3
 800bb44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb48:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb4c:	eddf 5a44 	vldr	s11, [pc, #272]	; 800bc60 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bb50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb60:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb64:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bb68:	e021      	b.n	800bbae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bb6a:	697b      	ldr	r3, [r7, #20]
 800bb6c:	ee07 3a90 	vmov	s15, r3
 800bb70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb74:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800bc64 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800bb78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb7c:	4b36      	ldr	r3, [pc, #216]	; (800bc58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bb7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb84:	ee07 3a90 	vmov	s15, r3
 800bb88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb8c:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb90:	eddf 5a33 	vldr	s11, [pc, #204]	; 800bc60 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bb94:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb98:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bba0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bba4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bba8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bbac:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800bbae:	4b2a      	ldr	r3, [pc, #168]	; (800bc58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bbb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbb2:	0a5b      	lsrs	r3, r3, #9
 800bbb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bbb8:	ee07 3a90 	vmov	s15, r3
 800bbbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbc0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bbc4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bbc8:	edd7 6a07 	vldr	s13, [r7, #28]
 800bbcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bbd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bbd4:	ee17 2a90 	vmov	r2, s15
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800bbdc:	4b1e      	ldr	r3, [pc, #120]	; (800bc58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bbde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbe0:	0c1b      	lsrs	r3, r3, #16
 800bbe2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bbe6:	ee07 3a90 	vmov	s15, r3
 800bbea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bbf2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bbf6:	edd7 6a07 	vldr	s13, [r7, #28]
 800bbfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bbfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc02:	ee17 2a90 	vmov	r2, s15
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800bc0a:	4b13      	ldr	r3, [pc, #76]	; (800bc58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc0e:	0e1b      	lsrs	r3, r3, #24
 800bc10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc14:	ee07 3a90 	vmov	s15, r3
 800bc18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc1c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bc20:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bc24:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc30:	ee17 2a90 	vmov	r2, s15
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800bc38:	e008      	b.n	800bc4c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	2200      	movs	r2, #0
 800bc44:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	2200      	movs	r2, #0
 800bc4a:	609a      	str	r2, [r3, #8]
}
 800bc4c:	bf00      	nop
 800bc4e:	3724      	adds	r7, #36	; 0x24
 800bc50:	46bd      	mov	sp, r7
 800bc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc56:	4770      	bx	lr
 800bc58:	58024400 	.word	0x58024400
 800bc5c:	03d09000 	.word	0x03d09000
 800bc60:	46000000 	.word	0x46000000
 800bc64:	4c742400 	.word	0x4c742400
 800bc68:	4a742400 	.word	0x4a742400
 800bc6c:	4bbebc20 	.word	0x4bbebc20

0800bc70 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800bc70:	b580      	push	{r7, lr}
 800bc72:	b084      	sub	sp, #16
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
 800bc78:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bc7e:	4b53      	ldr	r3, [pc, #332]	; (800bdcc <RCCEx_PLL2_Config+0x15c>)
 800bc80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc82:	f003 0303 	and.w	r3, r3, #3
 800bc86:	2b03      	cmp	r3, #3
 800bc88:	d101      	bne.n	800bc8e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800bc8a:	2301      	movs	r3, #1
 800bc8c:	e099      	b.n	800bdc2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800bc8e:	4b4f      	ldr	r3, [pc, #316]	; (800bdcc <RCCEx_PLL2_Config+0x15c>)
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	4a4e      	ldr	r2, [pc, #312]	; (800bdcc <RCCEx_PLL2_Config+0x15c>)
 800bc94:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bc98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bc9a:	f7f7 f973 	bl	8002f84 <HAL_GetTick>
 800bc9e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bca0:	e008      	b.n	800bcb4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bca2:	f7f7 f96f 	bl	8002f84 <HAL_GetTick>
 800bca6:	4602      	mov	r2, r0
 800bca8:	68bb      	ldr	r3, [r7, #8]
 800bcaa:	1ad3      	subs	r3, r2, r3
 800bcac:	2b02      	cmp	r3, #2
 800bcae:	d901      	bls.n	800bcb4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bcb0:	2303      	movs	r3, #3
 800bcb2:	e086      	b.n	800bdc2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bcb4:	4b45      	ldr	r3, [pc, #276]	; (800bdcc <RCCEx_PLL2_Config+0x15c>)
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d1f0      	bne.n	800bca2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800bcc0:	4b42      	ldr	r3, [pc, #264]	; (800bdcc <RCCEx_PLL2_Config+0x15c>)
 800bcc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcc4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	031b      	lsls	r3, r3, #12
 800bcce:	493f      	ldr	r1, [pc, #252]	; (800bdcc <RCCEx_PLL2_Config+0x15c>)
 800bcd0:	4313      	orrs	r3, r2
 800bcd2:	628b      	str	r3, [r1, #40]	; 0x28
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	685b      	ldr	r3, [r3, #4]
 800bcd8:	3b01      	subs	r3, #1
 800bcda:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	689b      	ldr	r3, [r3, #8]
 800bce2:	3b01      	subs	r3, #1
 800bce4:	025b      	lsls	r3, r3, #9
 800bce6:	b29b      	uxth	r3, r3
 800bce8:	431a      	orrs	r2, r3
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	68db      	ldr	r3, [r3, #12]
 800bcee:	3b01      	subs	r3, #1
 800bcf0:	041b      	lsls	r3, r3, #16
 800bcf2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800bcf6:	431a      	orrs	r2, r3
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	691b      	ldr	r3, [r3, #16]
 800bcfc:	3b01      	subs	r3, #1
 800bcfe:	061b      	lsls	r3, r3, #24
 800bd00:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800bd04:	4931      	ldr	r1, [pc, #196]	; (800bdcc <RCCEx_PLL2_Config+0x15c>)
 800bd06:	4313      	orrs	r3, r2
 800bd08:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800bd0a:	4b30      	ldr	r3, [pc, #192]	; (800bdcc <RCCEx_PLL2_Config+0x15c>)
 800bd0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd0e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	695b      	ldr	r3, [r3, #20]
 800bd16:	492d      	ldr	r1, [pc, #180]	; (800bdcc <RCCEx_PLL2_Config+0x15c>)
 800bd18:	4313      	orrs	r3, r2
 800bd1a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800bd1c:	4b2b      	ldr	r3, [pc, #172]	; (800bdcc <RCCEx_PLL2_Config+0x15c>)
 800bd1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd20:	f023 0220 	bic.w	r2, r3, #32
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	699b      	ldr	r3, [r3, #24]
 800bd28:	4928      	ldr	r1, [pc, #160]	; (800bdcc <RCCEx_PLL2_Config+0x15c>)
 800bd2a:	4313      	orrs	r3, r2
 800bd2c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800bd2e:	4b27      	ldr	r3, [pc, #156]	; (800bdcc <RCCEx_PLL2_Config+0x15c>)
 800bd30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd32:	4a26      	ldr	r2, [pc, #152]	; (800bdcc <RCCEx_PLL2_Config+0x15c>)
 800bd34:	f023 0310 	bic.w	r3, r3, #16
 800bd38:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800bd3a:	4b24      	ldr	r3, [pc, #144]	; (800bdcc <RCCEx_PLL2_Config+0x15c>)
 800bd3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bd3e:	4b24      	ldr	r3, [pc, #144]	; (800bdd0 <RCCEx_PLL2_Config+0x160>)
 800bd40:	4013      	ands	r3, r2
 800bd42:	687a      	ldr	r2, [r7, #4]
 800bd44:	69d2      	ldr	r2, [r2, #28]
 800bd46:	00d2      	lsls	r2, r2, #3
 800bd48:	4920      	ldr	r1, [pc, #128]	; (800bdcc <RCCEx_PLL2_Config+0x15c>)
 800bd4a:	4313      	orrs	r3, r2
 800bd4c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800bd4e:	4b1f      	ldr	r3, [pc, #124]	; (800bdcc <RCCEx_PLL2_Config+0x15c>)
 800bd50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd52:	4a1e      	ldr	r2, [pc, #120]	; (800bdcc <RCCEx_PLL2_Config+0x15c>)
 800bd54:	f043 0310 	orr.w	r3, r3, #16
 800bd58:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800bd5a:	683b      	ldr	r3, [r7, #0]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d106      	bne.n	800bd6e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800bd60:	4b1a      	ldr	r3, [pc, #104]	; (800bdcc <RCCEx_PLL2_Config+0x15c>)
 800bd62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd64:	4a19      	ldr	r2, [pc, #100]	; (800bdcc <RCCEx_PLL2_Config+0x15c>)
 800bd66:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bd6a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bd6c:	e00f      	b.n	800bd8e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bd6e:	683b      	ldr	r3, [r7, #0]
 800bd70:	2b01      	cmp	r3, #1
 800bd72:	d106      	bne.n	800bd82 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800bd74:	4b15      	ldr	r3, [pc, #84]	; (800bdcc <RCCEx_PLL2_Config+0x15c>)
 800bd76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd78:	4a14      	ldr	r2, [pc, #80]	; (800bdcc <RCCEx_PLL2_Config+0x15c>)
 800bd7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bd7e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bd80:	e005      	b.n	800bd8e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800bd82:	4b12      	ldr	r3, [pc, #72]	; (800bdcc <RCCEx_PLL2_Config+0x15c>)
 800bd84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd86:	4a11      	ldr	r2, [pc, #68]	; (800bdcc <RCCEx_PLL2_Config+0x15c>)
 800bd88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bd8c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800bd8e:	4b0f      	ldr	r3, [pc, #60]	; (800bdcc <RCCEx_PLL2_Config+0x15c>)
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	4a0e      	ldr	r2, [pc, #56]	; (800bdcc <RCCEx_PLL2_Config+0x15c>)
 800bd94:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bd98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bd9a:	f7f7 f8f3 	bl	8002f84 <HAL_GetTick>
 800bd9e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bda0:	e008      	b.n	800bdb4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bda2:	f7f7 f8ef 	bl	8002f84 <HAL_GetTick>
 800bda6:	4602      	mov	r2, r0
 800bda8:	68bb      	ldr	r3, [r7, #8]
 800bdaa:	1ad3      	subs	r3, r2, r3
 800bdac:	2b02      	cmp	r3, #2
 800bdae:	d901      	bls.n	800bdb4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bdb0:	2303      	movs	r3, #3
 800bdb2:	e006      	b.n	800bdc2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bdb4:	4b05      	ldr	r3, [pc, #20]	; (800bdcc <RCCEx_PLL2_Config+0x15c>)
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d0f0      	beq.n	800bda2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800bdc0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	3710      	adds	r7, #16
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	bd80      	pop	{r7, pc}
 800bdca:	bf00      	nop
 800bdcc:	58024400 	.word	0x58024400
 800bdd0:	ffff0007 	.word	0xffff0007

0800bdd4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b084      	sub	sp, #16
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
 800bddc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bdde:	2300      	movs	r3, #0
 800bde0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bde2:	4b53      	ldr	r3, [pc, #332]	; (800bf30 <RCCEx_PLL3_Config+0x15c>)
 800bde4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bde6:	f003 0303 	and.w	r3, r3, #3
 800bdea:	2b03      	cmp	r3, #3
 800bdec:	d101      	bne.n	800bdf2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800bdee:	2301      	movs	r3, #1
 800bdf0:	e099      	b.n	800bf26 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800bdf2:	4b4f      	ldr	r3, [pc, #316]	; (800bf30 <RCCEx_PLL3_Config+0x15c>)
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	4a4e      	ldr	r2, [pc, #312]	; (800bf30 <RCCEx_PLL3_Config+0x15c>)
 800bdf8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bdfc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bdfe:	f7f7 f8c1 	bl	8002f84 <HAL_GetTick>
 800be02:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800be04:	e008      	b.n	800be18 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800be06:	f7f7 f8bd 	bl	8002f84 <HAL_GetTick>
 800be0a:	4602      	mov	r2, r0
 800be0c:	68bb      	ldr	r3, [r7, #8]
 800be0e:	1ad3      	subs	r3, r2, r3
 800be10:	2b02      	cmp	r3, #2
 800be12:	d901      	bls.n	800be18 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800be14:	2303      	movs	r3, #3
 800be16:	e086      	b.n	800bf26 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800be18:	4b45      	ldr	r3, [pc, #276]	; (800bf30 <RCCEx_PLL3_Config+0x15c>)
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800be20:	2b00      	cmp	r3, #0
 800be22:	d1f0      	bne.n	800be06 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800be24:	4b42      	ldr	r3, [pc, #264]	; (800bf30 <RCCEx_PLL3_Config+0x15c>)
 800be26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be28:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	051b      	lsls	r3, r3, #20
 800be32:	493f      	ldr	r1, [pc, #252]	; (800bf30 <RCCEx_PLL3_Config+0x15c>)
 800be34:	4313      	orrs	r3, r2
 800be36:	628b      	str	r3, [r1, #40]	; 0x28
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	685b      	ldr	r3, [r3, #4]
 800be3c:	3b01      	subs	r3, #1
 800be3e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	689b      	ldr	r3, [r3, #8]
 800be46:	3b01      	subs	r3, #1
 800be48:	025b      	lsls	r3, r3, #9
 800be4a:	b29b      	uxth	r3, r3
 800be4c:	431a      	orrs	r2, r3
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	68db      	ldr	r3, [r3, #12]
 800be52:	3b01      	subs	r3, #1
 800be54:	041b      	lsls	r3, r3, #16
 800be56:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800be5a:	431a      	orrs	r2, r3
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	691b      	ldr	r3, [r3, #16]
 800be60:	3b01      	subs	r3, #1
 800be62:	061b      	lsls	r3, r3, #24
 800be64:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800be68:	4931      	ldr	r1, [pc, #196]	; (800bf30 <RCCEx_PLL3_Config+0x15c>)
 800be6a:	4313      	orrs	r3, r2
 800be6c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800be6e:	4b30      	ldr	r3, [pc, #192]	; (800bf30 <RCCEx_PLL3_Config+0x15c>)
 800be70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be72:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	695b      	ldr	r3, [r3, #20]
 800be7a:	492d      	ldr	r1, [pc, #180]	; (800bf30 <RCCEx_PLL3_Config+0x15c>)
 800be7c:	4313      	orrs	r3, r2
 800be7e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800be80:	4b2b      	ldr	r3, [pc, #172]	; (800bf30 <RCCEx_PLL3_Config+0x15c>)
 800be82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be84:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	699b      	ldr	r3, [r3, #24]
 800be8c:	4928      	ldr	r1, [pc, #160]	; (800bf30 <RCCEx_PLL3_Config+0x15c>)
 800be8e:	4313      	orrs	r3, r2
 800be90:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800be92:	4b27      	ldr	r3, [pc, #156]	; (800bf30 <RCCEx_PLL3_Config+0x15c>)
 800be94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be96:	4a26      	ldr	r2, [pc, #152]	; (800bf30 <RCCEx_PLL3_Config+0x15c>)
 800be98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800be9c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800be9e:	4b24      	ldr	r3, [pc, #144]	; (800bf30 <RCCEx_PLL3_Config+0x15c>)
 800bea0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bea2:	4b24      	ldr	r3, [pc, #144]	; (800bf34 <RCCEx_PLL3_Config+0x160>)
 800bea4:	4013      	ands	r3, r2
 800bea6:	687a      	ldr	r2, [r7, #4]
 800bea8:	69d2      	ldr	r2, [r2, #28]
 800beaa:	00d2      	lsls	r2, r2, #3
 800beac:	4920      	ldr	r1, [pc, #128]	; (800bf30 <RCCEx_PLL3_Config+0x15c>)
 800beae:	4313      	orrs	r3, r2
 800beb0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800beb2:	4b1f      	ldr	r3, [pc, #124]	; (800bf30 <RCCEx_PLL3_Config+0x15c>)
 800beb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beb6:	4a1e      	ldr	r2, [pc, #120]	; (800bf30 <RCCEx_PLL3_Config+0x15c>)
 800beb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bebc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800bebe:	683b      	ldr	r3, [r7, #0]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d106      	bne.n	800bed2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800bec4:	4b1a      	ldr	r3, [pc, #104]	; (800bf30 <RCCEx_PLL3_Config+0x15c>)
 800bec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bec8:	4a19      	ldr	r2, [pc, #100]	; (800bf30 <RCCEx_PLL3_Config+0x15c>)
 800beca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800bece:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bed0:	e00f      	b.n	800bef2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bed2:	683b      	ldr	r3, [r7, #0]
 800bed4:	2b01      	cmp	r3, #1
 800bed6:	d106      	bne.n	800bee6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800bed8:	4b15      	ldr	r3, [pc, #84]	; (800bf30 <RCCEx_PLL3_Config+0x15c>)
 800beda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bedc:	4a14      	ldr	r2, [pc, #80]	; (800bf30 <RCCEx_PLL3_Config+0x15c>)
 800bede:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bee2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bee4:	e005      	b.n	800bef2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800bee6:	4b12      	ldr	r3, [pc, #72]	; (800bf30 <RCCEx_PLL3_Config+0x15c>)
 800bee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beea:	4a11      	ldr	r2, [pc, #68]	; (800bf30 <RCCEx_PLL3_Config+0x15c>)
 800beec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bef0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800bef2:	4b0f      	ldr	r3, [pc, #60]	; (800bf30 <RCCEx_PLL3_Config+0x15c>)
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	4a0e      	ldr	r2, [pc, #56]	; (800bf30 <RCCEx_PLL3_Config+0x15c>)
 800bef8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800befc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800befe:	f7f7 f841 	bl	8002f84 <HAL_GetTick>
 800bf02:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bf04:	e008      	b.n	800bf18 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bf06:	f7f7 f83d 	bl	8002f84 <HAL_GetTick>
 800bf0a:	4602      	mov	r2, r0
 800bf0c:	68bb      	ldr	r3, [r7, #8]
 800bf0e:	1ad3      	subs	r3, r2, r3
 800bf10:	2b02      	cmp	r3, #2
 800bf12:	d901      	bls.n	800bf18 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bf14:	2303      	movs	r3, #3
 800bf16:	e006      	b.n	800bf26 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bf18:	4b05      	ldr	r3, [pc, #20]	; (800bf30 <RCCEx_PLL3_Config+0x15c>)
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d0f0      	beq.n	800bf06 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800bf24:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf26:	4618      	mov	r0, r3
 800bf28:	3710      	adds	r7, #16
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	bd80      	pop	{r7, pc}
 800bf2e:	bf00      	nop
 800bf30:	58024400 	.word	0x58024400
 800bf34:	ffff0007 	.word	0xffff0007

0800bf38 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	b084      	sub	sp, #16
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800bf40:	2301      	movs	r3, #1
 800bf42:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d071      	beq.n	800c02e <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800bf50:	b2db      	uxtb	r3, r3
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d106      	bne.n	800bf64 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	2200      	movs	r2, #0
 800bf5a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800bf5e:	6878      	ldr	r0, [r7, #4]
 800bf60:	f7f6 fb0e 	bl	8002580 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	2202      	movs	r2, #2
 800bf68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	68db      	ldr	r3, [r3, #12]
 800bf72:	f003 0310 	and.w	r3, r3, #16
 800bf76:	2b10      	cmp	r3, #16
 800bf78:	d050      	beq.n	800c01c <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	22ca      	movs	r2, #202	; 0xca
 800bf80:	625a      	str	r2, [r3, #36]	; 0x24
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	2253      	movs	r2, #83	; 0x53
 800bf88:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800bf8a:	6878      	ldr	r0, [r7, #4]
 800bf8c:	f000 fa4a 	bl	800c424 <RTC_EnterInitMode>
 800bf90:	4603      	mov	r3, r0
 800bf92:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800bf94:	7bfb      	ldrb	r3, [r7, #15]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d124      	bne.n	800bfe4 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	6899      	ldr	r1, [r3, #8]
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681a      	ldr	r2, [r3, #0]
 800bfa4:	4b24      	ldr	r3, [pc, #144]	; (800c038 <HAL_RTC_Init+0x100>)
 800bfa6:	400b      	ands	r3, r1
 800bfa8:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	6899      	ldr	r1, [r3, #8]
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	685a      	ldr	r2, [r3, #4]
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	691b      	ldr	r3, [r3, #16]
 800bfb8:	431a      	orrs	r2, r3
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	699b      	ldr	r3, [r3, #24]
 800bfbe:	431a      	orrs	r2, r3
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	430a      	orrs	r2, r1
 800bfc6:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	689b      	ldr	r3, [r3, #8]
 800bfcc:	0419      	lsls	r1, r3, #16
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	68da      	ldr	r2, [r3, #12]
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	430a      	orrs	r2, r1
 800bfd8:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800bfda:	6878      	ldr	r0, [r7, #4]
 800bfdc:	f000 fa56 	bl	800c48c <RTC_ExitInitMode>
 800bfe0:	4603      	mov	r3, r0
 800bfe2:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800bfe4:	7bfb      	ldrb	r3, [r7, #15]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d113      	bne.n	800c012 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	f022 0203 	bic.w	r2, r2, #3
 800bff8:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	69da      	ldr	r2, [r3, #28]
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	695b      	ldr	r3, [r3, #20]
 800c008:	431a      	orrs	r2, r3
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	430a      	orrs	r2, r1
 800c010:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	22ff      	movs	r2, #255	; 0xff
 800c018:	625a      	str	r2, [r3, #36]	; 0x24
 800c01a:	e001      	b.n	800c020 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800c01c:	2300      	movs	r3, #0
 800c01e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800c020:	7bfb      	ldrb	r3, [r7, #15]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d103      	bne.n	800c02e <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	2201      	movs	r2, #1
 800c02a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800c02e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c030:	4618      	mov	r0, r3
 800c032:	3710      	adds	r7, #16
 800c034:	46bd      	mov	sp, r7
 800c036:	bd80      	pop	{r7, pc}
 800c038:	ff8fffbf 	.word	0xff8fffbf

0800c03c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c03c:	b590      	push	{r4, r7, lr}
 800c03e:	b087      	sub	sp, #28
 800c040:	af00      	add	r7, sp, #0
 800c042:	60f8      	str	r0, [r7, #12]
 800c044:	60b9      	str	r1, [r7, #8]
 800c046:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c04e:	2b01      	cmp	r3, #1
 800c050:	d101      	bne.n	800c056 <HAL_RTC_SetTime+0x1a>
 800c052:	2302      	movs	r3, #2
 800c054:	e089      	b.n	800c16a <HAL_RTC_SetTime+0x12e>
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	2201      	movs	r2, #1
 800c05a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	2202      	movs	r2, #2
 800c062:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	22ca      	movs	r2, #202	; 0xca
 800c06c:	625a      	str	r2, [r3, #36]	; 0x24
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	2253      	movs	r2, #83	; 0x53
 800c074:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c076:	68f8      	ldr	r0, [r7, #12]
 800c078:	f000 f9d4 	bl	800c424 <RTC_EnterInitMode>
 800c07c:	4603      	mov	r3, r0
 800c07e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800c080:	7cfb      	ldrb	r3, [r7, #19]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d161      	bne.n	800c14a <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d126      	bne.n	800c0da <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	689b      	ldr	r3, [r3, #8]
 800c092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c096:	2b00      	cmp	r3, #0
 800c098:	d102      	bne.n	800c0a0 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800c09a:	68bb      	ldr	r3, [r7, #8]
 800c09c:	2200      	movs	r2, #0
 800c09e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c0a0:	68bb      	ldr	r3, [r7, #8]
 800c0a2:	781b      	ldrb	r3, [r3, #0]
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	f000 fa2f 	bl	800c508 <RTC_ByteToBcd2>
 800c0aa:	4603      	mov	r3, r0
 800c0ac:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c0ae:	68bb      	ldr	r3, [r7, #8]
 800c0b0:	785b      	ldrb	r3, [r3, #1]
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	f000 fa28 	bl	800c508 <RTC_ByteToBcd2>
 800c0b8:	4603      	mov	r3, r0
 800c0ba:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c0bc:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800c0be:	68bb      	ldr	r3, [r7, #8]
 800c0c0:	789b      	ldrb	r3, [r3, #2]
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	f000 fa20 	bl	800c508 <RTC_ByteToBcd2>
 800c0c8:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c0ca:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c0ce:	68bb      	ldr	r3, [r7, #8]
 800c0d0:	78db      	ldrb	r3, [r3, #3]
 800c0d2:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c0d4:	4313      	orrs	r3, r2
 800c0d6:	617b      	str	r3, [r7, #20]
 800c0d8:	e018      	b.n	800c10c <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	689b      	ldr	r3, [r3, #8]
 800c0e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d102      	bne.n	800c0ee <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800c0e8:	68bb      	ldr	r3, [r7, #8]
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c0ee:	68bb      	ldr	r3, [r7, #8]
 800c0f0:	781b      	ldrb	r3, [r3, #0]
 800c0f2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c0f4:	68bb      	ldr	r3, [r7, #8]
 800c0f6:	785b      	ldrb	r3, [r3, #1]
 800c0f8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c0fa:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800c0fc:	68ba      	ldr	r2, [r7, #8]
 800c0fe:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c100:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c102:	68bb      	ldr	r3, [r7, #8]
 800c104:	78db      	ldrb	r3, [r3, #3]
 800c106:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c108:	4313      	orrs	r3, r2
 800c10a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	681a      	ldr	r2, [r3, #0]
 800c110:	6979      	ldr	r1, [r7, #20]
 800c112:	4b18      	ldr	r3, [pc, #96]	; (800c174 <HAL_RTC_SetTime+0x138>)
 800c114:	400b      	ands	r3, r1
 800c116:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	689a      	ldr	r2, [r3, #8]
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c126:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	6899      	ldr	r1, [r3, #8]
 800c12e:	68bb      	ldr	r3, [r7, #8]
 800c130:	68da      	ldr	r2, [r3, #12]
 800c132:	68bb      	ldr	r3, [r7, #8]
 800c134:	691b      	ldr	r3, [r3, #16]
 800c136:	431a      	orrs	r2, r3
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	430a      	orrs	r2, r1
 800c13e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c140:	68f8      	ldr	r0, [r7, #12]
 800c142:	f000 f9a3 	bl	800c48c <RTC_ExitInitMode>
 800c146:	4603      	mov	r3, r0
 800c148:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	22ff      	movs	r2, #255	; 0xff
 800c150:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800c152:	7cfb      	ldrb	r3, [r7, #19]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d103      	bne.n	800c160 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	2201      	movs	r2, #1
 800c15c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	2200      	movs	r2, #0
 800c164:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800c168:	7cfb      	ldrb	r3, [r7, #19]
}
 800c16a:	4618      	mov	r0, r3
 800c16c:	371c      	adds	r7, #28
 800c16e:	46bd      	mov	sp, r7
 800c170:	bd90      	pop	{r4, r7, pc}
 800c172:	bf00      	nop
 800c174:	007f7f7f 	.word	0x007f7f7f

0800c178 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c178:	b580      	push	{r7, lr}
 800c17a:	b086      	sub	sp, #24
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	60f8      	str	r0, [r7, #12]
 800c180:	60b9      	str	r1, [r7, #8]
 800c182:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c18a:	68bb      	ldr	r3, [r7, #8]
 800c18c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	691b      	ldr	r3, [r3, #16]
 800c194:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800c198:	68bb      	ldr	r3, [r7, #8]
 800c19a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	681a      	ldr	r2, [r3, #0]
 800c1a2:	4b22      	ldr	r3, [pc, #136]	; (800c22c <HAL_RTC_GetTime+0xb4>)
 800c1a4:	4013      	ands	r3, r2
 800c1a6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800c1a8:	697b      	ldr	r3, [r7, #20]
 800c1aa:	0c1b      	lsrs	r3, r3, #16
 800c1ac:	b2db      	uxtb	r3, r3
 800c1ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c1b2:	b2da      	uxtb	r2, r3
 800c1b4:	68bb      	ldr	r3, [r7, #8]
 800c1b6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800c1b8:	697b      	ldr	r3, [r7, #20]
 800c1ba:	0a1b      	lsrs	r3, r3, #8
 800c1bc:	b2db      	uxtb	r3, r3
 800c1be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c1c2:	b2da      	uxtb	r2, r3
 800c1c4:	68bb      	ldr	r3, [r7, #8]
 800c1c6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800c1c8:	697b      	ldr	r3, [r7, #20]
 800c1ca:	b2db      	uxtb	r3, r3
 800c1cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c1d0:	b2da      	uxtb	r2, r3
 800c1d2:	68bb      	ldr	r3, [r7, #8]
 800c1d4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800c1d6:	697b      	ldr	r3, [r7, #20]
 800c1d8:	0d9b      	lsrs	r3, r3, #22
 800c1da:	b2db      	uxtb	r3, r3
 800c1dc:	f003 0301 	and.w	r3, r3, #1
 800c1e0:	b2da      	uxtb	r2, r3
 800c1e2:	68bb      	ldr	r3, [r7, #8]
 800c1e4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d11a      	bne.n	800c222 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800c1ec:	68bb      	ldr	r3, [r7, #8]
 800c1ee:	781b      	ldrb	r3, [r3, #0]
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	f000 f9a9 	bl	800c548 <RTC_Bcd2ToByte>
 800c1f6:	4603      	mov	r3, r0
 800c1f8:	461a      	mov	r2, r3
 800c1fa:	68bb      	ldr	r3, [r7, #8]
 800c1fc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800c1fe:	68bb      	ldr	r3, [r7, #8]
 800c200:	785b      	ldrb	r3, [r3, #1]
 800c202:	4618      	mov	r0, r3
 800c204:	f000 f9a0 	bl	800c548 <RTC_Bcd2ToByte>
 800c208:	4603      	mov	r3, r0
 800c20a:	461a      	mov	r2, r3
 800c20c:	68bb      	ldr	r3, [r7, #8]
 800c20e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800c210:	68bb      	ldr	r3, [r7, #8]
 800c212:	789b      	ldrb	r3, [r3, #2]
 800c214:	4618      	mov	r0, r3
 800c216:	f000 f997 	bl	800c548 <RTC_Bcd2ToByte>
 800c21a:	4603      	mov	r3, r0
 800c21c:	461a      	mov	r2, r3
 800c21e:	68bb      	ldr	r3, [r7, #8]
 800c220:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800c222:	2300      	movs	r3, #0
}
 800c224:	4618      	mov	r0, r3
 800c226:	3718      	adds	r7, #24
 800c228:	46bd      	mov	sp, r7
 800c22a:	bd80      	pop	{r7, pc}
 800c22c:	007f7f7f 	.word	0x007f7f7f

0800c230 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c230:	b590      	push	{r4, r7, lr}
 800c232:	b087      	sub	sp, #28
 800c234:	af00      	add	r7, sp, #0
 800c236:	60f8      	str	r0, [r7, #12]
 800c238:	60b9      	str	r1, [r7, #8]
 800c23a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c242:	2b01      	cmp	r3, #1
 800c244:	d101      	bne.n	800c24a <HAL_RTC_SetDate+0x1a>
 800c246:	2302      	movs	r3, #2
 800c248:	e073      	b.n	800c332 <HAL_RTC_SetDate+0x102>
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	2201      	movs	r2, #1
 800c24e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	2202      	movs	r2, #2
 800c256:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d10e      	bne.n	800c27e <HAL_RTC_SetDate+0x4e>
 800c260:	68bb      	ldr	r3, [r7, #8]
 800c262:	785b      	ldrb	r3, [r3, #1]
 800c264:	f003 0310 	and.w	r3, r3, #16
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d008      	beq.n	800c27e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800c26c:	68bb      	ldr	r3, [r7, #8]
 800c26e:	785b      	ldrb	r3, [r3, #1]
 800c270:	f023 0310 	bic.w	r3, r3, #16
 800c274:	b2db      	uxtb	r3, r3
 800c276:	330a      	adds	r3, #10
 800c278:	b2da      	uxtb	r2, r3
 800c27a:	68bb      	ldr	r3, [r7, #8]
 800c27c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d11c      	bne.n	800c2be <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c284:	68bb      	ldr	r3, [r7, #8]
 800c286:	78db      	ldrb	r3, [r3, #3]
 800c288:	4618      	mov	r0, r3
 800c28a:	f000 f93d 	bl	800c508 <RTC_ByteToBcd2>
 800c28e:	4603      	mov	r3, r0
 800c290:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c292:	68bb      	ldr	r3, [r7, #8]
 800c294:	785b      	ldrb	r3, [r3, #1]
 800c296:	4618      	mov	r0, r3
 800c298:	f000 f936 	bl	800c508 <RTC_ByteToBcd2>
 800c29c:	4603      	mov	r3, r0
 800c29e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c2a0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800c2a2:	68bb      	ldr	r3, [r7, #8]
 800c2a4:	789b      	ldrb	r3, [r3, #2]
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	f000 f92e 	bl	800c508 <RTC_ByteToBcd2>
 800c2ac:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c2ae:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800c2b2:	68bb      	ldr	r3, [r7, #8]
 800c2b4:	781b      	ldrb	r3, [r3, #0]
 800c2b6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c2b8:	4313      	orrs	r3, r2
 800c2ba:	617b      	str	r3, [r7, #20]
 800c2bc:	e00e      	b.n	800c2dc <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c2be:	68bb      	ldr	r3, [r7, #8]
 800c2c0:	78db      	ldrb	r3, [r3, #3]
 800c2c2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800c2c4:	68bb      	ldr	r3, [r7, #8]
 800c2c6:	785b      	ldrb	r3, [r3, #1]
 800c2c8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c2ca:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800c2cc:	68ba      	ldr	r2, [r7, #8]
 800c2ce:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800c2d0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800c2d2:	68bb      	ldr	r3, [r7, #8]
 800c2d4:	781b      	ldrb	r3, [r3, #0]
 800c2d6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c2d8:	4313      	orrs	r3, r2
 800c2da:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	22ca      	movs	r2, #202	; 0xca
 800c2e2:	625a      	str	r2, [r3, #36]	; 0x24
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	2253      	movs	r2, #83	; 0x53
 800c2ea:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c2ec:	68f8      	ldr	r0, [r7, #12]
 800c2ee:	f000 f899 	bl	800c424 <RTC_EnterInitMode>
 800c2f2:	4603      	mov	r3, r0
 800c2f4:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800c2f6:	7cfb      	ldrb	r3, [r7, #19]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d10a      	bne.n	800c312 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	681a      	ldr	r2, [r3, #0]
 800c300:	6979      	ldr	r1, [r7, #20]
 800c302:	4b0e      	ldr	r3, [pc, #56]	; (800c33c <HAL_RTC_SetDate+0x10c>)
 800c304:	400b      	ands	r3, r1
 800c306:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c308:	68f8      	ldr	r0, [r7, #12]
 800c30a:	f000 f8bf 	bl	800c48c <RTC_ExitInitMode>
 800c30e:	4603      	mov	r3, r0
 800c310:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	22ff      	movs	r2, #255	; 0xff
 800c318:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800c31a:	7cfb      	ldrb	r3, [r7, #19]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d103      	bne.n	800c328 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	2201      	movs	r2, #1
 800c324:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	2200      	movs	r2, #0
 800c32c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800c330:	7cfb      	ldrb	r3, [r7, #19]


}
 800c332:	4618      	mov	r0, r3
 800c334:	371c      	adds	r7, #28
 800c336:	46bd      	mov	sp, r7
 800c338:	bd90      	pop	{r4, r7, pc}
 800c33a:	bf00      	nop
 800c33c:	00ffff3f 	.word	0x00ffff3f

0800c340 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c340:	b580      	push	{r7, lr}
 800c342:	b086      	sub	sp, #24
 800c344:	af00      	add	r7, sp, #0
 800c346:	60f8      	str	r0, [r7, #12]
 800c348:	60b9      	str	r1, [r7, #8]
 800c34a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	685a      	ldr	r2, [r3, #4]
 800c352:	4b21      	ldr	r3, [pc, #132]	; (800c3d8 <HAL_RTC_GetDate+0x98>)
 800c354:	4013      	ands	r3, r2
 800c356:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800c358:	697b      	ldr	r3, [r7, #20]
 800c35a:	0c1b      	lsrs	r3, r3, #16
 800c35c:	b2da      	uxtb	r2, r3
 800c35e:	68bb      	ldr	r3, [r7, #8]
 800c360:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800c362:	697b      	ldr	r3, [r7, #20]
 800c364:	0a1b      	lsrs	r3, r3, #8
 800c366:	b2db      	uxtb	r3, r3
 800c368:	f003 031f 	and.w	r3, r3, #31
 800c36c:	b2da      	uxtb	r2, r3
 800c36e:	68bb      	ldr	r3, [r7, #8]
 800c370:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800c372:	697b      	ldr	r3, [r7, #20]
 800c374:	b2db      	uxtb	r3, r3
 800c376:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c37a:	b2da      	uxtb	r2, r3
 800c37c:	68bb      	ldr	r3, [r7, #8]
 800c37e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800c380:	697b      	ldr	r3, [r7, #20]
 800c382:	0b5b      	lsrs	r3, r3, #13
 800c384:	b2db      	uxtb	r3, r3
 800c386:	f003 0307 	and.w	r3, r3, #7
 800c38a:	b2da      	uxtb	r2, r3
 800c38c:	68bb      	ldr	r3, [r7, #8]
 800c38e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d11a      	bne.n	800c3cc <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800c396:	68bb      	ldr	r3, [r7, #8]
 800c398:	78db      	ldrb	r3, [r3, #3]
 800c39a:	4618      	mov	r0, r3
 800c39c:	f000 f8d4 	bl	800c548 <RTC_Bcd2ToByte>
 800c3a0:	4603      	mov	r3, r0
 800c3a2:	461a      	mov	r2, r3
 800c3a4:	68bb      	ldr	r3, [r7, #8]
 800c3a6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800c3a8:	68bb      	ldr	r3, [r7, #8]
 800c3aa:	785b      	ldrb	r3, [r3, #1]
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	f000 f8cb 	bl	800c548 <RTC_Bcd2ToByte>
 800c3b2:	4603      	mov	r3, r0
 800c3b4:	461a      	mov	r2, r3
 800c3b6:	68bb      	ldr	r3, [r7, #8]
 800c3b8:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800c3ba:	68bb      	ldr	r3, [r7, #8]
 800c3bc:	789b      	ldrb	r3, [r3, #2]
 800c3be:	4618      	mov	r0, r3
 800c3c0:	f000 f8c2 	bl	800c548 <RTC_Bcd2ToByte>
 800c3c4:	4603      	mov	r3, r0
 800c3c6:	461a      	mov	r2, r3
 800c3c8:	68bb      	ldr	r3, [r7, #8]
 800c3ca:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800c3cc:	2300      	movs	r3, #0
}
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	3718      	adds	r7, #24
 800c3d2:	46bd      	mov	sp, r7
 800c3d4:	bd80      	pop	{r7, pc}
 800c3d6:	bf00      	nop
 800c3d8:	00ffff3f 	.word	0x00ffff3f

0800c3dc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b084      	sub	sp, #16
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	4a0d      	ldr	r2, [pc, #52]	; (800c420 <HAL_RTC_WaitForSynchro+0x44>)
 800c3ea:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800c3ec:	f7f6 fdca 	bl	8002f84 <HAL_GetTick>
 800c3f0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c3f2:	e009      	b.n	800c408 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c3f4:	f7f6 fdc6 	bl	8002f84 <HAL_GetTick>
 800c3f8:	4602      	mov	r2, r0
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	1ad3      	subs	r3, r2, r3
 800c3fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c402:	d901      	bls.n	800c408 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800c404:	2303      	movs	r3, #3
 800c406:	e007      	b.n	800c418 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	68db      	ldr	r3, [r3, #12]
 800c40e:	f003 0320 	and.w	r3, r3, #32
 800c412:	2b00      	cmp	r3, #0
 800c414:	d0ee      	beq.n	800c3f4 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800c416:	2300      	movs	r3, #0
}
 800c418:	4618      	mov	r0, r3
 800c41a:	3710      	adds	r7, #16
 800c41c:	46bd      	mov	sp, r7
 800c41e:	bd80      	pop	{r7, pc}
 800c420:	0003ff5f 	.word	0x0003ff5f

0800c424 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800c424:	b580      	push	{r7, lr}
 800c426:	b084      	sub	sp, #16
 800c428:	af00      	add	r7, sp, #0
 800c42a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c42c:	2300      	movs	r3, #0
 800c42e:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	68db      	ldr	r3, [r3, #12]
 800c436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d120      	bne.n	800c480 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c446:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800c448:	f7f6 fd9c 	bl	8002f84 <HAL_GetTick>
 800c44c:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800c44e:	e00d      	b.n	800c46c <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800c450:	f7f6 fd98 	bl	8002f84 <HAL_GetTick>
 800c454:	4602      	mov	r2, r0
 800c456:	68bb      	ldr	r3, [r7, #8]
 800c458:	1ad3      	subs	r3, r2, r3
 800c45a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c45e:	d905      	bls.n	800c46c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800c460:	2303      	movs	r3, #3
 800c462:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	2203      	movs	r2, #3
 800c468:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	68db      	ldr	r3, [r3, #12]
 800c472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c476:	2b00      	cmp	r3, #0
 800c478:	d102      	bne.n	800c480 <RTC_EnterInitMode+0x5c>
 800c47a:	7bfb      	ldrb	r3, [r7, #15]
 800c47c:	2b03      	cmp	r3, #3
 800c47e:	d1e7      	bne.n	800c450 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800c480:	7bfb      	ldrb	r3, [r7, #15]
}
 800c482:	4618      	mov	r0, r3
 800c484:	3710      	adds	r7, #16
 800c486:	46bd      	mov	sp, r7
 800c488:	bd80      	pop	{r7, pc}
	...

0800c48c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b084      	sub	sp, #16
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c494:	2300      	movs	r3, #0
 800c496:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800c498:	4b1a      	ldr	r3, [pc, #104]	; (800c504 <RTC_ExitInitMode+0x78>)
 800c49a:	68db      	ldr	r3, [r3, #12]
 800c49c:	4a19      	ldr	r2, [pc, #100]	; (800c504 <RTC_ExitInitMode+0x78>)
 800c49e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c4a2:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800c4a4:	4b17      	ldr	r3, [pc, #92]	; (800c504 <RTC_ExitInitMode+0x78>)
 800c4a6:	689b      	ldr	r3, [r3, #8]
 800c4a8:	f003 0320 	and.w	r3, r3, #32
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d10c      	bne.n	800c4ca <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c4b0:	6878      	ldr	r0, [r7, #4]
 800c4b2:	f7ff ff93 	bl	800c3dc <HAL_RTC_WaitForSynchro>
 800c4b6:	4603      	mov	r3, r0
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d01e      	beq.n	800c4fa <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	2203      	movs	r2, #3
 800c4c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800c4c4:	2303      	movs	r3, #3
 800c4c6:	73fb      	strb	r3, [r7, #15]
 800c4c8:	e017      	b.n	800c4fa <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c4ca:	4b0e      	ldr	r3, [pc, #56]	; (800c504 <RTC_ExitInitMode+0x78>)
 800c4cc:	689b      	ldr	r3, [r3, #8]
 800c4ce:	4a0d      	ldr	r2, [pc, #52]	; (800c504 <RTC_ExitInitMode+0x78>)
 800c4d0:	f023 0320 	bic.w	r3, r3, #32
 800c4d4:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c4d6:	6878      	ldr	r0, [r7, #4]
 800c4d8:	f7ff ff80 	bl	800c3dc <HAL_RTC_WaitForSynchro>
 800c4dc:	4603      	mov	r3, r0
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d005      	beq.n	800c4ee <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	2203      	movs	r2, #3
 800c4e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800c4ea:	2303      	movs	r3, #3
 800c4ec:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c4ee:	4b05      	ldr	r3, [pc, #20]	; (800c504 <RTC_ExitInitMode+0x78>)
 800c4f0:	689b      	ldr	r3, [r3, #8]
 800c4f2:	4a04      	ldr	r2, [pc, #16]	; (800c504 <RTC_ExitInitMode+0x78>)
 800c4f4:	f043 0320 	orr.w	r3, r3, #32
 800c4f8:	6093      	str	r3, [r2, #8]
  }

  return status;
 800c4fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	3710      	adds	r7, #16
 800c500:	46bd      	mov	sp, r7
 800c502:	bd80      	pop	{r7, pc}
 800c504:	58004000 	.word	0x58004000

0800c508 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800c508:	b480      	push	{r7}
 800c50a:	b085      	sub	sp, #20
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	4603      	mov	r3, r0
 800c510:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800c512:	2300      	movs	r3, #0
 800c514:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800c516:	79fb      	ldrb	r3, [r7, #7]
 800c518:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800c51a:	e005      	b.n	800c528 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	3301      	adds	r3, #1
 800c520:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800c522:	7afb      	ldrb	r3, [r7, #11]
 800c524:	3b0a      	subs	r3, #10
 800c526:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800c528:	7afb      	ldrb	r3, [r7, #11]
 800c52a:	2b09      	cmp	r3, #9
 800c52c:	d8f6      	bhi.n	800c51c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	b2db      	uxtb	r3, r3
 800c532:	011b      	lsls	r3, r3, #4
 800c534:	b2da      	uxtb	r2, r3
 800c536:	7afb      	ldrb	r3, [r7, #11]
 800c538:	4313      	orrs	r3, r2
 800c53a:	b2db      	uxtb	r3, r3
}
 800c53c:	4618      	mov	r0, r3
 800c53e:	3714      	adds	r7, #20
 800c540:	46bd      	mov	sp, r7
 800c542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c546:	4770      	bx	lr

0800c548 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800c548:	b480      	push	{r7}
 800c54a:	b085      	sub	sp, #20
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	4603      	mov	r3, r0
 800c550:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800c552:	79fb      	ldrb	r3, [r7, #7]
 800c554:	091b      	lsrs	r3, r3, #4
 800c556:	b2db      	uxtb	r3, r3
 800c558:	461a      	mov	r2, r3
 800c55a:	0092      	lsls	r2, r2, #2
 800c55c:	4413      	add	r3, r2
 800c55e:	005b      	lsls	r3, r3, #1
 800c560:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800c562:	79fb      	ldrb	r3, [r7, #7]
 800c564:	f003 030f 	and.w	r3, r3, #15
 800c568:	b2da      	uxtb	r2, r3
 800c56a:	7bfb      	ldrb	r3, [r7, #15]
 800c56c:	4413      	add	r3, r2
 800c56e:	b2db      	uxtb	r3, r3
}
 800c570:	4618      	mov	r0, r3
 800c572:	3714      	adds	r7, #20
 800c574:	46bd      	mov	sp, r7
 800c576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c57a:	4770      	bx	lr

0800c57c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c57c:	b580      	push	{r7, lr}
 800c57e:	b084      	sub	sp, #16
 800c580:	af00      	add	r7, sp, #0
 800c582:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d101      	bne.n	800c58e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c58a:	2301      	movs	r3, #1
 800c58c:	e10f      	b.n	800c7ae <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	2200      	movs	r2, #0
 800c592:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	4a87      	ldr	r2, [pc, #540]	; (800c7b8 <HAL_SPI_Init+0x23c>)
 800c59a:	4293      	cmp	r3, r2
 800c59c:	d00f      	beq.n	800c5be <HAL_SPI_Init+0x42>
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	4a86      	ldr	r2, [pc, #536]	; (800c7bc <HAL_SPI_Init+0x240>)
 800c5a4:	4293      	cmp	r3, r2
 800c5a6:	d00a      	beq.n	800c5be <HAL_SPI_Init+0x42>
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	4a84      	ldr	r2, [pc, #528]	; (800c7c0 <HAL_SPI_Init+0x244>)
 800c5ae:	4293      	cmp	r3, r2
 800c5b0:	d005      	beq.n	800c5be <HAL_SPI_Init+0x42>
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	68db      	ldr	r3, [r3, #12]
 800c5b6:	2b0f      	cmp	r3, #15
 800c5b8:	d901      	bls.n	800c5be <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800c5ba:	2301      	movs	r3, #1
 800c5bc:	e0f7      	b.n	800c7ae <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800c5be:	6878      	ldr	r0, [r7, #4]
 800c5c0:	f000 f900 	bl	800c7c4 <SPI_GetPacketSize>
 800c5c4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	4a7b      	ldr	r2, [pc, #492]	; (800c7b8 <HAL_SPI_Init+0x23c>)
 800c5cc:	4293      	cmp	r3, r2
 800c5ce:	d00c      	beq.n	800c5ea <HAL_SPI_Init+0x6e>
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	4a79      	ldr	r2, [pc, #484]	; (800c7bc <HAL_SPI_Init+0x240>)
 800c5d6:	4293      	cmp	r3, r2
 800c5d8:	d007      	beq.n	800c5ea <HAL_SPI_Init+0x6e>
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	4a78      	ldr	r2, [pc, #480]	; (800c7c0 <HAL_SPI_Init+0x244>)
 800c5e0:	4293      	cmp	r3, r2
 800c5e2:	d002      	beq.n	800c5ea <HAL_SPI_Init+0x6e>
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	2b08      	cmp	r3, #8
 800c5e8:	d811      	bhi.n	800c60e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c5ee:	4a72      	ldr	r2, [pc, #456]	; (800c7b8 <HAL_SPI_Init+0x23c>)
 800c5f0:	4293      	cmp	r3, r2
 800c5f2:	d009      	beq.n	800c608 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	4a70      	ldr	r2, [pc, #448]	; (800c7bc <HAL_SPI_Init+0x240>)
 800c5fa:	4293      	cmp	r3, r2
 800c5fc:	d004      	beq.n	800c608 <HAL_SPI_Init+0x8c>
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	4a6f      	ldr	r2, [pc, #444]	; (800c7c0 <HAL_SPI_Init+0x244>)
 800c604:	4293      	cmp	r3, r2
 800c606:	d104      	bne.n	800c612 <HAL_SPI_Init+0x96>
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	2b10      	cmp	r3, #16
 800c60c:	d901      	bls.n	800c612 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800c60e:	2301      	movs	r3, #1
 800c610:	e0cd      	b.n	800c7ae <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c618:	b2db      	uxtb	r3, r3
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d106      	bne.n	800c62c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	2200      	movs	r2, #0
 800c622:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c626:	6878      	ldr	r0, [r7, #4]
 800c628:	f7f5 ffdc 	bl	80025e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	2202      	movs	r2, #2
 800c630:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	681a      	ldr	r2, [r3, #0]
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	f022 0201 	bic.w	r2, r2, #1
 800c642:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	689b      	ldr	r3, [r3, #8]
 800c64a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800c64e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	699b      	ldr	r3, [r3, #24]
 800c654:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c658:	d119      	bne.n	800c68e <HAL_SPI_Init+0x112>
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	685b      	ldr	r3, [r3, #4]
 800c65e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c662:	d103      	bne.n	800c66c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d008      	beq.n	800c67e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c670:	2b00      	cmp	r3, #0
 800c672:	d10c      	bne.n	800c68e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c678:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c67c:	d107      	bne.n	800c68e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	681a      	ldr	r2, [r3, #0]
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c68c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	685b      	ldr	r3, [r3, #4]
 800c692:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c696:	2b00      	cmp	r3, #0
 800c698:	d00f      	beq.n	800c6ba <HAL_SPI_Init+0x13e>
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	68db      	ldr	r3, [r3, #12]
 800c69e:	2b06      	cmp	r3, #6
 800c6a0:	d90b      	bls.n	800c6ba <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	430a      	orrs	r2, r1
 800c6b6:	601a      	str	r2, [r3, #0]
 800c6b8:	e007      	b.n	800c6ca <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	681a      	ldr	r2, [r3, #0]
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c6c8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	69da      	ldr	r2, [r3, #28]
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6d2:	431a      	orrs	r2, r3
 800c6d4:	68bb      	ldr	r3, [r7, #8]
 800c6d6:	431a      	orrs	r2, r3
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6dc:	ea42 0103 	orr.w	r1, r2, r3
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	68da      	ldr	r2, [r3, #12]
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	430a      	orrs	r2, r1
 800c6ea:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6f4:	431a      	orrs	r2, r3
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6fa:	431a      	orrs	r2, r3
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	699b      	ldr	r3, [r3, #24]
 800c700:	431a      	orrs	r2, r3
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	691b      	ldr	r3, [r3, #16]
 800c706:	431a      	orrs	r2, r3
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	695b      	ldr	r3, [r3, #20]
 800c70c:	431a      	orrs	r2, r3
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	6a1b      	ldr	r3, [r3, #32]
 800c712:	431a      	orrs	r2, r3
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	685b      	ldr	r3, [r3, #4]
 800c718:	431a      	orrs	r2, r3
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c71e:	431a      	orrs	r2, r3
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	689b      	ldr	r3, [r3, #8]
 800c724:	431a      	orrs	r2, r3
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c72a:	ea42 0103 	orr.w	r1, r2, r3
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	430a      	orrs	r2, r1
 800c738:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	685b      	ldr	r3, [r3, #4]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d113      	bne.n	800c76a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	689b      	ldr	r3, [r3, #8]
 800c748:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c754:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	689b      	ldr	r3, [r3, #8]
 800c75c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c768:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	f022 0201 	bic.w	r2, r2, #1
 800c778:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	685b      	ldr	r3, [r3, #4]
 800c77e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c782:	2b00      	cmp	r3, #0
 800c784:	d00a      	beq.n	800c79c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	68db      	ldr	r3, [r3, #12]
 800c78c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	430a      	orrs	r2, r1
 800c79a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	2200      	movs	r2, #0
 800c7a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	2201      	movs	r2, #1
 800c7a8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800c7ac:	2300      	movs	r3, #0
}
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	3710      	adds	r7, #16
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	bd80      	pop	{r7, pc}
 800c7b6:	bf00      	nop
 800c7b8:	40013000 	.word	0x40013000
 800c7bc:	40003800 	.word	0x40003800
 800c7c0:	40003c00 	.word	0x40003c00

0800c7c4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800c7c4:	b480      	push	{r7}
 800c7c6:	b085      	sub	sp, #20
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7d0:	095b      	lsrs	r3, r3, #5
 800c7d2:	3301      	adds	r3, #1
 800c7d4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	68db      	ldr	r3, [r3, #12]
 800c7da:	3301      	adds	r3, #1
 800c7dc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c7de:	68bb      	ldr	r3, [r7, #8]
 800c7e0:	3307      	adds	r3, #7
 800c7e2:	08db      	lsrs	r3, r3, #3
 800c7e4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c7e6:	68bb      	ldr	r3, [r7, #8]
 800c7e8:	68fa      	ldr	r2, [r7, #12]
 800c7ea:	fb02 f303 	mul.w	r3, r2, r3
}
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	3714      	adds	r7, #20
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f8:	4770      	bx	lr

0800c7fa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c7fa:	b580      	push	{r7, lr}
 800c7fc:	b082      	sub	sp, #8
 800c7fe:	af00      	add	r7, sp, #0
 800c800:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d101      	bne.n	800c80c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c808:	2301      	movs	r3, #1
 800c80a:	e049      	b.n	800c8a0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c812:	b2db      	uxtb	r3, r3
 800c814:	2b00      	cmp	r3, #0
 800c816:	d106      	bne.n	800c826 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	2200      	movs	r2, #0
 800c81c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c820:	6878      	ldr	r0, [r7, #4]
 800c822:	f7f5 ff95 	bl	8002750 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	2202      	movs	r2, #2
 800c82a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	681a      	ldr	r2, [r3, #0]
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	3304      	adds	r3, #4
 800c836:	4619      	mov	r1, r3
 800c838:	4610      	mov	r0, r2
 800c83a:	f000 ff41 	bl	800d6c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	2201      	movs	r2, #1
 800c842:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	2201      	movs	r2, #1
 800c84a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	2201      	movs	r2, #1
 800c852:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	2201      	movs	r2, #1
 800c85a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	2201      	movs	r2, #1
 800c862:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	2201      	movs	r2, #1
 800c86a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	2201      	movs	r2, #1
 800c872:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	2201      	movs	r2, #1
 800c87a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	2201      	movs	r2, #1
 800c882:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	2201      	movs	r2, #1
 800c88a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	2201      	movs	r2, #1
 800c892:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	2201      	movs	r2, #1
 800c89a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c89e:	2300      	movs	r3, #0
}
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	3708      	adds	r7, #8
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	bd80      	pop	{r7, pc}

0800c8a8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800c8a8:	b480      	push	{r7}
 800c8aa:	b085      	sub	sp, #20
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c8b6:	b2db      	uxtb	r3, r3
 800c8b8:	2b01      	cmp	r3, #1
 800c8ba:	d001      	beq.n	800c8c0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800c8bc:	2301      	movs	r3, #1
 800c8be:	e04c      	b.n	800c95a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	2202      	movs	r2, #2
 800c8c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	4a26      	ldr	r2, [pc, #152]	; (800c968 <HAL_TIM_Base_Start+0xc0>)
 800c8ce:	4293      	cmp	r3, r2
 800c8d0:	d022      	beq.n	800c918 <HAL_TIM_Base_Start+0x70>
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c8da:	d01d      	beq.n	800c918 <HAL_TIM_Base_Start+0x70>
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	4a22      	ldr	r2, [pc, #136]	; (800c96c <HAL_TIM_Base_Start+0xc4>)
 800c8e2:	4293      	cmp	r3, r2
 800c8e4:	d018      	beq.n	800c918 <HAL_TIM_Base_Start+0x70>
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	4a21      	ldr	r2, [pc, #132]	; (800c970 <HAL_TIM_Base_Start+0xc8>)
 800c8ec:	4293      	cmp	r3, r2
 800c8ee:	d013      	beq.n	800c918 <HAL_TIM_Base_Start+0x70>
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	4a1f      	ldr	r2, [pc, #124]	; (800c974 <HAL_TIM_Base_Start+0xcc>)
 800c8f6:	4293      	cmp	r3, r2
 800c8f8:	d00e      	beq.n	800c918 <HAL_TIM_Base_Start+0x70>
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	4a1e      	ldr	r2, [pc, #120]	; (800c978 <HAL_TIM_Base_Start+0xd0>)
 800c900:	4293      	cmp	r3, r2
 800c902:	d009      	beq.n	800c918 <HAL_TIM_Base_Start+0x70>
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	4a1c      	ldr	r2, [pc, #112]	; (800c97c <HAL_TIM_Base_Start+0xd4>)
 800c90a:	4293      	cmp	r3, r2
 800c90c:	d004      	beq.n	800c918 <HAL_TIM_Base_Start+0x70>
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	4a1b      	ldr	r2, [pc, #108]	; (800c980 <HAL_TIM_Base_Start+0xd8>)
 800c914:	4293      	cmp	r3, r2
 800c916:	d115      	bne.n	800c944 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	689a      	ldr	r2, [r3, #8]
 800c91e:	4b19      	ldr	r3, [pc, #100]	; (800c984 <HAL_TIM_Base_Start+0xdc>)
 800c920:	4013      	ands	r3, r2
 800c922:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	2b06      	cmp	r3, #6
 800c928:	d015      	beq.n	800c956 <HAL_TIM_Base_Start+0xae>
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c930:	d011      	beq.n	800c956 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	681a      	ldr	r2, [r3, #0]
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	f042 0201 	orr.w	r2, r2, #1
 800c940:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c942:	e008      	b.n	800c956 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	681a      	ldr	r2, [r3, #0]
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	f042 0201 	orr.w	r2, r2, #1
 800c952:	601a      	str	r2, [r3, #0]
 800c954:	e000      	b.n	800c958 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c956:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c958:	2300      	movs	r3, #0
}
 800c95a:	4618      	mov	r0, r3
 800c95c:	3714      	adds	r7, #20
 800c95e:	46bd      	mov	sp, r7
 800c960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c964:	4770      	bx	lr
 800c966:	bf00      	nop
 800c968:	40010000 	.word	0x40010000
 800c96c:	40000400 	.word	0x40000400
 800c970:	40000800 	.word	0x40000800
 800c974:	40000c00 	.word	0x40000c00
 800c978:	40010400 	.word	0x40010400
 800c97c:	40001800 	.word	0x40001800
 800c980:	40014000 	.word	0x40014000
 800c984:	00010007 	.word	0x00010007

0800c988 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800c988:	b480      	push	{r7}
 800c98a:	b083      	sub	sp, #12
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	6a1a      	ldr	r2, [r3, #32]
 800c996:	f241 1311 	movw	r3, #4369	; 0x1111
 800c99a:	4013      	ands	r3, r2
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d10f      	bne.n	800c9c0 <HAL_TIM_Base_Stop+0x38>
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	6a1a      	ldr	r2, [r3, #32]
 800c9a6:	f240 4344 	movw	r3, #1092	; 0x444
 800c9aa:	4013      	ands	r3, r2
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d107      	bne.n	800c9c0 <HAL_TIM_Base_Stop+0x38>
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	681a      	ldr	r2, [r3, #0]
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	f022 0201 	bic.w	r2, r2, #1
 800c9be:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	2201      	movs	r2, #1
 800c9c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800c9c8:	2300      	movs	r3, #0
}
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	370c      	adds	r7, #12
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d4:	4770      	bx	lr
	...

0800c9d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c9d8:	b480      	push	{r7}
 800c9da:	b085      	sub	sp, #20
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c9e6:	b2db      	uxtb	r3, r3
 800c9e8:	2b01      	cmp	r3, #1
 800c9ea:	d001      	beq.n	800c9f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c9ec:	2301      	movs	r3, #1
 800c9ee:	e054      	b.n	800ca9a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	2202      	movs	r2, #2
 800c9f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	68da      	ldr	r2, [r3, #12]
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	f042 0201 	orr.w	r2, r2, #1
 800ca06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	4a26      	ldr	r2, [pc, #152]	; (800caa8 <HAL_TIM_Base_Start_IT+0xd0>)
 800ca0e:	4293      	cmp	r3, r2
 800ca10:	d022      	beq.n	800ca58 <HAL_TIM_Base_Start_IT+0x80>
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ca1a:	d01d      	beq.n	800ca58 <HAL_TIM_Base_Start_IT+0x80>
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	4a22      	ldr	r2, [pc, #136]	; (800caac <HAL_TIM_Base_Start_IT+0xd4>)
 800ca22:	4293      	cmp	r3, r2
 800ca24:	d018      	beq.n	800ca58 <HAL_TIM_Base_Start_IT+0x80>
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	4a21      	ldr	r2, [pc, #132]	; (800cab0 <HAL_TIM_Base_Start_IT+0xd8>)
 800ca2c:	4293      	cmp	r3, r2
 800ca2e:	d013      	beq.n	800ca58 <HAL_TIM_Base_Start_IT+0x80>
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	4a1f      	ldr	r2, [pc, #124]	; (800cab4 <HAL_TIM_Base_Start_IT+0xdc>)
 800ca36:	4293      	cmp	r3, r2
 800ca38:	d00e      	beq.n	800ca58 <HAL_TIM_Base_Start_IT+0x80>
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	4a1e      	ldr	r2, [pc, #120]	; (800cab8 <HAL_TIM_Base_Start_IT+0xe0>)
 800ca40:	4293      	cmp	r3, r2
 800ca42:	d009      	beq.n	800ca58 <HAL_TIM_Base_Start_IT+0x80>
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	4a1c      	ldr	r2, [pc, #112]	; (800cabc <HAL_TIM_Base_Start_IT+0xe4>)
 800ca4a:	4293      	cmp	r3, r2
 800ca4c:	d004      	beq.n	800ca58 <HAL_TIM_Base_Start_IT+0x80>
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	4a1b      	ldr	r2, [pc, #108]	; (800cac0 <HAL_TIM_Base_Start_IT+0xe8>)
 800ca54:	4293      	cmp	r3, r2
 800ca56:	d115      	bne.n	800ca84 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	689a      	ldr	r2, [r3, #8]
 800ca5e:	4b19      	ldr	r3, [pc, #100]	; (800cac4 <HAL_TIM_Base_Start_IT+0xec>)
 800ca60:	4013      	ands	r3, r2
 800ca62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	2b06      	cmp	r3, #6
 800ca68:	d015      	beq.n	800ca96 <HAL_TIM_Base_Start_IT+0xbe>
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ca70:	d011      	beq.n	800ca96 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	681a      	ldr	r2, [r3, #0]
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	f042 0201 	orr.w	r2, r2, #1
 800ca80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ca82:	e008      	b.n	800ca96 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	681a      	ldr	r2, [r3, #0]
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	f042 0201 	orr.w	r2, r2, #1
 800ca92:	601a      	str	r2, [r3, #0]
 800ca94:	e000      	b.n	800ca98 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ca96:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ca98:	2300      	movs	r3, #0
}
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	3714      	adds	r7, #20
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa4:	4770      	bx	lr
 800caa6:	bf00      	nop
 800caa8:	40010000 	.word	0x40010000
 800caac:	40000400 	.word	0x40000400
 800cab0:	40000800 	.word	0x40000800
 800cab4:	40000c00 	.word	0x40000c00
 800cab8:	40010400 	.word	0x40010400
 800cabc:	40001800 	.word	0x40001800
 800cac0:	40014000 	.word	0x40014000
 800cac4:	00010007 	.word	0x00010007

0800cac8 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cac8:	b580      	push	{r7, lr}
 800caca:	b084      	sub	sp, #16
 800cacc:	af00      	add	r7, sp, #0
 800cace:	6078      	str	r0, [r7, #4]
 800cad0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cad2:	2300      	movs	r3, #0
 800cad4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800cad6:	683b      	ldr	r3, [r7, #0]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d109      	bne.n	800caf0 <HAL_TIM_OC_Start_IT+0x28>
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cae2:	b2db      	uxtb	r3, r3
 800cae4:	2b01      	cmp	r3, #1
 800cae6:	bf14      	ite	ne
 800cae8:	2301      	movne	r3, #1
 800caea:	2300      	moveq	r3, #0
 800caec:	b2db      	uxtb	r3, r3
 800caee:	e03c      	b.n	800cb6a <HAL_TIM_OC_Start_IT+0xa2>
 800caf0:	683b      	ldr	r3, [r7, #0]
 800caf2:	2b04      	cmp	r3, #4
 800caf4:	d109      	bne.n	800cb0a <HAL_TIM_OC_Start_IT+0x42>
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800cafc:	b2db      	uxtb	r3, r3
 800cafe:	2b01      	cmp	r3, #1
 800cb00:	bf14      	ite	ne
 800cb02:	2301      	movne	r3, #1
 800cb04:	2300      	moveq	r3, #0
 800cb06:	b2db      	uxtb	r3, r3
 800cb08:	e02f      	b.n	800cb6a <HAL_TIM_OC_Start_IT+0xa2>
 800cb0a:	683b      	ldr	r3, [r7, #0]
 800cb0c:	2b08      	cmp	r3, #8
 800cb0e:	d109      	bne.n	800cb24 <HAL_TIM_OC_Start_IT+0x5c>
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cb16:	b2db      	uxtb	r3, r3
 800cb18:	2b01      	cmp	r3, #1
 800cb1a:	bf14      	ite	ne
 800cb1c:	2301      	movne	r3, #1
 800cb1e:	2300      	moveq	r3, #0
 800cb20:	b2db      	uxtb	r3, r3
 800cb22:	e022      	b.n	800cb6a <HAL_TIM_OC_Start_IT+0xa2>
 800cb24:	683b      	ldr	r3, [r7, #0]
 800cb26:	2b0c      	cmp	r3, #12
 800cb28:	d109      	bne.n	800cb3e <HAL_TIM_OC_Start_IT+0x76>
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cb30:	b2db      	uxtb	r3, r3
 800cb32:	2b01      	cmp	r3, #1
 800cb34:	bf14      	ite	ne
 800cb36:	2301      	movne	r3, #1
 800cb38:	2300      	moveq	r3, #0
 800cb3a:	b2db      	uxtb	r3, r3
 800cb3c:	e015      	b.n	800cb6a <HAL_TIM_OC_Start_IT+0xa2>
 800cb3e:	683b      	ldr	r3, [r7, #0]
 800cb40:	2b10      	cmp	r3, #16
 800cb42:	d109      	bne.n	800cb58 <HAL_TIM_OC_Start_IT+0x90>
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cb4a:	b2db      	uxtb	r3, r3
 800cb4c:	2b01      	cmp	r3, #1
 800cb4e:	bf14      	ite	ne
 800cb50:	2301      	movne	r3, #1
 800cb52:	2300      	moveq	r3, #0
 800cb54:	b2db      	uxtb	r3, r3
 800cb56:	e008      	b.n	800cb6a <HAL_TIM_OC_Start_IT+0xa2>
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800cb5e:	b2db      	uxtb	r3, r3
 800cb60:	2b01      	cmp	r3, #1
 800cb62:	bf14      	ite	ne
 800cb64:	2301      	movne	r3, #1
 800cb66:	2300      	moveq	r3, #0
 800cb68:	b2db      	uxtb	r3, r3
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d001      	beq.n	800cb72 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800cb6e:	2301      	movs	r3, #1
 800cb70:	e0ec      	b.n	800cd4c <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cb72:	683b      	ldr	r3, [r7, #0]
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d104      	bne.n	800cb82 <HAL_TIM_OC_Start_IT+0xba>
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	2202      	movs	r2, #2
 800cb7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cb80:	e023      	b.n	800cbca <HAL_TIM_OC_Start_IT+0x102>
 800cb82:	683b      	ldr	r3, [r7, #0]
 800cb84:	2b04      	cmp	r3, #4
 800cb86:	d104      	bne.n	800cb92 <HAL_TIM_OC_Start_IT+0xca>
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	2202      	movs	r2, #2
 800cb8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cb90:	e01b      	b.n	800cbca <HAL_TIM_OC_Start_IT+0x102>
 800cb92:	683b      	ldr	r3, [r7, #0]
 800cb94:	2b08      	cmp	r3, #8
 800cb96:	d104      	bne.n	800cba2 <HAL_TIM_OC_Start_IT+0xda>
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	2202      	movs	r2, #2
 800cb9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cba0:	e013      	b.n	800cbca <HAL_TIM_OC_Start_IT+0x102>
 800cba2:	683b      	ldr	r3, [r7, #0]
 800cba4:	2b0c      	cmp	r3, #12
 800cba6:	d104      	bne.n	800cbb2 <HAL_TIM_OC_Start_IT+0xea>
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	2202      	movs	r2, #2
 800cbac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cbb0:	e00b      	b.n	800cbca <HAL_TIM_OC_Start_IT+0x102>
 800cbb2:	683b      	ldr	r3, [r7, #0]
 800cbb4:	2b10      	cmp	r3, #16
 800cbb6:	d104      	bne.n	800cbc2 <HAL_TIM_OC_Start_IT+0xfa>
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	2202      	movs	r2, #2
 800cbbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cbc0:	e003      	b.n	800cbca <HAL_TIM_OC_Start_IT+0x102>
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	2202      	movs	r2, #2
 800cbc6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800cbca:	683b      	ldr	r3, [r7, #0]
 800cbcc:	2b0c      	cmp	r3, #12
 800cbce:	d841      	bhi.n	800cc54 <HAL_TIM_OC_Start_IT+0x18c>
 800cbd0:	a201      	add	r2, pc, #4	; (adr r2, 800cbd8 <HAL_TIM_OC_Start_IT+0x110>)
 800cbd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbd6:	bf00      	nop
 800cbd8:	0800cc0d 	.word	0x0800cc0d
 800cbdc:	0800cc55 	.word	0x0800cc55
 800cbe0:	0800cc55 	.word	0x0800cc55
 800cbe4:	0800cc55 	.word	0x0800cc55
 800cbe8:	0800cc1f 	.word	0x0800cc1f
 800cbec:	0800cc55 	.word	0x0800cc55
 800cbf0:	0800cc55 	.word	0x0800cc55
 800cbf4:	0800cc55 	.word	0x0800cc55
 800cbf8:	0800cc31 	.word	0x0800cc31
 800cbfc:	0800cc55 	.word	0x0800cc55
 800cc00:	0800cc55 	.word	0x0800cc55
 800cc04:	0800cc55 	.word	0x0800cc55
 800cc08:	0800cc43 	.word	0x0800cc43
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	68da      	ldr	r2, [r3, #12]
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	f042 0202 	orr.w	r2, r2, #2
 800cc1a:	60da      	str	r2, [r3, #12]
      break;
 800cc1c:	e01d      	b.n	800cc5a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	68da      	ldr	r2, [r3, #12]
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	f042 0204 	orr.w	r2, r2, #4
 800cc2c:	60da      	str	r2, [r3, #12]
      break;
 800cc2e:	e014      	b.n	800cc5a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	68da      	ldr	r2, [r3, #12]
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	f042 0208 	orr.w	r2, r2, #8
 800cc3e:	60da      	str	r2, [r3, #12]
      break;
 800cc40:	e00b      	b.n	800cc5a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	68da      	ldr	r2, [r3, #12]
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	f042 0210 	orr.w	r2, r2, #16
 800cc50:	60da      	str	r2, [r3, #12]
      break;
 800cc52:	e002      	b.n	800cc5a <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800cc54:	2301      	movs	r3, #1
 800cc56:	73fb      	strb	r3, [r7, #15]
      break;
 800cc58:	bf00      	nop
  }

  if (status == HAL_OK)
 800cc5a:	7bfb      	ldrb	r3, [r7, #15]
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d174      	bne.n	800cd4a <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	2201      	movs	r2, #1
 800cc66:	6839      	ldr	r1, [r7, #0]
 800cc68:	4618      	mov	r0, r3
 800cc6a:	f001 f943 	bl	800def4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	4a38      	ldr	r2, [pc, #224]	; (800cd54 <HAL_TIM_OC_Start_IT+0x28c>)
 800cc74:	4293      	cmp	r3, r2
 800cc76:	d013      	beq.n	800cca0 <HAL_TIM_OC_Start_IT+0x1d8>
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	4a36      	ldr	r2, [pc, #216]	; (800cd58 <HAL_TIM_OC_Start_IT+0x290>)
 800cc7e:	4293      	cmp	r3, r2
 800cc80:	d00e      	beq.n	800cca0 <HAL_TIM_OC_Start_IT+0x1d8>
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	4a35      	ldr	r2, [pc, #212]	; (800cd5c <HAL_TIM_OC_Start_IT+0x294>)
 800cc88:	4293      	cmp	r3, r2
 800cc8a:	d009      	beq.n	800cca0 <HAL_TIM_OC_Start_IT+0x1d8>
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	4a33      	ldr	r2, [pc, #204]	; (800cd60 <HAL_TIM_OC_Start_IT+0x298>)
 800cc92:	4293      	cmp	r3, r2
 800cc94:	d004      	beq.n	800cca0 <HAL_TIM_OC_Start_IT+0x1d8>
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	4a32      	ldr	r2, [pc, #200]	; (800cd64 <HAL_TIM_OC_Start_IT+0x29c>)
 800cc9c:	4293      	cmp	r3, r2
 800cc9e:	d101      	bne.n	800cca4 <HAL_TIM_OC_Start_IT+0x1dc>
 800cca0:	2301      	movs	r3, #1
 800cca2:	e000      	b.n	800cca6 <HAL_TIM_OC_Start_IT+0x1de>
 800cca4:	2300      	movs	r3, #0
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d007      	beq.n	800ccba <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ccb8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	4a25      	ldr	r2, [pc, #148]	; (800cd54 <HAL_TIM_OC_Start_IT+0x28c>)
 800ccc0:	4293      	cmp	r3, r2
 800ccc2:	d022      	beq.n	800cd0a <HAL_TIM_OC_Start_IT+0x242>
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cccc:	d01d      	beq.n	800cd0a <HAL_TIM_OC_Start_IT+0x242>
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	4a25      	ldr	r2, [pc, #148]	; (800cd68 <HAL_TIM_OC_Start_IT+0x2a0>)
 800ccd4:	4293      	cmp	r3, r2
 800ccd6:	d018      	beq.n	800cd0a <HAL_TIM_OC_Start_IT+0x242>
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	4a23      	ldr	r2, [pc, #140]	; (800cd6c <HAL_TIM_OC_Start_IT+0x2a4>)
 800ccde:	4293      	cmp	r3, r2
 800cce0:	d013      	beq.n	800cd0a <HAL_TIM_OC_Start_IT+0x242>
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	4a22      	ldr	r2, [pc, #136]	; (800cd70 <HAL_TIM_OC_Start_IT+0x2a8>)
 800cce8:	4293      	cmp	r3, r2
 800ccea:	d00e      	beq.n	800cd0a <HAL_TIM_OC_Start_IT+0x242>
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	4a19      	ldr	r2, [pc, #100]	; (800cd58 <HAL_TIM_OC_Start_IT+0x290>)
 800ccf2:	4293      	cmp	r3, r2
 800ccf4:	d009      	beq.n	800cd0a <HAL_TIM_OC_Start_IT+0x242>
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	4a1e      	ldr	r2, [pc, #120]	; (800cd74 <HAL_TIM_OC_Start_IT+0x2ac>)
 800ccfc:	4293      	cmp	r3, r2
 800ccfe:	d004      	beq.n	800cd0a <HAL_TIM_OC_Start_IT+0x242>
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	4a15      	ldr	r2, [pc, #84]	; (800cd5c <HAL_TIM_OC_Start_IT+0x294>)
 800cd06:	4293      	cmp	r3, r2
 800cd08:	d115      	bne.n	800cd36 <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	689a      	ldr	r2, [r3, #8]
 800cd10:	4b19      	ldr	r3, [pc, #100]	; (800cd78 <HAL_TIM_OC_Start_IT+0x2b0>)
 800cd12:	4013      	ands	r3, r2
 800cd14:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cd16:	68bb      	ldr	r3, [r7, #8]
 800cd18:	2b06      	cmp	r3, #6
 800cd1a:	d015      	beq.n	800cd48 <HAL_TIM_OC_Start_IT+0x280>
 800cd1c:	68bb      	ldr	r3, [r7, #8]
 800cd1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cd22:	d011      	beq.n	800cd48 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	681a      	ldr	r2, [r3, #0]
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	f042 0201 	orr.w	r2, r2, #1
 800cd32:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cd34:	e008      	b.n	800cd48 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	681a      	ldr	r2, [r3, #0]
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	f042 0201 	orr.w	r2, r2, #1
 800cd44:	601a      	str	r2, [r3, #0]
 800cd46:	e000      	b.n	800cd4a <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cd48:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800cd4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	3710      	adds	r7, #16
 800cd50:	46bd      	mov	sp, r7
 800cd52:	bd80      	pop	{r7, pc}
 800cd54:	40010000 	.word	0x40010000
 800cd58:	40010400 	.word	0x40010400
 800cd5c:	40014000 	.word	0x40014000
 800cd60:	40014400 	.word	0x40014400
 800cd64:	40014800 	.word	0x40014800
 800cd68:	40000400 	.word	0x40000400
 800cd6c:	40000800 	.word	0x40000800
 800cd70:	40000c00 	.word	0x40000c00
 800cd74:	40001800 	.word	0x40001800
 800cd78:	00010007 	.word	0x00010007

0800cd7c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800cd7c:	b580      	push	{r7, lr}
 800cd7e:	b082      	sub	sp, #8
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d101      	bne.n	800cd8e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800cd8a:	2301      	movs	r3, #1
 800cd8c:	e049      	b.n	800ce22 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cd94:	b2db      	uxtb	r3, r3
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d106      	bne.n	800cda8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	2200      	movs	r2, #0
 800cd9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800cda2:	6878      	ldr	r0, [r7, #4]
 800cda4:	f000 f841 	bl	800ce2a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	2202      	movs	r2, #2
 800cdac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681a      	ldr	r2, [r3, #0]
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	3304      	adds	r3, #4
 800cdb8:	4619      	mov	r1, r3
 800cdba:	4610      	mov	r0, r2
 800cdbc:	f000 fc80 	bl	800d6c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	2201      	movs	r2, #1
 800cdc4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	2201      	movs	r2, #1
 800cdcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	2201      	movs	r2, #1
 800cdd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	2201      	movs	r2, #1
 800cddc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	2201      	movs	r2, #1
 800cde4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	2201      	movs	r2, #1
 800cdec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	2201      	movs	r2, #1
 800cdf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	2201      	movs	r2, #1
 800cdfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	2201      	movs	r2, #1
 800ce04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	2201      	movs	r2, #1
 800ce0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	2201      	movs	r2, #1
 800ce14:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	2201      	movs	r2, #1
 800ce1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ce20:	2300      	movs	r3, #0
}
 800ce22:	4618      	mov	r0, r3
 800ce24:	3708      	adds	r7, #8
 800ce26:	46bd      	mov	sp, r7
 800ce28:	bd80      	pop	{r7, pc}

0800ce2a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800ce2a:	b480      	push	{r7}
 800ce2c:	b083      	sub	sp, #12
 800ce2e:	af00      	add	r7, sp, #0
 800ce30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800ce32:	bf00      	nop
 800ce34:	370c      	adds	r7, #12
 800ce36:	46bd      	mov	sp, r7
 800ce38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce3c:	4770      	bx	lr
	...

0800ce40 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b084      	sub	sp, #16
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	6078      	str	r0, [r7, #4]
 800ce48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ce4a:	683b      	ldr	r3, [r7, #0]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d109      	bne.n	800ce64 <HAL_TIM_PWM_Start+0x24>
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ce56:	b2db      	uxtb	r3, r3
 800ce58:	2b01      	cmp	r3, #1
 800ce5a:	bf14      	ite	ne
 800ce5c:	2301      	movne	r3, #1
 800ce5e:	2300      	moveq	r3, #0
 800ce60:	b2db      	uxtb	r3, r3
 800ce62:	e03c      	b.n	800cede <HAL_TIM_PWM_Start+0x9e>
 800ce64:	683b      	ldr	r3, [r7, #0]
 800ce66:	2b04      	cmp	r3, #4
 800ce68:	d109      	bne.n	800ce7e <HAL_TIM_PWM_Start+0x3e>
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ce70:	b2db      	uxtb	r3, r3
 800ce72:	2b01      	cmp	r3, #1
 800ce74:	bf14      	ite	ne
 800ce76:	2301      	movne	r3, #1
 800ce78:	2300      	moveq	r3, #0
 800ce7a:	b2db      	uxtb	r3, r3
 800ce7c:	e02f      	b.n	800cede <HAL_TIM_PWM_Start+0x9e>
 800ce7e:	683b      	ldr	r3, [r7, #0]
 800ce80:	2b08      	cmp	r3, #8
 800ce82:	d109      	bne.n	800ce98 <HAL_TIM_PWM_Start+0x58>
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ce8a:	b2db      	uxtb	r3, r3
 800ce8c:	2b01      	cmp	r3, #1
 800ce8e:	bf14      	ite	ne
 800ce90:	2301      	movne	r3, #1
 800ce92:	2300      	moveq	r3, #0
 800ce94:	b2db      	uxtb	r3, r3
 800ce96:	e022      	b.n	800cede <HAL_TIM_PWM_Start+0x9e>
 800ce98:	683b      	ldr	r3, [r7, #0]
 800ce9a:	2b0c      	cmp	r3, #12
 800ce9c:	d109      	bne.n	800ceb2 <HAL_TIM_PWM_Start+0x72>
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cea4:	b2db      	uxtb	r3, r3
 800cea6:	2b01      	cmp	r3, #1
 800cea8:	bf14      	ite	ne
 800ceaa:	2301      	movne	r3, #1
 800ceac:	2300      	moveq	r3, #0
 800ceae:	b2db      	uxtb	r3, r3
 800ceb0:	e015      	b.n	800cede <HAL_TIM_PWM_Start+0x9e>
 800ceb2:	683b      	ldr	r3, [r7, #0]
 800ceb4:	2b10      	cmp	r3, #16
 800ceb6:	d109      	bne.n	800cecc <HAL_TIM_PWM_Start+0x8c>
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cebe:	b2db      	uxtb	r3, r3
 800cec0:	2b01      	cmp	r3, #1
 800cec2:	bf14      	ite	ne
 800cec4:	2301      	movne	r3, #1
 800cec6:	2300      	moveq	r3, #0
 800cec8:	b2db      	uxtb	r3, r3
 800ceca:	e008      	b.n	800cede <HAL_TIM_PWM_Start+0x9e>
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ced2:	b2db      	uxtb	r3, r3
 800ced4:	2b01      	cmp	r3, #1
 800ced6:	bf14      	ite	ne
 800ced8:	2301      	movne	r3, #1
 800ceda:	2300      	moveq	r3, #0
 800cedc:	b2db      	uxtb	r3, r3
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d001      	beq.n	800cee6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800cee2:	2301      	movs	r3, #1
 800cee4:	e0a1      	b.n	800d02a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cee6:	683b      	ldr	r3, [r7, #0]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d104      	bne.n	800cef6 <HAL_TIM_PWM_Start+0xb6>
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	2202      	movs	r2, #2
 800cef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cef4:	e023      	b.n	800cf3e <HAL_TIM_PWM_Start+0xfe>
 800cef6:	683b      	ldr	r3, [r7, #0]
 800cef8:	2b04      	cmp	r3, #4
 800cefa:	d104      	bne.n	800cf06 <HAL_TIM_PWM_Start+0xc6>
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	2202      	movs	r2, #2
 800cf00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cf04:	e01b      	b.n	800cf3e <HAL_TIM_PWM_Start+0xfe>
 800cf06:	683b      	ldr	r3, [r7, #0]
 800cf08:	2b08      	cmp	r3, #8
 800cf0a:	d104      	bne.n	800cf16 <HAL_TIM_PWM_Start+0xd6>
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	2202      	movs	r2, #2
 800cf10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cf14:	e013      	b.n	800cf3e <HAL_TIM_PWM_Start+0xfe>
 800cf16:	683b      	ldr	r3, [r7, #0]
 800cf18:	2b0c      	cmp	r3, #12
 800cf1a:	d104      	bne.n	800cf26 <HAL_TIM_PWM_Start+0xe6>
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	2202      	movs	r2, #2
 800cf20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cf24:	e00b      	b.n	800cf3e <HAL_TIM_PWM_Start+0xfe>
 800cf26:	683b      	ldr	r3, [r7, #0]
 800cf28:	2b10      	cmp	r3, #16
 800cf2a:	d104      	bne.n	800cf36 <HAL_TIM_PWM_Start+0xf6>
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	2202      	movs	r2, #2
 800cf30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cf34:	e003      	b.n	800cf3e <HAL_TIM_PWM_Start+0xfe>
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	2202      	movs	r2, #2
 800cf3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	2201      	movs	r2, #1
 800cf44:	6839      	ldr	r1, [r7, #0]
 800cf46:	4618      	mov	r0, r3
 800cf48:	f000 ffd4 	bl	800def4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	4a38      	ldr	r2, [pc, #224]	; (800d034 <HAL_TIM_PWM_Start+0x1f4>)
 800cf52:	4293      	cmp	r3, r2
 800cf54:	d013      	beq.n	800cf7e <HAL_TIM_PWM_Start+0x13e>
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	4a37      	ldr	r2, [pc, #220]	; (800d038 <HAL_TIM_PWM_Start+0x1f8>)
 800cf5c:	4293      	cmp	r3, r2
 800cf5e:	d00e      	beq.n	800cf7e <HAL_TIM_PWM_Start+0x13e>
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	4a35      	ldr	r2, [pc, #212]	; (800d03c <HAL_TIM_PWM_Start+0x1fc>)
 800cf66:	4293      	cmp	r3, r2
 800cf68:	d009      	beq.n	800cf7e <HAL_TIM_PWM_Start+0x13e>
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	4a34      	ldr	r2, [pc, #208]	; (800d040 <HAL_TIM_PWM_Start+0x200>)
 800cf70:	4293      	cmp	r3, r2
 800cf72:	d004      	beq.n	800cf7e <HAL_TIM_PWM_Start+0x13e>
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	4a32      	ldr	r2, [pc, #200]	; (800d044 <HAL_TIM_PWM_Start+0x204>)
 800cf7a:	4293      	cmp	r3, r2
 800cf7c:	d101      	bne.n	800cf82 <HAL_TIM_PWM_Start+0x142>
 800cf7e:	2301      	movs	r3, #1
 800cf80:	e000      	b.n	800cf84 <HAL_TIM_PWM_Start+0x144>
 800cf82:	2300      	movs	r3, #0
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d007      	beq.n	800cf98 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cf96:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	4a25      	ldr	r2, [pc, #148]	; (800d034 <HAL_TIM_PWM_Start+0x1f4>)
 800cf9e:	4293      	cmp	r3, r2
 800cfa0:	d022      	beq.n	800cfe8 <HAL_TIM_PWM_Start+0x1a8>
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cfaa:	d01d      	beq.n	800cfe8 <HAL_TIM_PWM_Start+0x1a8>
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	4a25      	ldr	r2, [pc, #148]	; (800d048 <HAL_TIM_PWM_Start+0x208>)
 800cfb2:	4293      	cmp	r3, r2
 800cfb4:	d018      	beq.n	800cfe8 <HAL_TIM_PWM_Start+0x1a8>
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	4a24      	ldr	r2, [pc, #144]	; (800d04c <HAL_TIM_PWM_Start+0x20c>)
 800cfbc:	4293      	cmp	r3, r2
 800cfbe:	d013      	beq.n	800cfe8 <HAL_TIM_PWM_Start+0x1a8>
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	4a22      	ldr	r2, [pc, #136]	; (800d050 <HAL_TIM_PWM_Start+0x210>)
 800cfc6:	4293      	cmp	r3, r2
 800cfc8:	d00e      	beq.n	800cfe8 <HAL_TIM_PWM_Start+0x1a8>
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	4a1a      	ldr	r2, [pc, #104]	; (800d038 <HAL_TIM_PWM_Start+0x1f8>)
 800cfd0:	4293      	cmp	r3, r2
 800cfd2:	d009      	beq.n	800cfe8 <HAL_TIM_PWM_Start+0x1a8>
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	4a1e      	ldr	r2, [pc, #120]	; (800d054 <HAL_TIM_PWM_Start+0x214>)
 800cfda:	4293      	cmp	r3, r2
 800cfdc:	d004      	beq.n	800cfe8 <HAL_TIM_PWM_Start+0x1a8>
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	4a16      	ldr	r2, [pc, #88]	; (800d03c <HAL_TIM_PWM_Start+0x1fc>)
 800cfe4:	4293      	cmp	r3, r2
 800cfe6:	d115      	bne.n	800d014 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	689a      	ldr	r2, [r3, #8]
 800cfee:	4b1a      	ldr	r3, [pc, #104]	; (800d058 <HAL_TIM_PWM_Start+0x218>)
 800cff0:	4013      	ands	r3, r2
 800cff2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	2b06      	cmp	r3, #6
 800cff8:	d015      	beq.n	800d026 <HAL_TIM_PWM_Start+0x1e6>
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d000:	d011      	beq.n	800d026 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	681a      	ldr	r2, [r3, #0]
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	f042 0201 	orr.w	r2, r2, #1
 800d010:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d012:	e008      	b.n	800d026 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	681a      	ldr	r2, [r3, #0]
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	f042 0201 	orr.w	r2, r2, #1
 800d022:	601a      	str	r2, [r3, #0]
 800d024:	e000      	b.n	800d028 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d026:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d028:	2300      	movs	r3, #0
}
 800d02a:	4618      	mov	r0, r3
 800d02c:	3710      	adds	r7, #16
 800d02e:	46bd      	mov	sp, r7
 800d030:	bd80      	pop	{r7, pc}
 800d032:	bf00      	nop
 800d034:	40010000 	.word	0x40010000
 800d038:	40010400 	.word	0x40010400
 800d03c:	40014000 	.word	0x40014000
 800d040:	40014400 	.word	0x40014400
 800d044:	40014800 	.word	0x40014800
 800d048:	40000400 	.word	0x40000400
 800d04c:	40000800 	.word	0x40000800
 800d050:	40000c00 	.word	0x40000c00
 800d054:	40001800 	.word	0x40001800
 800d058:	00010007 	.word	0x00010007

0800d05c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d05c:	b580      	push	{r7, lr}
 800d05e:	b084      	sub	sp, #16
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	68db      	ldr	r3, [r3, #12]
 800d06a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	691b      	ldr	r3, [r3, #16]
 800d072:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d074:	68bb      	ldr	r3, [r7, #8]
 800d076:	f003 0302 	and.w	r3, r3, #2
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d020      	beq.n	800d0c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	f003 0302 	and.w	r3, r3, #2
 800d084:	2b00      	cmp	r3, #0
 800d086:	d01b      	beq.n	800d0c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	f06f 0202 	mvn.w	r2, #2
 800d090:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	2201      	movs	r2, #1
 800d096:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	699b      	ldr	r3, [r3, #24]
 800d09e:	f003 0303 	and.w	r3, r3, #3
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d003      	beq.n	800d0ae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d0a6:	6878      	ldr	r0, [r7, #4]
 800d0a8:	f000 faec 	bl	800d684 <HAL_TIM_IC_CaptureCallback>
 800d0ac:	e005      	b.n	800d0ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d0ae:	6878      	ldr	r0, [r7, #4]
 800d0b0:	f7f3 fae8 	bl	8000684 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d0b4:	6878      	ldr	r0, [r7, #4]
 800d0b6:	f000 faef 	bl	800d698 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	2200      	movs	r2, #0
 800d0be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d0c0:	68bb      	ldr	r3, [r7, #8]
 800d0c2:	f003 0304 	and.w	r3, r3, #4
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d020      	beq.n	800d10c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	f003 0304 	and.w	r3, r3, #4
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d01b      	beq.n	800d10c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	f06f 0204 	mvn.w	r2, #4
 800d0dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	2202      	movs	r2, #2
 800d0e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	699b      	ldr	r3, [r3, #24]
 800d0ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d003      	beq.n	800d0fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d0f2:	6878      	ldr	r0, [r7, #4]
 800d0f4:	f000 fac6 	bl	800d684 <HAL_TIM_IC_CaptureCallback>
 800d0f8:	e005      	b.n	800d106 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d0fa:	6878      	ldr	r0, [r7, #4]
 800d0fc:	f7f3 fac2 	bl	8000684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d100:	6878      	ldr	r0, [r7, #4]
 800d102:	f000 fac9 	bl	800d698 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	2200      	movs	r2, #0
 800d10a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d10c:	68bb      	ldr	r3, [r7, #8]
 800d10e:	f003 0308 	and.w	r3, r3, #8
 800d112:	2b00      	cmp	r3, #0
 800d114:	d020      	beq.n	800d158 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	f003 0308 	and.w	r3, r3, #8
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d01b      	beq.n	800d158 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	f06f 0208 	mvn.w	r2, #8
 800d128:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	2204      	movs	r2, #4
 800d12e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	69db      	ldr	r3, [r3, #28]
 800d136:	f003 0303 	and.w	r3, r3, #3
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d003      	beq.n	800d146 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d13e:	6878      	ldr	r0, [r7, #4]
 800d140:	f000 faa0 	bl	800d684 <HAL_TIM_IC_CaptureCallback>
 800d144:	e005      	b.n	800d152 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d146:	6878      	ldr	r0, [r7, #4]
 800d148:	f7f3 fa9c 	bl	8000684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d14c:	6878      	ldr	r0, [r7, #4]
 800d14e:	f000 faa3 	bl	800d698 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	2200      	movs	r2, #0
 800d156:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d158:	68bb      	ldr	r3, [r7, #8]
 800d15a:	f003 0310 	and.w	r3, r3, #16
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d020      	beq.n	800d1a4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	f003 0310 	and.w	r3, r3, #16
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d01b      	beq.n	800d1a4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	f06f 0210 	mvn.w	r2, #16
 800d174:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	2208      	movs	r2, #8
 800d17a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	69db      	ldr	r3, [r3, #28]
 800d182:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d186:	2b00      	cmp	r3, #0
 800d188:	d003      	beq.n	800d192 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d18a:	6878      	ldr	r0, [r7, #4]
 800d18c:	f000 fa7a 	bl	800d684 <HAL_TIM_IC_CaptureCallback>
 800d190:	e005      	b.n	800d19e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d192:	6878      	ldr	r0, [r7, #4]
 800d194:	f7f3 fa76 	bl	8000684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d198:	6878      	ldr	r0, [r7, #4]
 800d19a:	f000 fa7d 	bl	800d698 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	2200      	movs	r2, #0
 800d1a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d1a4:	68bb      	ldr	r3, [r7, #8]
 800d1a6:	f003 0301 	and.w	r3, r3, #1
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d00c      	beq.n	800d1c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	f003 0301 	and.w	r3, r3, #1
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d007      	beq.n	800d1c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	f06f 0201 	mvn.w	r2, #1
 800d1c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d1c2:	6878      	ldr	r0, [r7, #4]
 800d1c4:	f7f4 ffa0 	bl	8002108 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d1c8:	68bb      	ldr	r3, [r7, #8]
 800d1ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d104      	bne.n	800d1dc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800d1d2:	68bb      	ldr	r3, [r7, #8]
 800d1d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d00c      	beq.n	800d1f6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d007      	beq.n	800d1f6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800d1ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d1f0:	6878      	ldr	r0, [r7, #4]
 800d1f2:	f000 ffbb 	bl	800e16c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800d1f6:	68bb      	ldr	r3, [r7, #8]
 800d1f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d00c      	beq.n	800d21a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d206:	2b00      	cmp	r3, #0
 800d208:	d007      	beq.n	800d21a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d212:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d214:	6878      	ldr	r0, [r7, #4]
 800d216:	f000 ffb3 	bl	800e180 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d21a:	68bb      	ldr	r3, [r7, #8]
 800d21c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d220:	2b00      	cmp	r3, #0
 800d222:	d00c      	beq.n	800d23e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d007      	beq.n	800d23e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d236:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d238:	6878      	ldr	r0, [r7, #4]
 800d23a:	f000 fa37 	bl	800d6ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d23e:	68bb      	ldr	r3, [r7, #8]
 800d240:	f003 0320 	and.w	r3, r3, #32
 800d244:	2b00      	cmp	r3, #0
 800d246:	d00c      	beq.n	800d262 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	f003 0320 	and.w	r3, r3, #32
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d007      	beq.n	800d262 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	f06f 0220 	mvn.w	r2, #32
 800d25a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d25c:	6878      	ldr	r0, [r7, #4]
 800d25e:	f000 ff7b 	bl	800e158 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d262:	bf00      	nop
 800d264:	3710      	adds	r7, #16
 800d266:	46bd      	mov	sp, r7
 800d268:	bd80      	pop	{r7, pc}
	...

0800d26c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d26c:	b580      	push	{r7, lr}
 800d26e:	b086      	sub	sp, #24
 800d270:	af00      	add	r7, sp, #0
 800d272:	60f8      	str	r0, [r7, #12]
 800d274:	60b9      	str	r1, [r7, #8]
 800d276:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d278:	2300      	movs	r3, #0
 800d27a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d282:	2b01      	cmp	r3, #1
 800d284:	d101      	bne.n	800d28a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d286:	2302      	movs	r3, #2
 800d288:	e0ff      	b.n	800d48a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	2201      	movs	r2, #1
 800d28e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	2b14      	cmp	r3, #20
 800d296:	f200 80f0 	bhi.w	800d47a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800d29a:	a201      	add	r2, pc, #4	; (adr r2, 800d2a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d29c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2a0:	0800d2f5 	.word	0x0800d2f5
 800d2a4:	0800d47b 	.word	0x0800d47b
 800d2a8:	0800d47b 	.word	0x0800d47b
 800d2ac:	0800d47b 	.word	0x0800d47b
 800d2b0:	0800d335 	.word	0x0800d335
 800d2b4:	0800d47b 	.word	0x0800d47b
 800d2b8:	0800d47b 	.word	0x0800d47b
 800d2bc:	0800d47b 	.word	0x0800d47b
 800d2c0:	0800d377 	.word	0x0800d377
 800d2c4:	0800d47b 	.word	0x0800d47b
 800d2c8:	0800d47b 	.word	0x0800d47b
 800d2cc:	0800d47b 	.word	0x0800d47b
 800d2d0:	0800d3b7 	.word	0x0800d3b7
 800d2d4:	0800d47b 	.word	0x0800d47b
 800d2d8:	0800d47b 	.word	0x0800d47b
 800d2dc:	0800d47b 	.word	0x0800d47b
 800d2e0:	0800d3f9 	.word	0x0800d3f9
 800d2e4:	0800d47b 	.word	0x0800d47b
 800d2e8:	0800d47b 	.word	0x0800d47b
 800d2ec:	0800d47b 	.word	0x0800d47b
 800d2f0:	0800d439 	.word	0x0800d439
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	68b9      	ldr	r1, [r7, #8]
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	f000 fa86 	bl	800d80c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	699a      	ldr	r2, [r3, #24]
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	f042 0208 	orr.w	r2, r2, #8
 800d30e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	699a      	ldr	r2, [r3, #24]
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	f022 0204 	bic.w	r2, r2, #4
 800d31e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	6999      	ldr	r1, [r3, #24]
 800d326:	68bb      	ldr	r3, [r7, #8]
 800d328:	691a      	ldr	r2, [r3, #16]
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	430a      	orrs	r2, r1
 800d330:	619a      	str	r2, [r3, #24]
      break;
 800d332:	e0a5      	b.n	800d480 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	68b9      	ldr	r1, [r7, #8]
 800d33a:	4618      	mov	r0, r3
 800d33c:	f000 faf6 	bl	800d92c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	699a      	ldr	r2, [r3, #24]
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d34e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	699a      	ldr	r2, [r3, #24]
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d35e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	6999      	ldr	r1, [r3, #24]
 800d366:	68bb      	ldr	r3, [r7, #8]
 800d368:	691b      	ldr	r3, [r3, #16]
 800d36a:	021a      	lsls	r2, r3, #8
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	430a      	orrs	r2, r1
 800d372:	619a      	str	r2, [r3, #24]
      break;
 800d374:	e084      	b.n	800d480 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	68b9      	ldr	r1, [r7, #8]
 800d37c:	4618      	mov	r0, r3
 800d37e:	f000 fb5f 	bl	800da40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	69da      	ldr	r2, [r3, #28]
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	f042 0208 	orr.w	r2, r2, #8
 800d390:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	69da      	ldr	r2, [r3, #28]
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	f022 0204 	bic.w	r2, r2, #4
 800d3a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	69d9      	ldr	r1, [r3, #28]
 800d3a8:	68bb      	ldr	r3, [r7, #8]
 800d3aa:	691a      	ldr	r2, [r3, #16]
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	430a      	orrs	r2, r1
 800d3b2:	61da      	str	r2, [r3, #28]
      break;
 800d3b4:	e064      	b.n	800d480 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	68b9      	ldr	r1, [r7, #8]
 800d3bc:	4618      	mov	r0, r3
 800d3be:	f000 fbc7 	bl	800db50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	69da      	ldr	r2, [r3, #28]
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d3d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	69da      	ldr	r2, [r3, #28]
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d3e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	69d9      	ldr	r1, [r3, #28]
 800d3e8:	68bb      	ldr	r3, [r7, #8]
 800d3ea:	691b      	ldr	r3, [r3, #16]
 800d3ec:	021a      	lsls	r2, r3, #8
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	430a      	orrs	r2, r1
 800d3f4:	61da      	str	r2, [r3, #28]
      break;
 800d3f6:	e043      	b.n	800d480 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	68b9      	ldr	r1, [r7, #8]
 800d3fe:	4618      	mov	r0, r3
 800d400:	f000 fc10 	bl	800dc24 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	f042 0208 	orr.w	r2, r2, #8
 800d412:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	f022 0204 	bic.w	r2, r2, #4
 800d422:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d42a:	68bb      	ldr	r3, [r7, #8]
 800d42c:	691a      	ldr	r2, [r3, #16]
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	430a      	orrs	r2, r1
 800d434:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d436:	e023      	b.n	800d480 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	68b9      	ldr	r1, [r7, #8]
 800d43e:	4618      	mov	r0, r3
 800d440:	f000 fc54 	bl	800dcec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d452:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d462:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d46a:	68bb      	ldr	r3, [r7, #8]
 800d46c:	691b      	ldr	r3, [r3, #16]
 800d46e:	021a      	lsls	r2, r3, #8
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	430a      	orrs	r2, r1
 800d476:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d478:	e002      	b.n	800d480 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800d47a:	2301      	movs	r3, #1
 800d47c:	75fb      	strb	r3, [r7, #23]
      break;
 800d47e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	2200      	movs	r2, #0
 800d484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d488:	7dfb      	ldrb	r3, [r7, #23]
}
 800d48a:	4618      	mov	r0, r3
 800d48c:	3718      	adds	r7, #24
 800d48e:	46bd      	mov	sp, r7
 800d490:	bd80      	pop	{r7, pc}
 800d492:	bf00      	nop

0800d494 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d494:	b580      	push	{r7, lr}
 800d496:	b084      	sub	sp, #16
 800d498:	af00      	add	r7, sp, #0
 800d49a:	6078      	str	r0, [r7, #4]
 800d49c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d49e:	2300      	movs	r3, #0
 800d4a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d4a8:	2b01      	cmp	r3, #1
 800d4aa:	d101      	bne.n	800d4b0 <HAL_TIM_ConfigClockSource+0x1c>
 800d4ac:	2302      	movs	r3, #2
 800d4ae:	e0dc      	b.n	800d66a <HAL_TIM_ConfigClockSource+0x1d6>
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	2201      	movs	r2, #1
 800d4b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	2202      	movs	r2, #2
 800d4bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	689b      	ldr	r3, [r3, #8]
 800d4c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d4c8:	68ba      	ldr	r2, [r7, #8]
 800d4ca:	4b6a      	ldr	r3, [pc, #424]	; (800d674 <HAL_TIM_ConfigClockSource+0x1e0>)
 800d4cc:	4013      	ands	r3, r2
 800d4ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d4d0:	68bb      	ldr	r3, [r7, #8]
 800d4d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d4d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	68ba      	ldr	r2, [r7, #8]
 800d4de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d4e0:	683b      	ldr	r3, [r7, #0]
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	4a64      	ldr	r2, [pc, #400]	; (800d678 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d4e6:	4293      	cmp	r3, r2
 800d4e8:	f000 80a9 	beq.w	800d63e <HAL_TIM_ConfigClockSource+0x1aa>
 800d4ec:	4a62      	ldr	r2, [pc, #392]	; (800d678 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d4ee:	4293      	cmp	r3, r2
 800d4f0:	f200 80ae 	bhi.w	800d650 <HAL_TIM_ConfigClockSource+0x1bc>
 800d4f4:	4a61      	ldr	r2, [pc, #388]	; (800d67c <HAL_TIM_ConfigClockSource+0x1e8>)
 800d4f6:	4293      	cmp	r3, r2
 800d4f8:	f000 80a1 	beq.w	800d63e <HAL_TIM_ConfigClockSource+0x1aa>
 800d4fc:	4a5f      	ldr	r2, [pc, #380]	; (800d67c <HAL_TIM_ConfigClockSource+0x1e8>)
 800d4fe:	4293      	cmp	r3, r2
 800d500:	f200 80a6 	bhi.w	800d650 <HAL_TIM_ConfigClockSource+0x1bc>
 800d504:	4a5e      	ldr	r2, [pc, #376]	; (800d680 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d506:	4293      	cmp	r3, r2
 800d508:	f000 8099 	beq.w	800d63e <HAL_TIM_ConfigClockSource+0x1aa>
 800d50c:	4a5c      	ldr	r2, [pc, #368]	; (800d680 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d50e:	4293      	cmp	r3, r2
 800d510:	f200 809e 	bhi.w	800d650 <HAL_TIM_ConfigClockSource+0x1bc>
 800d514:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d518:	f000 8091 	beq.w	800d63e <HAL_TIM_ConfigClockSource+0x1aa>
 800d51c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d520:	f200 8096 	bhi.w	800d650 <HAL_TIM_ConfigClockSource+0x1bc>
 800d524:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d528:	f000 8089 	beq.w	800d63e <HAL_TIM_ConfigClockSource+0x1aa>
 800d52c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d530:	f200 808e 	bhi.w	800d650 <HAL_TIM_ConfigClockSource+0x1bc>
 800d534:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d538:	d03e      	beq.n	800d5b8 <HAL_TIM_ConfigClockSource+0x124>
 800d53a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d53e:	f200 8087 	bhi.w	800d650 <HAL_TIM_ConfigClockSource+0x1bc>
 800d542:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d546:	f000 8086 	beq.w	800d656 <HAL_TIM_ConfigClockSource+0x1c2>
 800d54a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d54e:	d87f      	bhi.n	800d650 <HAL_TIM_ConfigClockSource+0x1bc>
 800d550:	2b70      	cmp	r3, #112	; 0x70
 800d552:	d01a      	beq.n	800d58a <HAL_TIM_ConfigClockSource+0xf6>
 800d554:	2b70      	cmp	r3, #112	; 0x70
 800d556:	d87b      	bhi.n	800d650 <HAL_TIM_ConfigClockSource+0x1bc>
 800d558:	2b60      	cmp	r3, #96	; 0x60
 800d55a:	d050      	beq.n	800d5fe <HAL_TIM_ConfigClockSource+0x16a>
 800d55c:	2b60      	cmp	r3, #96	; 0x60
 800d55e:	d877      	bhi.n	800d650 <HAL_TIM_ConfigClockSource+0x1bc>
 800d560:	2b50      	cmp	r3, #80	; 0x50
 800d562:	d03c      	beq.n	800d5de <HAL_TIM_ConfigClockSource+0x14a>
 800d564:	2b50      	cmp	r3, #80	; 0x50
 800d566:	d873      	bhi.n	800d650 <HAL_TIM_ConfigClockSource+0x1bc>
 800d568:	2b40      	cmp	r3, #64	; 0x40
 800d56a:	d058      	beq.n	800d61e <HAL_TIM_ConfigClockSource+0x18a>
 800d56c:	2b40      	cmp	r3, #64	; 0x40
 800d56e:	d86f      	bhi.n	800d650 <HAL_TIM_ConfigClockSource+0x1bc>
 800d570:	2b30      	cmp	r3, #48	; 0x30
 800d572:	d064      	beq.n	800d63e <HAL_TIM_ConfigClockSource+0x1aa>
 800d574:	2b30      	cmp	r3, #48	; 0x30
 800d576:	d86b      	bhi.n	800d650 <HAL_TIM_ConfigClockSource+0x1bc>
 800d578:	2b20      	cmp	r3, #32
 800d57a:	d060      	beq.n	800d63e <HAL_TIM_ConfigClockSource+0x1aa>
 800d57c:	2b20      	cmp	r3, #32
 800d57e:	d867      	bhi.n	800d650 <HAL_TIM_ConfigClockSource+0x1bc>
 800d580:	2b00      	cmp	r3, #0
 800d582:	d05c      	beq.n	800d63e <HAL_TIM_ConfigClockSource+0x1aa>
 800d584:	2b10      	cmp	r3, #16
 800d586:	d05a      	beq.n	800d63e <HAL_TIM_ConfigClockSource+0x1aa>
 800d588:	e062      	b.n	800d650 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	6818      	ldr	r0, [r3, #0]
 800d58e:	683b      	ldr	r3, [r7, #0]
 800d590:	6899      	ldr	r1, [r3, #8]
 800d592:	683b      	ldr	r3, [r7, #0]
 800d594:	685a      	ldr	r2, [r3, #4]
 800d596:	683b      	ldr	r3, [r7, #0]
 800d598:	68db      	ldr	r3, [r3, #12]
 800d59a:	f000 fc8b 	bl	800deb4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	689b      	ldr	r3, [r3, #8]
 800d5a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d5a6:	68bb      	ldr	r3, [r7, #8]
 800d5a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d5ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	68ba      	ldr	r2, [r7, #8]
 800d5b4:	609a      	str	r2, [r3, #8]
      break;
 800d5b6:	e04f      	b.n	800d658 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	6818      	ldr	r0, [r3, #0]
 800d5bc:	683b      	ldr	r3, [r7, #0]
 800d5be:	6899      	ldr	r1, [r3, #8]
 800d5c0:	683b      	ldr	r3, [r7, #0]
 800d5c2:	685a      	ldr	r2, [r3, #4]
 800d5c4:	683b      	ldr	r3, [r7, #0]
 800d5c6:	68db      	ldr	r3, [r3, #12]
 800d5c8:	f000 fc74 	bl	800deb4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	689a      	ldr	r2, [r3, #8]
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d5da:	609a      	str	r2, [r3, #8]
      break;
 800d5dc:	e03c      	b.n	800d658 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	6818      	ldr	r0, [r3, #0]
 800d5e2:	683b      	ldr	r3, [r7, #0]
 800d5e4:	6859      	ldr	r1, [r3, #4]
 800d5e6:	683b      	ldr	r3, [r7, #0]
 800d5e8:	68db      	ldr	r3, [r3, #12]
 800d5ea:	461a      	mov	r2, r3
 800d5ec:	f000 fbe4 	bl	800ddb8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	2150      	movs	r1, #80	; 0x50
 800d5f6:	4618      	mov	r0, r3
 800d5f8:	f000 fc3e 	bl	800de78 <TIM_ITRx_SetConfig>
      break;
 800d5fc:	e02c      	b.n	800d658 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	6818      	ldr	r0, [r3, #0]
 800d602:	683b      	ldr	r3, [r7, #0]
 800d604:	6859      	ldr	r1, [r3, #4]
 800d606:	683b      	ldr	r3, [r7, #0]
 800d608:	68db      	ldr	r3, [r3, #12]
 800d60a:	461a      	mov	r2, r3
 800d60c:	f000 fc03 	bl	800de16 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	2160      	movs	r1, #96	; 0x60
 800d616:	4618      	mov	r0, r3
 800d618:	f000 fc2e 	bl	800de78 <TIM_ITRx_SetConfig>
      break;
 800d61c:	e01c      	b.n	800d658 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	6818      	ldr	r0, [r3, #0]
 800d622:	683b      	ldr	r3, [r7, #0]
 800d624:	6859      	ldr	r1, [r3, #4]
 800d626:	683b      	ldr	r3, [r7, #0]
 800d628:	68db      	ldr	r3, [r3, #12]
 800d62a:	461a      	mov	r2, r3
 800d62c:	f000 fbc4 	bl	800ddb8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	2140      	movs	r1, #64	; 0x40
 800d636:	4618      	mov	r0, r3
 800d638:	f000 fc1e 	bl	800de78 <TIM_ITRx_SetConfig>
      break;
 800d63c:	e00c      	b.n	800d658 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	681a      	ldr	r2, [r3, #0]
 800d642:	683b      	ldr	r3, [r7, #0]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	4619      	mov	r1, r3
 800d648:	4610      	mov	r0, r2
 800d64a:	f000 fc15 	bl	800de78 <TIM_ITRx_SetConfig>
      break;
 800d64e:	e003      	b.n	800d658 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800d650:	2301      	movs	r3, #1
 800d652:	73fb      	strb	r3, [r7, #15]
      break;
 800d654:	e000      	b.n	800d658 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800d656:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	2201      	movs	r2, #1
 800d65c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	2200      	movs	r2, #0
 800d664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d668:	7bfb      	ldrb	r3, [r7, #15]
}
 800d66a:	4618      	mov	r0, r3
 800d66c:	3710      	adds	r7, #16
 800d66e:	46bd      	mov	sp, r7
 800d670:	bd80      	pop	{r7, pc}
 800d672:	bf00      	nop
 800d674:	ffceff88 	.word	0xffceff88
 800d678:	00100040 	.word	0x00100040
 800d67c:	00100030 	.word	0x00100030
 800d680:	00100020 	.word	0x00100020

0800d684 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d684:	b480      	push	{r7}
 800d686:	b083      	sub	sp, #12
 800d688:	af00      	add	r7, sp, #0
 800d68a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d68c:	bf00      	nop
 800d68e:	370c      	adds	r7, #12
 800d690:	46bd      	mov	sp, r7
 800d692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d696:	4770      	bx	lr

0800d698 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d698:	b480      	push	{r7}
 800d69a:	b083      	sub	sp, #12
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d6a0:	bf00      	nop
 800d6a2:	370c      	adds	r7, #12
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6aa:	4770      	bx	lr

0800d6ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d6ac:	b480      	push	{r7}
 800d6ae:	b083      	sub	sp, #12
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d6b4:	bf00      	nop
 800d6b6:	370c      	adds	r7, #12
 800d6b8:	46bd      	mov	sp, r7
 800d6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6be:	4770      	bx	lr

0800d6c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d6c0:	b480      	push	{r7}
 800d6c2:	b085      	sub	sp, #20
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	6078      	str	r0, [r7, #4]
 800d6c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	4a46      	ldr	r2, [pc, #280]	; (800d7ec <TIM_Base_SetConfig+0x12c>)
 800d6d4:	4293      	cmp	r3, r2
 800d6d6:	d013      	beq.n	800d700 <TIM_Base_SetConfig+0x40>
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d6de:	d00f      	beq.n	800d700 <TIM_Base_SetConfig+0x40>
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	4a43      	ldr	r2, [pc, #268]	; (800d7f0 <TIM_Base_SetConfig+0x130>)
 800d6e4:	4293      	cmp	r3, r2
 800d6e6:	d00b      	beq.n	800d700 <TIM_Base_SetConfig+0x40>
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	4a42      	ldr	r2, [pc, #264]	; (800d7f4 <TIM_Base_SetConfig+0x134>)
 800d6ec:	4293      	cmp	r3, r2
 800d6ee:	d007      	beq.n	800d700 <TIM_Base_SetConfig+0x40>
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	4a41      	ldr	r2, [pc, #260]	; (800d7f8 <TIM_Base_SetConfig+0x138>)
 800d6f4:	4293      	cmp	r3, r2
 800d6f6:	d003      	beq.n	800d700 <TIM_Base_SetConfig+0x40>
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	4a40      	ldr	r2, [pc, #256]	; (800d7fc <TIM_Base_SetConfig+0x13c>)
 800d6fc:	4293      	cmp	r3, r2
 800d6fe:	d108      	bne.n	800d712 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d706:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d708:	683b      	ldr	r3, [r7, #0]
 800d70a:	685b      	ldr	r3, [r3, #4]
 800d70c:	68fa      	ldr	r2, [r7, #12]
 800d70e:	4313      	orrs	r3, r2
 800d710:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	4a35      	ldr	r2, [pc, #212]	; (800d7ec <TIM_Base_SetConfig+0x12c>)
 800d716:	4293      	cmp	r3, r2
 800d718:	d01f      	beq.n	800d75a <TIM_Base_SetConfig+0x9a>
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d720:	d01b      	beq.n	800d75a <TIM_Base_SetConfig+0x9a>
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	4a32      	ldr	r2, [pc, #200]	; (800d7f0 <TIM_Base_SetConfig+0x130>)
 800d726:	4293      	cmp	r3, r2
 800d728:	d017      	beq.n	800d75a <TIM_Base_SetConfig+0x9a>
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	4a31      	ldr	r2, [pc, #196]	; (800d7f4 <TIM_Base_SetConfig+0x134>)
 800d72e:	4293      	cmp	r3, r2
 800d730:	d013      	beq.n	800d75a <TIM_Base_SetConfig+0x9a>
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	4a30      	ldr	r2, [pc, #192]	; (800d7f8 <TIM_Base_SetConfig+0x138>)
 800d736:	4293      	cmp	r3, r2
 800d738:	d00f      	beq.n	800d75a <TIM_Base_SetConfig+0x9a>
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	4a2f      	ldr	r2, [pc, #188]	; (800d7fc <TIM_Base_SetConfig+0x13c>)
 800d73e:	4293      	cmp	r3, r2
 800d740:	d00b      	beq.n	800d75a <TIM_Base_SetConfig+0x9a>
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	4a2e      	ldr	r2, [pc, #184]	; (800d800 <TIM_Base_SetConfig+0x140>)
 800d746:	4293      	cmp	r3, r2
 800d748:	d007      	beq.n	800d75a <TIM_Base_SetConfig+0x9a>
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	4a2d      	ldr	r2, [pc, #180]	; (800d804 <TIM_Base_SetConfig+0x144>)
 800d74e:	4293      	cmp	r3, r2
 800d750:	d003      	beq.n	800d75a <TIM_Base_SetConfig+0x9a>
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	4a2c      	ldr	r2, [pc, #176]	; (800d808 <TIM_Base_SetConfig+0x148>)
 800d756:	4293      	cmp	r3, r2
 800d758:	d108      	bne.n	800d76c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d760:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d762:	683b      	ldr	r3, [r7, #0]
 800d764:	68db      	ldr	r3, [r3, #12]
 800d766:	68fa      	ldr	r2, [r7, #12]
 800d768:	4313      	orrs	r3, r2
 800d76a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d772:	683b      	ldr	r3, [r7, #0]
 800d774:	695b      	ldr	r3, [r3, #20]
 800d776:	4313      	orrs	r3, r2
 800d778:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	68fa      	ldr	r2, [r7, #12]
 800d77e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d780:	683b      	ldr	r3, [r7, #0]
 800d782:	689a      	ldr	r2, [r3, #8]
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d788:	683b      	ldr	r3, [r7, #0]
 800d78a:	681a      	ldr	r2, [r3, #0]
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	4a16      	ldr	r2, [pc, #88]	; (800d7ec <TIM_Base_SetConfig+0x12c>)
 800d794:	4293      	cmp	r3, r2
 800d796:	d00f      	beq.n	800d7b8 <TIM_Base_SetConfig+0xf8>
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	4a18      	ldr	r2, [pc, #96]	; (800d7fc <TIM_Base_SetConfig+0x13c>)
 800d79c:	4293      	cmp	r3, r2
 800d79e:	d00b      	beq.n	800d7b8 <TIM_Base_SetConfig+0xf8>
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	4a17      	ldr	r2, [pc, #92]	; (800d800 <TIM_Base_SetConfig+0x140>)
 800d7a4:	4293      	cmp	r3, r2
 800d7a6:	d007      	beq.n	800d7b8 <TIM_Base_SetConfig+0xf8>
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	4a16      	ldr	r2, [pc, #88]	; (800d804 <TIM_Base_SetConfig+0x144>)
 800d7ac:	4293      	cmp	r3, r2
 800d7ae:	d003      	beq.n	800d7b8 <TIM_Base_SetConfig+0xf8>
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	4a15      	ldr	r2, [pc, #84]	; (800d808 <TIM_Base_SetConfig+0x148>)
 800d7b4:	4293      	cmp	r3, r2
 800d7b6:	d103      	bne.n	800d7c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d7b8:	683b      	ldr	r3, [r7, #0]
 800d7ba:	691a      	ldr	r2, [r3, #16]
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	2201      	movs	r2, #1
 800d7c4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	691b      	ldr	r3, [r3, #16]
 800d7ca:	f003 0301 	and.w	r3, r3, #1
 800d7ce:	2b01      	cmp	r3, #1
 800d7d0:	d105      	bne.n	800d7de <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	691b      	ldr	r3, [r3, #16]
 800d7d6:	f023 0201 	bic.w	r2, r3, #1
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	611a      	str	r2, [r3, #16]
  }
}
 800d7de:	bf00      	nop
 800d7e0:	3714      	adds	r7, #20
 800d7e2:	46bd      	mov	sp, r7
 800d7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e8:	4770      	bx	lr
 800d7ea:	bf00      	nop
 800d7ec:	40010000 	.word	0x40010000
 800d7f0:	40000400 	.word	0x40000400
 800d7f4:	40000800 	.word	0x40000800
 800d7f8:	40000c00 	.word	0x40000c00
 800d7fc:	40010400 	.word	0x40010400
 800d800:	40014000 	.word	0x40014000
 800d804:	40014400 	.word	0x40014400
 800d808:	40014800 	.word	0x40014800

0800d80c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d80c:	b480      	push	{r7}
 800d80e:	b087      	sub	sp, #28
 800d810:	af00      	add	r7, sp, #0
 800d812:	6078      	str	r0, [r7, #4]
 800d814:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	6a1b      	ldr	r3, [r3, #32]
 800d81a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	6a1b      	ldr	r3, [r3, #32]
 800d820:	f023 0201 	bic.w	r2, r3, #1
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	685b      	ldr	r3, [r3, #4]
 800d82c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	699b      	ldr	r3, [r3, #24]
 800d832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d834:	68fa      	ldr	r2, [r7, #12]
 800d836:	4b37      	ldr	r3, [pc, #220]	; (800d914 <TIM_OC1_SetConfig+0x108>)
 800d838:	4013      	ands	r3, r2
 800d83a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	f023 0303 	bic.w	r3, r3, #3
 800d842:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d844:	683b      	ldr	r3, [r7, #0]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	68fa      	ldr	r2, [r7, #12]
 800d84a:	4313      	orrs	r3, r2
 800d84c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d84e:	697b      	ldr	r3, [r7, #20]
 800d850:	f023 0302 	bic.w	r3, r3, #2
 800d854:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d856:	683b      	ldr	r3, [r7, #0]
 800d858:	689b      	ldr	r3, [r3, #8]
 800d85a:	697a      	ldr	r2, [r7, #20]
 800d85c:	4313      	orrs	r3, r2
 800d85e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	4a2d      	ldr	r2, [pc, #180]	; (800d918 <TIM_OC1_SetConfig+0x10c>)
 800d864:	4293      	cmp	r3, r2
 800d866:	d00f      	beq.n	800d888 <TIM_OC1_SetConfig+0x7c>
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	4a2c      	ldr	r2, [pc, #176]	; (800d91c <TIM_OC1_SetConfig+0x110>)
 800d86c:	4293      	cmp	r3, r2
 800d86e:	d00b      	beq.n	800d888 <TIM_OC1_SetConfig+0x7c>
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	4a2b      	ldr	r2, [pc, #172]	; (800d920 <TIM_OC1_SetConfig+0x114>)
 800d874:	4293      	cmp	r3, r2
 800d876:	d007      	beq.n	800d888 <TIM_OC1_SetConfig+0x7c>
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	4a2a      	ldr	r2, [pc, #168]	; (800d924 <TIM_OC1_SetConfig+0x118>)
 800d87c:	4293      	cmp	r3, r2
 800d87e:	d003      	beq.n	800d888 <TIM_OC1_SetConfig+0x7c>
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	4a29      	ldr	r2, [pc, #164]	; (800d928 <TIM_OC1_SetConfig+0x11c>)
 800d884:	4293      	cmp	r3, r2
 800d886:	d10c      	bne.n	800d8a2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d888:	697b      	ldr	r3, [r7, #20]
 800d88a:	f023 0308 	bic.w	r3, r3, #8
 800d88e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d890:	683b      	ldr	r3, [r7, #0]
 800d892:	68db      	ldr	r3, [r3, #12]
 800d894:	697a      	ldr	r2, [r7, #20]
 800d896:	4313      	orrs	r3, r2
 800d898:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d89a:	697b      	ldr	r3, [r7, #20]
 800d89c:	f023 0304 	bic.w	r3, r3, #4
 800d8a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	4a1c      	ldr	r2, [pc, #112]	; (800d918 <TIM_OC1_SetConfig+0x10c>)
 800d8a6:	4293      	cmp	r3, r2
 800d8a8:	d00f      	beq.n	800d8ca <TIM_OC1_SetConfig+0xbe>
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	4a1b      	ldr	r2, [pc, #108]	; (800d91c <TIM_OC1_SetConfig+0x110>)
 800d8ae:	4293      	cmp	r3, r2
 800d8b0:	d00b      	beq.n	800d8ca <TIM_OC1_SetConfig+0xbe>
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	4a1a      	ldr	r2, [pc, #104]	; (800d920 <TIM_OC1_SetConfig+0x114>)
 800d8b6:	4293      	cmp	r3, r2
 800d8b8:	d007      	beq.n	800d8ca <TIM_OC1_SetConfig+0xbe>
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	4a19      	ldr	r2, [pc, #100]	; (800d924 <TIM_OC1_SetConfig+0x118>)
 800d8be:	4293      	cmp	r3, r2
 800d8c0:	d003      	beq.n	800d8ca <TIM_OC1_SetConfig+0xbe>
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	4a18      	ldr	r2, [pc, #96]	; (800d928 <TIM_OC1_SetConfig+0x11c>)
 800d8c6:	4293      	cmp	r3, r2
 800d8c8:	d111      	bne.n	800d8ee <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d8ca:	693b      	ldr	r3, [r7, #16]
 800d8cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d8d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d8d2:	693b      	ldr	r3, [r7, #16]
 800d8d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d8d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d8da:	683b      	ldr	r3, [r7, #0]
 800d8dc:	695b      	ldr	r3, [r3, #20]
 800d8de:	693a      	ldr	r2, [r7, #16]
 800d8e0:	4313      	orrs	r3, r2
 800d8e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d8e4:	683b      	ldr	r3, [r7, #0]
 800d8e6:	699b      	ldr	r3, [r3, #24]
 800d8e8:	693a      	ldr	r2, [r7, #16]
 800d8ea:	4313      	orrs	r3, r2
 800d8ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	693a      	ldr	r2, [r7, #16]
 800d8f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	68fa      	ldr	r2, [r7, #12]
 800d8f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d8fa:	683b      	ldr	r3, [r7, #0]
 800d8fc:	685a      	ldr	r2, [r3, #4]
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	697a      	ldr	r2, [r7, #20]
 800d906:	621a      	str	r2, [r3, #32]
}
 800d908:	bf00      	nop
 800d90a:	371c      	adds	r7, #28
 800d90c:	46bd      	mov	sp, r7
 800d90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d912:	4770      	bx	lr
 800d914:	fffeff8f 	.word	0xfffeff8f
 800d918:	40010000 	.word	0x40010000
 800d91c:	40010400 	.word	0x40010400
 800d920:	40014000 	.word	0x40014000
 800d924:	40014400 	.word	0x40014400
 800d928:	40014800 	.word	0x40014800

0800d92c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d92c:	b480      	push	{r7}
 800d92e:	b087      	sub	sp, #28
 800d930:	af00      	add	r7, sp, #0
 800d932:	6078      	str	r0, [r7, #4]
 800d934:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	6a1b      	ldr	r3, [r3, #32]
 800d93a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	6a1b      	ldr	r3, [r3, #32]
 800d940:	f023 0210 	bic.w	r2, r3, #16
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	685b      	ldr	r3, [r3, #4]
 800d94c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	699b      	ldr	r3, [r3, #24]
 800d952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d954:	68fa      	ldr	r2, [r7, #12]
 800d956:	4b34      	ldr	r3, [pc, #208]	; (800da28 <TIM_OC2_SetConfig+0xfc>)
 800d958:	4013      	ands	r3, r2
 800d95a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d962:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d964:	683b      	ldr	r3, [r7, #0]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	021b      	lsls	r3, r3, #8
 800d96a:	68fa      	ldr	r2, [r7, #12]
 800d96c:	4313      	orrs	r3, r2
 800d96e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d970:	697b      	ldr	r3, [r7, #20]
 800d972:	f023 0320 	bic.w	r3, r3, #32
 800d976:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d978:	683b      	ldr	r3, [r7, #0]
 800d97a:	689b      	ldr	r3, [r3, #8]
 800d97c:	011b      	lsls	r3, r3, #4
 800d97e:	697a      	ldr	r2, [r7, #20]
 800d980:	4313      	orrs	r3, r2
 800d982:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	4a29      	ldr	r2, [pc, #164]	; (800da2c <TIM_OC2_SetConfig+0x100>)
 800d988:	4293      	cmp	r3, r2
 800d98a:	d003      	beq.n	800d994 <TIM_OC2_SetConfig+0x68>
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	4a28      	ldr	r2, [pc, #160]	; (800da30 <TIM_OC2_SetConfig+0x104>)
 800d990:	4293      	cmp	r3, r2
 800d992:	d10d      	bne.n	800d9b0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d994:	697b      	ldr	r3, [r7, #20]
 800d996:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d99a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d99c:	683b      	ldr	r3, [r7, #0]
 800d99e:	68db      	ldr	r3, [r3, #12]
 800d9a0:	011b      	lsls	r3, r3, #4
 800d9a2:	697a      	ldr	r2, [r7, #20]
 800d9a4:	4313      	orrs	r3, r2
 800d9a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d9a8:	697b      	ldr	r3, [r7, #20]
 800d9aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d9ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	4a1e      	ldr	r2, [pc, #120]	; (800da2c <TIM_OC2_SetConfig+0x100>)
 800d9b4:	4293      	cmp	r3, r2
 800d9b6:	d00f      	beq.n	800d9d8 <TIM_OC2_SetConfig+0xac>
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	4a1d      	ldr	r2, [pc, #116]	; (800da30 <TIM_OC2_SetConfig+0x104>)
 800d9bc:	4293      	cmp	r3, r2
 800d9be:	d00b      	beq.n	800d9d8 <TIM_OC2_SetConfig+0xac>
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	4a1c      	ldr	r2, [pc, #112]	; (800da34 <TIM_OC2_SetConfig+0x108>)
 800d9c4:	4293      	cmp	r3, r2
 800d9c6:	d007      	beq.n	800d9d8 <TIM_OC2_SetConfig+0xac>
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	4a1b      	ldr	r2, [pc, #108]	; (800da38 <TIM_OC2_SetConfig+0x10c>)
 800d9cc:	4293      	cmp	r3, r2
 800d9ce:	d003      	beq.n	800d9d8 <TIM_OC2_SetConfig+0xac>
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	4a1a      	ldr	r2, [pc, #104]	; (800da3c <TIM_OC2_SetConfig+0x110>)
 800d9d4:	4293      	cmp	r3, r2
 800d9d6:	d113      	bne.n	800da00 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d9d8:	693b      	ldr	r3, [r7, #16]
 800d9da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d9de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d9e0:	693b      	ldr	r3, [r7, #16]
 800d9e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d9e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d9e8:	683b      	ldr	r3, [r7, #0]
 800d9ea:	695b      	ldr	r3, [r3, #20]
 800d9ec:	009b      	lsls	r3, r3, #2
 800d9ee:	693a      	ldr	r2, [r7, #16]
 800d9f0:	4313      	orrs	r3, r2
 800d9f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d9f4:	683b      	ldr	r3, [r7, #0]
 800d9f6:	699b      	ldr	r3, [r3, #24]
 800d9f8:	009b      	lsls	r3, r3, #2
 800d9fa:	693a      	ldr	r2, [r7, #16]
 800d9fc:	4313      	orrs	r3, r2
 800d9fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	693a      	ldr	r2, [r7, #16]
 800da04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	68fa      	ldr	r2, [r7, #12]
 800da0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800da0c:	683b      	ldr	r3, [r7, #0]
 800da0e:	685a      	ldr	r2, [r3, #4]
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	697a      	ldr	r2, [r7, #20]
 800da18:	621a      	str	r2, [r3, #32]
}
 800da1a:	bf00      	nop
 800da1c:	371c      	adds	r7, #28
 800da1e:	46bd      	mov	sp, r7
 800da20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da24:	4770      	bx	lr
 800da26:	bf00      	nop
 800da28:	feff8fff 	.word	0xfeff8fff
 800da2c:	40010000 	.word	0x40010000
 800da30:	40010400 	.word	0x40010400
 800da34:	40014000 	.word	0x40014000
 800da38:	40014400 	.word	0x40014400
 800da3c:	40014800 	.word	0x40014800

0800da40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800da40:	b480      	push	{r7}
 800da42:	b087      	sub	sp, #28
 800da44:	af00      	add	r7, sp, #0
 800da46:	6078      	str	r0, [r7, #4]
 800da48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	6a1b      	ldr	r3, [r3, #32]
 800da4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	6a1b      	ldr	r3, [r3, #32]
 800da54:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	685b      	ldr	r3, [r3, #4]
 800da60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	69db      	ldr	r3, [r3, #28]
 800da66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800da68:	68fa      	ldr	r2, [r7, #12]
 800da6a:	4b33      	ldr	r3, [pc, #204]	; (800db38 <TIM_OC3_SetConfig+0xf8>)
 800da6c:	4013      	ands	r3, r2
 800da6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	f023 0303 	bic.w	r3, r3, #3
 800da76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800da78:	683b      	ldr	r3, [r7, #0]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	68fa      	ldr	r2, [r7, #12]
 800da7e:	4313      	orrs	r3, r2
 800da80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800da82:	697b      	ldr	r3, [r7, #20]
 800da84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800da88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800da8a:	683b      	ldr	r3, [r7, #0]
 800da8c:	689b      	ldr	r3, [r3, #8]
 800da8e:	021b      	lsls	r3, r3, #8
 800da90:	697a      	ldr	r2, [r7, #20]
 800da92:	4313      	orrs	r3, r2
 800da94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	4a28      	ldr	r2, [pc, #160]	; (800db3c <TIM_OC3_SetConfig+0xfc>)
 800da9a:	4293      	cmp	r3, r2
 800da9c:	d003      	beq.n	800daa6 <TIM_OC3_SetConfig+0x66>
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	4a27      	ldr	r2, [pc, #156]	; (800db40 <TIM_OC3_SetConfig+0x100>)
 800daa2:	4293      	cmp	r3, r2
 800daa4:	d10d      	bne.n	800dac2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800daa6:	697b      	ldr	r3, [r7, #20]
 800daa8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800daac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800daae:	683b      	ldr	r3, [r7, #0]
 800dab0:	68db      	ldr	r3, [r3, #12]
 800dab2:	021b      	lsls	r3, r3, #8
 800dab4:	697a      	ldr	r2, [r7, #20]
 800dab6:	4313      	orrs	r3, r2
 800dab8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800daba:	697b      	ldr	r3, [r7, #20]
 800dabc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800dac0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	4a1d      	ldr	r2, [pc, #116]	; (800db3c <TIM_OC3_SetConfig+0xfc>)
 800dac6:	4293      	cmp	r3, r2
 800dac8:	d00f      	beq.n	800daea <TIM_OC3_SetConfig+0xaa>
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	4a1c      	ldr	r2, [pc, #112]	; (800db40 <TIM_OC3_SetConfig+0x100>)
 800dace:	4293      	cmp	r3, r2
 800dad0:	d00b      	beq.n	800daea <TIM_OC3_SetConfig+0xaa>
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	4a1b      	ldr	r2, [pc, #108]	; (800db44 <TIM_OC3_SetConfig+0x104>)
 800dad6:	4293      	cmp	r3, r2
 800dad8:	d007      	beq.n	800daea <TIM_OC3_SetConfig+0xaa>
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	4a1a      	ldr	r2, [pc, #104]	; (800db48 <TIM_OC3_SetConfig+0x108>)
 800dade:	4293      	cmp	r3, r2
 800dae0:	d003      	beq.n	800daea <TIM_OC3_SetConfig+0xaa>
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	4a19      	ldr	r2, [pc, #100]	; (800db4c <TIM_OC3_SetConfig+0x10c>)
 800dae6:	4293      	cmp	r3, r2
 800dae8:	d113      	bne.n	800db12 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800daea:	693b      	ldr	r3, [r7, #16]
 800daec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800daf0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800daf2:	693b      	ldr	r3, [r7, #16]
 800daf4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800daf8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800dafa:	683b      	ldr	r3, [r7, #0]
 800dafc:	695b      	ldr	r3, [r3, #20]
 800dafe:	011b      	lsls	r3, r3, #4
 800db00:	693a      	ldr	r2, [r7, #16]
 800db02:	4313      	orrs	r3, r2
 800db04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800db06:	683b      	ldr	r3, [r7, #0]
 800db08:	699b      	ldr	r3, [r3, #24]
 800db0a:	011b      	lsls	r3, r3, #4
 800db0c:	693a      	ldr	r2, [r7, #16]
 800db0e:	4313      	orrs	r3, r2
 800db10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	693a      	ldr	r2, [r7, #16]
 800db16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	68fa      	ldr	r2, [r7, #12]
 800db1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800db1e:	683b      	ldr	r3, [r7, #0]
 800db20:	685a      	ldr	r2, [r3, #4]
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	697a      	ldr	r2, [r7, #20]
 800db2a:	621a      	str	r2, [r3, #32]
}
 800db2c:	bf00      	nop
 800db2e:	371c      	adds	r7, #28
 800db30:	46bd      	mov	sp, r7
 800db32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db36:	4770      	bx	lr
 800db38:	fffeff8f 	.word	0xfffeff8f
 800db3c:	40010000 	.word	0x40010000
 800db40:	40010400 	.word	0x40010400
 800db44:	40014000 	.word	0x40014000
 800db48:	40014400 	.word	0x40014400
 800db4c:	40014800 	.word	0x40014800

0800db50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800db50:	b480      	push	{r7}
 800db52:	b087      	sub	sp, #28
 800db54:	af00      	add	r7, sp, #0
 800db56:	6078      	str	r0, [r7, #4]
 800db58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	6a1b      	ldr	r3, [r3, #32]
 800db5e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	6a1b      	ldr	r3, [r3, #32]
 800db64:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	685b      	ldr	r3, [r3, #4]
 800db70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	69db      	ldr	r3, [r3, #28]
 800db76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800db78:	68fa      	ldr	r2, [r7, #12]
 800db7a:	4b24      	ldr	r3, [pc, #144]	; (800dc0c <TIM_OC4_SetConfig+0xbc>)
 800db7c:	4013      	ands	r3, r2
 800db7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800db86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800db88:	683b      	ldr	r3, [r7, #0]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	021b      	lsls	r3, r3, #8
 800db8e:	68fa      	ldr	r2, [r7, #12]
 800db90:	4313      	orrs	r3, r2
 800db92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800db94:	693b      	ldr	r3, [r7, #16]
 800db96:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800db9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800db9c:	683b      	ldr	r3, [r7, #0]
 800db9e:	689b      	ldr	r3, [r3, #8]
 800dba0:	031b      	lsls	r3, r3, #12
 800dba2:	693a      	ldr	r2, [r7, #16]
 800dba4:	4313      	orrs	r3, r2
 800dba6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	4a19      	ldr	r2, [pc, #100]	; (800dc10 <TIM_OC4_SetConfig+0xc0>)
 800dbac:	4293      	cmp	r3, r2
 800dbae:	d00f      	beq.n	800dbd0 <TIM_OC4_SetConfig+0x80>
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	4a18      	ldr	r2, [pc, #96]	; (800dc14 <TIM_OC4_SetConfig+0xc4>)
 800dbb4:	4293      	cmp	r3, r2
 800dbb6:	d00b      	beq.n	800dbd0 <TIM_OC4_SetConfig+0x80>
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	4a17      	ldr	r2, [pc, #92]	; (800dc18 <TIM_OC4_SetConfig+0xc8>)
 800dbbc:	4293      	cmp	r3, r2
 800dbbe:	d007      	beq.n	800dbd0 <TIM_OC4_SetConfig+0x80>
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	4a16      	ldr	r2, [pc, #88]	; (800dc1c <TIM_OC4_SetConfig+0xcc>)
 800dbc4:	4293      	cmp	r3, r2
 800dbc6:	d003      	beq.n	800dbd0 <TIM_OC4_SetConfig+0x80>
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	4a15      	ldr	r2, [pc, #84]	; (800dc20 <TIM_OC4_SetConfig+0xd0>)
 800dbcc:	4293      	cmp	r3, r2
 800dbce:	d109      	bne.n	800dbe4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800dbd0:	697b      	ldr	r3, [r7, #20]
 800dbd2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800dbd6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800dbd8:	683b      	ldr	r3, [r7, #0]
 800dbda:	695b      	ldr	r3, [r3, #20]
 800dbdc:	019b      	lsls	r3, r3, #6
 800dbde:	697a      	ldr	r2, [r7, #20]
 800dbe0:	4313      	orrs	r3, r2
 800dbe2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	697a      	ldr	r2, [r7, #20]
 800dbe8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	68fa      	ldr	r2, [r7, #12]
 800dbee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800dbf0:	683b      	ldr	r3, [r7, #0]
 800dbf2:	685a      	ldr	r2, [r3, #4]
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	693a      	ldr	r2, [r7, #16]
 800dbfc:	621a      	str	r2, [r3, #32]
}
 800dbfe:	bf00      	nop
 800dc00:	371c      	adds	r7, #28
 800dc02:	46bd      	mov	sp, r7
 800dc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc08:	4770      	bx	lr
 800dc0a:	bf00      	nop
 800dc0c:	feff8fff 	.word	0xfeff8fff
 800dc10:	40010000 	.word	0x40010000
 800dc14:	40010400 	.word	0x40010400
 800dc18:	40014000 	.word	0x40014000
 800dc1c:	40014400 	.word	0x40014400
 800dc20:	40014800 	.word	0x40014800

0800dc24 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800dc24:	b480      	push	{r7}
 800dc26:	b087      	sub	sp, #28
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
 800dc2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	6a1b      	ldr	r3, [r3, #32]
 800dc32:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	6a1b      	ldr	r3, [r3, #32]
 800dc38:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	685b      	ldr	r3, [r3, #4]
 800dc44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800dc4c:	68fa      	ldr	r2, [r7, #12]
 800dc4e:	4b21      	ldr	r3, [pc, #132]	; (800dcd4 <TIM_OC5_SetConfig+0xb0>)
 800dc50:	4013      	ands	r3, r2
 800dc52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dc54:	683b      	ldr	r3, [r7, #0]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	68fa      	ldr	r2, [r7, #12]
 800dc5a:	4313      	orrs	r3, r2
 800dc5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800dc5e:	693b      	ldr	r3, [r7, #16]
 800dc60:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800dc64:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800dc66:	683b      	ldr	r3, [r7, #0]
 800dc68:	689b      	ldr	r3, [r3, #8]
 800dc6a:	041b      	lsls	r3, r3, #16
 800dc6c:	693a      	ldr	r2, [r7, #16]
 800dc6e:	4313      	orrs	r3, r2
 800dc70:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	4a18      	ldr	r2, [pc, #96]	; (800dcd8 <TIM_OC5_SetConfig+0xb4>)
 800dc76:	4293      	cmp	r3, r2
 800dc78:	d00f      	beq.n	800dc9a <TIM_OC5_SetConfig+0x76>
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	4a17      	ldr	r2, [pc, #92]	; (800dcdc <TIM_OC5_SetConfig+0xb8>)
 800dc7e:	4293      	cmp	r3, r2
 800dc80:	d00b      	beq.n	800dc9a <TIM_OC5_SetConfig+0x76>
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	4a16      	ldr	r2, [pc, #88]	; (800dce0 <TIM_OC5_SetConfig+0xbc>)
 800dc86:	4293      	cmp	r3, r2
 800dc88:	d007      	beq.n	800dc9a <TIM_OC5_SetConfig+0x76>
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	4a15      	ldr	r2, [pc, #84]	; (800dce4 <TIM_OC5_SetConfig+0xc0>)
 800dc8e:	4293      	cmp	r3, r2
 800dc90:	d003      	beq.n	800dc9a <TIM_OC5_SetConfig+0x76>
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	4a14      	ldr	r2, [pc, #80]	; (800dce8 <TIM_OC5_SetConfig+0xc4>)
 800dc96:	4293      	cmp	r3, r2
 800dc98:	d109      	bne.n	800dcae <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800dc9a:	697b      	ldr	r3, [r7, #20]
 800dc9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800dca0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800dca2:	683b      	ldr	r3, [r7, #0]
 800dca4:	695b      	ldr	r3, [r3, #20]
 800dca6:	021b      	lsls	r3, r3, #8
 800dca8:	697a      	ldr	r2, [r7, #20]
 800dcaa:	4313      	orrs	r3, r2
 800dcac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	697a      	ldr	r2, [r7, #20]
 800dcb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	68fa      	ldr	r2, [r7, #12]
 800dcb8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800dcba:	683b      	ldr	r3, [r7, #0]
 800dcbc:	685a      	ldr	r2, [r3, #4]
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	693a      	ldr	r2, [r7, #16]
 800dcc6:	621a      	str	r2, [r3, #32]
}
 800dcc8:	bf00      	nop
 800dcca:	371c      	adds	r7, #28
 800dccc:	46bd      	mov	sp, r7
 800dcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd2:	4770      	bx	lr
 800dcd4:	fffeff8f 	.word	0xfffeff8f
 800dcd8:	40010000 	.word	0x40010000
 800dcdc:	40010400 	.word	0x40010400
 800dce0:	40014000 	.word	0x40014000
 800dce4:	40014400 	.word	0x40014400
 800dce8:	40014800 	.word	0x40014800

0800dcec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800dcec:	b480      	push	{r7}
 800dcee:	b087      	sub	sp, #28
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	6078      	str	r0, [r7, #4]
 800dcf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	6a1b      	ldr	r3, [r3, #32]
 800dcfa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	6a1b      	ldr	r3, [r3, #32]
 800dd00:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	685b      	ldr	r3, [r3, #4]
 800dd0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800dd14:	68fa      	ldr	r2, [r7, #12]
 800dd16:	4b22      	ldr	r3, [pc, #136]	; (800dda0 <TIM_OC6_SetConfig+0xb4>)
 800dd18:	4013      	ands	r3, r2
 800dd1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dd1c:	683b      	ldr	r3, [r7, #0]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	021b      	lsls	r3, r3, #8
 800dd22:	68fa      	ldr	r2, [r7, #12]
 800dd24:	4313      	orrs	r3, r2
 800dd26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800dd28:	693b      	ldr	r3, [r7, #16]
 800dd2a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800dd2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800dd30:	683b      	ldr	r3, [r7, #0]
 800dd32:	689b      	ldr	r3, [r3, #8]
 800dd34:	051b      	lsls	r3, r3, #20
 800dd36:	693a      	ldr	r2, [r7, #16]
 800dd38:	4313      	orrs	r3, r2
 800dd3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	4a19      	ldr	r2, [pc, #100]	; (800dda4 <TIM_OC6_SetConfig+0xb8>)
 800dd40:	4293      	cmp	r3, r2
 800dd42:	d00f      	beq.n	800dd64 <TIM_OC6_SetConfig+0x78>
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	4a18      	ldr	r2, [pc, #96]	; (800dda8 <TIM_OC6_SetConfig+0xbc>)
 800dd48:	4293      	cmp	r3, r2
 800dd4a:	d00b      	beq.n	800dd64 <TIM_OC6_SetConfig+0x78>
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	4a17      	ldr	r2, [pc, #92]	; (800ddac <TIM_OC6_SetConfig+0xc0>)
 800dd50:	4293      	cmp	r3, r2
 800dd52:	d007      	beq.n	800dd64 <TIM_OC6_SetConfig+0x78>
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	4a16      	ldr	r2, [pc, #88]	; (800ddb0 <TIM_OC6_SetConfig+0xc4>)
 800dd58:	4293      	cmp	r3, r2
 800dd5a:	d003      	beq.n	800dd64 <TIM_OC6_SetConfig+0x78>
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	4a15      	ldr	r2, [pc, #84]	; (800ddb4 <TIM_OC6_SetConfig+0xc8>)
 800dd60:	4293      	cmp	r3, r2
 800dd62:	d109      	bne.n	800dd78 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800dd64:	697b      	ldr	r3, [r7, #20]
 800dd66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800dd6a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800dd6c:	683b      	ldr	r3, [r7, #0]
 800dd6e:	695b      	ldr	r3, [r3, #20]
 800dd70:	029b      	lsls	r3, r3, #10
 800dd72:	697a      	ldr	r2, [r7, #20]
 800dd74:	4313      	orrs	r3, r2
 800dd76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	697a      	ldr	r2, [r7, #20]
 800dd7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	68fa      	ldr	r2, [r7, #12]
 800dd82:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800dd84:	683b      	ldr	r3, [r7, #0]
 800dd86:	685a      	ldr	r2, [r3, #4]
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	693a      	ldr	r2, [r7, #16]
 800dd90:	621a      	str	r2, [r3, #32]
}
 800dd92:	bf00      	nop
 800dd94:	371c      	adds	r7, #28
 800dd96:	46bd      	mov	sp, r7
 800dd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd9c:	4770      	bx	lr
 800dd9e:	bf00      	nop
 800dda0:	feff8fff 	.word	0xfeff8fff
 800dda4:	40010000 	.word	0x40010000
 800dda8:	40010400 	.word	0x40010400
 800ddac:	40014000 	.word	0x40014000
 800ddb0:	40014400 	.word	0x40014400
 800ddb4:	40014800 	.word	0x40014800

0800ddb8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ddb8:	b480      	push	{r7}
 800ddba:	b087      	sub	sp, #28
 800ddbc:	af00      	add	r7, sp, #0
 800ddbe:	60f8      	str	r0, [r7, #12]
 800ddc0:	60b9      	str	r1, [r7, #8]
 800ddc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	6a1b      	ldr	r3, [r3, #32]
 800ddc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	6a1b      	ldr	r3, [r3, #32]
 800ddce:	f023 0201 	bic.w	r2, r3, #1
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	699b      	ldr	r3, [r3, #24]
 800ddda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800dddc:	693b      	ldr	r3, [r7, #16]
 800ddde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800dde2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	011b      	lsls	r3, r3, #4
 800dde8:	693a      	ldr	r2, [r7, #16]
 800ddea:	4313      	orrs	r3, r2
 800ddec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ddee:	697b      	ldr	r3, [r7, #20]
 800ddf0:	f023 030a 	bic.w	r3, r3, #10
 800ddf4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ddf6:	697a      	ldr	r2, [r7, #20]
 800ddf8:	68bb      	ldr	r3, [r7, #8]
 800ddfa:	4313      	orrs	r3, r2
 800ddfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	693a      	ldr	r2, [r7, #16]
 800de02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	697a      	ldr	r2, [r7, #20]
 800de08:	621a      	str	r2, [r3, #32]
}
 800de0a:	bf00      	nop
 800de0c:	371c      	adds	r7, #28
 800de0e:	46bd      	mov	sp, r7
 800de10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de14:	4770      	bx	lr

0800de16 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800de16:	b480      	push	{r7}
 800de18:	b087      	sub	sp, #28
 800de1a:	af00      	add	r7, sp, #0
 800de1c:	60f8      	str	r0, [r7, #12]
 800de1e:	60b9      	str	r1, [r7, #8]
 800de20:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	6a1b      	ldr	r3, [r3, #32]
 800de26:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	6a1b      	ldr	r3, [r3, #32]
 800de2c:	f023 0210 	bic.w	r2, r3, #16
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	699b      	ldr	r3, [r3, #24]
 800de38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800de3a:	693b      	ldr	r3, [r7, #16]
 800de3c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800de40:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	031b      	lsls	r3, r3, #12
 800de46:	693a      	ldr	r2, [r7, #16]
 800de48:	4313      	orrs	r3, r2
 800de4a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800de4c:	697b      	ldr	r3, [r7, #20]
 800de4e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800de52:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800de54:	68bb      	ldr	r3, [r7, #8]
 800de56:	011b      	lsls	r3, r3, #4
 800de58:	697a      	ldr	r2, [r7, #20]
 800de5a:	4313      	orrs	r3, r2
 800de5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	693a      	ldr	r2, [r7, #16]
 800de62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	697a      	ldr	r2, [r7, #20]
 800de68:	621a      	str	r2, [r3, #32]
}
 800de6a:	bf00      	nop
 800de6c:	371c      	adds	r7, #28
 800de6e:	46bd      	mov	sp, r7
 800de70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de74:	4770      	bx	lr
	...

0800de78 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800de78:	b480      	push	{r7}
 800de7a:	b085      	sub	sp, #20
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	6078      	str	r0, [r7, #4]
 800de80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	689b      	ldr	r3, [r3, #8]
 800de86:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800de88:	68fa      	ldr	r2, [r7, #12]
 800de8a:	4b09      	ldr	r3, [pc, #36]	; (800deb0 <TIM_ITRx_SetConfig+0x38>)
 800de8c:	4013      	ands	r3, r2
 800de8e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800de90:	683a      	ldr	r2, [r7, #0]
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	4313      	orrs	r3, r2
 800de96:	f043 0307 	orr.w	r3, r3, #7
 800de9a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	68fa      	ldr	r2, [r7, #12]
 800dea0:	609a      	str	r2, [r3, #8]
}
 800dea2:	bf00      	nop
 800dea4:	3714      	adds	r7, #20
 800dea6:	46bd      	mov	sp, r7
 800dea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deac:	4770      	bx	lr
 800deae:	bf00      	nop
 800deb0:	ffcfff8f 	.word	0xffcfff8f

0800deb4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800deb4:	b480      	push	{r7}
 800deb6:	b087      	sub	sp, #28
 800deb8:	af00      	add	r7, sp, #0
 800deba:	60f8      	str	r0, [r7, #12]
 800debc:	60b9      	str	r1, [r7, #8]
 800debe:	607a      	str	r2, [r7, #4]
 800dec0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	689b      	ldr	r3, [r3, #8]
 800dec6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800dec8:	697b      	ldr	r3, [r7, #20]
 800deca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800dece:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ded0:	683b      	ldr	r3, [r7, #0]
 800ded2:	021a      	lsls	r2, r3, #8
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	431a      	orrs	r2, r3
 800ded8:	68bb      	ldr	r3, [r7, #8]
 800deda:	4313      	orrs	r3, r2
 800dedc:	697a      	ldr	r2, [r7, #20]
 800dede:	4313      	orrs	r3, r2
 800dee0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	697a      	ldr	r2, [r7, #20]
 800dee6:	609a      	str	r2, [r3, #8]
}
 800dee8:	bf00      	nop
 800deea:	371c      	adds	r7, #28
 800deec:	46bd      	mov	sp, r7
 800deee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def2:	4770      	bx	lr

0800def4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800def4:	b480      	push	{r7}
 800def6:	b087      	sub	sp, #28
 800def8:	af00      	add	r7, sp, #0
 800defa:	60f8      	str	r0, [r7, #12]
 800defc:	60b9      	str	r1, [r7, #8]
 800defe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800df00:	68bb      	ldr	r3, [r7, #8]
 800df02:	f003 031f 	and.w	r3, r3, #31
 800df06:	2201      	movs	r2, #1
 800df08:	fa02 f303 	lsl.w	r3, r2, r3
 800df0c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	6a1a      	ldr	r2, [r3, #32]
 800df12:	697b      	ldr	r3, [r7, #20]
 800df14:	43db      	mvns	r3, r3
 800df16:	401a      	ands	r2, r3
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	6a1a      	ldr	r2, [r3, #32]
 800df20:	68bb      	ldr	r3, [r7, #8]
 800df22:	f003 031f 	and.w	r3, r3, #31
 800df26:	6879      	ldr	r1, [r7, #4]
 800df28:	fa01 f303 	lsl.w	r3, r1, r3
 800df2c:	431a      	orrs	r2, r3
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	621a      	str	r2, [r3, #32]
}
 800df32:	bf00      	nop
 800df34:	371c      	adds	r7, #28
 800df36:	46bd      	mov	sp, r7
 800df38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df3c:	4770      	bx	lr
	...

0800df40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800df40:	b480      	push	{r7}
 800df42:	b085      	sub	sp, #20
 800df44:	af00      	add	r7, sp, #0
 800df46:	6078      	str	r0, [r7, #4]
 800df48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800df50:	2b01      	cmp	r3, #1
 800df52:	d101      	bne.n	800df58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800df54:	2302      	movs	r3, #2
 800df56:	e06d      	b.n	800e034 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	2201      	movs	r2, #1
 800df5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	2202      	movs	r2, #2
 800df64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	685b      	ldr	r3, [r3, #4]
 800df6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	689b      	ldr	r3, [r3, #8]
 800df76:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	4a30      	ldr	r2, [pc, #192]	; (800e040 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800df7e:	4293      	cmp	r3, r2
 800df80:	d004      	beq.n	800df8c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	4a2f      	ldr	r2, [pc, #188]	; (800e044 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800df88:	4293      	cmp	r3, r2
 800df8a:	d108      	bne.n	800df9e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800df92:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800df94:	683b      	ldr	r3, [r7, #0]
 800df96:	685b      	ldr	r3, [r3, #4]
 800df98:	68fa      	ldr	r2, [r7, #12]
 800df9a:	4313      	orrs	r3, r2
 800df9c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dfa4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800dfa6:	683b      	ldr	r3, [r7, #0]
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	68fa      	ldr	r2, [r7, #12]
 800dfac:	4313      	orrs	r3, r2
 800dfae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	68fa      	ldr	r2, [r7, #12]
 800dfb6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	4a20      	ldr	r2, [pc, #128]	; (800e040 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800dfbe:	4293      	cmp	r3, r2
 800dfc0:	d022      	beq.n	800e008 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dfca:	d01d      	beq.n	800e008 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	4a1d      	ldr	r2, [pc, #116]	; (800e048 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800dfd2:	4293      	cmp	r3, r2
 800dfd4:	d018      	beq.n	800e008 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	4a1c      	ldr	r2, [pc, #112]	; (800e04c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800dfdc:	4293      	cmp	r3, r2
 800dfde:	d013      	beq.n	800e008 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	4a1a      	ldr	r2, [pc, #104]	; (800e050 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800dfe6:	4293      	cmp	r3, r2
 800dfe8:	d00e      	beq.n	800e008 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	4a15      	ldr	r2, [pc, #84]	; (800e044 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800dff0:	4293      	cmp	r3, r2
 800dff2:	d009      	beq.n	800e008 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	4a16      	ldr	r2, [pc, #88]	; (800e054 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800dffa:	4293      	cmp	r3, r2
 800dffc:	d004      	beq.n	800e008 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	4a15      	ldr	r2, [pc, #84]	; (800e058 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e004:	4293      	cmp	r3, r2
 800e006:	d10c      	bne.n	800e022 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e008:	68bb      	ldr	r3, [r7, #8]
 800e00a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e00e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e010:	683b      	ldr	r3, [r7, #0]
 800e012:	689b      	ldr	r3, [r3, #8]
 800e014:	68ba      	ldr	r2, [r7, #8]
 800e016:	4313      	orrs	r3, r2
 800e018:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	68ba      	ldr	r2, [r7, #8]
 800e020:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	2201      	movs	r2, #1
 800e026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	2200      	movs	r2, #0
 800e02e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e032:	2300      	movs	r3, #0
}
 800e034:	4618      	mov	r0, r3
 800e036:	3714      	adds	r7, #20
 800e038:	46bd      	mov	sp, r7
 800e03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e03e:	4770      	bx	lr
 800e040:	40010000 	.word	0x40010000
 800e044:	40010400 	.word	0x40010400
 800e048:	40000400 	.word	0x40000400
 800e04c:	40000800 	.word	0x40000800
 800e050:	40000c00 	.word	0x40000c00
 800e054:	40001800 	.word	0x40001800
 800e058:	40014000 	.word	0x40014000

0800e05c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800e05c:	b480      	push	{r7}
 800e05e:	b085      	sub	sp, #20
 800e060:	af00      	add	r7, sp, #0
 800e062:	6078      	str	r0, [r7, #4]
 800e064:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800e066:	2300      	movs	r3, #0
 800e068:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e070:	2b01      	cmp	r3, #1
 800e072:	d101      	bne.n	800e078 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800e074:	2302      	movs	r3, #2
 800e076:	e065      	b.n	800e144 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	2201      	movs	r2, #1
 800e07c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800e086:	683b      	ldr	r3, [r7, #0]
 800e088:	68db      	ldr	r3, [r3, #12]
 800e08a:	4313      	orrs	r3, r2
 800e08c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e094:	683b      	ldr	r3, [r7, #0]
 800e096:	689b      	ldr	r3, [r3, #8]
 800e098:	4313      	orrs	r3, r2
 800e09a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800e0a2:	683b      	ldr	r3, [r7, #0]
 800e0a4:	685b      	ldr	r3, [r3, #4]
 800e0a6:	4313      	orrs	r3, r2
 800e0a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800e0b0:	683b      	ldr	r3, [r7, #0]
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	4313      	orrs	r3, r2
 800e0b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e0be:	683b      	ldr	r3, [r7, #0]
 800e0c0:	691b      	ldr	r3, [r3, #16]
 800e0c2:	4313      	orrs	r3, r2
 800e0c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800e0cc:	683b      	ldr	r3, [r7, #0]
 800e0ce:	695b      	ldr	r3, [r3, #20]
 800e0d0:	4313      	orrs	r3, r2
 800e0d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800e0da:	683b      	ldr	r3, [r7, #0]
 800e0dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0de:	4313      	orrs	r3, r2
 800e0e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800e0e8:	683b      	ldr	r3, [r7, #0]
 800e0ea:	699b      	ldr	r3, [r3, #24]
 800e0ec:	041b      	lsls	r3, r3, #16
 800e0ee:	4313      	orrs	r3, r2
 800e0f0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	4a16      	ldr	r2, [pc, #88]	; (800e150 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800e0f8:	4293      	cmp	r3, r2
 800e0fa:	d004      	beq.n	800e106 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	4a14      	ldr	r2, [pc, #80]	; (800e154 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800e102:	4293      	cmp	r3, r2
 800e104:	d115      	bne.n	800e132 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800e10c:	683b      	ldr	r3, [r7, #0]
 800e10e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e110:	051b      	lsls	r3, r3, #20
 800e112:	4313      	orrs	r3, r2
 800e114:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800e11c:	683b      	ldr	r3, [r7, #0]
 800e11e:	69db      	ldr	r3, [r3, #28]
 800e120:	4313      	orrs	r3, r2
 800e122:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800e12a:	683b      	ldr	r3, [r7, #0]
 800e12c:	6a1b      	ldr	r3, [r3, #32]
 800e12e:	4313      	orrs	r3, r2
 800e130:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	68fa      	ldr	r2, [r7, #12]
 800e138:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	2200      	movs	r2, #0
 800e13e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e142:	2300      	movs	r3, #0
}
 800e144:	4618      	mov	r0, r3
 800e146:	3714      	adds	r7, #20
 800e148:	46bd      	mov	sp, r7
 800e14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e14e:	4770      	bx	lr
 800e150:	40010000 	.word	0x40010000
 800e154:	40010400 	.word	0x40010400

0800e158 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e158:	b480      	push	{r7}
 800e15a:	b083      	sub	sp, #12
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e160:	bf00      	nop
 800e162:	370c      	adds	r7, #12
 800e164:	46bd      	mov	sp, r7
 800e166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e16a:	4770      	bx	lr

0800e16c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e16c:	b480      	push	{r7}
 800e16e:	b083      	sub	sp, #12
 800e170:	af00      	add	r7, sp, #0
 800e172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e174:	bf00      	nop
 800e176:	370c      	adds	r7, #12
 800e178:	46bd      	mov	sp, r7
 800e17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e17e:	4770      	bx	lr

0800e180 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e180:	b480      	push	{r7}
 800e182:	b083      	sub	sp, #12
 800e184:	af00      	add	r7, sp, #0
 800e186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e188:	bf00      	nop
 800e18a:	370c      	adds	r7, #12
 800e18c:	46bd      	mov	sp, r7
 800e18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e192:	4770      	bx	lr

0800e194 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e194:	b580      	push	{r7, lr}
 800e196:	b082      	sub	sp, #8
 800e198:	af00      	add	r7, sp, #0
 800e19a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d101      	bne.n	800e1a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e1a2:	2301      	movs	r3, #1
 800e1a4:	e042      	b.n	800e22c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d106      	bne.n	800e1be <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	2200      	movs	r2, #0
 800e1b4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e1b8:	6878      	ldr	r0, [r7, #4]
 800e1ba:	f7f4 fba9 	bl	8002910 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	2224      	movs	r2, #36	; 0x24
 800e1c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	681a      	ldr	r2, [r3, #0]
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	f022 0201 	bic.w	r2, r2, #1
 800e1d4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d002      	beq.n	800e1e4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800e1de:	6878      	ldr	r0, [r7, #4]
 800e1e0:	f001 fa44 	bl	800f66c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e1e4:	6878      	ldr	r0, [r7, #4]
 800e1e6:	f000 fcd9 	bl	800eb9c <UART_SetConfig>
 800e1ea:	4603      	mov	r3, r0
 800e1ec:	2b01      	cmp	r3, #1
 800e1ee:	d101      	bne.n	800e1f4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800e1f0:	2301      	movs	r3, #1
 800e1f2:	e01b      	b.n	800e22c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	685a      	ldr	r2, [r3, #4]
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e202:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	689a      	ldr	r2, [r3, #8]
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e212:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	681a      	ldr	r2, [r3, #0]
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	f042 0201 	orr.w	r2, r2, #1
 800e222:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e224:	6878      	ldr	r0, [r7, #4]
 800e226:	f001 fac3 	bl	800f7b0 <UART_CheckIdleState>
 800e22a:	4603      	mov	r3, r0
}
 800e22c:	4618      	mov	r0, r3
 800e22e:	3708      	adds	r7, #8
 800e230:	46bd      	mov	sp, r7
 800e232:	bd80      	pop	{r7, pc}

0800e234 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e234:	b580      	push	{r7, lr}
 800e236:	b08a      	sub	sp, #40	; 0x28
 800e238:	af02      	add	r7, sp, #8
 800e23a:	60f8      	str	r0, [r7, #12]
 800e23c:	60b9      	str	r1, [r7, #8]
 800e23e:	603b      	str	r3, [r7, #0]
 800e240:	4613      	mov	r3, r2
 800e242:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e24a:	2b20      	cmp	r3, #32
 800e24c:	d17b      	bne.n	800e346 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800e24e:	68bb      	ldr	r3, [r7, #8]
 800e250:	2b00      	cmp	r3, #0
 800e252:	d002      	beq.n	800e25a <HAL_UART_Transmit+0x26>
 800e254:	88fb      	ldrh	r3, [r7, #6]
 800e256:	2b00      	cmp	r3, #0
 800e258:	d101      	bne.n	800e25e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800e25a:	2301      	movs	r3, #1
 800e25c:	e074      	b.n	800e348 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	2200      	movs	r2, #0
 800e262:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	2221      	movs	r2, #33	; 0x21
 800e26a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e26e:	f7f4 fe89 	bl	8002f84 <HAL_GetTick>
 800e272:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	88fa      	ldrh	r2, [r7, #6]
 800e278:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	88fa      	ldrh	r2, [r7, #6]
 800e280:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	689b      	ldr	r3, [r3, #8]
 800e288:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e28c:	d108      	bne.n	800e2a0 <HAL_UART_Transmit+0x6c>
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	691b      	ldr	r3, [r3, #16]
 800e292:	2b00      	cmp	r3, #0
 800e294:	d104      	bne.n	800e2a0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800e296:	2300      	movs	r3, #0
 800e298:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e29a:	68bb      	ldr	r3, [r7, #8]
 800e29c:	61bb      	str	r3, [r7, #24]
 800e29e:	e003      	b.n	800e2a8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800e2a0:	68bb      	ldr	r3, [r7, #8]
 800e2a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e2a4:	2300      	movs	r3, #0
 800e2a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e2a8:	e030      	b.n	800e30c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e2aa:	683b      	ldr	r3, [r7, #0]
 800e2ac:	9300      	str	r3, [sp, #0]
 800e2ae:	697b      	ldr	r3, [r7, #20]
 800e2b0:	2200      	movs	r2, #0
 800e2b2:	2180      	movs	r1, #128	; 0x80
 800e2b4:	68f8      	ldr	r0, [r7, #12]
 800e2b6:	f001 fb25 	bl	800f904 <UART_WaitOnFlagUntilTimeout>
 800e2ba:	4603      	mov	r3, r0
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d005      	beq.n	800e2cc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	2220      	movs	r2, #32
 800e2c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800e2c8:	2303      	movs	r3, #3
 800e2ca:	e03d      	b.n	800e348 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800e2cc:	69fb      	ldr	r3, [r7, #28]
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d10b      	bne.n	800e2ea <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e2d2:	69bb      	ldr	r3, [r7, #24]
 800e2d4:	881b      	ldrh	r3, [r3, #0]
 800e2d6:	461a      	mov	r2, r3
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e2e0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800e2e2:	69bb      	ldr	r3, [r7, #24]
 800e2e4:	3302      	adds	r3, #2
 800e2e6:	61bb      	str	r3, [r7, #24]
 800e2e8:	e007      	b.n	800e2fa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e2ea:	69fb      	ldr	r3, [r7, #28]
 800e2ec:	781a      	ldrb	r2, [r3, #0]
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800e2f4:	69fb      	ldr	r3, [r7, #28]
 800e2f6:	3301      	adds	r3, #1
 800e2f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e300:	b29b      	uxth	r3, r3
 800e302:	3b01      	subs	r3, #1
 800e304:	b29a      	uxth	r2, r3
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e312:	b29b      	uxth	r3, r3
 800e314:	2b00      	cmp	r3, #0
 800e316:	d1c8      	bne.n	800e2aa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e318:	683b      	ldr	r3, [r7, #0]
 800e31a:	9300      	str	r3, [sp, #0]
 800e31c:	697b      	ldr	r3, [r7, #20]
 800e31e:	2200      	movs	r2, #0
 800e320:	2140      	movs	r1, #64	; 0x40
 800e322:	68f8      	ldr	r0, [r7, #12]
 800e324:	f001 faee 	bl	800f904 <UART_WaitOnFlagUntilTimeout>
 800e328:	4603      	mov	r3, r0
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d005      	beq.n	800e33a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	2220      	movs	r2, #32
 800e332:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800e336:	2303      	movs	r3, #3
 800e338:	e006      	b.n	800e348 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	2220      	movs	r2, #32
 800e33e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800e342:	2300      	movs	r3, #0
 800e344:	e000      	b.n	800e348 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800e346:	2302      	movs	r3, #2
  }
}
 800e348:	4618      	mov	r0, r3
 800e34a:	3720      	adds	r7, #32
 800e34c:	46bd      	mov	sp, r7
 800e34e:	bd80      	pop	{r7, pc}

0800e350 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e350:	b580      	push	{r7, lr}
 800e352:	b08a      	sub	sp, #40	; 0x28
 800e354:	af00      	add	r7, sp, #0
 800e356:	60f8      	str	r0, [r7, #12]
 800e358:	60b9      	str	r1, [r7, #8]
 800e35a:	4613      	mov	r3, r2
 800e35c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e364:	2b20      	cmp	r3, #32
 800e366:	d137      	bne.n	800e3d8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800e368:	68bb      	ldr	r3, [r7, #8]
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d002      	beq.n	800e374 <HAL_UART_Receive_IT+0x24>
 800e36e:	88fb      	ldrh	r3, [r7, #6]
 800e370:	2b00      	cmp	r3, #0
 800e372:	d101      	bne.n	800e378 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800e374:	2301      	movs	r3, #1
 800e376:	e030      	b.n	800e3da <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	2200      	movs	r2, #0
 800e37c:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	4a18      	ldr	r2, [pc, #96]	; (800e3e4 <HAL_UART_Receive_IT+0x94>)
 800e384:	4293      	cmp	r3, r2
 800e386:	d01f      	beq.n	800e3c8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	685b      	ldr	r3, [r3, #4]
 800e38e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e392:	2b00      	cmp	r3, #0
 800e394:	d018      	beq.n	800e3c8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e39c:	697b      	ldr	r3, [r7, #20]
 800e39e:	e853 3f00 	ldrex	r3, [r3]
 800e3a2:	613b      	str	r3, [r7, #16]
   return(result);
 800e3a4:	693b      	ldr	r3, [r7, #16]
 800e3a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e3aa:	627b      	str	r3, [r7, #36]	; 0x24
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	461a      	mov	r2, r3
 800e3b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3b4:	623b      	str	r3, [r7, #32]
 800e3b6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3b8:	69f9      	ldr	r1, [r7, #28]
 800e3ba:	6a3a      	ldr	r2, [r7, #32]
 800e3bc:	e841 2300 	strex	r3, r2, [r1]
 800e3c0:	61bb      	str	r3, [r7, #24]
   return(result);
 800e3c2:	69bb      	ldr	r3, [r7, #24]
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d1e6      	bne.n	800e396 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800e3c8:	88fb      	ldrh	r3, [r7, #6]
 800e3ca:	461a      	mov	r2, r3
 800e3cc:	68b9      	ldr	r1, [r7, #8]
 800e3ce:	68f8      	ldr	r0, [r7, #12]
 800e3d0:	f001 fb06 	bl	800f9e0 <UART_Start_Receive_IT>
 800e3d4:	4603      	mov	r3, r0
 800e3d6:	e000      	b.n	800e3da <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800e3d8:	2302      	movs	r3, #2
  }
}
 800e3da:	4618      	mov	r0, r3
 800e3dc:	3728      	adds	r7, #40	; 0x28
 800e3de:	46bd      	mov	sp, r7
 800e3e0:	bd80      	pop	{r7, pc}
 800e3e2:	bf00      	nop
 800e3e4:	58000c00 	.word	0x58000c00

0800e3e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e3e8:	b580      	push	{r7, lr}
 800e3ea:	b0ba      	sub	sp, #232	; 0xe8
 800e3ec:	af00      	add	r7, sp, #0
 800e3ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	69db      	ldr	r3, [r3, #28]
 800e3f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	689b      	ldr	r3, [r3, #8]
 800e40a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e40e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800e412:	f640 030f 	movw	r3, #2063	; 0x80f
 800e416:	4013      	ands	r3, r2
 800e418:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800e41c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e420:	2b00      	cmp	r3, #0
 800e422:	d11b      	bne.n	800e45c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e424:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e428:	f003 0320 	and.w	r3, r3, #32
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d015      	beq.n	800e45c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e430:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e434:	f003 0320 	and.w	r3, r3, #32
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d105      	bne.n	800e448 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e43c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e440:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e444:	2b00      	cmp	r3, #0
 800e446:	d009      	beq.n	800e45c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	f000 8377 	beq.w	800eb40 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e456:	6878      	ldr	r0, [r7, #4]
 800e458:	4798      	blx	r3
      }
      return;
 800e45a:	e371      	b.n	800eb40 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e45c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e460:	2b00      	cmp	r3, #0
 800e462:	f000 8123 	beq.w	800e6ac <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800e466:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e46a:	4b8d      	ldr	r3, [pc, #564]	; (800e6a0 <HAL_UART_IRQHandler+0x2b8>)
 800e46c:	4013      	ands	r3, r2
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d106      	bne.n	800e480 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800e472:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800e476:	4b8b      	ldr	r3, [pc, #556]	; (800e6a4 <HAL_UART_IRQHandler+0x2bc>)
 800e478:	4013      	ands	r3, r2
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	f000 8116 	beq.w	800e6ac <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e480:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e484:	f003 0301 	and.w	r3, r3, #1
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d011      	beq.n	800e4b0 <HAL_UART_IRQHandler+0xc8>
 800e48c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e494:	2b00      	cmp	r3, #0
 800e496:	d00b      	beq.n	800e4b0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	2201      	movs	r2, #1
 800e49e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e4a6:	f043 0201 	orr.w	r2, r3, #1
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e4b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e4b4:	f003 0302 	and.w	r3, r3, #2
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d011      	beq.n	800e4e0 <HAL_UART_IRQHandler+0xf8>
 800e4bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e4c0:	f003 0301 	and.w	r3, r3, #1
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d00b      	beq.n	800e4e0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	2202      	movs	r2, #2
 800e4ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e4d6:	f043 0204 	orr.w	r2, r3, #4
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e4e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e4e4:	f003 0304 	and.w	r3, r3, #4
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d011      	beq.n	800e510 <HAL_UART_IRQHandler+0x128>
 800e4ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e4f0:	f003 0301 	and.w	r3, r3, #1
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d00b      	beq.n	800e510 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	2204      	movs	r2, #4
 800e4fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e506:	f043 0202 	orr.w	r2, r3, #2
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e510:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e514:	f003 0308 	and.w	r3, r3, #8
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d017      	beq.n	800e54c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e51c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e520:	f003 0320 	and.w	r3, r3, #32
 800e524:	2b00      	cmp	r3, #0
 800e526:	d105      	bne.n	800e534 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e528:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e52c:	4b5c      	ldr	r3, [pc, #368]	; (800e6a0 <HAL_UART_IRQHandler+0x2b8>)
 800e52e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e530:	2b00      	cmp	r3, #0
 800e532:	d00b      	beq.n	800e54c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	2208      	movs	r2, #8
 800e53a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e542:	f043 0208 	orr.w	r2, r3, #8
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e54c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e550:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e554:	2b00      	cmp	r3, #0
 800e556:	d012      	beq.n	800e57e <HAL_UART_IRQHandler+0x196>
 800e558:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e55c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e560:	2b00      	cmp	r3, #0
 800e562:	d00c      	beq.n	800e57e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e56c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e574:	f043 0220 	orr.w	r2, r3, #32
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e584:	2b00      	cmp	r3, #0
 800e586:	f000 82dd 	beq.w	800eb44 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e58a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e58e:	f003 0320 	and.w	r3, r3, #32
 800e592:	2b00      	cmp	r3, #0
 800e594:	d013      	beq.n	800e5be <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e596:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e59a:	f003 0320 	and.w	r3, r3, #32
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d105      	bne.n	800e5ae <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e5a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e5a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d007      	beq.n	800e5be <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d003      	beq.n	800e5be <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e5ba:	6878      	ldr	r0, [r7, #4]
 800e5bc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e5c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	689b      	ldr	r3, [r3, #8]
 800e5ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e5d2:	2b40      	cmp	r3, #64	; 0x40
 800e5d4:	d005      	beq.n	800e5e2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e5d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e5da:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d054      	beq.n	800e68c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e5e2:	6878      	ldr	r0, [r7, #4]
 800e5e4:	f001 fb1e 	bl	800fc24 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	689b      	ldr	r3, [r3, #8]
 800e5ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e5f2:	2b40      	cmp	r3, #64	; 0x40
 800e5f4:	d146      	bne.n	800e684 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	3308      	adds	r3, #8
 800e5fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e600:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e604:	e853 3f00 	ldrex	r3, [r3]
 800e608:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800e60c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e610:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e614:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	3308      	adds	r3, #8
 800e61e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e622:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e626:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e62a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e62e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e632:	e841 2300 	strex	r3, r2, [r1]
 800e636:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e63a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d1d9      	bne.n	800e5f6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d017      	beq.n	800e67c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e652:	4a15      	ldr	r2, [pc, #84]	; (800e6a8 <HAL_UART_IRQHandler+0x2c0>)
 800e654:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e65c:	4618      	mov	r0, r3
 800e65e:	f7f7 fe9d 	bl	800639c <HAL_DMA_Abort_IT>
 800e662:	4603      	mov	r3, r0
 800e664:	2b00      	cmp	r3, #0
 800e666:	d019      	beq.n	800e69c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e66e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e670:	687a      	ldr	r2, [r7, #4]
 800e672:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800e676:	4610      	mov	r0, r2
 800e678:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e67a:	e00f      	b.n	800e69c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e67c:	6878      	ldr	r0, [r7, #4]
 800e67e:	f000 fa77 	bl	800eb70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e682:	e00b      	b.n	800e69c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e684:	6878      	ldr	r0, [r7, #4]
 800e686:	f000 fa73 	bl	800eb70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e68a:	e007      	b.n	800e69c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e68c:	6878      	ldr	r0, [r7, #4]
 800e68e:	f000 fa6f 	bl	800eb70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	2200      	movs	r2, #0
 800e696:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800e69a:	e253      	b.n	800eb44 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e69c:	bf00      	nop
    return;
 800e69e:	e251      	b.n	800eb44 <HAL_UART_IRQHandler+0x75c>
 800e6a0:	10000001 	.word	0x10000001
 800e6a4:	04000120 	.word	0x04000120
 800e6a8:	0800fcf1 	.word	0x0800fcf1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e6b0:	2b01      	cmp	r3, #1
 800e6b2:	f040 81e7 	bne.w	800ea84 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e6b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e6ba:	f003 0310 	and.w	r3, r3, #16
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	f000 81e0 	beq.w	800ea84 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e6c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e6c8:	f003 0310 	and.w	r3, r3, #16
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	f000 81d9 	beq.w	800ea84 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	2210      	movs	r2, #16
 800e6d8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	689b      	ldr	r3, [r3, #8]
 800e6e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e6e4:	2b40      	cmp	r3, #64	; 0x40
 800e6e6:	f040 8151 	bne.w	800e98c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	4a96      	ldr	r2, [pc, #600]	; (800e94c <HAL_UART_IRQHandler+0x564>)
 800e6f4:	4293      	cmp	r3, r2
 800e6f6:	d068      	beq.n	800e7ca <HAL_UART_IRQHandler+0x3e2>
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	4a93      	ldr	r2, [pc, #588]	; (800e950 <HAL_UART_IRQHandler+0x568>)
 800e702:	4293      	cmp	r3, r2
 800e704:	d061      	beq.n	800e7ca <HAL_UART_IRQHandler+0x3e2>
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	4a91      	ldr	r2, [pc, #580]	; (800e954 <HAL_UART_IRQHandler+0x56c>)
 800e710:	4293      	cmp	r3, r2
 800e712:	d05a      	beq.n	800e7ca <HAL_UART_IRQHandler+0x3e2>
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	4a8e      	ldr	r2, [pc, #568]	; (800e958 <HAL_UART_IRQHandler+0x570>)
 800e71e:	4293      	cmp	r3, r2
 800e720:	d053      	beq.n	800e7ca <HAL_UART_IRQHandler+0x3e2>
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	4a8c      	ldr	r2, [pc, #560]	; (800e95c <HAL_UART_IRQHandler+0x574>)
 800e72c:	4293      	cmp	r3, r2
 800e72e:	d04c      	beq.n	800e7ca <HAL_UART_IRQHandler+0x3e2>
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	4a89      	ldr	r2, [pc, #548]	; (800e960 <HAL_UART_IRQHandler+0x578>)
 800e73a:	4293      	cmp	r3, r2
 800e73c:	d045      	beq.n	800e7ca <HAL_UART_IRQHandler+0x3e2>
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	4a87      	ldr	r2, [pc, #540]	; (800e964 <HAL_UART_IRQHandler+0x57c>)
 800e748:	4293      	cmp	r3, r2
 800e74a:	d03e      	beq.n	800e7ca <HAL_UART_IRQHandler+0x3e2>
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	4a84      	ldr	r2, [pc, #528]	; (800e968 <HAL_UART_IRQHandler+0x580>)
 800e756:	4293      	cmp	r3, r2
 800e758:	d037      	beq.n	800e7ca <HAL_UART_IRQHandler+0x3e2>
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	4a82      	ldr	r2, [pc, #520]	; (800e96c <HAL_UART_IRQHandler+0x584>)
 800e764:	4293      	cmp	r3, r2
 800e766:	d030      	beq.n	800e7ca <HAL_UART_IRQHandler+0x3e2>
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	4a7f      	ldr	r2, [pc, #508]	; (800e970 <HAL_UART_IRQHandler+0x588>)
 800e772:	4293      	cmp	r3, r2
 800e774:	d029      	beq.n	800e7ca <HAL_UART_IRQHandler+0x3e2>
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	4a7d      	ldr	r2, [pc, #500]	; (800e974 <HAL_UART_IRQHandler+0x58c>)
 800e780:	4293      	cmp	r3, r2
 800e782:	d022      	beq.n	800e7ca <HAL_UART_IRQHandler+0x3e2>
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	4a7a      	ldr	r2, [pc, #488]	; (800e978 <HAL_UART_IRQHandler+0x590>)
 800e78e:	4293      	cmp	r3, r2
 800e790:	d01b      	beq.n	800e7ca <HAL_UART_IRQHandler+0x3e2>
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	4a78      	ldr	r2, [pc, #480]	; (800e97c <HAL_UART_IRQHandler+0x594>)
 800e79c:	4293      	cmp	r3, r2
 800e79e:	d014      	beq.n	800e7ca <HAL_UART_IRQHandler+0x3e2>
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	4a75      	ldr	r2, [pc, #468]	; (800e980 <HAL_UART_IRQHandler+0x598>)
 800e7aa:	4293      	cmp	r3, r2
 800e7ac:	d00d      	beq.n	800e7ca <HAL_UART_IRQHandler+0x3e2>
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	4a73      	ldr	r2, [pc, #460]	; (800e984 <HAL_UART_IRQHandler+0x59c>)
 800e7b8:	4293      	cmp	r3, r2
 800e7ba:	d006      	beq.n	800e7ca <HAL_UART_IRQHandler+0x3e2>
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	4a70      	ldr	r2, [pc, #448]	; (800e988 <HAL_UART_IRQHandler+0x5a0>)
 800e7c6:	4293      	cmp	r3, r2
 800e7c8:	d106      	bne.n	800e7d8 <HAL_UART_IRQHandler+0x3f0>
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	685b      	ldr	r3, [r3, #4]
 800e7d4:	b29b      	uxth	r3, r3
 800e7d6:	e005      	b.n	800e7e4 <HAL_UART_IRQHandler+0x3fc>
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	685b      	ldr	r3, [r3, #4]
 800e7e2:	b29b      	uxth	r3, r3
 800e7e4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e7e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	f000 81ab 	beq.w	800eb48 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e7f8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e7fc:	429a      	cmp	r2, r3
 800e7fe:	f080 81a3 	bcs.w	800eb48 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e808:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e812:	69db      	ldr	r3, [r3, #28]
 800e814:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e818:	f000 8087 	beq.w	800e92a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e824:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e828:	e853 3f00 	ldrex	r3, [r3]
 800e82c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e830:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e834:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e838:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	461a      	mov	r2, r3
 800e842:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e846:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e84a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e84e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e852:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e856:	e841 2300 	strex	r3, r2, [r1]
 800e85a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e85e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e862:	2b00      	cmp	r3, #0
 800e864:	d1da      	bne.n	800e81c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	3308      	adds	r3, #8
 800e86c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e86e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e870:	e853 3f00 	ldrex	r3, [r3]
 800e874:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e876:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e878:	f023 0301 	bic.w	r3, r3, #1
 800e87c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	3308      	adds	r3, #8
 800e886:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e88a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e88e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e890:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e892:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e896:	e841 2300 	strex	r3, r2, [r1]
 800e89a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e89c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d1e1      	bne.n	800e866 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	3308      	adds	r3, #8
 800e8a8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e8ac:	e853 3f00 	ldrex	r3, [r3]
 800e8b0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e8b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e8b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e8b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	3308      	adds	r3, #8
 800e8c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e8c6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e8c8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8ca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e8cc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e8ce:	e841 2300 	strex	r3, r2, [r1]
 800e8d2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e8d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d1e3      	bne.n	800e8a2 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	2220      	movs	r2, #32
 800e8de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	2200      	movs	r2, #0
 800e8e6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e8f0:	e853 3f00 	ldrex	r3, [r3]
 800e8f4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e8f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e8f8:	f023 0310 	bic.w	r3, r3, #16
 800e8fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	461a      	mov	r2, r3
 800e906:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e90a:	65bb      	str	r3, [r7, #88]	; 0x58
 800e90c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e90e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e910:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e912:	e841 2300 	strex	r3, r2, [r1]
 800e916:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e918:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d1e4      	bne.n	800e8e8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e924:	4618      	mov	r0, r3
 800e926:	f7f7 fa1b 	bl	8005d60 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	2202      	movs	r2, #2
 800e92e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e93c:	b29b      	uxth	r3, r3
 800e93e:	1ad3      	subs	r3, r2, r3
 800e940:	b29b      	uxth	r3, r3
 800e942:	4619      	mov	r1, r3
 800e944:	6878      	ldr	r0, [r7, #4]
 800e946:	f000 f91d 	bl	800eb84 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e94a:	e0fd      	b.n	800eb48 <HAL_UART_IRQHandler+0x760>
 800e94c:	40020010 	.word	0x40020010
 800e950:	40020028 	.word	0x40020028
 800e954:	40020040 	.word	0x40020040
 800e958:	40020058 	.word	0x40020058
 800e95c:	40020070 	.word	0x40020070
 800e960:	40020088 	.word	0x40020088
 800e964:	400200a0 	.word	0x400200a0
 800e968:	400200b8 	.word	0x400200b8
 800e96c:	40020410 	.word	0x40020410
 800e970:	40020428 	.word	0x40020428
 800e974:	40020440 	.word	0x40020440
 800e978:	40020458 	.word	0x40020458
 800e97c:	40020470 	.word	0x40020470
 800e980:	40020488 	.word	0x40020488
 800e984:	400204a0 	.word	0x400204a0
 800e988:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e998:	b29b      	uxth	r3, r3
 800e99a:	1ad3      	subs	r3, r2, r3
 800e99c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e9a6:	b29b      	uxth	r3, r3
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	f000 80cf 	beq.w	800eb4c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800e9ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	f000 80ca 	beq.w	800eb4c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9c0:	e853 3f00 	ldrex	r3, [r3]
 800e9c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e9c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e9cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	461a      	mov	r2, r3
 800e9d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e9da:	647b      	str	r3, [r7, #68]	; 0x44
 800e9dc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e9e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e9e2:	e841 2300 	strex	r3, r2, [r1]
 800e9e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e9e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d1e4      	bne.n	800e9b8 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	3308      	adds	r3, #8
 800e9f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9f8:	e853 3f00 	ldrex	r3, [r3]
 800e9fc:	623b      	str	r3, [r7, #32]
   return(result);
 800e9fe:	6a3a      	ldr	r2, [r7, #32]
 800ea00:	4b55      	ldr	r3, [pc, #340]	; (800eb58 <HAL_UART_IRQHandler+0x770>)
 800ea02:	4013      	ands	r3, r2
 800ea04:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	3308      	adds	r3, #8
 800ea0e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ea12:	633a      	str	r2, [r7, #48]	; 0x30
 800ea14:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ea18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea1a:	e841 2300 	strex	r3, r2, [r1]
 800ea1e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ea20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d1e3      	bne.n	800e9ee <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	2220      	movs	r2, #32
 800ea2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	2200      	movs	r2, #0
 800ea32:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	2200      	movs	r2, #0
 800ea38:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea40:	693b      	ldr	r3, [r7, #16]
 800ea42:	e853 3f00 	ldrex	r3, [r3]
 800ea46:	60fb      	str	r3, [r7, #12]
   return(result);
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	f023 0310 	bic.w	r3, r3, #16
 800ea4e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	461a      	mov	r2, r3
 800ea58:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ea5c:	61fb      	str	r3, [r7, #28]
 800ea5e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea60:	69b9      	ldr	r1, [r7, #24]
 800ea62:	69fa      	ldr	r2, [r7, #28]
 800ea64:	e841 2300 	strex	r3, r2, [r1]
 800ea68:	617b      	str	r3, [r7, #20]
   return(result);
 800ea6a:	697b      	ldr	r3, [r7, #20]
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d1e4      	bne.n	800ea3a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	2202      	movs	r2, #2
 800ea74:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ea76:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ea7a:	4619      	mov	r1, r3
 800ea7c:	6878      	ldr	r0, [r7, #4]
 800ea7e:	f000 f881 	bl	800eb84 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ea82:	e063      	b.n	800eb4c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ea84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ea88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d00e      	beq.n	800eaae <HAL_UART_IRQHandler+0x6c6>
 800ea90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ea94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d008      	beq.n	800eaae <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800eaa4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800eaa6:	6878      	ldr	r0, [r7, #4]
 800eaa8:	f001 fe80 	bl	80107ac <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800eaac:	e051      	b.n	800eb52 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800eaae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d014      	beq.n	800eae4 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800eaba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eabe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d105      	bne.n	800ead2 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800eac6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800eaca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d008      	beq.n	800eae4 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d03a      	beq.n	800eb50 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eade:	6878      	ldr	r0, [r7, #4]
 800eae0:	4798      	blx	r3
    }
    return;
 800eae2:	e035      	b.n	800eb50 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800eae4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d009      	beq.n	800eb04 <HAL_UART_IRQHandler+0x71c>
 800eaf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eaf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d003      	beq.n	800eb04 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800eafc:	6878      	ldr	r0, [r7, #4]
 800eafe:	f001 f90d 	bl	800fd1c <UART_EndTransmit_IT>
    return;
 800eb02:	e026      	b.n	800eb52 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800eb04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eb08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d009      	beq.n	800eb24 <HAL_UART_IRQHandler+0x73c>
 800eb10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eb14:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d003      	beq.n	800eb24 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800eb1c:	6878      	ldr	r0, [r7, #4]
 800eb1e:	f001 fe59 	bl	80107d4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800eb22:	e016      	b.n	800eb52 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800eb24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eb28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d010      	beq.n	800eb52 <HAL_UART_IRQHandler+0x76a>
 800eb30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	da0c      	bge.n	800eb52 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800eb38:	6878      	ldr	r0, [r7, #4]
 800eb3a:	f001 fe41 	bl	80107c0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800eb3e:	e008      	b.n	800eb52 <HAL_UART_IRQHandler+0x76a>
      return;
 800eb40:	bf00      	nop
 800eb42:	e006      	b.n	800eb52 <HAL_UART_IRQHandler+0x76a>
    return;
 800eb44:	bf00      	nop
 800eb46:	e004      	b.n	800eb52 <HAL_UART_IRQHandler+0x76a>
      return;
 800eb48:	bf00      	nop
 800eb4a:	e002      	b.n	800eb52 <HAL_UART_IRQHandler+0x76a>
      return;
 800eb4c:	bf00      	nop
 800eb4e:	e000      	b.n	800eb52 <HAL_UART_IRQHandler+0x76a>
    return;
 800eb50:	bf00      	nop
  }
}
 800eb52:	37e8      	adds	r7, #232	; 0xe8
 800eb54:	46bd      	mov	sp, r7
 800eb56:	bd80      	pop	{r7, pc}
 800eb58:	effffffe 	.word	0xeffffffe

0800eb5c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800eb5c:	b480      	push	{r7}
 800eb5e:	b083      	sub	sp, #12
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800eb64:	bf00      	nop
 800eb66:	370c      	adds	r7, #12
 800eb68:	46bd      	mov	sp, r7
 800eb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb6e:	4770      	bx	lr

0800eb70 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800eb70:	b480      	push	{r7}
 800eb72:	b083      	sub	sp, #12
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800eb78:	bf00      	nop
 800eb7a:	370c      	adds	r7, #12
 800eb7c:	46bd      	mov	sp, r7
 800eb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb82:	4770      	bx	lr

0800eb84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800eb84:	b480      	push	{r7}
 800eb86:	b083      	sub	sp, #12
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	6078      	str	r0, [r7, #4]
 800eb8c:	460b      	mov	r3, r1
 800eb8e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800eb90:	bf00      	nop
 800eb92:	370c      	adds	r7, #12
 800eb94:	46bd      	mov	sp, r7
 800eb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb9a:	4770      	bx	lr

0800eb9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800eb9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800eba0:	b092      	sub	sp, #72	; 0x48
 800eba2:	af00      	add	r7, sp, #0
 800eba4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800eba6:	2300      	movs	r3, #0
 800eba8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ebac:	697b      	ldr	r3, [r7, #20]
 800ebae:	689a      	ldr	r2, [r3, #8]
 800ebb0:	697b      	ldr	r3, [r7, #20]
 800ebb2:	691b      	ldr	r3, [r3, #16]
 800ebb4:	431a      	orrs	r2, r3
 800ebb6:	697b      	ldr	r3, [r7, #20]
 800ebb8:	695b      	ldr	r3, [r3, #20]
 800ebba:	431a      	orrs	r2, r3
 800ebbc:	697b      	ldr	r3, [r7, #20]
 800ebbe:	69db      	ldr	r3, [r3, #28]
 800ebc0:	4313      	orrs	r3, r2
 800ebc2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ebc4:	697b      	ldr	r3, [r7, #20]
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	681a      	ldr	r2, [r3, #0]
 800ebca:	4bbe      	ldr	r3, [pc, #760]	; (800eec4 <UART_SetConfig+0x328>)
 800ebcc:	4013      	ands	r3, r2
 800ebce:	697a      	ldr	r2, [r7, #20]
 800ebd0:	6812      	ldr	r2, [r2, #0]
 800ebd2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ebd4:	430b      	orrs	r3, r1
 800ebd6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ebd8:	697b      	ldr	r3, [r7, #20]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	685b      	ldr	r3, [r3, #4]
 800ebde:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ebe2:	697b      	ldr	r3, [r7, #20]
 800ebe4:	68da      	ldr	r2, [r3, #12]
 800ebe6:	697b      	ldr	r3, [r7, #20]
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	430a      	orrs	r2, r1
 800ebec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ebee:	697b      	ldr	r3, [r7, #20]
 800ebf0:	699b      	ldr	r3, [r3, #24]
 800ebf2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ebf4:	697b      	ldr	r3, [r7, #20]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	4ab3      	ldr	r2, [pc, #716]	; (800eec8 <UART_SetConfig+0x32c>)
 800ebfa:	4293      	cmp	r3, r2
 800ebfc:	d004      	beq.n	800ec08 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ebfe:	697b      	ldr	r3, [r7, #20]
 800ec00:	6a1b      	ldr	r3, [r3, #32]
 800ec02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ec04:	4313      	orrs	r3, r2
 800ec06:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ec08:	697b      	ldr	r3, [r7, #20]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	689a      	ldr	r2, [r3, #8]
 800ec0e:	4baf      	ldr	r3, [pc, #700]	; (800eecc <UART_SetConfig+0x330>)
 800ec10:	4013      	ands	r3, r2
 800ec12:	697a      	ldr	r2, [r7, #20]
 800ec14:	6812      	ldr	r2, [r2, #0]
 800ec16:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ec18:	430b      	orrs	r3, r1
 800ec1a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ec1c:	697b      	ldr	r3, [r7, #20]
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec22:	f023 010f 	bic.w	r1, r3, #15
 800ec26:	697b      	ldr	r3, [r7, #20]
 800ec28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ec2a:	697b      	ldr	r3, [r7, #20]
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	430a      	orrs	r2, r1
 800ec30:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ec32:	697b      	ldr	r3, [r7, #20]
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	4aa6      	ldr	r2, [pc, #664]	; (800eed0 <UART_SetConfig+0x334>)
 800ec38:	4293      	cmp	r3, r2
 800ec3a:	d177      	bne.n	800ed2c <UART_SetConfig+0x190>
 800ec3c:	4ba5      	ldr	r3, [pc, #660]	; (800eed4 <UART_SetConfig+0x338>)
 800ec3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ec44:	2b28      	cmp	r3, #40	; 0x28
 800ec46:	d86d      	bhi.n	800ed24 <UART_SetConfig+0x188>
 800ec48:	a201      	add	r2, pc, #4	; (adr r2, 800ec50 <UART_SetConfig+0xb4>)
 800ec4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec4e:	bf00      	nop
 800ec50:	0800ecf5 	.word	0x0800ecf5
 800ec54:	0800ed25 	.word	0x0800ed25
 800ec58:	0800ed25 	.word	0x0800ed25
 800ec5c:	0800ed25 	.word	0x0800ed25
 800ec60:	0800ed25 	.word	0x0800ed25
 800ec64:	0800ed25 	.word	0x0800ed25
 800ec68:	0800ed25 	.word	0x0800ed25
 800ec6c:	0800ed25 	.word	0x0800ed25
 800ec70:	0800ecfd 	.word	0x0800ecfd
 800ec74:	0800ed25 	.word	0x0800ed25
 800ec78:	0800ed25 	.word	0x0800ed25
 800ec7c:	0800ed25 	.word	0x0800ed25
 800ec80:	0800ed25 	.word	0x0800ed25
 800ec84:	0800ed25 	.word	0x0800ed25
 800ec88:	0800ed25 	.word	0x0800ed25
 800ec8c:	0800ed25 	.word	0x0800ed25
 800ec90:	0800ed05 	.word	0x0800ed05
 800ec94:	0800ed25 	.word	0x0800ed25
 800ec98:	0800ed25 	.word	0x0800ed25
 800ec9c:	0800ed25 	.word	0x0800ed25
 800eca0:	0800ed25 	.word	0x0800ed25
 800eca4:	0800ed25 	.word	0x0800ed25
 800eca8:	0800ed25 	.word	0x0800ed25
 800ecac:	0800ed25 	.word	0x0800ed25
 800ecb0:	0800ed0d 	.word	0x0800ed0d
 800ecb4:	0800ed25 	.word	0x0800ed25
 800ecb8:	0800ed25 	.word	0x0800ed25
 800ecbc:	0800ed25 	.word	0x0800ed25
 800ecc0:	0800ed25 	.word	0x0800ed25
 800ecc4:	0800ed25 	.word	0x0800ed25
 800ecc8:	0800ed25 	.word	0x0800ed25
 800eccc:	0800ed25 	.word	0x0800ed25
 800ecd0:	0800ed15 	.word	0x0800ed15
 800ecd4:	0800ed25 	.word	0x0800ed25
 800ecd8:	0800ed25 	.word	0x0800ed25
 800ecdc:	0800ed25 	.word	0x0800ed25
 800ece0:	0800ed25 	.word	0x0800ed25
 800ece4:	0800ed25 	.word	0x0800ed25
 800ece8:	0800ed25 	.word	0x0800ed25
 800ecec:	0800ed25 	.word	0x0800ed25
 800ecf0:	0800ed1d 	.word	0x0800ed1d
 800ecf4:	2301      	movs	r3, #1
 800ecf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecfa:	e222      	b.n	800f142 <UART_SetConfig+0x5a6>
 800ecfc:	2304      	movs	r3, #4
 800ecfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed02:	e21e      	b.n	800f142 <UART_SetConfig+0x5a6>
 800ed04:	2308      	movs	r3, #8
 800ed06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed0a:	e21a      	b.n	800f142 <UART_SetConfig+0x5a6>
 800ed0c:	2310      	movs	r3, #16
 800ed0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed12:	e216      	b.n	800f142 <UART_SetConfig+0x5a6>
 800ed14:	2320      	movs	r3, #32
 800ed16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed1a:	e212      	b.n	800f142 <UART_SetConfig+0x5a6>
 800ed1c:	2340      	movs	r3, #64	; 0x40
 800ed1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed22:	e20e      	b.n	800f142 <UART_SetConfig+0x5a6>
 800ed24:	2380      	movs	r3, #128	; 0x80
 800ed26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed2a:	e20a      	b.n	800f142 <UART_SetConfig+0x5a6>
 800ed2c:	697b      	ldr	r3, [r7, #20]
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	4a69      	ldr	r2, [pc, #420]	; (800eed8 <UART_SetConfig+0x33c>)
 800ed32:	4293      	cmp	r3, r2
 800ed34:	d130      	bne.n	800ed98 <UART_SetConfig+0x1fc>
 800ed36:	4b67      	ldr	r3, [pc, #412]	; (800eed4 <UART_SetConfig+0x338>)
 800ed38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed3a:	f003 0307 	and.w	r3, r3, #7
 800ed3e:	2b05      	cmp	r3, #5
 800ed40:	d826      	bhi.n	800ed90 <UART_SetConfig+0x1f4>
 800ed42:	a201      	add	r2, pc, #4	; (adr r2, 800ed48 <UART_SetConfig+0x1ac>)
 800ed44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed48:	0800ed61 	.word	0x0800ed61
 800ed4c:	0800ed69 	.word	0x0800ed69
 800ed50:	0800ed71 	.word	0x0800ed71
 800ed54:	0800ed79 	.word	0x0800ed79
 800ed58:	0800ed81 	.word	0x0800ed81
 800ed5c:	0800ed89 	.word	0x0800ed89
 800ed60:	2300      	movs	r3, #0
 800ed62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed66:	e1ec      	b.n	800f142 <UART_SetConfig+0x5a6>
 800ed68:	2304      	movs	r3, #4
 800ed6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed6e:	e1e8      	b.n	800f142 <UART_SetConfig+0x5a6>
 800ed70:	2308      	movs	r3, #8
 800ed72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed76:	e1e4      	b.n	800f142 <UART_SetConfig+0x5a6>
 800ed78:	2310      	movs	r3, #16
 800ed7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed7e:	e1e0      	b.n	800f142 <UART_SetConfig+0x5a6>
 800ed80:	2320      	movs	r3, #32
 800ed82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed86:	e1dc      	b.n	800f142 <UART_SetConfig+0x5a6>
 800ed88:	2340      	movs	r3, #64	; 0x40
 800ed8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed8e:	e1d8      	b.n	800f142 <UART_SetConfig+0x5a6>
 800ed90:	2380      	movs	r3, #128	; 0x80
 800ed92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed96:	e1d4      	b.n	800f142 <UART_SetConfig+0x5a6>
 800ed98:	697b      	ldr	r3, [r7, #20]
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	4a4f      	ldr	r2, [pc, #316]	; (800eedc <UART_SetConfig+0x340>)
 800ed9e:	4293      	cmp	r3, r2
 800eda0:	d130      	bne.n	800ee04 <UART_SetConfig+0x268>
 800eda2:	4b4c      	ldr	r3, [pc, #304]	; (800eed4 <UART_SetConfig+0x338>)
 800eda4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eda6:	f003 0307 	and.w	r3, r3, #7
 800edaa:	2b05      	cmp	r3, #5
 800edac:	d826      	bhi.n	800edfc <UART_SetConfig+0x260>
 800edae:	a201      	add	r2, pc, #4	; (adr r2, 800edb4 <UART_SetConfig+0x218>)
 800edb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edb4:	0800edcd 	.word	0x0800edcd
 800edb8:	0800edd5 	.word	0x0800edd5
 800edbc:	0800eddd 	.word	0x0800eddd
 800edc0:	0800ede5 	.word	0x0800ede5
 800edc4:	0800eded 	.word	0x0800eded
 800edc8:	0800edf5 	.word	0x0800edf5
 800edcc:	2300      	movs	r3, #0
 800edce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edd2:	e1b6      	b.n	800f142 <UART_SetConfig+0x5a6>
 800edd4:	2304      	movs	r3, #4
 800edd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edda:	e1b2      	b.n	800f142 <UART_SetConfig+0x5a6>
 800eddc:	2308      	movs	r3, #8
 800edde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ede2:	e1ae      	b.n	800f142 <UART_SetConfig+0x5a6>
 800ede4:	2310      	movs	r3, #16
 800ede6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edea:	e1aa      	b.n	800f142 <UART_SetConfig+0x5a6>
 800edec:	2320      	movs	r3, #32
 800edee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edf2:	e1a6      	b.n	800f142 <UART_SetConfig+0x5a6>
 800edf4:	2340      	movs	r3, #64	; 0x40
 800edf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edfa:	e1a2      	b.n	800f142 <UART_SetConfig+0x5a6>
 800edfc:	2380      	movs	r3, #128	; 0x80
 800edfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee02:	e19e      	b.n	800f142 <UART_SetConfig+0x5a6>
 800ee04:	697b      	ldr	r3, [r7, #20]
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	4a35      	ldr	r2, [pc, #212]	; (800eee0 <UART_SetConfig+0x344>)
 800ee0a:	4293      	cmp	r3, r2
 800ee0c:	d130      	bne.n	800ee70 <UART_SetConfig+0x2d4>
 800ee0e:	4b31      	ldr	r3, [pc, #196]	; (800eed4 <UART_SetConfig+0x338>)
 800ee10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee12:	f003 0307 	and.w	r3, r3, #7
 800ee16:	2b05      	cmp	r3, #5
 800ee18:	d826      	bhi.n	800ee68 <UART_SetConfig+0x2cc>
 800ee1a:	a201      	add	r2, pc, #4	; (adr r2, 800ee20 <UART_SetConfig+0x284>)
 800ee1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee20:	0800ee39 	.word	0x0800ee39
 800ee24:	0800ee41 	.word	0x0800ee41
 800ee28:	0800ee49 	.word	0x0800ee49
 800ee2c:	0800ee51 	.word	0x0800ee51
 800ee30:	0800ee59 	.word	0x0800ee59
 800ee34:	0800ee61 	.word	0x0800ee61
 800ee38:	2300      	movs	r3, #0
 800ee3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee3e:	e180      	b.n	800f142 <UART_SetConfig+0x5a6>
 800ee40:	2304      	movs	r3, #4
 800ee42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee46:	e17c      	b.n	800f142 <UART_SetConfig+0x5a6>
 800ee48:	2308      	movs	r3, #8
 800ee4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee4e:	e178      	b.n	800f142 <UART_SetConfig+0x5a6>
 800ee50:	2310      	movs	r3, #16
 800ee52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee56:	e174      	b.n	800f142 <UART_SetConfig+0x5a6>
 800ee58:	2320      	movs	r3, #32
 800ee5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee5e:	e170      	b.n	800f142 <UART_SetConfig+0x5a6>
 800ee60:	2340      	movs	r3, #64	; 0x40
 800ee62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee66:	e16c      	b.n	800f142 <UART_SetConfig+0x5a6>
 800ee68:	2380      	movs	r3, #128	; 0x80
 800ee6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee6e:	e168      	b.n	800f142 <UART_SetConfig+0x5a6>
 800ee70:	697b      	ldr	r3, [r7, #20]
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	4a1b      	ldr	r2, [pc, #108]	; (800eee4 <UART_SetConfig+0x348>)
 800ee76:	4293      	cmp	r3, r2
 800ee78:	d142      	bne.n	800ef00 <UART_SetConfig+0x364>
 800ee7a:	4b16      	ldr	r3, [pc, #88]	; (800eed4 <UART_SetConfig+0x338>)
 800ee7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee7e:	f003 0307 	and.w	r3, r3, #7
 800ee82:	2b05      	cmp	r3, #5
 800ee84:	d838      	bhi.n	800eef8 <UART_SetConfig+0x35c>
 800ee86:	a201      	add	r2, pc, #4	; (adr r2, 800ee8c <UART_SetConfig+0x2f0>)
 800ee88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee8c:	0800eea5 	.word	0x0800eea5
 800ee90:	0800eead 	.word	0x0800eead
 800ee94:	0800eeb5 	.word	0x0800eeb5
 800ee98:	0800eebd 	.word	0x0800eebd
 800ee9c:	0800eee9 	.word	0x0800eee9
 800eea0:	0800eef1 	.word	0x0800eef1
 800eea4:	2300      	movs	r3, #0
 800eea6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eeaa:	e14a      	b.n	800f142 <UART_SetConfig+0x5a6>
 800eeac:	2304      	movs	r3, #4
 800eeae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eeb2:	e146      	b.n	800f142 <UART_SetConfig+0x5a6>
 800eeb4:	2308      	movs	r3, #8
 800eeb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eeba:	e142      	b.n	800f142 <UART_SetConfig+0x5a6>
 800eebc:	2310      	movs	r3, #16
 800eebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eec2:	e13e      	b.n	800f142 <UART_SetConfig+0x5a6>
 800eec4:	cfff69f3 	.word	0xcfff69f3
 800eec8:	58000c00 	.word	0x58000c00
 800eecc:	11fff4ff 	.word	0x11fff4ff
 800eed0:	40011000 	.word	0x40011000
 800eed4:	58024400 	.word	0x58024400
 800eed8:	40004400 	.word	0x40004400
 800eedc:	40004800 	.word	0x40004800
 800eee0:	40004c00 	.word	0x40004c00
 800eee4:	40005000 	.word	0x40005000
 800eee8:	2320      	movs	r3, #32
 800eeea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eeee:	e128      	b.n	800f142 <UART_SetConfig+0x5a6>
 800eef0:	2340      	movs	r3, #64	; 0x40
 800eef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eef6:	e124      	b.n	800f142 <UART_SetConfig+0x5a6>
 800eef8:	2380      	movs	r3, #128	; 0x80
 800eefa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eefe:	e120      	b.n	800f142 <UART_SetConfig+0x5a6>
 800ef00:	697b      	ldr	r3, [r7, #20]
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	4acb      	ldr	r2, [pc, #812]	; (800f234 <UART_SetConfig+0x698>)
 800ef06:	4293      	cmp	r3, r2
 800ef08:	d176      	bne.n	800eff8 <UART_SetConfig+0x45c>
 800ef0a:	4bcb      	ldr	r3, [pc, #812]	; (800f238 <UART_SetConfig+0x69c>)
 800ef0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ef12:	2b28      	cmp	r3, #40	; 0x28
 800ef14:	d86c      	bhi.n	800eff0 <UART_SetConfig+0x454>
 800ef16:	a201      	add	r2, pc, #4	; (adr r2, 800ef1c <UART_SetConfig+0x380>)
 800ef18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef1c:	0800efc1 	.word	0x0800efc1
 800ef20:	0800eff1 	.word	0x0800eff1
 800ef24:	0800eff1 	.word	0x0800eff1
 800ef28:	0800eff1 	.word	0x0800eff1
 800ef2c:	0800eff1 	.word	0x0800eff1
 800ef30:	0800eff1 	.word	0x0800eff1
 800ef34:	0800eff1 	.word	0x0800eff1
 800ef38:	0800eff1 	.word	0x0800eff1
 800ef3c:	0800efc9 	.word	0x0800efc9
 800ef40:	0800eff1 	.word	0x0800eff1
 800ef44:	0800eff1 	.word	0x0800eff1
 800ef48:	0800eff1 	.word	0x0800eff1
 800ef4c:	0800eff1 	.word	0x0800eff1
 800ef50:	0800eff1 	.word	0x0800eff1
 800ef54:	0800eff1 	.word	0x0800eff1
 800ef58:	0800eff1 	.word	0x0800eff1
 800ef5c:	0800efd1 	.word	0x0800efd1
 800ef60:	0800eff1 	.word	0x0800eff1
 800ef64:	0800eff1 	.word	0x0800eff1
 800ef68:	0800eff1 	.word	0x0800eff1
 800ef6c:	0800eff1 	.word	0x0800eff1
 800ef70:	0800eff1 	.word	0x0800eff1
 800ef74:	0800eff1 	.word	0x0800eff1
 800ef78:	0800eff1 	.word	0x0800eff1
 800ef7c:	0800efd9 	.word	0x0800efd9
 800ef80:	0800eff1 	.word	0x0800eff1
 800ef84:	0800eff1 	.word	0x0800eff1
 800ef88:	0800eff1 	.word	0x0800eff1
 800ef8c:	0800eff1 	.word	0x0800eff1
 800ef90:	0800eff1 	.word	0x0800eff1
 800ef94:	0800eff1 	.word	0x0800eff1
 800ef98:	0800eff1 	.word	0x0800eff1
 800ef9c:	0800efe1 	.word	0x0800efe1
 800efa0:	0800eff1 	.word	0x0800eff1
 800efa4:	0800eff1 	.word	0x0800eff1
 800efa8:	0800eff1 	.word	0x0800eff1
 800efac:	0800eff1 	.word	0x0800eff1
 800efb0:	0800eff1 	.word	0x0800eff1
 800efb4:	0800eff1 	.word	0x0800eff1
 800efb8:	0800eff1 	.word	0x0800eff1
 800efbc:	0800efe9 	.word	0x0800efe9
 800efc0:	2301      	movs	r3, #1
 800efc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efc6:	e0bc      	b.n	800f142 <UART_SetConfig+0x5a6>
 800efc8:	2304      	movs	r3, #4
 800efca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efce:	e0b8      	b.n	800f142 <UART_SetConfig+0x5a6>
 800efd0:	2308      	movs	r3, #8
 800efd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efd6:	e0b4      	b.n	800f142 <UART_SetConfig+0x5a6>
 800efd8:	2310      	movs	r3, #16
 800efda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efde:	e0b0      	b.n	800f142 <UART_SetConfig+0x5a6>
 800efe0:	2320      	movs	r3, #32
 800efe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efe6:	e0ac      	b.n	800f142 <UART_SetConfig+0x5a6>
 800efe8:	2340      	movs	r3, #64	; 0x40
 800efea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efee:	e0a8      	b.n	800f142 <UART_SetConfig+0x5a6>
 800eff0:	2380      	movs	r3, #128	; 0x80
 800eff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eff6:	e0a4      	b.n	800f142 <UART_SetConfig+0x5a6>
 800eff8:	697b      	ldr	r3, [r7, #20]
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	4a8f      	ldr	r2, [pc, #572]	; (800f23c <UART_SetConfig+0x6a0>)
 800effe:	4293      	cmp	r3, r2
 800f000:	d130      	bne.n	800f064 <UART_SetConfig+0x4c8>
 800f002:	4b8d      	ldr	r3, [pc, #564]	; (800f238 <UART_SetConfig+0x69c>)
 800f004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f006:	f003 0307 	and.w	r3, r3, #7
 800f00a:	2b05      	cmp	r3, #5
 800f00c:	d826      	bhi.n	800f05c <UART_SetConfig+0x4c0>
 800f00e:	a201      	add	r2, pc, #4	; (adr r2, 800f014 <UART_SetConfig+0x478>)
 800f010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f014:	0800f02d 	.word	0x0800f02d
 800f018:	0800f035 	.word	0x0800f035
 800f01c:	0800f03d 	.word	0x0800f03d
 800f020:	0800f045 	.word	0x0800f045
 800f024:	0800f04d 	.word	0x0800f04d
 800f028:	0800f055 	.word	0x0800f055
 800f02c:	2300      	movs	r3, #0
 800f02e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f032:	e086      	b.n	800f142 <UART_SetConfig+0x5a6>
 800f034:	2304      	movs	r3, #4
 800f036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f03a:	e082      	b.n	800f142 <UART_SetConfig+0x5a6>
 800f03c:	2308      	movs	r3, #8
 800f03e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f042:	e07e      	b.n	800f142 <UART_SetConfig+0x5a6>
 800f044:	2310      	movs	r3, #16
 800f046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f04a:	e07a      	b.n	800f142 <UART_SetConfig+0x5a6>
 800f04c:	2320      	movs	r3, #32
 800f04e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f052:	e076      	b.n	800f142 <UART_SetConfig+0x5a6>
 800f054:	2340      	movs	r3, #64	; 0x40
 800f056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f05a:	e072      	b.n	800f142 <UART_SetConfig+0x5a6>
 800f05c:	2380      	movs	r3, #128	; 0x80
 800f05e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f062:	e06e      	b.n	800f142 <UART_SetConfig+0x5a6>
 800f064:	697b      	ldr	r3, [r7, #20]
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	4a75      	ldr	r2, [pc, #468]	; (800f240 <UART_SetConfig+0x6a4>)
 800f06a:	4293      	cmp	r3, r2
 800f06c:	d130      	bne.n	800f0d0 <UART_SetConfig+0x534>
 800f06e:	4b72      	ldr	r3, [pc, #456]	; (800f238 <UART_SetConfig+0x69c>)
 800f070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f072:	f003 0307 	and.w	r3, r3, #7
 800f076:	2b05      	cmp	r3, #5
 800f078:	d826      	bhi.n	800f0c8 <UART_SetConfig+0x52c>
 800f07a:	a201      	add	r2, pc, #4	; (adr r2, 800f080 <UART_SetConfig+0x4e4>)
 800f07c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f080:	0800f099 	.word	0x0800f099
 800f084:	0800f0a1 	.word	0x0800f0a1
 800f088:	0800f0a9 	.word	0x0800f0a9
 800f08c:	0800f0b1 	.word	0x0800f0b1
 800f090:	0800f0b9 	.word	0x0800f0b9
 800f094:	0800f0c1 	.word	0x0800f0c1
 800f098:	2300      	movs	r3, #0
 800f09a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f09e:	e050      	b.n	800f142 <UART_SetConfig+0x5a6>
 800f0a0:	2304      	movs	r3, #4
 800f0a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0a6:	e04c      	b.n	800f142 <UART_SetConfig+0x5a6>
 800f0a8:	2308      	movs	r3, #8
 800f0aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0ae:	e048      	b.n	800f142 <UART_SetConfig+0x5a6>
 800f0b0:	2310      	movs	r3, #16
 800f0b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0b6:	e044      	b.n	800f142 <UART_SetConfig+0x5a6>
 800f0b8:	2320      	movs	r3, #32
 800f0ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0be:	e040      	b.n	800f142 <UART_SetConfig+0x5a6>
 800f0c0:	2340      	movs	r3, #64	; 0x40
 800f0c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0c6:	e03c      	b.n	800f142 <UART_SetConfig+0x5a6>
 800f0c8:	2380      	movs	r3, #128	; 0x80
 800f0ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0ce:	e038      	b.n	800f142 <UART_SetConfig+0x5a6>
 800f0d0:	697b      	ldr	r3, [r7, #20]
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	4a5b      	ldr	r2, [pc, #364]	; (800f244 <UART_SetConfig+0x6a8>)
 800f0d6:	4293      	cmp	r3, r2
 800f0d8:	d130      	bne.n	800f13c <UART_SetConfig+0x5a0>
 800f0da:	4b57      	ldr	r3, [pc, #348]	; (800f238 <UART_SetConfig+0x69c>)
 800f0dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f0de:	f003 0307 	and.w	r3, r3, #7
 800f0e2:	2b05      	cmp	r3, #5
 800f0e4:	d826      	bhi.n	800f134 <UART_SetConfig+0x598>
 800f0e6:	a201      	add	r2, pc, #4	; (adr r2, 800f0ec <UART_SetConfig+0x550>)
 800f0e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0ec:	0800f105 	.word	0x0800f105
 800f0f0:	0800f10d 	.word	0x0800f10d
 800f0f4:	0800f115 	.word	0x0800f115
 800f0f8:	0800f11d 	.word	0x0800f11d
 800f0fc:	0800f125 	.word	0x0800f125
 800f100:	0800f12d 	.word	0x0800f12d
 800f104:	2302      	movs	r3, #2
 800f106:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f10a:	e01a      	b.n	800f142 <UART_SetConfig+0x5a6>
 800f10c:	2304      	movs	r3, #4
 800f10e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f112:	e016      	b.n	800f142 <UART_SetConfig+0x5a6>
 800f114:	2308      	movs	r3, #8
 800f116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f11a:	e012      	b.n	800f142 <UART_SetConfig+0x5a6>
 800f11c:	2310      	movs	r3, #16
 800f11e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f122:	e00e      	b.n	800f142 <UART_SetConfig+0x5a6>
 800f124:	2320      	movs	r3, #32
 800f126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f12a:	e00a      	b.n	800f142 <UART_SetConfig+0x5a6>
 800f12c:	2340      	movs	r3, #64	; 0x40
 800f12e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f132:	e006      	b.n	800f142 <UART_SetConfig+0x5a6>
 800f134:	2380      	movs	r3, #128	; 0x80
 800f136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f13a:	e002      	b.n	800f142 <UART_SetConfig+0x5a6>
 800f13c:	2380      	movs	r3, #128	; 0x80
 800f13e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f142:	697b      	ldr	r3, [r7, #20]
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	4a3f      	ldr	r2, [pc, #252]	; (800f244 <UART_SetConfig+0x6a8>)
 800f148:	4293      	cmp	r3, r2
 800f14a:	f040 80f8 	bne.w	800f33e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f14e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f152:	2b20      	cmp	r3, #32
 800f154:	dc46      	bgt.n	800f1e4 <UART_SetConfig+0x648>
 800f156:	2b02      	cmp	r3, #2
 800f158:	f2c0 8082 	blt.w	800f260 <UART_SetConfig+0x6c4>
 800f15c:	3b02      	subs	r3, #2
 800f15e:	2b1e      	cmp	r3, #30
 800f160:	d87e      	bhi.n	800f260 <UART_SetConfig+0x6c4>
 800f162:	a201      	add	r2, pc, #4	; (adr r2, 800f168 <UART_SetConfig+0x5cc>)
 800f164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f168:	0800f1eb 	.word	0x0800f1eb
 800f16c:	0800f261 	.word	0x0800f261
 800f170:	0800f1f3 	.word	0x0800f1f3
 800f174:	0800f261 	.word	0x0800f261
 800f178:	0800f261 	.word	0x0800f261
 800f17c:	0800f261 	.word	0x0800f261
 800f180:	0800f203 	.word	0x0800f203
 800f184:	0800f261 	.word	0x0800f261
 800f188:	0800f261 	.word	0x0800f261
 800f18c:	0800f261 	.word	0x0800f261
 800f190:	0800f261 	.word	0x0800f261
 800f194:	0800f261 	.word	0x0800f261
 800f198:	0800f261 	.word	0x0800f261
 800f19c:	0800f261 	.word	0x0800f261
 800f1a0:	0800f213 	.word	0x0800f213
 800f1a4:	0800f261 	.word	0x0800f261
 800f1a8:	0800f261 	.word	0x0800f261
 800f1ac:	0800f261 	.word	0x0800f261
 800f1b0:	0800f261 	.word	0x0800f261
 800f1b4:	0800f261 	.word	0x0800f261
 800f1b8:	0800f261 	.word	0x0800f261
 800f1bc:	0800f261 	.word	0x0800f261
 800f1c0:	0800f261 	.word	0x0800f261
 800f1c4:	0800f261 	.word	0x0800f261
 800f1c8:	0800f261 	.word	0x0800f261
 800f1cc:	0800f261 	.word	0x0800f261
 800f1d0:	0800f261 	.word	0x0800f261
 800f1d4:	0800f261 	.word	0x0800f261
 800f1d8:	0800f261 	.word	0x0800f261
 800f1dc:	0800f261 	.word	0x0800f261
 800f1e0:	0800f253 	.word	0x0800f253
 800f1e4:	2b40      	cmp	r3, #64	; 0x40
 800f1e6:	d037      	beq.n	800f258 <UART_SetConfig+0x6bc>
 800f1e8:	e03a      	b.n	800f260 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800f1ea:	f7fc f931 	bl	800b450 <HAL_RCCEx_GetD3PCLK1Freq>
 800f1ee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f1f0:	e03c      	b.n	800f26c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f1f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f1f6:	4618      	mov	r0, r3
 800f1f8:	f7fc f940 	bl	800b47c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f1fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f200:	e034      	b.n	800f26c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f202:	f107 0318 	add.w	r3, r7, #24
 800f206:	4618      	mov	r0, r3
 800f208:	f7fc fa8c 	bl	800b724 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f20c:	69fb      	ldr	r3, [r7, #28]
 800f20e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f210:	e02c      	b.n	800f26c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f212:	4b09      	ldr	r3, [pc, #36]	; (800f238 <UART_SetConfig+0x69c>)
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	f003 0320 	and.w	r3, r3, #32
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d016      	beq.n	800f24c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f21e:	4b06      	ldr	r3, [pc, #24]	; (800f238 <UART_SetConfig+0x69c>)
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	08db      	lsrs	r3, r3, #3
 800f224:	f003 0303 	and.w	r3, r3, #3
 800f228:	4a07      	ldr	r2, [pc, #28]	; (800f248 <UART_SetConfig+0x6ac>)
 800f22a:	fa22 f303 	lsr.w	r3, r2, r3
 800f22e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f230:	e01c      	b.n	800f26c <UART_SetConfig+0x6d0>
 800f232:	bf00      	nop
 800f234:	40011400 	.word	0x40011400
 800f238:	58024400 	.word	0x58024400
 800f23c:	40007800 	.word	0x40007800
 800f240:	40007c00 	.word	0x40007c00
 800f244:	58000c00 	.word	0x58000c00
 800f248:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800f24c:	4b9d      	ldr	r3, [pc, #628]	; (800f4c4 <UART_SetConfig+0x928>)
 800f24e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f250:	e00c      	b.n	800f26c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f252:	4b9d      	ldr	r3, [pc, #628]	; (800f4c8 <UART_SetConfig+0x92c>)
 800f254:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f256:	e009      	b.n	800f26c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f258:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f25c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f25e:	e005      	b.n	800f26c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800f260:	2300      	movs	r3, #0
 800f262:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f264:	2301      	movs	r3, #1
 800f266:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f26a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f26c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f26e:	2b00      	cmp	r3, #0
 800f270:	f000 81de 	beq.w	800f630 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f274:	697b      	ldr	r3, [r7, #20]
 800f276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f278:	4a94      	ldr	r2, [pc, #592]	; (800f4cc <UART_SetConfig+0x930>)
 800f27a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f27e:	461a      	mov	r2, r3
 800f280:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f282:	fbb3 f3f2 	udiv	r3, r3, r2
 800f286:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f288:	697b      	ldr	r3, [r7, #20]
 800f28a:	685a      	ldr	r2, [r3, #4]
 800f28c:	4613      	mov	r3, r2
 800f28e:	005b      	lsls	r3, r3, #1
 800f290:	4413      	add	r3, r2
 800f292:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f294:	429a      	cmp	r2, r3
 800f296:	d305      	bcc.n	800f2a4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f298:	697b      	ldr	r3, [r7, #20]
 800f29a:	685b      	ldr	r3, [r3, #4]
 800f29c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f29e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f2a0:	429a      	cmp	r2, r3
 800f2a2:	d903      	bls.n	800f2ac <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800f2a4:	2301      	movs	r3, #1
 800f2a6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f2aa:	e1c1      	b.n	800f630 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f2ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2ae:	2200      	movs	r2, #0
 800f2b0:	60bb      	str	r3, [r7, #8]
 800f2b2:	60fa      	str	r2, [r7, #12]
 800f2b4:	697b      	ldr	r3, [r7, #20]
 800f2b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2b8:	4a84      	ldr	r2, [pc, #528]	; (800f4cc <UART_SetConfig+0x930>)
 800f2ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f2be:	b29b      	uxth	r3, r3
 800f2c0:	2200      	movs	r2, #0
 800f2c2:	603b      	str	r3, [r7, #0]
 800f2c4:	607a      	str	r2, [r7, #4]
 800f2c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f2ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f2ce:	f7f1 f857 	bl	8000380 <__aeabi_uldivmod>
 800f2d2:	4602      	mov	r2, r0
 800f2d4:	460b      	mov	r3, r1
 800f2d6:	4610      	mov	r0, r2
 800f2d8:	4619      	mov	r1, r3
 800f2da:	f04f 0200 	mov.w	r2, #0
 800f2de:	f04f 0300 	mov.w	r3, #0
 800f2e2:	020b      	lsls	r3, r1, #8
 800f2e4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f2e8:	0202      	lsls	r2, r0, #8
 800f2ea:	6979      	ldr	r1, [r7, #20]
 800f2ec:	6849      	ldr	r1, [r1, #4]
 800f2ee:	0849      	lsrs	r1, r1, #1
 800f2f0:	2000      	movs	r0, #0
 800f2f2:	460c      	mov	r4, r1
 800f2f4:	4605      	mov	r5, r0
 800f2f6:	eb12 0804 	adds.w	r8, r2, r4
 800f2fa:	eb43 0905 	adc.w	r9, r3, r5
 800f2fe:	697b      	ldr	r3, [r7, #20]
 800f300:	685b      	ldr	r3, [r3, #4]
 800f302:	2200      	movs	r2, #0
 800f304:	469a      	mov	sl, r3
 800f306:	4693      	mov	fp, r2
 800f308:	4652      	mov	r2, sl
 800f30a:	465b      	mov	r3, fp
 800f30c:	4640      	mov	r0, r8
 800f30e:	4649      	mov	r1, r9
 800f310:	f7f1 f836 	bl	8000380 <__aeabi_uldivmod>
 800f314:	4602      	mov	r2, r0
 800f316:	460b      	mov	r3, r1
 800f318:	4613      	mov	r3, r2
 800f31a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f31c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f31e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f322:	d308      	bcc.n	800f336 <UART_SetConfig+0x79a>
 800f324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f326:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f32a:	d204      	bcs.n	800f336 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800f32c:	697b      	ldr	r3, [r7, #20]
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f332:	60da      	str	r2, [r3, #12]
 800f334:	e17c      	b.n	800f630 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800f336:	2301      	movs	r3, #1
 800f338:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f33c:	e178      	b.n	800f630 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f33e:	697b      	ldr	r3, [r7, #20]
 800f340:	69db      	ldr	r3, [r3, #28]
 800f342:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f346:	f040 80c5 	bne.w	800f4d4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800f34a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f34e:	2b20      	cmp	r3, #32
 800f350:	dc48      	bgt.n	800f3e4 <UART_SetConfig+0x848>
 800f352:	2b00      	cmp	r3, #0
 800f354:	db7b      	blt.n	800f44e <UART_SetConfig+0x8b2>
 800f356:	2b20      	cmp	r3, #32
 800f358:	d879      	bhi.n	800f44e <UART_SetConfig+0x8b2>
 800f35a:	a201      	add	r2, pc, #4	; (adr r2, 800f360 <UART_SetConfig+0x7c4>)
 800f35c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f360:	0800f3eb 	.word	0x0800f3eb
 800f364:	0800f3f3 	.word	0x0800f3f3
 800f368:	0800f44f 	.word	0x0800f44f
 800f36c:	0800f44f 	.word	0x0800f44f
 800f370:	0800f3fb 	.word	0x0800f3fb
 800f374:	0800f44f 	.word	0x0800f44f
 800f378:	0800f44f 	.word	0x0800f44f
 800f37c:	0800f44f 	.word	0x0800f44f
 800f380:	0800f40b 	.word	0x0800f40b
 800f384:	0800f44f 	.word	0x0800f44f
 800f388:	0800f44f 	.word	0x0800f44f
 800f38c:	0800f44f 	.word	0x0800f44f
 800f390:	0800f44f 	.word	0x0800f44f
 800f394:	0800f44f 	.word	0x0800f44f
 800f398:	0800f44f 	.word	0x0800f44f
 800f39c:	0800f44f 	.word	0x0800f44f
 800f3a0:	0800f41b 	.word	0x0800f41b
 800f3a4:	0800f44f 	.word	0x0800f44f
 800f3a8:	0800f44f 	.word	0x0800f44f
 800f3ac:	0800f44f 	.word	0x0800f44f
 800f3b0:	0800f44f 	.word	0x0800f44f
 800f3b4:	0800f44f 	.word	0x0800f44f
 800f3b8:	0800f44f 	.word	0x0800f44f
 800f3bc:	0800f44f 	.word	0x0800f44f
 800f3c0:	0800f44f 	.word	0x0800f44f
 800f3c4:	0800f44f 	.word	0x0800f44f
 800f3c8:	0800f44f 	.word	0x0800f44f
 800f3cc:	0800f44f 	.word	0x0800f44f
 800f3d0:	0800f44f 	.word	0x0800f44f
 800f3d4:	0800f44f 	.word	0x0800f44f
 800f3d8:	0800f44f 	.word	0x0800f44f
 800f3dc:	0800f44f 	.word	0x0800f44f
 800f3e0:	0800f441 	.word	0x0800f441
 800f3e4:	2b40      	cmp	r3, #64	; 0x40
 800f3e6:	d02e      	beq.n	800f446 <UART_SetConfig+0x8aa>
 800f3e8:	e031      	b.n	800f44e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f3ea:	f7fa f839 	bl	8009460 <HAL_RCC_GetPCLK1Freq>
 800f3ee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f3f0:	e033      	b.n	800f45a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f3f2:	f7fa f84b 	bl	800948c <HAL_RCC_GetPCLK2Freq>
 800f3f6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f3f8:	e02f      	b.n	800f45a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f3fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f3fe:	4618      	mov	r0, r3
 800f400:	f7fc f83c 	bl	800b47c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f406:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f408:	e027      	b.n	800f45a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f40a:	f107 0318 	add.w	r3, r7, #24
 800f40e:	4618      	mov	r0, r3
 800f410:	f7fc f988 	bl	800b724 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f414:	69fb      	ldr	r3, [r7, #28]
 800f416:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f418:	e01f      	b.n	800f45a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f41a:	4b2d      	ldr	r3, [pc, #180]	; (800f4d0 <UART_SetConfig+0x934>)
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	f003 0320 	and.w	r3, r3, #32
 800f422:	2b00      	cmp	r3, #0
 800f424:	d009      	beq.n	800f43a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f426:	4b2a      	ldr	r3, [pc, #168]	; (800f4d0 <UART_SetConfig+0x934>)
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	08db      	lsrs	r3, r3, #3
 800f42c:	f003 0303 	and.w	r3, r3, #3
 800f430:	4a24      	ldr	r2, [pc, #144]	; (800f4c4 <UART_SetConfig+0x928>)
 800f432:	fa22 f303 	lsr.w	r3, r2, r3
 800f436:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f438:	e00f      	b.n	800f45a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800f43a:	4b22      	ldr	r3, [pc, #136]	; (800f4c4 <UART_SetConfig+0x928>)
 800f43c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f43e:	e00c      	b.n	800f45a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f440:	4b21      	ldr	r3, [pc, #132]	; (800f4c8 <UART_SetConfig+0x92c>)
 800f442:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f444:	e009      	b.n	800f45a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f446:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f44a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f44c:	e005      	b.n	800f45a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800f44e:	2300      	movs	r3, #0
 800f450:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f452:	2301      	movs	r3, #1
 800f454:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f458:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f45a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	f000 80e7 	beq.w	800f630 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f462:	697b      	ldr	r3, [r7, #20]
 800f464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f466:	4a19      	ldr	r2, [pc, #100]	; (800f4cc <UART_SetConfig+0x930>)
 800f468:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f46c:	461a      	mov	r2, r3
 800f46e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f470:	fbb3 f3f2 	udiv	r3, r3, r2
 800f474:	005a      	lsls	r2, r3, #1
 800f476:	697b      	ldr	r3, [r7, #20]
 800f478:	685b      	ldr	r3, [r3, #4]
 800f47a:	085b      	lsrs	r3, r3, #1
 800f47c:	441a      	add	r2, r3
 800f47e:	697b      	ldr	r3, [r7, #20]
 800f480:	685b      	ldr	r3, [r3, #4]
 800f482:	fbb2 f3f3 	udiv	r3, r2, r3
 800f486:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f48a:	2b0f      	cmp	r3, #15
 800f48c:	d916      	bls.n	800f4bc <UART_SetConfig+0x920>
 800f48e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f490:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f494:	d212      	bcs.n	800f4bc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f498:	b29b      	uxth	r3, r3
 800f49a:	f023 030f 	bic.w	r3, r3, #15
 800f49e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f4a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4a2:	085b      	lsrs	r3, r3, #1
 800f4a4:	b29b      	uxth	r3, r3
 800f4a6:	f003 0307 	and.w	r3, r3, #7
 800f4aa:	b29a      	uxth	r2, r3
 800f4ac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f4ae:	4313      	orrs	r3, r2
 800f4b0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800f4b2:	697b      	ldr	r3, [r7, #20]
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f4b8:	60da      	str	r2, [r3, #12]
 800f4ba:	e0b9      	b.n	800f630 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f4bc:	2301      	movs	r3, #1
 800f4be:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f4c2:	e0b5      	b.n	800f630 <UART_SetConfig+0xa94>
 800f4c4:	03d09000 	.word	0x03d09000
 800f4c8:	003d0900 	.word	0x003d0900
 800f4cc:	080154ec 	.word	0x080154ec
 800f4d0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800f4d4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f4d8:	2b20      	cmp	r3, #32
 800f4da:	dc49      	bgt.n	800f570 <UART_SetConfig+0x9d4>
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	db7c      	blt.n	800f5da <UART_SetConfig+0xa3e>
 800f4e0:	2b20      	cmp	r3, #32
 800f4e2:	d87a      	bhi.n	800f5da <UART_SetConfig+0xa3e>
 800f4e4:	a201      	add	r2, pc, #4	; (adr r2, 800f4ec <UART_SetConfig+0x950>)
 800f4e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4ea:	bf00      	nop
 800f4ec:	0800f577 	.word	0x0800f577
 800f4f0:	0800f57f 	.word	0x0800f57f
 800f4f4:	0800f5db 	.word	0x0800f5db
 800f4f8:	0800f5db 	.word	0x0800f5db
 800f4fc:	0800f587 	.word	0x0800f587
 800f500:	0800f5db 	.word	0x0800f5db
 800f504:	0800f5db 	.word	0x0800f5db
 800f508:	0800f5db 	.word	0x0800f5db
 800f50c:	0800f597 	.word	0x0800f597
 800f510:	0800f5db 	.word	0x0800f5db
 800f514:	0800f5db 	.word	0x0800f5db
 800f518:	0800f5db 	.word	0x0800f5db
 800f51c:	0800f5db 	.word	0x0800f5db
 800f520:	0800f5db 	.word	0x0800f5db
 800f524:	0800f5db 	.word	0x0800f5db
 800f528:	0800f5db 	.word	0x0800f5db
 800f52c:	0800f5a7 	.word	0x0800f5a7
 800f530:	0800f5db 	.word	0x0800f5db
 800f534:	0800f5db 	.word	0x0800f5db
 800f538:	0800f5db 	.word	0x0800f5db
 800f53c:	0800f5db 	.word	0x0800f5db
 800f540:	0800f5db 	.word	0x0800f5db
 800f544:	0800f5db 	.word	0x0800f5db
 800f548:	0800f5db 	.word	0x0800f5db
 800f54c:	0800f5db 	.word	0x0800f5db
 800f550:	0800f5db 	.word	0x0800f5db
 800f554:	0800f5db 	.word	0x0800f5db
 800f558:	0800f5db 	.word	0x0800f5db
 800f55c:	0800f5db 	.word	0x0800f5db
 800f560:	0800f5db 	.word	0x0800f5db
 800f564:	0800f5db 	.word	0x0800f5db
 800f568:	0800f5db 	.word	0x0800f5db
 800f56c:	0800f5cd 	.word	0x0800f5cd
 800f570:	2b40      	cmp	r3, #64	; 0x40
 800f572:	d02e      	beq.n	800f5d2 <UART_SetConfig+0xa36>
 800f574:	e031      	b.n	800f5da <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f576:	f7f9 ff73 	bl	8009460 <HAL_RCC_GetPCLK1Freq>
 800f57a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f57c:	e033      	b.n	800f5e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f57e:	f7f9 ff85 	bl	800948c <HAL_RCC_GetPCLK2Freq>
 800f582:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f584:	e02f      	b.n	800f5e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f586:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f58a:	4618      	mov	r0, r3
 800f58c:	f7fb ff76 	bl	800b47c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f592:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f594:	e027      	b.n	800f5e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f596:	f107 0318 	add.w	r3, r7, #24
 800f59a:	4618      	mov	r0, r3
 800f59c:	f7fc f8c2 	bl	800b724 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f5a0:	69fb      	ldr	r3, [r7, #28]
 800f5a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f5a4:	e01f      	b.n	800f5e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f5a6:	4b2d      	ldr	r3, [pc, #180]	; (800f65c <UART_SetConfig+0xac0>)
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	f003 0320 	and.w	r3, r3, #32
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d009      	beq.n	800f5c6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f5b2:	4b2a      	ldr	r3, [pc, #168]	; (800f65c <UART_SetConfig+0xac0>)
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	08db      	lsrs	r3, r3, #3
 800f5b8:	f003 0303 	and.w	r3, r3, #3
 800f5bc:	4a28      	ldr	r2, [pc, #160]	; (800f660 <UART_SetConfig+0xac4>)
 800f5be:	fa22 f303 	lsr.w	r3, r2, r3
 800f5c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f5c4:	e00f      	b.n	800f5e6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800f5c6:	4b26      	ldr	r3, [pc, #152]	; (800f660 <UART_SetConfig+0xac4>)
 800f5c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f5ca:	e00c      	b.n	800f5e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f5cc:	4b25      	ldr	r3, [pc, #148]	; (800f664 <UART_SetConfig+0xac8>)
 800f5ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f5d0:	e009      	b.n	800f5e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f5d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f5d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f5d8:	e005      	b.n	800f5e6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800f5da:	2300      	movs	r3, #0
 800f5dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f5de:	2301      	movs	r3, #1
 800f5e0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f5e4:	bf00      	nop
    }

    if (pclk != 0U)
 800f5e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d021      	beq.n	800f630 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f5ec:	697b      	ldr	r3, [r7, #20]
 800f5ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5f0:	4a1d      	ldr	r2, [pc, #116]	; (800f668 <UART_SetConfig+0xacc>)
 800f5f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f5f6:	461a      	mov	r2, r3
 800f5f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5fa:	fbb3 f2f2 	udiv	r2, r3, r2
 800f5fe:	697b      	ldr	r3, [r7, #20]
 800f600:	685b      	ldr	r3, [r3, #4]
 800f602:	085b      	lsrs	r3, r3, #1
 800f604:	441a      	add	r2, r3
 800f606:	697b      	ldr	r3, [r7, #20]
 800f608:	685b      	ldr	r3, [r3, #4]
 800f60a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f60e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f612:	2b0f      	cmp	r3, #15
 800f614:	d909      	bls.n	800f62a <UART_SetConfig+0xa8e>
 800f616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f618:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f61c:	d205      	bcs.n	800f62a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f61e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f620:	b29a      	uxth	r2, r3
 800f622:	697b      	ldr	r3, [r7, #20]
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	60da      	str	r2, [r3, #12]
 800f628:	e002      	b.n	800f630 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f62a:	2301      	movs	r3, #1
 800f62c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f630:	697b      	ldr	r3, [r7, #20]
 800f632:	2201      	movs	r2, #1
 800f634:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f638:	697b      	ldr	r3, [r7, #20]
 800f63a:	2201      	movs	r2, #1
 800f63c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f640:	697b      	ldr	r3, [r7, #20]
 800f642:	2200      	movs	r2, #0
 800f644:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800f646:	697b      	ldr	r3, [r7, #20]
 800f648:	2200      	movs	r2, #0
 800f64a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800f64c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800f650:	4618      	mov	r0, r3
 800f652:	3748      	adds	r7, #72	; 0x48
 800f654:	46bd      	mov	sp, r7
 800f656:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f65a:	bf00      	nop
 800f65c:	58024400 	.word	0x58024400
 800f660:	03d09000 	.word	0x03d09000
 800f664:	003d0900 	.word	0x003d0900
 800f668:	080154ec 	.word	0x080154ec

0800f66c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f66c:	b480      	push	{r7}
 800f66e:	b083      	sub	sp, #12
 800f670:	af00      	add	r7, sp, #0
 800f672:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f678:	f003 0308 	and.w	r3, r3, #8
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d00a      	beq.n	800f696 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	685b      	ldr	r3, [r3, #4]
 800f686:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	430a      	orrs	r2, r1
 800f694:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f69a:	f003 0301 	and.w	r3, r3, #1
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d00a      	beq.n	800f6b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	685b      	ldr	r3, [r3, #4]
 800f6a8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	430a      	orrs	r2, r1
 800f6b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6bc:	f003 0302 	and.w	r3, r3, #2
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d00a      	beq.n	800f6da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	685b      	ldr	r3, [r3, #4]
 800f6ca:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	430a      	orrs	r2, r1
 800f6d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6de:	f003 0304 	and.w	r3, r3, #4
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d00a      	beq.n	800f6fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	685b      	ldr	r3, [r3, #4]
 800f6ec:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	430a      	orrs	r2, r1
 800f6fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f700:	f003 0310 	and.w	r3, r3, #16
 800f704:	2b00      	cmp	r3, #0
 800f706:	d00a      	beq.n	800f71e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	689b      	ldr	r3, [r3, #8]
 800f70e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	430a      	orrs	r2, r1
 800f71c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f722:	f003 0320 	and.w	r3, r3, #32
 800f726:	2b00      	cmp	r3, #0
 800f728:	d00a      	beq.n	800f740 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	689b      	ldr	r3, [r3, #8]
 800f730:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	430a      	orrs	r2, r1
 800f73e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d01a      	beq.n	800f782 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	685b      	ldr	r3, [r3, #4]
 800f752:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	430a      	orrs	r2, r1
 800f760:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f766:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f76a:	d10a      	bne.n	800f782 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	685b      	ldr	r3, [r3, #4]
 800f772:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	430a      	orrs	r2, r1
 800f780:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d00a      	beq.n	800f7a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	685b      	ldr	r3, [r3, #4]
 800f794:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	430a      	orrs	r2, r1
 800f7a2:	605a      	str	r2, [r3, #4]
  }
}
 800f7a4:	bf00      	nop
 800f7a6:	370c      	adds	r7, #12
 800f7a8:	46bd      	mov	sp, r7
 800f7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ae:	4770      	bx	lr

0800f7b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f7b0:	b580      	push	{r7, lr}
 800f7b2:	b098      	sub	sp, #96	; 0x60
 800f7b4:	af02      	add	r7, sp, #8
 800f7b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	2200      	movs	r2, #0
 800f7bc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f7c0:	f7f3 fbe0 	bl	8002f84 <HAL_GetTick>
 800f7c4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	f003 0308 	and.w	r3, r3, #8
 800f7d0:	2b08      	cmp	r3, #8
 800f7d2:	d12f      	bne.n	800f834 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f7d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f7d8:	9300      	str	r3, [sp, #0]
 800f7da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f7dc:	2200      	movs	r2, #0
 800f7de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f7e2:	6878      	ldr	r0, [r7, #4]
 800f7e4:	f000 f88e 	bl	800f904 <UART_WaitOnFlagUntilTimeout>
 800f7e8:	4603      	mov	r3, r0
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d022      	beq.n	800f834 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7f6:	e853 3f00 	ldrex	r3, [r3]
 800f7fa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f7fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f7fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f802:	653b      	str	r3, [r7, #80]	; 0x50
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	681b      	ldr	r3, [r3, #0]
 800f808:	461a      	mov	r2, r3
 800f80a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f80c:	647b      	str	r3, [r7, #68]	; 0x44
 800f80e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f810:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f812:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f814:	e841 2300 	strex	r3, r2, [r1]
 800f818:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f81a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d1e6      	bne.n	800f7ee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	2220      	movs	r2, #32
 800f824:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	2200      	movs	r2, #0
 800f82c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f830:	2303      	movs	r3, #3
 800f832:	e063      	b.n	800f8fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	f003 0304 	and.w	r3, r3, #4
 800f83e:	2b04      	cmp	r3, #4
 800f840:	d149      	bne.n	800f8d6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f842:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f846:	9300      	str	r3, [sp, #0]
 800f848:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f84a:	2200      	movs	r2, #0
 800f84c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f850:	6878      	ldr	r0, [r7, #4]
 800f852:	f000 f857 	bl	800f904 <UART_WaitOnFlagUntilTimeout>
 800f856:	4603      	mov	r3, r0
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d03c      	beq.n	800f8d6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f864:	e853 3f00 	ldrex	r3, [r3]
 800f868:	623b      	str	r3, [r7, #32]
   return(result);
 800f86a:	6a3b      	ldr	r3, [r7, #32]
 800f86c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f870:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	461a      	mov	r2, r3
 800f878:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f87a:	633b      	str	r3, [r7, #48]	; 0x30
 800f87c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f87e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f880:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f882:	e841 2300 	strex	r3, r2, [r1]
 800f886:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d1e6      	bne.n	800f85c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	3308      	adds	r3, #8
 800f894:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f896:	693b      	ldr	r3, [r7, #16]
 800f898:	e853 3f00 	ldrex	r3, [r3]
 800f89c:	60fb      	str	r3, [r7, #12]
   return(result);
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	f023 0301 	bic.w	r3, r3, #1
 800f8a4:	64bb      	str	r3, [r7, #72]	; 0x48
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	3308      	adds	r3, #8
 800f8ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f8ae:	61fa      	str	r2, [r7, #28]
 800f8b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8b2:	69b9      	ldr	r1, [r7, #24]
 800f8b4:	69fa      	ldr	r2, [r7, #28]
 800f8b6:	e841 2300 	strex	r3, r2, [r1]
 800f8ba:	617b      	str	r3, [r7, #20]
   return(result);
 800f8bc:	697b      	ldr	r3, [r7, #20]
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d1e5      	bne.n	800f88e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	2220      	movs	r2, #32
 800f8c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	2200      	movs	r2, #0
 800f8ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f8d2:	2303      	movs	r3, #3
 800f8d4:	e012      	b.n	800f8fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	2220      	movs	r2, #32
 800f8da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	2220      	movs	r2, #32
 800f8e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	2200      	movs	r2, #0
 800f8ea:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	2200      	movs	r2, #0
 800f8f0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	2200      	movs	r2, #0
 800f8f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f8fa:	2300      	movs	r3, #0
}
 800f8fc:	4618      	mov	r0, r3
 800f8fe:	3758      	adds	r7, #88	; 0x58
 800f900:	46bd      	mov	sp, r7
 800f902:	bd80      	pop	{r7, pc}

0800f904 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f904:	b580      	push	{r7, lr}
 800f906:	b084      	sub	sp, #16
 800f908:	af00      	add	r7, sp, #0
 800f90a:	60f8      	str	r0, [r7, #12]
 800f90c:	60b9      	str	r1, [r7, #8]
 800f90e:	603b      	str	r3, [r7, #0]
 800f910:	4613      	mov	r3, r2
 800f912:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f914:	e04f      	b.n	800f9b6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f916:	69bb      	ldr	r3, [r7, #24]
 800f918:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f91c:	d04b      	beq.n	800f9b6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f91e:	f7f3 fb31 	bl	8002f84 <HAL_GetTick>
 800f922:	4602      	mov	r2, r0
 800f924:	683b      	ldr	r3, [r7, #0]
 800f926:	1ad3      	subs	r3, r2, r3
 800f928:	69ba      	ldr	r2, [r7, #24]
 800f92a:	429a      	cmp	r2, r3
 800f92c:	d302      	bcc.n	800f934 <UART_WaitOnFlagUntilTimeout+0x30>
 800f92e:	69bb      	ldr	r3, [r7, #24]
 800f930:	2b00      	cmp	r3, #0
 800f932:	d101      	bne.n	800f938 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f934:	2303      	movs	r3, #3
 800f936:	e04e      	b.n	800f9d6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	f003 0304 	and.w	r3, r3, #4
 800f942:	2b00      	cmp	r3, #0
 800f944:	d037      	beq.n	800f9b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800f946:	68bb      	ldr	r3, [r7, #8]
 800f948:	2b80      	cmp	r3, #128	; 0x80
 800f94a:	d034      	beq.n	800f9b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800f94c:	68bb      	ldr	r3, [r7, #8]
 800f94e:	2b40      	cmp	r3, #64	; 0x40
 800f950:	d031      	beq.n	800f9b6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	69db      	ldr	r3, [r3, #28]
 800f958:	f003 0308 	and.w	r3, r3, #8
 800f95c:	2b08      	cmp	r3, #8
 800f95e:	d110      	bne.n	800f982 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	2208      	movs	r2, #8
 800f966:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f968:	68f8      	ldr	r0, [r7, #12]
 800f96a:	f000 f95b 	bl	800fc24 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	2208      	movs	r2, #8
 800f972:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	2200      	movs	r2, #0
 800f97a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800f97e:	2301      	movs	r3, #1
 800f980:	e029      	b.n	800f9d6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	69db      	ldr	r3, [r3, #28]
 800f988:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f98c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f990:	d111      	bne.n	800f9b6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f99a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f99c:	68f8      	ldr	r0, [r7, #12]
 800f99e:	f000 f941 	bl	800fc24 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f9a2:	68fb      	ldr	r3, [r7, #12]
 800f9a4:	2220      	movs	r2, #32
 800f9a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	2200      	movs	r2, #0
 800f9ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800f9b2:	2303      	movs	r3, #3
 800f9b4:	e00f      	b.n	800f9d6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	69da      	ldr	r2, [r3, #28]
 800f9bc:	68bb      	ldr	r3, [r7, #8]
 800f9be:	4013      	ands	r3, r2
 800f9c0:	68ba      	ldr	r2, [r7, #8]
 800f9c2:	429a      	cmp	r2, r3
 800f9c4:	bf0c      	ite	eq
 800f9c6:	2301      	moveq	r3, #1
 800f9c8:	2300      	movne	r3, #0
 800f9ca:	b2db      	uxtb	r3, r3
 800f9cc:	461a      	mov	r2, r3
 800f9ce:	79fb      	ldrb	r3, [r7, #7]
 800f9d0:	429a      	cmp	r2, r3
 800f9d2:	d0a0      	beq.n	800f916 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f9d4:	2300      	movs	r3, #0
}
 800f9d6:	4618      	mov	r0, r3
 800f9d8:	3710      	adds	r7, #16
 800f9da:	46bd      	mov	sp, r7
 800f9dc:	bd80      	pop	{r7, pc}
	...

0800f9e0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f9e0:	b480      	push	{r7}
 800f9e2:	b0a3      	sub	sp, #140	; 0x8c
 800f9e4:	af00      	add	r7, sp, #0
 800f9e6:	60f8      	str	r0, [r7, #12]
 800f9e8:	60b9      	str	r1, [r7, #8]
 800f9ea:	4613      	mov	r3, r2
 800f9ec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	68ba      	ldr	r2, [r7, #8]
 800f9f2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	88fa      	ldrh	r2, [r7, #6]
 800f9f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800f9fc:	68fb      	ldr	r3, [r7, #12]
 800f9fe:	88fa      	ldrh	r2, [r7, #6]
 800fa00:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	2200      	movs	r2, #0
 800fa08:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	689b      	ldr	r3, [r3, #8]
 800fa0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fa12:	d10e      	bne.n	800fa32 <UART_Start_Receive_IT+0x52>
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	691b      	ldr	r3, [r3, #16]
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d105      	bne.n	800fa28 <UART_Start_Receive_IT+0x48>
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800fa22:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fa26:	e02d      	b.n	800fa84 <UART_Start_Receive_IT+0xa4>
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	22ff      	movs	r2, #255	; 0xff
 800fa2c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fa30:	e028      	b.n	800fa84 <UART_Start_Receive_IT+0xa4>
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	689b      	ldr	r3, [r3, #8]
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d10d      	bne.n	800fa56 <UART_Start_Receive_IT+0x76>
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	691b      	ldr	r3, [r3, #16]
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d104      	bne.n	800fa4c <UART_Start_Receive_IT+0x6c>
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	22ff      	movs	r2, #255	; 0xff
 800fa46:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fa4a:	e01b      	b.n	800fa84 <UART_Start_Receive_IT+0xa4>
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	227f      	movs	r2, #127	; 0x7f
 800fa50:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fa54:	e016      	b.n	800fa84 <UART_Start_Receive_IT+0xa4>
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	689b      	ldr	r3, [r3, #8]
 800fa5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fa5e:	d10d      	bne.n	800fa7c <UART_Start_Receive_IT+0x9c>
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	691b      	ldr	r3, [r3, #16]
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d104      	bne.n	800fa72 <UART_Start_Receive_IT+0x92>
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	227f      	movs	r2, #127	; 0x7f
 800fa6c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fa70:	e008      	b.n	800fa84 <UART_Start_Receive_IT+0xa4>
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	223f      	movs	r2, #63	; 0x3f
 800fa76:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fa7a:	e003      	b.n	800fa84 <UART_Start_Receive_IT+0xa4>
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	2200      	movs	r2, #0
 800fa80:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	2200      	movs	r2, #0
 800fa88:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	2222      	movs	r2, #34	; 0x22
 800fa90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	3308      	adds	r3, #8
 800fa9a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fa9e:	e853 3f00 	ldrex	r3, [r3]
 800faa2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800faa4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800faa6:	f043 0301 	orr.w	r3, r3, #1
 800faaa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	3308      	adds	r3, #8
 800fab4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800fab8:	673a      	str	r2, [r7, #112]	; 0x70
 800faba:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fabc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800fabe:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800fac0:	e841 2300 	strex	r3, r2, [r1]
 800fac4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800fac6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d1e3      	bne.n	800fa94 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fad0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fad4:	d14f      	bne.n	800fb76 <UART_Start_Receive_IT+0x196>
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800fadc:	88fa      	ldrh	r2, [r7, #6]
 800fade:	429a      	cmp	r2, r3
 800fae0:	d349      	bcc.n	800fb76 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	689b      	ldr	r3, [r3, #8]
 800fae6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800faea:	d107      	bne.n	800fafc <UART_Start_Receive_IT+0x11c>
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	691b      	ldr	r3, [r3, #16]
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d103      	bne.n	800fafc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800faf4:	68fb      	ldr	r3, [r7, #12]
 800faf6:	4a47      	ldr	r2, [pc, #284]	; (800fc14 <UART_Start_Receive_IT+0x234>)
 800faf8:	675a      	str	r2, [r3, #116]	; 0x74
 800fafa:	e002      	b.n	800fb02 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	4a46      	ldr	r2, [pc, #280]	; (800fc18 <UART_Start_Receive_IT+0x238>)
 800fb00:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	691b      	ldr	r3, [r3, #16]
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d01a      	beq.n	800fb40 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fb12:	e853 3f00 	ldrex	r3, [r3]
 800fb16:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800fb18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fb1e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	461a      	mov	r2, r3
 800fb28:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fb2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fb2e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb30:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fb32:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fb34:	e841 2300 	strex	r3, r2, [r1]
 800fb38:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800fb3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d1e4      	bne.n	800fb0a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	3308      	adds	r3, #8
 800fb46:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb4a:	e853 3f00 	ldrex	r3, [r3]
 800fb4e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fb50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fb56:	67fb      	str	r3, [r7, #124]	; 0x7c
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	3308      	adds	r3, #8
 800fb5e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800fb60:	64ba      	str	r2, [r7, #72]	; 0x48
 800fb62:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb64:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fb66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fb68:	e841 2300 	strex	r3, r2, [r1]
 800fb6c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800fb6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d1e5      	bne.n	800fb40 <UART_Start_Receive_IT+0x160>
 800fb74:	e046      	b.n	800fc04 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fb76:	68fb      	ldr	r3, [r7, #12]
 800fb78:	689b      	ldr	r3, [r3, #8]
 800fb7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fb7e:	d107      	bne.n	800fb90 <UART_Start_Receive_IT+0x1b0>
 800fb80:	68fb      	ldr	r3, [r7, #12]
 800fb82:	691b      	ldr	r3, [r3, #16]
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d103      	bne.n	800fb90 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	4a24      	ldr	r2, [pc, #144]	; (800fc1c <UART_Start_Receive_IT+0x23c>)
 800fb8c:	675a      	str	r2, [r3, #116]	; 0x74
 800fb8e:	e002      	b.n	800fb96 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	4a23      	ldr	r2, [pc, #140]	; (800fc20 <UART_Start_Receive_IT+0x240>)
 800fb94:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	691b      	ldr	r3, [r3, #16]
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d019      	beq.n	800fbd2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fba6:	e853 3f00 	ldrex	r3, [r3]
 800fbaa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fbac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbae:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800fbb2:	677b      	str	r3, [r7, #116]	; 0x74
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	461a      	mov	r2, r3
 800fbba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fbbc:	637b      	str	r3, [r7, #52]	; 0x34
 800fbbe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbc0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fbc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fbc4:	e841 2300 	strex	r3, r2, [r1]
 800fbc8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800fbca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d1e6      	bne.n	800fb9e <UART_Start_Receive_IT+0x1be>
 800fbd0:	e018      	b.n	800fc04 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	681b      	ldr	r3, [r3, #0]
 800fbd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbd8:	697b      	ldr	r3, [r7, #20]
 800fbda:	e853 3f00 	ldrex	r3, [r3]
 800fbde:	613b      	str	r3, [r7, #16]
   return(result);
 800fbe0:	693b      	ldr	r3, [r7, #16]
 800fbe2:	f043 0320 	orr.w	r3, r3, #32
 800fbe6:	67bb      	str	r3, [r7, #120]	; 0x78
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	461a      	mov	r2, r3
 800fbee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fbf0:	623b      	str	r3, [r7, #32]
 800fbf2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbf4:	69f9      	ldr	r1, [r7, #28]
 800fbf6:	6a3a      	ldr	r2, [r7, #32]
 800fbf8:	e841 2300 	strex	r3, r2, [r1]
 800fbfc:	61bb      	str	r3, [r7, #24]
   return(result);
 800fbfe:	69bb      	ldr	r3, [r7, #24]
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d1e6      	bne.n	800fbd2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800fc04:	2300      	movs	r3, #0
}
 800fc06:	4618      	mov	r0, r3
 800fc08:	378c      	adds	r7, #140	; 0x8c
 800fc0a:	46bd      	mov	sp, r7
 800fc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc10:	4770      	bx	lr
 800fc12:	bf00      	nop
 800fc14:	08010445 	.word	0x08010445
 800fc18:	080100e5 	.word	0x080100e5
 800fc1c:	0800ff2d 	.word	0x0800ff2d
 800fc20:	0800fd75 	.word	0x0800fd75

0800fc24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fc24:	b480      	push	{r7}
 800fc26:	b095      	sub	sp, #84	; 0x54
 800fc28:	af00      	add	r7, sp, #0
 800fc2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc34:	e853 3f00 	ldrex	r3, [r3]
 800fc38:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800fc3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fc40:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	461a      	mov	r2, r3
 800fc48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc4a:	643b      	str	r3, [r7, #64]	; 0x40
 800fc4c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc4e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fc50:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fc52:	e841 2300 	strex	r3, r2, [r1]
 800fc56:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fc58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d1e6      	bne.n	800fc2c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	3308      	adds	r3, #8
 800fc64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc66:	6a3b      	ldr	r3, [r7, #32]
 800fc68:	e853 3f00 	ldrex	r3, [r3]
 800fc6c:	61fb      	str	r3, [r7, #28]
   return(result);
 800fc6e:	69fa      	ldr	r2, [r7, #28]
 800fc70:	4b1e      	ldr	r3, [pc, #120]	; (800fcec <UART_EndRxTransfer+0xc8>)
 800fc72:	4013      	ands	r3, r2
 800fc74:	64bb      	str	r3, [r7, #72]	; 0x48
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	3308      	adds	r3, #8
 800fc7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fc7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fc80:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fc84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fc86:	e841 2300 	strex	r3, r2, [r1]
 800fc8a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fc8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d1e5      	bne.n	800fc5e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc96:	2b01      	cmp	r3, #1
 800fc98:	d118      	bne.n	800fccc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	681b      	ldr	r3, [r3, #0]
 800fc9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	e853 3f00 	ldrex	r3, [r3]
 800fca6:	60bb      	str	r3, [r7, #8]
   return(result);
 800fca8:	68bb      	ldr	r3, [r7, #8]
 800fcaa:	f023 0310 	bic.w	r3, r3, #16
 800fcae:	647b      	str	r3, [r7, #68]	; 0x44
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	461a      	mov	r2, r3
 800fcb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fcb8:	61bb      	str	r3, [r7, #24]
 800fcba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcbc:	6979      	ldr	r1, [r7, #20]
 800fcbe:	69ba      	ldr	r2, [r7, #24]
 800fcc0:	e841 2300 	strex	r3, r2, [r1]
 800fcc4:	613b      	str	r3, [r7, #16]
   return(result);
 800fcc6:	693b      	ldr	r3, [r7, #16]
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d1e6      	bne.n	800fc9a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	2220      	movs	r2, #32
 800fcd0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	2200      	movs	r2, #0
 800fcd8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	2200      	movs	r2, #0
 800fcde:	675a      	str	r2, [r3, #116]	; 0x74
}
 800fce0:	bf00      	nop
 800fce2:	3754      	adds	r7, #84	; 0x54
 800fce4:	46bd      	mov	sp, r7
 800fce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcea:	4770      	bx	lr
 800fcec:	effffffe 	.word	0xeffffffe

0800fcf0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800fcf0:	b580      	push	{r7, lr}
 800fcf2:	b084      	sub	sp, #16
 800fcf4:	af00      	add	r7, sp, #0
 800fcf6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fcfc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	2200      	movs	r2, #0
 800fd02:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800fd06:	68fb      	ldr	r3, [r7, #12]
 800fd08:	2200      	movs	r2, #0
 800fd0a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fd0e:	68f8      	ldr	r0, [r7, #12]
 800fd10:	f7fe ff2e 	bl	800eb70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fd14:	bf00      	nop
 800fd16:	3710      	adds	r7, #16
 800fd18:	46bd      	mov	sp, r7
 800fd1a:	bd80      	pop	{r7, pc}

0800fd1c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800fd1c:	b580      	push	{r7, lr}
 800fd1e:	b088      	sub	sp, #32
 800fd20:	af00      	add	r7, sp, #0
 800fd22:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	e853 3f00 	ldrex	r3, [r3]
 800fd30:	60bb      	str	r3, [r7, #8]
   return(result);
 800fd32:	68bb      	ldr	r3, [r7, #8]
 800fd34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fd38:	61fb      	str	r3, [r7, #28]
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	681b      	ldr	r3, [r3, #0]
 800fd3e:	461a      	mov	r2, r3
 800fd40:	69fb      	ldr	r3, [r7, #28]
 800fd42:	61bb      	str	r3, [r7, #24]
 800fd44:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd46:	6979      	ldr	r1, [r7, #20]
 800fd48:	69ba      	ldr	r2, [r7, #24]
 800fd4a:	e841 2300 	strex	r3, r2, [r1]
 800fd4e:	613b      	str	r3, [r7, #16]
   return(result);
 800fd50:	693b      	ldr	r3, [r7, #16]
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d1e6      	bne.n	800fd24 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	2220      	movs	r2, #32
 800fd5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	2200      	movs	r2, #0
 800fd62:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800fd64:	6878      	ldr	r0, [r7, #4]
 800fd66:	f7fe fef9 	bl	800eb5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fd6a:	bf00      	nop
 800fd6c:	3720      	adds	r7, #32
 800fd6e:	46bd      	mov	sp, r7
 800fd70:	bd80      	pop	{r7, pc}
	...

0800fd74 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800fd74:	b580      	push	{r7, lr}
 800fd76:	b09c      	sub	sp, #112	; 0x70
 800fd78:	af00      	add	r7, sp, #0
 800fd7a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fd82:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fd8c:	2b22      	cmp	r3, #34	; 0x22
 800fd8e:	f040 80be 	bne.w	800ff0e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd98:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800fd9c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800fda0:	b2d9      	uxtb	r1, r3
 800fda2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800fda6:	b2da      	uxtb	r2, r3
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fdac:	400a      	ands	r2, r1
 800fdae:	b2d2      	uxtb	r2, r2
 800fdb0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fdb6:	1c5a      	adds	r2, r3, #1
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fdc2:	b29b      	uxth	r3, r3
 800fdc4:	3b01      	subs	r3, #1
 800fdc6:	b29a      	uxth	r2, r3
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fdd4:	b29b      	uxth	r3, r3
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	f040 80a1 	bne.w	800ff1e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fde2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fde4:	e853 3f00 	ldrex	r3, [r3]
 800fde8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800fdea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fdec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fdf0:	66bb      	str	r3, [r7, #104]	; 0x68
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	461a      	mov	r2, r3
 800fdf8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fdfa:	65bb      	str	r3, [r7, #88]	; 0x58
 800fdfc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdfe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fe00:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fe02:	e841 2300 	strex	r3, r2, [r1]
 800fe06:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800fe08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d1e6      	bne.n	800fddc <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	3308      	adds	r3, #8
 800fe14:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe18:	e853 3f00 	ldrex	r3, [r3]
 800fe1c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800fe1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe20:	f023 0301 	bic.w	r3, r3, #1
 800fe24:	667b      	str	r3, [r7, #100]	; 0x64
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	3308      	adds	r3, #8
 800fe2c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800fe2e:	647a      	str	r2, [r7, #68]	; 0x44
 800fe30:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe32:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fe34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fe36:	e841 2300 	strex	r3, r2, [r1]
 800fe3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800fe3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d1e5      	bne.n	800fe0e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	2220      	movs	r2, #32
 800fe46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	2200      	movs	r2, #0
 800fe4e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	2200      	movs	r2, #0
 800fe54:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	4a33      	ldr	r2, [pc, #204]	; (800ff28 <UART_RxISR_8BIT+0x1b4>)
 800fe5c:	4293      	cmp	r3, r2
 800fe5e:	d01f      	beq.n	800fea0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	685b      	ldr	r3, [r3, #4]
 800fe66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d018      	beq.n	800fea0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	681b      	ldr	r3, [r3, #0]
 800fe72:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe76:	e853 3f00 	ldrex	r3, [r3]
 800fe7a:	623b      	str	r3, [r7, #32]
   return(result);
 800fe7c:	6a3b      	ldr	r3, [r7, #32]
 800fe7e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800fe82:	663b      	str	r3, [r7, #96]	; 0x60
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	461a      	mov	r2, r3
 800fe8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fe8c:	633b      	str	r3, [r7, #48]	; 0x30
 800fe8e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe90:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fe92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fe94:	e841 2300 	strex	r3, r2, [r1]
 800fe98:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fe9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d1e6      	bne.n	800fe6e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fea4:	2b01      	cmp	r3, #1
 800fea6:	d12e      	bne.n	800ff06 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	2200      	movs	r2, #0
 800feac:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800feb4:	693b      	ldr	r3, [r7, #16]
 800feb6:	e853 3f00 	ldrex	r3, [r3]
 800feba:	60fb      	str	r3, [r7, #12]
   return(result);
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	f023 0310 	bic.w	r3, r3, #16
 800fec2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	461a      	mov	r2, r3
 800feca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fecc:	61fb      	str	r3, [r7, #28]
 800fece:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fed0:	69b9      	ldr	r1, [r7, #24]
 800fed2:	69fa      	ldr	r2, [r7, #28]
 800fed4:	e841 2300 	strex	r3, r2, [r1]
 800fed8:	617b      	str	r3, [r7, #20]
   return(result);
 800feda:	697b      	ldr	r3, [r7, #20]
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d1e6      	bne.n	800feae <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	69db      	ldr	r3, [r3, #28]
 800fee6:	f003 0310 	and.w	r3, r3, #16
 800feea:	2b10      	cmp	r3, #16
 800feec:	d103      	bne.n	800fef6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	2210      	movs	r2, #16
 800fef4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fefc:	4619      	mov	r1, r3
 800fefe:	6878      	ldr	r0, [r7, #4]
 800ff00:	f7fe fe40 	bl	800eb84 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ff04:	e00b      	b.n	800ff1e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800ff06:	6878      	ldr	r0, [r7, #4]
 800ff08:	f7f0 fbf2 	bl	80006f0 <HAL_UART_RxCpltCallback>
}
 800ff0c:	e007      	b.n	800ff1e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	699a      	ldr	r2, [r3, #24]
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	f042 0208 	orr.w	r2, r2, #8
 800ff1c:	619a      	str	r2, [r3, #24]
}
 800ff1e:	bf00      	nop
 800ff20:	3770      	adds	r7, #112	; 0x70
 800ff22:	46bd      	mov	sp, r7
 800ff24:	bd80      	pop	{r7, pc}
 800ff26:	bf00      	nop
 800ff28:	58000c00 	.word	0x58000c00

0800ff2c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800ff2c:	b580      	push	{r7, lr}
 800ff2e:	b09c      	sub	sp, #112	; 0x70
 800ff30:	af00      	add	r7, sp, #0
 800ff32:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ff3a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ff44:	2b22      	cmp	r3, #34	; 0x22
 800ff46:	f040 80be 	bne.w	80100c6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	681b      	ldr	r3, [r3, #0]
 800ff4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff50:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ff58:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800ff5a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800ff5e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800ff62:	4013      	ands	r3, r2
 800ff64:	b29a      	uxth	r2, r3
 800ff66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ff68:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ff6e:	1c9a      	adds	r2, r3, #2
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ff7a:	b29b      	uxth	r3, r3
 800ff7c:	3b01      	subs	r3, #1
 800ff7e:	b29a      	uxth	r2, r3
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ff8c:	b29b      	uxth	r3, r3
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	f040 80a1 	bne.w	80100d6 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff9c:	e853 3f00 	ldrex	r3, [r3]
 800ffa0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800ffa2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ffa4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ffa8:	667b      	str	r3, [r7, #100]	; 0x64
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	461a      	mov	r2, r3
 800ffb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ffb2:	657b      	str	r3, [r7, #84]	; 0x54
 800ffb4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ffb6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ffb8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ffba:	e841 2300 	strex	r3, r2, [r1]
 800ffbe:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ffc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	d1e6      	bne.n	800ff94 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	3308      	adds	r3, #8
 800ffcc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffd0:	e853 3f00 	ldrex	r3, [r3]
 800ffd4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ffd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffd8:	f023 0301 	bic.w	r3, r3, #1
 800ffdc:	663b      	str	r3, [r7, #96]	; 0x60
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	3308      	adds	r3, #8
 800ffe4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ffe6:	643a      	str	r2, [r7, #64]	; 0x40
 800ffe8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ffea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ffec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ffee:	e841 2300 	strex	r3, r2, [r1]
 800fff2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d1e5      	bne.n	800ffc6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	2220      	movs	r2, #32
 800fffe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	2200      	movs	r2, #0
 8010006:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	2200      	movs	r2, #0
 801000c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	4a33      	ldr	r2, [pc, #204]	; (80100e0 <UART_RxISR_16BIT+0x1b4>)
 8010014:	4293      	cmp	r3, r2
 8010016:	d01f      	beq.n	8010058 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	685b      	ldr	r3, [r3, #4]
 801001e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010022:	2b00      	cmp	r3, #0
 8010024:	d018      	beq.n	8010058 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801002c:	6a3b      	ldr	r3, [r7, #32]
 801002e:	e853 3f00 	ldrex	r3, [r3]
 8010032:	61fb      	str	r3, [r7, #28]
   return(result);
 8010034:	69fb      	ldr	r3, [r7, #28]
 8010036:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801003a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	461a      	mov	r2, r3
 8010042:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010044:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010046:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010048:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801004a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801004c:	e841 2300 	strex	r3, r2, [r1]
 8010050:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010054:	2b00      	cmp	r3, #0
 8010056:	d1e6      	bne.n	8010026 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801005c:	2b01      	cmp	r3, #1
 801005e:	d12e      	bne.n	80100be <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	2200      	movs	r2, #0
 8010064:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801006c:	68fb      	ldr	r3, [r7, #12]
 801006e:	e853 3f00 	ldrex	r3, [r3]
 8010072:	60bb      	str	r3, [r7, #8]
   return(result);
 8010074:	68bb      	ldr	r3, [r7, #8]
 8010076:	f023 0310 	bic.w	r3, r3, #16
 801007a:	65bb      	str	r3, [r7, #88]	; 0x58
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	461a      	mov	r2, r3
 8010082:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010084:	61bb      	str	r3, [r7, #24]
 8010086:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010088:	6979      	ldr	r1, [r7, #20]
 801008a:	69ba      	ldr	r2, [r7, #24]
 801008c:	e841 2300 	strex	r3, r2, [r1]
 8010090:	613b      	str	r3, [r7, #16]
   return(result);
 8010092:	693b      	ldr	r3, [r7, #16]
 8010094:	2b00      	cmp	r3, #0
 8010096:	d1e6      	bne.n	8010066 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	69db      	ldr	r3, [r3, #28]
 801009e:	f003 0310 	and.w	r3, r3, #16
 80100a2:	2b10      	cmp	r3, #16
 80100a4:	d103      	bne.n	80100ae <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	2210      	movs	r2, #16
 80100ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80100b4:	4619      	mov	r1, r3
 80100b6:	6878      	ldr	r0, [r7, #4]
 80100b8:	f7fe fd64 	bl	800eb84 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80100bc:	e00b      	b.n	80100d6 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80100be:	6878      	ldr	r0, [r7, #4]
 80100c0:	f7f0 fb16 	bl	80006f0 <HAL_UART_RxCpltCallback>
}
 80100c4:	e007      	b.n	80100d6 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	699a      	ldr	r2, [r3, #24]
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	f042 0208 	orr.w	r2, r2, #8
 80100d4:	619a      	str	r2, [r3, #24]
}
 80100d6:	bf00      	nop
 80100d8:	3770      	adds	r7, #112	; 0x70
 80100da:	46bd      	mov	sp, r7
 80100dc:	bd80      	pop	{r7, pc}
 80100de:	bf00      	nop
 80100e0:	58000c00 	.word	0x58000c00

080100e4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80100e4:	b580      	push	{r7, lr}
 80100e6:	b0ac      	sub	sp, #176	; 0xb0
 80100e8:	af00      	add	r7, sp, #0
 80100ea:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80100f2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	69db      	ldr	r3, [r3, #28]
 80100fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	689b      	ldr	r3, [r3, #8]
 8010110:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801011a:	2b22      	cmp	r3, #34	; 0x22
 801011c:	f040 8180 	bne.w	8010420 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010126:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801012a:	e123      	b.n	8010374 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010132:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8010136:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 801013a:	b2d9      	uxtb	r1, r3
 801013c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8010140:	b2da      	uxtb	r2, r3
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010146:	400a      	ands	r2, r1
 8010148:	b2d2      	uxtb	r2, r2
 801014a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010150:	1c5a      	adds	r2, r3, #1
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801015c:	b29b      	uxth	r3, r3
 801015e:	3b01      	subs	r3, #1
 8010160:	b29a      	uxth	r2, r3
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	69db      	ldr	r3, [r3, #28]
 801016e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8010172:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010176:	f003 0307 	and.w	r3, r3, #7
 801017a:	2b00      	cmp	r3, #0
 801017c:	d053      	beq.n	8010226 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801017e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010182:	f003 0301 	and.w	r3, r3, #1
 8010186:	2b00      	cmp	r3, #0
 8010188:	d011      	beq.n	80101ae <UART_RxISR_8BIT_FIFOEN+0xca>
 801018a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801018e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010192:	2b00      	cmp	r3, #0
 8010194:	d00b      	beq.n	80101ae <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	2201      	movs	r2, #1
 801019c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80101a4:	f043 0201 	orr.w	r2, r3, #1
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80101ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80101b2:	f003 0302 	and.w	r3, r3, #2
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d011      	beq.n	80101de <UART_RxISR_8BIT_FIFOEN+0xfa>
 80101ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80101be:	f003 0301 	and.w	r3, r3, #1
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d00b      	beq.n	80101de <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	2202      	movs	r2, #2
 80101cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80101d4:	f043 0204 	orr.w	r2, r3, #4
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80101de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80101e2:	f003 0304 	and.w	r3, r3, #4
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d011      	beq.n	801020e <UART_RxISR_8BIT_FIFOEN+0x12a>
 80101ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80101ee:	f003 0301 	and.w	r3, r3, #1
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d00b      	beq.n	801020e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	2204      	movs	r2, #4
 80101fc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010204:	f043 0202 	orr.w	r2, r3, #2
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010214:	2b00      	cmp	r3, #0
 8010216:	d006      	beq.n	8010226 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010218:	6878      	ldr	r0, [r7, #4]
 801021a:	f7fe fca9 	bl	800eb70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	2200      	movs	r2, #0
 8010222:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801022c:	b29b      	uxth	r3, r3
 801022e:	2b00      	cmp	r3, #0
 8010230:	f040 80a0 	bne.w	8010374 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801023a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801023c:	e853 3f00 	ldrex	r3, [r3]
 8010240:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8010242:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010244:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010248:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	461a      	mov	r2, r3
 8010252:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010256:	67fb      	str	r3, [r7, #124]	; 0x7c
 8010258:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801025a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 801025c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801025e:	e841 2300 	strex	r3, r2, [r1]
 8010262:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8010264:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010266:	2b00      	cmp	r3, #0
 8010268:	d1e4      	bne.n	8010234 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	3308      	adds	r3, #8
 8010270:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010272:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010274:	e853 3f00 	ldrex	r3, [r3]
 8010278:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 801027a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801027c:	4b6e      	ldr	r3, [pc, #440]	; (8010438 <UART_RxISR_8BIT_FIFOEN+0x354>)
 801027e:	4013      	ands	r3, r2
 8010280:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	3308      	adds	r3, #8
 801028a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801028e:	66ba      	str	r2, [r7, #104]	; 0x68
 8010290:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010292:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8010294:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010296:	e841 2300 	strex	r3, r2, [r1]
 801029a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 801029c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d1e3      	bne.n	801026a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	2220      	movs	r2, #32
 80102a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	2200      	movs	r2, #0
 80102ae:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	2200      	movs	r2, #0
 80102b4:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	4a60      	ldr	r2, [pc, #384]	; (801043c <UART_RxISR_8BIT_FIFOEN+0x358>)
 80102bc:	4293      	cmp	r3, r2
 80102be:	d021      	beq.n	8010304 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	685b      	ldr	r3, [r3, #4]
 80102c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d01a      	beq.n	8010304 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80102d6:	e853 3f00 	ldrex	r3, [r3]
 80102da:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80102dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80102de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80102e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	461a      	mov	r2, r3
 80102ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80102f0:	657b      	str	r3, [r7, #84]	; 0x54
 80102f2:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102f4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80102f6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80102f8:	e841 2300 	strex	r3, r2, [r1]
 80102fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80102fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010300:	2b00      	cmp	r3, #0
 8010302:	d1e4      	bne.n	80102ce <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010308:	2b01      	cmp	r3, #1
 801030a:	d130      	bne.n	801036e <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	2200      	movs	r2, #0
 8010310:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	681b      	ldr	r3, [r3, #0]
 8010316:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801031a:	e853 3f00 	ldrex	r3, [r3]
 801031e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010322:	f023 0310 	bic.w	r3, r3, #16
 8010326:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	461a      	mov	r2, r3
 8010330:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010334:	643b      	str	r3, [r7, #64]	; 0x40
 8010336:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010338:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801033a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801033c:	e841 2300 	strex	r3, r2, [r1]
 8010340:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010344:	2b00      	cmp	r3, #0
 8010346:	d1e4      	bne.n	8010312 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	69db      	ldr	r3, [r3, #28]
 801034e:	f003 0310 	and.w	r3, r3, #16
 8010352:	2b10      	cmp	r3, #16
 8010354:	d103      	bne.n	801035e <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	681b      	ldr	r3, [r3, #0]
 801035a:	2210      	movs	r2, #16
 801035c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010364:	4619      	mov	r1, r3
 8010366:	6878      	ldr	r0, [r7, #4]
 8010368:	f7fe fc0c 	bl	800eb84 <HAL_UARTEx_RxEventCallback>
 801036c:	e002      	b.n	8010374 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 801036e:	6878      	ldr	r0, [r7, #4]
 8010370:	f7f0 f9be 	bl	80006f0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010374:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8010378:	2b00      	cmp	r3, #0
 801037a:	d006      	beq.n	801038a <UART_RxISR_8BIT_FIFOEN+0x2a6>
 801037c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010380:	f003 0320 	and.w	r3, r3, #32
 8010384:	2b00      	cmp	r3, #0
 8010386:	f47f aed1 	bne.w	801012c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010390:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8010394:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8010398:	2b00      	cmp	r3, #0
 801039a:	d049      	beq.n	8010430 <UART_RxISR_8BIT_FIFOEN+0x34c>
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80103a2:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80103a6:	429a      	cmp	r2, r3
 80103a8:	d242      	bcs.n	8010430 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	681b      	ldr	r3, [r3, #0]
 80103ae:	3308      	adds	r3, #8
 80103b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103b2:	6a3b      	ldr	r3, [r7, #32]
 80103b4:	e853 3f00 	ldrex	r3, [r3]
 80103b8:	61fb      	str	r3, [r7, #28]
   return(result);
 80103ba:	69fb      	ldr	r3, [r7, #28]
 80103bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80103c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	3308      	adds	r3, #8
 80103ca:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80103ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80103d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80103d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80103d6:	e841 2300 	strex	r3, r2, [r1]
 80103da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80103dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d1e3      	bne.n	80103aa <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	4a16      	ldr	r2, [pc, #88]	; (8010440 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80103e6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	e853 3f00 	ldrex	r3, [r3]
 80103f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80103f6:	68bb      	ldr	r3, [r7, #8]
 80103f8:	f043 0320 	orr.w	r3, r3, #32
 80103fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	461a      	mov	r2, r3
 8010406:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801040a:	61bb      	str	r3, [r7, #24]
 801040c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801040e:	6979      	ldr	r1, [r7, #20]
 8010410:	69ba      	ldr	r2, [r7, #24]
 8010412:	e841 2300 	strex	r3, r2, [r1]
 8010416:	613b      	str	r3, [r7, #16]
   return(result);
 8010418:	693b      	ldr	r3, [r7, #16]
 801041a:	2b00      	cmp	r3, #0
 801041c:	d1e4      	bne.n	80103e8 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801041e:	e007      	b.n	8010430 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	681b      	ldr	r3, [r3, #0]
 8010424:	699a      	ldr	r2, [r3, #24]
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	f042 0208 	orr.w	r2, r2, #8
 801042e:	619a      	str	r2, [r3, #24]
}
 8010430:	bf00      	nop
 8010432:	37b0      	adds	r7, #176	; 0xb0
 8010434:	46bd      	mov	sp, r7
 8010436:	bd80      	pop	{r7, pc}
 8010438:	effffffe 	.word	0xeffffffe
 801043c:	58000c00 	.word	0x58000c00
 8010440:	0800fd75 	.word	0x0800fd75

08010444 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010444:	b580      	push	{r7, lr}
 8010446:	b0ae      	sub	sp, #184	; 0xb8
 8010448:	af00      	add	r7, sp, #0
 801044a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010452:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	69db      	ldr	r3, [r3, #28]
 801045c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	689b      	ldr	r3, [r3, #8]
 8010470:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801047a:	2b22      	cmp	r3, #34	; 0x22
 801047c:	f040 8184 	bne.w	8010788 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010486:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801048a:	e127      	b.n	80106dc <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010492:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801049a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 801049e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80104a2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80104a6:	4013      	ands	r3, r2
 80104a8:	b29a      	uxth	r2, r3
 80104aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80104ae:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80104b4:	1c9a      	adds	r2, r3, #2
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80104c0:	b29b      	uxth	r3, r3
 80104c2:	3b01      	subs	r3, #1
 80104c4:	b29a      	uxth	r2, r3
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	69db      	ldr	r3, [r3, #28]
 80104d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80104d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80104da:	f003 0307 	and.w	r3, r3, #7
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d053      	beq.n	801058a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80104e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80104e6:	f003 0301 	and.w	r3, r3, #1
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d011      	beq.n	8010512 <UART_RxISR_16BIT_FIFOEN+0xce>
 80104ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80104f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d00b      	beq.n	8010512 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	681b      	ldr	r3, [r3, #0]
 80104fe:	2201      	movs	r2, #1
 8010500:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010508:	f043 0201 	orr.w	r2, r3, #1
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010512:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010516:	f003 0302 	and.w	r3, r3, #2
 801051a:	2b00      	cmp	r3, #0
 801051c:	d011      	beq.n	8010542 <UART_RxISR_16BIT_FIFOEN+0xfe>
 801051e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010522:	f003 0301 	and.w	r3, r3, #1
 8010526:	2b00      	cmp	r3, #0
 8010528:	d00b      	beq.n	8010542 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	681b      	ldr	r3, [r3, #0]
 801052e:	2202      	movs	r2, #2
 8010530:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010538:	f043 0204 	orr.w	r2, r3, #4
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010542:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010546:	f003 0304 	and.w	r3, r3, #4
 801054a:	2b00      	cmp	r3, #0
 801054c:	d011      	beq.n	8010572 <UART_RxISR_16BIT_FIFOEN+0x12e>
 801054e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010552:	f003 0301 	and.w	r3, r3, #1
 8010556:	2b00      	cmp	r3, #0
 8010558:	d00b      	beq.n	8010572 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	681b      	ldr	r3, [r3, #0]
 801055e:	2204      	movs	r2, #4
 8010560:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010568:	f043 0202 	orr.w	r2, r3, #2
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010578:	2b00      	cmp	r3, #0
 801057a:	d006      	beq.n	801058a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801057c:	6878      	ldr	r0, [r7, #4]
 801057e:	f7fe faf7 	bl	800eb70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	2200      	movs	r2, #0
 8010586:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010590:	b29b      	uxth	r3, r3
 8010592:	2b00      	cmp	r3, #0
 8010594:	f040 80a2 	bne.w	80106dc <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801059e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80105a0:	e853 3f00 	ldrex	r3, [r3]
 80105a4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80105a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80105a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80105ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	461a      	mov	r2, r3
 80105b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80105ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80105be:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105c0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80105c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80105c6:	e841 2300 	strex	r3, r2, [r1]
 80105ca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80105cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d1e2      	bne.n	8010598 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	3308      	adds	r3, #8
 80105d8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80105dc:	e853 3f00 	ldrex	r3, [r3]
 80105e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80105e2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80105e4:	4b6e      	ldr	r3, [pc, #440]	; (80107a0 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 80105e6:	4013      	ands	r3, r2
 80105e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	3308      	adds	r3, #8
 80105f2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80105f6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80105f8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105fa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80105fc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80105fe:	e841 2300 	strex	r3, r2, [r1]
 8010602:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010604:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010606:	2b00      	cmp	r3, #0
 8010608:	d1e3      	bne.n	80105d2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	2220      	movs	r2, #32
 801060e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	2200      	movs	r2, #0
 8010616:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	2200      	movs	r2, #0
 801061c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	4a60      	ldr	r2, [pc, #384]	; (80107a4 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8010624:	4293      	cmp	r3, r2
 8010626:	d021      	beq.n	801066c <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	685b      	ldr	r3, [r3, #4]
 801062e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010632:	2b00      	cmp	r3, #0
 8010634:	d01a      	beq.n	801066c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801063c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801063e:	e853 3f00 	ldrex	r3, [r3]
 8010642:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010644:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010646:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801064a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	461a      	mov	r2, r3
 8010654:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010658:	65bb      	str	r3, [r7, #88]	; 0x58
 801065a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801065c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801065e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010660:	e841 2300 	strex	r3, r2, [r1]
 8010664:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010666:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010668:	2b00      	cmp	r3, #0
 801066a:	d1e4      	bne.n	8010636 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010670:	2b01      	cmp	r3, #1
 8010672:	d130      	bne.n	80106d6 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	2200      	movs	r2, #0
 8010678:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010682:	e853 3f00 	ldrex	r3, [r3]
 8010686:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801068a:	f023 0310 	bic.w	r3, r3, #16
 801068e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	461a      	mov	r2, r3
 8010698:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801069c:	647b      	str	r3, [r7, #68]	; 0x44
 801069e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106a0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80106a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80106a4:	e841 2300 	strex	r3, r2, [r1]
 80106a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80106aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d1e4      	bne.n	801067a <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	69db      	ldr	r3, [r3, #28]
 80106b6:	f003 0310 	and.w	r3, r3, #16
 80106ba:	2b10      	cmp	r3, #16
 80106bc:	d103      	bne.n	80106c6 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	2210      	movs	r2, #16
 80106c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80106cc:	4619      	mov	r1, r3
 80106ce:	6878      	ldr	r0, [r7, #4]
 80106d0:	f7fe fa58 	bl	800eb84 <HAL_UARTEx_RxEventCallback>
 80106d4:	e002      	b.n	80106dc <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80106d6:	6878      	ldr	r0, [r7, #4]
 80106d8:	f7f0 f80a 	bl	80006f0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80106dc:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d006      	beq.n	80106f2 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 80106e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80106e8:	f003 0320 	and.w	r3, r3, #32
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	f47f aecd 	bne.w	801048c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80106f8:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80106fc:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8010700:	2b00      	cmp	r3, #0
 8010702:	d049      	beq.n	8010798 <UART_RxISR_16BIT_FIFOEN+0x354>
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801070a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 801070e:	429a      	cmp	r2, r3
 8010710:	d242      	bcs.n	8010798 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	3308      	adds	r3, #8
 8010718:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801071a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801071c:	e853 3f00 	ldrex	r3, [r3]
 8010720:	623b      	str	r3, [r7, #32]
   return(result);
 8010722:	6a3b      	ldr	r3, [r7, #32]
 8010724:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010728:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	3308      	adds	r3, #8
 8010732:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8010736:	633a      	str	r2, [r7, #48]	; 0x30
 8010738:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801073a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801073c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801073e:	e841 2300 	strex	r3, r2, [r1]
 8010742:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010746:	2b00      	cmp	r3, #0
 8010748:	d1e3      	bne.n	8010712 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	4a16      	ldr	r2, [pc, #88]	; (80107a8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 801074e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010756:	693b      	ldr	r3, [r7, #16]
 8010758:	e853 3f00 	ldrex	r3, [r3]
 801075c:	60fb      	str	r3, [r7, #12]
   return(result);
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	f043 0320 	orr.w	r3, r3, #32
 8010764:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	461a      	mov	r2, r3
 801076e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010772:	61fb      	str	r3, [r7, #28]
 8010774:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010776:	69b9      	ldr	r1, [r7, #24]
 8010778:	69fa      	ldr	r2, [r7, #28]
 801077a:	e841 2300 	strex	r3, r2, [r1]
 801077e:	617b      	str	r3, [r7, #20]
   return(result);
 8010780:	697b      	ldr	r3, [r7, #20]
 8010782:	2b00      	cmp	r3, #0
 8010784:	d1e4      	bne.n	8010750 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010786:	e007      	b.n	8010798 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	699a      	ldr	r2, [r3, #24]
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	681b      	ldr	r3, [r3, #0]
 8010792:	f042 0208 	orr.w	r2, r2, #8
 8010796:	619a      	str	r2, [r3, #24]
}
 8010798:	bf00      	nop
 801079a:	37b8      	adds	r7, #184	; 0xb8
 801079c:	46bd      	mov	sp, r7
 801079e:	bd80      	pop	{r7, pc}
 80107a0:	effffffe 	.word	0xeffffffe
 80107a4:	58000c00 	.word	0x58000c00
 80107a8:	0800ff2d 	.word	0x0800ff2d

080107ac <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80107ac:	b480      	push	{r7}
 80107ae:	b083      	sub	sp, #12
 80107b0:	af00      	add	r7, sp, #0
 80107b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80107b4:	bf00      	nop
 80107b6:	370c      	adds	r7, #12
 80107b8:	46bd      	mov	sp, r7
 80107ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107be:	4770      	bx	lr

080107c0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80107c0:	b480      	push	{r7}
 80107c2:	b083      	sub	sp, #12
 80107c4:	af00      	add	r7, sp, #0
 80107c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80107c8:	bf00      	nop
 80107ca:	370c      	adds	r7, #12
 80107cc:	46bd      	mov	sp, r7
 80107ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107d2:	4770      	bx	lr

080107d4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80107d4:	b480      	push	{r7}
 80107d6:	b083      	sub	sp, #12
 80107d8:	af00      	add	r7, sp, #0
 80107da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80107dc:	bf00      	nop
 80107de:	370c      	adds	r7, #12
 80107e0:	46bd      	mov	sp, r7
 80107e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107e6:	4770      	bx	lr

080107e8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80107e8:	b480      	push	{r7}
 80107ea:	b085      	sub	sp, #20
 80107ec:	af00      	add	r7, sp, #0
 80107ee:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80107f6:	2b01      	cmp	r3, #1
 80107f8:	d101      	bne.n	80107fe <HAL_UARTEx_DisableFifoMode+0x16>
 80107fa:	2302      	movs	r3, #2
 80107fc:	e027      	b.n	801084e <HAL_UARTEx_DisableFifoMode+0x66>
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	2201      	movs	r2, #1
 8010802:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	2224      	movs	r2, #36	; 0x24
 801080a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	681b      	ldr	r3, [r3, #0]
 8010814:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	681a      	ldr	r2, [r3, #0]
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	681b      	ldr	r3, [r3, #0]
 8010820:	f022 0201 	bic.w	r2, r2, #1
 8010824:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010826:	68fb      	ldr	r3, [r7, #12]
 8010828:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801082c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	2200      	movs	r2, #0
 8010832:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	681b      	ldr	r3, [r3, #0]
 8010838:	68fa      	ldr	r2, [r7, #12]
 801083a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	2220      	movs	r2, #32
 8010840:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	2200      	movs	r2, #0
 8010848:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801084c:	2300      	movs	r3, #0
}
 801084e:	4618      	mov	r0, r3
 8010850:	3714      	adds	r7, #20
 8010852:	46bd      	mov	sp, r7
 8010854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010858:	4770      	bx	lr

0801085a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801085a:	b580      	push	{r7, lr}
 801085c:	b084      	sub	sp, #16
 801085e:	af00      	add	r7, sp, #0
 8010860:	6078      	str	r0, [r7, #4]
 8010862:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801086a:	2b01      	cmp	r3, #1
 801086c:	d101      	bne.n	8010872 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801086e:	2302      	movs	r3, #2
 8010870:	e02d      	b.n	80108ce <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	2201      	movs	r2, #1
 8010876:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	2224      	movs	r2, #36	; 0x24
 801087e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	681b      	ldr	r3, [r3, #0]
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	681a      	ldr	r2, [r3, #0]
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	f022 0201 	bic.w	r2, r2, #1
 8010898:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	681b      	ldr	r3, [r3, #0]
 801089e:	689b      	ldr	r3, [r3, #8]
 80108a0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	681b      	ldr	r3, [r3, #0]
 80108a8:	683a      	ldr	r2, [r7, #0]
 80108aa:	430a      	orrs	r2, r1
 80108ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80108ae:	6878      	ldr	r0, [r7, #4]
 80108b0:	f000 f850 	bl	8010954 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	68fa      	ldr	r2, [r7, #12]
 80108ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	2220      	movs	r2, #32
 80108c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	2200      	movs	r2, #0
 80108c8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80108cc:	2300      	movs	r3, #0
}
 80108ce:	4618      	mov	r0, r3
 80108d0:	3710      	adds	r7, #16
 80108d2:	46bd      	mov	sp, r7
 80108d4:	bd80      	pop	{r7, pc}

080108d6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80108d6:	b580      	push	{r7, lr}
 80108d8:	b084      	sub	sp, #16
 80108da:	af00      	add	r7, sp, #0
 80108dc:	6078      	str	r0, [r7, #4]
 80108de:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80108e6:	2b01      	cmp	r3, #1
 80108e8:	d101      	bne.n	80108ee <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80108ea:	2302      	movs	r3, #2
 80108ec:	e02d      	b.n	801094a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	2201      	movs	r2, #1
 80108f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	2224      	movs	r2, #36	; 0x24
 80108fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	681a      	ldr	r2, [r3, #0]
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	681b      	ldr	r3, [r3, #0]
 8010910:	f022 0201 	bic.w	r2, r2, #1
 8010914:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	689b      	ldr	r3, [r3, #8]
 801091c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	683a      	ldr	r2, [r7, #0]
 8010926:	430a      	orrs	r2, r1
 8010928:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801092a:	6878      	ldr	r0, [r7, #4]
 801092c:	f000 f812 	bl	8010954 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	68fa      	ldr	r2, [r7, #12]
 8010936:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	2220      	movs	r2, #32
 801093c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	2200      	movs	r2, #0
 8010944:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8010948:	2300      	movs	r3, #0
}
 801094a:	4618      	mov	r0, r3
 801094c:	3710      	adds	r7, #16
 801094e:	46bd      	mov	sp, r7
 8010950:	bd80      	pop	{r7, pc}
	...

08010954 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010954:	b480      	push	{r7}
 8010956:	b085      	sub	sp, #20
 8010958:	af00      	add	r7, sp, #0
 801095a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010960:	2b00      	cmp	r3, #0
 8010962:	d108      	bne.n	8010976 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	2201      	movs	r2, #1
 8010968:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	2201      	movs	r2, #1
 8010970:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010974:	e031      	b.n	80109da <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010976:	2310      	movs	r3, #16
 8010978:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801097a:	2310      	movs	r3, #16
 801097c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	681b      	ldr	r3, [r3, #0]
 8010982:	689b      	ldr	r3, [r3, #8]
 8010984:	0e5b      	lsrs	r3, r3, #25
 8010986:	b2db      	uxtb	r3, r3
 8010988:	f003 0307 	and.w	r3, r3, #7
 801098c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	681b      	ldr	r3, [r3, #0]
 8010992:	689b      	ldr	r3, [r3, #8]
 8010994:	0f5b      	lsrs	r3, r3, #29
 8010996:	b2db      	uxtb	r3, r3
 8010998:	f003 0307 	and.w	r3, r3, #7
 801099c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801099e:	7bbb      	ldrb	r3, [r7, #14]
 80109a0:	7b3a      	ldrb	r2, [r7, #12]
 80109a2:	4911      	ldr	r1, [pc, #68]	; (80109e8 <UARTEx_SetNbDataToProcess+0x94>)
 80109a4:	5c8a      	ldrb	r2, [r1, r2]
 80109a6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80109aa:	7b3a      	ldrb	r2, [r7, #12]
 80109ac:	490f      	ldr	r1, [pc, #60]	; (80109ec <UARTEx_SetNbDataToProcess+0x98>)
 80109ae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80109b0:	fb93 f3f2 	sdiv	r3, r3, r2
 80109b4:	b29a      	uxth	r2, r3
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80109bc:	7bfb      	ldrb	r3, [r7, #15]
 80109be:	7b7a      	ldrb	r2, [r7, #13]
 80109c0:	4909      	ldr	r1, [pc, #36]	; (80109e8 <UARTEx_SetNbDataToProcess+0x94>)
 80109c2:	5c8a      	ldrb	r2, [r1, r2]
 80109c4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80109c8:	7b7a      	ldrb	r2, [r7, #13]
 80109ca:	4908      	ldr	r1, [pc, #32]	; (80109ec <UARTEx_SetNbDataToProcess+0x98>)
 80109cc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80109ce:	fb93 f3f2 	sdiv	r3, r3, r2
 80109d2:	b29a      	uxth	r2, r3
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80109da:	bf00      	nop
 80109dc:	3714      	adds	r7, #20
 80109de:	46bd      	mov	sp, r7
 80109e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109e4:	4770      	bx	lr
 80109e6:	bf00      	nop
 80109e8:	08015504 	.word	0x08015504
 80109ec:	0801550c 	.word	0x0801550c

080109f0 <__NVIC_SetPriority>:
{
 80109f0:	b480      	push	{r7}
 80109f2:	b083      	sub	sp, #12
 80109f4:	af00      	add	r7, sp, #0
 80109f6:	4603      	mov	r3, r0
 80109f8:	6039      	str	r1, [r7, #0]
 80109fa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80109fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	db0a      	blt.n	8010a1a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010a04:	683b      	ldr	r3, [r7, #0]
 8010a06:	b2da      	uxtb	r2, r3
 8010a08:	490c      	ldr	r1, [pc, #48]	; (8010a3c <__NVIC_SetPriority+0x4c>)
 8010a0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010a0e:	0112      	lsls	r2, r2, #4
 8010a10:	b2d2      	uxtb	r2, r2
 8010a12:	440b      	add	r3, r1
 8010a14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8010a18:	e00a      	b.n	8010a30 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010a1a:	683b      	ldr	r3, [r7, #0]
 8010a1c:	b2da      	uxtb	r2, r3
 8010a1e:	4908      	ldr	r1, [pc, #32]	; (8010a40 <__NVIC_SetPriority+0x50>)
 8010a20:	88fb      	ldrh	r3, [r7, #6]
 8010a22:	f003 030f 	and.w	r3, r3, #15
 8010a26:	3b04      	subs	r3, #4
 8010a28:	0112      	lsls	r2, r2, #4
 8010a2a:	b2d2      	uxtb	r2, r2
 8010a2c:	440b      	add	r3, r1
 8010a2e:	761a      	strb	r2, [r3, #24]
}
 8010a30:	bf00      	nop
 8010a32:	370c      	adds	r7, #12
 8010a34:	46bd      	mov	sp, r7
 8010a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a3a:	4770      	bx	lr
 8010a3c:	e000e100 	.word	0xe000e100
 8010a40:	e000ed00 	.word	0xe000ed00

08010a44 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8010a44:	b580      	push	{r7, lr}
 8010a46:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8010a48:	4b05      	ldr	r3, [pc, #20]	; (8010a60 <SysTick_Handler+0x1c>)
 8010a4a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8010a4c:	f002 fada 	bl	8013004 <xTaskGetSchedulerState>
 8010a50:	4603      	mov	r3, r0
 8010a52:	2b01      	cmp	r3, #1
 8010a54:	d001      	beq.n	8010a5a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8010a56:	f003 f8f7 	bl	8013c48 <xPortSysTickHandler>
  }
}
 8010a5a:	bf00      	nop
 8010a5c:	bd80      	pop	{r7, pc}
 8010a5e:	bf00      	nop
 8010a60:	e000e010 	.word	0xe000e010

08010a64 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8010a64:	b580      	push	{r7, lr}
 8010a66:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8010a68:	2100      	movs	r1, #0
 8010a6a:	f06f 0004 	mvn.w	r0, #4
 8010a6e:	f7ff ffbf 	bl	80109f0 <__NVIC_SetPriority>
#endif
}
 8010a72:	bf00      	nop
 8010a74:	bd80      	pop	{r7, pc}
	...

08010a78 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8010a78:	b480      	push	{r7}
 8010a7a:	b083      	sub	sp, #12
 8010a7c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010a7e:	f3ef 8305 	mrs	r3, IPSR
 8010a82:	603b      	str	r3, [r7, #0]
  return(result);
 8010a84:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d003      	beq.n	8010a92 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8010a8a:	f06f 0305 	mvn.w	r3, #5
 8010a8e:	607b      	str	r3, [r7, #4]
 8010a90:	e00c      	b.n	8010aac <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8010a92:	4b0a      	ldr	r3, [pc, #40]	; (8010abc <osKernelInitialize+0x44>)
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d105      	bne.n	8010aa6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8010a9a:	4b08      	ldr	r3, [pc, #32]	; (8010abc <osKernelInitialize+0x44>)
 8010a9c:	2201      	movs	r2, #1
 8010a9e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8010aa0:	2300      	movs	r3, #0
 8010aa2:	607b      	str	r3, [r7, #4]
 8010aa4:	e002      	b.n	8010aac <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8010aa6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010aaa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8010aac:	687b      	ldr	r3, [r7, #4]
}
 8010aae:	4618      	mov	r0, r3
 8010ab0:	370c      	adds	r7, #12
 8010ab2:	46bd      	mov	sp, r7
 8010ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ab8:	4770      	bx	lr
 8010aba:	bf00      	nop
 8010abc:	2400077c 	.word	0x2400077c

08010ac0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8010ac0:	b580      	push	{r7, lr}
 8010ac2:	b082      	sub	sp, #8
 8010ac4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010ac6:	f3ef 8305 	mrs	r3, IPSR
 8010aca:	603b      	str	r3, [r7, #0]
  return(result);
 8010acc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d003      	beq.n	8010ada <osKernelStart+0x1a>
    stat = osErrorISR;
 8010ad2:	f06f 0305 	mvn.w	r3, #5
 8010ad6:	607b      	str	r3, [r7, #4]
 8010ad8:	e010      	b.n	8010afc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8010ada:	4b0b      	ldr	r3, [pc, #44]	; (8010b08 <osKernelStart+0x48>)
 8010adc:	681b      	ldr	r3, [r3, #0]
 8010ade:	2b01      	cmp	r3, #1
 8010ae0:	d109      	bne.n	8010af6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8010ae2:	f7ff ffbf 	bl	8010a64 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8010ae6:	4b08      	ldr	r3, [pc, #32]	; (8010b08 <osKernelStart+0x48>)
 8010ae8:	2202      	movs	r2, #2
 8010aea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8010aec:	f001 fda4 	bl	8012638 <vTaskStartScheduler>
      stat = osOK;
 8010af0:	2300      	movs	r3, #0
 8010af2:	607b      	str	r3, [r7, #4]
 8010af4:	e002      	b.n	8010afc <osKernelStart+0x3c>
    } else {
      stat = osError;
 8010af6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010afa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8010afc:	687b      	ldr	r3, [r7, #4]
}
 8010afe:	4618      	mov	r0, r3
 8010b00:	3708      	adds	r7, #8
 8010b02:	46bd      	mov	sp, r7
 8010b04:	bd80      	pop	{r7, pc}
 8010b06:	bf00      	nop
 8010b08:	2400077c 	.word	0x2400077c

08010b0c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8010b0c:	b580      	push	{r7, lr}
 8010b0e:	b08e      	sub	sp, #56	; 0x38
 8010b10:	af04      	add	r7, sp, #16
 8010b12:	60f8      	str	r0, [r7, #12]
 8010b14:	60b9      	str	r1, [r7, #8]
 8010b16:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8010b18:	2300      	movs	r3, #0
 8010b1a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010b1c:	f3ef 8305 	mrs	r3, IPSR
 8010b20:	617b      	str	r3, [r7, #20]
  return(result);
 8010b22:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d17e      	bne.n	8010c26 <osThreadNew+0x11a>
 8010b28:	68fb      	ldr	r3, [r7, #12]
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d07b      	beq.n	8010c26 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8010b2e:	2380      	movs	r3, #128	; 0x80
 8010b30:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8010b32:	2318      	movs	r3, #24
 8010b34:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8010b36:	2300      	movs	r3, #0
 8010b38:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8010b3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010b3e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d045      	beq.n	8010bd2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d002      	beq.n	8010b54 <osThreadNew+0x48>
        name = attr->name;
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	699b      	ldr	r3, [r3, #24]
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d002      	beq.n	8010b62 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	699b      	ldr	r3, [r3, #24]
 8010b60:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8010b62:	69fb      	ldr	r3, [r7, #28]
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d008      	beq.n	8010b7a <osThreadNew+0x6e>
 8010b68:	69fb      	ldr	r3, [r7, #28]
 8010b6a:	2b38      	cmp	r3, #56	; 0x38
 8010b6c:	d805      	bhi.n	8010b7a <osThreadNew+0x6e>
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	685b      	ldr	r3, [r3, #4]
 8010b72:	f003 0301 	and.w	r3, r3, #1
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d001      	beq.n	8010b7e <osThreadNew+0x72>
        return (NULL);
 8010b7a:	2300      	movs	r3, #0
 8010b7c:	e054      	b.n	8010c28 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	695b      	ldr	r3, [r3, #20]
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	d003      	beq.n	8010b8e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	695b      	ldr	r3, [r3, #20]
 8010b8a:	089b      	lsrs	r3, r3, #2
 8010b8c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	689b      	ldr	r3, [r3, #8]
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d00e      	beq.n	8010bb4 <osThreadNew+0xa8>
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	68db      	ldr	r3, [r3, #12]
 8010b9a:	2b5b      	cmp	r3, #91	; 0x5b
 8010b9c:	d90a      	bls.n	8010bb4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d006      	beq.n	8010bb4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	695b      	ldr	r3, [r3, #20]
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	d002      	beq.n	8010bb4 <osThreadNew+0xa8>
        mem = 1;
 8010bae:	2301      	movs	r3, #1
 8010bb0:	61bb      	str	r3, [r7, #24]
 8010bb2:	e010      	b.n	8010bd6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	689b      	ldr	r3, [r3, #8]
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d10c      	bne.n	8010bd6 <osThreadNew+0xca>
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	68db      	ldr	r3, [r3, #12]
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d108      	bne.n	8010bd6 <osThreadNew+0xca>
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	691b      	ldr	r3, [r3, #16]
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d104      	bne.n	8010bd6 <osThreadNew+0xca>
          mem = 0;
 8010bcc:	2300      	movs	r3, #0
 8010bce:	61bb      	str	r3, [r7, #24]
 8010bd0:	e001      	b.n	8010bd6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8010bd2:	2300      	movs	r3, #0
 8010bd4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8010bd6:	69bb      	ldr	r3, [r7, #24]
 8010bd8:	2b01      	cmp	r3, #1
 8010bda:	d110      	bne.n	8010bfe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8010be0:	687a      	ldr	r2, [r7, #4]
 8010be2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010be4:	9202      	str	r2, [sp, #8]
 8010be6:	9301      	str	r3, [sp, #4]
 8010be8:	69fb      	ldr	r3, [r7, #28]
 8010bea:	9300      	str	r3, [sp, #0]
 8010bec:	68bb      	ldr	r3, [r7, #8]
 8010bee:	6a3a      	ldr	r2, [r7, #32]
 8010bf0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010bf2:	68f8      	ldr	r0, [r7, #12]
 8010bf4:	f001 fb4a 	bl	801228c <xTaskCreateStatic>
 8010bf8:	4603      	mov	r3, r0
 8010bfa:	613b      	str	r3, [r7, #16]
 8010bfc:	e013      	b.n	8010c26 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8010bfe:	69bb      	ldr	r3, [r7, #24]
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d110      	bne.n	8010c26 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8010c04:	6a3b      	ldr	r3, [r7, #32]
 8010c06:	b29a      	uxth	r2, r3
 8010c08:	f107 0310 	add.w	r3, r7, #16
 8010c0c:	9301      	str	r3, [sp, #4]
 8010c0e:	69fb      	ldr	r3, [r7, #28]
 8010c10:	9300      	str	r3, [sp, #0]
 8010c12:	68bb      	ldr	r3, [r7, #8]
 8010c14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010c16:	68f8      	ldr	r0, [r7, #12]
 8010c18:	f001 fb95 	bl	8012346 <xTaskCreate>
 8010c1c:	4603      	mov	r3, r0
 8010c1e:	2b01      	cmp	r3, #1
 8010c20:	d001      	beq.n	8010c26 <osThreadNew+0x11a>
            hTask = NULL;
 8010c22:	2300      	movs	r3, #0
 8010c24:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8010c26:	693b      	ldr	r3, [r7, #16]
}
 8010c28:	4618      	mov	r0, r3
 8010c2a:	3728      	adds	r7, #40	; 0x28
 8010c2c:	46bd      	mov	sp, r7
 8010c2e:	bd80      	pop	{r7, pc}

08010c30 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8010c30:	b480      	push	{r7}
 8010c32:	b083      	sub	sp, #12
 8010c34:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010c36:	f3ef 8305 	mrs	r3, IPSR
 8010c3a:	603b      	str	r3, [r7, #0]
  return(result);
 8010c3c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d003      	beq.n	8010c4a <osThreadYield+0x1a>
    stat = osErrorISR;
 8010c42:	f06f 0305 	mvn.w	r3, #5
 8010c46:	607b      	str	r3, [r7, #4]
 8010c48:	e009      	b.n	8010c5e <osThreadYield+0x2e>
  } else {
    stat = osOK;
 8010c4a:	2300      	movs	r3, #0
 8010c4c:	607b      	str	r3, [r7, #4]
    taskYIELD();
 8010c4e:	4b07      	ldr	r3, [pc, #28]	; (8010c6c <osThreadYield+0x3c>)
 8010c50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010c54:	601a      	str	r2, [r3, #0]
 8010c56:	f3bf 8f4f 	dsb	sy
 8010c5a:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8010c5e:	687b      	ldr	r3, [r7, #4]
}
 8010c60:	4618      	mov	r0, r3
 8010c62:	370c      	adds	r7, #12
 8010c64:	46bd      	mov	sp, r7
 8010c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c6a:	4770      	bx	lr
 8010c6c:	e000ed04 	.word	0xe000ed04

08010c70 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8010c70:	b580      	push	{r7, lr}
 8010c72:	b084      	sub	sp, #16
 8010c74:	af00      	add	r7, sp, #0
 8010c76:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010c78:	f3ef 8305 	mrs	r3, IPSR
 8010c7c:	60bb      	str	r3, [r7, #8]
  return(result);
 8010c7e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	d003      	beq.n	8010c8c <osDelay+0x1c>
    stat = osErrorISR;
 8010c84:	f06f 0305 	mvn.w	r3, #5
 8010c88:	60fb      	str	r3, [r7, #12]
 8010c8a:	e007      	b.n	8010c9c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8010c8c:	2300      	movs	r3, #0
 8010c8e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d002      	beq.n	8010c9c <osDelay+0x2c>
      vTaskDelay(ticks);
 8010c96:	6878      	ldr	r0, [r7, #4]
 8010c98:	f001 fc9a 	bl	80125d0 <vTaskDelay>
    }
  }

  return (stat);
 8010c9c:	68fb      	ldr	r3, [r7, #12]
}
 8010c9e:	4618      	mov	r0, r3
 8010ca0:	3710      	adds	r7, #16
 8010ca2:	46bd      	mov	sp, r7
 8010ca4:	bd80      	pop	{r7, pc}

08010ca6 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8010ca6:	b580      	push	{r7, lr}
 8010ca8:	b086      	sub	sp, #24
 8010caa:	af00      	add	r7, sp, #0
 8010cac:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8010cae:	2300      	movs	r3, #0
 8010cb0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010cb2:	f3ef 8305 	mrs	r3, IPSR
 8010cb6:	60fb      	str	r3, [r7, #12]
  return(result);
 8010cb8:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d12d      	bne.n	8010d1a <osEventFlagsNew+0x74>
    mem = -1;
 8010cbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010cc2:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d015      	beq.n	8010cf6 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	689b      	ldr	r3, [r3, #8]
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d006      	beq.n	8010ce0 <osEventFlagsNew+0x3a>
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	68db      	ldr	r3, [r3, #12]
 8010cd6:	2b1f      	cmp	r3, #31
 8010cd8:	d902      	bls.n	8010ce0 <osEventFlagsNew+0x3a>
        mem = 1;
 8010cda:	2301      	movs	r3, #1
 8010cdc:	613b      	str	r3, [r7, #16]
 8010cde:	e00c      	b.n	8010cfa <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	689b      	ldr	r3, [r3, #8]
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d108      	bne.n	8010cfa <osEventFlagsNew+0x54>
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	68db      	ldr	r3, [r3, #12]
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d104      	bne.n	8010cfa <osEventFlagsNew+0x54>
          mem = 0;
 8010cf0:	2300      	movs	r3, #0
 8010cf2:	613b      	str	r3, [r7, #16]
 8010cf4:	e001      	b.n	8010cfa <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8010cf6:	2300      	movs	r3, #0
 8010cf8:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8010cfa:	693b      	ldr	r3, [r7, #16]
 8010cfc:	2b01      	cmp	r3, #1
 8010cfe:	d106      	bne.n	8010d0e <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	689b      	ldr	r3, [r3, #8]
 8010d04:	4618      	mov	r0, r3
 8010d06:	f000 fa3d 	bl	8011184 <xEventGroupCreateStatic>
 8010d0a:	6178      	str	r0, [r7, #20]
 8010d0c:	e005      	b.n	8010d1a <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8010d0e:	693b      	ldr	r3, [r7, #16]
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d102      	bne.n	8010d1a <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8010d14:	f000 fa6d 	bl	80111f2 <xEventGroupCreate>
 8010d18:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8010d1a:	697b      	ldr	r3, [r7, #20]
}
 8010d1c:	4618      	mov	r0, r3
 8010d1e:	3718      	adds	r7, #24
 8010d20:	46bd      	mov	sp, r7
 8010d22:	bd80      	pop	{r7, pc}

08010d24 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8010d24:	b580      	push	{r7, lr}
 8010d26:	b086      	sub	sp, #24
 8010d28:	af00      	add	r7, sp, #0
 8010d2a:	6078      	str	r0, [r7, #4]
 8010d2c:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8010d32:	693b      	ldr	r3, [r7, #16]
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d004      	beq.n	8010d42 <osEventFlagsSet+0x1e>
 8010d38:	683b      	ldr	r3, [r7, #0]
 8010d3a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d003      	beq.n	8010d4a <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8010d42:	f06f 0303 	mvn.w	r3, #3
 8010d46:	617b      	str	r3, [r7, #20]
 8010d48:	e028      	b.n	8010d9c <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010d4a:	f3ef 8305 	mrs	r3, IPSR
 8010d4e:	60fb      	str	r3, [r7, #12]
  return(result);
 8010d50:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d01d      	beq.n	8010d92 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8010d56:	2300      	movs	r3, #0
 8010d58:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8010d5a:	f107 0308 	add.w	r3, r7, #8
 8010d5e:	461a      	mov	r2, r3
 8010d60:	6839      	ldr	r1, [r7, #0]
 8010d62:	6938      	ldr	r0, [r7, #16]
 8010d64:	f000 fbe8 	bl	8011538 <xEventGroupSetBitsFromISR>
 8010d68:	4603      	mov	r3, r0
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d103      	bne.n	8010d76 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8010d6e:	f06f 0302 	mvn.w	r3, #2
 8010d72:	617b      	str	r3, [r7, #20]
 8010d74:	e012      	b.n	8010d9c <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8010d76:	683b      	ldr	r3, [r7, #0]
 8010d78:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8010d7a:	68bb      	ldr	r3, [r7, #8]
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d00d      	beq.n	8010d9c <osEventFlagsSet+0x78>
 8010d80:	4b09      	ldr	r3, [pc, #36]	; (8010da8 <osEventFlagsSet+0x84>)
 8010d82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010d86:	601a      	str	r2, [r3, #0]
 8010d88:	f3bf 8f4f 	dsb	sy
 8010d8c:	f3bf 8f6f 	isb	sy
 8010d90:	e004      	b.n	8010d9c <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8010d92:	6839      	ldr	r1, [r7, #0]
 8010d94:	6938      	ldr	r0, [r7, #16]
 8010d96:	f000 fb15 	bl	80113c4 <xEventGroupSetBits>
 8010d9a:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8010d9c:	697b      	ldr	r3, [r7, #20]
}
 8010d9e:	4618      	mov	r0, r3
 8010da0:	3718      	adds	r7, #24
 8010da2:	46bd      	mov	sp, r7
 8010da4:	bd80      	pop	{r7, pc}
 8010da6:	bf00      	nop
 8010da8:	e000ed04 	.word	0xe000ed04

08010dac <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8010dac:	b580      	push	{r7, lr}
 8010dae:	b08c      	sub	sp, #48	; 0x30
 8010db0:	af02      	add	r7, sp, #8
 8010db2:	60f8      	str	r0, [r7, #12]
 8010db4:	60b9      	str	r1, [r7, #8]
 8010db6:	607a      	str	r2, [r7, #4]
 8010db8:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8010dba:	68fb      	ldr	r3, [r7, #12]
 8010dbc:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8010dbe:	69bb      	ldr	r3, [r7, #24]
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d004      	beq.n	8010dce <osEventFlagsWait+0x22>
 8010dc4:	68bb      	ldr	r3, [r7, #8]
 8010dc6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d003      	beq.n	8010dd6 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8010dce:	f06f 0303 	mvn.w	r3, #3
 8010dd2:	61fb      	str	r3, [r7, #28]
 8010dd4:	e04b      	b.n	8010e6e <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010dd6:	f3ef 8305 	mrs	r3, IPSR
 8010dda:	617b      	str	r3, [r7, #20]
  return(result);
 8010ddc:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d003      	beq.n	8010dea <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 8010de2:	f06f 0305 	mvn.w	r3, #5
 8010de6:	61fb      	str	r3, [r7, #28]
 8010de8:	e041      	b.n	8010e6e <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	f003 0301 	and.w	r3, r3, #1
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d002      	beq.n	8010dfa <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8010df4:	2301      	movs	r3, #1
 8010df6:	627b      	str	r3, [r7, #36]	; 0x24
 8010df8:	e001      	b.n	8010dfe <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8010dfa:	2300      	movs	r3, #0
 8010dfc:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	f003 0302 	and.w	r3, r3, #2
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d002      	beq.n	8010e0e <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8010e08:	2300      	movs	r3, #0
 8010e0a:	623b      	str	r3, [r7, #32]
 8010e0c:	e001      	b.n	8010e12 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8010e0e:	2301      	movs	r3, #1
 8010e10:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8010e12:	683b      	ldr	r3, [r7, #0]
 8010e14:	9300      	str	r3, [sp, #0]
 8010e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e18:	6a3a      	ldr	r2, [r7, #32]
 8010e1a:	68b9      	ldr	r1, [r7, #8]
 8010e1c:	69b8      	ldr	r0, [r7, #24]
 8010e1e:	f000 fa03 	bl	8011228 <xEventGroupWaitBits>
 8010e22:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	f003 0301 	and.w	r3, r3, #1
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d010      	beq.n	8010e50 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8010e2e:	68ba      	ldr	r2, [r7, #8]
 8010e30:	69fb      	ldr	r3, [r7, #28]
 8010e32:	4013      	ands	r3, r2
 8010e34:	68ba      	ldr	r2, [r7, #8]
 8010e36:	429a      	cmp	r2, r3
 8010e38:	d019      	beq.n	8010e6e <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8010e3a:	683b      	ldr	r3, [r7, #0]
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d003      	beq.n	8010e48 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8010e40:	f06f 0301 	mvn.w	r3, #1
 8010e44:	61fb      	str	r3, [r7, #28]
 8010e46:	e012      	b.n	8010e6e <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8010e48:	f06f 0302 	mvn.w	r3, #2
 8010e4c:	61fb      	str	r3, [r7, #28]
 8010e4e:	e00e      	b.n	8010e6e <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8010e50:	68ba      	ldr	r2, [r7, #8]
 8010e52:	69fb      	ldr	r3, [r7, #28]
 8010e54:	4013      	ands	r3, r2
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d109      	bne.n	8010e6e <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8010e5a:	683b      	ldr	r3, [r7, #0]
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d003      	beq.n	8010e68 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8010e60:	f06f 0301 	mvn.w	r3, #1
 8010e64:	61fb      	str	r3, [r7, #28]
 8010e66:	e002      	b.n	8010e6e <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8010e68:	f06f 0302 	mvn.w	r3, #2
 8010e6c:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8010e6e:	69fb      	ldr	r3, [r7, #28]
}
 8010e70:	4618      	mov	r0, r3
 8010e72:	3728      	adds	r7, #40	; 0x28
 8010e74:	46bd      	mov	sp, r7
 8010e76:	bd80      	pop	{r7, pc}

08010e78 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8010e78:	b580      	push	{r7, lr}
 8010e7a:	b08a      	sub	sp, #40	; 0x28
 8010e7c:	af02      	add	r7, sp, #8
 8010e7e:	60f8      	str	r0, [r7, #12]
 8010e80:	60b9      	str	r1, [r7, #8]
 8010e82:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8010e84:	2300      	movs	r3, #0
 8010e86:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010e88:	f3ef 8305 	mrs	r3, IPSR
 8010e8c:	613b      	str	r3, [r7, #16]
  return(result);
 8010e8e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d15f      	bne.n	8010f54 <osMessageQueueNew+0xdc>
 8010e94:	68fb      	ldr	r3, [r7, #12]
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d05c      	beq.n	8010f54 <osMessageQueueNew+0xdc>
 8010e9a:	68bb      	ldr	r3, [r7, #8]
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d059      	beq.n	8010f54 <osMessageQueueNew+0xdc>
    mem = -1;
 8010ea0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010ea4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d029      	beq.n	8010f00 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	689b      	ldr	r3, [r3, #8]
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d012      	beq.n	8010eda <osMessageQueueNew+0x62>
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	68db      	ldr	r3, [r3, #12]
 8010eb8:	2b4f      	cmp	r3, #79	; 0x4f
 8010eba:	d90e      	bls.n	8010eda <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d00a      	beq.n	8010eda <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	695a      	ldr	r2, [r3, #20]
 8010ec8:	68fb      	ldr	r3, [r7, #12]
 8010eca:	68b9      	ldr	r1, [r7, #8]
 8010ecc:	fb01 f303 	mul.w	r3, r1, r3
 8010ed0:	429a      	cmp	r2, r3
 8010ed2:	d302      	bcc.n	8010eda <osMessageQueueNew+0x62>
        mem = 1;
 8010ed4:	2301      	movs	r3, #1
 8010ed6:	61bb      	str	r3, [r7, #24]
 8010ed8:	e014      	b.n	8010f04 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	689b      	ldr	r3, [r3, #8]
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d110      	bne.n	8010f04 <osMessageQueueNew+0x8c>
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	68db      	ldr	r3, [r3, #12]
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d10c      	bne.n	8010f04 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d108      	bne.n	8010f04 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	695b      	ldr	r3, [r3, #20]
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d104      	bne.n	8010f04 <osMessageQueueNew+0x8c>
          mem = 0;
 8010efa:	2300      	movs	r3, #0
 8010efc:	61bb      	str	r3, [r7, #24]
 8010efe:	e001      	b.n	8010f04 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8010f00:	2300      	movs	r3, #0
 8010f02:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8010f04:	69bb      	ldr	r3, [r7, #24]
 8010f06:	2b01      	cmp	r3, #1
 8010f08:	d10b      	bne.n	8010f22 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	691a      	ldr	r2, [r3, #16]
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	689b      	ldr	r3, [r3, #8]
 8010f12:	2100      	movs	r1, #0
 8010f14:	9100      	str	r1, [sp, #0]
 8010f16:	68b9      	ldr	r1, [r7, #8]
 8010f18:	68f8      	ldr	r0, [r7, #12]
 8010f1a:	f000 fc3d 	bl	8011798 <xQueueGenericCreateStatic>
 8010f1e:	61f8      	str	r0, [r7, #28]
 8010f20:	e008      	b.n	8010f34 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8010f22:	69bb      	ldr	r3, [r7, #24]
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d105      	bne.n	8010f34 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8010f28:	2200      	movs	r2, #0
 8010f2a:	68b9      	ldr	r1, [r7, #8]
 8010f2c:	68f8      	ldr	r0, [r7, #12]
 8010f2e:	f000 fcab 	bl	8011888 <xQueueGenericCreate>
 8010f32:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8010f34:	69fb      	ldr	r3, [r7, #28]
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d00c      	beq.n	8010f54 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d003      	beq.n	8010f48 <osMessageQueueNew+0xd0>
        name = attr->name;
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	681b      	ldr	r3, [r3, #0]
 8010f44:	617b      	str	r3, [r7, #20]
 8010f46:	e001      	b.n	8010f4c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8010f48:	2300      	movs	r3, #0
 8010f4a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8010f4c:	6979      	ldr	r1, [r7, #20]
 8010f4e:	69f8      	ldr	r0, [r7, #28]
 8010f50:	f001 f93e 	bl	80121d0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8010f54:	69fb      	ldr	r3, [r7, #28]
}
 8010f56:	4618      	mov	r0, r3
 8010f58:	3720      	adds	r7, #32
 8010f5a:	46bd      	mov	sp, r7
 8010f5c:	bd80      	pop	{r7, pc}
	...

08010f60 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8010f60:	b580      	push	{r7, lr}
 8010f62:	b088      	sub	sp, #32
 8010f64:	af00      	add	r7, sp, #0
 8010f66:	60f8      	str	r0, [r7, #12]
 8010f68:	60b9      	str	r1, [r7, #8]
 8010f6a:	603b      	str	r3, [r7, #0]
 8010f6c:	4613      	mov	r3, r2
 8010f6e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8010f70:	68fb      	ldr	r3, [r7, #12]
 8010f72:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8010f74:	2300      	movs	r3, #0
 8010f76:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010f78:	f3ef 8305 	mrs	r3, IPSR
 8010f7c:	617b      	str	r3, [r7, #20]
  return(result);
 8010f7e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d028      	beq.n	8010fd6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010f84:	69bb      	ldr	r3, [r7, #24]
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d005      	beq.n	8010f96 <osMessageQueuePut+0x36>
 8010f8a:	68bb      	ldr	r3, [r7, #8]
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d002      	beq.n	8010f96 <osMessageQueuePut+0x36>
 8010f90:	683b      	ldr	r3, [r7, #0]
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d003      	beq.n	8010f9e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8010f96:	f06f 0303 	mvn.w	r3, #3
 8010f9a:	61fb      	str	r3, [r7, #28]
 8010f9c:	e038      	b.n	8011010 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8010f9e:	2300      	movs	r3, #0
 8010fa0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8010fa2:	f107 0210 	add.w	r2, r7, #16
 8010fa6:	2300      	movs	r3, #0
 8010fa8:	68b9      	ldr	r1, [r7, #8]
 8010faa:	69b8      	ldr	r0, [r7, #24]
 8010fac:	f000 fdc8 	bl	8011b40 <xQueueGenericSendFromISR>
 8010fb0:	4603      	mov	r3, r0
 8010fb2:	2b01      	cmp	r3, #1
 8010fb4:	d003      	beq.n	8010fbe <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8010fb6:	f06f 0302 	mvn.w	r3, #2
 8010fba:	61fb      	str	r3, [r7, #28]
 8010fbc:	e028      	b.n	8011010 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8010fbe:	693b      	ldr	r3, [r7, #16]
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d025      	beq.n	8011010 <osMessageQueuePut+0xb0>
 8010fc4:	4b15      	ldr	r3, [pc, #84]	; (801101c <osMessageQueuePut+0xbc>)
 8010fc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010fca:	601a      	str	r2, [r3, #0]
 8010fcc:	f3bf 8f4f 	dsb	sy
 8010fd0:	f3bf 8f6f 	isb	sy
 8010fd4:	e01c      	b.n	8011010 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8010fd6:	69bb      	ldr	r3, [r7, #24]
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d002      	beq.n	8010fe2 <osMessageQueuePut+0x82>
 8010fdc:	68bb      	ldr	r3, [r7, #8]
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d103      	bne.n	8010fea <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8010fe2:	f06f 0303 	mvn.w	r3, #3
 8010fe6:	61fb      	str	r3, [r7, #28]
 8010fe8:	e012      	b.n	8011010 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8010fea:	2300      	movs	r3, #0
 8010fec:	683a      	ldr	r2, [r7, #0]
 8010fee:	68b9      	ldr	r1, [r7, #8]
 8010ff0:	69b8      	ldr	r0, [r7, #24]
 8010ff2:	f000 fca7 	bl	8011944 <xQueueGenericSend>
 8010ff6:	4603      	mov	r3, r0
 8010ff8:	2b01      	cmp	r3, #1
 8010ffa:	d009      	beq.n	8011010 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8010ffc:	683b      	ldr	r3, [r7, #0]
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d003      	beq.n	801100a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8011002:	f06f 0301 	mvn.w	r3, #1
 8011006:	61fb      	str	r3, [r7, #28]
 8011008:	e002      	b.n	8011010 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 801100a:	f06f 0302 	mvn.w	r3, #2
 801100e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8011010:	69fb      	ldr	r3, [r7, #28]
}
 8011012:	4618      	mov	r0, r3
 8011014:	3720      	adds	r7, #32
 8011016:	46bd      	mov	sp, r7
 8011018:	bd80      	pop	{r7, pc}
 801101a:	bf00      	nop
 801101c:	e000ed04 	.word	0xe000ed04

08011020 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8011020:	b580      	push	{r7, lr}
 8011022:	b088      	sub	sp, #32
 8011024:	af00      	add	r7, sp, #0
 8011026:	60f8      	str	r0, [r7, #12]
 8011028:	60b9      	str	r1, [r7, #8]
 801102a:	607a      	str	r2, [r7, #4]
 801102c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801102e:	68fb      	ldr	r3, [r7, #12]
 8011030:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8011032:	2300      	movs	r3, #0
 8011034:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011036:	f3ef 8305 	mrs	r3, IPSR
 801103a:	617b      	str	r3, [r7, #20]
  return(result);
 801103c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 801103e:	2b00      	cmp	r3, #0
 8011040:	d028      	beq.n	8011094 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8011042:	69bb      	ldr	r3, [r7, #24]
 8011044:	2b00      	cmp	r3, #0
 8011046:	d005      	beq.n	8011054 <osMessageQueueGet+0x34>
 8011048:	68bb      	ldr	r3, [r7, #8]
 801104a:	2b00      	cmp	r3, #0
 801104c:	d002      	beq.n	8011054 <osMessageQueueGet+0x34>
 801104e:	683b      	ldr	r3, [r7, #0]
 8011050:	2b00      	cmp	r3, #0
 8011052:	d003      	beq.n	801105c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8011054:	f06f 0303 	mvn.w	r3, #3
 8011058:	61fb      	str	r3, [r7, #28]
 801105a:	e037      	b.n	80110cc <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 801105c:	2300      	movs	r3, #0
 801105e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8011060:	f107 0310 	add.w	r3, r7, #16
 8011064:	461a      	mov	r2, r3
 8011066:	68b9      	ldr	r1, [r7, #8]
 8011068:	69b8      	ldr	r0, [r7, #24]
 801106a:	f000 fee5 	bl	8011e38 <xQueueReceiveFromISR>
 801106e:	4603      	mov	r3, r0
 8011070:	2b01      	cmp	r3, #1
 8011072:	d003      	beq.n	801107c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8011074:	f06f 0302 	mvn.w	r3, #2
 8011078:	61fb      	str	r3, [r7, #28]
 801107a:	e027      	b.n	80110cc <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 801107c:	693b      	ldr	r3, [r7, #16]
 801107e:	2b00      	cmp	r3, #0
 8011080:	d024      	beq.n	80110cc <osMessageQueueGet+0xac>
 8011082:	4b15      	ldr	r3, [pc, #84]	; (80110d8 <osMessageQueueGet+0xb8>)
 8011084:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011088:	601a      	str	r2, [r3, #0]
 801108a:	f3bf 8f4f 	dsb	sy
 801108e:	f3bf 8f6f 	isb	sy
 8011092:	e01b      	b.n	80110cc <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8011094:	69bb      	ldr	r3, [r7, #24]
 8011096:	2b00      	cmp	r3, #0
 8011098:	d002      	beq.n	80110a0 <osMessageQueueGet+0x80>
 801109a:	68bb      	ldr	r3, [r7, #8]
 801109c:	2b00      	cmp	r3, #0
 801109e:	d103      	bne.n	80110a8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80110a0:	f06f 0303 	mvn.w	r3, #3
 80110a4:	61fb      	str	r3, [r7, #28]
 80110a6:	e011      	b.n	80110cc <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80110a8:	683a      	ldr	r2, [r7, #0]
 80110aa:	68b9      	ldr	r1, [r7, #8]
 80110ac:	69b8      	ldr	r0, [r7, #24]
 80110ae:	f000 fde3 	bl	8011c78 <xQueueReceive>
 80110b2:	4603      	mov	r3, r0
 80110b4:	2b01      	cmp	r3, #1
 80110b6:	d009      	beq.n	80110cc <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80110b8:	683b      	ldr	r3, [r7, #0]
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d003      	beq.n	80110c6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80110be:	f06f 0301 	mvn.w	r3, #1
 80110c2:	61fb      	str	r3, [r7, #28]
 80110c4:	e002      	b.n	80110cc <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80110c6:	f06f 0302 	mvn.w	r3, #2
 80110ca:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80110cc:	69fb      	ldr	r3, [r7, #28]
}
 80110ce:	4618      	mov	r0, r3
 80110d0:	3720      	adds	r7, #32
 80110d2:	46bd      	mov	sp, r7
 80110d4:	bd80      	pop	{r7, pc}
 80110d6:	bf00      	nop
 80110d8:	e000ed04 	.word	0xe000ed04

080110dc <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 80110dc:	b580      	push	{r7, lr}
 80110de:	b086      	sub	sp, #24
 80110e0:	af00      	add	r7, sp, #0
 80110e2:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 80110e8:	693b      	ldr	r3, [r7, #16]
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d102      	bne.n	80110f4 <osMessageQueueGetCount+0x18>
    count = 0U;
 80110ee:	2300      	movs	r3, #0
 80110f0:	617b      	str	r3, [r7, #20]
 80110f2:	e00e      	b.n	8011112 <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80110f4:	f3ef 8305 	mrs	r3, IPSR
 80110f8:	60fb      	str	r3, [r7, #12]
  return(result);
 80110fa:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d004      	beq.n	801110a <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8011100:	6938      	ldr	r0, [r7, #16]
 8011102:	f000 ff37 	bl	8011f74 <uxQueueMessagesWaitingFromISR>
 8011106:	6178      	str	r0, [r7, #20]
 8011108:	e003      	b.n	8011112 <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 801110a:	6938      	ldr	r0, [r7, #16]
 801110c:	f000 ff14 	bl	8011f38 <uxQueueMessagesWaiting>
 8011110:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 8011112:	697b      	ldr	r3, [r7, #20]
}
 8011114:	4618      	mov	r0, r3
 8011116:	3718      	adds	r7, #24
 8011118:	46bd      	mov	sp, r7
 801111a:	bd80      	pop	{r7, pc}

0801111c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 801111c:	b480      	push	{r7}
 801111e:	b085      	sub	sp, #20
 8011120:	af00      	add	r7, sp, #0
 8011122:	60f8      	str	r0, [r7, #12]
 8011124:	60b9      	str	r1, [r7, #8]
 8011126:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8011128:	68fb      	ldr	r3, [r7, #12]
 801112a:	4a07      	ldr	r2, [pc, #28]	; (8011148 <vApplicationGetIdleTaskMemory+0x2c>)
 801112c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801112e:	68bb      	ldr	r3, [r7, #8]
 8011130:	4a06      	ldr	r2, [pc, #24]	; (801114c <vApplicationGetIdleTaskMemory+0x30>)
 8011132:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	2280      	movs	r2, #128	; 0x80
 8011138:	601a      	str	r2, [r3, #0]
}
 801113a:	bf00      	nop
 801113c:	3714      	adds	r7, #20
 801113e:	46bd      	mov	sp, r7
 8011140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011144:	4770      	bx	lr
 8011146:	bf00      	nop
 8011148:	24000780 	.word	0x24000780
 801114c:	240007dc 	.word	0x240007dc

08011150 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8011150:	b480      	push	{r7}
 8011152:	b085      	sub	sp, #20
 8011154:	af00      	add	r7, sp, #0
 8011156:	60f8      	str	r0, [r7, #12]
 8011158:	60b9      	str	r1, [r7, #8]
 801115a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 801115c:	68fb      	ldr	r3, [r7, #12]
 801115e:	4a07      	ldr	r2, [pc, #28]	; (801117c <vApplicationGetTimerTaskMemory+0x2c>)
 8011160:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8011162:	68bb      	ldr	r3, [r7, #8]
 8011164:	4a06      	ldr	r2, [pc, #24]	; (8011180 <vApplicationGetTimerTaskMemory+0x30>)
 8011166:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801116e:	601a      	str	r2, [r3, #0]
}
 8011170:	bf00      	nop
 8011172:	3714      	adds	r7, #20
 8011174:	46bd      	mov	sp, r7
 8011176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801117a:	4770      	bx	lr
 801117c:	240009dc 	.word	0x240009dc
 8011180:	24000a38 	.word	0x24000a38

08011184 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8011184:	b580      	push	{r7, lr}
 8011186:	b086      	sub	sp, #24
 8011188:	af00      	add	r7, sp, #0
 801118a:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	2b00      	cmp	r3, #0
 8011190:	d10a      	bne.n	80111a8 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8011192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011196:	f383 8811 	msr	BASEPRI, r3
 801119a:	f3bf 8f6f 	isb	sy
 801119e:	f3bf 8f4f 	dsb	sy
 80111a2:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80111a4:	bf00      	nop
 80111a6:	e7fe      	b.n	80111a6 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80111a8:	2320      	movs	r3, #32
 80111aa:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80111ac:	68bb      	ldr	r3, [r7, #8]
 80111ae:	2b20      	cmp	r3, #32
 80111b0:	d00a      	beq.n	80111c8 <xEventGroupCreateStatic+0x44>
	__asm volatile
 80111b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111b6:	f383 8811 	msr	BASEPRI, r3
 80111ba:	f3bf 8f6f 	isb	sy
 80111be:	f3bf 8f4f 	dsb	sy
 80111c2:	60fb      	str	r3, [r7, #12]
}
 80111c4:	bf00      	nop
 80111c6:	e7fe      	b.n	80111c6 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 80111cc:	697b      	ldr	r3, [r7, #20]
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d00a      	beq.n	80111e8 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 80111d2:	697b      	ldr	r3, [r7, #20]
 80111d4:	2200      	movs	r2, #0
 80111d6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80111d8:	697b      	ldr	r3, [r7, #20]
 80111da:	3304      	adds	r3, #4
 80111dc:	4618      	mov	r0, r3
 80111de:	f000 f9bf 	bl	8011560 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 80111e2:	697b      	ldr	r3, [r7, #20]
 80111e4:	2201      	movs	r2, #1
 80111e6:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 80111e8:	697b      	ldr	r3, [r7, #20]
	}
 80111ea:	4618      	mov	r0, r3
 80111ec:	3718      	adds	r7, #24
 80111ee:	46bd      	mov	sp, r7
 80111f0:	bd80      	pop	{r7, pc}

080111f2 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80111f2:	b580      	push	{r7, lr}
 80111f4:	b082      	sub	sp, #8
 80111f6:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80111f8:	2020      	movs	r0, #32
 80111fa:	f002 fdb5 	bl	8013d68 <pvPortMalloc>
 80111fe:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	2b00      	cmp	r3, #0
 8011204:	d00a      	beq.n	801121c <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	2200      	movs	r2, #0
 801120a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	3304      	adds	r3, #4
 8011210:	4618      	mov	r0, r3
 8011212:	f000 f9a5 	bl	8011560 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	2200      	movs	r2, #0
 801121a:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 801121c:	687b      	ldr	r3, [r7, #4]
	}
 801121e:	4618      	mov	r0, r3
 8011220:	3708      	adds	r7, #8
 8011222:	46bd      	mov	sp, r7
 8011224:	bd80      	pop	{r7, pc}
	...

08011228 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8011228:	b580      	push	{r7, lr}
 801122a:	b090      	sub	sp, #64	; 0x40
 801122c:	af00      	add	r7, sp, #0
 801122e:	60f8      	str	r0, [r7, #12]
 8011230:	60b9      	str	r1, [r7, #8]
 8011232:	607a      	str	r2, [r7, #4]
 8011234:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8011236:	68fb      	ldr	r3, [r7, #12]
 8011238:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 801123a:	2300      	movs	r3, #0
 801123c:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 801123e:	2300      	movs	r3, #0
 8011240:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8011242:	68fb      	ldr	r3, [r7, #12]
 8011244:	2b00      	cmp	r3, #0
 8011246:	d10a      	bne.n	801125e <xEventGroupWaitBits+0x36>
	__asm volatile
 8011248:	f04f 0350 	mov.w	r3, #80	; 0x50
 801124c:	f383 8811 	msr	BASEPRI, r3
 8011250:	f3bf 8f6f 	isb	sy
 8011254:	f3bf 8f4f 	dsb	sy
 8011258:	623b      	str	r3, [r7, #32]
}
 801125a:	bf00      	nop
 801125c:	e7fe      	b.n	801125c <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 801125e:	68bb      	ldr	r3, [r7, #8]
 8011260:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8011264:	2b00      	cmp	r3, #0
 8011266:	d00a      	beq.n	801127e <xEventGroupWaitBits+0x56>
	__asm volatile
 8011268:	f04f 0350 	mov.w	r3, #80	; 0x50
 801126c:	f383 8811 	msr	BASEPRI, r3
 8011270:	f3bf 8f6f 	isb	sy
 8011274:	f3bf 8f4f 	dsb	sy
 8011278:	61fb      	str	r3, [r7, #28]
}
 801127a:	bf00      	nop
 801127c:	e7fe      	b.n	801127c <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 801127e:	68bb      	ldr	r3, [r7, #8]
 8011280:	2b00      	cmp	r3, #0
 8011282:	d10a      	bne.n	801129a <xEventGroupWaitBits+0x72>
	__asm volatile
 8011284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011288:	f383 8811 	msr	BASEPRI, r3
 801128c:	f3bf 8f6f 	isb	sy
 8011290:	f3bf 8f4f 	dsb	sy
 8011294:	61bb      	str	r3, [r7, #24]
}
 8011296:	bf00      	nop
 8011298:	e7fe      	b.n	8011298 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801129a:	f001 feb3 	bl	8013004 <xTaskGetSchedulerState>
 801129e:	4603      	mov	r3, r0
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d102      	bne.n	80112aa <xEventGroupWaitBits+0x82>
 80112a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d101      	bne.n	80112ae <xEventGroupWaitBits+0x86>
 80112aa:	2301      	movs	r3, #1
 80112ac:	e000      	b.n	80112b0 <xEventGroupWaitBits+0x88>
 80112ae:	2300      	movs	r3, #0
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d10a      	bne.n	80112ca <xEventGroupWaitBits+0xa2>
	__asm volatile
 80112b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112b8:	f383 8811 	msr	BASEPRI, r3
 80112bc:	f3bf 8f6f 	isb	sy
 80112c0:	f3bf 8f4f 	dsb	sy
 80112c4:	617b      	str	r3, [r7, #20]
}
 80112c6:	bf00      	nop
 80112c8:	e7fe      	b.n	80112c8 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 80112ca:	f001 fa1b 	bl	8012704 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80112ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112d0:	681b      	ldr	r3, [r3, #0]
 80112d2:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80112d4:	683a      	ldr	r2, [r7, #0]
 80112d6:	68b9      	ldr	r1, [r7, #8]
 80112d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80112da:	f000 f90b 	bl	80114f4 <prvTestWaitCondition>
 80112de:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 80112e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d00e      	beq.n	8011304 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80112e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112e8:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80112ea:	2300      	movs	r3, #0
 80112ec:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d028      	beq.n	8011346 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80112f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112f6:	681a      	ldr	r2, [r3, #0]
 80112f8:	68bb      	ldr	r3, [r7, #8]
 80112fa:	43db      	mvns	r3, r3
 80112fc:	401a      	ands	r2, r3
 80112fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011300:	601a      	str	r2, [r3, #0]
 8011302:	e020      	b.n	8011346 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8011304:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011306:	2b00      	cmp	r3, #0
 8011308:	d104      	bne.n	8011314 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 801130a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801130c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 801130e:	2301      	movs	r3, #1
 8011310:	633b      	str	r3, [r7, #48]	; 0x30
 8011312:	e018      	b.n	8011346 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	2b00      	cmp	r3, #0
 8011318:	d003      	beq.n	8011322 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 801131a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801131c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8011320:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8011322:	683b      	ldr	r3, [r7, #0]
 8011324:	2b00      	cmp	r3, #0
 8011326:	d003      	beq.n	8011330 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8011328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801132a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801132e:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8011330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011332:	1d18      	adds	r0, r3, #4
 8011334:	68ba      	ldr	r2, [r7, #8]
 8011336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011338:	4313      	orrs	r3, r2
 801133a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801133c:	4619      	mov	r1, r3
 801133e:	f001 fbd9 	bl	8012af4 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8011342:	2300      	movs	r3, #0
 8011344:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8011346:	f001 f9eb 	bl	8012720 <xTaskResumeAll>
 801134a:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 801134c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801134e:	2b00      	cmp	r3, #0
 8011350:	d031      	beq.n	80113b6 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8011352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011354:	2b00      	cmp	r3, #0
 8011356:	d107      	bne.n	8011368 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8011358:	4b19      	ldr	r3, [pc, #100]	; (80113c0 <xEventGroupWaitBits+0x198>)
 801135a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801135e:	601a      	str	r2, [r3, #0]
 8011360:	f3bf 8f4f 	dsb	sy
 8011364:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8011368:	f001 fed8 	bl	801311c <uxTaskResetEventItemValue>
 801136c:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 801136e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011370:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011374:	2b00      	cmp	r3, #0
 8011376:	d11a      	bne.n	80113ae <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8011378:	f002 fbd4 	bl	8013b24 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 801137c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801137e:	681b      	ldr	r3, [r3, #0]
 8011380:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8011382:	683a      	ldr	r2, [r7, #0]
 8011384:	68b9      	ldr	r1, [r7, #8]
 8011386:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011388:	f000 f8b4 	bl	80114f4 <prvTestWaitCondition>
 801138c:	4603      	mov	r3, r0
 801138e:	2b00      	cmp	r3, #0
 8011390:	d009      	beq.n	80113a6 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	2b00      	cmp	r3, #0
 8011396:	d006      	beq.n	80113a6 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8011398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801139a:	681a      	ldr	r2, [r3, #0]
 801139c:	68bb      	ldr	r3, [r7, #8]
 801139e:	43db      	mvns	r3, r3
 80113a0:	401a      	ands	r2, r3
 80113a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113a4:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80113a6:	2301      	movs	r3, #1
 80113a8:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 80113aa:	f002 fbeb 	bl	8013b84 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80113ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80113b0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80113b4:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80113b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80113b8:	4618      	mov	r0, r3
 80113ba:	3740      	adds	r7, #64	; 0x40
 80113bc:	46bd      	mov	sp, r7
 80113be:	bd80      	pop	{r7, pc}
 80113c0:	e000ed04 	.word	0xe000ed04

080113c4 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80113c4:	b580      	push	{r7, lr}
 80113c6:	b08e      	sub	sp, #56	; 0x38
 80113c8:	af00      	add	r7, sp, #0
 80113ca:	6078      	str	r0, [r7, #4]
 80113cc:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80113ce:	2300      	movs	r3, #0
 80113d0:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 80113d6:	2300      	movs	r3, #0
 80113d8:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d10a      	bne.n	80113f6 <xEventGroupSetBits+0x32>
	__asm volatile
 80113e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113e4:	f383 8811 	msr	BASEPRI, r3
 80113e8:	f3bf 8f6f 	isb	sy
 80113ec:	f3bf 8f4f 	dsb	sy
 80113f0:	613b      	str	r3, [r7, #16]
}
 80113f2:	bf00      	nop
 80113f4:	e7fe      	b.n	80113f4 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80113f6:	683b      	ldr	r3, [r7, #0]
 80113f8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d00a      	beq.n	8011416 <xEventGroupSetBits+0x52>
	__asm volatile
 8011400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011404:	f383 8811 	msr	BASEPRI, r3
 8011408:	f3bf 8f6f 	isb	sy
 801140c:	f3bf 8f4f 	dsb	sy
 8011410:	60fb      	str	r3, [r7, #12]
}
 8011412:	bf00      	nop
 8011414:	e7fe      	b.n	8011414 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8011416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011418:	3304      	adds	r3, #4
 801141a:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801141c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801141e:	3308      	adds	r3, #8
 8011420:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8011422:	f001 f96f 	bl	8012704 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8011426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011428:	68db      	ldr	r3, [r3, #12]
 801142a:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 801142c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801142e:	681a      	ldr	r2, [r3, #0]
 8011430:	683b      	ldr	r3, [r7, #0]
 8011432:	431a      	orrs	r2, r3
 8011434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011436:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8011438:	e03c      	b.n	80114b4 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 801143a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801143c:	685b      	ldr	r3, [r3, #4]
 801143e:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8011440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8011446:	2300      	movs	r3, #0
 8011448:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 801144a:	69bb      	ldr	r3, [r7, #24]
 801144c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8011450:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8011452:	69bb      	ldr	r3, [r7, #24]
 8011454:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8011458:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 801145a:	697b      	ldr	r3, [r7, #20]
 801145c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8011460:	2b00      	cmp	r3, #0
 8011462:	d108      	bne.n	8011476 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8011464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011466:	681a      	ldr	r2, [r3, #0]
 8011468:	69bb      	ldr	r3, [r7, #24]
 801146a:	4013      	ands	r3, r2
 801146c:	2b00      	cmp	r3, #0
 801146e:	d00b      	beq.n	8011488 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8011470:	2301      	movs	r3, #1
 8011472:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011474:	e008      	b.n	8011488 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8011476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011478:	681a      	ldr	r2, [r3, #0]
 801147a:	69bb      	ldr	r3, [r7, #24]
 801147c:	4013      	ands	r3, r2
 801147e:	69ba      	ldr	r2, [r7, #24]
 8011480:	429a      	cmp	r2, r3
 8011482:	d101      	bne.n	8011488 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8011484:	2301      	movs	r3, #1
 8011486:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8011488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801148a:	2b00      	cmp	r3, #0
 801148c:	d010      	beq.n	80114b0 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 801148e:	697b      	ldr	r3, [r7, #20]
 8011490:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011494:	2b00      	cmp	r3, #0
 8011496:	d003      	beq.n	80114a0 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8011498:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801149a:	69bb      	ldr	r3, [r7, #24]
 801149c:	4313      	orrs	r3, r2
 801149e:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80114a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80114a8:	4619      	mov	r1, r3
 80114aa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80114ac:	f001 fbee 	bl	8012c8c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80114b0:	69fb      	ldr	r3, [r7, #28]
 80114b2:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 80114b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80114b6:	6a3b      	ldr	r3, [r7, #32]
 80114b8:	429a      	cmp	r2, r3
 80114ba:	d1be      	bne.n	801143a <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80114bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114be:	681a      	ldr	r2, [r3, #0]
 80114c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114c2:	43db      	mvns	r3, r3
 80114c4:	401a      	ands	r2, r3
 80114c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114c8:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80114ca:	f001 f929 	bl	8012720 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80114ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114d0:	681b      	ldr	r3, [r3, #0]
}
 80114d2:	4618      	mov	r0, r3
 80114d4:	3738      	adds	r7, #56	; 0x38
 80114d6:	46bd      	mov	sp, r7
 80114d8:	bd80      	pop	{r7, pc}

080114da <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 80114da:	b580      	push	{r7, lr}
 80114dc:	b082      	sub	sp, #8
 80114de:	af00      	add	r7, sp, #0
 80114e0:	6078      	str	r0, [r7, #4]
 80114e2:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80114e4:	6839      	ldr	r1, [r7, #0]
 80114e6:	6878      	ldr	r0, [r7, #4]
 80114e8:	f7ff ff6c 	bl	80113c4 <xEventGroupSetBits>
}
 80114ec:	bf00      	nop
 80114ee:	3708      	adds	r7, #8
 80114f0:	46bd      	mov	sp, r7
 80114f2:	bd80      	pop	{r7, pc}

080114f4 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80114f4:	b480      	push	{r7}
 80114f6:	b087      	sub	sp, #28
 80114f8:	af00      	add	r7, sp, #0
 80114fa:	60f8      	str	r0, [r7, #12]
 80114fc:	60b9      	str	r1, [r7, #8]
 80114fe:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8011500:	2300      	movs	r3, #0
 8011502:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	2b00      	cmp	r3, #0
 8011508:	d107      	bne.n	801151a <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 801150a:	68fa      	ldr	r2, [r7, #12]
 801150c:	68bb      	ldr	r3, [r7, #8]
 801150e:	4013      	ands	r3, r2
 8011510:	2b00      	cmp	r3, #0
 8011512:	d00a      	beq.n	801152a <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8011514:	2301      	movs	r3, #1
 8011516:	617b      	str	r3, [r7, #20]
 8011518:	e007      	b.n	801152a <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 801151a:	68fa      	ldr	r2, [r7, #12]
 801151c:	68bb      	ldr	r3, [r7, #8]
 801151e:	4013      	ands	r3, r2
 8011520:	68ba      	ldr	r2, [r7, #8]
 8011522:	429a      	cmp	r2, r3
 8011524:	d101      	bne.n	801152a <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8011526:	2301      	movs	r3, #1
 8011528:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 801152a:	697b      	ldr	r3, [r7, #20]
}
 801152c:	4618      	mov	r0, r3
 801152e:	371c      	adds	r7, #28
 8011530:	46bd      	mov	sp, r7
 8011532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011536:	4770      	bx	lr

08011538 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8011538:	b580      	push	{r7, lr}
 801153a:	b086      	sub	sp, #24
 801153c:	af00      	add	r7, sp, #0
 801153e:	60f8      	str	r0, [r7, #12]
 8011540:	60b9      	str	r1, [r7, #8]
 8011542:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	68ba      	ldr	r2, [r7, #8]
 8011548:	68f9      	ldr	r1, [r7, #12]
 801154a:	4804      	ldr	r0, [pc, #16]	; (801155c <xEventGroupSetBitsFromISR+0x24>)
 801154c:	f002 f9a0 	bl	8013890 <xTimerPendFunctionCallFromISR>
 8011550:	6178      	str	r0, [r7, #20]

		return xReturn;
 8011552:	697b      	ldr	r3, [r7, #20]
	}
 8011554:	4618      	mov	r0, r3
 8011556:	3718      	adds	r7, #24
 8011558:	46bd      	mov	sp, r7
 801155a:	bd80      	pop	{r7, pc}
 801155c:	080114db 	.word	0x080114db

08011560 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8011560:	b480      	push	{r7}
 8011562:	b083      	sub	sp, #12
 8011564:	af00      	add	r7, sp, #0
 8011566:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	f103 0208 	add.w	r2, r3, #8
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011578:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	f103 0208 	add.w	r2, r3, #8
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	f103 0208 	add.w	r2, r3, #8
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	2200      	movs	r2, #0
 8011592:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8011594:	bf00      	nop
 8011596:	370c      	adds	r7, #12
 8011598:	46bd      	mov	sp, r7
 801159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801159e:	4770      	bx	lr

080115a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80115a0:	b480      	push	{r7}
 80115a2:	b083      	sub	sp, #12
 80115a4:	af00      	add	r7, sp, #0
 80115a6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	2200      	movs	r2, #0
 80115ac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80115ae:	bf00      	nop
 80115b0:	370c      	adds	r7, #12
 80115b2:	46bd      	mov	sp, r7
 80115b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115b8:	4770      	bx	lr

080115ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80115ba:	b480      	push	{r7}
 80115bc:	b085      	sub	sp, #20
 80115be:	af00      	add	r7, sp, #0
 80115c0:	6078      	str	r0, [r7, #4]
 80115c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	685b      	ldr	r3, [r3, #4]
 80115c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80115ca:	683b      	ldr	r3, [r7, #0]
 80115cc:	68fa      	ldr	r2, [r7, #12]
 80115ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80115d0:	68fb      	ldr	r3, [r7, #12]
 80115d2:	689a      	ldr	r2, [r3, #8]
 80115d4:	683b      	ldr	r3, [r7, #0]
 80115d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80115d8:	68fb      	ldr	r3, [r7, #12]
 80115da:	689b      	ldr	r3, [r3, #8]
 80115dc:	683a      	ldr	r2, [r7, #0]
 80115de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80115e0:	68fb      	ldr	r3, [r7, #12]
 80115e2:	683a      	ldr	r2, [r7, #0]
 80115e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80115e6:	683b      	ldr	r3, [r7, #0]
 80115e8:	687a      	ldr	r2, [r7, #4]
 80115ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	681b      	ldr	r3, [r3, #0]
 80115f0:	1c5a      	adds	r2, r3, #1
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	601a      	str	r2, [r3, #0]
}
 80115f6:	bf00      	nop
 80115f8:	3714      	adds	r7, #20
 80115fa:	46bd      	mov	sp, r7
 80115fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011600:	4770      	bx	lr

08011602 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011602:	b480      	push	{r7}
 8011604:	b085      	sub	sp, #20
 8011606:	af00      	add	r7, sp, #0
 8011608:	6078      	str	r0, [r7, #4]
 801160a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801160c:	683b      	ldr	r3, [r7, #0]
 801160e:	681b      	ldr	r3, [r3, #0]
 8011610:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8011612:	68bb      	ldr	r3, [r7, #8]
 8011614:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011618:	d103      	bne.n	8011622 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	691b      	ldr	r3, [r3, #16]
 801161e:	60fb      	str	r3, [r7, #12]
 8011620:	e00c      	b.n	801163c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	3308      	adds	r3, #8
 8011626:	60fb      	str	r3, [r7, #12]
 8011628:	e002      	b.n	8011630 <vListInsert+0x2e>
 801162a:	68fb      	ldr	r3, [r7, #12]
 801162c:	685b      	ldr	r3, [r3, #4]
 801162e:	60fb      	str	r3, [r7, #12]
 8011630:	68fb      	ldr	r3, [r7, #12]
 8011632:	685b      	ldr	r3, [r3, #4]
 8011634:	681b      	ldr	r3, [r3, #0]
 8011636:	68ba      	ldr	r2, [r7, #8]
 8011638:	429a      	cmp	r2, r3
 801163a:	d2f6      	bcs.n	801162a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801163c:	68fb      	ldr	r3, [r7, #12]
 801163e:	685a      	ldr	r2, [r3, #4]
 8011640:	683b      	ldr	r3, [r7, #0]
 8011642:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8011644:	683b      	ldr	r3, [r7, #0]
 8011646:	685b      	ldr	r3, [r3, #4]
 8011648:	683a      	ldr	r2, [r7, #0]
 801164a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801164c:	683b      	ldr	r3, [r7, #0]
 801164e:	68fa      	ldr	r2, [r7, #12]
 8011650:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8011652:	68fb      	ldr	r3, [r7, #12]
 8011654:	683a      	ldr	r2, [r7, #0]
 8011656:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8011658:	683b      	ldr	r3, [r7, #0]
 801165a:	687a      	ldr	r2, [r7, #4]
 801165c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	681b      	ldr	r3, [r3, #0]
 8011662:	1c5a      	adds	r2, r3, #1
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	601a      	str	r2, [r3, #0]
}
 8011668:	bf00      	nop
 801166a:	3714      	adds	r7, #20
 801166c:	46bd      	mov	sp, r7
 801166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011672:	4770      	bx	lr

08011674 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8011674:	b480      	push	{r7}
 8011676:	b085      	sub	sp, #20
 8011678:	af00      	add	r7, sp, #0
 801167a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	691b      	ldr	r3, [r3, #16]
 8011680:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	685b      	ldr	r3, [r3, #4]
 8011686:	687a      	ldr	r2, [r7, #4]
 8011688:	6892      	ldr	r2, [r2, #8]
 801168a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	689b      	ldr	r3, [r3, #8]
 8011690:	687a      	ldr	r2, [r7, #4]
 8011692:	6852      	ldr	r2, [r2, #4]
 8011694:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8011696:	68fb      	ldr	r3, [r7, #12]
 8011698:	685b      	ldr	r3, [r3, #4]
 801169a:	687a      	ldr	r2, [r7, #4]
 801169c:	429a      	cmp	r2, r3
 801169e:	d103      	bne.n	80116a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	689a      	ldr	r2, [r3, #8]
 80116a4:	68fb      	ldr	r3, [r7, #12]
 80116a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	2200      	movs	r2, #0
 80116ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80116ae:	68fb      	ldr	r3, [r7, #12]
 80116b0:	681b      	ldr	r3, [r3, #0]
 80116b2:	1e5a      	subs	r2, r3, #1
 80116b4:	68fb      	ldr	r3, [r7, #12]
 80116b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80116b8:	68fb      	ldr	r3, [r7, #12]
 80116ba:	681b      	ldr	r3, [r3, #0]
}
 80116bc:	4618      	mov	r0, r3
 80116be:	3714      	adds	r7, #20
 80116c0:	46bd      	mov	sp, r7
 80116c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116c6:	4770      	bx	lr

080116c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80116c8:	b580      	push	{r7, lr}
 80116ca:	b084      	sub	sp, #16
 80116cc:	af00      	add	r7, sp, #0
 80116ce:	6078      	str	r0, [r7, #4]
 80116d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80116d6:	68fb      	ldr	r3, [r7, #12]
 80116d8:	2b00      	cmp	r3, #0
 80116da:	d10a      	bne.n	80116f2 <xQueueGenericReset+0x2a>
	__asm volatile
 80116dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116e0:	f383 8811 	msr	BASEPRI, r3
 80116e4:	f3bf 8f6f 	isb	sy
 80116e8:	f3bf 8f4f 	dsb	sy
 80116ec:	60bb      	str	r3, [r7, #8]
}
 80116ee:	bf00      	nop
 80116f0:	e7fe      	b.n	80116f0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80116f2:	f002 fa17 	bl	8013b24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80116f6:	68fb      	ldr	r3, [r7, #12]
 80116f8:	681a      	ldr	r2, [r3, #0]
 80116fa:	68fb      	ldr	r3, [r7, #12]
 80116fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80116fe:	68f9      	ldr	r1, [r7, #12]
 8011700:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011702:	fb01 f303 	mul.w	r3, r1, r3
 8011706:	441a      	add	r2, r3
 8011708:	68fb      	ldr	r3, [r7, #12]
 801170a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801170c:	68fb      	ldr	r3, [r7, #12]
 801170e:	2200      	movs	r2, #0
 8011710:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8011712:	68fb      	ldr	r3, [r7, #12]
 8011714:	681a      	ldr	r2, [r3, #0]
 8011716:	68fb      	ldr	r3, [r7, #12]
 8011718:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801171a:	68fb      	ldr	r3, [r7, #12]
 801171c:	681a      	ldr	r2, [r3, #0]
 801171e:	68fb      	ldr	r3, [r7, #12]
 8011720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011722:	3b01      	subs	r3, #1
 8011724:	68f9      	ldr	r1, [r7, #12]
 8011726:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011728:	fb01 f303 	mul.w	r3, r1, r3
 801172c:	441a      	add	r2, r3
 801172e:	68fb      	ldr	r3, [r7, #12]
 8011730:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8011732:	68fb      	ldr	r3, [r7, #12]
 8011734:	22ff      	movs	r2, #255	; 0xff
 8011736:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801173a:	68fb      	ldr	r3, [r7, #12]
 801173c:	22ff      	movs	r2, #255	; 0xff
 801173e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8011742:	683b      	ldr	r3, [r7, #0]
 8011744:	2b00      	cmp	r3, #0
 8011746:	d114      	bne.n	8011772 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011748:	68fb      	ldr	r3, [r7, #12]
 801174a:	691b      	ldr	r3, [r3, #16]
 801174c:	2b00      	cmp	r3, #0
 801174e:	d01a      	beq.n	8011786 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011750:	68fb      	ldr	r3, [r7, #12]
 8011752:	3310      	adds	r3, #16
 8011754:	4618      	mov	r0, r3
 8011756:	f001 fa35 	bl	8012bc4 <xTaskRemoveFromEventList>
 801175a:	4603      	mov	r3, r0
 801175c:	2b00      	cmp	r3, #0
 801175e:	d012      	beq.n	8011786 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8011760:	4b0c      	ldr	r3, [pc, #48]	; (8011794 <xQueueGenericReset+0xcc>)
 8011762:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011766:	601a      	str	r2, [r3, #0]
 8011768:	f3bf 8f4f 	dsb	sy
 801176c:	f3bf 8f6f 	isb	sy
 8011770:	e009      	b.n	8011786 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8011772:	68fb      	ldr	r3, [r7, #12]
 8011774:	3310      	adds	r3, #16
 8011776:	4618      	mov	r0, r3
 8011778:	f7ff fef2 	bl	8011560 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801177c:	68fb      	ldr	r3, [r7, #12]
 801177e:	3324      	adds	r3, #36	; 0x24
 8011780:	4618      	mov	r0, r3
 8011782:	f7ff feed 	bl	8011560 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8011786:	f002 f9fd 	bl	8013b84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801178a:	2301      	movs	r3, #1
}
 801178c:	4618      	mov	r0, r3
 801178e:	3710      	adds	r7, #16
 8011790:	46bd      	mov	sp, r7
 8011792:	bd80      	pop	{r7, pc}
 8011794:	e000ed04 	.word	0xe000ed04

08011798 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8011798:	b580      	push	{r7, lr}
 801179a:	b08e      	sub	sp, #56	; 0x38
 801179c:	af02      	add	r7, sp, #8
 801179e:	60f8      	str	r0, [r7, #12]
 80117a0:	60b9      	str	r1, [r7, #8]
 80117a2:	607a      	str	r2, [r7, #4]
 80117a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80117a6:	68fb      	ldr	r3, [r7, #12]
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d10a      	bne.n	80117c2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80117ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117b0:	f383 8811 	msr	BASEPRI, r3
 80117b4:	f3bf 8f6f 	isb	sy
 80117b8:	f3bf 8f4f 	dsb	sy
 80117bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80117be:	bf00      	nop
 80117c0:	e7fe      	b.n	80117c0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80117c2:	683b      	ldr	r3, [r7, #0]
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d10a      	bne.n	80117de <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80117c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117cc:	f383 8811 	msr	BASEPRI, r3
 80117d0:	f3bf 8f6f 	isb	sy
 80117d4:	f3bf 8f4f 	dsb	sy
 80117d8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80117da:	bf00      	nop
 80117dc:	e7fe      	b.n	80117dc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	d002      	beq.n	80117ea <xQueueGenericCreateStatic+0x52>
 80117e4:	68bb      	ldr	r3, [r7, #8]
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	d001      	beq.n	80117ee <xQueueGenericCreateStatic+0x56>
 80117ea:	2301      	movs	r3, #1
 80117ec:	e000      	b.n	80117f0 <xQueueGenericCreateStatic+0x58>
 80117ee:	2300      	movs	r3, #0
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d10a      	bne.n	801180a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80117f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117f8:	f383 8811 	msr	BASEPRI, r3
 80117fc:	f3bf 8f6f 	isb	sy
 8011800:	f3bf 8f4f 	dsb	sy
 8011804:	623b      	str	r3, [r7, #32]
}
 8011806:	bf00      	nop
 8011808:	e7fe      	b.n	8011808 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	2b00      	cmp	r3, #0
 801180e:	d102      	bne.n	8011816 <xQueueGenericCreateStatic+0x7e>
 8011810:	68bb      	ldr	r3, [r7, #8]
 8011812:	2b00      	cmp	r3, #0
 8011814:	d101      	bne.n	801181a <xQueueGenericCreateStatic+0x82>
 8011816:	2301      	movs	r3, #1
 8011818:	e000      	b.n	801181c <xQueueGenericCreateStatic+0x84>
 801181a:	2300      	movs	r3, #0
 801181c:	2b00      	cmp	r3, #0
 801181e:	d10a      	bne.n	8011836 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8011820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011824:	f383 8811 	msr	BASEPRI, r3
 8011828:	f3bf 8f6f 	isb	sy
 801182c:	f3bf 8f4f 	dsb	sy
 8011830:	61fb      	str	r3, [r7, #28]
}
 8011832:	bf00      	nop
 8011834:	e7fe      	b.n	8011834 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8011836:	2350      	movs	r3, #80	; 0x50
 8011838:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801183a:	697b      	ldr	r3, [r7, #20]
 801183c:	2b50      	cmp	r3, #80	; 0x50
 801183e:	d00a      	beq.n	8011856 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8011840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011844:	f383 8811 	msr	BASEPRI, r3
 8011848:	f3bf 8f6f 	isb	sy
 801184c:	f3bf 8f4f 	dsb	sy
 8011850:	61bb      	str	r3, [r7, #24]
}
 8011852:	bf00      	nop
 8011854:	e7fe      	b.n	8011854 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8011856:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011858:	683b      	ldr	r3, [r7, #0]
 801185a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 801185c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801185e:	2b00      	cmp	r3, #0
 8011860:	d00d      	beq.n	801187e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8011862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011864:	2201      	movs	r2, #1
 8011866:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801186a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801186e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011870:	9300      	str	r3, [sp, #0]
 8011872:	4613      	mov	r3, r2
 8011874:	687a      	ldr	r2, [r7, #4]
 8011876:	68b9      	ldr	r1, [r7, #8]
 8011878:	68f8      	ldr	r0, [r7, #12]
 801187a:	f000 f83f 	bl	80118fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801187e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8011880:	4618      	mov	r0, r3
 8011882:	3730      	adds	r7, #48	; 0x30
 8011884:	46bd      	mov	sp, r7
 8011886:	bd80      	pop	{r7, pc}

08011888 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8011888:	b580      	push	{r7, lr}
 801188a:	b08a      	sub	sp, #40	; 0x28
 801188c:	af02      	add	r7, sp, #8
 801188e:	60f8      	str	r0, [r7, #12]
 8011890:	60b9      	str	r1, [r7, #8]
 8011892:	4613      	mov	r3, r2
 8011894:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011896:	68fb      	ldr	r3, [r7, #12]
 8011898:	2b00      	cmp	r3, #0
 801189a:	d10a      	bne.n	80118b2 <xQueueGenericCreate+0x2a>
	__asm volatile
 801189c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118a0:	f383 8811 	msr	BASEPRI, r3
 80118a4:	f3bf 8f6f 	isb	sy
 80118a8:	f3bf 8f4f 	dsb	sy
 80118ac:	613b      	str	r3, [r7, #16]
}
 80118ae:	bf00      	nop
 80118b0:	e7fe      	b.n	80118b0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80118b2:	68fb      	ldr	r3, [r7, #12]
 80118b4:	68ba      	ldr	r2, [r7, #8]
 80118b6:	fb02 f303 	mul.w	r3, r2, r3
 80118ba:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80118bc:	69fb      	ldr	r3, [r7, #28]
 80118be:	3350      	adds	r3, #80	; 0x50
 80118c0:	4618      	mov	r0, r3
 80118c2:	f002 fa51 	bl	8013d68 <pvPortMalloc>
 80118c6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80118c8:	69bb      	ldr	r3, [r7, #24]
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d011      	beq.n	80118f2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80118ce:	69bb      	ldr	r3, [r7, #24]
 80118d0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80118d2:	697b      	ldr	r3, [r7, #20]
 80118d4:	3350      	adds	r3, #80	; 0x50
 80118d6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80118d8:	69bb      	ldr	r3, [r7, #24]
 80118da:	2200      	movs	r2, #0
 80118dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80118e0:	79fa      	ldrb	r2, [r7, #7]
 80118e2:	69bb      	ldr	r3, [r7, #24]
 80118e4:	9300      	str	r3, [sp, #0]
 80118e6:	4613      	mov	r3, r2
 80118e8:	697a      	ldr	r2, [r7, #20]
 80118ea:	68b9      	ldr	r1, [r7, #8]
 80118ec:	68f8      	ldr	r0, [r7, #12]
 80118ee:	f000 f805 	bl	80118fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80118f2:	69bb      	ldr	r3, [r7, #24]
	}
 80118f4:	4618      	mov	r0, r3
 80118f6:	3720      	adds	r7, #32
 80118f8:	46bd      	mov	sp, r7
 80118fa:	bd80      	pop	{r7, pc}

080118fc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80118fc:	b580      	push	{r7, lr}
 80118fe:	b084      	sub	sp, #16
 8011900:	af00      	add	r7, sp, #0
 8011902:	60f8      	str	r0, [r7, #12]
 8011904:	60b9      	str	r1, [r7, #8]
 8011906:	607a      	str	r2, [r7, #4]
 8011908:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801190a:	68bb      	ldr	r3, [r7, #8]
 801190c:	2b00      	cmp	r3, #0
 801190e:	d103      	bne.n	8011918 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8011910:	69bb      	ldr	r3, [r7, #24]
 8011912:	69ba      	ldr	r2, [r7, #24]
 8011914:	601a      	str	r2, [r3, #0]
 8011916:	e002      	b.n	801191e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8011918:	69bb      	ldr	r3, [r7, #24]
 801191a:	687a      	ldr	r2, [r7, #4]
 801191c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801191e:	69bb      	ldr	r3, [r7, #24]
 8011920:	68fa      	ldr	r2, [r7, #12]
 8011922:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8011924:	69bb      	ldr	r3, [r7, #24]
 8011926:	68ba      	ldr	r2, [r7, #8]
 8011928:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801192a:	2101      	movs	r1, #1
 801192c:	69b8      	ldr	r0, [r7, #24]
 801192e:	f7ff fecb 	bl	80116c8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8011932:	69bb      	ldr	r3, [r7, #24]
 8011934:	78fa      	ldrb	r2, [r7, #3]
 8011936:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801193a:	bf00      	nop
 801193c:	3710      	adds	r7, #16
 801193e:	46bd      	mov	sp, r7
 8011940:	bd80      	pop	{r7, pc}
	...

08011944 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8011944:	b580      	push	{r7, lr}
 8011946:	b08e      	sub	sp, #56	; 0x38
 8011948:	af00      	add	r7, sp, #0
 801194a:	60f8      	str	r0, [r7, #12]
 801194c:	60b9      	str	r1, [r7, #8]
 801194e:	607a      	str	r2, [r7, #4]
 8011950:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8011952:	2300      	movs	r3, #0
 8011954:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011956:	68fb      	ldr	r3, [r7, #12]
 8011958:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801195a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801195c:	2b00      	cmp	r3, #0
 801195e:	d10a      	bne.n	8011976 <xQueueGenericSend+0x32>
	__asm volatile
 8011960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011964:	f383 8811 	msr	BASEPRI, r3
 8011968:	f3bf 8f6f 	isb	sy
 801196c:	f3bf 8f4f 	dsb	sy
 8011970:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8011972:	bf00      	nop
 8011974:	e7fe      	b.n	8011974 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011976:	68bb      	ldr	r3, [r7, #8]
 8011978:	2b00      	cmp	r3, #0
 801197a:	d103      	bne.n	8011984 <xQueueGenericSend+0x40>
 801197c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801197e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011980:	2b00      	cmp	r3, #0
 8011982:	d101      	bne.n	8011988 <xQueueGenericSend+0x44>
 8011984:	2301      	movs	r3, #1
 8011986:	e000      	b.n	801198a <xQueueGenericSend+0x46>
 8011988:	2300      	movs	r3, #0
 801198a:	2b00      	cmp	r3, #0
 801198c:	d10a      	bne.n	80119a4 <xQueueGenericSend+0x60>
	__asm volatile
 801198e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011992:	f383 8811 	msr	BASEPRI, r3
 8011996:	f3bf 8f6f 	isb	sy
 801199a:	f3bf 8f4f 	dsb	sy
 801199e:	627b      	str	r3, [r7, #36]	; 0x24
}
 80119a0:	bf00      	nop
 80119a2:	e7fe      	b.n	80119a2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80119a4:	683b      	ldr	r3, [r7, #0]
 80119a6:	2b02      	cmp	r3, #2
 80119a8:	d103      	bne.n	80119b2 <xQueueGenericSend+0x6e>
 80119aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80119ae:	2b01      	cmp	r3, #1
 80119b0:	d101      	bne.n	80119b6 <xQueueGenericSend+0x72>
 80119b2:	2301      	movs	r3, #1
 80119b4:	e000      	b.n	80119b8 <xQueueGenericSend+0x74>
 80119b6:	2300      	movs	r3, #0
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	d10a      	bne.n	80119d2 <xQueueGenericSend+0x8e>
	__asm volatile
 80119bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119c0:	f383 8811 	msr	BASEPRI, r3
 80119c4:	f3bf 8f6f 	isb	sy
 80119c8:	f3bf 8f4f 	dsb	sy
 80119cc:	623b      	str	r3, [r7, #32]
}
 80119ce:	bf00      	nop
 80119d0:	e7fe      	b.n	80119d0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80119d2:	f001 fb17 	bl	8013004 <xTaskGetSchedulerState>
 80119d6:	4603      	mov	r3, r0
 80119d8:	2b00      	cmp	r3, #0
 80119da:	d102      	bne.n	80119e2 <xQueueGenericSend+0x9e>
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d101      	bne.n	80119e6 <xQueueGenericSend+0xa2>
 80119e2:	2301      	movs	r3, #1
 80119e4:	e000      	b.n	80119e8 <xQueueGenericSend+0xa4>
 80119e6:	2300      	movs	r3, #0
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	d10a      	bne.n	8011a02 <xQueueGenericSend+0xbe>
	__asm volatile
 80119ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119f0:	f383 8811 	msr	BASEPRI, r3
 80119f4:	f3bf 8f6f 	isb	sy
 80119f8:	f3bf 8f4f 	dsb	sy
 80119fc:	61fb      	str	r3, [r7, #28]
}
 80119fe:	bf00      	nop
 8011a00:	e7fe      	b.n	8011a00 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011a02:	f002 f88f 	bl	8013b24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011a0e:	429a      	cmp	r2, r3
 8011a10:	d302      	bcc.n	8011a18 <xQueueGenericSend+0xd4>
 8011a12:	683b      	ldr	r3, [r7, #0]
 8011a14:	2b02      	cmp	r3, #2
 8011a16:	d129      	bne.n	8011a6c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011a18:	683a      	ldr	r2, [r7, #0]
 8011a1a:	68b9      	ldr	r1, [r7, #8]
 8011a1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011a1e:	f000 fac7 	bl	8011fb0 <prvCopyDataToQueue>
 8011a22:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d010      	beq.n	8011a4e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a2e:	3324      	adds	r3, #36	; 0x24
 8011a30:	4618      	mov	r0, r3
 8011a32:	f001 f8c7 	bl	8012bc4 <xTaskRemoveFromEventList>
 8011a36:	4603      	mov	r3, r0
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d013      	beq.n	8011a64 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8011a3c:	4b3f      	ldr	r3, [pc, #252]	; (8011b3c <xQueueGenericSend+0x1f8>)
 8011a3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011a42:	601a      	str	r2, [r3, #0]
 8011a44:	f3bf 8f4f 	dsb	sy
 8011a48:	f3bf 8f6f 	isb	sy
 8011a4c:	e00a      	b.n	8011a64 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8011a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d007      	beq.n	8011a64 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8011a54:	4b39      	ldr	r3, [pc, #228]	; (8011b3c <xQueueGenericSend+0x1f8>)
 8011a56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011a5a:	601a      	str	r2, [r3, #0]
 8011a5c:	f3bf 8f4f 	dsb	sy
 8011a60:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8011a64:	f002 f88e 	bl	8013b84 <vPortExitCritical>
				return pdPASS;
 8011a68:	2301      	movs	r3, #1
 8011a6a:	e063      	b.n	8011b34 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d103      	bne.n	8011a7a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011a72:	f002 f887 	bl	8013b84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8011a76:	2300      	movs	r3, #0
 8011a78:	e05c      	b.n	8011b34 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d106      	bne.n	8011a8e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011a80:	f107 0314 	add.w	r3, r7, #20
 8011a84:	4618      	mov	r0, r3
 8011a86:	f001 f963 	bl	8012d50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011a8a:	2301      	movs	r3, #1
 8011a8c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011a8e:	f002 f879 	bl	8013b84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011a92:	f000 fe37 	bl	8012704 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011a96:	f002 f845 	bl	8013b24 <vPortEnterCritical>
 8011a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011aa0:	b25b      	sxtb	r3, r3
 8011aa2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011aa6:	d103      	bne.n	8011ab0 <xQueueGenericSend+0x16c>
 8011aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011aaa:	2200      	movs	r2, #0
 8011aac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ab2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011ab6:	b25b      	sxtb	r3, r3
 8011ab8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011abc:	d103      	bne.n	8011ac6 <xQueueGenericSend+0x182>
 8011abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ac0:	2200      	movs	r2, #0
 8011ac2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011ac6:	f002 f85d 	bl	8013b84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011aca:	1d3a      	adds	r2, r7, #4
 8011acc:	f107 0314 	add.w	r3, r7, #20
 8011ad0:	4611      	mov	r1, r2
 8011ad2:	4618      	mov	r0, r3
 8011ad4:	f001 f952 	bl	8012d7c <xTaskCheckForTimeOut>
 8011ad8:	4603      	mov	r3, r0
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d124      	bne.n	8011b28 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8011ade:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011ae0:	f000 fb5e 	bl	80121a0 <prvIsQueueFull>
 8011ae4:	4603      	mov	r3, r0
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d018      	beq.n	8011b1c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8011aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011aec:	3310      	adds	r3, #16
 8011aee:	687a      	ldr	r2, [r7, #4]
 8011af0:	4611      	mov	r1, r2
 8011af2:	4618      	mov	r0, r3
 8011af4:	f000 ffda 	bl	8012aac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8011af8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011afa:	f000 fae9 	bl	80120d0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8011afe:	f000 fe0f 	bl	8012720 <xTaskResumeAll>
 8011b02:	4603      	mov	r3, r0
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	f47f af7c 	bne.w	8011a02 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8011b0a:	4b0c      	ldr	r3, [pc, #48]	; (8011b3c <xQueueGenericSend+0x1f8>)
 8011b0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011b10:	601a      	str	r2, [r3, #0]
 8011b12:	f3bf 8f4f 	dsb	sy
 8011b16:	f3bf 8f6f 	isb	sy
 8011b1a:	e772      	b.n	8011a02 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8011b1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011b1e:	f000 fad7 	bl	80120d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011b22:	f000 fdfd 	bl	8012720 <xTaskResumeAll>
 8011b26:	e76c      	b.n	8011a02 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8011b28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011b2a:	f000 fad1 	bl	80120d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011b2e:	f000 fdf7 	bl	8012720 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8011b32:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8011b34:	4618      	mov	r0, r3
 8011b36:	3738      	adds	r7, #56	; 0x38
 8011b38:	46bd      	mov	sp, r7
 8011b3a:	bd80      	pop	{r7, pc}
 8011b3c:	e000ed04 	.word	0xe000ed04

08011b40 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8011b40:	b580      	push	{r7, lr}
 8011b42:	b090      	sub	sp, #64	; 0x40
 8011b44:	af00      	add	r7, sp, #0
 8011b46:	60f8      	str	r0, [r7, #12]
 8011b48:	60b9      	str	r1, [r7, #8]
 8011b4a:	607a      	str	r2, [r7, #4]
 8011b4c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011b4e:	68fb      	ldr	r3, [r7, #12]
 8011b50:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8011b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d10a      	bne.n	8011b6e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8011b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b5c:	f383 8811 	msr	BASEPRI, r3
 8011b60:	f3bf 8f6f 	isb	sy
 8011b64:	f3bf 8f4f 	dsb	sy
 8011b68:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8011b6a:	bf00      	nop
 8011b6c:	e7fe      	b.n	8011b6c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011b6e:	68bb      	ldr	r3, [r7, #8]
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d103      	bne.n	8011b7c <xQueueGenericSendFromISR+0x3c>
 8011b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d101      	bne.n	8011b80 <xQueueGenericSendFromISR+0x40>
 8011b7c:	2301      	movs	r3, #1
 8011b7e:	e000      	b.n	8011b82 <xQueueGenericSendFromISR+0x42>
 8011b80:	2300      	movs	r3, #0
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d10a      	bne.n	8011b9c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8011b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b8a:	f383 8811 	msr	BASEPRI, r3
 8011b8e:	f3bf 8f6f 	isb	sy
 8011b92:	f3bf 8f4f 	dsb	sy
 8011b96:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011b98:	bf00      	nop
 8011b9a:	e7fe      	b.n	8011b9a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011b9c:	683b      	ldr	r3, [r7, #0]
 8011b9e:	2b02      	cmp	r3, #2
 8011ba0:	d103      	bne.n	8011baa <xQueueGenericSendFromISR+0x6a>
 8011ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011ba6:	2b01      	cmp	r3, #1
 8011ba8:	d101      	bne.n	8011bae <xQueueGenericSendFromISR+0x6e>
 8011baa:	2301      	movs	r3, #1
 8011bac:	e000      	b.n	8011bb0 <xQueueGenericSendFromISR+0x70>
 8011bae:	2300      	movs	r3, #0
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d10a      	bne.n	8011bca <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8011bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bb8:	f383 8811 	msr	BASEPRI, r3
 8011bbc:	f3bf 8f6f 	isb	sy
 8011bc0:	f3bf 8f4f 	dsb	sy
 8011bc4:	623b      	str	r3, [r7, #32]
}
 8011bc6:	bf00      	nop
 8011bc8:	e7fe      	b.n	8011bc8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011bca:	f002 f88d 	bl	8013ce8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8011bce:	f3ef 8211 	mrs	r2, BASEPRI
 8011bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bd6:	f383 8811 	msr	BASEPRI, r3
 8011bda:	f3bf 8f6f 	isb	sy
 8011bde:	f3bf 8f4f 	dsb	sy
 8011be2:	61fa      	str	r2, [r7, #28]
 8011be4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8011be6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011be8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011bf2:	429a      	cmp	r2, r3
 8011bf4:	d302      	bcc.n	8011bfc <xQueueGenericSendFromISR+0xbc>
 8011bf6:	683b      	ldr	r3, [r7, #0]
 8011bf8:	2b02      	cmp	r3, #2
 8011bfa:	d12f      	bne.n	8011c5c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bfe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011c02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011c0c:	683a      	ldr	r2, [r7, #0]
 8011c0e:	68b9      	ldr	r1, [r7, #8]
 8011c10:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011c12:	f000 f9cd 	bl	8011fb0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011c16:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8011c1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011c1e:	d112      	bne.n	8011c46 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	d016      	beq.n	8011c56 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c2a:	3324      	adds	r3, #36	; 0x24
 8011c2c:	4618      	mov	r0, r3
 8011c2e:	f000 ffc9 	bl	8012bc4 <xTaskRemoveFromEventList>
 8011c32:	4603      	mov	r3, r0
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d00e      	beq.n	8011c56 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d00b      	beq.n	8011c56 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	2201      	movs	r2, #1
 8011c42:	601a      	str	r2, [r3, #0]
 8011c44:	e007      	b.n	8011c56 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011c46:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8011c4a:	3301      	adds	r3, #1
 8011c4c:	b2db      	uxtb	r3, r3
 8011c4e:	b25a      	sxtb	r2, r3
 8011c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8011c56:	2301      	movs	r3, #1
 8011c58:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8011c5a:	e001      	b.n	8011c60 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011c5c:	2300      	movs	r3, #0
 8011c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c62:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8011c64:	697b      	ldr	r3, [r7, #20]
 8011c66:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8011c6a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011c6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8011c6e:	4618      	mov	r0, r3
 8011c70:	3740      	adds	r7, #64	; 0x40
 8011c72:	46bd      	mov	sp, r7
 8011c74:	bd80      	pop	{r7, pc}
	...

08011c78 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8011c78:	b580      	push	{r7, lr}
 8011c7a:	b08c      	sub	sp, #48	; 0x30
 8011c7c:	af00      	add	r7, sp, #0
 8011c7e:	60f8      	str	r0, [r7, #12]
 8011c80:	60b9      	str	r1, [r7, #8]
 8011c82:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8011c84:	2300      	movs	r3, #0
 8011c86:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011c88:	68fb      	ldr	r3, [r7, #12]
 8011c8a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	d10a      	bne.n	8011ca8 <xQueueReceive+0x30>
	__asm volatile
 8011c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c96:	f383 8811 	msr	BASEPRI, r3
 8011c9a:	f3bf 8f6f 	isb	sy
 8011c9e:	f3bf 8f4f 	dsb	sy
 8011ca2:	623b      	str	r3, [r7, #32]
}
 8011ca4:	bf00      	nop
 8011ca6:	e7fe      	b.n	8011ca6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011ca8:	68bb      	ldr	r3, [r7, #8]
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	d103      	bne.n	8011cb6 <xQueueReceive+0x3e>
 8011cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	d101      	bne.n	8011cba <xQueueReceive+0x42>
 8011cb6:	2301      	movs	r3, #1
 8011cb8:	e000      	b.n	8011cbc <xQueueReceive+0x44>
 8011cba:	2300      	movs	r3, #0
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d10a      	bne.n	8011cd6 <xQueueReceive+0x5e>
	__asm volatile
 8011cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cc4:	f383 8811 	msr	BASEPRI, r3
 8011cc8:	f3bf 8f6f 	isb	sy
 8011ccc:	f3bf 8f4f 	dsb	sy
 8011cd0:	61fb      	str	r3, [r7, #28]
}
 8011cd2:	bf00      	nop
 8011cd4:	e7fe      	b.n	8011cd4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011cd6:	f001 f995 	bl	8013004 <xTaskGetSchedulerState>
 8011cda:	4603      	mov	r3, r0
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d102      	bne.n	8011ce6 <xQueueReceive+0x6e>
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	d101      	bne.n	8011cea <xQueueReceive+0x72>
 8011ce6:	2301      	movs	r3, #1
 8011ce8:	e000      	b.n	8011cec <xQueueReceive+0x74>
 8011cea:	2300      	movs	r3, #0
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d10a      	bne.n	8011d06 <xQueueReceive+0x8e>
	__asm volatile
 8011cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cf4:	f383 8811 	msr	BASEPRI, r3
 8011cf8:	f3bf 8f6f 	isb	sy
 8011cfc:	f3bf 8f4f 	dsb	sy
 8011d00:	61bb      	str	r3, [r7, #24]
}
 8011d02:	bf00      	nop
 8011d04:	e7fe      	b.n	8011d04 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011d06:	f001 ff0d 	bl	8013b24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011d0e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	d01f      	beq.n	8011d56 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011d16:	68b9      	ldr	r1, [r7, #8]
 8011d18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011d1a:	f000 f9b3 	bl	8012084 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d20:	1e5a      	subs	r2, r3, #1
 8011d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d24:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d28:	691b      	ldr	r3, [r3, #16]
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	d00f      	beq.n	8011d4e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d30:	3310      	adds	r3, #16
 8011d32:	4618      	mov	r0, r3
 8011d34:	f000 ff46 	bl	8012bc4 <xTaskRemoveFromEventList>
 8011d38:	4603      	mov	r3, r0
 8011d3a:	2b00      	cmp	r3, #0
 8011d3c:	d007      	beq.n	8011d4e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011d3e:	4b3d      	ldr	r3, [pc, #244]	; (8011e34 <xQueueReceive+0x1bc>)
 8011d40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011d44:	601a      	str	r2, [r3, #0]
 8011d46:	f3bf 8f4f 	dsb	sy
 8011d4a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011d4e:	f001 ff19 	bl	8013b84 <vPortExitCritical>
				return pdPASS;
 8011d52:	2301      	movs	r3, #1
 8011d54:	e069      	b.n	8011e2a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d103      	bne.n	8011d64 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011d5c:	f001 ff12 	bl	8013b84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011d60:	2300      	movs	r3, #0
 8011d62:	e062      	b.n	8011e2a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d106      	bne.n	8011d78 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011d6a:	f107 0310 	add.w	r3, r7, #16
 8011d6e:	4618      	mov	r0, r3
 8011d70:	f000 ffee 	bl	8012d50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011d74:	2301      	movs	r3, #1
 8011d76:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011d78:	f001 ff04 	bl	8013b84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011d7c:	f000 fcc2 	bl	8012704 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011d80:	f001 fed0 	bl	8013b24 <vPortEnterCritical>
 8011d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d86:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011d8a:	b25b      	sxtb	r3, r3
 8011d8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011d90:	d103      	bne.n	8011d9a <xQueueReceive+0x122>
 8011d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d94:	2200      	movs	r2, #0
 8011d96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011da0:	b25b      	sxtb	r3, r3
 8011da2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011da6:	d103      	bne.n	8011db0 <xQueueReceive+0x138>
 8011da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011daa:	2200      	movs	r2, #0
 8011dac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011db0:	f001 fee8 	bl	8013b84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011db4:	1d3a      	adds	r2, r7, #4
 8011db6:	f107 0310 	add.w	r3, r7, #16
 8011dba:	4611      	mov	r1, r2
 8011dbc:	4618      	mov	r0, r3
 8011dbe:	f000 ffdd 	bl	8012d7c <xTaskCheckForTimeOut>
 8011dc2:	4603      	mov	r3, r0
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d123      	bne.n	8011e10 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011dc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011dca:	f000 f9d3 	bl	8012174 <prvIsQueueEmpty>
 8011dce:	4603      	mov	r3, r0
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d017      	beq.n	8011e04 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dd6:	3324      	adds	r3, #36	; 0x24
 8011dd8:	687a      	ldr	r2, [r7, #4]
 8011dda:	4611      	mov	r1, r2
 8011ddc:	4618      	mov	r0, r3
 8011dde:	f000 fe65 	bl	8012aac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011de2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011de4:	f000 f974 	bl	80120d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011de8:	f000 fc9a 	bl	8012720 <xTaskResumeAll>
 8011dec:	4603      	mov	r3, r0
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	d189      	bne.n	8011d06 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8011df2:	4b10      	ldr	r3, [pc, #64]	; (8011e34 <xQueueReceive+0x1bc>)
 8011df4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011df8:	601a      	str	r2, [r3, #0]
 8011dfa:	f3bf 8f4f 	dsb	sy
 8011dfe:	f3bf 8f6f 	isb	sy
 8011e02:	e780      	b.n	8011d06 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8011e04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011e06:	f000 f963 	bl	80120d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011e0a:	f000 fc89 	bl	8012720 <xTaskResumeAll>
 8011e0e:	e77a      	b.n	8011d06 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8011e10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011e12:	f000 f95d 	bl	80120d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011e16:	f000 fc83 	bl	8012720 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011e1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011e1c:	f000 f9aa 	bl	8012174 <prvIsQueueEmpty>
 8011e20:	4603      	mov	r3, r0
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	f43f af6f 	beq.w	8011d06 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011e28:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8011e2a:	4618      	mov	r0, r3
 8011e2c:	3730      	adds	r7, #48	; 0x30
 8011e2e:	46bd      	mov	sp, r7
 8011e30:	bd80      	pop	{r7, pc}
 8011e32:	bf00      	nop
 8011e34:	e000ed04 	.word	0xe000ed04

08011e38 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011e38:	b580      	push	{r7, lr}
 8011e3a:	b08e      	sub	sp, #56	; 0x38
 8011e3c:	af00      	add	r7, sp, #0
 8011e3e:	60f8      	str	r0, [r7, #12]
 8011e40:	60b9      	str	r1, [r7, #8]
 8011e42:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011e44:	68fb      	ldr	r3, [r7, #12]
 8011e46:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	d10a      	bne.n	8011e64 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8011e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e52:	f383 8811 	msr	BASEPRI, r3
 8011e56:	f3bf 8f6f 	isb	sy
 8011e5a:	f3bf 8f4f 	dsb	sy
 8011e5e:	623b      	str	r3, [r7, #32]
}
 8011e60:	bf00      	nop
 8011e62:	e7fe      	b.n	8011e62 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011e64:	68bb      	ldr	r3, [r7, #8]
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	d103      	bne.n	8011e72 <xQueueReceiveFromISR+0x3a>
 8011e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d101      	bne.n	8011e76 <xQueueReceiveFromISR+0x3e>
 8011e72:	2301      	movs	r3, #1
 8011e74:	e000      	b.n	8011e78 <xQueueReceiveFromISR+0x40>
 8011e76:	2300      	movs	r3, #0
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	d10a      	bne.n	8011e92 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8011e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e80:	f383 8811 	msr	BASEPRI, r3
 8011e84:	f3bf 8f6f 	isb	sy
 8011e88:	f3bf 8f4f 	dsb	sy
 8011e8c:	61fb      	str	r3, [r7, #28]
}
 8011e8e:	bf00      	nop
 8011e90:	e7fe      	b.n	8011e90 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011e92:	f001 ff29 	bl	8013ce8 <vPortValidateInterruptPriority>
	__asm volatile
 8011e96:	f3ef 8211 	mrs	r2, BASEPRI
 8011e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e9e:	f383 8811 	msr	BASEPRI, r3
 8011ea2:	f3bf 8f6f 	isb	sy
 8011ea6:	f3bf 8f4f 	dsb	sy
 8011eaa:	61ba      	str	r2, [r7, #24]
 8011eac:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8011eae:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011eb6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d02f      	beq.n	8011f1e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8011ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ec0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011ec4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011ec8:	68b9      	ldr	r1, [r7, #8]
 8011eca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011ecc:	f000 f8da 	bl	8012084 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ed2:	1e5a      	subs	r2, r3, #1
 8011ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ed6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8011ed8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011edc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011ee0:	d112      	bne.n	8011f08 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ee4:	691b      	ldr	r3, [r3, #16]
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	d016      	beq.n	8011f18 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011eec:	3310      	adds	r3, #16
 8011eee:	4618      	mov	r0, r3
 8011ef0:	f000 fe68 	bl	8012bc4 <xTaskRemoveFromEventList>
 8011ef4:	4603      	mov	r3, r0
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d00e      	beq.n	8011f18 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	d00b      	beq.n	8011f18 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	2201      	movs	r2, #1
 8011f04:	601a      	str	r2, [r3, #0]
 8011f06:	e007      	b.n	8011f18 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8011f08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011f0c:	3301      	adds	r3, #1
 8011f0e:	b2db      	uxtb	r3, r3
 8011f10:	b25a      	sxtb	r2, r3
 8011f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8011f18:	2301      	movs	r3, #1
 8011f1a:	637b      	str	r3, [r7, #52]	; 0x34
 8011f1c:	e001      	b.n	8011f22 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8011f1e:	2300      	movs	r3, #0
 8011f20:	637b      	str	r3, [r7, #52]	; 0x34
 8011f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f24:	613b      	str	r3, [r7, #16]
	__asm volatile
 8011f26:	693b      	ldr	r3, [r7, #16]
 8011f28:	f383 8811 	msr	BASEPRI, r3
}
 8011f2c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011f2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011f30:	4618      	mov	r0, r3
 8011f32:	3738      	adds	r7, #56	; 0x38
 8011f34:	46bd      	mov	sp, r7
 8011f36:	bd80      	pop	{r7, pc}

08011f38 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8011f38:	b580      	push	{r7, lr}
 8011f3a:	b084      	sub	sp, #16
 8011f3c:	af00      	add	r7, sp, #0
 8011f3e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	d10a      	bne.n	8011f5c <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8011f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f4a:	f383 8811 	msr	BASEPRI, r3
 8011f4e:	f3bf 8f6f 	isb	sy
 8011f52:	f3bf 8f4f 	dsb	sy
 8011f56:	60bb      	str	r3, [r7, #8]
}
 8011f58:	bf00      	nop
 8011f5a:	e7fe      	b.n	8011f5a <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8011f5c:	f001 fde2 	bl	8013b24 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011f64:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8011f66:	f001 fe0d 	bl	8013b84 <vPortExitCritical>

	return uxReturn;
 8011f6a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8011f6c:	4618      	mov	r0, r3
 8011f6e:	3710      	adds	r7, #16
 8011f70:	46bd      	mov	sp, r7
 8011f72:	bd80      	pop	{r7, pc}

08011f74 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8011f74:	b480      	push	{r7}
 8011f76:	b087      	sub	sp, #28
 8011f78:	af00      	add	r7, sp, #0
 8011f7a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8011f80:	697b      	ldr	r3, [r7, #20]
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	d10a      	bne.n	8011f9c <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8011f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f8a:	f383 8811 	msr	BASEPRI, r3
 8011f8e:	f3bf 8f6f 	isb	sy
 8011f92:	f3bf 8f4f 	dsb	sy
 8011f96:	60fb      	str	r3, [r7, #12]
}
 8011f98:	bf00      	nop
 8011f9a:	e7fe      	b.n	8011f9a <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8011f9c:	697b      	ldr	r3, [r7, #20]
 8011f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011fa0:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8011fa2:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8011fa4:	4618      	mov	r0, r3
 8011fa6:	371c      	adds	r7, #28
 8011fa8:	46bd      	mov	sp, r7
 8011faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fae:	4770      	bx	lr

08011fb0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8011fb0:	b580      	push	{r7, lr}
 8011fb2:	b086      	sub	sp, #24
 8011fb4:	af00      	add	r7, sp, #0
 8011fb6:	60f8      	str	r0, [r7, #12]
 8011fb8:	60b9      	str	r1, [r7, #8]
 8011fba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8011fbc:	2300      	movs	r3, #0
 8011fbe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011fc0:	68fb      	ldr	r3, [r7, #12]
 8011fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011fc4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8011fc6:	68fb      	ldr	r3, [r7, #12]
 8011fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011fca:	2b00      	cmp	r3, #0
 8011fcc:	d10d      	bne.n	8011fea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011fce:	68fb      	ldr	r3, [r7, #12]
 8011fd0:	681b      	ldr	r3, [r3, #0]
 8011fd2:	2b00      	cmp	r3, #0
 8011fd4:	d14d      	bne.n	8012072 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011fd6:	68fb      	ldr	r3, [r7, #12]
 8011fd8:	689b      	ldr	r3, [r3, #8]
 8011fda:	4618      	mov	r0, r3
 8011fdc:	f001 f830 	bl	8013040 <xTaskPriorityDisinherit>
 8011fe0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8011fe2:	68fb      	ldr	r3, [r7, #12]
 8011fe4:	2200      	movs	r2, #0
 8011fe6:	609a      	str	r2, [r3, #8]
 8011fe8:	e043      	b.n	8012072 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d119      	bne.n	8012024 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011ff0:	68fb      	ldr	r3, [r7, #12]
 8011ff2:	6858      	ldr	r0, [r3, #4]
 8011ff4:	68fb      	ldr	r3, [r7, #12]
 8011ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ff8:	461a      	mov	r2, r3
 8011ffa:	68b9      	ldr	r1, [r7, #8]
 8011ffc:	f002 f8d8 	bl	80141b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012000:	68fb      	ldr	r3, [r7, #12]
 8012002:	685a      	ldr	r2, [r3, #4]
 8012004:	68fb      	ldr	r3, [r7, #12]
 8012006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012008:	441a      	add	r2, r3
 801200a:	68fb      	ldr	r3, [r7, #12]
 801200c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801200e:	68fb      	ldr	r3, [r7, #12]
 8012010:	685a      	ldr	r2, [r3, #4]
 8012012:	68fb      	ldr	r3, [r7, #12]
 8012014:	689b      	ldr	r3, [r3, #8]
 8012016:	429a      	cmp	r2, r3
 8012018:	d32b      	bcc.n	8012072 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801201a:	68fb      	ldr	r3, [r7, #12]
 801201c:	681a      	ldr	r2, [r3, #0]
 801201e:	68fb      	ldr	r3, [r7, #12]
 8012020:	605a      	str	r2, [r3, #4]
 8012022:	e026      	b.n	8012072 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8012024:	68fb      	ldr	r3, [r7, #12]
 8012026:	68d8      	ldr	r0, [r3, #12]
 8012028:	68fb      	ldr	r3, [r7, #12]
 801202a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801202c:	461a      	mov	r2, r3
 801202e:	68b9      	ldr	r1, [r7, #8]
 8012030:	f002 f8be 	bl	80141b0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8012034:	68fb      	ldr	r3, [r7, #12]
 8012036:	68da      	ldr	r2, [r3, #12]
 8012038:	68fb      	ldr	r3, [r7, #12]
 801203a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801203c:	425b      	negs	r3, r3
 801203e:	441a      	add	r2, r3
 8012040:	68fb      	ldr	r3, [r7, #12]
 8012042:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012044:	68fb      	ldr	r3, [r7, #12]
 8012046:	68da      	ldr	r2, [r3, #12]
 8012048:	68fb      	ldr	r3, [r7, #12]
 801204a:	681b      	ldr	r3, [r3, #0]
 801204c:	429a      	cmp	r2, r3
 801204e:	d207      	bcs.n	8012060 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8012050:	68fb      	ldr	r3, [r7, #12]
 8012052:	689a      	ldr	r2, [r3, #8]
 8012054:	68fb      	ldr	r3, [r7, #12]
 8012056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012058:	425b      	negs	r3, r3
 801205a:	441a      	add	r2, r3
 801205c:	68fb      	ldr	r3, [r7, #12]
 801205e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	2b02      	cmp	r3, #2
 8012064:	d105      	bne.n	8012072 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012066:	693b      	ldr	r3, [r7, #16]
 8012068:	2b00      	cmp	r3, #0
 801206a:	d002      	beq.n	8012072 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801206c:	693b      	ldr	r3, [r7, #16]
 801206e:	3b01      	subs	r3, #1
 8012070:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012072:	693b      	ldr	r3, [r7, #16]
 8012074:	1c5a      	adds	r2, r3, #1
 8012076:	68fb      	ldr	r3, [r7, #12]
 8012078:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801207a:	697b      	ldr	r3, [r7, #20]
}
 801207c:	4618      	mov	r0, r3
 801207e:	3718      	adds	r7, #24
 8012080:	46bd      	mov	sp, r7
 8012082:	bd80      	pop	{r7, pc}

08012084 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8012084:	b580      	push	{r7, lr}
 8012086:	b082      	sub	sp, #8
 8012088:	af00      	add	r7, sp, #0
 801208a:	6078      	str	r0, [r7, #4]
 801208c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012092:	2b00      	cmp	r3, #0
 8012094:	d018      	beq.n	80120c8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	68da      	ldr	r2, [r3, #12]
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801209e:	441a      	add	r2, r3
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	68da      	ldr	r2, [r3, #12]
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	689b      	ldr	r3, [r3, #8]
 80120ac:	429a      	cmp	r2, r3
 80120ae:	d303      	bcc.n	80120b8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	681a      	ldr	r2, [r3, #0]
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	68d9      	ldr	r1, [r3, #12]
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80120c0:	461a      	mov	r2, r3
 80120c2:	6838      	ldr	r0, [r7, #0]
 80120c4:	f002 f874 	bl	80141b0 <memcpy>
	}
}
 80120c8:	bf00      	nop
 80120ca:	3708      	adds	r7, #8
 80120cc:	46bd      	mov	sp, r7
 80120ce:	bd80      	pop	{r7, pc}

080120d0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80120d0:	b580      	push	{r7, lr}
 80120d2:	b084      	sub	sp, #16
 80120d4:	af00      	add	r7, sp, #0
 80120d6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80120d8:	f001 fd24 	bl	8013b24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80120e2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80120e4:	e011      	b.n	801210a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	d012      	beq.n	8012114 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	3324      	adds	r3, #36	; 0x24
 80120f2:	4618      	mov	r0, r3
 80120f4:	f000 fd66 	bl	8012bc4 <xTaskRemoveFromEventList>
 80120f8:	4603      	mov	r3, r0
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	d001      	beq.n	8012102 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80120fe:	f000 fe9f 	bl	8012e40 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8012102:	7bfb      	ldrb	r3, [r7, #15]
 8012104:	3b01      	subs	r3, #1
 8012106:	b2db      	uxtb	r3, r3
 8012108:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801210a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801210e:	2b00      	cmp	r3, #0
 8012110:	dce9      	bgt.n	80120e6 <prvUnlockQueue+0x16>
 8012112:	e000      	b.n	8012116 <prvUnlockQueue+0x46>
					break;
 8012114:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	22ff      	movs	r2, #255	; 0xff
 801211a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801211e:	f001 fd31 	bl	8013b84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8012122:	f001 fcff 	bl	8013b24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801212c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801212e:	e011      	b.n	8012154 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	691b      	ldr	r3, [r3, #16]
 8012134:	2b00      	cmp	r3, #0
 8012136:	d012      	beq.n	801215e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	3310      	adds	r3, #16
 801213c:	4618      	mov	r0, r3
 801213e:	f000 fd41 	bl	8012bc4 <xTaskRemoveFromEventList>
 8012142:	4603      	mov	r3, r0
 8012144:	2b00      	cmp	r3, #0
 8012146:	d001      	beq.n	801214c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8012148:	f000 fe7a 	bl	8012e40 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801214c:	7bbb      	ldrb	r3, [r7, #14]
 801214e:	3b01      	subs	r3, #1
 8012150:	b2db      	uxtb	r3, r3
 8012152:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012154:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012158:	2b00      	cmp	r3, #0
 801215a:	dce9      	bgt.n	8012130 <prvUnlockQueue+0x60>
 801215c:	e000      	b.n	8012160 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801215e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	22ff      	movs	r2, #255	; 0xff
 8012164:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8012168:	f001 fd0c 	bl	8013b84 <vPortExitCritical>
}
 801216c:	bf00      	nop
 801216e:	3710      	adds	r7, #16
 8012170:	46bd      	mov	sp, r7
 8012172:	bd80      	pop	{r7, pc}

08012174 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8012174:	b580      	push	{r7, lr}
 8012176:	b084      	sub	sp, #16
 8012178:	af00      	add	r7, sp, #0
 801217a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801217c:	f001 fcd2 	bl	8013b24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012184:	2b00      	cmp	r3, #0
 8012186:	d102      	bne.n	801218e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8012188:	2301      	movs	r3, #1
 801218a:	60fb      	str	r3, [r7, #12]
 801218c:	e001      	b.n	8012192 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801218e:	2300      	movs	r3, #0
 8012190:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012192:	f001 fcf7 	bl	8013b84 <vPortExitCritical>

	return xReturn;
 8012196:	68fb      	ldr	r3, [r7, #12]
}
 8012198:	4618      	mov	r0, r3
 801219a:	3710      	adds	r7, #16
 801219c:	46bd      	mov	sp, r7
 801219e:	bd80      	pop	{r7, pc}

080121a0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80121a0:	b580      	push	{r7, lr}
 80121a2:	b084      	sub	sp, #16
 80121a4:	af00      	add	r7, sp, #0
 80121a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80121a8:	f001 fcbc 	bl	8013b24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80121b4:	429a      	cmp	r2, r3
 80121b6:	d102      	bne.n	80121be <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80121b8:	2301      	movs	r3, #1
 80121ba:	60fb      	str	r3, [r7, #12]
 80121bc:	e001      	b.n	80121c2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80121be:	2300      	movs	r3, #0
 80121c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80121c2:	f001 fcdf 	bl	8013b84 <vPortExitCritical>

	return xReturn;
 80121c6:	68fb      	ldr	r3, [r7, #12]
}
 80121c8:	4618      	mov	r0, r3
 80121ca:	3710      	adds	r7, #16
 80121cc:	46bd      	mov	sp, r7
 80121ce:	bd80      	pop	{r7, pc}

080121d0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80121d0:	b480      	push	{r7}
 80121d2:	b085      	sub	sp, #20
 80121d4:	af00      	add	r7, sp, #0
 80121d6:	6078      	str	r0, [r7, #4]
 80121d8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80121da:	2300      	movs	r3, #0
 80121dc:	60fb      	str	r3, [r7, #12]
 80121de:	e014      	b.n	801220a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80121e0:	4a0f      	ldr	r2, [pc, #60]	; (8012220 <vQueueAddToRegistry+0x50>)
 80121e2:	68fb      	ldr	r3, [r7, #12]
 80121e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	d10b      	bne.n	8012204 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80121ec:	490c      	ldr	r1, [pc, #48]	; (8012220 <vQueueAddToRegistry+0x50>)
 80121ee:	68fb      	ldr	r3, [r7, #12]
 80121f0:	683a      	ldr	r2, [r7, #0]
 80121f2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80121f6:	4a0a      	ldr	r2, [pc, #40]	; (8012220 <vQueueAddToRegistry+0x50>)
 80121f8:	68fb      	ldr	r3, [r7, #12]
 80121fa:	00db      	lsls	r3, r3, #3
 80121fc:	4413      	add	r3, r2
 80121fe:	687a      	ldr	r2, [r7, #4]
 8012200:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8012202:	e006      	b.n	8012212 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012204:	68fb      	ldr	r3, [r7, #12]
 8012206:	3301      	adds	r3, #1
 8012208:	60fb      	str	r3, [r7, #12]
 801220a:	68fb      	ldr	r3, [r7, #12]
 801220c:	2b07      	cmp	r3, #7
 801220e:	d9e7      	bls.n	80121e0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8012210:	bf00      	nop
 8012212:	bf00      	nop
 8012214:	3714      	adds	r7, #20
 8012216:	46bd      	mov	sp, r7
 8012218:	f85d 7b04 	ldr.w	r7, [sp], #4
 801221c:	4770      	bx	lr
 801221e:	bf00      	nop
 8012220:	24000e38 	.word	0x24000e38

08012224 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8012224:	b580      	push	{r7, lr}
 8012226:	b086      	sub	sp, #24
 8012228:	af00      	add	r7, sp, #0
 801222a:	60f8      	str	r0, [r7, #12]
 801222c:	60b9      	str	r1, [r7, #8]
 801222e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8012230:	68fb      	ldr	r3, [r7, #12]
 8012232:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8012234:	f001 fc76 	bl	8013b24 <vPortEnterCritical>
 8012238:	697b      	ldr	r3, [r7, #20]
 801223a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801223e:	b25b      	sxtb	r3, r3
 8012240:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012244:	d103      	bne.n	801224e <vQueueWaitForMessageRestricted+0x2a>
 8012246:	697b      	ldr	r3, [r7, #20]
 8012248:	2200      	movs	r2, #0
 801224a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801224e:	697b      	ldr	r3, [r7, #20]
 8012250:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012254:	b25b      	sxtb	r3, r3
 8012256:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801225a:	d103      	bne.n	8012264 <vQueueWaitForMessageRestricted+0x40>
 801225c:	697b      	ldr	r3, [r7, #20]
 801225e:	2200      	movs	r2, #0
 8012260:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012264:	f001 fc8e 	bl	8013b84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8012268:	697b      	ldr	r3, [r7, #20]
 801226a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801226c:	2b00      	cmp	r3, #0
 801226e:	d106      	bne.n	801227e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8012270:	697b      	ldr	r3, [r7, #20]
 8012272:	3324      	adds	r3, #36	; 0x24
 8012274:	687a      	ldr	r2, [r7, #4]
 8012276:	68b9      	ldr	r1, [r7, #8]
 8012278:	4618      	mov	r0, r3
 801227a:	f000 fc77 	bl	8012b6c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801227e:	6978      	ldr	r0, [r7, #20]
 8012280:	f7ff ff26 	bl	80120d0 <prvUnlockQueue>
	}
 8012284:	bf00      	nop
 8012286:	3718      	adds	r7, #24
 8012288:	46bd      	mov	sp, r7
 801228a:	bd80      	pop	{r7, pc}

0801228c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801228c:	b580      	push	{r7, lr}
 801228e:	b08e      	sub	sp, #56	; 0x38
 8012290:	af04      	add	r7, sp, #16
 8012292:	60f8      	str	r0, [r7, #12]
 8012294:	60b9      	str	r1, [r7, #8]
 8012296:	607a      	str	r2, [r7, #4]
 8012298:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801229a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801229c:	2b00      	cmp	r3, #0
 801229e:	d10a      	bne.n	80122b6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80122a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122a4:	f383 8811 	msr	BASEPRI, r3
 80122a8:	f3bf 8f6f 	isb	sy
 80122ac:	f3bf 8f4f 	dsb	sy
 80122b0:	623b      	str	r3, [r7, #32]
}
 80122b2:	bf00      	nop
 80122b4:	e7fe      	b.n	80122b4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80122b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	d10a      	bne.n	80122d2 <xTaskCreateStatic+0x46>
	__asm volatile
 80122bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122c0:	f383 8811 	msr	BASEPRI, r3
 80122c4:	f3bf 8f6f 	isb	sy
 80122c8:	f3bf 8f4f 	dsb	sy
 80122cc:	61fb      	str	r3, [r7, #28]
}
 80122ce:	bf00      	nop
 80122d0:	e7fe      	b.n	80122d0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80122d2:	235c      	movs	r3, #92	; 0x5c
 80122d4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80122d6:	693b      	ldr	r3, [r7, #16]
 80122d8:	2b5c      	cmp	r3, #92	; 0x5c
 80122da:	d00a      	beq.n	80122f2 <xTaskCreateStatic+0x66>
	__asm volatile
 80122dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122e0:	f383 8811 	msr	BASEPRI, r3
 80122e4:	f3bf 8f6f 	isb	sy
 80122e8:	f3bf 8f4f 	dsb	sy
 80122ec:	61bb      	str	r3, [r7, #24]
}
 80122ee:	bf00      	nop
 80122f0:	e7fe      	b.n	80122f0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80122f2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80122f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	d01e      	beq.n	8012338 <xTaskCreateStatic+0xac>
 80122fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	d01b      	beq.n	8012338 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012302:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8012304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012306:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012308:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801230a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801230c:	2202      	movs	r2, #2
 801230e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8012312:	2300      	movs	r3, #0
 8012314:	9303      	str	r3, [sp, #12]
 8012316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012318:	9302      	str	r3, [sp, #8]
 801231a:	f107 0314 	add.w	r3, r7, #20
 801231e:	9301      	str	r3, [sp, #4]
 8012320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012322:	9300      	str	r3, [sp, #0]
 8012324:	683b      	ldr	r3, [r7, #0]
 8012326:	687a      	ldr	r2, [r7, #4]
 8012328:	68b9      	ldr	r1, [r7, #8]
 801232a:	68f8      	ldr	r0, [r7, #12]
 801232c:	f000 f850 	bl	80123d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012330:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012332:	f000 f8dd 	bl	80124f0 <prvAddNewTaskToReadyList>
 8012336:	e001      	b.n	801233c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8012338:	2300      	movs	r3, #0
 801233a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801233c:	697b      	ldr	r3, [r7, #20]
	}
 801233e:	4618      	mov	r0, r3
 8012340:	3728      	adds	r7, #40	; 0x28
 8012342:	46bd      	mov	sp, r7
 8012344:	bd80      	pop	{r7, pc}

08012346 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8012346:	b580      	push	{r7, lr}
 8012348:	b08c      	sub	sp, #48	; 0x30
 801234a:	af04      	add	r7, sp, #16
 801234c:	60f8      	str	r0, [r7, #12]
 801234e:	60b9      	str	r1, [r7, #8]
 8012350:	603b      	str	r3, [r7, #0]
 8012352:	4613      	mov	r3, r2
 8012354:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8012356:	88fb      	ldrh	r3, [r7, #6]
 8012358:	009b      	lsls	r3, r3, #2
 801235a:	4618      	mov	r0, r3
 801235c:	f001 fd04 	bl	8013d68 <pvPortMalloc>
 8012360:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8012362:	697b      	ldr	r3, [r7, #20]
 8012364:	2b00      	cmp	r3, #0
 8012366:	d00e      	beq.n	8012386 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8012368:	205c      	movs	r0, #92	; 0x5c
 801236a:	f001 fcfd 	bl	8013d68 <pvPortMalloc>
 801236e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8012370:	69fb      	ldr	r3, [r7, #28]
 8012372:	2b00      	cmp	r3, #0
 8012374:	d003      	beq.n	801237e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8012376:	69fb      	ldr	r3, [r7, #28]
 8012378:	697a      	ldr	r2, [r7, #20]
 801237a:	631a      	str	r2, [r3, #48]	; 0x30
 801237c:	e005      	b.n	801238a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801237e:	6978      	ldr	r0, [r7, #20]
 8012380:	f001 fdbe 	bl	8013f00 <vPortFree>
 8012384:	e001      	b.n	801238a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8012386:	2300      	movs	r3, #0
 8012388:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801238a:	69fb      	ldr	r3, [r7, #28]
 801238c:	2b00      	cmp	r3, #0
 801238e:	d017      	beq.n	80123c0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8012390:	69fb      	ldr	r3, [r7, #28]
 8012392:	2200      	movs	r2, #0
 8012394:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8012398:	88fa      	ldrh	r2, [r7, #6]
 801239a:	2300      	movs	r3, #0
 801239c:	9303      	str	r3, [sp, #12]
 801239e:	69fb      	ldr	r3, [r7, #28]
 80123a0:	9302      	str	r3, [sp, #8]
 80123a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123a4:	9301      	str	r3, [sp, #4]
 80123a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123a8:	9300      	str	r3, [sp, #0]
 80123aa:	683b      	ldr	r3, [r7, #0]
 80123ac:	68b9      	ldr	r1, [r7, #8]
 80123ae:	68f8      	ldr	r0, [r7, #12]
 80123b0:	f000 f80e 	bl	80123d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80123b4:	69f8      	ldr	r0, [r7, #28]
 80123b6:	f000 f89b 	bl	80124f0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80123ba:	2301      	movs	r3, #1
 80123bc:	61bb      	str	r3, [r7, #24]
 80123be:	e002      	b.n	80123c6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80123c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80123c4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80123c6:	69bb      	ldr	r3, [r7, #24]
	}
 80123c8:	4618      	mov	r0, r3
 80123ca:	3720      	adds	r7, #32
 80123cc:	46bd      	mov	sp, r7
 80123ce:	bd80      	pop	{r7, pc}

080123d0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80123d0:	b580      	push	{r7, lr}
 80123d2:	b088      	sub	sp, #32
 80123d4:	af00      	add	r7, sp, #0
 80123d6:	60f8      	str	r0, [r7, #12]
 80123d8:	60b9      	str	r1, [r7, #8]
 80123da:	607a      	str	r2, [r7, #4]
 80123dc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80123de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123e0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	009b      	lsls	r3, r3, #2
 80123e6:	461a      	mov	r2, r3
 80123e8:	21a5      	movs	r1, #165	; 0xa5
 80123ea:	f001 feef 	bl	80141cc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80123ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80123f2:	6879      	ldr	r1, [r7, #4]
 80123f4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80123f8:	440b      	add	r3, r1
 80123fa:	009b      	lsls	r3, r3, #2
 80123fc:	4413      	add	r3, r2
 80123fe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8012400:	69bb      	ldr	r3, [r7, #24]
 8012402:	f023 0307 	bic.w	r3, r3, #7
 8012406:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8012408:	69bb      	ldr	r3, [r7, #24]
 801240a:	f003 0307 	and.w	r3, r3, #7
 801240e:	2b00      	cmp	r3, #0
 8012410:	d00a      	beq.n	8012428 <prvInitialiseNewTask+0x58>
	__asm volatile
 8012412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012416:	f383 8811 	msr	BASEPRI, r3
 801241a:	f3bf 8f6f 	isb	sy
 801241e:	f3bf 8f4f 	dsb	sy
 8012422:	617b      	str	r3, [r7, #20]
}
 8012424:	bf00      	nop
 8012426:	e7fe      	b.n	8012426 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8012428:	68bb      	ldr	r3, [r7, #8]
 801242a:	2b00      	cmp	r3, #0
 801242c:	d01f      	beq.n	801246e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801242e:	2300      	movs	r3, #0
 8012430:	61fb      	str	r3, [r7, #28]
 8012432:	e012      	b.n	801245a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8012434:	68ba      	ldr	r2, [r7, #8]
 8012436:	69fb      	ldr	r3, [r7, #28]
 8012438:	4413      	add	r3, r2
 801243a:	7819      	ldrb	r1, [r3, #0]
 801243c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801243e:	69fb      	ldr	r3, [r7, #28]
 8012440:	4413      	add	r3, r2
 8012442:	3334      	adds	r3, #52	; 0x34
 8012444:	460a      	mov	r2, r1
 8012446:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8012448:	68ba      	ldr	r2, [r7, #8]
 801244a:	69fb      	ldr	r3, [r7, #28]
 801244c:	4413      	add	r3, r2
 801244e:	781b      	ldrb	r3, [r3, #0]
 8012450:	2b00      	cmp	r3, #0
 8012452:	d006      	beq.n	8012462 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012454:	69fb      	ldr	r3, [r7, #28]
 8012456:	3301      	adds	r3, #1
 8012458:	61fb      	str	r3, [r7, #28]
 801245a:	69fb      	ldr	r3, [r7, #28]
 801245c:	2b0f      	cmp	r3, #15
 801245e:	d9e9      	bls.n	8012434 <prvInitialiseNewTask+0x64>
 8012460:	e000      	b.n	8012464 <prvInitialiseNewTask+0x94>
			{
				break;
 8012462:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8012464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012466:	2200      	movs	r2, #0
 8012468:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801246c:	e003      	b.n	8012476 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801246e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012470:	2200      	movs	r2, #0
 8012472:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8012476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012478:	2b37      	cmp	r3, #55	; 0x37
 801247a:	d901      	bls.n	8012480 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801247c:	2337      	movs	r3, #55	; 0x37
 801247e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8012480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012482:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012484:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8012486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012488:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801248a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801248c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801248e:	2200      	movs	r2, #0
 8012490:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8012492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012494:	3304      	adds	r3, #4
 8012496:	4618      	mov	r0, r3
 8012498:	f7ff f882 	bl	80115a0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801249c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801249e:	3318      	adds	r3, #24
 80124a0:	4618      	mov	r0, r3
 80124a2:	f7ff f87d 	bl	80115a0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80124a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80124aa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80124ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124ae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80124b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124b4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80124b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80124ba:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80124bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124be:	2200      	movs	r2, #0
 80124c0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80124c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124c4:	2200      	movs	r2, #0
 80124c6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80124ca:	683a      	ldr	r2, [r7, #0]
 80124cc:	68f9      	ldr	r1, [r7, #12]
 80124ce:	69b8      	ldr	r0, [r7, #24]
 80124d0:	f001 f9fe 	bl	80138d0 <pxPortInitialiseStack>
 80124d4:	4602      	mov	r2, r0
 80124d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124d8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80124da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d002      	beq.n	80124e6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80124e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80124e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80124e6:	bf00      	nop
 80124e8:	3720      	adds	r7, #32
 80124ea:	46bd      	mov	sp, r7
 80124ec:	bd80      	pop	{r7, pc}
	...

080124f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80124f0:	b580      	push	{r7, lr}
 80124f2:	b082      	sub	sp, #8
 80124f4:	af00      	add	r7, sp, #0
 80124f6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80124f8:	f001 fb14 	bl	8013b24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80124fc:	4b2d      	ldr	r3, [pc, #180]	; (80125b4 <prvAddNewTaskToReadyList+0xc4>)
 80124fe:	681b      	ldr	r3, [r3, #0]
 8012500:	3301      	adds	r3, #1
 8012502:	4a2c      	ldr	r2, [pc, #176]	; (80125b4 <prvAddNewTaskToReadyList+0xc4>)
 8012504:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8012506:	4b2c      	ldr	r3, [pc, #176]	; (80125b8 <prvAddNewTaskToReadyList+0xc8>)
 8012508:	681b      	ldr	r3, [r3, #0]
 801250a:	2b00      	cmp	r3, #0
 801250c:	d109      	bne.n	8012522 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801250e:	4a2a      	ldr	r2, [pc, #168]	; (80125b8 <prvAddNewTaskToReadyList+0xc8>)
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8012514:	4b27      	ldr	r3, [pc, #156]	; (80125b4 <prvAddNewTaskToReadyList+0xc4>)
 8012516:	681b      	ldr	r3, [r3, #0]
 8012518:	2b01      	cmp	r3, #1
 801251a:	d110      	bne.n	801253e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801251c:	f000 fcb4 	bl	8012e88 <prvInitialiseTaskLists>
 8012520:	e00d      	b.n	801253e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8012522:	4b26      	ldr	r3, [pc, #152]	; (80125bc <prvAddNewTaskToReadyList+0xcc>)
 8012524:	681b      	ldr	r3, [r3, #0]
 8012526:	2b00      	cmp	r3, #0
 8012528:	d109      	bne.n	801253e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801252a:	4b23      	ldr	r3, [pc, #140]	; (80125b8 <prvAddNewTaskToReadyList+0xc8>)
 801252c:	681b      	ldr	r3, [r3, #0]
 801252e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012534:	429a      	cmp	r2, r3
 8012536:	d802      	bhi.n	801253e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8012538:	4a1f      	ldr	r2, [pc, #124]	; (80125b8 <prvAddNewTaskToReadyList+0xc8>)
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801253e:	4b20      	ldr	r3, [pc, #128]	; (80125c0 <prvAddNewTaskToReadyList+0xd0>)
 8012540:	681b      	ldr	r3, [r3, #0]
 8012542:	3301      	adds	r3, #1
 8012544:	4a1e      	ldr	r2, [pc, #120]	; (80125c0 <prvAddNewTaskToReadyList+0xd0>)
 8012546:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8012548:	4b1d      	ldr	r3, [pc, #116]	; (80125c0 <prvAddNewTaskToReadyList+0xd0>)
 801254a:	681a      	ldr	r2, [r3, #0]
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012554:	4b1b      	ldr	r3, [pc, #108]	; (80125c4 <prvAddNewTaskToReadyList+0xd4>)
 8012556:	681b      	ldr	r3, [r3, #0]
 8012558:	429a      	cmp	r2, r3
 801255a:	d903      	bls.n	8012564 <prvAddNewTaskToReadyList+0x74>
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012560:	4a18      	ldr	r2, [pc, #96]	; (80125c4 <prvAddNewTaskToReadyList+0xd4>)
 8012562:	6013      	str	r3, [r2, #0]
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012568:	4613      	mov	r3, r2
 801256a:	009b      	lsls	r3, r3, #2
 801256c:	4413      	add	r3, r2
 801256e:	009b      	lsls	r3, r3, #2
 8012570:	4a15      	ldr	r2, [pc, #84]	; (80125c8 <prvAddNewTaskToReadyList+0xd8>)
 8012572:	441a      	add	r2, r3
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	3304      	adds	r3, #4
 8012578:	4619      	mov	r1, r3
 801257a:	4610      	mov	r0, r2
 801257c:	f7ff f81d 	bl	80115ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8012580:	f001 fb00 	bl	8013b84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8012584:	4b0d      	ldr	r3, [pc, #52]	; (80125bc <prvAddNewTaskToReadyList+0xcc>)
 8012586:	681b      	ldr	r3, [r3, #0]
 8012588:	2b00      	cmp	r3, #0
 801258a:	d00e      	beq.n	80125aa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801258c:	4b0a      	ldr	r3, [pc, #40]	; (80125b8 <prvAddNewTaskToReadyList+0xc8>)
 801258e:	681b      	ldr	r3, [r3, #0]
 8012590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012596:	429a      	cmp	r2, r3
 8012598:	d207      	bcs.n	80125aa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801259a:	4b0c      	ldr	r3, [pc, #48]	; (80125cc <prvAddNewTaskToReadyList+0xdc>)
 801259c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80125a0:	601a      	str	r2, [r3, #0]
 80125a2:	f3bf 8f4f 	dsb	sy
 80125a6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80125aa:	bf00      	nop
 80125ac:	3708      	adds	r7, #8
 80125ae:	46bd      	mov	sp, r7
 80125b0:	bd80      	pop	{r7, pc}
 80125b2:	bf00      	nop
 80125b4:	2400134c 	.word	0x2400134c
 80125b8:	24000e78 	.word	0x24000e78
 80125bc:	24001358 	.word	0x24001358
 80125c0:	24001368 	.word	0x24001368
 80125c4:	24001354 	.word	0x24001354
 80125c8:	24000e7c 	.word	0x24000e7c
 80125cc:	e000ed04 	.word	0xe000ed04

080125d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80125d0:	b580      	push	{r7, lr}
 80125d2:	b084      	sub	sp, #16
 80125d4:	af00      	add	r7, sp, #0
 80125d6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80125d8:	2300      	movs	r3, #0
 80125da:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	2b00      	cmp	r3, #0
 80125e0:	d017      	beq.n	8012612 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80125e2:	4b13      	ldr	r3, [pc, #76]	; (8012630 <vTaskDelay+0x60>)
 80125e4:	681b      	ldr	r3, [r3, #0]
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	d00a      	beq.n	8012600 <vTaskDelay+0x30>
	__asm volatile
 80125ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125ee:	f383 8811 	msr	BASEPRI, r3
 80125f2:	f3bf 8f6f 	isb	sy
 80125f6:	f3bf 8f4f 	dsb	sy
 80125fa:	60bb      	str	r3, [r7, #8]
}
 80125fc:	bf00      	nop
 80125fe:	e7fe      	b.n	80125fe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8012600:	f000 f880 	bl	8012704 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8012604:	2100      	movs	r1, #0
 8012606:	6878      	ldr	r0, [r7, #4]
 8012608:	f000 fda0 	bl	801314c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801260c:	f000 f888 	bl	8012720 <xTaskResumeAll>
 8012610:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8012612:	68fb      	ldr	r3, [r7, #12]
 8012614:	2b00      	cmp	r3, #0
 8012616:	d107      	bne.n	8012628 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8012618:	4b06      	ldr	r3, [pc, #24]	; (8012634 <vTaskDelay+0x64>)
 801261a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801261e:	601a      	str	r2, [r3, #0]
 8012620:	f3bf 8f4f 	dsb	sy
 8012624:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012628:	bf00      	nop
 801262a:	3710      	adds	r7, #16
 801262c:	46bd      	mov	sp, r7
 801262e:	bd80      	pop	{r7, pc}
 8012630:	24001374 	.word	0x24001374
 8012634:	e000ed04 	.word	0xe000ed04

08012638 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8012638:	b580      	push	{r7, lr}
 801263a:	b08a      	sub	sp, #40	; 0x28
 801263c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801263e:	2300      	movs	r3, #0
 8012640:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8012642:	2300      	movs	r3, #0
 8012644:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8012646:	463a      	mov	r2, r7
 8012648:	1d39      	adds	r1, r7, #4
 801264a:	f107 0308 	add.w	r3, r7, #8
 801264e:	4618      	mov	r0, r3
 8012650:	f7fe fd64 	bl	801111c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8012654:	6839      	ldr	r1, [r7, #0]
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	68ba      	ldr	r2, [r7, #8]
 801265a:	9202      	str	r2, [sp, #8]
 801265c:	9301      	str	r3, [sp, #4]
 801265e:	2300      	movs	r3, #0
 8012660:	9300      	str	r3, [sp, #0]
 8012662:	2300      	movs	r3, #0
 8012664:	460a      	mov	r2, r1
 8012666:	4921      	ldr	r1, [pc, #132]	; (80126ec <vTaskStartScheduler+0xb4>)
 8012668:	4821      	ldr	r0, [pc, #132]	; (80126f0 <vTaskStartScheduler+0xb8>)
 801266a:	f7ff fe0f 	bl	801228c <xTaskCreateStatic>
 801266e:	4603      	mov	r3, r0
 8012670:	4a20      	ldr	r2, [pc, #128]	; (80126f4 <vTaskStartScheduler+0xbc>)
 8012672:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8012674:	4b1f      	ldr	r3, [pc, #124]	; (80126f4 <vTaskStartScheduler+0xbc>)
 8012676:	681b      	ldr	r3, [r3, #0]
 8012678:	2b00      	cmp	r3, #0
 801267a:	d002      	beq.n	8012682 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801267c:	2301      	movs	r3, #1
 801267e:	617b      	str	r3, [r7, #20]
 8012680:	e001      	b.n	8012686 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8012682:	2300      	movs	r3, #0
 8012684:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8012686:	697b      	ldr	r3, [r7, #20]
 8012688:	2b01      	cmp	r3, #1
 801268a:	d102      	bne.n	8012692 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801268c:	f000 fdb2 	bl	80131f4 <xTimerCreateTimerTask>
 8012690:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8012692:	697b      	ldr	r3, [r7, #20]
 8012694:	2b01      	cmp	r3, #1
 8012696:	d116      	bne.n	80126c6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8012698:	f04f 0350 	mov.w	r3, #80	; 0x50
 801269c:	f383 8811 	msr	BASEPRI, r3
 80126a0:	f3bf 8f6f 	isb	sy
 80126a4:	f3bf 8f4f 	dsb	sy
 80126a8:	613b      	str	r3, [r7, #16]
}
 80126aa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80126ac:	4b12      	ldr	r3, [pc, #72]	; (80126f8 <vTaskStartScheduler+0xc0>)
 80126ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80126b2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80126b4:	4b11      	ldr	r3, [pc, #68]	; (80126fc <vTaskStartScheduler+0xc4>)
 80126b6:	2201      	movs	r2, #1
 80126b8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80126ba:	4b11      	ldr	r3, [pc, #68]	; (8012700 <vTaskStartScheduler+0xc8>)
 80126bc:	2200      	movs	r2, #0
 80126be:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80126c0:	f001 f98e 	bl	80139e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80126c4:	e00e      	b.n	80126e4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80126c6:	697b      	ldr	r3, [r7, #20]
 80126c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80126cc:	d10a      	bne.n	80126e4 <vTaskStartScheduler+0xac>
	__asm volatile
 80126ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126d2:	f383 8811 	msr	BASEPRI, r3
 80126d6:	f3bf 8f6f 	isb	sy
 80126da:	f3bf 8f4f 	dsb	sy
 80126de:	60fb      	str	r3, [r7, #12]
}
 80126e0:	bf00      	nop
 80126e2:	e7fe      	b.n	80126e2 <vTaskStartScheduler+0xaa>
}
 80126e4:	bf00      	nop
 80126e6:	3718      	adds	r7, #24
 80126e8:	46bd      	mov	sp, r7
 80126ea:	bd80      	pop	{r7, pc}
 80126ec:	08015408 	.word	0x08015408
 80126f0:	08012e59 	.word	0x08012e59
 80126f4:	24001370 	.word	0x24001370
 80126f8:	2400136c 	.word	0x2400136c
 80126fc:	24001358 	.word	0x24001358
 8012700:	24001350 	.word	0x24001350

08012704 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8012704:	b480      	push	{r7}
 8012706:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8012708:	4b04      	ldr	r3, [pc, #16]	; (801271c <vTaskSuspendAll+0x18>)
 801270a:	681b      	ldr	r3, [r3, #0]
 801270c:	3301      	adds	r3, #1
 801270e:	4a03      	ldr	r2, [pc, #12]	; (801271c <vTaskSuspendAll+0x18>)
 8012710:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8012712:	bf00      	nop
 8012714:	46bd      	mov	sp, r7
 8012716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801271a:	4770      	bx	lr
 801271c:	24001374 	.word	0x24001374

08012720 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8012720:	b580      	push	{r7, lr}
 8012722:	b084      	sub	sp, #16
 8012724:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8012726:	2300      	movs	r3, #0
 8012728:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801272a:	2300      	movs	r3, #0
 801272c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801272e:	4b42      	ldr	r3, [pc, #264]	; (8012838 <xTaskResumeAll+0x118>)
 8012730:	681b      	ldr	r3, [r3, #0]
 8012732:	2b00      	cmp	r3, #0
 8012734:	d10a      	bne.n	801274c <xTaskResumeAll+0x2c>
	__asm volatile
 8012736:	f04f 0350 	mov.w	r3, #80	; 0x50
 801273a:	f383 8811 	msr	BASEPRI, r3
 801273e:	f3bf 8f6f 	isb	sy
 8012742:	f3bf 8f4f 	dsb	sy
 8012746:	603b      	str	r3, [r7, #0]
}
 8012748:	bf00      	nop
 801274a:	e7fe      	b.n	801274a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801274c:	f001 f9ea 	bl	8013b24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8012750:	4b39      	ldr	r3, [pc, #228]	; (8012838 <xTaskResumeAll+0x118>)
 8012752:	681b      	ldr	r3, [r3, #0]
 8012754:	3b01      	subs	r3, #1
 8012756:	4a38      	ldr	r2, [pc, #224]	; (8012838 <xTaskResumeAll+0x118>)
 8012758:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801275a:	4b37      	ldr	r3, [pc, #220]	; (8012838 <xTaskResumeAll+0x118>)
 801275c:	681b      	ldr	r3, [r3, #0]
 801275e:	2b00      	cmp	r3, #0
 8012760:	d162      	bne.n	8012828 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8012762:	4b36      	ldr	r3, [pc, #216]	; (801283c <xTaskResumeAll+0x11c>)
 8012764:	681b      	ldr	r3, [r3, #0]
 8012766:	2b00      	cmp	r3, #0
 8012768:	d05e      	beq.n	8012828 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801276a:	e02f      	b.n	80127cc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801276c:	4b34      	ldr	r3, [pc, #208]	; (8012840 <xTaskResumeAll+0x120>)
 801276e:	68db      	ldr	r3, [r3, #12]
 8012770:	68db      	ldr	r3, [r3, #12]
 8012772:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012774:	68fb      	ldr	r3, [r7, #12]
 8012776:	3318      	adds	r3, #24
 8012778:	4618      	mov	r0, r3
 801277a:	f7fe ff7b 	bl	8011674 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801277e:	68fb      	ldr	r3, [r7, #12]
 8012780:	3304      	adds	r3, #4
 8012782:	4618      	mov	r0, r3
 8012784:	f7fe ff76 	bl	8011674 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012788:	68fb      	ldr	r3, [r7, #12]
 801278a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801278c:	4b2d      	ldr	r3, [pc, #180]	; (8012844 <xTaskResumeAll+0x124>)
 801278e:	681b      	ldr	r3, [r3, #0]
 8012790:	429a      	cmp	r2, r3
 8012792:	d903      	bls.n	801279c <xTaskResumeAll+0x7c>
 8012794:	68fb      	ldr	r3, [r7, #12]
 8012796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012798:	4a2a      	ldr	r2, [pc, #168]	; (8012844 <xTaskResumeAll+0x124>)
 801279a:	6013      	str	r3, [r2, #0]
 801279c:	68fb      	ldr	r3, [r7, #12]
 801279e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80127a0:	4613      	mov	r3, r2
 80127a2:	009b      	lsls	r3, r3, #2
 80127a4:	4413      	add	r3, r2
 80127a6:	009b      	lsls	r3, r3, #2
 80127a8:	4a27      	ldr	r2, [pc, #156]	; (8012848 <xTaskResumeAll+0x128>)
 80127aa:	441a      	add	r2, r3
 80127ac:	68fb      	ldr	r3, [r7, #12]
 80127ae:	3304      	adds	r3, #4
 80127b0:	4619      	mov	r1, r3
 80127b2:	4610      	mov	r0, r2
 80127b4:	f7fe ff01 	bl	80115ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80127b8:	68fb      	ldr	r3, [r7, #12]
 80127ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80127bc:	4b23      	ldr	r3, [pc, #140]	; (801284c <xTaskResumeAll+0x12c>)
 80127be:	681b      	ldr	r3, [r3, #0]
 80127c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80127c2:	429a      	cmp	r2, r3
 80127c4:	d302      	bcc.n	80127cc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80127c6:	4b22      	ldr	r3, [pc, #136]	; (8012850 <xTaskResumeAll+0x130>)
 80127c8:	2201      	movs	r2, #1
 80127ca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80127cc:	4b1c      	ldr	r3, [pc, #112]	; (8012840 <xTaskResumeAll+0x120>)
 80127ce:	681b      	ldr	r3, [r3, #0]
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	d1cb      	bne.n	801276c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80127d4:	68fb      	ldr	r3, [r7, #12]
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d001      	beq.n	80127de <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80127da:	f000 fbf3 	bl	8012fc4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80127de:	4b1d      	ldr	r3, [pc, #116]	; (8012854 <xTaskResumeAll+0x134>)
 80127e0:	681b      	ldr	r3, [r3, #0]
 80127e2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d010      	beq.n	801280c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80127ea:	f000 f847 	bl	801287c <xTaskIncrementTick>
 80127ee:	4603      	mov	r3, r0
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d002      	beq.n	80127fa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80127f4:	4b16      	ldr	r3, [pc, #88]	; (8012850 <xTaskResumeAll+0x130>)
 80127f6:	2201      	movs	r2, #1
 80127f8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	3b01      	subs	r3, #1
 80127fe:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	2b00      	cmp	r3, #0
 8012804:	d1f1      	bne.n	80127ea <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8012806:	4b13      	ldr	r3, [pc, #76]	; (8012854 <xTaskResumeAll+0x134>)
 8012808:	2200      	movs	r2, #0
 801280a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801280c:	4b10      	ldr	r3, [pc, #64]	; (8012850 <xTaskResumeAll+0x130>)
 801280e:	681b      	ldr	r3, [r3, #0]
 8012810:	2b00      	cmp	r3, #0
 8012812:	d009      	beq.n	8012828 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8012814:	2301      	movs	r3, #1
 8012816:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8012818:	4b0f      	ldr	r3, [pc, #60]	; (8012858 <xTaskResumeAll+0x138>)
 801281a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801281e:	601a      	str	r2, [r3, #0]
 8012820:	f3bf 8f4f 	dsb	sy
 8012824:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012828:	f001 f9ac 	bl	8013b84 <vPortExitCritical>

	return xAlreadyYielded;
 801282c:	68bb      	ldr	r3, [r7, #8]
}
 801282e:	4618      	mov	r0, r3
 8012830:	3710      	adds	r7, #16
 8012832:	46bd      	mov	sp, r7
 8012834:	bd80      	pop	{r7, pc}
 8012836:	bf00      	nop
 8012838:	24001374 	.word	0x24001374
 801283c:	2400134c 	.word	0x2400134c
 8012840:	2400130c 	.word	0x2400130c
 8012844:	24001354 	.word	0x24001354
 8012848:	24000e7c 	.word	0x24000e7c
 801284c:	24000e78 	.word	0x24000e78
 8012850:	24001360 	.word	0x24001360
 8012854:	2400135c 	.word	0x2400135c
 8012858:	e000ed04 	.word	0xe000ed04

0801285c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801285c:	b480      	push	{r7}
 801285e:	b083      	sub	sp, #12
 8012860:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8012862:	4b05      	ldr	r3, [pc, #20]	; (8012878 <xTaskGetTickCount+0x1c>)
 8012864:	681b      	ldr	r3, [r3, #0]
 8012866:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8012868:	687b      	ldr	r3, [r7, #4]
}
 801286a:	4618      	mov	r0, r3
 801286c:	370c      	adds	r7, #12
 801286e:	46bd      	mov	sp, r7
 8012870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012874:	4770      	bx	lr
 8012876:	bf00      	nop
 8012878:	24001350 	.word	0x24001350

0801287c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801287c:	b580      	push	{r7, lr}
 801287e:	b086      	sub	sp, #24
 8012880:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8012882:	2300      	movs	r3, #0
 8012884:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012886:	4b4f      	ldr	r3, [pc, #316]	; (80129c4 <xTaskIncrementTick+0x148>)
 8012888:	681b      	ldr	r3, [r3, #0]
 801288a:	2b00      	cmp	r3, #0
 801288c:	f040 808f 	bne.w	80129ae <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8012890:	4b4d      	ldr	r3, [pc, #308]	; (80129c8 <xTaskIncrementTick+0x14c>)
 8012892:	681b      	ldr	r3, [r3, #0]
 8012894:	3301      	adds	r3, #1
 8012896:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8012898:	4a4b      	ldr	r2, [pc, #300]	; (80129c8 <xTaskIncrementTick+0x14c>)
 801289a:	693b      	ldr	r3, [r7, #16]
 801289c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801289e:	693b      	ldr	r3, [r7, #16]
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d120      	bne.n	80128e6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80128a4:	4b49      	ldr	r3, [pc, #292]	; (80129cc <xTaskIncrementTick+0x150>)
 80128a6:	681b      	ldr	r3, [r3, #0]
 80128a8:	681b      	ldr	r3, [r3, #0]
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	d00a      	beq.n	80128c4 <xTaskIncrementTick+0x48>
	__asm volatile
 80128ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128b2:	f383 8811 	msr	BASEPRI, r3
 80128b6:	f3bf 8f6f 	isb	sy
 80128ba:	f3bf 8f4f 	dsb	sy
 80128be:	603b      	str	r3, [r7, #0]
}
 80128c0:	bf00      	nop
 80128c2:	e7fe      	b.n	80128c2 <xTaskIncrementTick+0x46>
 80128c4:	4b41      	ldr	r3, [pc, #260]	; (80129cc <xTaskIncrementTick+0x150>)
 80128c6:	681b      	ldr	r3, [r3, #0]
 80128c8:	60fb      	str	r3, [r7, #12]
 80128ca:	4b41      	ldr	r3, [pc, #260]	; (80129d0 <xTaskIncrementTick+0x154>)
 80128cc:	681b      	ldr	r3, [r3, #0]
 80128ce:	4a3f      	ldr	r2, [pc, #252]	; (80129cc <xTaskIncrementTick+0x150>)
 80128d0:	6013      	str	r3, [r2, #0]
 80128d2:	4a3f      	ldr	r2, [pc, #252]	; (80129d0 <xTaskIncrementTick+0x154>)
 80128d4:	68fb      	ldr	r3, [r7, #12]
 80128d6:	6013      	str	r3, [r2, #0]
 80128d8:	4b3e      	ldr	r3, [pc, #248]	; (80129d4 <xTaskIncrementTick+0x158>)
 80128da:	681b      	ldr	r3, [r3, #0]
 80128dc:	3301      	adds	r3, #1
 80128de:	4a3d      	ldr	r2, [pc, #244]	; (80129d4 <xTaskIncrementTick+0x158>)
 80128e0:	6013      	str	r3, [r2, #0]
 80128e2:	f000 fb6f 	bl	8012fc4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80128e6:	4b3c      	ldr	r3, [pc, #240]	; (80129d8 <xTaskIncrementTick+0x15c>)
 80128e8:	681b      	ldr	r3, [r3, #0]
 80128ea:	693a      	ldr	r2, [r7, #16]
 80128ec:	429a      	cmp	r2, r3
 80128ee:	d349      	bcc.n	8012984 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80128f0:	4b36      	ldr	r3, [pc, #216]	; (80129cc <xTaskIncrementTick+0x150>)
 80128f2:	681b      	ldr	r3, [r3, #0]
 80128f4:	681b      	ldr	r3, [r3, #0]
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d104      	bne.n	8012904 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80128fa:	4b37      	ldr	r3, [pc, #220]	; (80129d8 <xTaskIncrementTick+0x15c>)
 80128fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012900:	601a      	str	r2, [r3, #0]
					break;
 8012902:	e03f      	b.n	8012984 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012904:	4b31      	ldr	r3, [pc, #196]	; (80129cc <xTaskIncrementTick+0x150>)
 8012906:	681b      	ldr	r3, [r3, #0]
 8012908:	68db      	ldr	r3, [r3, #12]
 801290a:	68db      	ldr	r3, [r3, #12]
 801290c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801290e:	68bb      	ldr	r3, [r7, #8]
 8012910:	685b      	ldr	r3, [r3, #4]
 8012912:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8012914:	693a      	ldr	r2, [r7, #16]
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	429a      	cmp	r2, r3
 801291a:	d203      	bcs.n	8012924 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801291c:	4a2e      	ldr	r2, [pc, #184]	; (80129d8 <xTaskIncrementTick+0x15c>)
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8012922:	e02f      	b.n	8012984 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012924:	68bb      	ldr	r3, [r7, #8]
 8012926:	3304      	adds	r3, #4
 8012928:	4618      	mov	r0, r3
 801292a:	f7fe fea3 	bl	8011674 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801292e:	68bb      	ldr	r3, [r7, #8]
 8012930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012932:	2b00      	cmp	r3, #0
 8012934:	d004      	beq.n	8012940 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012936:	68bb      	ldr	r3, [r7, #8]
 8012938:	3318      	adds	r3, #24
 801293a:	4618      	mov	r0, r3
 801293c:	f7fe fe9a 	bl	8011674 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8012940:	68bb      	ldr	r3, [r7, #8]
 8012942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012944:	4b25      	ldr	r3, [pc, #148]	; (80129dc <xTaskIncrementTick+0x160>)
 8012946:	681b      	ldr	r3, [r3, #0]
 8012948:	429a      	cmp	r2, r3
 801294a:	d903      	bls.n	8012954 <xTaskIncrementTick+0xd8>
 801294c:	68bb      	ldr	r3, [r7, #8]
 801294e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012950:	4a22      	ldr	r2, [pc, #136]	; (80129dc <xTaskIncrementTick+0x160>)
 8012952:	6013      	str	r3, [r2, #0]
 8012954:	68bb      	ldr	r3, [r7, #8]
 8012956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012958:	4613      	mov	r3, r2
 801295a:	009b      	lsls	r3, r3, #2
 801295c:	4413      	add	r3, r2
 801295e:	009b      	lsls	r3, r3, #2
 8012960:	4a1f      	ldr	r2, [pc, #124]	; (80129e0 <xTaskIncrementTick+0x164>)
 8012962:	441a      	add	r2, r3
 8012964:	68bb      	ldr	r3, [r7, #8]
 8012966:	3304      	adds	r3, #4
 8012968:	4619      	mov	r1, r3
 801296a:	4610      	mov	r0, r2
 801296c:	f7fe fe25 	bl	80115ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012970:	68bb      	ldr	r3, [r7, #8]
 8012972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012974:	4b1b      	ldr	r3, [pc, #108]	; (80129e4 <xTaskIncrementTick+0x168>)
 8012976:	681b      	ldr	r3, [r3, #0]
 8012978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801297a:	429a      	cmp	r2, r3
 801297c:	d3b8      	bcc.n	80128f0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 801297e:	2301      	movs	r3, #1
 8012980:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012982:	e7b5      	b.n	80128f0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8012984:	4b17      	ldr	r3, [pc, #92]	; (80129e4 <xTaskIncrementTick+0x168>)
 8012986:	681b      	ldr	r3, [r3, #0]
 8012988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801298a:	4915      	ldr	r1, [pc, #84]	; (80129e0 <xTaskIncrementTick+0x164>)
 801298c:	4613      	mov	r3, r2
 801298e:	009b      	lsls	r3, r3, #2
 8012990:	4413      	add	r3, r2
 8012992:	009b      	lsls	r3, r3, #2
 8012994:	440b      	add	r3, r1
 8012996:	681b      	ldr	r3, [r3, #0]
 8012998:	2b01      	cmp	r3, #1
 801299a:	d901      	bls.n	80129a0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 801299c:	2301      	movs	r3, #1
 801299e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80129a0:	4b11      	ldr	r3, [pc, #68]	; (80129e8 <xTaskIncrementTick+0x16c>)
 80129a2:	681b      	ldr	r3, [r3, #0]
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	d007      	beq.n	80129b8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80129a8:	2301      	movs	r3, #1
 80129aa:	617b      	str	r3, [r7, #20]
 80129ac:	e004      	b.n	80129b8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80129ae:	4b0f      	ldr	r3, [pc, #60]	; (80129ec <xTaskIncrementTick+0x170>)
 80129b0:	681b      	ldr	r3, [r3, #0]
 80129b2:	3301      	adds	r3, #1
 80129b4:	4a0d      	ldr	r2, [pc, #52]	; (80129ec <xTaskIncrementTick+0x170>)
 80129b6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80129b8:	697b      	ldr	r3, [r7, #20]
}
 80129ba:	4618      	mov	r0, r3
 80129bc:	3718      	adds	r7, #24
 80129be:	46bd      	mov	sp, r7
 80129c0:	bd80      	pop	{r7, pc}
 80129c2:	bf00      	nop
 80129c4:	24001374 	.word	0x24001374
 80129c8:	24001350 	.word	0x24001350
 80129cc:	24001304 	.word	0x24001304
 80129d0:	24001308 	.word	0x24001308
 80129d4:	24001364 	.word	0x24001364
 80129d8:	2400136c 	.word	0x2400136c
 80129dc:	24001354 	.word	0x24001354
 80129e0:	24000e7c 	.word	0x24000e7c
 80129e4:	24000e78 	.word	0x24000e78
 80129e8:	24001360 	.word	0x24001360
 80129ec:	2400135c 	.word	0x2400135c

080129f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80129f0:	b480      	push	{r7}
 80129f2:	b085      	sub	sp, #20
 80129f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80129f6:	4b28      	ldr	r3, [pc, #160]	; (8012a98 <vTaskSwitchContext+0xa8>)
 80129f8:	681b      	ldr	r3, [r3, #0]
 80129fa:	2b00      	cmp	r3, #0
 80129fc:	d003      	beq.n	8012a06 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80129fe:	4b27      	ldr	r3, [pc, #156]	; (8012a9c <vTaskSwitchContext+0xac>)
 8012a00:	2201      	movs	r2, #1
 8012a02:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8012a04:	e041      	b.n	8012a8a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8012a06:	4b25      	ldr	r3, [pc, #148]	; (8012a9c <vTaskSwitchContext+0xac>)
 8012a08:	2200      	movs	r2, #0
 8012a0a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012a0c:	4b24      	ldr	r3, [pc, #144]	; (8012aa0 <vTaskSwitchContext+0xb0>)
 8012a0e:	681b      	ldr	r3, [r3, #0]
 8012a10:	60fb      	str	r3, [r7, #12]
 8012a12:	e010      	b.n	8012a36 <vTaskSwitchContext+0x46>
 8012a14:	68fb      	ldr	r3, [r7, #12]
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d10a      	bne.n	8012a30 <vTaskSwitchContext+0x40>
	__asm volatile
 8012a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a1e:	f383 8811 	msr	BASEPRI, r3
 8012a22:	f3bf 8f6f 	isb	sy
 8012a26:	f3bf 8f4f 	dsb	sy
 8012a2a:	607b      	str	r3, [r7, #4]
}
 8012a2c:	bf00      	nop
 8012a2e:	e7fe      	b.n	8012a2e <vTaskSwitchContext+0x3e>
 8012a30:	68fb      	ldr	r3, [r7, #12]
 8012a32:	3b01      	subs	r3, #1
 8012a34:	60fb      	str	r3, [r7, #12]
 8012a36:	491b      	ldr	r1, [pc, #108]	; (8012aa4 <vTaskSwitchContext+0xb4>)
 8012a38:	68fa      	ldr	r2, [r7, #12]
 8012a3a:	4613      	mov	r3, r2
 8012a3c:	009b      	lsls	r3, r3, #2
 8012a3e:	4413      	add	r3, r2
 8012a40:	009b      	lsls	r3, r3, #2
 8012a42:	440b      	add	r3, r1
 8012a44:	681b      	ldr	r3, [r3, #0]
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	d0e4      	beq.n	8012a14 <vTaskSwitchContext+0x24>
 8012a4a:	68fa      	ldr	r2, [r7, #12]
 8012a4c:	4613      	mov	r3, r2
 8012a4e:	009b      	lsls	r3, r3, #2
 8012a50:	4413      	add	r3, r2
 8012a52:	009b      	lsls	r3, r3, #2
 8012a54:	4a13      	ldr	r2, [pc, #76]	; (8012aa4 <vTaskSwitchContext+0xb4>)
 8012a56:	4413      	add	r3, r2
 8012a58:	60bb      	str	r3, [r7, #8]
 8012a5a:	68bb      	ldr	r3, [r7, #8]
 8012a5c:	685b      	ldr	r3, [r3, #4]
 8012a5e:	685a      	ldr	r2, [r3, #4]
 8012a60:	68bb      	ldr	r3, [r7, #8]
 8012a62:	605a      	str	r2, [r3, #4]
 8012a64:	68bb      	ldr	r3, [r7, #8]
 8012a66:	685a      	ldr	r2, [r3, #4]
 8012a68:	68bb      	ldr	r3, [r7, #8]
 8012a6a:	3308      	adds	r3, #8
 8012a6c:	429a      	cmp	r2, r3
 8012a6e:	d104      	bne.n	8012a7a <vTaskSwitchContext+0x8a>
 8012a70:	68bb      	ldr	r3, [r7, #8]
 8012a72:	685b      	ldr	r3, [r3, #4]
 8012a74:	685a      	ldr	r2, [r3, #4]
 8012a76:	68bb      	ldr	r3, [r7, #8]
 8012a78:	605a      	str	r2, [r3, #4]
 8012a7a:	68bb      	ldr	r3, [r7, #8]
 8012a7c:	685b      	ldr	r3, [r3, #4]
 8012a7e:	68db      	ldr	r3, [r3, #12]
 8012a80:	4a09      	ldr	r2, [pc, #36]	; (8012aa8 <vTaskSwitchContext+0xb8>)
 8012a82:	6013      	str	r3, [r2, #0]
 8012a84:	4a06      	ldr	r2, [pc, #24]	; (8012aa0 <vTaskSwitchContext+0xb0>)
 8012a86:	68fb      	ldr	r3, [r7, #12]
 8012a88:	6013      	str	r3, [r2, #0]
}
 8012a8a:	bf00      	nop
 8012a8c:	3714      	adds	r7, #20
 8012a8e:	46bd      	mov	sp, r7
 8012a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a94:	4770      	bx	lr
 8012a96:	bf00      	nop
 8012a98:	24001374 	.word	0x24001374
 8012a9c:	24001360 	.word	0x24001360
 8012aa0:	24001354 	.word	0x24001354
 8012aa4:	24000e7c 	.word	0x24000e7c
 8012aa8:	24000e78 	.word	0x24000e78

08012aac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8012aac:	b580      	push	{r7, lr}
 8012aae:	b084      	sub	sp, #16
 8012ab0:	af00      	add	r7, sp, #0
 8012ab2:	6078      	str	r0, [r7, #4]
 8012ab4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	d10a      	bne.n	8012ad2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8012abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ac0:	f383 8811 	msr	BASEPRI, r3
 8012ac4:	f3bf 8f6f 	isb	sy
 8012ac8:	f3bf 8f4f 	dsb	sy
 8012acc:	60fb      	str	r3, [r7, #12]
}
 8012ace:	bf00      	nop
 8012ad0:	e7fe      	b.n	8012ad0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012ad2:	4b07      	ldr	r3, [pc, #28]	; (8012af0 <vTaskPlaceOnEventList+0x44>)
 8012ad4:	681b      	ldr	r3, [r3, #0]
 8012ad6:	3318      	adds	r3, #24
 8012ad8:	4619      	mov	r1, r3
 8012ada:	6878      	ldr	r0, [r7, #4]
 8012adc:	f7fe fd91 	bl	8011602 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012ae0:	2101      	movs	r1, #1
 8012ae2:	6838      	ldr	r0, [r7, #0]
 8012ae4:	f000 fb32 	bl	801314c <prvAddCurrentTaskToDelayedList>
}
 8012ae8:	bf00      	nop
 8012aea:	3710      	adds	r7, #16
 8012aec:	46bd      	mov	sp, r7
 8012aee:	bd80      	pop	{r7, pc}
 8012af0:	24000e78 	.word	0x24000e78

08012af4 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8012af4:	b580      	push	{r7, lr}
 8012af6:	b086      	sub	sp, #24
 8012af8:	af00      	add	r7, sp, #0
 8012afa:	60f8      	str	r0, [r7, #12]
 8012afc:	60b9      	str	r1, [r7, #8]
 8012afe:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8012b00:	68fb      	ldr	r3, [r7, #12]
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	d10a      	bne.n	8012b1c <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8012b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b0a:	f383 8811 	msr	BASEPRI, r3
 8012b0e:	f3bf 8f6f 	isb	sy
 8012b12:	f3bf 8f4f 	dsb	sy
 8012b16:	617b      	str	r3, [r7, #20]
}
 8012b18:	bf00      	nop
 8012b1a:	e7fe      	b.n	8012b1a <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8012b1c:	4b11      	ldr	r3, [pc, #68]	; (8012b64 <vTaskPlaceOnUnorderedEventList+0x70>)
 8012b1e:	681b      	ldr	r3, [r3, #0]
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d10a      	bne.n	8012b3a <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8012b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b28:	f383 8811 	msr	BASEPRI, r3
 8012b2c:	f3bf 8f6f 	isb	sy
 8012b30:	f3bf 8f4f 	dsb	sy
 8012b34:	613b      	str	r3, [r7, #16]
}
 8012b36:	bf00      	nop
 8012b38:	e7fe      	b.n	8012b38 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8012b3a:	4b0b      	ldr	r3, [pc, #44]	; (8012b68 <vTaskPlaceOnUnorderedEventList+0x74>)
 8012b3c:	681b      	ldr	r3, [r3, #0]
 8012b3e:	68ba      	ldr	r2, [r7, #8]
 8012b40:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8012b44:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012b46:	4b08      	ldr	r3, [pc, #32]	; (8012b68 <vTaskPlaceOnUnorderedEventList+0x74>)
 8012b48:	681b      	ldr	r3, [r3, #0]
 8012b4a:	3318      	adds	r3, #24
 8012b4c:	4619      	mov	r1, r3
 8012b4e:	68f8      	ldr	r0, [r7, #12]
 8012b50:	f7fe fd33 	bl	80115ba <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012b54:	2101      	movs	r1, #1
 8012b56:	6878      	ldr	r0, [r7, #4]
 8012b58:	f000 faf8 	bl	801314c <prvAddCurrentTaskToDelayedList>
}
 8012b5c:	bf00      	nop
 8012b5e:	3718      	adds	r7, #24
 8012b60:	46bd      	mov	sp, r7
 8012b62:	bd80      	pop	{r7, pc}
 8012b64:	24001374 	.word	0x24001374
 8012b68:	24000e78 	.word	0x24000e78

08012b6c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8012b6c:	b580      	push	{r7, lr}
 8012b6e:	b086      	sub	sp, #24
 8012b70:	af00      	add	r7, sp, #0
 8012b72:	60f8      	str	r0, [r7, #12]
 8012b74:	60b9      	str	r1, [r7, #8]
 8012b76:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8012b78:	68fb      	ldr	r3, [r7, #12]
 8012b7a:	2b00      	cmp	r3, #0
 8012b7c:	d10a      	bne.n	8012b94 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8012b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b82:	f383 8811 	msr	BASEPRI, r3
 8012b86:	f3bf 8f6f 	isb	sy
 8012b8a:	f3bf 8f4f 	dsb	sy
 8012b8e:	617b      	str	r3, [r7, #20]
}
 8012b90:	bf00      	nop
 8012b92:	e7fe      	b.n	8012b92 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012b94:	4b0a      	ldr	r3, [pc, #40]	; (8012bc0 <vTaskPlaceOnEventListRestricted+0x54>)
 8012b96:	681b      	ldr	r3, [r3, #0]
 8012b98:	3318      	adds	r3, #24
 8012b9a:	4619      	mov	r1, r3
 8012b9c:	68f8      	ldr	r0, [r7, #12]
 8012b9e:	f7fe fd0c 	bl	80115ba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	2b00      	cmp	r3, #0
 8012ba6:	d002      	beq.n	8012bae <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8012ba8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012bac:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8012bae:	6879      	ldr	r1, [r7, #4]
 8012bb0:	68b8      	ldr	r0, [r7, #8]
 8012bb2:	f000 facb 	bl	801314c <prvAddCurrentTaskToDelayedList>
	}
 8012bb6:	bf00      	nop
 8012bb8:	3718      	adds	r7, #24
 8012bba:	46bd      	mov	sp, r7
 8012bbc:	bd80      	pop	{r7, pc}
 8012bbe:	bf00      	nop
 8012bc0:	24000e78 	.word	0x24000e78

08012bc4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8012bc4:	b580      	push	{r7, lr}
 8012bc6:	b086      	sub	sp, #24
 8012bc8:	af00      	add	r7, sp, #0
 8012bca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	68db      	ldr	r3, [r3, #12]
 8012bd0:	68db      	ldr	r3, [r3, #12]
 8012bd2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8012bd4:	693b      	ldr	r3, [r7, #16]
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	d10a      	bne.n	8012bf0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8012bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bde:	f383 8811 	msr	BASEPRI, r3
 8012be2:	f3bf 8f6f 	isb	sy
 8012be6:	f3bf 8f4f 	dsb	sy
 8012bea:	60fb      	str	r3, [r7, #12]
}
 8012bec:	bf00      	nop
 8012bee:	e7fe      	b.n	8012bee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8012bf0:	693b      	ldr	r3, [r7, #16]
 8012bf2:	3318      	adds	r3, #24
 8012bf4:	4618      	mov	r0, r3
 8012bf6:	f7fe fd3d 	bl	8011674 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012bfa:	4b1e      	ldr	r3, [pc, #120]	; (8012c74 <xTaskRemoveFromEventList+0xb0>)
 8012bfc:	681b      	ldr	r3, [r3, #0]
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	d11d      	bne.n	8012c3e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8012c02:	693b      	ldr	r3, [r7, #16]
 8012c04:	3304      	adds	r3, #4
 8012c06:	4618      	mov	r0, r3
 8012c08:	f7fe fd34 	bl	8011674 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8012c0c:	693b      	ldr	r3, [r7, #16]
 8012c0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c10:	4b19      	ldr	r3, [pc, #100]	; (8012c78 <xTaskRemoveFromEventList+0xb4>)
 8012c12:	681b      	ldr	r3, [r3, #0]
 8012c14:	429a      	cmp	r2, r3
 8012c16:	d903      	bls.n	8012c20 <xTaskRemoveFromEventList+0x5c>
 8012c18:	693b      	ldr	r3, [r7, #16]
 8012c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c1c:	4a16      	ldr	r2, [pc, #88]	; (8012c78 <xTaskRemoveFromEventList+0xb4>)
 8012c1e:	6013      	str	r3, [r2, #0]
 8012c20:	693b      	ldr	r3, [r7, #16]
 8012c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c24:	4613      	mov	r3, r2
 8012c26:	009b      	lsls	r3, r3, #2
 8012c28:	4413      	add	r3, r2
 8012c2a:	009b      	lsls	r3, r3, #2
 8012c2c:	4a13      	ldr	r2, [pc, #76]	; (8012c7c <xTaskRemoveFromEventList+0xb8>)
 8012c2e:	441a      	add	r2, r3
 8012c30:	693b      	ldr	r3, [r7, #16]
 8012c32:	3304      	adds	r3, #4
 8012c34:	4619      	mov	r1, r3
 8012c36:	4610      	mov	r0, r2
 8012c38:	f7fe fcbf 	bl	80115ba <vListInsertEnd>
 8012c3c:	e005      	b.n	8012c4a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8012c3e:	693b      	ldr	r3, [r7, #16]
 8012c40:	3318      	adds	r3, #24
 8012c42:	4619      	mov	r1, r3
 8012c44:	480e      	ldr	r0, [pc, #56]	; (8012c80 <xTaskRemoveFromEventList+0xbc>)
 8012c46:	f7fe fcb8 	bl	80115ba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012c4a:	693b      	ldr	r3, [r7, #16]
 8012c4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c4e:	4b0d      	ldr	r3, [pc, #52]	; (8012c84 <xTaskRemoveFromEventList+0xc0>)
 8012c50:	681b      	ldr	r3, [r3, #0]
 8012c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c54:	429a      	cmp	r2, r3
 8012c56:	d905      	bls.n	8012c64 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8012c58:	2301      	movs	r3, #1
 8012c5a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8012c5c:	4b0a      	ldr	r3, [pc, #40]	; (8012c88 <xTaskRemoveFromEventList+0xc4>)
 8012c5e:	2201      	movs	r2, #1
 8012c60:	601a      	str	r2, [r3, #0]
 8012c62:	e001      	b.n	8012c68 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8012c64:	2300      	movs	r3, #0
 8012c66:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8012c68:	697b      	ldr	r3, [r7, #20]
}
 8012c6a:	4618      	mov	r0, r3
 8012c6c:	3718      	adds	r7, #24
 8012c6e:	46bd      	mov	sp, r7
 8012c70:	bd80      	pop	{r7, pc}
 8012c72:	bf00      	nop
 8012c74:	24001374 	.word	0x24001374
 8012c78:	24001354 	.word	0x24001354
 8012c7c:	24000e7c 	.word	0x24000e7c
 8012c80:	2400130c 	.word	0x2400130c
 8012c84:	24000e78 	.word	0x24000e78
 8012c88:	24001360 	.word	0x24001360

08012c8c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8012c8c:	b580      	push	{r7, lr}
 8012c8e:	b086      	sub	sp, #24
 8012c90:	af00      	add	r7, sp, #0
 8012c92:	6078      	str	r0, [r7, #4]
 8012c94:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8012c96:	4b29      	ldr	r3, [pc, #164]	; (8012d3c <vTaskRemoveFromUnorderedEventList+0xb0>)
 8012c98:	681b      	ldr	r3, [r3, #0]
 8012c9a:	2b00      	cmp	r3, #0
 8012c9c:	d10a      	bne.n	8012cb4 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8012c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ca2:	f383 8811 	msr	BASEPRI, r3
 8012ca6:	f3bf 8f6f 	isb	sy
 8012caa:	f3bf 8f4f 	dsb	sy
 8012cae:	613b      	str	r3, [r7, #16]
}
 8012cb0:	bf00      	nop
 8012cb2:	e7fe      	b.n	8012cb2 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8012cb4:	683b      	ldr	r3, [r7, #0]
 8012cb6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	68db      	ldr	r3, [r3, #12]
 8012cc2:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8012cc4:	697b      	ldr	r3, [r7, #20]
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	d10a      	bne.n	8012ce0 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8012cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cce:	f383 8811 	msr	BASEPRI, r3
 8012cd2:	f3bf 8f6f 	isb	sy
 8012cd6:	f3bf 8f4f 	dsb	sy
 8012cda:	60fb      	str	r3, [r7, #12]
}
 8012cdc:	bf00      	nop
 8012cde:	e7fe      	b.n	8012cde <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8012ce0:	6878      	ldr	r0, [r7, #4]
 8012ce2:	f7fe fcc7 	bl	8011674 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8012ce6:	697b      	ldr	r3, [r7, #20]
 8012ce8:	3304      	adds	r3, #4
 8012cea:	4618      	mov	r0, r3
 8012cec:	f7fe fcc2 	bl	8011674 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8012cf0:	697b      	ldr	r3, [r7, #20]
 8012cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012cf4:	4b12      	ldr	r3, [pc, #72]	; (8012d40 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8012cf6:	681b      	ldr	r3, [r3, #0]
 8012cf8:	429a      	cmp	r2, r3
 8012cfa:	d903      	bls.n	8012d04 <vTaskRemoveFromUnorderedEventList+0x78>
 8012cfc:	697b      	ldr	r3, [r7, #20]
 8012cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d00:	4a0f      	ldr	r2, [pc, #60]	; (8012d40 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8012d02:	6013      	str	r3, [r2, #0]
 8012d04:	697b      	ldr	r3, [r7, #20]
 8012d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d08:	4613      	mov	r3, r2
 8012d0a:	009b      	lsls	r3, r3, #2
 8012d0c:	4413      	add	r3, r2
 8012d0e:	009b      	lsls	r3, r3, #2
 8012d10:	4a0c      	ldr	r2, [pc, #48]	; (8012d44 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8012d12:	441a      	add	r2, r3
 8012d14:	697b      	ldr	r3, [r7, #20]
 8012d16:	3304      	adds	r3, #4
 8012d18:	4619      	mov	r1, r3
 8012d1a:	4610      	mov	r0, r2
 8012d1c:	f7fe fc4d 	bl	80115ba <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012d20:	697b      	ldr	r3, [r7, #20]
 8012d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d24:	4b08      	ldr	r3, [pc, #32]	; (8012d48 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8012d26:	681b      	ldr	r3, [r3, #0]
 8012d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d2a:	429a      	cmp	r2, r3
 8012d2c:	d902      	bls.n	8012d34 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8012d2e:	4b07      	ldr	r3, [pc, #28]	; (8012d4c <vTaskRemoveFromUnorderedEventList+0xc0>)
 8012d30:	2201      	movs	r2, #1
 8012d32:	601a      	str	r2, [r3, #0]
	}
}
 8012d34:	bf00      	nop
 8012d36:	3718      	adds	r7, #24
 8012d38:	46bd      	mov	sp, r7
 8012d3a:	bd80      	pop	{r7, pc}
 8012d3c:	24001374 	.word	0x24001374
 8012d40:	24001354 	.word	0x24001354
 8012d44:	24000e7c 	.word	0x24000e7c
 8012d48:	24000e78 	.word	0x24000e78
 8012d4c:	24001360 	.word	0x24001360

08012d50 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8012d50:	b480      	push	{r7}
 8012d52:	b083      	sub	sp, #12
 8012d54:	af00      	add	r7, sp, #0
 8012d56:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8012d58:	4b06      	ldr	r3, [pc, #24]	; (8012d74 <vTaskInternalSetTimeOutState+0x24>)
 8012d5a:	681a      	ldr	r2, [r3, #0]
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8012d60:	4b05      	ldr	r3, [pc, #20]	; (8012d78 <vTaskInternalSetTimeOutState+0x28>)
 8012d62:	681a      	ldr	r2, [r3, #0]
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	605a      	str	r2, [r3, #4]
}
 8012d68:	bf00      	nop
 8012d6a:	370c      	adds	r7, #12
 8012d6c:	46bd      	mov	sp, r7
 8012d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d72:	4770      	bx	lr
 8012d74:	24001364 	.word	0x24001364
 8012d78:	24001350 	.word	0x24001350

08012d7c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8012d7c:	b580      	push	{r7, lr}
 8012d7e:	b088      	sub	sp, #32
 8012d80:	af00      	add	r7, sp, #0
 8012d82:	6078      	str	r0, [r7, #4]
 8012d84:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	2b00      	cmp	r3, #0
 8012d8a:	d10a      	bne.n	8012da2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8012d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d90:	f383 8811 	msr	BASEPRI, r3
 8012d94:	f3bf 8f6f 	isb	sy
 8012d98:	f3bf 8f4f 	dsb	sy
 8012d9c:	613b      	str	r3, [r7, #16]
}
 8012d9e:	bf00      	nop
 8012da0:	e7fe      	b.n	8012da0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8012da2:	683b      	ldr	r3, [r7, #0]
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	d10a      	bne.n	8012dbe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8012da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012dac:	f383 8811 	msr	BASEPRI, r3
 8012db0:	f3bf 8f6f 	isb	sy
 8012db4:	f3bf 8f4f 	dsb	sy
 8012db8:	60fb      	str	r3, [r7, #12]
}
 8012dba:	bf00      	nop
 8012dbc:	e7fe      	b.n	8012dbc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8012dbe:	f000 feb1 	bl	8013b24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8012dc2:	4b1d      	ldr	r3, [pc, #116]	; (8012e38 <xTaskCheckForTimeOut+0xbc>)
 8012dc4:	681b      	ldr	r3, [r3, #0]
 8012dc6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	685b      	ldr	r3, [r3, #4]
 8012dcc:	69ba      	ldr	r2, [r7, #24]
 8012dce:	1ad3      	subs	r3, r2, r3
 8012dd0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8012dd2:	683b      	ldr	r3, [r7, #0]
 8012dd4:	681b      	ldr	r3, [r3, #0]
 8012dd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012dda:	d102      	bne.n	8012de2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8012ddc:	2300      	movs	r3, #0
 8012dde:	61fb      	str	r3, [r7, #28]
 8012de0:	e023      	b.n	8012e2a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	681a      	ldr	r2, [r3, #0]
 8012de6:	4b15      	ldr	r3, [pc, #84]	; (8012e3c <xTaskCheckForTimeOut+0xc0>)
 8012de8:	681b      	ldr	r3, [r3, #0]
 8012dea:	429a      	cmp	r2, r3
 8012dec:	d007      	beq.n	8012dfe <xTaskCheckForTimeOut+0x82>
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	685b      	ldr	r3, [r3, #4]
 8012df2:	69ba      	ldr	r2, [r7, #24]
 8012df4:	429a      	cmp	r2, r3
 8012df6:	d302      	bcc.n	8012dfe <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8012df8:	2301      	movs	r3, #1
 8012dfa:	61fb      	str	r3, [r7, #28]
 8012dfc:	e015      	b.n	8012e2a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8012dfe:	683b      	ldr	r3, [r7, #0]
 8012e00:	681b      	ldr	r3, [r3, #0]
 8012e02:	697a      	ldr	r2, [r7, #20]
 8012e04:	429a      	cmp	r2, r3
 8012e06:	d20b      	bcs.n	8012e20 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8012e08:	683b      	ldr	r3, [r7, #0]
 8012e0a:	681a      	ldr	r2, [r3, #0]
 8012e0c:	697b      	ldr	r3, [r7, #20]
 8012e0e:	1ad2      	subs	r2, r2, r3
 8012e10:	683b      	ldr	r3, [r7, #0]
 8012e12:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8012e14:	6878      	ldr	r0, [r7, #4]
 8012e16:	f7ff ff9b 	bl	8012d50 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8012e1a:	2300      	movs	r3, #0
 8012e1c:	61fb      	str	r3, [r7, #28]
 8012e1e:	e004      	b.n	8012e2a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8012e20:	683b      	ldr	r3, [r7, #0]
 8012e22:	2200      	movs	r2, #0
 8012e24:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8012e26:	2301      	movs	r3, #1
 8012e28:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8012e2a:	f000 feab 	bl	8013b84 <vPortExitCritical>

	return xReturn;
 8012e2e:	69fb      	ldr	r3, [r7, #28]
}
 8012e30:	4618      	mov	r0, r3
 8012e32:	3720      	adds	r7, #32
 8012e34:	46bd      	mov	sp, r7
 8012e36:	bd80      	pop	{r7, pc}
 8012e38:	24001350 	.word	0x24001350
 8012e3c:	24001364 	.word	0x24001364

08012e40 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8012e40:	b480      	push	{r7}
 8012e42:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8012e44:	4b03      	ldr	r3, [pc, #12]	; (8012e54 <vTaskMissedYield+0x14>)
 8012e46:	2201      	movs	r2, #1
 8012e48:	601a      	str	r2, [r3, #0]
}
 8012e4a:	bf00      	nop
 8012e4c:	46bd      	mov	sp, r7
 8012e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e52:	4770      	bx	lr
 8012e54:	24001360 	.word	0x24001360

08012e58 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8012e58:	b580      	push	{r7, lr}
 8012e5a:	b082      	sub	sp, #8
 8012e5c:	af00      	add	r7, sp, #0
 8012e5e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8012e60:	f000 f852 	bl	8012f08 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8012e64:	4b06      	ldr	r3, [pc, #24]	; (8012e80 <prvIdleTask+0x28>)
 8012e66:	681b      	ldr	r3, [r3, #0]
 8012e68:	2b01      	cmp	r3, #1
 8012e6a:	d9f9      	bls.n	8012e60 <prvIdleTask+0x8>
			{
				taskYIELD();
 8012e6c:	4b05      	ldr	r3, [pc, #20]	; (8012e84 <prvIdleTask+0x2c>)
 8012e6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012e72:	601a      	str	r2, [r3, #0]
 8012e74:	f3bf 8f4f 	dsb	sy
 8012e78:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8012e7c:	e7f0      	b.n	8012e60 <prvIdleTask+0x8>
 8012e7e:	bf00      	nop
 8012e80:	24000e7c 	.word	0x24000e7c
 8012e84:	e000ed04 	.word	0xe000ed04

08012e88 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8012e88:	b580      	push	{r7, lr}
 8012e8a:	b082      	sub	sp, #8
 8012e8c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012e8e:	2300      	movs	r3, #0
 8012e90:	607b      	str	r3, [r7, #4]
 8012e92:	e00c      	b.n	8012eae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8012e94:	687a      	ldr	r2, [r7, #4]
 8012e96:	4613      	mov	r3, r2
 8012e98:	009b      	lsls	r3, r3, #2
 8012e9a:	4413      	add	r3, r2
 8012e9c:	009b      	lsls	r3, r3, #2
 8012e9e:	4a12      	ldr	r2, [pc, #72]	; (8012ee8 <prvInitialiseTaskLists+0x60>)
 8012ea0:	4413      	add	r3, r2
 8012ea2:	4618      	mov	r0, r3
 8012ea4:	f7fe fb5c 	bl	8011560 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	3301      	adds	r3, #1
 8012eac:	607b      	str	r3, [r7, #4]
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	2b37      	cmp	r3, #55	; 0x37
 8012eb2:	d9ef      	bls.n	8012e94 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8012eb4:	480d      	ldr	r0, [pc, #52]	; (8012eec <prvInitialiseTaskLists+0x64>)
 8012eb6:	f7fe fb53 	bl	8011560 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8012eba:	480d      	ldr	r0, [pc, #52]	; (8012ef0 <prvInitialiseTaskLists+0x68>)
 8012ebc:	f7fe fb50 	bl	8011560 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8012ec0:	480c      	ldr	r0, [pc, #48]	; (8012ef4 <prvInitialiseTaskLists+0x6c>)
 8012ec2:	f7fe fb4d 	bl	8011560 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8012ec6:	480c      	ldr	r0, [pc, #48]	; (8012ef8 <prvInitialiseTaskLists+0x70>)
 8012ec8:	f7fe fb4a 	bl	8011560 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8012ecc:	480b      	ldr	r0, [pc, #44]	; (8012efc <prvInitialiseTaskLists+0x74>)
 8012ece:	f7fe fb47 	bl	8011560 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8012ed2:	4b0b      	ldr	r3, [pc, #44]	; (8012f00 <prvInitialiseTaskLists+0x78>)
 8012ed4:	4a05      	ldr	r2, [pc, #20]	; (8012eec <prvInitialiseTaskLists+0x64>)
 8012ed6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8012ed8:	4b0a      	ldr	r3, [pc, #40]	; (8012f04 <prvInitialiseTaskLists+0x7c>)
 8012eda:	4a05      	ldr	r2, [pc, #20]	; (8012ef0 <prvInitialiseTaskLists+0x68>)
 8012edc:	601a      	str	r2, [r3, #0]
}
 8012ede:	bf00      	nop
 8012ee0:	3708      	adds	r7, #8
 8012ee2:	46bd      	mov	sp, r7
 8012ee4:	bd80      	pop	{r7, pc}
 8012ee6:	bf00      	nop
 8012ee8:	24000e7c 	.word	0x24000e7c
 8012eec:	240012dc 	.word	0x240012dc
 8012ef0:	240012f0 	.word	0x240012f0
 8012ef4:	2400130c 	.word	0x2400130c
 8012ef8:	24001320 	.word	0x24001320
 8012efc:	24001338 	.word	0x24001338
 8012f00:	24001304 	.word	0x24001304
 8012f04:	24001308 	.word	0x24001308

08012f08 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8012f08:	b580      	push	{r7, lr}
 8012f0a:	b082      	sub	sp, #8
 8012f0c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012f0e:	e019      	b.n	8012f44 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8012f10:	f000 fe08 	bl	8013b24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012f14:	4b10      	ldr	r3, [pc, #64]	; (8012f58 <prvCheckTasksWaitingTermination+0x50>)
 8012f16:	68db      	ldr	r3, [r3, #12]
 8012f18:	68db      	ldr	r3, [r3, #12]
 8012f1a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	3304      	adds	r3, #4
 8012f20:	4618      	mov	r0, r3
 8012f22:	f7fe fba7 	bl	8011674 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8012f26:	4b0d      	ldr	r3, [pc, #52]	; (8012f5c <prvCheckTasksWaitingTermination+0x54>)
 8012f28:	681b      	ldr	r3, [r3, #0]
 8012f2a:	3b01      	subs	r3, #1
 8012f2c:	4a0b      	ldr	r2, [pc, #44]	; (8012f5c <prvCheckTasksWaitingTermination+0x54>)
 8012f2e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8012f30:	4b0b      	ldr	r3, [pc, #44]	; (8012f60 <prvCheckTasksWaitingTermination+0x58>)
 8012f32:	681b      	ldr	r3, [r3, #0]
 8012f34:	3b01      	subs	r3, #1
 8012f36:	4a0a      	ldr	r2, [pc, #40]	; (8012f60 <prvCheckTasksWaitingTermination+0x58>)
 8012f38:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8012f3a:	f000 fe23 	bl	8013b84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8012f3e:	6878      	ldr	r0, [r7, #4]
 8012f40:	f000 f810 	bl	8012f64 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012f44:	4b06      	ldr	r3, [pc, #24]	; (8012f60 <prvCheckTasksWaitingTermination+0x58>)
 8012f46:	681b      	ldr	r3, [r3, #0]
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	d1e1      	bne.n	8012f10 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8012f4c:	bf00      	nop
 8012f4e:	bf00      	nop
 8012f50:	3708      	adds	r7, #8
 8012f52:	46bd      	mov	sp, r7
 8012f54:	bd80      	pop	{r7, pc}
 8012f56:	bf00      	nop
 8012f58:	24001320 	.word	0x24001320
 8012f5c:	2400134c 	.word	0x2400134c
 8012f60:	24001334 	.word	0x24001334

08012f64 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8012f64:	b580      	push	{r7, lr}
 8012f66:	b084      	sub	sp, #16
 8012f68:	af00      	add	r7, sp, #0
 8012f6a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8012f72:	2b00      	cmp	r3, #0
 8012f74:	d108      	bne.n	8012f88 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f7a:	4618      	mov	r0, r3
 8012f7c:	f000 ffc0 	bl	8013f00 <vPortFree>
				vPortFree( pxTCB );
 8012f80:	6878      	ldr	r0, [r7, #4]
 8012f82:	f000 ffbd 	bl	8013f00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8012f86:	e018      	b.n	8012fba <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8012f8e:	2b01      	cmp	r3, #1
 8012f90:	d103      	bne.n	8012f9a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8012f92:	6878      	ldr	r0, [r7, #4]
 8012f94:	f000 ffb4 	bl	8013f00 <vPortFree>
	}
 8012f98:	e00f      	b.n	8012fba <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8012fa0:	2b02      	cmp	r3, #2
 8012fa2:	d00a      	beq.n	8012fba <prvDeleteTCB+0x56>
	__asm volatile
 8012fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fa8:	f383 8811 	msr	BASEPRI, r3
 8012fac:	f3bf 8f6f 	isb	sy
 8012fb0:	f3bf 8f4f 	dsb	sy
 8012fb4:	60fb      	str	r3, [r7, #12]
}
 8012fb6:	bf00      	nop
 8012fb8:	e7fe      	b.n	8012fb8 <prvDeleteTCB+0x54>
	}
 8012fba:	bf00      	nop
 8012fbc:	3710      	adds	r7, #16
 8012fbe:	46bd      	mov	sp, r7
 8012fc0:	bd80      	pop	{r7, pc}
	...

08012fc4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8012fc4:	b480      	push	{r7}
 8012fc6:	b083      	sub	sp, #12
 8012fc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012fca:	4b0c      	ldr	r3, [pc, #48]	; (8012ffc <prvResetNextTaskUnblockTime+0x38>)
 8012fcc:	681b      	ldr	r3, [r3, #0]
 8012fce:	681b      	ldr	r3, [r3, #0]
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	d104      	bne.n	8012fde <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8012fd4:	4b0a      	ldr	r3, [pc, #40]	; (8013000 <prvResetNextTaskUnblockTime+0x3c>)
 8012fd6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012fda:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8012fdc:	e008      	b.n	8012ff0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012fde:	4b07      	ldr	r3, [pc, #28]	; (8012ffc <prvResetNextTaskUnblockTime+0x38>)
 8012fe0:	681b      	ldr	r3, [r3, #0]
 8012fe2:	68db      	ldr	r3, [r3, #12]
 8012fe4:	68db      	ldr	r3, [r3, #12]
 8012fe6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	685b      	ldr	r3, [r3, #4]
 8012fec:	4a04      	ldr	r2, [pc, #16]	; (8013000 <prvResetNextTaskUnblockTime+0x3c>)
 8012fee:	6013      	str	r3, [r2, #0]
}
 8012ff0:	bf00      	nop
 8012ff2:	370c      	adds	r7, #12
 8012ff4:	46bd      	mov	sp, r7
 8012ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ffa:	4770      	bx	lr
 8012ffc:	24001304 	.word	0x24001304
 8013000:	2400136c 	.word	0x2400136c

08013004 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8013004:	b480      	push	{r7}
 8013006:	b083      	sub	sp, #12
 8013008:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801300a:	4b0b      	ldr	r3, [pc, #44]	; (8013038 <xTaskGetSchedulerState+0x34>)
 801300c:	681b      	ldr	r3, [r3, #0]
 801300e:	2b00      	cmp	r3, #0
 8013010:	d102      	bne.n	8013018 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8013012:	2301      	movs	r3, #1
 8013014:	607b      	str	r3, [r7, #4]
 8013016:	e008      	b.n	801302a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013018:	4b08      	ldr	r3, [pc, #32]	; (801303c <xTaskGetSchedulerState+0x38>)
 801301a:	681b      	ldr	r3, [r3, #0]
 801301c:	2b00      	cmp	r3, #0
 801301e:	d102      	bne.n	8013026 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8013020:	2302      	movs	r3, #2
 8013022:	607b      	str	r3, [r7, #4]
 8013024:	e001      	b.n	801302a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8013026:	2300      	movs	r3, #0
 8013028:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801302a:	687b      	ldr	r3, [r7, #4]
	}
 801302c:	4618      	mov	r0, r3
 801302e:	370c      	adds	r7, #12
 8013030:	46bd      	mov	sp, r7
 8013032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013036:	4770      	bx	lr
 8013038:	24001358 	.word	0x24001358
 801303c:	24001374 	.word	0x24001374

08013040 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8013040:	b580      	push	{r7, lr}
 8013042:	b086      	sub	sp, #24
 8013044:	af00      	add	r7, sp, #0
 8013046:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801304c:	2300      	movs	r3, #0
 801304e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	2b00      	cmp	r3, #0
 8013054:	d056      	beq.n	8013104 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8013056:	4b2e      	ldr	r3, [pc, #184]	; (8013110 <xTaskPriorityDisinherit+0xd0>)
 8013058:	681b      	ldr	r3, [r3, #0]
 801305a:	693a      	ldr	r2, [r7, #16]
 801305c:	429a      	cmp	r2, r3
 801305e:	d00a      	beq.n	8013076 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8013060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013064:	f383 8811 	msr	BASEPRI, r3
 8013068:	f3bf 8f6f 	isb	sy
 801306c:	f3bf 8f4f 	dsb	sy
 8013070:	60fb      	str	r3, [r7, #12]
}
 8013072:	bf00      	nop
 8013074:	e7fe      	b.n	8013074 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8013076:	693b      	ldr	r3, [r7, #16]
 8013078:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801307a:	2b00      	cmp	r3, #0
 801307c:	d10a      	bne.n	8013094 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801307e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013082:	f383 8811 	msr	BASEPRI, r3
 8013086:	f3bf 8f6f 	isb	sy
 801308a:	f3bf 8f4f 	dsb	sy
 801308e:	60bb      	str	r3, [r7, #8]
}
 8013090:	bf00      	nop
 8013092:	e7fe      	b.n	8013092 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8013094:	693b      	ldr	r3, [r7, #16]
 8013096:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013098:	1e5a      	subs	r2, r3, #1
 801309a:	693b      	ldr	r3, [r7, #16]
 801309c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801309e:	693b      	ldr	r3, [r7, #16]
 80130a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80130a2:	693b      	ldr	r3, [r7, #16]
 80130a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80130a6:	429a      	cmp	r2, r3
 80130a8:	d02c      	beq.n	8013104 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80130aa:	693b      	ldr	r3, [r7, #16]
 80130ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	d128      	bne.n	8013104 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80130b2:	693b      	ldr	r3, [r7, #16]
 80130b4:	3304      	adds	r3, #4
 80130b6:	4618      	mov	r0, r3
 80130b8:	f7fe fadc 	bl	8011674 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80130bc:	693b      	ldr	r3, [r7, #16]
 80130be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80130c0:	693b      	ldr	r3, [r7, #16]
 80130c2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80130c4:	693b      	ldr	r3, [r7, #16]
 80130c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80130c8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80130cc:	693b      	ldr	r3, [r7, #16]
 80130ce:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80130d0:	693b      	ldr	r3, [r7, #16]
 80130d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80130d4:	4b0f      	ldr	r3, [pc, #60]	; (8013114 <xTaskPriorityDisinherit+0xd4>)
 80130d6:	681b      	ldr	r3, [r3, #0]
 80130d8:	429a      	cmp	r2, r3
 80130da:	d903      	bls.n	80130e4 <xTaskPriorityDisinherit+0xa4>
 80130dc:	693b      	ldr	r3, [r7, #16]
 80130de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80130e0:	4a0c      	ldr	r2, [pc, #48]	; (8013114 <xTaskPriorityDisinherit+0xd4>)
 80130e2:	6013      	str	r3, [r2, #0]
 80130e4:	693b      	ldr	r3, [r7, #16]
 80130e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80130e8:	4613      	mov	r3, r2
 80130ea:	009b      	lsls	r3, r3, #2
 80130ec:	4413      	add	r3, r2
 80130ee:	009b      	lsls	r3, r3, #2
 80130f0:	4a09      	ldr	r2, [pc, #36]	; (8013118 <xTaskPriorityDisinherit+0xd8>)
 80130f2:	441a      	add	r2, r3
 80130f4:	693b      	ldr	r3, [r7, #16]
 80130f6:	3304      	adds	r3, #4
 80130f8:	4619      	mov	r1, r3
 80130fa:	4610      	mov	r0, r2
 80130fc:	f7fe fa5d 	bl	80115ba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8013100:	2301      	movs	r3, #1
 8013102:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013104:	697b      	ldr	r3, [r7, #20]
	}
 8013106:	4618      	mov	r0, r3
 8013108:	3718      	adds	r7, #24
 801310a:	46bd      	mov	sp, r7
 801310c:	bd80      	pop	{r7, pc}
 801310e:	bf00      	nop
 8013110:	24000e78 	.word	0x24000e78
 8013114:	24001354 	.word	0x24001354
 8013118:	24000e7c 	.word	0x24000e7c

0801311c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 801311c:	b480      	push	{r7}
 801311e:	b083      	sub	sp, #12
 8013120:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8013122:	4b09      	ldr	r3, [pc, #36]	; (8013148 <uxTaskResetEventItemValue+0x2c>)
 8013124:	681b      	ldr	r3, [r3, #0]
 8013126:	699b      	ldr	r3, [r3, #24]
 8013128:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801312a:	4b07      	ldr	r3, [pc, #28]	; (8013148 <uxTaskResetEventItemValue+0x2c>)
 801312c:	681b      	ldr	r3, [r3, #0]
 801312e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013130:	4b05      	ldr	r3, [pc, #20]	; (8013148 <uxTaskResetEventItemValue+0x2c>)
 8013132:	681b      	ldr	r3, [r3, #0]
 8013134:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8013138:	619a      	str	r2, [r3, #24]

	return uxReturn;
 801313a:	687b      	ldr	r3, [r7, #4]
}
 801313c:	4618      	mov	r0, r3
 801313e:	370c      	adds	r7, #12
 8013140:	46bd      	mov	sp, r7
 8013142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013146:	4770      	bx	lr
 8013148:	24000e78 	.word	0x24000e78

0801314c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801314c:	b580      	push	{r7, lr}
 801314e:	b084      	sub	sp, #16
 8013150:	af00      	add	r7, sp, #0
 8013152:	6078      	str	r0, [r7, #4]
 8013154:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8013156:	4b21      	ldr	r3, [pc, #132]	; (80131dc <prvAddCurrentTaskToDelayedList+0x90>)
 8013158:	681b      	ldr	r3, [r3, #0]
 801315a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801315c:	4b20      	ldr	r3, [pc, #128]	; (80131e0 <prvAddCurrentTaskToDelayedList+0x94>)
 801315e:	681b      	ldr	r3, [r3, #0]
 8013160:	3304      	adds	r3, #4
 8013162:	4618      	mov	r0, r3
 8013164:	f7fe fa86 	bl	8011674 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801316e:	d10a      	bne.n	8013186 <prvAddCurrentTaskToDelayedList+0x3a>
 8013170:	683b      	ldr	r3, [r7, #0]
 8013172:	2b00      	cmp	r3, #0
 8013174:	d007      	beq.n	8013186 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013176:	4b1a      	ldr	r3, [pc, #104]	; (80131e0 <prvAddCurrentTaskToDelayedList+0x94>)
 8013178:	681b      	ldr	r3, [r3, #0]
 801317a:	3304      	adds	r3, #4
 801317c:	4619      	mov	r1, r3
 801317e:	4819      	ldr	r0, [pc, #100]	; (80131e4 <prvAddCurrentTaskToDelayedList+0x98>)
 8013180:	f7fe fa1b 	bl	80115ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8013184:	e026      	b.n	80131d4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8013186:	68fa      	ldr	r2, [r7, #12]
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	4413      	add	r3, r2
 801318c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801318e:	4b14      	ldr	r3, [pc, #80]	; (80131e0 <prvAddCurrentTaskToDelayedList+0x94>)
 8013190:	681b      	ldr	r3, [r3, #0]
 8013192:	68ba      	ldr	r2, [r7, #8]
 8013194:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8013196:	68ba      	ldr	r2, [r7, #8]
 8013198:	68fb      	ldr	r3, [r7, #12]
 801319a:	429a      	cmp	r2, r3
 801319c:	d209      	bcs.n	80131b2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801319e:	4b12      	ldr	r3, [pc, #72]	; (80131e8 <prvAddCurrentTaskToDelayedList+0x9c>)
 80131a0:	681a      	ldr	r2, [r3, #0]
 80131a2:	4b0f      	ldr	r3, [pc, #60]	; (80131e0 <prvAddCurrentTaskToDelayedList+0x94>)
 80131a4:	681b      	ldr	r3, [r3, #0]
 80131a6:	3304      	adds	r3, #4
 80131a8:	4619      	mov	r1, r3
 80131aa:	4610      	mov	r0, r2
 80131ac:	f7fe fa29 	bl	8011602 <vListInsert>
}
 80131b0:	e010      	b.n	80131d4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80131b2:	4b0e      	ldr	r3, [pc, #56]	; (80131ec <prvAddCurrentTaskToDelayedList+0xa0>)
 80131b4:	681a      	ldr	r2, [r3, #0]
 80131b6:	4b0a      	ldr	r3, [pc, #40]	; (80131e0 <prvAddCurrentTaskToDelayedList+0x94>)
 80131b8:	681b      	ldr	r3, [r3, #0]
 80131ba:	3304      	adds	r3, #4
 80131bc:	4619      	mov	r1, r3
 80131be:	4610      	mov	r0, r2
 80131c0:	f7fe fa1f 	bl	8011602 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80131c4:	4b0a      	ldr	r3, [pc, #40]	; (80131f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80131c6:	681b      	ldr	r3, [r3, #0]
 80131c8:	68ba      	ldr	r2, [r7, #8]
 80131ca:	429a      	cmp	r2, r3
 80131cc:	d202      	bcs.n	80131d4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80131ce:	4a08      	ldr	r2, [pc, #32]	; (80131f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80131d0:	68bb      	ldr	r3, [r7, #8]
 80131d2:	6013      	str	r3, [r2, #0]
}
 80131d4:	bf00      	nop
 80131d6:	3710      	adds	r7, #16
 80131d8:	46bd      	mov	sp, r7
 80131da:	bd80      	pop	{r7, pc}
 80131dc:	24001350 	.word	0x24001350
 80131e0:	24000e78 	.word	0x24000e78
 80131e4:	24001338 	.word	0x24001338
 80131e8:	24001308 	.word	0x24001308
 80131ec:	24001304 	.word	0x24001304
 80131f0:	2400136c 	.word	0x2400136c

080131f4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80131f4:	b580      	push	{r7, lr}
 80131f6:	b08a      	sub	sp, #40	; 0x28
 80131f8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80131fa:	2300      	movs	r3, #0
 80131fc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80131fe:	f000 fb07 	bl	8013810 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8013202:	4b1c      	ldr	r3, [pc, #112]	; (8013274 <xTimerCreateTimerTask+0x80>)
 8013204:	681b      	ldr	r3, [r3, #0]
 8013206:	2b00      	cmp	r3, #0
 8013208:	d021      	beq.n	801324e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801320a:	2300      	movs	r3, #0
 801320c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801320e:	2300      	movs	r3, #0
 8013210:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8013212:	1d3a      	adds	r2, r7, #4
 8013214:	f107 0108 	add.w	r1, r7, #8
 8013218:	f107 030c 	add.w	r3, r7, #12
 801321c:	4618      	mov	r0, r3
 801321e:	f7fd ff97 	bl	8011150 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8013222:	6879      	ldr	r1, [r7, #4]
 8013224:	68bb      	ldr	r3, [r7, #8]
 8013226:	68fa      	ldr	r2, [r7, #12]
 8013228:	9202      	str	r2, [sp, #8]
 801322a:	9301      	str	r3, [sp, #4]
 801322c:	2302      	movs	r3, #2
 801322e:	9300      	str	r3, [sp, #0]
 8013230:	2300      	movs	r3, #0
 8013232:	460a      	mov	r2, r1
 8013234:	4910      	ldr	r1, [pc, #64]	; (8013278 <xTimerCreateTimerTask+0x84>)
 8013236:	4811      	ldr	r0, [pc, #68]	; (801327c <xTimerCreateTimerTask+0x88>)
 8013238:	f7ff f828 	bl	801228c <xTaskCreateStatic>
 801323c:	4603      	mov	r3, r0
 801323e:	4a10      	ldr	r2, [pc, #64]	; (8013280 <xTimerCreateTimerTask+0x8c>)
 8013240:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8013242:	4b0f      	ldr	r3, [pc, #60]	; (8013280 <xTimerCreateTimerTask+0x8c>)
 8013244:	681b      	ldr	r3, [r3, #0]
 8013246:	2b00      	cmp	r3, #0
 8013248:	d001      	beq.n	801324e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801324a:	2301      	movs	r3, #1
 801324c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801324e:	697b      	ldr	r3, [r7, #20]
 8013250:	2b00      	cmp	r3, #0
 8013252:	d10a      	bne.n	801326a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8013254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013258:	f383 8811 	msr	BASEPRI, r3
 801325c:	f3bf 8f6f 	isb	sy
 8013260:	f3bf 8f4f 	dsb	sy
 8013264:	613b      	str	r3, [r7, #16]
}
 8013266:	bf00      	nop
 8013268:	e7fe      	b.n	8013268 <xTimerCreateTimerTask+0x74>
	return xReturn;
 801326a:	697b      	ldr	r3, [r7, #20]
}
 801326c:	4618      	mov	r0, r3
 801326e:	3718      	adds	r7, #24
 8013270:	46bd      	mov	sp, r7
 8013272:	bd80      	pop	{r7, pc}
 8013274:	240013a8 	.word	0x240013a8
 8013278:	08015410 	.word	0x08015410
 801327c:	080133b9 	.word	0x080133b9
 8013280:	240013ac 	.word	0x240013ac

08013284 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8013284:	b580      	push	{r7, lr}
 8013286:	b08a      	sub	sp, #40	; 0x28
 8013288:	af00      	add	r7, sp, #0
 801328a:	60f8      	str	r0, [r7, #12]
 801328c:	60b9      	str	r1, [r7, #8]
 801328e:	607a      	str	r2, [r7, #4]
 8013290:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8013292:	2300      	movs	r3, #0
 8013294:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8013296:	68fb      	ldr	r3, [r7, #12]
 8013298:	2b00      	cmp	r3, #0
 801329a:	d10a      	bne.n	80132b2 <xTimerGenericCommand+0x2e>
	__asm volatile
 801329c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132a0:	f383 8811 	msr	BASEPRI, r3
 80132a4:	f3bf 8f6f 	isb	sy
 80132a8:	f3bf 8f4f 	dsb	sy
 80132ac:	623b      	str	r3, [r7, #32]
}
 80132ae:	bf00      	nop
 80132b0:	e7fe      	b.n	80132b0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80132b2:	4b1a      	ldr	r3, [pc, #104]	; (801331c <xTimerGenericCommand+0x98>)
 80132b4:	681b      	ldr	r3, [r3, #0]
 80132b6:	2b00      	cmp	r3, #0
 80132b8:	d02a      	beq.n	8013310 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80132ba:	68bb      	ldr	r3, [r7, #8]
 80132bc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80132c2:	68fb      	ldr	r3, [r7, #12]
 80132c4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80132c6:	68bb      	ldr	r3, [r7, #8]
 80132c8:	2b05      	cmp	r3, #5
 80132ca:	dc18      	bgt.n	80132fe <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80132cc:	f7ff fe9a 	bl	8013004 <xTaskGetSchedulerState>
 80132d0:	4603      	mov	r3, r0
 80132d2:	2b02      	cmp	r3, #2
 80132d4:	d109      	bne.n	80132ea <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80132d6:	4b11      	ldr	r3, [pc, #68]	; (801331c <xTimerGenericCommand+0x98>)
 80132d8:	6818      	ldr	r0, [r3, #0]
 80132da:	f107 0110 	add.w	r1, r7, #16
 80132de:	2300      	movs	r3, #0
 80132e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80132e2:	f7fe fb2f 	bl	8011944 <xQueueGenericSend>
 80132e6:	6278      	str	r0, [r7, #36]	; 0x24
 80132e8:	e012      	b.n	8013310 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80132ea:	4b0c      	ldr	r3, [pc, #48]	; (801331c <xTimerGenericCommand+0x98>)
 80132ec:	6818      	ldr	r0, [r3, #0]
 80132ee:	f107 0110 	add.w	r1, r7, #16
 80132f2:	2300      	movs	r3, #0
 80132f4:	2200      	movs	r2, #0
 80132f6:	f7fe fb25 	bl	8011944 <xQueueGenericSend>
 80132fa:	6278      	str	r0, [r7, #36]	; 0x24
 80132fc:	e008      	b.n	8013310 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80132fe:	4b07      	ldr	r3, [pc, #28]	; (801331c <xTimerGenericCommand+0x98>)
 8013300:	6818      	ldr	r0, [r3, #0]
 8013302:	f107 0110 	add.w	r1, r7, #16
 8013306:	2300      	movs	r3, #0
 8013308:	683a      	ldr	r2, [r7, #0]
 801330a:	f7fe fc19 	bl	8011b40 <xQueueGenericSendFromISR>
 801330e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8013310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013312:	4618      	mov	r0, r3
 8013314:	3728      	adds	r7, #40	; 0x28
 8013316:	46bd      	mov	sp, r7
 8013318:	bd80      	pop	{r7, pc}
 801331a:	bf00      	nop
 801331c:	240013a8 	.word	0x240013a8

08013320 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8013320:	b580      	push	{r7, lr}
 8013322:	b088      	sub	sp, #32
 8013324:	af02      	add	r7, sp, #8
 8013326:	6078      	str	r0, [r7, #4]
 8013328:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801332a:	4b22      	ldr	r3, [pc, #136]	; (80133b4 <prvProcessExpiredTimer+0x94>)
 801332c:	681b      	ldr	r3, [r3, #0]
 801332e:	68db      	ldr	r3, [r3, #12]
 8013330:	68db      	ldr	r3, [r3, #12]
 8013332:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013334:	697b      	ldr	r3, [r7, #20]
 8013336:	3304      	adds	r3, #4
 8013338:	4618      	mov	r0, r3
 801333a:	f7fe f99b 	bl	8011674 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801333e:	697b      	ldr	r3, [r7, #20]
 8013340:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013344:	f003 0304 	and.w	r3, r3, #4
 8013348:	2b00      	cmp	r3, #0
 801334a:	d022      	beq.n	8013392 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801334c:	697b      	ldr	r3, [r7, #20]
 801334e:	699a      	ldr	r2, [r3, #24]
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	18d1      	adds	r1, r2, r3
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	683a      	ldr	r2, [r7, #0]
 8013358:	6978      	ldr	r0, [r7, #20]
 801335a:	f000 f8d1 	bl	8013500 <prvInsertTimerInActiveList>
 801335e:	4603      	mov	r3, r0
 8013360:	2b00      	cmp	r3, #0
 8013362:	d01f      	beq.n	80133a4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8013364:	2300      	movs	r3, #0
 8013366:	9300      	str	r3, [sp, #0]
 8013368:	2300      	movs	r3, #0
 801336a:	687a      	ldr	r2, [r7, #4]
 801336c:	2100      	movs	r1, #0
 801336e:	6978      	ldr	r0, [r7, #20]
 8013370:	f7ff ff88 	bl	8013284 <xTimerGenericCommand>
 8013374:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8013376:	693b      	ldr	r3, [r7, #16]
 8013378:	2b00      	cmp	r3, #0
 801337a:	d113      	bne.n	80133a4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 801337c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013380:	f383 8811 	msr	BASEPRI, r3
 8013384:	f3bf 8f6f 	isb	sy
 8013388:	f3bf 8f4f 	dsb	sy
 801338c:	60fb      	str	r3, [r7, #12]
}
 801338e:	bf00      	nop
 8013390:	e7fe      	b.n	8013390 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013392:	697b      	ldr	r3, [r7, #20]
 8013394:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013398:	f023 0301 	bic.w	r3, r3, #1
 801339c:	b2da      	uxtb	r2, r3
 801339e:	697b      	ldr	r3, [r7, #20]
 80133a0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80133a4:	697b      	ldr	r3, [r7, #20]
 80133a6:	6a1b      	ldr	r3, [r3, #32]
 80133a8:	6978      	ldr	r0, [r7, #20]
 80133aa:	4798      	blx	r3
}
 80133ac:	bf00      	nop
 80133ae:	3718      	adds	r7, #24
 80133b0:	46bd      	mov	sp, r7
 80133b2:	bd80      	pop	{r7, pc}
 80133b4:	240013a0 	.word	0x240013a0

080133b8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80133b8:	b580      	push	{r7, lr}
 80133ba:	b084      	sub	sp, #16
 80133bc:	af00      	add	r7, sp, #0
 80133be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80133c0:	f107 0308 	add.w	r3, r7, #8
 80133c4:	4618      	mov	r0, r3
 80133c6:	f000 f857 	bl	8013478 <prvGetNextExpireTime>
 80133ca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80133cc:	68bb      	ldr	r3, [r7, #8]
 80133ce:	4619      	mov	r1, r3
 80133d0:	68f8      	ldr	r0, [r7, #12]
 80133d2:	f000 f803 	bl	80133dc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80133d6:	f000 f8d5 	bl	8013584 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80133da:	e7f1      	b.n	80133c0 <prvTimerTask+0x8>

080133dc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80133dc:	b580      	push	{r7, lr}
 80133de:	b084      	sub	sp, #16
 80133e0:	af00      	add	r7, sp, #0
 80133e2:	6078      	str	r0, [r7, #4]
 80133e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80133e6:	f7ff f98d 	bl	8012704 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80133ea:	f107 0308 	add.w	r3, r7, #8
 80133ee:	4618      	mov	r0, r3
 80133f0:	f000 f866 	bl	80134c0 <prvSampleTimeNow>
 80133f4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80133f6:	68bb      	ldr	r3, [r7, #8]
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	d130      	bne.n	801345e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80133fc:	683b      	ldr	r3, [r7, #0]
 80133fe:	2b00      	cmp	r3, #0
 8013400:	d10a      	bne.n	8013418 <prvProcessTimerOrBlockTask+0x3c>
 8013402:	687a      	ldr	r2, [r7, #4]
 8013404:	68fb      	ldr	r3, [r7, #12]
 8013406:	429a      	cmp	r2, r3
 8013408:	d806      	bhi.n	8013418 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801340a:	f7ff f989 	bl	8012720 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801340e:	68f9      	ldr	r1, [r7, #12]
 8013410:	6878      	ldr	r0, [r7, #4]
 8013412:	f7ff ff85 	bl	8013320 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8013416:	e024      	b.n	8013462 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8013418:	683b      	ldr	r3, [r7, #0]
 801341a:	2b00      	cmp	r3, #0
 801341c:	d008      	beq.n	8013430 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801341e:	4b13      	ldr	r3, [pc, #76]	; (801346c <prvProcessTimerOrBlockTask+0x90>)
 8013420:	681b      	ldr	r3, [r3, #0]
 8013422:	681b      	ldr	r3, [r3, #0]
 8013424:	2b00      	cmp	r3, #0
 8013426:	d101      	bne.n	801342c <prvProcessTimerOrBlockTask+0x50>
 8013428:	2301      	movs	r3, #1
 801342a:	e000      	b.n	801342e <prvProcessTimerOrBlockTask+0x52>
 801342c:	2300      	movs	r3, #0
 801342e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8013430:	4b0f      	ldr	r3, [pc, #60]	; (8013470 <prvProcessTimerOrBlockTask+0x94>)
 8013432:	6818      	ldr	r0, [r3, #0]
 8013434:	687a      	ldr	r2, [r7, #4]
 8013436:	68fb      	ldr	r3, [r7, #12]
 8013438:	1ad3      	subs	r3, r2, r3
 801343a:	683a      	ldr	r2, [r7, #0]
 801343c:	4619      	mov	r1, r3
 801343e:	f7fe fef1 	bl	8012224 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8013442:	f7ff f96d 	bl	8012720 <xTaskResumeAll>
 8013446:	4603      	mov	r3, r0
 8013448:	2b00      	cmp	r3, #0
 801344a:	d10a      	bne.n	8013462 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801344c:	4b09      	ldr	r3, [pc, #36]	; (8013474 <prvProcessTimerOrBlockTask+0x98>)
 801344e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013452:	601a      	str	r2, [r3, #0]
 8013454:	f3bf 8f4f 	dsb	sy
 8013458:	f3bf 8f6f 	isb	sy
}
 801345c:	e001      	b.n	8013462 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801345e:	f7ff f95f 	bl	8012720 <xTaskResumeAll>
}
 8013462:	bf00      	nop
 8013464:	3710      	adds	r7, #16
 8013466:	46bd      	mov	sp, r7
 8013468:	bd80      	pop	{r7, pc}
 801346a:	bf00      	nop
 801346c:	240013a4 	.word	0x240013a4
 8013470:	240013a8 	.word	0x240013a8
 8013474:	e000ed04 	.word	0xe000ed04

08013478 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8013478:	b480      	push	{r7}
 801347a:	b085      	sub	sp, #20
 801347c:	af00      	add	r7, sp, #0
 801347e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8013480:	4b0e      	ldr	r3, [pc, #56]	; (80134bc <prvGetNextExpireTime+0x44>)
 8013482:	681b      	ldr	r3, [r3, #0]
 8013484:	681b      	ldr	r3, [r3, #0]
 8013486:	2b00      	cmp	r3, #0
 8013488:	d101      	bne.n	801348e <prvGetNextExpireTime+0x16>
 801348a:	2201      	movs	r2, #1
 801348c:	e000      	b.n	8013490 <prvGetNextExpireTime+0x18>
 801348e:	2200      	movs	r2, #0
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	681b      	ldr	r3, [r3, #0]
 8013498:	2b00      	cmp	r3, #0
 801349a:	d105      	bne.n	80134a8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801349c:	4b07      	ldr	r3, [pc, #28]	; (80134bc <prvGetNextExpireTime+0x44>)
 801349e:	681b      	ldr	r3, [r3, #0]
 80134a0:	68db      	ldr	r3, [r3, #12]
 80134a2:	681b      	ldr	r3, [r3, #0]
 80134a4:	60fb      	str	r3, [r7, #12]
 80134a6:	e001      	b.n	80134ac <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80134a8:	2300      	movs	r3, #0
 80134aa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80134ac:	68fb      	ldr	r3, [r7, #12]
}
 80134ae:	4618      	mov	r0, r3
 80134b0:	3714      	adds	r7, #20
 80134b2:	46bd      	mov	sp, r7
 80134b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134b8:	4770      	bx	lr
 80134ba:	bf00      	nop
 80134bc:	240013a0 	.word	0x240013a0

080134c0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80134c0:	b580      	push	{r7, lr}
 80134c2:	b084      	sub	sp, #16
 80134c4:	af00      	add	r7, sp, #0
 80134c6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80134c8:	f7ff f9c8 	bl	801285c <xTaskGetTickCount>
 80134cc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80134ce:	4b0b      	ldr	r3, [pc, #44]	; (80134fc <prvSampleTimeNow+0x3c>)
 80134d0:	681b      	ldr	r3, [r3, #0]
 80134d2:	68fa      	ldr	r2, [r7, #12]
 80134d4:	429a      	cmp	r2, r3
 80134d6:	d205      	bcs.n	80134e4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80134d8:	f000 f936 	bl	8013748 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	2201      	movs	r2, #1
 80134e0:	601a      	str	r2, [r3, #0]
 80134e2:	e002      	b.n	80134ea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	2200      	movs	r2, #0
 80134e8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80134ea:	4a04      	ldr	r2, [pc, #16]	; (80134fc <prvSampleTimeNow+0x3c>)
 80134ec:	68fb      	ldr	r3, [r7, #12]
 80134ee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80134f0:	68fb      	ldr	r3, [r7, #12]
}
 80134f2:	4618      	mov	r0, r3
 80134f4:	3710      	adds	r7, #16
 80134f6:	46bd      	mov	sp, r7
 80134f8:	bd80      	pop	{r7, pc}
 80134fa:	bf00      	nop
 80134fc:	240013b0 	.word	0x240013b0

08013500 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8013500:	b580      	push	{r7, lr}
 8013502:	b086      	sub	sp, #24
 8013504:	af00      	add	r7, sp, #0
 8013506:	60f8      	str	r0, [r7, #12]
 8013508:	60b9      	str	r1, [r7, #8]
 801350a:	607a      	str	r2, [r7, #4]
 801350c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801350e:	2300      	movs	r3, #0
 8013510:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8013512:	68fb      	ldr	r3, [r7, #12]
 8013514:	68ba      	ldr	r2, [r7, #8]
 8013516:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013518:	68fb      	ldr	r3, [r7, #12]
 801351a:	68fa      	ldr	r2, [r7, #12]
 801351c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801351e:	68ba      	ldr	r2, [r7, #8]
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	429a      	cmp	r2, r3
 8013524:	d812      	bhi.n	801354c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013526:	687a      	ldr	r2, [r7, #4]
 8013528:	683b      	ldr	r3, [r7, #0]
 801352a:	1ad2      	subs	r2, r2, r3
 801352c:	68fb      	ldr	r3, [r7, #12]
 801352e:	699b      	ldr	r3, [r3, #24]
 8013530:	429a      	cmp	r2, r3
 8013532:	d302      	bcc.n	801353a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8013534:	2301      	movs	r3, #1
 8013536:	617b      	str	r3, [r7, #20]
 8013538:	e01b      	b.n	8013572 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801353a:	4b10      	ldr	r3, [pc, #64]	; (801357c <prvInsertTimerInActiveList+0x7c>)
 801353c:	681a      	ldr	r2, [r3, #0]
 801353e:	68fb      	ldr	r3, [r7, #12]
 8013540:	3304      	adds	r3, #4
 8013542:	4619      	mov	r1, r3
 8013544:	4610      	mov	r0, r2
 8013546:	f7fe f85c 	bl	8011602 <vListInsert>
 801354a:	e012      	b.n	8013572 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801354c:	687a      	ldr	r2, [r7, #4]
 801354e:	683b      	ldr	r3, [r7, #0]
 8013550:	429a      	cmp	r2, r3
 8013552:	d206      	bcs.n	8013562 <prvInsertTimerInActiveList+0x62>
 8013554:	68ba      	ldr	r2, [r7, #8]
 8013556:	683b      	ldr	r3, [r7, #0]
 8013558:	429a      	cmp	r2, r3
 801355a:	d302      	bcc.n	8013562 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801355c:	2301      	movs	r3, #1
 801355e:	617b      	str	r3, [r7, #20]
 8013560:	e007      	b.n	8013572 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013562:	4b07      	ldr	r3, [pc, #28]	; (8013580 <prvInsertTimerInActiveList+0x80>)
 8013564:	681a      	ldr	r2, [r3, #0]
 8013566:	68fb      	ldr	r3, [r7, #12]
 8013568:	3304      	adds	r3, #4
 801356a:	4619      	mov	r1, r3
 801356c:	4610      	mov	r0, r2
 801356e:	f7fe f848 	bl	8011602 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8013572:	697b      	ldr	r3, [r7, #20]
}
 8013574:	4618      	mov	r0, r3
 8013576:	3718      	adds	r7, #24
 8013578:	46bd      	mov	sp, r7
 801357a:	bd80      	pop	{r7, pc}
 801357c:	240013a4 	.word	0x240013a4
 8013580:	240013a0 	.word	0x240013a0

08013584 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8013584:	b580      	push	{r7, lr}
 8013586:	b08e      	sub	sp, #56	; 0x38
 8013588:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801358a:	e0ca      	b.n	8013722 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	2b00      	cmp	r3, #0
 8013590:	da18      	bge.n	80135c4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8013592:	1d3b      	adds	r3, r7, #4
 8013594:	3304      	adds	r3, #4
 8013596:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8013598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801359a:	2b00      	cmp	r3, #0
 801359c:	d10a      	bne.n	80135b4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 801359e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135a2:	f383 8811 	msr	BASEPRI, r3
 80135a6:	f3bf 8f6f 	isb	sy
 80135aa:	f3bf 8f4f 	dsb	sy
 80135ae:	61fb      	str	r3, [r7, #28]
}
 80135b0:	bf00      	nop
 80135b2:	e7fe      	b.n	80135b2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80135b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135b6:	681b      	ldr	r3, [r3, #0]
 80135b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80135ba:	6850      	ldr	r0, [r2, #4]
 80135bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80135be:	6892      	ldr	r2, [r2, #8]
 80135c0:	4611      	mov	r1, r2
 80135c2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	f2c0 80aa 	blt.w	8013720 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80135cc:	68fb      	ldr	r3, [r7, #12]
 80135ce:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80135d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135d2:	695b      	ldr	r3, [r3, #20]
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	d004      	beq.n	80135e2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80135d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135da:	3304      	adds	r3, #4
 80135dc:	4618      	mov	r0, r3
 80135de:	f7fe f849 	bl	8011674 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80135e2:	463b      	mov	r3, r7
 80135e4:	4618      	mov	r0, r3
 80135e6:	f7ff ff6b 	bl	80134c0 <prvSampleTimeNow>
 80135ea:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	2b09      	cmp	r3, #9
 80135f0:	f200 8097 	bhi.w	8013722 <prvProcessReceivedCommands+0x19e>
 80135f4:	a201      	add	r2, pc, #4	; (adr r2, 80135fc <prvProcessReceivedCommands+0x78>)
 80135f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80135fa:	bf00      	nop
 80135fc:	08013625 	.word	0x08013625
 8013600:	08013625 	.word	0x08013625
 8013604:	08013625 	.word	0x08013625
 8013608:	08013699 	.word	0x08013699
 801360c:	080136ad 	.word	0x080136ad
 8013610:	080136f7 	.word	0x080136f7
 8013614:	08013625 	.word	0x08013625
 8013618:	08013625 	.word	0x08013625
 801361c:	08013699 	.word	0x08013699
 8013620:	080136ad 	.word	0x080136ad
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013626:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801362a:	f043 0301 	orr.w	r3, r3, #1
 801362e:	b2da      	uxtb	r2, r3
 8013630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013632:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8013636:	68ba      	ldr	r2, [r7, #8]
 8013638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801363a:	699b      	ldr	r3, [r3, #24]
 801363c:	18d1      	adds	r1, r2, r3
 801363e:	68bb      	ldr	r3, [r7, #8]
 8013640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013642:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013644:	f7ff ff5c 	bl	8013500 <prvInsertTimerInActiveList>
 8013648:	4603      	mov	r3, r0
 801364a:	2b00      	cmp	r3, #0
 801364c:	d069      	beq.n	8013722 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801364e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013650:	6a1b      	ldr	r3, [r3, #32]
 8013652:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013654:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013658:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801365c:	f003 0304 	and.w	r3, r3, #4
 8013660:	2b00      	cmp	r3, #0
 8013662:	d05e      	beq.n	8013722 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8013664:	68ba      	ldr	r2, [r7, #8]
 8013666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013668:	699b      	ldr	r3, [r3, #24]
 801366a:	441a      	add	r2, r3
 801366c:	2300      	movs	r3, #0
 801366e:	9300      	str	r3, [sp, #0]
 8013670:	2300      	movs	r3, #0
 8013672:	2100      	movs	r1, #0
 8013674:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013676:	f7ff fe05 	bl	8013284 <xTimerGenericCommand>
 801367a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 801367c:	6a3b      	ldr	r3, [r7, #32]
 801367e:	2b00      	cmp	r3, #0
 8013680:	d14f      	bne.n	8013722 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8013682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013686:	f383 8811 	msr	BASEPRI, r3
 801368a:	f3bf 8f6f 	isb	sy
 801368e:	f3bf 8f4f 	dsb	sy
 8013692:	61bb      	str	r3, [r7, #24]
}
 8013694:	bf00      	nop
 8013696:	e7fe      	b.n	8013696 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801369a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801369e:	f023 0301 	bic.w	r3, r3, #1
 80136a2:	b2da      	uxtb	r2, r3
 80136a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80136aa:	e03a      	b.n	8013722 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80136ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80136b2:	f043 0301 	orr.w	r3, r3, #1
 80136b6:	b2da      	uxtb	r2, r3
 80136b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80136be:	68ba      	ldr	r2, [r7, #8]
 80136c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136c2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80136c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136c6:	699b      	ldr	r3, [r3, #24]
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	d10a      	bne.n	80136e2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80136cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136d0:	f383 8811 	msr	BASEPRI, r3
 80136d4:	f3bf 8f6f 	isb	sy
 80136d8:	f3bf 8f4f 	dsb	sy
 80136dc:	617b      	str	r3, [r7, #20]
}
 80136de:	bf00      	nop
 80136e0:	e7fe      	b.n	80136e0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80136e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136e4:	699a      	ldr	r2, [r3, #24]
 80136e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136e8:	18d1      	adds	r1, r2, r3
 80136ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80136ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80136f0:	f7ff ff06 	bl	8013500 <prvInsertTimerInActiveList>
					break;
 80136f4:	e015      	b.n	8013722 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80136f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80136fc:	f003 0302 	and.w	r3, r3, #2
 8013700:	2b00      	cmp	r3, #0
 8013702:	d103      	bne.n	801370c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8013704:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013706:	f000 fbfb 	bl	8013f00 <vPortFree>
 801370a:	e00a      	b.n	8013722 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801370c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801370e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013712:	f023 0301 	bic.w	r3, r3, #1
 8013716:	b2da      	uxtb	r2, r3
 8013718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801371a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801371e:	e000      	b.n	8013722 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8013720:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8013722:	4b08      	ldr	r3, [pc, #32]	; (8013744 <prvProcessReceivedCommands+0x1c0>)
 8013724:	681b      	ldr	r3, [r3, #0]
 8013726:	1d39      	adds	r1, r7, #4
 8013728:	2200      	movs	r2, #0
 801372a:	4618      	mov	r0, r3
 801372c:	f7fe faa4 	bl	8011c78 <xQueueReceive>
 8013730:	4603      	mov	r3, r0
 8013732:	2b00      	cmp	r3, #0
 8013734:	f47f af2a 	bne.w	801358c <prvProcessReceivedCommands+0x8>
	}
}
 8013738:	bf00      	nop
 801373a:	bf00      	nop
 801373c:	3730      	adds	r7, #48	; 0x30
 801373e:	46bd      	mov	sp, r7
 8013740:	bd80      	pop	{r7, pc}
 8013742:	bf00      	nop
 8013744:	240013a8 	.word	0x240013a8

08013748 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8013748:	b580      	push	{r7, lr}
 801374a:	b088      	sub	sp, #32
 801374c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801374e:	e048      	b.n	80137e2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013750:	4b2d      	ldr	r3, [pc, #180]	; (8013808 <prvSwitchTimerLists+0xc0>)
 8013752:	681b      	ldr	r3, [r3, #0]
 8013754:	68db      	ldr	r3, [r3, #12]
 8013756:	681b      	ldr	r3, [r3, #0]
 8013758:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801375a:	4b2b      	ldr	r3, [pc, #172]	; (8013808 <prvSwitchTimerLists+0xc0>)
 801375c:	681b      	ldr	r3, [r3, #0]
 801375e:	68db      	ldr	r3, [r3, #12]
 8013760:	68db      	ldr	r3, [r3, #12]
 8013762:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013764:	68fb      	ldr	r3, [r7, #12]
 8013766:	3304      	adds	r3, #4
 8013768:	4618      	mov	r0, r3
 801376a:	f7fd ff83 	bl	8011674 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801376e:	68fb      	ldr	r3, [r7, #12]
 8013770:	6a1b      	ldr	r3, [r3, #32]
 8013772:	68f8      	ldr	r0, [r7, #12]
 8013774:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013776:	68fb      	ldr	r3, [r7, #12]
 8013778:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801377c:	f003 0304 	and.w	r3, r3, #4
 8013780:	2b00      	cmp	r3, #0
 8013782:	d02e      	beq.n	80137e2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8013784:	68fb      	ldr	r3, [r7, #12]
 8013786:	699b      	ldr	r3, [r3, #24]
 8013788:	693a      	ldr	r2, [r7, #16]
 801378a:	4413      	add	r3, r2
 801378c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801378e:	68ba      	ldr	r2, [r7, #8]
 8013790:	693b      	ldr	r3, [r7, #16]
 8013792:	429a      	cmp	r2, r3
 8013794:	d90e      	bls.n	80137b4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8013796:	68fb      	ldr	r3, [r7, #12]
 8013798:	68ba      	ldr	r2, [r7, #8]
 801379a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801379c:	68fb      	ldr	r3, [r7, #12]
 801379e:	68fa      	ldr	r2, [r7, #12]
 80137a0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80137a2:	4b19      	ldr	r3, [pc, #100]	; (8013808 <prvSwitchTimerLists+0xc0>)
 80137a4:	681a      	ldr	r2, [r3, #0]
 80137a6:	68fb      	ldr	r3, [r7, #12]
 80137a8:	3304      	adds	r3, #4
 80137aa:	4619      	mov	r1, r3
 80137ac:	4610      	mov	r0, r2
 80137ae:	f7fd ff28 	bl	8011602 <vListInsert>
 80137b2:	e016      	b.n	80137e2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80137b4:	2300      	movs	r3, #0
 80137b6:	9300      	str	r3, [sp, #0]
 80137b8:	2300      	movs	r3, #0
 80137ba:	693a      	ldr	r2, [r7, #16]
 80137bc:	2100      	movs	r1, #0
 80137be:	68f8      	ldr	r0, [r7, #12]
 80137c0:	f7ff fd60 	bl	8013284 <xTimerGenericCommand>
 80137c4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	d10a      	bne.n	80137e2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80137cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137d0:	f383 8811 	msr	BASEPRI, r3
 80137d4:	f3bf 8f6f 	isb	sy
 80137d8:	f3bf 8f4f 	dsb	sy
 80137dc:	603b      	str	r3, [r7, #0]
}
 80137de:	bf00      	nop
 80137e0:	e7fe      	b.n	80137e0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80137e2:	4b09      	ldr	r3, [pc, #36]	; (8013808 <prvSwitchTimerLists+0xc0>)
 80137e4:	681b      	ldr	r3, [r3, #0]
 80137e6:	681b      	ldr	r3, [r3, #0]
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	d1b1      	bne.n	8013750 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80137ec:	4b06      	ldr	r3, [pc, #24]	; (8013808 <prvSwitchTimerLists+0xc0>)
 80137ee:	681b      	ldr	r3, [r3, #0]
 80137f0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80137f2:	4b06      	ldr	r3, [pc, #24]	; (801380c <prvSwitchTimerLists+0xc4>)
 80137f4:	681b      	ldr	r3, [r3, #0]
 80137f6:	4a04      	ldr	r2, [pc, #16]	; (8013808 <prvSwitchTimerLists+0xc0>)
 80137f8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80137fa:	4a04      	ldr	r2, [pc, #16]	; (801380c <prvSwitchTimerLists+0xc4>)
 80137fc:	697b      	ldr	r3, [r7, #20]
 80137fe:	6013      	str	r3, [r2, #0]
}
 8013800:	bf00      	nop
 8013802:	3718      	adds	r7, #24
 8013804:	46bd      	mov	sp, r7
 8013806:	bd80      	pop	{r7, pc}
 8013808:	240013a0 	.word	0x240013a0
 801380c:	240013a4 	.word	0x240013a4

08013810 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8013810:	b580      	push	{r7, lr}
 8013812:	b082      	sub	sp, #8
 8013814:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8013816:	f000 f985 	bl	8013b24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801381a:	4b15      	ldr	r3, [pc, #84]	; (8013870 <prvCheckForValidListAndQueue+0x60>)
 801381c:	681b      	ldr	r3, [r3, #0]
 801381e:	2b00      	cmp	r3, #0
 8013820:	d120      	bne.n	8013864 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8013822:	4814      	ldr	r0, [pc, #80]	; (8013874 <prvCheckForValidListAndQueue+0x64>)
 8013824:	f7fd fe9c 	bl	8011560 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8013828:	4813      	ldr	r0, [pc, #76]	; (8013878 <prvCheckForValidListAndQueue+0x68>)
 801382a:	f7fd fe99 	bl	8011560 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801382e:	4b13      	ldr	r3, [pc, #76]	; (801387c <prvCheckForValidListAndQueue+0x6c>)
 8013830:	4a10      	ldr	r2, [pc, #64]	; (8013874 <prvCheckForValidListAndQueue+0x64>)
 8013832:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8013834:	4b12      	ldr	r3, [pc, #72]	; (8013880 <prvCheckForValidListAndQueue+0x70>)
 8013836:	4a10      	ldr	r2, [pc, #64]	; (8013878 <prvCheckForValidListAndQueue+0x68>)
 8013838:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801383a:	2300      	movs	r3, #0
 801383c:	9300      	str	r3, [sp, #0]
 801383e:	4b11      	ldr	r3, [pc, #68]	; (8013884 <prvCheckForValidListAndQueue+0x74>)
 8013840:	4a11      	ldr	r2, [pc, #68]	; (8013888 <prvCheckForValidListAndQueue+0x78>)
 8013842:	2110      	movs	r1, #16
 8013844:	200a      	movs	r0, #10
 8013846:	f7fd ffa7 	bl	8011798 <xQueueGenericCreateStatic>
 801384a:	4603      	mov	r3, r0
 801384c:	4a08      	ldr	r2, [pc, #32]	; (8013870 <prvCheckForValidListAndQueue+0x60>)
 801384e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8013850:	4b07      	ldr	r3, [pc, #28]	; (8013870 <prvCheckForValidListAndQueue+0x60>)
 8013852:	681b      	ldr	r3, [r3, #0]
 8013854:	2b00      	cmp	r3, #0
 8013856:	d005      	beq.n	8013864 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8013858:	4b05      	ldr	r3, [pc, #20]	; (8013870 <prvCheckForValidListAndQueue+0x60>)
 801385a:	681b      	ldr	r3, [r3, #0]
 801385c:	490b      	ldr	r1, [pc, #44]	; (801388c <prvCheckForValidListAndQueue+0x7c>)
 801385e:	4618      	mov	r0, r3
 8013860:	f7fe fcb6 	bl	80121d0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013864:	f000 f98e 	bl	8013b84 <vPortExitCritical>
}
 8013868:	bf00      	nop
 801386a:	46bd      	mov	sp, r7
 801386c:	bd80      	pop	{r7, pc}
 801386e:	bf00      	nop
 8013870:	240013a8 	.word	0x240013a8
 8013874:	24001378 	.word	0x24001378
 8013878:	2400138c 	.word	0x2400138c
 801387c:	240013a0 	.word	0x240013a0
 8013880:	240013a4 	.word	0x240013a4
 8013884:	24001454 	.word	0x24001454
 8013888:	240013b4 	.word	0x240013b4
 801388c:	08015418 	.word	0x08015418

08013890 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8013890:	b580      	push	{r7, lr}
 8013892:	b08a      	sub	sp, #40	; 0x28
 8013894:	af00      	add	r7, sp, #0
 8013896:	60f8      	str	r0, [r7, #12]
 8013898:	60b9      	str	r1, [r7, #8]
 801389a:	607a      	str	r2, [r7, #4]
 801389c:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 801389e:	f06f 0301 	mvn.w	r3, #1
 80138a2:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 80138a4:	68fb      	ldr	r3, [r7, #12]
 80138a6:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 80138a8:	68bb      	ldr	r3, [r7, #8]
 80138aa:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80138b0:	4b06      	ldr	r3, [pc, #24]	; (80138cc <xTimerPendFunctionCallFromISR+0x3c>)
 80138b2:	6818      	ldr	r0, [r3, #0]
 80138b4:	f107 0114 	add.w	r1, r7, #20
 80138b8:	2300      	movs	r3, #0
 80138ba:	683a      	ldr	r2, [r7, #0]
 80138bc:	f7fe f940 	bl	8011b40 <xQueueGenericSendFromISR>
 80138c0:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 80138c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80138c4:	4618      	mov	r0, r3
 80138c6:	3728      	adds	r7, #40	; 0x28
 80138c8:	46bd      	mov	sp, r7
 80138ca:	bd80      	pop	{r7, pc}
 80138cc:	240013a8 	.word	0x240013a8

080138d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80138d0:	b480      	push	{r7}
 80138d2:	b085      	sub	sp, #20
 80138d4:	af00      	add	r7, sp, #0
 80138d6:	60f8      	str	r0, [r7, #12]
 80138d8:	60b9      	str	r1, [r7, #8]
 80138da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80138dc:	68fb      	ldr	r3, [r7, #12]
 80138de:	3b04      	subs	r3, #4
 80138e0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80138e2:	68fb      	ldr	r3, [r7, #12]
 80138e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80138e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80138ea:	68fb      	ldr	r3, [r7, #12]
 80138ec:	3b04      	subs	r3, #4
 80138ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80138f0:	68bb      	ldr	r3, [r7, #8]
 80138f2:	f023 0201 	bic.w	r2, r3, #1
 80138f6:	68fb      	ldr	r3, [r7, #12]
 80138f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80138fa:	68fb      	ldr	r3, [r7, #12]
 80138fc:	3b04      	subs	r3, #4
 80138fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8013900:	4a0c      	ldr	r2, [pc, #48]	; (8013934 <pxPortInitialiseStack+0x64>)
 8013902:	68fb      	ldr	r3, [r7, #12]
 8013904:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8013906:	68fb      	ldr	r3, [r7, #12]
 8013908:	3b14      	subs	r3, #20
 801390a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801390c:	687a      	ldr	r2, [r7, #4]
 801390e:	68fb      	ldr	r3, [r7, #12]
 8013910:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8013912:	68fb      	ldr	r3, [r7, #12]
 8013914:	3b04      	subs	r3, #4
 8013916:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8013918:	68fb      	ldr	r3, [r7, #12]
 801391a:	f06f 0202 	mvn.w	r2, #2
 801391e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8013920:	68fb      	ldr	r3, [r7, #12]
 8013922:	3b20      	subs	r3, #32
 8013924:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8013926:	68fb      	ldr	r3, [r7, #12]
}
 8013928:	4618      	mov	r0, r3
 801392a:	3714      	adds	r7, #20
 801392c:	46bd      	mov	sp, r7
 801392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013932:	4770      	bx	lr
 8013934:	08013939 	.word	0x08013939

08013938 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8013938:	b480      	push	{r7}
 801393a:	b085      	sub	sp, #20
 801393c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801393e:	2300      	movs	r3, #0
 8013940:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8013942:	4b12      	ldr	r3, [pc, #72]	; (801398c <prvTaskExitError+0x54>)
 8013944:	681b      	ldr	r3, [r3, #0]
 8013946:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801394a:	d00a      	beq.n	8013962 <prvTaskExitError+0x2a>
	__asm volatile
 801394c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013950:	f383 8811 	msr	BASEPRI, r3
 8013954:	f3bf 8f6f 	isb	sy
 8013958:	f3bf 8f4f 	dsb	sy
 801395c:	60fb      	str	r3, [r7, #12]
}
 801395e:	bf00      	nop
 8013960:	e7fe      	b.n	8013960 <prvTaskExitError+0x28>
	__asm volatile
 8013962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013966:	f383 8811 	msr	BASEPRI, r3
 801396a:	f3bf 8f6f 	isb	sy
 801396e:	f3bf 8f4f 	dsb	sy
 8013972:	60bb      	str	r3, [r7, #8]
}
 8013974:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8013976:	bf00      	nop
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	2b00      	cmp	r3, #0
 801397c:	d0fc      	beq.n	8013978 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801397e:	bf00      	nop
 8013980:	bf00      	nop
 8013982:	3714      	adds	r7, #20
 8013984:	46bd      	mov	sp, r7
 8013986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801398a:	4770      	bx	lr
 801398c:	24000098 	.word	0x24000098

08013990 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8013990:	4b07      	ldr	r3, [pc, #28]	; (80139b0 <pxCurrentTCBConst2>)
 8013992:	6819      	ldr	r1, [r3, #0]
 8013994:	6808      	ldr	r0, [r1, #0]
 8013996:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801399a:	f380 8809 	msr	PSP, r0
 801399e:	f3bf 8f6f 	isb	sy
 80139a2:	f04f 0000 	mov.w	r0, #0
 80139a6:	f380 8811 	msr	BASEPRI, r0
 80139aa:	4770      	bx	lr
 80139ac:	f3af 8000 	nop.w

080139b0 <pxCurrentTCBConst2>:
 80139b0:	24000e78 	.word	0x24000e78
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80139b4:	bf00      	nop
 80139b6:	bf00      	nop

080139b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80139b8:	4808      	ldr	r0, [pc, #32]	; (80139dc <prvPortStartFirstTask+0x24>)
 80139ba:	6800      	ldr	r0, [r0, #0]
 80139bc:	6800      	ldr	r0, [r0, #0]
 80139be:	f380 8808 	msr	MSP, r0
 80139c2:	f04f 0000 	mov.w	r0, #0
 80139c6:	f380 8814 	msr	CONTROL, r0
 80139ca:	b662      	cpsie	i
 80139cc:	b661      	cpsie	f
 80139ce:	f3bf 8f4f 	dsb	sy
 80139d2:	f3bf 8f6f 	isb	sy
 80139d6:	df00      	svc	0
 80139d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80139da:	bf00      	nop
 80139dc:	e000ed08 	.word	0xe000ed08

080139e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80139e0:	b580      	push	{r7, lr}
 80139e2:	b086      	sub	sp, #24
 80139e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80139e6:	4b46      	ldr	r3, [pc, #280]	; (8013b00 <xPortStartScheduler+0x120>)
 80139e8:	681b      	ldr	r3, [r3, #0]
 80139ea:	4a46      	ldr	r2, [pc, #280]	; (8013b04 <xPortStartScheduler+0x124>)
 80139ec:	4293      	cmp	r3, r2
 80139ee:	d10a      	bne.n	8013a06 <xPortStartScheduler+0x26>
	__asm volatile
 80139f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139f4:	f383 8811 	msr	BASEPRI, r3
 80139f8:	f3bf 8f6f 	isb	sy
 80139fc:	f3bf 8f4f 	dsb	sy
 8013a00:	613b      	str	r3, [r7, #16]
}
 8013a02:	bf00      	nop
 8013a04:	e7fe      	b.n	8013a04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8013a06:	4b3e      	ldr	r3, [pc, #248]	; (8013b00 <xPortStartScheduler+0x120>)
 8013a08:	681b      	ldr	r3, [r3, #0]
 8013a0a:	4a3f      	ldr	r2, [pc, #252]	; (8013b08 <xPortStartScheduler+0x128>)
 8013a0c:	4293      	cmp	r3, r2
 8013a0e:	d10a      	bne.n	8013a26 <xPortStartScheduler+0x46>
	__asm volatile
 8013a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a14:	f383 8811 	msr	BASEPRI, r3
 8013a18:	f3bf 8f6f 	isb	sy
 8013a1c:	f3bf 8f4f 	dsb	sy
 8013a20:	60fb      	str	r3, [r7, #12]
}
 8013a22:	bf00      	nop
 8013a24:	e7fe      	b.n	8013a24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8013a26:	4b39      	ldr	r3, [pc, #228]	; (8013b0c <xPortStartScheduler+0x12c>)
 8013a28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8013a2a:	697b      	ldr	r3, [r7, #20]
 8013a2c:	781b      	ldrb	r3, [r3, #0]
 8013a2e:	b2db      	uxtb	r3, r3
 8013a30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8013a32:	697b      	ldr	r3, [r7, #20]
 8013a34:	22ff      	movs	r2, #255	; 0xff
 8013a36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8013a38:	697b      	ldr	r3, [r7, #20]
 8013a3a:	781b      	ldrb	r3, [r3, #0]
 8013a3c:	b2db      	uxtb	r3, r3
 8013a3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8013a40:	78fb      	ldrb	r3, [r7, #3]
 8013a42:	b2db      	uxtb	r3, r3
 8013a44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8013a48:	b2da      	uxtb	r2, r3
 8013a4a:	4b31      	ldr	r3, [pc, #196]	; (8013b10 <xPortStartScheduler+0x130>)
 8013a4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8013a4e:	4b31      	ldr	r3, [pc, #196]	; (8013b14 <xPortStartScheduler+0x134>)
 8013a50:	2207      	movs	r2, #7
 8013a52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013a54:	e009      	b.n	8013a6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8013a56:	4b2f      	ldr	r3, [pc, #188]	; (8013b14 <xPortStartScheduler+0x134>)
 8013a58:	681b      	ldr	r3, [r3, #0]
 8013a5a:	3b01      	subs	r3, #1
 8013a5c:	4a2d      	ldr	r2, [pc, #180]	; (8013b14 <xPortStartScheduler+0x134>)
 8013a5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8013a60:	78fb      	ldrb	r3, [r7, #3]
 8013a62:	b2db      	uxtb	r3, r3
 8013a64:	005b      	lsls	r3, r3, #1
 8013a66:	b2db      	uxtb	r3, r3
 8013a68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013a6a:	78fb      	ldrb	r3, [r7, #3]
 8013a6c:	b2db      	uxtb	r3, r3
 8013a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013a72:	2b80      	cmp	r3, #128	; 0x80
 8013a74:	d0ef      	beq.n	8013a56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8013a76:	4b27      	ldr	r3, [pc, #156]	; (8013b14 <xPortStartScheduler+0x134>)
 8013a78:	681b      	ldr	r3, [r3, #0]
 8013a7a:	f1c3 0307 	rsb	r3, r3, #7
 8013a7e:	2b04      	cmp	r3, #4
 8013a80:	d00a      	beq.n	8013a98 <xPortStartScheduler+0xb8>
	__asm volatile
 8013a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a86:	f383 8811 	msr	BASEPRI, r3
 8013a8a:	f3bf 8f6f 	isb	sy
 8013a8e:	f3bf 8f4f 	dsb	sy
 8013a92:	60bb      	str	r3, [r7, #8]
}
 8013a94:	bf00      	nop
 8013a96:	e7fe      	b.n	8013a96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8013a98:	4b1e      	ldr	r3, [pc, #120]	; (8013b14 <xPortStartScheduler+0x134>)
 8013a9a:	681b      	ldr	r3, [r3, #0]
 8013a9c:	021b      	lsls	r3, r3, #8
 8013a9e:	4a1d      	ldr	r2, [pc, #116]	; (8013b14 <xPortStartScheduler+0x134>)
 8013aa0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8013aa2:	4b1c      	ldr	r3, [pc, #112]	; (8013b14 <xPortStartScheduler+0x134>)
 8013aa4:	681b      	ldr	r3, [r3, #0]
 8013aa6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8013aaa:	4a1a      	ldr	r2, [pc, #104]	; (8013b14 <xPortStartScheduler+0x134>)
 8013aac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	b2da      	uxtb	r2, r3
 8013ab2:	697b      	ldr	r3, [r7, #20]
 8013ab4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8013ab6:	4b18      	ldr	r3, [pc, #96]	; (8013b18 <xPortStartScheduler+0x138>)
 8013ab8:	681b      	ldr	r3, [r3, #0]
 8013aba:	4a17      	ldr	r2, [pc, #92]	; (8013b18 <xPortStartScheduler+0x138>)
 8013abc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8013ac0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8013ac2:	4b15      	ldr	r3, [pc, #84]	; (8013b18 <xPortStartScheduler+0x138>)
 8013ac4:	681b      	ldr	r3, [r3, #0]
 8013ac6:	4a14      	ldr	r2, [pc, #80]	; (8013b18 <xPortStartScheduler+0x138>)
 8013ac8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8013acc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8013ace:	f000 f8dd 	bl	8013c8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8013ad2:	4b12      	ldr	r3, [pc, #72]	; (8013b1c <xPortStartScheduler+0x13c>)
 8013ad4:	2200      	movs	r2, #0
 8013ad6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8013ad8:	f000 f8fc 	bl	8013cd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8013adc:	4b10      	ldr	r3, [pc, #64]	; (8013b20 <xPortStartScheduler+0x140>)
 8013ade:	681b      	ldr	r3, [r3, #0]
 8013ae0:	4a0f      	ldr	r2, [pc, #60]	; (8013b20 <xPortStartScheduler+0x140>)
 8013ae2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8013ae6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8013ae8:	f7ff ff66 	bl	80139b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8013aec:	f7fe ff80 	bl	80129f0 <vTaskSwitchContext>
	prvTaskExitError();
 8013af0:	f7ff ff22 	bl	8013938 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8013af4:	2300      	movs	r3, #0
}
 8013af6:	4618      	mov	r0, r3
 8013af8:	3718      	adds	r7, #24
 8013afa:	46bd      	mov	sp, r7
 8013afc:	bd80      	pop	{r7, pc}
 8013afe:	bf00      	nop
 8013b00:	e000ed00 	.word	0xe000ed00
 8013b04:	410fc271 	.word	0x410fc271
 8013b08:	410fc270 	.word	0x410fc270
 8013b0c:	e000e400 	.word	0xe000e400
 8013b10:	240014a4 	.word	0x240014a4
 8013b14:	240014a8 	.word	0x240014a8
 8013b18:	e000ed20 	.word	0xe000ed20
 8013b1c:	24000098 	.word	0x24000098
 8013b20:	e000ef34 	.word	0xe000ef34

08013b24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8013b24:	b480      	push	{r7}
 8013b26:	b083      	sub	sp, #12
 8013b28:	af00      	add	r7, sp, #0
	__asm volatile
 8013b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b2e:	f383 8811 	msr	BASEPRI, r3
 8013b32:	f3bf 8f6f 	isb	sy
 8013b36:	f3bf 8f4f 	dsb	sy
 8013b3a:	607b      	str	r3, [r7, #4]
}
 8013b3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8013b3e:	4b0f      	ldr	r3, [pc, #60]	; (8013b7c <vPortEnterCritical+0x58>)
 8013b40:	681b      	ldr	r3, [r3, #0]
 8013b42:	3301      	adds	r3, #1
 8013b44:	4a0d      	ldr	r2, [pc, #52]	; (8013b7c <vPortEnterCritical+0x58>)
 8013b46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8013b48:	4b0c      	ldr	r3, [pc, #48]	; (8013b7c <vPortEnterCritical+0x58>)
 8013b4a:	681b      	ldr	r3, [r3, #0]
 8013b4c:	2b01      	cmp	r3, #1
 8013b4e:	d10f      	bne.n	8013b70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8013b50:	4b0b      	ldr	r3, [pc, #44]	; (8013b80 <vPortEnterCritical+0x5c>)
 8013b52:	681b      	ldr	r3, [r3, #0]
 8013b54:	b2db      	uxtb	r3, r3
 8013b56:	2b00      	cmp	r3, #0
 8013b58:	d00a      	beq.n	8013b70 <vPortEnterCritical+0x4c>
	__asm volatile
 8013b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b5e:	f383 8811 	msr	BASEPRI, r3
 8013b62:	f3bf 8f6f 	isb	sy
 8013b66:	f3bf 8f4f 	dsb	sy
 8013b6a:	603b      	str	r3, [r7, #0]
}
 8013b6c:	bf00      	nop
 8013b6e:	e7fe      	b.n	8013b6e <vPortEnterCritical+0x4a>
	}
}
 8013b70:	bf00      	nop
 8013b72:	370c      	adds	r7, #12
 8013b74:	46bd      	mov	sp, r7
 8013b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b7a:	4770      	bx	lr
 8013b7c:	24000098 	.word	0x24000098
 8013b80:	e000ed04 	.word	0xe000ed04

08013b84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8013b84:	b480      	push	{r7}
 8013b86:	b083      	sub	sp, #12
 8013b88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8013b8a:	4b12      	ldr	r3, [pc, #72]	; (8013bd4 <vPortExitCritical+0x50>)
 8013b8c:	681b      	ldr	r3, [r3, #0]
 8013b8e:	2b00      	cmp	r3, #0
 8013b90:	d10a      	bne.n	8013ba8 <vPortExitCritical+0x24>
	__asm volatile
 8013b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b96:	f383 8811 	msr	BASEPRI, r3
 8013b9a:	f3bf 8f6f 	isb	sy
 8013b9e:	f3bf 8f4f 	dsb	sy
 8013ba2:	607b      	str	r3, [r7, #4]
}
 8013ba4:	bf00      	nop
 8013ba6:	e7fe      	b.n	8013ba6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8013ba8:	4b0a      	ldr	r3, [pc, #40]	; (8013bd4 <vPortExitCritical+0x50>)
 8013baa:	681b      	ldr	r3, [r3, #0]
 8013bac:	3b01      	subs	r3, #1
 8013bae:	4a09      	ldr	r2, [pc, #36]	; (8013bd4 <vPortExitCritical+0x50>)
 8013bb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8013bb2:	4b08      	ldr	r3, [pc, #32]	; (8013bd4 <vPortExitCritical+0x50>)
 8013bb4:	681b      	ldr	r3, [r3, #0]
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d105      	bne.n	8013bc6 <vPortExitCritical+0x42>
 8013bba:	2300      	movs	r3, #0
 8013bbc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013bbe:	683b      	ldr	r3, [r7, #0]
 8013bc0:	f383 8811 	msr	BASEPRI, r3
}
 8013bc4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8013bc6:	bf00      	nop
 8013bc8:	370c      	adds	r7, #12
 8013bca:	46bd      	mov	sp, r7
 8013bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bd0:	4770      	bx	lr
 8013bd2:	bf00      	nop
 8013bd4:	24000098 	.word	0x24000098
	...

08013be0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8013be0:	f3ef 8009 	mrs	r0, PSP
 8013be4:	f3bf 8f6f 	isb	sy
 8013be8:	4b15      	ldr	r3, [pc, #84]	; (8013c40 <pxCurrentTCBConst>)
 8013bea:	681a      	ldr	r2, [r3, #0]
 8013bec:	f01e 0f10 	tst.w	lr, #16
 8013bf0:	bf08      	it	eq
 8013bf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8013bf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bfa:	6010      	str	r0, [r2, #0]
 8013bfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8013c00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8013c04:	f380 8811 	msr	BASEPRI, r0
 8013c08:	f3bf 8f4f 	dsb	sy
 8013c0c:	f3bf 8f6f 	isb	sy
 8013c10:	f7fe feee 	bl	80129f0 <vTaskSwitchContext>
 8013c14:	f04f 0000 	mov.w	r0, #0
 8013c18:	f380 8811 	msr	BASEPRI, r0
 8013c1c:	bc09      	pop	{r0, r3}
 8013c1e:	6819      	ldr	r1, [r3, #0]
 8013c20:	6808      	ldr	r0, [r1, #0]
 8013c22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c26:	f01e 0f10 	tst.w	lr, #16
 8013c2a:	bf08      	it	eq
 8013c2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8013c30:	f380 8809 	msr	PSP, r0
 8013c34:	f3bf 8f6f 	isb	sy
 8013c38:	4770      	bx	lr
 8013c3a:	bf00      	nop
 8013c3c:	f3af 8000 	nop.w

08013c40 <pxCurrentTCBConst>:
 8013c40:	24000e78 	.word	0x24000e78
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8013c44:	bf00      	nop
 8013c46:	bf00      	nop

08013c48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8013c48:	b580      	push	{r7, lr}
 8013c4a:	b082      	sub	sp, #8
 8013c4c:	af00      	add	r7, sp, #0
	__asm volatile
 8013c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c52:	f383 8811 	msr	BASEPRI, r3
 8013c56:	f3bf 8f6f 	isb	sy
 8013c5a:	f3bf 8f4f 	dsb	sy
 8013c5e:	607b      	str	r3, [r7, #4]
}
 8013c60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8013c62:	f7fe fe0b 	bl	801287c <xTaskIncrementTick>
 8013c66:	4603      	mov	r3, r0
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	d003      	beq.n	8013c74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8013c6c:	4b06      	ldr	r3, [pc, #24]	; (8013c88 <xPortSysTickHandler+0x40>)
 8013c6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013c72:	601a      	str	r2, [r3, #0]
 8013c74:	2300      	movs	r3, #0
 8013c76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013c78:	683b      	ldr	r3, [r7, #0]
 8013c7a:	f383 8811 	msr	BASEPRI, r3
}
 8013c7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8013c80:	bf00      	nop
 8013c82:	3708      	adds	r7, #8
 8013c84:	46bd      	mov	sp, r7
 8013c86:	bd80      	pop	{r7, pc}
 8013c88:	e000ed04 	.word	0xe000ed04

08013c8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8013c8c:	b480      	push	{r7}
 8013c8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8013c90:	4b0b      	ldr	r3, [pc, #44]	; (8013cc0 <vPortSetupTimerInterrupt+0x34>)
 8013c92:	2200      	movs	r2, #0
 8013c94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8013c96:	4b0b      	ldr	r3, [pc, #44]	; (8013cc4 <vPortSetupTimerInterrupt+0x38>)
 8013c98:	2200      	movs	r2, #0
 8013c9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8013c9c:	4b0a      	ldr	r3, [pc, #40]	; (8013cc8 <vPortSetupTimerInterrupt+0x3c>)
 8013c9e:	681b      	ldr	r3, [r3, #0]
 8013ca0:	4a0a      	ldr	r2, [pc, #40]	; (8013ccc <vPortSetupTimerInterrupt+0x40>)
 8013ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8013ca6:	099b      	lsrs	r3, r3, #6
 8013ca8:	4a09      	ldr	r2, [pc, #36]	; (8013cd0 <vPortSetupTimerInterrupt+0x44>)
 8013caa:	3b01      	subs	r3, #1
 8013cac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8013cae:	4b04      	ldr	r3, [pc, #16]	; (8013cc0 <vPortSetupTimerInterrupt+0x34>)
 8013cb0:	2207      	movs	r2, #7
 8013cb2:	601a      	str	r2, [r3, #0]
}
 8013cb4:	bf00      	nop
 8013cb6:	46bd      	mov	sp, r7
 8013cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cbc:	4770      	bx	lr
 8013cbe:	bf00      	nop
 8013cc0:	e000e010 	.word	0xe000e010
 8013cc4:	e000e018 	.word	0xe000e018
 8013cc8:	24000088 	.word	0x24000088
 8013ccc:	10624dd3 	.word	0x10624dd3
 8013cd0:	e000e014 	.word	0xe000e014

08013cd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8013cd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8013ce4 <vPortEnableVFP+0x10>
 8013cd8:	6801      	ldr	r1, [r0, #0]
 8013cda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8013cde:	6001      	str	r1, [r0, #0]
 8013ce0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8013ce2:	bf00      	nop
 8013ce4:	e000ed88 	.word	0xe000ed88

08013ce8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8013ce8:	b480      	push	{r7}
 8013cea:	b085      	sub	sp, #20
 8013cec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8013cee:	f3ef 8305 	mrs	r3, IPSR
 8013cf2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8013cf4:	68fb      	ldr	r3, [r7, #12]
 8013cf6:	2b0f      	cmp	r3, #15
 8013cf8:	d914      	bls.n	8013d24 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8013cfa:	4a17      	ldr	r2, [pc, #92]	; (8013d58 <vPortValidateInterruptPriority+0x70>)
 8013cfc:	68fb      	ldr	r3, [r7, #12]
 8013cfe:	4413      	add	r3, r2
 8013d00:	781b      	ldrb	r3, [r3, #0]
 8013d02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8013d04:	4b15      	ldr	r3, [pc, #84]	; (8013d5c <vPortValidateInterruptPriority+0x74>)
 8013d06:	781b      	ldrb	r3, [r3, #0]
 8013d08:	7afa      	ldrb	r2, [r7, #11]
 8013d0a:	429a      	cmp	r2, r3
 8013d0c:	d20a      	bcs.n	8013d24 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8013d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d12:	f383 8811 	msr	BASEPRI, r3
 8013d16:	f3bf 8f6f 	isb	sy
 8013d1a:	f3bf 8f4f 	dsb	sy
 8013d1e:	607b      	str	r3, [r7, #4]
}
 8013d20:	bf00      	nop
 8013d22:	e7fe      	b.n	8013d22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8013d24:	4b0e      	ldr	r3, [pc, #56]	; (8013d60 <vPortValidateInterruptPriority+0x78>)
 8013d26:	681b      	ldr	r3, [r3, #0]
 8013d28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8013d2c:	4b0d      	ldr	r3, [pc, #52]	; (8013d64 <vPortValidateInterruptPriority+0x7c>)
 8013d2e:	681b      	ldr	r3, [r3, #0]
 8013d30:	429a      	cmp	r2, r3
 8013d32:	d90a      	bls.n	8013d4a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8013d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d38:	f383 8811 	msr	BASEPRI, r3
 8013d3c:	f3bf 8f6f 	isb	sy
 8013d40:	f3bf 8f4f 	dsb	sy
 8013d44:	603b      	str	r3, [r7, #0]
}
 8013d46:	bf00      	nop
 8013d48:	e7fe      	b.n	8013d48 <vPortValidateInterruptPriority+0x60>
	}
 8013d4a:	bf00      	nop
 8013d4c:	3714      	adds	r7, #20
 8013d4e:	46bd      	mov	sp, r7
 8013d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d54:	4770      	bx	lr
 8013d56:	bf00      	nop
 8013d58:	e000e3f0 	.word	0xe000e3f0
 8013d5c:	240014a4 	.word	0x240014a4
 8013d60:	e000ed0c 	.word	0xe000ed0c
 8013d64:	240014a8 	.word	0x240014a8

08013d68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8013d68:	b580      	push	{r7, lr}
 8013d6a:	b08a      	sub	sp, #40	; 0x28
 8013d6c:	af00      	add	r7, sp, #0
 8013d6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8013d70:	2300      	movs	r3, #0
 8013d72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8013d74:	f7fe fcc6 	bl	8012704 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8013d78:	4b5b      	ldr	r3, [pc, #364]	; (8013ee8 <pvPortMalloc+0x180>)
 8013d7a:	681b      	ldr	r3, [r3, #0]
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	d101      	bne.n	8013d84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8013d80:	f000 f920 	bl	8013fc4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8013d84:	4b59      	ldr	r3, [pc, #356]	; (8013eec <pvPortMalloc+0x184>)
 8013d86:	681a      	ldr	r2, [r3, #0]
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	4013      	ands	r3, r2
 8013d8c:	2b00      	cmp	r3, #0
 8013d8e:	f040 8093 	bne.w	8013eb8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	d01d      	beq.n	8013dd4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8013d98:	2208      	movs	r2, #8
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	4413      	add	r3, r2
 8013d9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8013da0:	687b      	ldr	r3, [r7, #4]
 8013da2:	f003 0307 	and.w	r3, r3, #7
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	d014      	beq.n	8013dd4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	f023 0307 	bic.w	r3, r3, #7
 8013db0:	3308      	adds	r3, #8
 8013db2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	f003 0307 	and.w	r3, r3, #7
 8013dba:	2b00      	cmp	r3, #0
 8013dbc:	d00a      	beq.n	8013dd4 <pvPortMalloc+0x6c>
	__asm volatile
 8013dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013dc2:	f383 8811 	msr	BASEPRI, r3
 8013dc6:	f3bf 8f6f 	isb	sy
 8013dca:	f3bf 8f4f 	dsb	sy
 8013dce:	617b      	str	r3, [r7, #20]
}
 8013dd0:	bf00      	nop
 8013dd2:	e7fe      	b.n	8013dd2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8013dd4:	687b      	ldr	r3, [r7, #4]
 8013dd6:	2b00      	cmp	r3, #0
 8013dd8:	d06e      	beq.n	8013eb8 <pvPortMalloc+0x150>
 8013dda:	4b45      	ldr	r3, [pc, #276]	; (8013ef0 <pvPortMalloc+0x188>)
 8013ddc:	681b      	ldr	r3, [r3, #0]
 8013dde:	687a      	ldr	r2, [r7, #4]
 8013de0:	429a      	cmp	r2, r3
 8013de2:	d869      	bhi.n	8013eb8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8013de4:	4b43      	ldr	r3, [pc, #268]	; (8013ef4 <pvPortMalloc+0x18c>)
 8013de6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8013de8:	4b42      	ldr	r3, [pc, #264]	; (8013ef4 <pvPortMalloc+0x18c>)
 8013dea:	681b      	ldr	r3, [r3, #0]
 8013dec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013dee:	e004      	b.n	8013dfa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8013df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013df2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8013df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013df6:	681b      	ldr	r3, [r3, #0]
 8013df8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dfc:	685b      	ldr	r3, [r3, #4]
 8013dfe:	687a      	ldr	r2, [r7, #4]
 8013e00:	429a      	cmp	r2, r3
 8013e02:	d903      	bls.n	8013e0c <pvPortMalloc+0xa4>
 8013e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e06:	681b      	ldr	r3, [r3, #0]
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	d1f1      	bne.n	8013df0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8013e0c:	4b36      	ldr	r3, [pc, #216]	; (8013ee8 <pvPortMalloc+0x180>)
 8013e0e:	681b      	ldr	r3, [r3, #0]
 8013e10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013e12:	429a      	cmp	r2, r3
 8013e14:	d050      	beq.n	8013eb8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8013e16:	6a3b      	ldr	r3, [r7, #32]
 8013e18:	681b      	ldr	r3, [r3, #0]
 8013e1a:	2208      	movs	r2, #8
 8013e1c:	4413      	add	r3, r2
 8013e1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8013e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e22:	681a      	ldr	r2, [r3, #0]
 8013e24:	6a3b      	ldr	r3, [r7, #32]
 8013e26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8013e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e2a:	685a      	ldr	r2, [r3, #4]
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	1ad2      	subs	r2, r2, r3
 8013e30:	2308      	movs	r3, #8
 8013e32:	005b      	lsls	r3, r3, #1
 8013e34:	429a      	cmp	r2, r3
 8013e36:	d91f      	bls.n	8013e78 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8013e38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	4413      	add	r3, r2
 8013e3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013e40:	69bb      	ldr	r3, [r7, #24]
 8013e42:	f003 0307 	and.w	r3, r3, #7
 8013e46:	2b00      	cmp	r3, #0
 8013e48:	d00a      	beq.n	8013e60 <pvPortMalloc+0xf8>
	__asm volatile
 8013e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e4e:	f383 8811 	msr	BASEPRI, r3
 8013e52:	f3bf 8f6f 	isb	sy
 8013e56:	f3bf 8f4f 	dsb	sy
 8013e5a:	613b      	str	r3, [r7, #16]
}
 8013e5c:	bf00      	nop
 8013e5e:	e7fe      	b.n	8013e5e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8013e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e62:	685a      	ldr	r2, [r3, #4]
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	1ad2      	subs	r2, r2, r3
 8013e68:	69bb      	ldr	r3, [r7, #24]
 8013e6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8013e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e6e:	687a      	ldr	r2, [r7, #4]
 8013e70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8013e72:	69b8      	ldr	r0, [r7, #24]
 8013e74:	f000 f908 	bl	8014088 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8013e78:	4b1d      	ldr	r3, [pc, #116]	; (8013ef0 <pvPortMalloc+0x188>)
 8013e7a:	681a      	ldr	r2, [r3, #0]
 8013e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e7e:	685b      	ldr	r3, [r3, #4]
 8013e80:	1ad3      	subs	r3, r2, r3
 8013e82:	4a1b      	ldr	r2, [pc, #108]	; (8013ef0 <pvPortMalloc+0x188>)
 8013e84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8013e86:	4b1a      	ldr	r3, [pc, #104]	; (8013ef0 <pvPortMalloc+0x188>)
 8013e88:	681a      	ldr	r2, [r3, #0]
 8013e8a:	4b1b      	ldr	r3, [pc, #108]	; (8013ef8 <pvPortMalloc+0x190>)
 8013e8c:	681b      	ldr	r3, [r3, #0]
 8013e8e:	429a      	cmp	r2, r3
 8013e90:	d203      	bcs.n	8013e9a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8013e92:	4b17      	ldr	r3, [pc, #92]	; (8013ef0 <pvPortMalloc+0x188>)
 8013e94:	681b      	ldr	r3, [r3, #0]
 8013e96:	4a18      	ldr	r2, [pc, #96]	; (8013ef8 <pvPortMalloc+0x190>)
 8013e98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8013e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e9c:	685a      	ldr	r2, [r3, #4]
 8013e9e:	4b13      	ldr	r3, [pc, #76]	; (8013eec <pvPortMalloc+0x184>)
 8013ea0:	681b      	ldr	r3, [r3, #0]
 8013ea2:	431a      	orrs	r2, r3
 8013ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ea6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8013ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013eaa:	2200      	movs	r2, #0
 8013eac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8013eae:	4b13      	ldr	r3, [pc, #76]	; (8013efc <pvPortMalloc+0x194>)
 8013eb0:	681b      	ldr	r3, [r3, #0]
 8013eb2:	3301      	adds	r3, #1
 8013eb4:	4a11      	ldr	r2, [pc, #68]	; (8013efc <pvPortMalloc+0x194>)
 8013eb6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8013eb8:	f7fe fc32 	bl	8012720 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8013ebc:	69fb      	ldr	r3, [r7, #28]
 8013ebe:	f003 0307 	and.w	r3, r3, #7
 8013ec2:	2b00      	cmp	r3, #0
 8013ec4:	d00a      	beq.n	8013edc <pvPortMalloc+0x174>
	__asm volatile
 8013ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013eca:	f383 8811 	msr	BASEPRI, r3
 8013ece:	f3bf 8f6f 	isb	sy
 8013ed2:	f3bf 8f4f 	dsb	sy
 8013ed6:	60fb      	str	r3, [r7, #12]
}
 8013ed8:	bf00      	nop
 8013eda:	e7fe      	b.n	8013eda <pvPortMalloc+0x172>
	return pvReturn;
 8013edc:	69fb      	ldr	r3, [r7, #28]
}
 8013ede:	4618      	mov	r0, r3
 8013ee0:	3728      	adds	r7, #40	; 0x28
 8013ee2:	46bd      	mov	sp, r7
 8013ee4:	bd80      	pop	{r7, pc}
 8013ee6:	bf00      	nop
 8013ee8:	240050b4 	.word	0x240050b4
 8013eec:	240050c8 	.word	0x240050c8
 8013ef0:	240050b8 	.word	0x240050b8
 8013ef4:	240050ac 	.word	0x240050ac
 8013ef8:	240050bc 	.word	0x240050bc
 8013efc:	240050c0 	.word	0x240050c0

08013f00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8013f00:	b580      	push	{r7, lr}
 8013f02:	b086      	sub	sp, #24
 8013f04:	af00      	add	r7, sp, #0
 8013f06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8013f08:	687b      	ldr	r3, [r7, #4]
 8013f0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	d04d      	beq.n	8013fae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8013f12:	2308      	movs	r3, #8
 8013f14:	425b      	negs	r3, r3
 8013f16:	697a      	ldr	r2, [r7, #20]
 8013f18:	4413      	add	r3, r2
 8013f1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8013f1c:	697b      	ldr	r3, [r7, #20]
 8013f1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8013f20:	693b      	ldr	r3, [r7, #16]
 8013f22:	685a      	ldr	r2, [r3, #4]
 8013f24:	4b24      	ldr	r3, [pc, #144]	; (8013fb8 <vPortFree+0xb8>)
 8013f26:	681b      	ldr	r3, [r3, #0]
 8013f28:	4013      	ands	r3, r2
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	d10a      	bne.n	8013f44 <vPortFree+0x44>
	__asm volatile
 8013f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f32:	f383 8811 	msr	BASEPRI, r3
 8013f36:	f3bf 8f6f 	isb	sy
 8013f3a:	f3bf 8f4f 	dsb	sy
 8013f3e:	60fb      	str	r3, [r7, #12]
}
 8013f40:	bf00      	nop
 8013f42:	e7fe      	b.n	8013f42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8013f44:	693b      	ldr	r3, [r7, #16]
 8013f46:	681b      	ldr	r3, [r3, #0]
 8013f48:	2b00      	cmp	r3, #0
 8013f4a:	d00a      	beq.n	8013f62 <vPortFree+0x62>
	__asm volatile
 8013f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f50:	f383 8811 	msr	BASEPRI, r3
 8013f54:	f3bf 8f6f 	isb	sy
 8013f58:	f3bf 8f4f 	dsb	sy
 8013f5c:	60bb      	str	r3, [r7, #8]
}
 8013f5e:	bf00      	nop
 8013f60:	e7fe      	b.n	8013f60 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8013f62:	693b      	ldr	r3, [r7, #16]
 8013f64:	685a      	ldr	r2, [r3, #4]
 8013f66:	4b14      	ldr	r3, [pc, #80]	; (8013fb8 <vPortFree+0xb8>)
 8013f68:	681b      	ldr	r3, [r3, #0]
 8013f6a:	4013      	ands	r3, r2
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	d01e      	beq.n	8013fae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8013f70:	693b      	ldr	r3, [r7, #16]
 8013f72:	681b      	ldr	r3, [r3, #0]
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	d11a      	bne.n	8013fae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8013f78:	693b      	ldr	r3, [r7, #16]
 8013f7a:	685a      	ldr	r2, [r3, #4]
 8013f7c:	4b0e      	ldr	r3, [pc, #56]	; (8013fb8 <vPortFree+0xb8>)
 8013f7e:	681b      	ldr	r3, [r3, #0]
 8013f80:	43db      	mvns	r3, r3
 8013f82:	401a      	ands	r2, r3
 8013f84:	693b      	ldr	r3, [r7, #16]
 8013f86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8013f88:	f7fe fbbc 	bl	8012704 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8013f8c:	693b      	ldr	r3, [r7, #16]
 8013f8e:	685a      	ldr	r2, [r3, #4]
 8013f90:	4b0a      	ldr	r3, [pc, #40]	; (8013fbc <vPortFree+0xbc>)
 8013f92:	681b      	ldr	r3, [r3, #0]
 8013f94:	4413      	add	r3, r2
 8013f96:	4a09      	ldr	r2, [pc, #36]	; (8013fbc <vPortFree+0xbc>)
 8013f98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8013f9a:	6938      	ldr	r0, [r7, #16]
 8013f9c:	f000 f874 	bl	8014088 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8013fa0:	4b07      	ldr	r3, [pc, #28]	; (8013fc0 <vPortFree+0xc0>)
 8013fa2:	681b      	ldr	r3, [r3, #0]
 8013fa4:	3301      	adds	r3, #1
 8013fa6:	4a06      	ldr	r2, [pc, #24]	; (8013fc0 <vPortFree+0xc0>)
 8013fa8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8013faa:	f7fe fbb9 	bl	8012720 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8013fae:	bf00      	nop
 8013fb0:	3718      	adds	r7, #24
 8013fb2:	46bd      	mov	sp, r7
 8013fb4:	bd80      	pop	{r7, pc}
 8013fb6:	bf00      	nop
 8013fb8:	240050c8 	.word	0x240050c8
 8013fbc:	240050b8 	.word	0x240050b8
 8013fc0:	240050c4 	.word	0x240050c4

08013fc4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8013fc4:	b480      	push	{r7}
 8013fc6:	b085      	sub	sp, #20
 8013fc8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8013fca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8013fce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8013fd0:	4b27      	ldr	r3, [pc, #156]	; (8014070 <prvHeapInit+0xac>)
 8013fd2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8013fd4:	68fb      	ldr	r3, [r7, #12]
 8013fd6:	f003 0307 	and.w	r3, r3, #7
 8013fda:	2b00      	cmp	r3, #0
 8013fdc:	d00c      	beq.n	8013ff8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8013fde:	68fb      	ldr	r3, [r7, #12]
 8013fe0:	3307      	adds	r3, #7
 8013fe2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013fe4:	68fb      	ldr	r3, [r7, #12]
 8013fe6:	f023 0307 	bic.w	r3, r3, #7
 8013fea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8013fec:	68ba      	ldr	r2, [r7, #8]
 8013fee:	68fb      	ldr	r3, [r7, #12]
 8013ff0:	1ad3      	subs	r3, r2, r3
 8013ff2:	4a1f      	ldr	r2, [pc, #124]	; (8014070 <prvHeapInit+0xac>)
 8013ff4:	4413      	add	r3, r2
 8013ff6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8013ff8:	68fb      	ldr	r3, [r7, #12]
 8013ffa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8013ffc:	4a1d      	ldr	r2, [pc, #116]	; (8014074 <prvHeapInit+0xb0>)
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8014002:	4b1c      	ldr	r3, [pc, #112]	; (8014074 <prvHeapInit+0xb0>)
 8014004:	2200      	movs	r2, #0
 8014006:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	68ba      	ldr	r2, [r7, #8]
 801400c:	4413      	add	r3, r2
 801400e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8014010:	2208      	movs	r2, #8
 8014012:	68fb      	ldr	r3, [r7, #12]
 8014014:	1a9b      	subs	r3, r3, r2
 8014016:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014018:	68fb      	ldr	r3, [r7, #12]
 801401a:	f023 0307 	bic.w	r3, r3, #7
 801401e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8014020:	68fb      	ldr	r3, [r7, #12]
 8014022:	4a15      	ldr	r2, [pc, #84]	; (8014078 <prvHeapInit+0xb4>)
 8014024:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8014026:	4b14      	ldr	r3, [pc, #80]	; (8014078 <prvHeapInit+0xb4>)
 8014028:	681b      	ldr	r3, [r3, #0]
 801402a:	2200      	movs	r2, #0
 801402c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801402e:	4b12      	ldr	r3, [pc, #72]	; (8014078 <prvHeapInit+0xb4>)
 8014030:	681b      	ldr	r3, [r3, #0]
 8014032:	2200      	movs	r2, #0
 8014034:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8014036:	687b      	ldr	r3, [r7, #4]
 8014038:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801403a:	683b      	ldr	r3, [r7, #0]
 801403c:	68fa      	ldr	r2, [r7, #12]
 801403e:	1ad2      	subs	r2, r2, r3
 8014040:	683b      	ldr	r3, [r7, #0]
 8014042:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8014044:	4b0c      	ldr	r3, [pc, #48]	; (8014078 <prvHeapInit+0xb4>)
 8014046:	681a      	ldr	r2, [r3, #0]
 8014048:	683b      	ldr	r3, [r7, #0]
 801404a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801404c:	683b      	ldr	r3, [r7, #0]
 801404e:	685b      	ldr	r3, [r3, #4]
 8014050:	4a0a      	ldr	r2, [pc, #40]	; (801407c <prvHeapInit+0xb8>)
 8014052:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014054:	683b      	ldr	r3, [r7, #0]
 8014056:	685b      	ldr	r3, [r3, #4]
 8014058:	4a09      	ldr	r2, [pc, #36]	; (8014080 <prvHeapInit+0xbc>)
 801405a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801405c:	4b09      	ldr	r3, [pc, #36]	; (8014084 <prvHeapInit+0xc0>)
 801405e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8014062:	601a      	str	r2, [r3, #0]
}
 8014064:	bf00      	nop
 8014066:	3714      	adds	r7, #20
 8014068:	46bd      	mov	sp, r7
 801406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801406e:	4770      	bx	lr
 8014070:	240014ac 	.word	0x240014ac
 8014074:	240050ac 	.word	0x240050ac
 8014078:	240050b4 	.word	0x240050b4
 801407c:	240050bc 	.word	0x240050bc
 8014080:	240050b8 	.word	0x240050b8
 8014084:	240050c8 	.word	0x240050c8

08014088 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8014088:	b480      	push	{r7}
 801408a:	b085      	sub	sp, #20
 801408c:	af00      	add	r7, sp, #0
 801408e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8014090:	4b28      	ldr	r3, [pc, #160]	; (8014134 <prvInsertBlockIntoFreeList+0xac>)
 8014092:	60fb      	str	r3, [r7, #12]
 8014094:	e002      	b.n	801409c <prvInsertBlockIntoFreeList+0x14>
 8014096:	68fb      	ldr	r3, [r7, #12]
 8014098:	681b      	ldr	r3, [r3, #0]
 801409a:	60fb      	str	r3, [r7, #12]
 801409c:	68fb      	ldr	r3, [r7, #12]
 801409e:	681b      	ldr	r3, [r3, #0]
 80140a0:	687a      	ldr	r2, [r7, #4]
 80140a2:	429a      	cmp	r2, r3
 80140a4:	d8f7      	bhi.n	8014096 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80140a6:	68fb      	ldr	r3, [r7, #12]
 80140a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80140aa:	68fb      	ldr	r3, [r7, #12]
 80140ac:	685b      	ldr	r3, [r3, #4]
 80140ae:	68ba      	ldr	r2, [r7, #8]
 80140b0:	4413      	add	r3, r2
 80140b2:	687a      	ldr	r2, [r7, #4]
 80140b4:	429a      	cmp	r2, r3
 80140b6:	d108      	bne.n	80140ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80140b8:	68fb      	ldr	r3, [r7, #12]
 80140ba:	685a      	ldr	r2, [r3, #4]
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	685b      	ldr	r3, [r3, #4]
 80140c0:	441a      	add	r2, r3
 80140c2:	68fb      	ldr	r3, [r7, #12]
 80140c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80140c6:	68fb      	ldr	r3, [r7, #12]
 80140c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	685b      	ldr	r3, [r3, #4]
 80140d2:	68ba      	ldr	r2, [r7, #8]
 80140d4:	441a      	add	r2, r3
 80140d6:	68fb      	ldr	r3, [r7, #12]
 80140d8:	681b      	ldr	r3, [r3, #0]
 80140da:	429a      	cmp	r2, r3
 80140dc:	d118      	bne.n	8014110 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80140de:	68fb      	ldr	r3, [r7, #12]
 80140e0:	681a      	ldr	r2, [r3, #0]
 80140e2:	4b15      	ldr	r3, [pc, #84]	; (8014138 <prvInsertBlockIntoFreeList+0xb0>)
 80140e4:	681b      	ldr	r3, [r3, #0]
 80140e6:	429a      	cmp	r2, r3
 80140e8:	d00d      	beq.n	8014106 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80140ea:	687b      	ldr	r3, [r7, #4]
 80140ec:	685a      	ldr	r2, [r3, #4]
 80140ee:	68fb      	ldr	r3, [r7, #12]
 80140f0:	681b      	ldr	r3, [r3, #0]
 80140f2:	685b      	ldr	r3, [r3, #4]
 80140f4:	441a      	add	r2, r3
 80140f6:	687b      	ldr	r3, [r7, #4]
 80140f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80140fa:	68fb      	ldr	r3, [r7, #12]
 80140fc:	681b      	ldr	r3, [r3, #0]
 80140fe:	681a      	ldr	r2, [r3, #0]
 8014100:	687b      	ldr	r3, [r7, #4]
 8014102:	601a      	str	r2, [r3, #0]
 8014104:	e008      	b.n	8014118 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8014106:	4b0c      	ldr	r3, [pc, #48]	; (8014138 <prvInsertBlockIntoFreeList+0xb0>)
 8014108:	681a      	ldr	r2, [r3, #0]
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	601a      	str	r2, [r3, #0]
 801410e:	e003      	b.n	8014118 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8014110:	68fb      	ldr	r3, [r7, #12]
 8014112:	681a      	ldr	r2, [r3, #0]
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8014118:	68fa      	ldr	r2, [r7, #12]
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	429a      	cmp	r2, r3
 801411e:	d002      	beq.n	8014126 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8014120:	68fb      	ldr	r3, [r7, #12]
 8014122:	687a      	ldr	r2, [r7, #4]
 8014124:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014126:	bf00      	nop
 8014128:	3714      	adds	r7, #20
 801412a:	46bd      	mov	sp, r7
 801412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014130:	4770      	bx	lr
 8014132:	bf00      	nop
 8014134:	240050ac 	.word	0x240050ac
 8014138:	240050b4 	.word	0x240050b4

0801413c <__errno>:
 801413c:	4b01      	ldr	r3, [pc, #4]	; (8014144 <__errno+0x8>)
 801413e:	6818      	ldr	r0, [r3, #0]
 8014140:	4770      	bx	lr
 8014142:	bf00      	nop
 8014144:	2400009c 	.word	0x2400009c

08014148 <__libc_init_array>:
 8014148:	b570      	push	{r4, r5, r6, lr}
 801414a:	4d0d      	ldr	r5, [pc, #52]	; (8014180 <__libc_init_array+0x38>)
 801414c:	4c0d      	ldr	r4, [pc, #52]	; (8014184 <__libc_init_array+0x3c>)
 801414e:	1b64      	subs	r4, r4, r5
 8014150:	10a4      	asrs	r4, r4, #2
 8014152:	2600      	movs	r6, #0
 8014154:	42a6      	cmp	r6, r4
 8014156:	d109      	bne.n	801416c <__libc_init_array+0x24>
 8014158:	4d0b      	ldr	r5, [pc, #44]	; (8014188 <__libc_init_array+0x40>)
 801415a:	4c0c      	ldr	r4, [pc, #48]	; (801418c <__libc_init_array+0x44>)
 801415c:	f001 f842 	bl	80151e4 <_init>
 8014160:	1b64      	subs	r4, r4, r5
 8014162:	10a4      	asrs	r4, r4, #2
 8014164:	2600      	movs	r6, #0
 8014166:	42a6      	cmp	r6, r4
 8014168:	d105      	bne.n	8014176 <__libc_init_array+0x2e>
 801416a:	bd70      	pop	{r4, r5, r6, pc}
 801416c:	f855 3b04 	ldr.w	r3, [r5], #4
 8014170:	4798      	blx	r3
 8014172:	3601      	adds	r6, #1
 8014174:	e7ee      	b.n	8014154 <__libc_init_array+0xc>
 8014176:	f855 3b04 	ldr.w	r3, [r5], #4
 801417a:	4798      	blx	r3
 801417c:	3601      	adds	r6, #1
 801417e:	e7f2      	b.n	8014166 <__libc_init_array+0x1e>
 8014180:	080155b4 	.word	0x080155b4
 8014184:	080155b4 	.word	0x080155b4
 8014188:	080155b4 	.word	0x080155b4
 801418c:	080155b8 	.word	0x080155b8

08014190 <malloc>:
 8014190:	4b02      	ldr	r3, [pc, #8]	; (801419c <malloc+0xc>)
 8014192:	4601      	mov	r1, r0
 8014194:	6818      	ldr	r0, [r3, #0]
 8014196:	f000 b88d 	b.w	80142b4 <_malloc_r>
 801419a:	bf00      	nop
 801419c:	2400009c 	.word	0x2400009c

080141a0 <free>:
 80141a0:	4b02      	ldr	r3, [pc, #8]	; (80141ac <free+0xc>)
 80141a2:	4601      	mov	r1, r0
 80141a4:	6818      	ldr	r0, [r3, #0]
 80141a6:	f000 b819 	b.w	80141dc <_free_r>
 80141aa:	bf00      	nop
 80141ac:	2400009c 	.word	0x2400009c

080141b0 <memcpy>:
 80141b0:	440a      	add	r2, r1
 80141b2:	4291      	cmp	r1, r2
 80141b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80141b8:	d100      	bne.n	80141bc <memcpy+0xc>
 80141ba:	4770      	bx	lr
 80141bc:	b510      	push	{r4, lr}
 80141be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80141c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80141c6:	4291      	cmp	r1, r2
 80141c8:	d1f9      	bne.n	80141be <memcpy+0xe>
 80141ca:	bd10      	pop	{r4, pc}

080141cc <memset>:
 80141cc:	4402      	add	r2, r0
 80141ce:	4603      	mov	r3, r0
 80141d0:	4293      	cmp	r3, r2
 80141d2:	d100      	bne.n	80141d6 <memset+0xa>
 80141d4:	4770      	bx	lr
 80141d6:	f803 1b01 	strb.w	r1, [r3], #1
 80141da:	e7f9      	b.n	80141d0 <memset+0x4>

080141dc <_free_r>:
 80141dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80141de:	2900      	cmp	r1, #0
 80141e0:	d044      	beq.n	801426c <_free_r+0x90>
 80141e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80141e6:	9001      	str	r0, [sp, #4]
 80141e8:	2b00      	cmp	r3, #0
 80141ea:	f1a1 0404 	sub.w	r4, r1, #4
 80141ee:	bfb8      	it	lt
 80141f0:	18e4      	addlt	r4, r4, r3
 80141f2:	f000 fc51 	bl	8014a98 <__malloc_lock>
 80141f6:	4a1e      	ldr	r2, [pc, #120]	; (8014270 <_free_r+0x94>)
 80141f8:	9801      	ldr	r0, [sp, #4]
 80141fa:	6813      	ldr	r3, [r2, #0]
 80141fc:	b933      	cbnz	r3, 801420c <_free_r+0x30>
 80141fe:	6063      	str	r3, [r4, #4]
 8014200:	6014      	str	r4, [r2, #0]
 8014202:	b003      	add	sp, #12
 8014204:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014208:	f000 bc4c 	b.w	8014aa4 <__malloc_unlock>
 801420c:	42a3      	cmp	r3, r4
 801420e:	d908      	bls.n	8014222 <_free_r+0x46>
 8014210:	6825      	ldr	r5, [r4, #0]
 8014212:	1961      	adds	r1, r4, r5
 8014214:	428b      	cmp	r3, r1
 8014216:	bf01      	itttt	eq
 8014218:	6819      	ldreq	r1, [r3, #0]
 801421a:	685b      	ldreq	r3, [r3, #4]
 801421c:	1949      	addeq	r1, r1, r5
 801421e:	6021      	streq	r1, [r4, #0]
 8014220:	e7ed      	b.n	80141fe <_free_r+0x22>
 8014222:	461a      	mov	r2, r3
 8014224:	685b      	ldr	r3, [r3, #4]
 8014226:	b10b      	cbz	r3, 801422c <_free_r+0x50>
 8014228:	42a3      	cmp	r3, r4
 801422a:	d9fa      	bls.n	8014222 <_free_r+0x46>
 801422c:	6811      	ldr	r1, [r2, #0]
 801422e:	1855      	adds	r5, r2, r1
 8014230:	42a5      	cmp	r5, r4
 8014232:	d10b      	bne.n	801424c <_free_r+0x70>
 8014234:	6824      	ldr	r4, [r4, #0]
 8014236:	4421      	add	r1, r4
 8014238:	1854      	adds	r4, r2, r1
 801423a:	42a3      	cmp	r3, r4
 801423c:	6011      	str	r1, [r2, #0]
 801423e:	d1e0      	bne.n	8014202 <_free_r+0x26>
 8014240:	681c      	ldr	r4, [r3, #0]
 8014242:	685b      	ldr	r3, [r3, #4]
 8014244:	6053      	str	r3, [r2, #4]
 8014246:	4421      	add	r1, r4
 8014248:	6011      	str	r1, [r2, #0]
 801424a:	e7da      	b.n	8014202 <_free_r+0x26>
 801424c:	d902      	bls.n	8014254 <_free_r+0x78>
 801424e:	230c      	movs	r3, #12
 8014250:	6003      	str	r3, [r0, #0]
 8014252:	e7d6      	b.n	8014202 <_free_r+0x26>
 8014254:	6825      	ldr	r5, [r4, #0]
 8014256:	1961      	adds	r1, r4, r5
 8014258:	428b      	cmp	r3, r1
 801425a:	bf04      	itt	eq
 801425c:	6819      	ldreq	r1, [r3, #0]
 801425e:	685b      	ldreq	r3, [r3, #4]
 8014260:	6063      	str	r3, [r4, #4]
 8014262:	bf04      	itt	eq
 8014264:	1949      	addeq	r1, r1, r5
 8014266:	6021      	streq	r1, [r4, #0]
 8014268:	6054      	str	r4, [r2, #4]
 801426a:	e7ca      	b.n	8014202 <_free_r+0x26>
 801426c:	b003      	add	sp, #12
 801426e:	bd30      	pop	{r4, r5, pc}
 8014270:	240050cc 	.word	0x240050cc

08014274 <sbrk_aligned>:
 8014274:	b570      	push	{r4, r5, r6, lr}
 8014276:	4e0e      	ldr	r6, [pc, #56]	; (80142b0 <sbrk_aligned+0x3c>)
 8014278:	460c      	mov	r4, r1
 801427a:	6831      	ldr	r1, [r6, #0]
 801427c:	4605      	mov	r5, r0
 801427e:	b911      	cbnz	r1, 8014286 <sbrk_aligned+0x12>
 8014280:	f000 f91a 	bl	80144b8 <_sbrk_r>
 8014284:	6030      	str	r0, [r6, #0]
 8014286:	4621      	mov	r1, r4
 8014288:	4628      	mov	r0, r5
 801428a:	f000 f915 	bl	80144b8 <_sbrk_r>
 801428e:	1c43      	adds	r3, r0, #1
 8014290:	d00a      	beq.n	80142a8 <sbrk_aligned+0x34>
 8014292:	1cc4      	adds	r4, r0, #3
 8014294:	f024 0403 	bic.w	r4, r4, #3
 8014298:	42a0      	cmp	r0, r4
 801429a:	d007      	beq.n	80142ac <sbrk_aligned+0x38>
 801429c:	1a21      	subs	r1, r4, r0
 801429e:	4628      	mov	r0, r5
 80142a0:	f000 f90a 	bl	80144b8 <_sbrk_r>
 80142a4:	3001      	adds	r0, #1
 80142a6:	d101      	bne.n	80142ac <sbrk_aligned+0x38>
 80142a8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80142ac:	4620      	mov	r0, r4
 80142ae:	bd70      	pop	{r4, r5, r6, pc}
 80142b0:	240050d0 	.word	0x240050d0

080142b4 <_malloc_r>:
 80142b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80142b8:	1ccd      	adds	r5, r1, #3
 80142ba:	f025 0503 	bic.w	r5, r5, #3
 80142be:	3508      	adds	r5, #8
 80142c0:	2d0c      	cmp	r5, #12
 80142c2:	bf38      	it	cc
 80142c4:	250c      	movcc	r5, #12
 80142c6:	2d00      	cmp	r5, #0
 80142c8:	4607      	mov	r7, r0
 80142ca:	db01      	blt.n	80142d0 <_malloc_r+0x1c>
 80142cc:	42a9      	cmp	r1, r5
 80142ce:	d905      	bls.n	80142dc <_malloc_r+0x28>
 80142d0:	230c      	movs	r3, #12
 80142d2:	603b      	str	r3, [r7, #0]
 80142d4:	2600      	movs	r6, #0
 80142d6:	4630      	mov	r0, r6
 80142d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80142dc:	4e2e      	ldr	r6, [pc, #184]	; (8014398 <_malloc_r+0xe4>)
 80142de:	f000 fbdb 	bl	8014a98 <__malloc_lock>
 80142e2:	6833      	ldr	r3, [r6, #0]
 80142e4:	461c      	mov	r4, r3
 80142e6:	bb34      	cbnz	r4, 8014336 <_malloc_r+0x82>
 80142e8:	4629      	mov	r1, r5
 80142ea:	4638      	mov	r0, r7
 80142ec:	f7ff ffc2 	bl	8014274 <sbrk_aligned>
 80142f0:	1c43      	adds	r3, r0, #1
 80142f2:	4604      	mov	r4, r0
 80142f4:	d14d      	bne.n	8014392 <_malloc_r+0xde>
 80142f6:	6834      	ldr	r4, [r6, #0]
 80142f8:	4626      	mov	r6, r4
 80142fa:	2e00      	cmp	r6, #0
 80142fc:	d140      	bne.n	8014380 <_malloc_r+0xcc>
 80142fe:	6823      	ldr	r3, [r4, #0]
 8014300:	4631      	mov	r1, r6
 8014302:	4638      	mov	r0, r7
 8014304:	eb04 0803 	add.w	r8, r4, r3
 8014308:	f000 f8d6 	bl	80144b8 <_sbrk_r>
 801430c:	4580      	cmp	r8, r0
 801430e:	d13a      	bne.n	8014386 <_malloc_r+0xd2>
 8014310:	6821      	ldr	r1, [r4, #0]
 8014312:	3503      	adds	r5, #3
 8014314:	1a6d      	subs	r5, r5, r1
 8014316:	f025 0503 	bic.w	r5, r5, #3
 801431a:	3508      	adds	r5, #8
 801431c:	2d0c      	cmp	r5, #12
 801431e:	bf38      	it	cc
 8014320:	250c      	movcc	r5, #12
 8014322:	4629      	mov	r1, r5
 8014324:	4638      	mov	r0, r7
 8014326:	f7ff ffa5 	bl	8014274 <sbrk_aligned>
 801432a:	3001      	adds	r0, #1
 801432c:	d02b      	beq.n	8014386 <_malloc_r+0xd2>
 801432e:	6823      	ldr	r3, [r4, #0]
 8014330:	442b      	add	r3, r5
 8014332:	6023      	str	r3, [r4, #0]
 8014334:	e00e      	b.n	8014354 <_malloc_r+0xa0>
 8014336:	6822      	ldr	r2, [r4, #0]
 8014338:	1b52      	subs	r2, r2, r5
 801433a:	d41e      	bmi.n	801437a <_malloc_r+0xc6>
 801433c:	2a0b      	cmp	r2, #11
 801433e:	d916      	bls.n	801436e <_malloc_r+0xba>
 8014340:	1961      	adds	r1, r4, r5
 8014342:	42a3      	cmp	r3, r4
 8014344:	6025      	str	r5, [r4, #0]
 8014346:	bf18      	it	ne
 8014348:	6059      	strne	r1, [r3, #4]
 801434a:	6863      	ldr	r3, [r4, #4]
 801434c:	bf08      	it	eq
 801434e:	6031      	streq	r1, [r6, #0]
 8014350:	5162      	str	r2, [r4, r5]
 8014352:	604b      	str	r3, [r1, #4]
 8014354:	4638      	mov	r0, r7
 8014356:	f104 060b 	add.w	r6, r4, #11
 801435a:	f000 fba3 	bl	8014aa4 <__malloc_unlock>
 801435e:	f026 0607 	bic.w	r6, r6, #7
 8014362:	1d23      	adds	r3, r4, #4
 8014364:	1af2      	subs	r2, r6, r3
 8014366:	d0b6      	beq.n	80142d6 <_malloc_r+0x22>
 8014368:	1b9b      	subs	r3, r3, r6
 801436a:	50a3      	str	r3, [r4, r2]
 801436c:	e7b3      	b.n	80142d6 <_malloc_r+0x22>
 801436e:	6862      	ldr	r2, [r4, #4]
 8014370:	42a3      	cmp	r3, r4
 8014372:	bf0c      	ite	eq
 8014374:	6032      	streq	r2, [r6, #0]
 8014376:	605a      	strne	r2, [r3, #4]
 8014378:	e7ec      	b.n	8014354 <_malloc_r+0xa0>
 801437a:	4623      	mov	r3, r4
 801437c:	6864      	ldr	r4, [r4, #4]
 801437e:	e7b2      	b.n	80142e6 <_malloc_r+0x32>
 8014380:	4634      	mov	r4, r6
 8014382:	6876      	ldr	r6, [r6, #4]
 8014384:	e7b9      	b.n	80142fa <_malloc_r+0x46>
 8014386:	230c      	movs	r3, #12
 8014388:	603b      	str	r3, [r7, #0]
 801438a:	4638      	mov	r0, r7
 801438c:	f000 fb8a 	bl	8014aa4 <__malloc_unlock>
 8014390:	e7a1      	b.n	80142d6 <_malloc_r+0x22>
 8014392:	6025      	str	r5, [r4, #0]
 8014394:	e7de      	b.n	8014354 <_malloc_r+0xa0>
 8014396:	bf00      	nop
 8014398:	240050cc 	.word	0x240050cc

0801439c <iprintf>:
 801439c:	b40f      	push	{r0, r1, r2, r3}
 801439e:	4b0a      	ldr	r3, [pc, #40]	; (80143c8 <iprintf+0x2c>)
 80143a0:	b513      	push	{r0, r1, r4, lr}
 80143a2:	681c      	ldr	r4, [r3, #0]
 80143a4:	b124      	cbz	r4, 80143b0 <iprintf+0x14>
 80143a6:	69a3      	ldr	r3, [r4, #24]
 80143a8:	b913      	cbnz	r3, 80143b0 <iprintf+0x14>
 80143aa:	4620      	mov	r0, r4
 80143ac:	f000 fa6e 	bl	801488c <__sinit>
 80143b0:	ab05      	add	r3, sp, #20
 80143b2:	9a04      	ldr	r2, [sp, #16]
 80143b4:	68a1      	ldr	r1, [r4, #8]
 80143b6:	9301      	str	r3, [sp, #4]
 80143b8:	4620      	mov	r0, r4
 80143ba:	f000 fba3 	bl	8014b04 <_vfiprintf_r>
 80143be:	b002      	add	sp, #8
 80143c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80143c4:	b004      	add	sp, #16
 80143c6:	4770      	bx	lr
 80143c8:	2400009c 	.word	0x2400009c

080143cc <_puts_r>:
 80143cc:	b570      	push	{r4, r5, r6, lr}
 80143ce:	460e      	mov	r6, r1
 80143d0:	4605      	mov	r5, r0
 80143d2:	b118      	cbz	r0, 80143dc <_puts_r+0x10>
 80143d4:	6983      	ldr	r3, [r0, #24]
 80143d6:	b90b      	cbnz	r3, 80143dc <_puts_r+0x10>
 80143d8:	f000 fa58 	bl	801488c <__sinit>
 80143dc:	69ab      	ldr	r3, [r5, #24]
 80143de:	68ac      	ldr	r4, [r5, #8]
 80143e0:	b913      	cbnz	r3, 80143e8 <_puts_r+0x1c>
 80143e2:	4628      	mov	r0, r5
 80143e4:	f000 fa52 	bl	801488c <__sinit>
 80143e8:	4b2c      	ldr	r3, [pc, #176]	; (801449c <_puts_r+0xd0>)
 80143ea:	429c      	cmp	r4, r3
 80143ec:	d120      	bne.n	8014430 <_puts_r+0x64>
 80143ee:	686c      	ldr	r4, [r5, #4]
 80143f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80143f2:	07db      	lsls	r3, r3, #31
 80143f4:	d405      	bmi.n	8014402 <_puts_r+0x36>
 80143f6:	89a3      	ldrh	r3, [r4, #12]
 80143f8:	0598      	lsls	r0, r3, #22
 80143fa:	d402      	bmi.n	8014402 <_puts_r+0x36>
 80143fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80143fe:	f000 fae3 	bl	80149c8 <__retarget_lock_acquire_recursive>
 8014402:	89a3      	ldrh	r3, [r4, #12]
 8014404:	0719      	lsls	r1, r3, #28
 8014406:	d51d      	bpl.n	8014444 <_puts_r+0x78>
 8014408:	6923      	ldr	r3, [r4, #16]
 801440a:	b1db      	cbz	r3, 8014444 <_puts_r+0x78>
 801440c:	3e01      	subs	r6, #1
 801440e:	68a3      	ldr	r3, [r4, #8]
 8014410:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8014414:	3b01      	subs	r3, #1
 8014416:	60a3      	str	r3, [r4, #8]
 8014418:	bb39      	cbnz	r1, 801446a <_puts_r+0x9e>
 801441a:	2b00      	cmp	r3, #0
 801441c:	da38      	bge.n	8014490 <_puts_r+0xc4>
 801441e:	4622      	mov	r2, r4
 8014420:	210a      	movs	r1, #10
 8014422:	4628      	mov	r0, r5
 8014424:	f000 f858 	bl	80144d8 <__swbuf_r>
 8014428:	3001      	adds	r0, #1
 801442a:	d011      	beq.n	8014450 <_puts_r+0x84>
 801442c:	250a      	movs	r5, #10
 801442e:	e011      	b.n	8014454 <_puts_r+0x88>
 8014430:	4b1b      	ldr	r3, [pc, #108]	; (80144a0 <_puts_r+0xd4>)
 8014432:	429c      	cmp	r4, r3
 8014434:	d101      	bne.n	801443a <_puts_r+0x6e>
 8014436:	68ac      	ldr	r4, [r5, #8]
 8014438:	e7da      	b.n	80143f0 <_puts_r+0x24>
 801443a:	4b1a      	ldr	r3, [pc, #104]	; (80144a4 <_puts_r+0xd8>)
 801443c:	429c      	cmp	r4, r3
 801443e:	bf08      	it	eq
 8014440:	68ec      	ldreq	r4, [r5, #12]
 8014442:	e7d5      	b.n	80143f0 <_puts_r+0x24>
 8014444:	4621      	mov	r1, r4
 8014446:	4628      	mov	r0, r5
 8014448:	f000 f898 	bl	801457c <__swsetup_r>
 801444c:	2800      	cmp	r0, #0
 801444e:	d0dd      	beq.n	801440c <_puts_r+0x40>
 8014450:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8014454:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014456:	07da      	lsls	r2, r3, #31
 8014458:	d405      	bmi.n	8014466 <_puts_r+0x9a>
 801445a:	89a3      	ldrh	r3, [r4, #12]
 801445c:	059b      	lsls	r3, r3, #22
 801445e:	d402      	bmi.n	8014466 <_puts_r+0x9a>
 8014460:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014462:	f000 fab2 	bl	80149ca <__retarget_lock_release_recursive>
 8014466:	4628      	mov	r0, r5
 8014468:	bd70      	pop	{r4, r5, r6, pc}
 801446a:	2b00      	cmp	r3, #0
 801446c:	da04      	bge.n	8014478 <_puts_r+0xac>
 801446e:	69a2      	ldr	r2, [r4, #24]
 8014470:	429a      	cmp	r2, r3
 8014472:	dc06      	bgt.n	8014482 <_puts_r+0xb6>
 8014474:	290a      	cmp	r1, #10
 8014476:	d004      	beq.n	8014482 <_puts_r+0xb6>
 8014478:	6823      	ldr	r3, [r4, #0]
 801447a:	1c5a      	adds	r2, r3, #1
 801447c:	6022      	str	r2, [r4, #0]
 801447e:	7019      	strb	r1, [r3, #0]
 8014480:	e7c5      	b.n	801440e <_puts_r+0x42>
 8014482:	4622      	mov	r2, r4
 8014484:	4628      	mov	r0, r5
 8014486:	f000 f827 	bl	80144d8 <__swbuf_r>
 801448a:	3001      	adds	r0, #1
 801448c:	d1bf      	bne.n	801440e <_puts_r+0x42>
 801448e:	e7df      	b.n	8014450 <_puts_r+0x84>
 8014490:	6823      	ldr	r3, [r4, #0]
 8014492:	250a      	movs	r5, #10
 8014494:	1c5a      	adds	r2, r3, #1
 8014496:	6022      	str	r2, [r4, #0]
 8014498:	701d      	strb	r5, [r3, #0]
 801449a:	e7db      	b.n	8014454 <_puts_r+0x88>
 801449c:	08015538 	.word	0x08015538
 80144a0:	08015558 	.word	0x08015558
 80144a4:	08015518 	.word	0x08015518

080144a8 <puts>:
 80144a8:	4b02      	ldr	r3, [pc, #8]	; (80144b4 <puts+0xc>)
 80144aa:	4601      	mov	r1, r0
 80144ac:	6818      	ldr	r0, [r3, #0]
 80144ae:	f7ff bf8d 	b.w	80143cc <_puts_r>
 80144b2:	bf00      	nop
 80144b4:	2400009c 	.word	0x2400009c

080144b8 <_sbrk_r>:
 80144b8:	b538      	push	{r3, r4, r5, lr}
 80144ba:	4d06      	ldr	r5, [pc, #24]	; (80144d4 <_sbrk_r+0x1c>)
 80144bc:	2300      	movs	r3, #0
 80144be:	4604      	mov	r4, r0
 80144c0:	4608      	mov	r0, r1
 80144c2:	602b      	str	r3, [r5, #0]
 80144c4:	f7ee fc26 	bl	8002d14 <_sbrk>
 80144c8:	1c43      	adds	r3, r0, #1
 80144ca:	d102      	bne.n	80144d2 <_sbrk_r+0x1a>
 80144cc:	682b      	ldr	r3, [r5, #0]
 80144ce:	b103      	cbz	r3, 80144d2 <_sbrk_r+0x1a>
 80144d0:	6023      	str	r3, [r4, #0]
 80144d2:	bd38      	pop	{r3, r4, r5, pc}
 80144d4:	240050d8 	.word	0x240050d8

080144d8 <__swbuf_r>:
 80144d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80144da:	460e      	mov	r6, r1
 80144dc:	4614      	mov	r4, r2
 80144de:	4605      	mov	r5, r0
 80144e0:	b118      	cbz	r0, 80144ea <__swbuf_r+0x12>
 80144e2:	6983      	ldr	r3, [r0, #24]
 80144e4:	b90b      	cbnz	r3, 80144ea <__swbuf_r+0x12>
 80144e6:	f000 f9d1 	bl	801488c <__sinit>
 80144ea:	4b21      	ldr	r3, [pc, #132]	; (8014570 <__swbuf_r+0x98>)
 80144ec:	429c      	cmp	r4, r3
 80144ee:	d12b      	bne.n	8014548 <__swbuf_r+0x70>
 80144f0:	686c      	ldr	r4, [r5, #4]
 80144f2:	69a3      	ldr	r3, [r4, #24]
 80144f4:	60a3      	str	r3, [r4, #8]
 80144f6:	89a3      	ldrh	r3, [r4, #12]
 80144f8:	071a      	lsls	r2, r3, #28
 80144fa:	d52f      	bpl.n	801455c <__swbuf_r+0x84>
 80144fc:	6923      	ldr	r3, [r4, #16]
 80144fe:	b36b      	cbz	r3, 801455c <__swbuf_r+0x84>
 8014500:	6923      	ldr	r3, [r4, #16]
 8014502:	6820      	ldr	r0, [r4, #0]
 8014504:	1ac0      	subs	r0, r0, r3
 8014506:	6963      	ldr	r3, [r4, #20]
 8014508:	b2f6      	uxtb	r6, r6
 801450a:	4283      	cmp	r3, r0
 801450c:	4637      	mov	r7, r6
 801450e:	dc04      	bgt.n	801451a <__swbuf_r+0x42>
 8014510:	4621      	mov	r1, r4
 8014512:	4628      	mov	r0, r5
 8014514:	f000 f926 	bl	8014764 <_fflush_r>
 8014518:	bb30      	cbnz	r0, 8014568 <__swbuf_r+0x90>
 801451a:	68a3      	ldr	r3, [r4, #8]
 801451c:	3b01      	subs	r3, #1
 801451e:	60a3      	str	r3, [r4, #8]
 8014520:	6823      	ldr	r3, [r4, #0]
 8014522:	1c5a      	adds	r2, r3, #1
 8014524:	6022      	str	r2, [r4, #0]
 8014526:	701e      	strb	r6, [r3, #0]
 8014528:	6963      	ldr	r3, [r4, #20]
 801452a:	3001      	adds	r0, #1
 801452c:	4283      	cmp	r3, r0
 801452e:	d004      	beq.n	801453a <__swbuf_r+0x62>
 8014530:	89a3      	ldrh	r3, [r4, #12]
 8014532:	07db      	lsls	r3, r3, #31
 8014534:	d506      	bpl.n	8014544 <__swbuf_r+0x6c>
 8014536:	2e0a      	cmp	r6, #10
 8014538:	d104      	bne.n	8014544 <__swbuf_r+0x6c>
 801453a:	4621      	mov	r1, r4
 801453c:	4628      	mov	r0, r5
 801453e:	f000 f911 	bl	8014764 <_fflush_r>
 8014542:	b988      	cbnz	r0, 8014568 <__swbuf_r+0x90>
 8014544:	4638      	mov	r0, r7
 8014546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014548:	4b0a      	ldr	r3, [pc, #40]	; (8014574 <__swbuf_r+0x9c>)
 801454a:	429c      	cmp	r4, r3
 801454c:	d101      	bne.n	8014552 <__swbuf_r+0x7a>
 801454e:	68ac      	ldr	r4, [r5, #8]
 8014550:	e7cf      	b.n	80144f2 <__swbuf_r+0x1a>
 8014552:	4b09      	ldr	r3, [pc, #36]	; (8014578 <__swbuf_r+0xa0>)
 8014554:	429c      	cmp	r4, r3
 8014556:	bf08      	it	eq
 8014558:	68ec      	ldreq	r4, [r5, #12]
 801455a:	e7ca      	b.n	80144f2 <__swbuf_r+0x1a>
 801455c:	4621      	mov	r1, r4
 801455e:	4628      	mov	r0, r5
 8014560:	f000 f80c 	bl	801457c <__swsetup_r>
 8014564:	2800      	cmp	r0, #0
 8014566:	d0cb      	beq.n	8014500 <__swbuf_r+0x28>
 8014568:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801456c:	e7ea      	b.n	8014544 <__swbuf_r+0x6c>
 801456e:	bf00      	nop
 8014570:	08015538 	.word	0x08015538
 8014574:	08015558 	.word	0x08015558
 8014578:	08015518 	.word	0x08015518

0801457c <__swsetup_r>:
 801457c:	4b32      	ldr	r3, [pc, #200]	; (8014648 <__swsetup_r+0xcc>)
 801457e:	b570      	push	{r4, r5, r6, lr}
 8014580:	681d      	ldr	r5, [r3, #0]
 8014582:	4606      	mov	r6, r0
 8014584:	460c      	mov	r4, r1
 8014586:	b125      	cbz	r5, 8014592 <__swsetup_r+0x16>
 8014588:	69ab      	ldr	r3, [r5, #24]
 801458a:	b913      	cbnz	r3, 8014592 <__swsetup_r+0x16>
 801458c:	4628      	mov	r0, r5
 801458e:	f000 f97d 	bl	801488c <__sinit>
 8014592:	4b2e      	ldr	r3, [pc, #184]	; (801464c <__swsetup_r+0xd0>)
 8014594:	429c      	cmp	r4, r3
 8014596:	d10f      	bne.n	80145b8 <__swsetup_r+0x3c>
 8014598:	686c      	ldr	r4, [r5, #4]
 801459a:	89a3      	ldrh	r3, [r4, #12]
 801459c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80145a0:	0719      	lsls	r1, r3, #28
 80145a2:	d42c      	bmi.n	80145fe <__swsetup_r+0x82>
 80145a4:	06dd      	lsls	r5, r3, #27
 80145a6:	d411      	bmi.n	80145cc <__swsetup_r+0x50>
 80145a8:	2309      	movs	r3, #9
 80145aa:	6033      	str	r3, [r6, #0]
 80145ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80145b0:	81a3      	strh	r3, [r4, #12]
 80145b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80145b6:	e03e      	b.n	8014636 <__swsetup_r+0xba>
 80145b8:	4b25      	ldr	r3, [pc, #148]	; (8014650 <__swsetup_r+0xd4>)
 80145ba:	429c      	cmp	r4, r3
 80145bc:	d101      	bne.n	80145c2 <__swsetup_r+0x46>
 80145be:	68ac      	ldr	r4, [r5, #8]
 80145c0:	e7eb      	b.n	801459a <__swsetup_r+0x1e>
 80145c2:	4b24      	ldr	r3, [pc, #144]	; (8014654 <__swsetup_r+0xd8>)
 80145c4:	429c      	cmp	r4, r3
 80145c6:	bf08      	it	eq
 80145c8:	68ec      	ldreq	r4, [r5, #12]
 80145ca:	e7e6      	b.n	801459a <__swsetup_r+0x1e>
 80145cc:	0758      	lsls	r0, r3, #29
 80145ce:	d512      	bpl.n	80145f6 <__swsetup_r+0x7a>
 80145d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80145d2:	b141      	cbz	r1, 80145e6 <__swsetup_r+0x6a>
 80145d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80145d8:	4299      	cmp	r1, r3
 80145da:	d002      	beq.n	80145e2 <__swsetup_r+0x66>
 80145dc:	4630      	mov	r0, r6
 80145de:	f7ff fdfd 	bl	80141dc <_free_r>
 80145e2:	2300      	movs	r3, #0
 80145e4:	6363      	str	r3, [r4, #52]	; 0x34
 80145e6:	89a3      	ldrh	r3, [r4, #12]
 80145e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80145ec:	81a3      	strh	r3, [r4, #12]
 80145ee:	2300      	movs	r3, #0
 80145f0:	6063      	str	r3, [r4, #4]
 80145f2:	6923      	ldr	r3, [r4, #16]
 80145f4:	6023      	str	r3, [r4, #0]
 80145f6:	89a3      	ldrh	r3, [r4, #12]
 80145f8:	f043 0308 	orr.w	r3, r3, #8
 80145fc:	81a3      	strh	r3, [r4, #12]
 80145fe:	6923      	ldr	r3, [r4, #16]
 8014600:	b94b      	cbnz	r3, 8014616 <__swsetup_r+0x9a>
 8014602:	89a3      	ldrh	r3, [r4, #12]
 8014604:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014608:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801460c:	d003      	beq.n	8014616 <__swsetup_r+0x9a>
 801460e:	4621      	mov	r1, r4
 8014610:	4630      	mov	r0, r6
 8014612:	f000 fa01 	bl	8014a18 <__smakebuf_r>
 8014616:	89a0      	ldrh	r0, [r4, #12]
 8014618:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801461c:	f010 0301 	ands.w	r3, r0, #1
 8014620:	d00a      	beq.n	8014638 <__swsetup_r+0xbc>
 8014622:	2300      	movs	r3, #0
 8014624:	60a3      	str	r3, [r4, #8]
 8014626:	6963      	ldr	r3, [r4, #20]
 8014628:	425b      	negs	r3, r3
 801462a:	61a3      	str	r3, [r4, #24]
 801462c:	6923      	ldr	r3, [r4, #16]
 801462e:	b943      	cbnz	r3, 8014642 <__swsetup_r+0xc6>
 8014630:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014634:	d1ba      	bne.n	80145ac <__swsetup_r+0x30>
 8014636:	bd70      	pop	{r4, r5, r6, pc}
 8014638:	0781      	lsls	r1, r0, #30
 801463a:	bf58      	it	pl
 801463c:	6963      	ldrpl	r3, [r4, #20]
 801463e:	60a3      	str	r3, [r4, #8]
 8014640:	e7f4      	b.n	801462c <__swsetup_r+0xb0>
 8014642:	2000      	movs	r0, #0
 8014644:	e7f7      	b.n	8014636 <__swsetup_r+0xba>
 8014646:	bf00      	nop
 8014648:	2400009c 	.word	0x2400009c
 801464c:	08015538 	.word	0x08015538
 8014650:	08015558 	.word	0x08015558
 8014654:	08015518 	.word	0x08015518

08014658 <__sflush_r>:
 8014658:	898a      	ldrh	r2, [r1, #12]
 801465a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801465e:	4605      	mov	r5, r0
 8014660:	0710      	lsls	r0, r2, #28
 8014662:	460c      	mov	r4, r1
 8014664:	d458      	bmi.n	8014718 <__sflush_r+0xc0>
 8014666:	684b      	ldr	r3, [r1, #4]
 8014668:	2b00      	cmp	r3, #0
 801466a:	dc05      	bgt.n	8014678 <__sflush_r+0x20>
 801466c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801466e:	2b00      	cmp	r3, #0
 8014670:	dc02      	bgt.n	8014678 <__sflush_r+0x20>
 8014672:	2000      	movs	r0, #0
 8014674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014678:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801467a:	2e00      	cmp	r6, #0
 801467c:	d0f9      	beq.n	8014672 <__sflush_r+0x1a>
 801467e:	2300      	movs	r3, #0
 8014680:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014684:	682f      	ldr	r7, [r5, #0]
 8014686:	602b      	str	r3, [r5, #0]
 8014688:	d032      	beq.n	80146f0 <__sflush_r+0x98>
 801468a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801468c:	89a3      	ldrh	r3, [r4, #12]
 801468e:	075a      	lsls	r2, r3, #29
 8014690:	d505      	bpl.n	801469e <__sflush_r+0x46>
 8014692:	6863      	ldr	r3, [r4, #4]
 8014694:	1ac0      	subs	r0, r0, r3
 8014696:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014698:	b10b      	cbz	r3, 801469e <__sflush_r+0x46>
 801469a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801469c:	1ac0      	subs	r0, r0, r3
 801469e:	2300      	movs	r3, #0
 80146a0:	4602      	mov	r2, r0
 80146a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80146a4:	6a21      	ldr	r1, [r4, #32]
 80146a6:	4628      	mov	r0, r5
 80146a8:	47b0      	blx	r6
 80146aa:	1c43      	adds	r3, r0, #1
 80146ac:	89a3      	ldrh	r3, [r4, #12]
 80146ae:	d106      	bne.n	80146be <__sflush_r+0x66>
 80146b0:	6829      	ldr	r1, [r5, #0]
 80146b2:	291d      	cmp	r1, #29
 80146b4:	d82c      	bhi.n	8014710 <__sflush_r+0xb8>
 80146b6:	4a2a      	ldr	r2, [pc, #168]	; (8014760 <__sflush_r+0x108>)
 80146b8:	40ca      	lsrs	r2, r1
 80146ba:	07d6      	lsls	r6, r2, #31
 80146bc:	d528      	bpl.n	8014710 <__sflush_r+0xb8>
 80146be:	2200      	movs	r2, #0
 80146c0:	6062      	str	r2, [r4, #4]
 80146c2:	04d9      	lsls	r1, r3, #19
 80146c4:	6922      	ldr	r2, [r4, #16]
 80146c6:	6022      	str	r2, [r4, #0]
 80146c8:	d504      	bpl.n	80146d4 <__sflush_r+0x7c>
 80146ca:	1c42      	adds	r2, r0, #1
 80146cc:	d101      	bne.n	80146d2 <__sflush_r+0x7a>
 80146ce:	682b      	ldr	r3, [r5, #0]
 80146d0:	b903      	cbnz	r3, 80146d4 <__sflush_r+0x7c>
 80146d2:	6560      	str	r0, [r4, #84]	; 0x54
 80146d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80146d6:	602f      	str	r7, [r5, #0]
 80146d8:	2900      	cmp	r1, #0
 80146da:	d0ca      	beq.n	8014672 <__sflush_r+0x1a>
 80146dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80146e0:	4299      	cmp	r1, r3
 80146e2:	d002      	beq.n	80146ea <__sflush_r+0x92>
 80146e4:	4628      	mov	r0, r5
 80146e6:	f7ff fd79 	bl	80141dc <_free_r>
 80146ea:	2000      	movs	r0, #0
 80146ec:	6360      	str	r0, [r4, #52]	; 0x34
 80146ee:	e7c1      	b.n	8014674 <__sflush_r+0x1c>
 80146f0:	6a21      	ldr	r1, [r4, #32]
 80146f2:	2301      	movs	r3, #1
 80146f4:	4628      	mov	r0, r5
 80146f6:	47b0      	blx	r6
 80146f8:	1c41      	adds	r1, r0, #1
 80146fa:	d1c7      	bne.n	801468c <__sflush_r+0x34>
 80146fc:	682b      	ldr	r3, [r5, #0]
 80146fe:	2b00      	cmp	r3, #0
 8014700:	d0c4      	beq.n	801468c <__sflush_r+0x34>
 8014702:	2b1d      	cmp	r3, #29
 8014704:	d001      	beq.n	801470a <__sflush_r+0xb2>
 8014706:	2b16      	cmp	r3, #22
 8014708:	d101      	bne.n	801470e <__sflush_r+0xb6>
 801470a:	602f      	str	r7, [r5, #0]
 801470c:	e7b1      	b.n	8014672 <__sflush_r+0x1a>
 801470e:	89a3      	ldrh	r3, [r4, #12]
 8014710:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014714:	81a3      	strh	r3, [r4, #12]
 8014716:	e7ad      	b.n	8014674 <__sflush_r+0x1c>
 8014718:	690f      	ldr	r7, [r1, #16]
 801471a:	2f00      	cmp	r7, #0
 801471c:	d0a9      	beq.n	8014672 <__sflush_r+0x1a>
 801471e:	0793      	lsls	r3, r2, #30
 8014720:	680e      	ldr	r6, [r1, #0]
 8014722:	bf08      	it	eq
 8014724:	694b      	ldreq	r3, [r1, #20]
 8014726:	600f      	str	r7, [r1, #0]
 8014728:	bf18      	it	ne
 801472a:	2300      	movne	r3, #0
 801472c:	eba6 0807 	sub.w	r8, r6, r7
 8014730:	608b      	str	r3, [r1, #8]
 8014732:	f1b8 0f00 	cmp.w	r8, #0
 8014736:	dd9c      	ble.n	8014672 <__sflush_r+0x1a>
 8014738:	6a21      	ldr	r1, [r4, #32]
 801473a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801473c:	4643      	mov	r3, r8
 801473e:	463a      	mov	r2, r7
 8014740:	4628      	mov	r0, r5
 8014742:	47b0      	blx	r6
 8014744:	2800      	cmp	r0, #0
 8014746:	dc06      	bgt.n	8014756 <__sflush_r+0xfe>
 8014748:	89a3      	ldrh	r3, [r4, #12]
 801474a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801474e:	81a3      	strh	r3, [r4, #12]
 8014750:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014754:	e78e      	b.n	8014674 <__sflush_r+0x1c>
 8014756:	4407      	add	r7, r0
 8014758:	eba8 0800 	sub.w	r8, r8, r0
 801475c:	e7e9      	b.n	8014732 <__sflush_r+0xda>
 801475e:	bf00      	nop
 8014760:	20400001 	.word	0x20400001

08014764 <_fflush_r>:
 8014764:	b538      	push	{r3, r4, r5, lr}
 8014766:	690b      	ldr	r3, [r1, #16]
 8014768:	4605      	mov	r5, r0
 801476a:	460c      	mov	r4, r1
 801476c:	b913      	cbnz	r3, 8014774 <_fflush_r+0x10>
 801476e:	2500      	movs	r5, #0
 8014770:	4628      	mov	r0, r5
 8014772:	bd38      	pop	{r3, r4, r5, pc}
 8014774:	b118      	cbz	r0, 801477e <_fflush_r+0x1a>
 8014776:	6983      	ldr	r3, [r0, #24]
 8014778:	b90b      	cbnz	r3, 801477e <_fflush_r+0x1a>
 801477a:	f000 f887 	bl	801488c <__sinit>
 801477e:	4b14      	ldr	r3, [pc, #80]	; (80147d0 <_fflush_r+0x6c>)
 8014780:	429c      	cmp	r4, r3
 8014782:	d11b      	bne.n	80147bc <_fflush_r+0x58>
 8014784:	686c      	ldr	r4, [r5, #4]
 8014786:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801478a:	2b00      	cmp	r3, #0
 801478c:	d0ef      	beq.n	801476e <_fflush_r+0xa>
 801478e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014790:	07d0      	lsls	r0, r2, #31
 8014792:	d404      	bmi.n	801479e <_fflush_r+0x3a>
 8014794:	0599      	lsls	r1, r3, #22
 8014796:	d402      	bmi.n	801479e <_fflush_r+0x3a>
 8014798:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801479a:	f000 f915 	bl	80149c8 <__retarget_lock_acquire_recursive>
 801479e:	4628      	mov	r0, r5
 80147a0:	4621      	mov	r1, r4
 80147a2:	f7ff ff59 	bl	8014658 <__sflush_r>
 80147a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80147a8:	07da      	lsls	r2, r3, #31
 80147aa:	4605      	mov	r5, r0
 80147ac:	d4e0      	bmi.n	8014770 <_fflush_r+0xc>
 80147ae:	89a3      	ldrh	r3, [r4, #12]
 80147b0:	059b      	lsls	r3, r3, #22
 80147b2:	d4dd      	bmi.n	8014770 <_fflush_r+0xc>
 80147b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80147b6:	f000 f908 	bl	80149ca <__retarget_lock_release_recursive>
 80147ba:	e7d9      	b.n	8014770 <_fflush_r+0xc>
 80147bc:	4b05      	ldr	r3, [pc, #20]	; (80147d4 <_fflush_r+0x70>)
 80147be:	429c      	cmp	r4, r3
 80147c0:	d101      	bne.n	80147c6 <_fflush_r+0x62>
 80147c2:	68ac      	ldr	r4, [r5, #8]
 80147c4:	e7df      	b.n	8014786 <_fflush_r+0x22>
 80147c6:	4b04      	ldr	r3, [pc, #16]	; (80147d8 <_fflush_r+0x74>)
 80147c8:	429c      	cmp	r4, r3
 80147ca:	bf08      	it	eq
 80147cc:	68ec      	ldreq	r4, [r5, #12]
 80147ce:	e7da      	b.n	8014786 <_fflush_r+0x22>
 80147d0:	08015538 	.word	0x08015538
 80147d4:	08015558 	.word	0x08015558
 80147d8:	08015518 	.word	0x08015518

080147dc <std>:
 80147dc:	2300      	movs	r3, #0
 80147de:	b510      	push	{r4, lr}
 80147e0:	4604      	mov	r4, r0
 80147e2:	e9c0 3300 	strd	r3, r3, [r0]
 80147e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80147ea:	6083      	str	r3, [r0, #8]
 80147ec:	8181      	strh	r1, [r0, #12]
 80147ee:	6643      	str	r3, [r0, #100]	; 0x64
 80147f0:	81c2      	strh	r2, [r0, #14]
 80147f2:	6183      	str	r3, [r0, #24]
 80147f4:	4619      	mov	r1, r3
 80147f6:	2208      	movs	r2, #8
 80147f8:	305c      	adds	r0, #92	; 0x5c
 80147fa:	f7ff fce7 	bl	80141cc <memset>
 80147fe:	4b05      	ldr	r3, [pc, #20]	; (8014814 <std+0x38>)
 8014800:	6263      	str	r3, [r4, #36]	; 0x24
 8014802:	4b05      	ldr	r3, [pc, #20]	; (8014818 <std+0x3c>)
 8014804:	62a3      	str	r3, [r4, #40]	; 0x28
 8014806:	4b05      	ldr	r3, [pc, #20]	; (801481c <std+0x40>)
 8014808:	62e3      	str	r3, [r4, #44]	; 0x2c
 801480a:	4b05      	ldr	r3, [pc, #20]	; (8014820 <std+0x44>)
 801480c:	6224      	str	r4, [r4, #32]
 801480e:	6323      	str	r3, [r4, #48]	; 0x30
 8014810:	bd10      	pop	{r4, pc}
 8014812:	bf00      	nop
 8014814:	0801508d 	.word	0x0801508d
 8014818:	080150af 	.word	0x080150af
 801481c:	080150e7 	.word	0x080150e7
 8014820:	0801510b 	.word	0x0801510b

08014824 <_cleanup_r>:
 8014824:	4901      	ldr	r1, [pc, #4]	; (801482c <_cleanup_r+0x8>)
 8014826:	f000 b8af 	b.w	8014988 <_fwalk_reent>
 801482a:	bf00      	nop
 801482c:	08014765 	.word	0x08014765

08014830 <__sfmoreglue>:
 8014830:	b570      	push	{r4, r5, r6, lr}
 8014832:	2268      	movs	r2, #104	; 0x68
 8014834:	1e4d      	subs	r5, r1, #1
 8014836:	4355      	muls	r5, r2
 8014838:	460e      	mov	r6, r1
 801483a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801483e:	f7ff fd39 	bl	80142b4 <_malloc_r>
 8014842:	4604      	mov	r4, r0
 8014844:	b140      	cbz	r0, 8014858 <__sfmoreglue+0x28>
 8014846:	2100      	movs	r1, #0
 8014848:	e9c0 1600 	strd	r1, r6, [r0]
 801484c:	300c      	adds	r0, #12
 801484e:	60a0      	str	r0, [r4, #8]
 8014850:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014854:	f7ff fcba 	bl	80141cc <memset>
 8014858:	4620      	mov	r0, r4
 801485a:	bd70      	pop	{r4, r5, r6, pc}

0801485c <__sfp_lock_acquire>:
 801485c:	4801      	ldr	r0, [pc, #4]	; (8014864 <__sfp_lock_acquire+0x8>)
 801485e:	f000 b8b3 	b.w	80149c8 <__retarget_lock_acquire_recursive>
 8014862:	bf00      	nop
 8014864:	240050d5 	.word	0x240050d5

08014868 <__sfp_lock_release>:
 8014868:	4801      	ldr	r0, [pc, #4]	; (8014870 <__sfp_lock_release+0x8>)
 801486a:	f000 b8ae 	b.w	80149ca <__retarget_lock_release_recursive>
 801486e:	bf00      	nop
 8014870:	240050d5 	.word	0x240050d5

08014874 <__sinit_lock_acquire>:
 8014874:	4801      	ldr	r0, [pc, #4]	; (801487c <__sinit_lock_acquire+0x8>)
 8014876:	f000 b8a7 	b.w	80149c8 <__retarget_lock_acquire_recursive>
 801487a:	bf00      	nop
 801487c:	240050d6 	.word	0x240050d6

08014880 <__sinit_lock_release>:
 8014880:	4801      	ldr	r0, [pc, #4]	; (8014888 <__sinit_lock_release+0x8>)
 8014882:	f000 b8a2 	b.w	80149ca <__retarget_lock_release_recursive>
 8014886:	bf00      	nop
 8014888:	240050d6 	.word	0x240050d6

0801488c <__sinit>:
 801488c:	b510      	push	{r4, lr}
 801488e:	4604      	mov	r4, r0
 8014890:	f7ff fff0 	bl	8014874 <__sinit_lock_acquire>
 8014894:	69a3      	ldr	r3, [r4, #24]
 8014896:	b11b      	cbz	r3, 80148a0 <__sinit+0x14>
 8014898:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801489c:	f7ff bff0 	b.w	8014880 <__sinit_lock_release>
 80148a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80148a4:	6523      	str	r3, [r4, #80]	; 0x50
 80148a6:	4b13      	ldr	r3, [pc, #76]	; (80148f4 <__sinit+0x68>)
 80148a8:	4a13      	ldr	r2, [pc, #76]	; (80148f8 <__sinit+0x6c>)
 80148aa:	681b      	ldr	r3, [r3, #0]
 80148ac:	62a2      	str	r2, [r4, #40]	; 0x28
 80148ae:	42a3      	cmp	r3, r4
 80148b0:	bf04      	itt	eq
 80148b2:	2301      	moveq	r3, #1
 80148b4:	61a3      	streq	r3, [r4, #24]
 80148b6:	4620      	mov	r0, r4
 80148b8:	f000 f820 	bl	80148fc <__sfp>
 80148bc:	6060      	str	r0, [r4, #4]
 80148be:	4620      	mov	r0, r4
 80148c0:	f000 f81c 	bl	80148fc <__sfp>
 80148c4:	60a0      	str	r0, [r4, #8]
 80148c6:	4620      	mov	r0, r4
 80148c8:	f000 f818 	bl	80148fc <__sfp>
 80148cc:	2200      	movs	r2, #0
 80148ce:	60e0      	str	r0, [r4, #12]
 80148d0:	2104      	movs	r1, #4
 80148d2:	6860      	ldr	r0, [r4, #4]
 80148d4:	f7ff ff82 	bl	80147dc <std>
 80148d8:	68a0      	ldr	r0, [r4, #8]
 80148da:	2201      	movs	r2, #1
 80148dc:	2109      	movs	r1, #9
 80148de:	f7ff ff7d 	bl	80147dc <std>
 80148e2:	68e0      	ldr	r0, [r4, #12]
 80148e4:	2202      	movs	r2, #2
 80148e6:	2112      	movs	r1, #18
 80148e8:	f7ff ff78 	bl	80147dc <std>
 80148ec:	2301      	movs	r3, #1
 80148ee:	61a3      	str	r3, [r4, #24]
 80148f0:	e7d2      	b.n	8014898 <__sinit+0xc>
 80148f2:	bf00      	nop
 80148f4:	08015514 	.word	0x08015514
 80148f8:	08014825 	.word	0x08014825

080148fc <__sfp>:
 80148fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80148fe:	4607      	mov	r7, r0
 8014900:	f7ff ffac 	bl	801485c <__sfp_lock_acquire>
 8014904:	4b1e      	ldr	r3, [pc, #120]	; (8014980 <__sfp+0x84>)
 8014906:	681e      	ldr	r6, [r3, #0]
 8014908:	69b3      	ldr	r3, [r6, #24]
 801490a:	b913      	cbnz	r3, 8014912 <__sfp+0x16>
 801490c:	4630      	mov	r0, r6
 801490e:	f7ff ffbd 	bl	801488c <__sinit>
 8014912:	3648      	adds	r6, #72	; 0x48
 8014914:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014918:	3b01      	subs	r3, #1
 801491a:	d503      	bpl.n	8014924 <__sfp+0x28>
 801491c:	6833      	ldr	r3, [r6, #0]
 801491e:	b30b      	cbz	r3, 8014964 <__sfp+0x68>
 8014920:	6836      	ldr	r6, [r6, #0]
 8014922:	e7f7      	b.n	8014914 <__sfp+0x18>
 8014924:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014928:	b9d5      	cbnz	r5, 8014960 <__sfp+0x64>
 801492a:	4b16      	ldr	r3, [pc, #88]	; (8014984 <__sfp+0x88>)
 801492c:	60e3      	str	r3, [r4, #12]
 801492e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014932:	6665      	str	r5, [r4, #100]	; 0x64
 8014934:	f000 f847 	bl	80149c6 <__retarget_lock_init_recursive>
 8014938:	f7ff ff96 	bl	8014868 <__sfp_lock_release>
 801493c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014940:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014944:	6025      	str	r5, [r4, #0]
 8014946:	61a5      	str	r5, [r4, #24]
 8014948:	2208      	movs	r2, #8
 801494a:	4629      	mov	r1, r5
 801494c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014950:	f7ff fc3c 	bl	80141cc <memset>
 8014954:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014958:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801495c:	4620      	mov	r0, r4
 801495e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014960:	3468      	adds	r4, #104	; 0x68
 8014962:	e7d9      	b.n	8014918 <__sfp+0x1c>
 8014964:	2104      	movs	r1, #4
 8014966:	4638      	mov	r0, r7
 8014968:	f7ff ff62 	bl	8014830 <__sfmoreglue>
 801496c:	4604      	mov	r4, r0
 801496e:	6030      	str	r0, [r6, #0]
 8014970:	2800      	cmp	r0, #0
 8014972:	d1d5      	bne.n	8014920 <__sfp+0x24>
 8014974:	f7ff ff78 	bl	8014868 <__sfp_lock_release>
 8014978:	230c      	movs	r3, #12
 801497a:	603b      	str	r3, [r7, #0]
 801497c:	e7ee      	b.n	801495c <__sfp+0x60>
 801497e:	bf00      	nop
 8014980:	08015514 	.word	0x08015514
 8014984:	ffff0001 	.word	0xffff0001

08014988 <_fwalk_reent>:
 8014988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801498c:	4606      	mov	r6, r0
 801498e:	4688      	mov	r8, r1
 8014990:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014994:	2700      	movs	r7, #0
 8014996:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801499a:	f1b9 0901 	subs.w	r9, r9, #1
 801499e:	d505      	bpl.n	80149ac <_fwalk_reent+0x24>
 80149a0:	6824      	ldr	r4, [r4, #0]
 80149a2:	2c00      	cmp	r4, #0
 80149a4:	d1f7      	bne.n	8014996 <_fwalk_reent+0xe>
 80149a6:	4638      	mov	r0, r7
 80149a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80149ac:	89ab      	ldrh	r3, [r5, #12]
 80149ae:	2b01      	cmp	r3, #1
 80149b0:	d907      	bls.n	80149c2 <_fwalk_reent+0x3a>
 80149b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80149b6:	3301      	adds	r3, #1
 80149b8:	d003      	beq.n	80149c2 <_fwalk_reent+0x3a>
 80149ba:	4629      	mov	r1, r5
 80149bc:	4630      	mov	r0, r6
 80149be:	47c0      	blx	r8
 80149c0:	4307      	orrs	r7, r0
 80149c2:	3568      	adds	r5, #104	; 0x68
 80149c4:	e7e9      	b.n	801499a <_fwalk_reent+0x12>

080149c6 <__retarget_lock_init_recursive>:
 80149c6:	4770      	bx	lr

080149c8 <__retarget_lock_acquire_recursive>:
 80149c8:	4770      	bx	lr

080149ca <__retarget_lock_release_recursive>:
 80149ca:	4770      	bx	lr

080149cc <__swhatbuf_r>:
 80149cc:	b570      	push	{r4, r5, r6, lr}
 80149ce:	460e      	mov	r6, r1
 80149d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80149d4:	2900      	cmp	r1, #0
 80149d6:	b096      	sub	sp, #88	; 0x58
 80149d8:	4614      	mov	r4, r2
 80149da:	461d      	mov	r5, r3
 80149dc:	da08      	bge.n	80149f0 <__swhatbuf_r+0x24>
 80149de:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80149e2:	2200      	movs	r2, #0
 80149e4:	602a      	str	r2, [r5, #0]
 80149e6:	061a      	lsls	r2, r3, #24
 80149e8:	d410      	bmi.n	8014a0c <__swhatbuf_r+0x40>
 80149ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80149ee:	e00e      	b.n	8014a0e <__swhatbuf_r+0x42>
 80149f0:	466a      	mov	r2, sp
 80149f2:	f000 fbb1 	bl	8015158 <_fstat_r>
 80149f6:	2800      	cmp	r0, #0
 80149f8:	dbf1      	blt.n	80149de <__swhatbuf_r+0x12>
 80149fa:	9a01      	ldr	r2, [sp, #4]
 80149fc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014a00:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014a04:	425a      	negs	r2, r3
 8014a06:	415a      	adcs	r2, r3
 8014a08:	602a      	str	r2, [r5, #0]
 8014a0a:	e7ee      	b.n	80149ea <__swhatbuf_r+0x1e>
 8014a0c:	2340      	movs	r3, #64	; 0x40
 8014a0e:	2000      	movs	r0, #0
 8014a10:	6023      	str	r3, [r4, #0]
 8014a12:	b016      	add	sp, #88	; 0x58
 8014a14:	bd70      	pop	{r4, r5, r6, pc}
	...

08014a18 <__smakebuf_r>:
 8014a18:	898b      	ldrh	r3, [r1, #12]
 8014a1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014a1c:	079d      	lsls	r5, r3, #30
 8014a1e:	4606      	mov	r6, r0
 8014a20:	460c      	mov	r4, r1
 8014a22:	d507      	bpl.n	8014a34 <__smakebuf_r+0x1c>
 8014a24:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014a28:	6023      	str	r3, [r4, #0]
 8014a2a:	6123      	str	r3, [r4, #16]
 8014a2c:	2301      	movs	r3, #1
 8014a2e:	6163      	str	r3, [r4, #20]
 8014a30:	b002      	add	sp, #8
 8014a32:	bd70      	pop	{r4, r5, r6, pc}
 8014a34:	ab01      	add	r3, sp, #4
 8014a36:	466a      	mov	r2, sp
 8014a38:	f7ff ffc8 	bl	80149cc <__swhatbuf_r>
 8014a3c:	9900      	ldr	r1, [sp, #0]
 8014a3e:	4605      	mov	r5, r0
 8014a40:	4630      	mov	r0, r6
 8014a42:	f7ff fc37 	bl	80142b4 <_malloc_r>
 8014a46:	b948      	cbnz	r0, 8014a5c <__smakebuf_r+0x44>
 8014a48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014a4c:	059a      	lsls	r2, r3, #22
 8014a4e:	d4ef      	bmi.n	8014a30 <__smakebuf_r+0x18>
 8014a50:	f023 0303 	bic.w	r3, r3, #3
 8014a54:	f043 0302 	orr.w	r3, r3, #2
 8014a58:	81a3      	strh	r3, [r4, #12]
 8014a5a:	e7e3      	b.n	8014a24 <__smakebuf_r+0xc>
 8014a5c:	4b0d      	ldr	r3, [pc, #52]	; (8014a94 <__smakebuf_r+0x7c>)
 8014a5e:	62b3      	str	r3, [r6, #40]	; 0x28
 8014a60:	89a3      	ldrh	r3, [r4, #12]
 8014a62:	6020      	str	r0, [r4, #0]
 8014a64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014a68:	81a3      	strh	r3, [r4, #12]
 8014a6a:	9b00      	ldr	r3, [sp, #0]
 8014a6c:	6163      	str	r3, [r4, #20]
 8014a6e:	9b01      	ldr	r3, [sp, #4]
 8014a70:	6120      	str	r0, [r4, #16]
 8014a72:	b15b      	cbz	r3, 8014a8c <__smakebuf_r+0x74>
 8014a74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014a78:	4630      	mov	r0, r6
 8014a7a:	f000 fb7f 	bl	801517c <_isatty_r>
 8014a7e:	b128      	cbz	r0, 8014a8c <__smakebuf_r+0x74>
 8014a80:	89a3      	ldrh	r3, [r4, #12]
 8014a82:	f023 0303 	bic.w	r3, r3, #3
 8014a86:	f043 0301 	orr.w	r3, r3, #1
 8014a8a:	81a3      	strh	r3, [r4, #12]
 8014a8c:	89a0      	ldrh	r0, [r4, #12]
 8014a8e:	4305      	orrs	r5, r0
 8014a90:	81a5      	strh	r5, [r4, #12]
 8014a92:	e7cd      	b.n	8014a30 <__smakebuf_r+0x18>
 8014a94:	08014825 	.word	0x08014825

08014a98 <__malloc_lock>:
 8014a98:	4801      	ldr	r0, [pc, #4]	; (8014aa0 <__malloc_lock+0x8>)
 8014a9a:	f7ff bf95 	b.w	80149c8 <__retarget_lock_acquire_recursive>
 8014a9e:	bf00      	nop
 8014aa0:	240050d4 	.word	0x240050d4

08014aa4 <__malloc_unlock>:
 8014aa4:	4801      	ldr	r0, [pc, #4]	; (8014aac <__malloc_unlock+0x8>)
 8014aa6:	f7ff bf90 	b.w	80149ca <__retarget_lock_release_recursive>
 8014aaa:	bf00      	nop
 8014aac:	240050d4 	.word	0x240050d4

08014ab0 <__sfputc_r>:
 8014ab0:	6893      	ldr	r3, [r2, #8]
 8014ab2:	3b01      	subs	r3, #1
 8014ab4:	2b00      	cmp	r3, #0
 8014ab6:	b410      	push	{r4}
 8014ab8:	6093      	str	r3, [r2, #8]
 8014aba:	da08      	bge.n	8014ace <__sfputc_r+0x1e>
 8014abc:	6994      	ldr	r4, [r2, #24]
 8014abe:	42a3      	cmp	r3, r4
 8014ac0:	db01      	blt.n	8014ac6 <__sfputc_r+0x16>
 8014ac2:	290a      	cmp	r1, #10
 8014ac4:	d103      	bne.n	8014ace <__sfputc_r+0x1e>
 8014ac6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014aca:	f7ff bd05 	b.w	80144d8 <__swbuf_r>
 8014ace:	6813      	ldr	r3, [r2, #0]
 8014ad0:	1c58      	adds	r0, r3, #1
 8014ad2:	6010      	str	r0, [r2, #0]
 8014ad4:	7019      	strb	r1, [r3, #0]
 8014ad6:	4608      	mov	r0, r1
 8014ad8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014adc:	4770      	bx	lr

08014ade <__sfputs_r>:
 8014ade:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ae0:	4606      	mov	r6, r0
 8014ae2:	460f      	mov	r7, r1
 8014ae4:	4614      	mov	r4, r2
 8014ae6:	18d5      	adds	r5, r2, r3
 8014ae8:	42ac      	cmp	r4, r5
 8014aea:	d101      	bne.n	8014af0 <__sfputs_r+0x12>
 8014aec:	2000      	movs	r0, #0
 8014aee:	e007      	b.n	8014b00 <__sfputs_r+0x22>
 8014af0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014af4:	463a      	mov	r2, r7
 8014af6:	4630      	mov	r0, r6
 8014af8:	f7ff ffda 	bl	8014ab0 <__sfputc_r>
 8014afc:	1c43      	adds	r3, r0, #1
 8014afe:	d1f3      	bne.n	8014ae8 <__sfputs_r+0xa>
 8014b00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014b04 <_vfiprintf_r>:
 8014b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b08:	460d      	mov	r5, r1
 8014b0a:	b09d      	sub	sp, #116	; 0x74
 8014b0c:	4614      	mov	r4, r2
 8014b0e:	4698      	mov	r8, r3
 8014b10:	4606      	mov	r6, r0
 8014b12:	b118      	cbz	r0, 8014b1c <_vfiprintf_r+0x18>
 8014b14:	6983      	ldr	r3, [r0, #24]
 8014b16:	b90b      	cbnz	r3, 8014b1c <_vfiprintf_r+0x18>
 8014b18:	f7ff feb8 	bl	801488c <__sinit>
 8014b1c:	4b89      	ldr	r3, [pc, #548]	; (8014d44 <_vfiprintf_r+0x240>)
 8014b1e:	429d      	cmp	r5, r3
 8014b20:	d11b      	bne.n	8014b5a <_vfiprintf_r+0x56>
 8014b22:	6875      	ldr	r5, [r6, #4]
 8014b24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014b26:	07d9      	lsls	r1, r3, #31
 8014b28:	d405      	bmi.n	8014b36 <_vfiprintf_r+0x32>
 8014b2a:	89ab      	ldrh	r3, [r5, #12]
 8014b2c:	059a      	lsls	r2, r3, #22
 8014b2e:	d402      	bmi.n	8014b36 <_vfiprintf_r+0x32>
 8014b30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014b32:	f7ff ff49 	bl	80149c8 <__retarget_lock_acquire_recursive>
 8014b36:	89ab      	ldrh	r3, [r5, #12]
 8014b38:	071b      	lsls	r3, r3, #28
 8014b3a:	d501      	bpl.n	8014b40 <_vfiprintf_r+0x3c>
 8014b3c:	692b      	ldr	r3, [r5, #16]
 8014b3e:	b9eb      	cbnz	r3, 8014b7c <_vfiprintf_r+0x78>
 8014b40:	4629      	mov	r1, r5
 8014b42:	4630      	mov	r0, r6
 8014b44:	f7ff fd1a 	bl	801457c <__swsetup_r>
 8014b48:	b1c0      	cbz	r0, 8014b7c <_vfiprintf_r+0x78>
 8014b4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014b4c:	07dc      	lsls	r4, r3, #31
 8014b4e:	d50e      	bpl.n	8014b6e <_vfiprintf_r+0x6a>
 8014b50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014b54:	b01d      	add	sp, #116	; 0x74
 8014b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b5a:	4b7b      	ldr	r3, [pc, #492]	; (8014d48 <_vfiprintf_r+0x244>)
 8014b5c:	429d      	cmp	r5, r3
 8014b5e:	d101      	bne.n	8014b64 <_vfiprintf_r+0x60>
 8014b60:	68b5      	ldr	r5, [r6, #8]
 8014b62:	e7df      	b.n	8014b24 <_vfiprintf_r+0x20>
 8014b64:	4b79      	ldr	r3, [pc, #484]	; (8014d4c <_vfiprintf_r+0x248>)
 8014b66:	429d      	cmp	r5, r3
 8014b68:	bf08      	it	eq
 8014b6a:	68f5      	ldreq	r5, [r6, #12]
 8014b6c:	e7da      	b.n	8014b24 <_vfiprintf_r+0x20>
 8014b6e:	89ab      	ldrh	r3, [r5, #12]
 8014b70:	0598      	lsls	r0, r3, #22
 8014b72:	d4ed      	bmi.n	8014b50 <_vfiprintf_r+0x4c>
 8014b74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014b76:	f7ff ff28 	bl	80149ca <__retarget_lock_release_recursive>
 8014b7a:	e7e9      	b.n	8014b50 <_vfiprintf_r+0x4c>
 8014b7c:	2300      	movs	r3, #0
 8014b7e:	9309      	str	r3, [sp, #36]	; 0x24
 8014b80:	2320      	movs	r3, #32
 8014b82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014b86:	f8cd 800c 	str.w	r8, [sp, #12]
 8014b8a:	2330      	movs	r3, #48	; 0x30
 8014b8c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014d50 <_vfiprintf_r+0x24c>
 8014b90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014b94:	f04f 0901 	mov.w	r9, #1
 8014b98:	4623      	mov	r3, r4
 8014b9a:	469a      	mov	sl, r3
 8014b9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014ba0:	b10a      	cbz	r2, 8014ba6 <_vfiprintf_r+0xa2>
 8014ba2:	2a25      	cmp	r2, #37	; 0x25
 8014ba4:	d1f9      	bne.n	8014b9a <_vfiprintf_r+0x96>
 8014ba6:	ebba 0b04 	subs.w	fp, sl, r4
 8014baa:	d00b      	beq.n	8014bc4 <_vfiprintf_r+0xc0>
 8014bac:	465b      	mov	r3, fp
 8014bae:	4622      	mov	r2, r4
 8014bb0:	4629      	mov	r1, r5
 8014bb2:	4630      	mov	r0, r6
 8014bb4:	f7ff ff93 	bl	8014ade <__sfputs_r>
 8014bb8:	3001      	adds	r0, #1
 8014bba:	f000 80aa 	beq.w	8014d12 <_vfiprintf_r+0x20e>
 8014bbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014bc0:	445a      	add	r2, fp
 8014bc2:	9209      	str	r2, [sp, #36]	; 0x24
 8014bc4:	f89a 3000 	ldrb.w	r3, [sl]
 8014bc8:	2b00      	cmp	r3, #0
 8014bca:	f000 80a2 	beq.w	8014d12 <_vfiprintf_r+0x20e>
 8014bce:	2300      	movs	r3, #0
 8014bd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014bd4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014bd8:	f10a 0a01 	add.w	sl, sl, #1
 8014bdc:	9304      	str	r3, [sp, #16]
 8014bde:	9307      	str	r3, [sp, #28]
 8014be0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014be4:	931a      	str	r3, [sp, #104]	; 0x68
 8014be6:	4654      	mov	r4, sl
 8014be8:	2205      	movs	r2, #5
 8014bea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014bee:	4858      	ldr	r0, [pc, #352]	; (8014d50 <_vfiprintf_r+0x24c>)
 8014bf0:	f7eb fb76 	bl	80002e0 <memchr>
 8014bf4:	9a04      	ldr	r2, [sp, #16]
 8014bf6:	b9d8      	cbnz	r0, 8014c30 <_vfiprintf_r+0x12c>
 8014bf8:	06d1      	lsls	r1, r2, #27
 8014bfa:	bf44      	itt	mi
 8014bfc:	2320      	movmi	r3, #32
 8014bfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014c02:	0713      	lsls	r3, r2, #28
 8014c04:	bf44      	itt	mi
 8014c06:	232b      	movmi	r3, #43	; 0x2b
 8014c08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014c0c:	f89a 3000 	ldrb.w	r3, [sl]
 8014c10:	2b2a      	cmp	r3, #42	; 0x2a
 8014c12:	d015      	beq.n	8014c40 <_vfiprintf_r+0x13c>
 8014c14:	9a07      	ldr	r2, [sp, #28]
 8014c16:	4654      	mov	r4, sl
 8014c18:	2000      	movs	r0, #0
 8014c1a:	f04f 0c0a 	mov.w	ip, #10
 8014c1e:	4621      	mov	r1, r4
 8014c20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014c24:	3b30      	subs	r3, #48	; 0x30
 8014c26:	2b09      	cmp	r3, #9
 8014c28:	d94e      	bls.n	8014cc8 <_vfiprintf_r+0x1c4>
 8014c2a:	b1b0      	cbz	r0, 8014c5a <_vfiprintf_r+0x156>
 8014c2c:	9207      	str	r2, [sp, #28]
 8014c2e:	e014      	b.n	8014c5a <_vfiprintf_r+0x156>
 8014c30:	eba0 0308 	sub.w	r3, r0, r8
 8014c34:	fa09 f303 	lsl.w	r3, r9, r3
 8014c38:	4313      	orrs	r3, r2
 8014c3a:	9304      	str	r3, [sp, #16]
 8014c3c:	46a2      	mov	sl, r4
 8014c3e:	e7d2      	b.n	8014be6 <_vfiprintf_r+0xe2>
 8014c40:	9b03      	ldr	r3, [sp, #12]
 8014c42:	1d19      	adds	r1, r3, #4
 8014c44:	681b      	ldr	r3, [r3, #0]
 8014c46:	9103      	str	r1, [sp, #12]
 8014c48:	2b00      	cmp	r3, #0
 8014c4a:	bfbb      	ittet	lt
 8014c4c:	425b      	neglt	r3, r3
 8014c4e:	f042 0202 	orrlt.w	r2, r2, #2
 8014c52:	9307      	strge	r3, [sp, #28]
 8014c54:	9307      	strlt	r3, [sp, #28]
 8014c56:	bfb8      	it	lt
 8014c58:	9204      	strlt	r2, [sp, #16]
 8014c5a:	7823      	ldrb	r3, [r4, #0]
 8014c5c:	2b2e      	cmp	r3, #46	; 0x2e
 8014c5e:	d10c      	bne.n	8014c7a <_vfiprintf_r+0x176>
 8014c60:	7863      	ldrb	r3, [r4, #1]
 8014c62:	2b2a      	cmp	r3, #42	; 0x2a
 8014c64:	d135      	bne.n	8014cd2 <_vfiprintf_r+0x1ce>
 8014c66:	9b03      	ldr	r3, [sp, #12]
 8014c68:	1d1a      	adds	r2, r3, #4
 8014c6a:	681b      	ldr	r3, [r3, #0]
 8014c6c:	9203      	str	r2, [sp, #12]
 8014c6e:	2b00      	cmp	r3, #0
 8014c70:	bfb8      	it	lt
 8014c72:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8014c76:	3402      	adds	r4, #2
 8014c78:	9305      	str	r3, [sp, #20]
 8014c7a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014d60 <_vfiprintf_r+0x25c>
 8014c7e:	7821      	ldrb	r1, [r4, #0]
 8014c80:	2203      	movs	r2, #3
 8014c82:	4650      	mov	r0, sl
 8014c84:	f7eb fb2c 	bl	80002e0 <memchr>
 8014c88:	b140      	cbz	r0, 8014c9c <_vfiprintf_r+0x198>
 8014c8a:	2340      	movs	r3, #64	; 0x40
 8014c8c:	eba0 000a 	sub.w	r0, r0, sl
 8014c90:	fa03 f000 	lsl.w	r0, r3, r0
 8014c94:	9b04      	ldr	r3, [sp, #16]
 8014c96:	4303      	orrs	r3, r0
 8014c98:	3401      	adds	r4, #1
 8014c9a:	9304      	str	r3, [sp, #16]
 8014c9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014ca0:	482c      	ldr	r0, [pc, #176]	; (8014d54 <_vfiprintf_r+0x250>)
 8014ca2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014ca6:	2206      	movs	r2, #6
 8014ca8:	f7eb fb1a 	bl	80002e0 <memchr>
 8014cac:	2800      	cmp	r0, #0
 8014cae:	d03f      	beq.n	8014d30 <_vfiprintf_r+0x22c>
 8014cb0:	4b29      	ldr	r3, [pc, #164]	; (8014d58 <_vfiprintf_r+0x254>)
 8014cb2:	bb1b      	cbnz	r3, 8014cfc <_vfiprintf_r+0x1f8>
 8014cb4:	9b03      	ldr	r3, [sp, #12]
 8014cb6:	3307      	adds	r3, #7
 8014cb8:	f023 0307 	bic.w	r3, r3, #7
 8014cbc:	3308      	adds	r3, #8
 8014cbe:	9303      	str	r3, [sp, #12]
 8014cc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014cc2:	443b      	add	r3, r7
 8014cc4:	9309      	str	r3, [sp, #36]	; 0x24
 8014cc6:	e767      	b.n	8014b98 <_vfiprintf_r+0x94>
 8014cc8:	fb0c 3202 	mla	r2, ip, r2, r3
 8014ccc:	460c      	mov	r4, r1
 8014cce:	2001      	movs	r0, #1
 8014cd0:	e7a5      	b.n	8014c1e <_vfiprintf_r+0x11a>
 8014cd2:	2300      	movs	r3, #0
 8014cd4:	3401      	adds	r4, #1
 8014cd6:	9305      	str	r3, [sp, #20]
 8014cd8:	4619      	mov	r1, r3
 8014cda:	f04f 0c0a 	mov.w	ip, #10
 8014cde:	4620      	mov	r0, r4
 8014ce0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014ce4:	3a30      	subs	r2, #48	; 0x30
 8014ce6:	2a09      	cmp	r2, #9
 8014ce8:	d903      	bls.n	8014cf2 <_vfiprintf_r+0x1ee>
 8014cea:	2b00      	cmp	r3, #0
 8014cec:	d0c5      	beq.n	8014c7a <_vfiprintf_r+0x176>
 8014cee:	9105      	str	r1, [sp, #20]
 8014cf0:	e7c3      	b.n	8014c7a <_vfiprintf_r+0x176>
 8014cf2:	fb0c 2101 	mla	r1, ip, r1, r2
 8014cf6:	4604      	mov	r4, r0
 8014cf8:	2301      	movs	r3, #1
 8014cfa:	e7f0      	b.n	8014cde <_vfiprintf_r+0x1da>
 8014cfc:	ab03      	add	r3, sp, #12
 8014cfe:	9300      	str	r3, [sp, #0]
 8014d00:	462a      	mov	r2, r5
 8014d02:	4b16      	ldr	r3, [pc, #88]	; (8014d5c <_vfiprintf_r+0x258>)
 8014d04:	a904      	add	r1, sp, #16
 8014d06:	4630      	mov	r0, r6
 8014d08:	f3af 8000 	nop.w
 8014d0c:	4607      	mov	r7, r0
 8014d0e:	1c78      	adds	r0, r7, #1
 8014d10:	d1d6      	bne.n	8014cc0 <_vfiprintf_r+0x1bc>
 8014d12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014d14:	07d9      	lsls	r1, r3, #31
 8014d16:	d405      	bmi.n	8014d24 <_vfiprintf_r+0x220>
 8014d18:	89ab      	ldrh	r3, [r5, #12]
 8014d1a:	059a      	lsls	r2, r3, #22
 8014d1c:	d402      	bmi.n	8014d24 <_vfiprintf_r+0x220>
 8014d1e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014d20:	f7ff fe53 	bl	80149ca <__retarget_lock_release_recursive>
 8014d24:	89ab      	ldrh	r3, [r5, #12]
 8014d26:	065b      	lsls	r3, r3, #25
 8014d28:	f53f af12 	bmi.w	8014b50 <_vfiprintf_r+0x4c>
 8014d2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014d2e:	e711      	b.n	8014b54 <_vfiprintf_r+0x50>
 8014d30:	ab03      	add	r3, sp, #12
 8014d32:	9300      	str	r3, [sp, #0]
 8014d34:	462a      	mov	r2, r5
 8014d36:	4b09      	ldr	r3, [pc, #36]	; (8014d5c <_vfiprintf_r+0x258>)
 8014d38:	a904      	add	r1, sp, #16
 8014d3a:	4630      	mov	r0, r6
 8014d3c:	f000 f880 	bl	8014e40 <_printf_i>
 8014d40:	e7e4      	b.n	8014d0c <_vfiprintf_r+0x208>
 8014d42:	bf00      	nop
 8014d44:	08015538 	.word	0x08015538
 8014d48:	08015558 	.word	0x08015558
 8014d4c:	08015518 	.word	0x08015518
 8014d50:	08015578 	.word	0x08015578
 8014d54:	08015582 	.word	0x08015582
 8014d58:	00000000 	.word	0x00000000
 8014d5c:	08014adf 	.word	0x08014adf
 8014d60:	0801557e 	.word	0x0801557e

08014d64 <_printf_common>:
 8014d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014d68:	4616      	mov	r6, r2
 8014d6a:	4699      	mov	r9, r3
 8014d6c:	688a      	ldr	r2, [r1, #8]
 8014d6e:	690b      	ldr	r3, [r1, #16]
 8014d70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014d74:	4293      	cmp	r3, r2
 8014d76:	bfb8      	it	lt
 8014d78:	4613      	movlt	r3, r2
 8014d7a:	6033      	str	r3, [r6, #0]
 8014d7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014d80:	4607      	mov	r7, r0
 8014d82:	460c      	mov	r4, r1
 8014d84:	b10a      	cbz	r2, 8014d8a <_printf_common+0x26>
 8014d86:	3301      	adds	r3, #1
 8014d88:	6033      	str	r3, [r6, #0]
 8014d8a:	6823      	ldr	r3, [r4, #0]
 8014d8c:	0699      	lsls	r1, r3, #26
 8014d8e:	bf42      	ittt	mi
 8014d90:	6833      	ldrmi	r3, [r6, #0]
 8014d92:	3302      	addmi	r3, #2
 8014d94:	6033      	strmi	r3, [r6, #0]
 8014d96:	6825      	ldr	r5, [r4, #0]
 8014d98:	f015 0506 	ands.w	r5, r5, #6
 8014d9c:	d106      	bne.n	8014dac <_printf_common+0x48>
 8014d9e:	f104 0a19 	add.w	sl, r4, #25
 8014da2:	68e3      	ldr	r3, [r4, #12]
 8014da4:	6832      	ldr	r2, [r6, #0]
 8014da6:	1a9b      	subs	r3, r3, r2
 8014da8:	42ab      	cmp	r3, r5
 8014daa:	dc26      	bgt.n	8014dfa <_printf_common+0x96>
 8014dac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014db0:	1e13      	subs	r3, r2, #0
 8014db2:	6822      	ldr	r2, [r4, #0]
 8014db4:	bf18      	it	ne
 8014db6:	2301      	movne	r3, #1
 8014db8:	0692      	lsls	r2, r2, #26
 8014dba:	d42b      	bmi.n	8014e14 <_printf_common+0xb0>
 8014dbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014dc0:	4649      	mov	r1, r9
 8014dc2:	4638      	mov	r0, r7
 8014dc4:	47c0      	blx	r8
 8014dc6:	3001      	adds	r0, #1
 8014dc8:	d01e      	beq.n	8014e08 <_printf_common+0xa4>
 8014dca:	6823      	ldr	r3, [r4, #0]
 8014dcc:	68e5      	ldr	r5, [r4, #12]
 8014dce:	6832      	ldr	r2, [r6, #0]
 8014dd0:	f003 0306 	and.w	r3, r3, #6
 8014dd4:	2b04      	cmp	r3, #4
 8014dd6:	bf08      	it	eq
 8014dd8:	1aad      	subeq	r5, r5, r2
 8014dda:	68a3      	ldr	r3, [r4, #8]
 8014ddc:	6922      	ldr	r2, [r4, #16]
 8014dde:	bf0c      	ite	eq
 8014de0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014de4:	2500      	movne	r5, #0
 8014de6:	4293      	cmp	r3, r2
 8014de8:	bfc4      	itt	gt
 8014dea:	1a9b      	subgt	r3, r3, r2
 8014dec:	18ed      	addgt	r5, r5, r3
 8014dee:	2600      	movs	r6, #0
 8014df0:	341a      	adds	r4, #26
 8014df2:	42b5      	cmp	r5, r6
 8014df4:	d11a      	bne.n	8014e2c <_printf_common+0xc8>
 8014df6:	2000      	movs	r0, #0
 8014df8:	e008      	b.n	8014e0c <_printf_common+0xa8>
 8014dfa:	2301      	movs	r3, #1
 8014dfc:	4652      	mov	r2, sl
 8014dfe:	4649      	mov	r1, r9
 8014e00:	4638      	mov	r0, r7
 8014e02:	47c0      	blx	r8
 8014e04:	3001      	adds	r0, #1
 8014e06:	d103      	bne.n	8014e10 <_printf_common+0xac>
 8014e08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014e0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014e10:	3501      	adds	r5, #1
 8014e12:	e7c6      	b.n	8014da2 <_printf_common+0x3e>
 8014e14:	18e1      	adds	r1, r4, r3
 8014e16:	1c5a      	adds	r2, r3, #1
 8014e18:	2030      	movs	r0, #48	; 0x30
 8014e1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014e1e:	4422      	add	r2, r4
 8014e20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014e24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014e28:	3302      	adds	r3, #2
 8014e2a:	e7c7      	b.n	8014dbc <_printf_common+0x58>
 8014e2c:	2301      	movs	r3, #1
 8014e2e:	4622      	mov	r2, r4
 8014e30:	4649      	mov	r1, r9
 8014e32:	4638      	mov	r0, r7
 8014e34:	47c0      	blx	r8
 8014e36:	3001      	adds	r0, #1
 8014e38:	d0e6      	beq.n	8014e08 <_printf_common+0xa4>
 8014e3a:	3601      	adds	r6, #1
 8014e3c:	e7d9      	b.n	8014df2 <_printf_common+0x8e>
	...

08014e40 <_printf_i>:
 8014e40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014e44:	7e0f      	ldrb	r7, [r1, #24]
 8014e46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014e48:	2f78      	cmp	r7, #120	; 0x78
 8014e4a:	4691      	mov	r9, r2
 8014e4c:	4680      	mov	r8, r0
 8014e4e:	460c      	mov	r4, r1
 8014e50:	469a      	mov	sl, r3
 8014e52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8014e56:	d807      	bhi.n	8014e68 <_printf_i+0x28>
 8014e58:	2f62      	cmp	r7, #98	; 0x62
 8014e5a:	d80a      	bhi.n	8014e72 <_printf_i+0x32>
 8014e5c:	2f00      	cmp	r7, #0
 8014e5e:	f000 80d8 	beq.w	8015012 <_printf_i+0x1d2>
 8014e62:	2f58      	cmp	r7, #88	; 0x58
 8014e64:	f000 80a3 	beq.w	8014fae <_printf_i+0x16e>
 8014e68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014e6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014e70:	e03a      	b.n	8014ee8 <_printf_i+0xa8>
 8014e72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014e76:	2b15      	cmp	r3, #21
 8014e78:	d8f6      	bhi.n	8014e68 <_printf_i+0x28>
 8014e7a:	a101      	add	r1, pc, #4	; (adr r1, 8014e80 <_printf_i+0x40>)
 8014e7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014e80:	08014ed9 	.word	0x08014ed9
 8014e84:	08014eed 	.word	0x08014eed
 8014e88:	08014e69 	.word	0x08014e69
 8014e8c:	08014e69 	.word	0x08014e69
 8014e90:	08014e69 	.word	0x08014e69
 8014e94:	08014e69 	.word	0x08014e69
 8014e98:	08014eed 	.word	0x08014eed
 8014e9c:	08014e69 	.word	0x08014e69
 8014ea0:	08014e69 	.word	0x08014e69
 8014ea4:	08014e69 	.word	0x08014e69
 8014ea8:	08014e69 	.word	0x08014e69
 8014eac:	08014ff9 	.word	0x08014ff9
 8014eb0:	08014f1d 	.word	0x08014f1d
 8014eb4:	08014fdb 	.word	0x08014fdb
 8014eb8:	08014e69 	.word	0x08014e69
 8014ebc:	08014e69 	.word	0x08014e69
 8014ec0:	0801501b 	.word	0x0801501b
 8014ec4:	08014e69 	.word	0x08014e69
 8014ec8:	08014f1d 	.word	0x08014f1d
 8014ecc:	08014e69 	.word	0x08014e69
 8014ed0:	08014e69 	.word	0x08014e69
 8014ed4:	08014fe3 	.word	0x08014fe3
 8014ed8:	682b      	ldr	r3, [r5, #0]
 8014eda:	1d1a      	adds	r2, r3, #4
 8014edc:	681b      	ldr	r3, [r3, #0]
 8014ede:	602a      	str	r2, [r5, #0]
 8014ee0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014ee4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014ee8:	2301      	movs	r3, #1
 8014eea:	e0a3      	b.n	8015034 <_printf_i+0x1f4>
 8014eec:	6820      	ldr	r0, [r4, #0]
 8014eee:	6829      	ldr	r1, [r5, #0]
 8014ef0:	0606      	lsls	r6, r0, #24
 8014ef2:	f101 0304 	add.w	r3, r1, #4
 8014ef6:	d50a      	bpl.n	8014f0e <_printf_i+0xce>
 8014ef8:	680e      	ldr	r6, [r1, #0]
 8014efa:	602b      	str	r3, [r5, #0]
 8014efc:	2e00      	cmp	r6, #0
 8014efe:	da03      	bge.n	8014f08 <_printf_i+0xc8>
 8014f00:	232d      	movs	r3, #45	; 0x2d
 8014f02:	4276      	negs	r6, r6
 8014f04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014f08:	485e      	ldr	r0, [pc, #376]	; (8015084 <_printf_i+0x244>)
 8014f0a:	230a      	movs	r3, #10
 8014f0c:	e019      	b.n	8014f42 <_printf_i+0x102>
 8014f0e:	680e      	ldr	r6, [r1, #0]
 8014f10:	602b      	str	r3, [r5, #0]
 8014f12:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014f16:	bf18      	it	ne
 8014f18:	b236      	sxthne	r6, r6
 8014f1a:	e7ef      	b.n	8014efc <_printf_i+0xbc>
 8014f1c:	682b      	ldr	r3, [r5, #0]
 8014f1e:	6820      	ldr	r0, [r4, #0]
 8014f20:	1d19      	adds	r1, r3, #4
 8014f22:	6029      	str	r1, [r5, #0]
 8014f24:	0601      	lsls	r1, r0, #24
 8014f26:	d501      	bpl.n	8014f2c <_printf_i+0xec>
 8014f28:	681e      	ldr	r6, [r3, #0]
 8014f2a:	e002      	b.n	8014f32 <_printf_i+0xf2>
 8014f2c:	0646      	lsls	r6, r0, #25
 8014f2e:	d5fb      	bpl.n	8014f28 <_printf_i+0xe8>
 8014f30:	881e      	ldrh	r6, [r3, #0]
 8014f32:	4854      	ldr	r0, [pc, #336]	; (8015084 <_printf_i+0x244>)
 8014f34:	2f6f      	cmp	r7, #111	; 0x6f
 8014f36:	bf0c      	ite	eq
 8014f38:	2308      	moveq	r3, #8
 8014f3a:	230a      	movne	r3, #10
 8014f3c:	2100      	movs	r1, #0
 8014f3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014f42:	6865      	ldr	r5, [r4, #4]
 8014f44:	60a5      	str	r5, [r4, #8]
 8014f46:	2d00      	cmp	r5, #0
 8014f48:	bfa2      	ittt	ge
 8014f4a:	6821      	ldrge	r1, [r4, #0]
 8014f4c:	f021 0104 	bicge.w	r1, r1, #4
 8014f50:	6021      	strge	r1, [r4, #0]
 8014f52:	b90e      	cbnz	r6, 8014f58 <_printf_i+0x118>
 8014f54:	2d00      	cmp	r5, #0
 8014f56:	d04d      	beq.n	8014ff4 <_printf_i+0x1b4>
 8014f58:	4615      	mov	r5, r2
 8014f5a:	fbb6 f1f3 	udiv	r1, r6, r3
 8014f5e:	fb03 6711 	mls	r7, r3, r1, r6
 8014f62:	5dc7      	ldrb	r7, [r0, r7]
 8014f64:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8014f68:	4637      	mov	r7, r6
 8014f6a:	42bb      	cmp	r3, r7
 8014f6c:	460e      	mov	r6, r1
 8014f6e:	d9f4      	bls.n	8014f5a <_printf_i+0x11a>
 8014f70:	2b08      	cmp	r3, #8
 8014f72:	d10b      	bne.n	8014f8c <_printf_i+0x14c>
 8014f74:	6823      	ldr	r3, [r4, #0]
 8014f76:	07de      	lsls	r6, r3, #31
 8014f78:	d508      	bpl.n	8014f8c <_printf_i+0x14c>
 8014f7a:	6923      	ldr	r3, [r4, #16]
 8014f7c:	6861      	ldr	r1, [r4, #4]
 8014f7e:	4299      	cmp	r1, r3
 8014f80:	bfde      	ittt	le
 8014f82:	2330      	movle	r3, #48	; 0x30
 8014f84:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014f88:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8014f8c:	1b52      	subs	r2, r2, r5
 8014f8e:	6122      	str	r2, [r4, #16]
 8014f90:	f8cd a000 	str.w	sl, [sp]
 8014f94:	464b      	mov	r3, r9
 8014f96:	aa03      	add	r2, sp, #12
 8014f98:	4621      	mov	r1, r4
 8014f9a:	4640      	mov	r0, r8
 8014f9c:	f7ff fee2 	bl	8014d64 <_printf_common>
 8014fa0:	3001      	adds	r0, #1
 8014fa2:	d14c      	bne.n	801503e <_printf_i+0x1fe>
 8014fa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014fa8:	b004      	add	sp, #16
 8014faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014fae:	4835      	ldr	r0, [pc, #212]	; (8015084 <_printf_i+0x244>)
 8014fb0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8014fb4:	6829      	ldr	r1, [r5, #0]
 8014fb6:	6823      	ldr	r3, [r4, #0]
 8014fb8:	f851 6b04 	ldr.w	r6, [r1], #4
 8014fbc:	6029      	str	r1, [r5, #0]
 8014fbe:	061d      	lsls	r5, r3, #24
 8014fc0:	d514      	bpl.n	8014fec <_printf_i+0x1ac>
 8014fc2:	07df      	lsls	r7, r3, #31
 8014fc4:	bf44      	itt	mi
 8014fc6:	f043 0320 	orrmi.w	r3, r3, #32
 8014fca:	6023      	strmi	r3, [r4, #0]
 8014fcc:	b91e      	cbnz	r6, 8014fd6 <_printf_i+0x196>
 8014fce:	6823      	ldr	r3, [r4, #0]
 8014fd0:	f023 0320 	bic.w	r3, r3, #32
 8014fd4:	6023      	str	r3, [r4, #0]
 8014fd6:	2310      	movs	r3, #16
 8014fd8:	e7b0      	b.n	8014f3c <_printf_i+0xfc>
 8014fda:	6823      	ldr	r3, [r4, #0]
 8014fdc:	f043 0320 	orr.w	r3, r3, #32
 8014fe0:	6023      	str	r3, [r4, #0]
 8014fe2:	2378      	movs	r3, #120	; 0x78
 8014fe4:	4828      	ldr	r0, [pc, #160]	; (8015088 <_printf_i+0x248>)
 8014fe6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014fea:	e7e3      	b.n	8014fb4 <_printf_i+0x174>
 8014fec:	0659      	lsls	r1, r3, #25
 8014fee:	bf48      	it	mi
 8014ff0:	b2b6      	uxthmi	r6, r6
 8014ff2:	e7e6      	b.n	8014fc2 <_printf_i+0x182>
 8014ff4:	4615      	mov	r5, r2
 8014ff6:	e7bb      	b.n	8014f70 <_printf_i+0x130>
 8014ff8:	682b      	ldr	r3, [r5, #0]
 8014ffa:	6826      	ldr	r6, [r4, #0]
 8014ffc:	6961      	ldr	r1, [r4, #20]
 8014ffe:	1d18      	adds	r0, r3, #4
 8015000:	6028      	str	r0, [r5, #0]
 8015002:	0635      	lsls	r5, r6, #24
 8015004:	681b      	ldr	r3, [r3, #0]
 8015006:	d501      	bpl.n	801500c <_printf_i+0x1cc>
 8015008:	6019      	str	r1, [r3, #0]
 801500a:	e002      	b.n	8015012 <_printf_i+0x1d2>
 801500c:	0670      	lsls	r0, r6, #25
 801500e:	d5fb      	bpl.n	8015008 <_printf_i+0x1c8>
 8015010:	8019      	strh	r1, [r3, #0]
 8015012:	2300      	movs	r3, #0
 8015014:	6123      	str	r3, [r4, #16]
 8015016:	4615      	mov	r5, r2
 8015018:	e7ba      	b.n	8014f90 <_printf_i+0x150>
 801501a:	682b      	ldr	r3, [r5, #0]
 801501c:	1d1a      	adds	r2, r3, #4
 801501e:	602a      	str	r2, [r5, #0]
 8015020:	681d      	ldr	r5, [r3, #0]
 8015022:	6862      	ldr	r2, [r4, #4]
 8015024:	2100      	movs	r1, #0
 8015026:	4628      	mov	r0, r5
 8015028:	f7eb f95a 	bl	80002e0 <memchr>
 801502c:	b108      	cbz	r0, 8015032 <_printf_i+0x1f2>
 801502e:	1b40      	subs	r0, r0, r5
 8015030:	6060      	str	r0, [r4, #4]
 8015032:	6863      	ldr	r3, [r4, #4]
 8015034:	6123      	str	r3, [r4, #16]
 8015036:	2300      	movs	r3, #0
 8015038:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801503c:	e7a8      	b.n	8014f90 <_printf_i+0x150>
 801503e:	6923      	ldr	r3, [r4, #16]
 8015040:	462a      	mov	r2, r5
 8015042:	4649      	mov	r1, r9
 8015044:	4640      	mov	r0, r8
 8015046:	47d0      	blx	sl
 8015048:	3001      	adds	r0, #1
 801504a:	d0ab      	beq.n	8014fa4 <_printf_i+0x164>
 801504c:	6823      	ldr	r3, [r4, #0]
 801504e:	079b      	lsls	r3, r3, #30
 8015050:	d413      	bmi.n	801507a <_printf_i+0x23a>
 8015052:	68e0      	ldr	r0, [r4, #12]
 8015054:	9b03      	ldr	r3, [sp, #12]
 8015056:	4298      	cmp	r0, r3
 8015058:	bfb8      	it	lt
 801505a:	4618      	movlt	r0, r3
 801505c:	e7a4      	b.n	8014fa8 <_printf_i+0x168>
 801505e:	2301      	movs	r3, #1
 8015060:	4632      	mov	r2, r6
 8015062:	4649      	mov	r1, r9
 8015064:	4640      	mov	r0, r8
 8015066:	47d0      	blx	sl
 8015068:	3001      	adds	r0, #1
 801506a:	d09b      	beq.n	8014fa4 <_printf_i+0x164>
 801506c:	3501      	adds	r5, #1
 801506e:	68e3      	ldr	r3, [r4, #12]
 8015070:	9903      	ldr	r1, [sp, #12]
 8015072:	1a5b      	subs	r3, r3, r1
 8015074:	42ab      	cmp	r3, r5
 8015076:	dcf2      	bgt.n	801505e <_printf_i+0x21e>
 8015078:	e7eb      	b.n	8015052 <_printf_i+0x212>
 801507a:	2500      	movs	r5, #0
 801507c:	f104 0619 	add.w	r6, r4, #25
 8015080:	e7f5      	b.n	801506e <_printf_i+0x22e>
 8015082:	bf00      	nop
 8015084:	08015589 	.word	0x08015589
 8015088:	0801559a 	.word	0x0801559a

0801508c <__sread>:
 801508c:	b510      	push	{r4, lr}
 801508e:	460c      	mov	r4, r1
 8015090:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015094:	f000 f894 	bl	80151c0 <_read_r>
 8015098:	2800      	cmp	r0, #0
 801509a:	bfab      	itete	ge
 801509c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801509e:	89a3      	ldrhlt	r3, [r4, #12]
 80150a0:	181b      	addge	r3, r3, r0
 80150a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80150a6:	bfac      	ite	ge
 80150a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80150aa:	81a3      	strhlt	r3, [r4, #12]
 80150ac:	bd10      	pop	{r4, pc}

080150ae <__swrite>:
 80150ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80150b2:	461f      	mov	r7, r3
 80150b4:	898b      	ldrh	r3, [r1, #12]
 80150b6:	05db      	lsls	r3, r3, #23
 80150b8:	4605      	mov	r5, r0
 80150ba:	460c      	mov	r4, r1
 80150bc:	4616      	mov	r6, r2
 80150be:	d505      	bpl.n	80150cc <__swrite+0x1e>
 80150c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80150c4:	2302      	movs	r3, #2
 80150c6:	2200      	movs	r2, #0
 80150c8:	f000 f868 	bl	801519c <_lseek_r>
 80150cc:	89a3      	ldrh	r3, [r4, #12]
 80150ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80150d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80150d6:	81a3      	strh	r3, [r4, #12]
 80150d8:	4632      	mov	r2, r6
 80150da:	463b      	mov	r3, r7
 80150dc:	4628      	mov	r0, r5
 80150de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80150e2:	f000 b817 	b.w	8015114 <_write_r>

080150e6 <__sseek>:
 80150e6:	b510      	push	{r4, lr}
 80150e8:	460c      	mov	r4, r1
 80150ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80150ee:	f000 f855 	bl	801519c <_lseek_r>
 80150f2:	1c43      	adds	r3, r0, #1
 80150f4:	89a3      	ldrh	r3, [r4, #12]
 80150f6:	bf15      	itete	ne
 80150f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80150fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80150fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015102:	81a3      	strheq	r3, [r4, #12]
 8015104:	bf18      	it	ne
 8015106:	81a3      	strhne	r3, [r4, #12]
 8015108:	bd10      	pop	{r4, pc}

0801510a <__sclose>:
 801510a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801510e:	f000 b813 	b.w	8015138 <_close_r>
	...

08015114 <_write_r>:
 8015114:	b538      	push	{r3, r4, r5, lr}
 8015116:	4d07      	ldr	r5, [pc, #28]	; (8015134 <_write_r+0x20>)
 8015118:	4604      	mov	r4, r0
 801511a:	4608      	mov	r0, r1
 801511c:	4611      	mov	r1, r2
 801511e:	2200      	movs	r2, #0
 8015120:	602a      	str	r2, [r5, #0]
 8015122:	461a      	mov	r2, r3
 8015124:	f7ed fda5 	bl	8002c72 <_write>
 8015128:	1c43      	adds	r3, r0, #1
 801512a:	d102      	bne.n	8015132 <_write_r+0x1e>
 801512c:	682b      	ldr	r3, [r5, #0]
 801512e:	b103      	cbz	r3, 8015132 <_write_r+0x1e>
 8015130:	6023      	str	r3, [r4, #0]
 8015132:	bd38      	pop	{r3, r4, r5, pc}
 8015134:	240050d8 	.word	0x240050d8

08015138 <_close_r>:
 8015138:	b538      	push	{r3, r4, r5, lr}
 801513a:	4d06      	ldr	r5, [pc, #24]	; (8015154 <_close_r+0x1c>)
 801513c:	2300      	movs	r3, #0
 801513e:	4604      	mov	r4, r0
 8015140:	4608      	mov	r0, r1
 8015142:	602b      	str	r3, [r5, #0]
 8015144:	f7ed fdb1 	bl	8002caa <_close>
 8015148:	1c43      	adds	r3, r0, #1
 801514a:	d102      	bne.n	8015152 <_close_r+0x1a>
 801514c:	682b      	ldr	r3, [r5, #0]
 801514e:	b103      	cbz	r3, 8015152 <_close_r+0x1a>
 8015150:	6023      	str	r3, [r4, #0]
 8015152:	bd38      	pop	{r3, r4, r5, pc}
 8015154:	240050d8 	.word	0x240050d8

08015158 <_fstat_r>:
 8015158:	b538      	push	{r3, r4, r5, lr}
 801515a:	4d07      	ldr	r5, [pc, #28]	; (8015178 <_fstat_r+0x20>)
 801515c:	2300      	movs	r3, #0
 801515e:	4604      	mov	r4, r0
 8015160:	4608      	mov	r0, r1
 8015162:	4611      	mov	r1, r2
 8015164:	602b      	str	r3, [r5, #0]
 8015166:	f7ed fdac 	bl	8002cc2 <_fstat>
 801516a:	1c43      	adds	r3, r0, #1
 801516c:	d102      	bne.n	8015174 <_fstat_r+0x1c>
 801516e:	682b      	ldr	r3, [r5, #0]
 8015170:	b103      	cbz	r3, 8015174 <_fstat_r+0x1c>
 8015172:	6023      	str	r3, [r4, #0]
 8015174:	bd38      	pop	{r3, r4, r5, pc}
 8015176:	bf00      	nop
 8015178:	240050d8 	.word	0x240050d8

0801517c <_isatty_r>:
 801517c:	b538      	push	{r3, r4, r5, lr}
 801517e:	4d06      	ldr	r5, [pc, #24]	; (8015198 <_isatty_r+0x1c>)
 8015180:	2300      	movs	r3, #0
 8015182:	4604      	mov	r4, r0
 8015184:	4608      	mov	r0, r1
 8015186:	602b      	str	r3, [r5, #0]
 8015188:	f7ed fdab 	bl	8002ce2 <_isatty>
 801518c:	1c43      	adds	r3, r0, #1
 801518e:	d102      	bne.n	8015196 <_isatty_r+0x1a>
 8015190:	682b      	ldr	r3, [r5, #0]
 8015192:	b103      	cbz	r3, 8015196 <_isatty_r+0x1a>
 8015194:	6023      	str	r3, [r4, #0]
 8015196:	bd38      	pop	{r3, r4, r5, pc}
 8015198:	240050d8 	.word	0x240050d8

0801519c <_lseek_r>:
 801519c:	b538      	push	{r3, r4, r5, lr}
 801519e:	4d07      	ldr	r5, [pc, #28]	; (80151bc <_lseek_r+0x20>)
 80151a0:	4604      	mov	r4, r0
 80151a2:	4608      	mov	r0, r1
 80151a4:	4611      	mov	r1, r2
 80151a6:	2200      	movs	r2, #0
 80151a8:	602a      	str	r2, [r5, #0]
 80151aa:	461a      	mov	r2, r3
 80151ac:	f7ed fda4 	bl	8002cf8 <_lseek>
 80151b0:	1c43      	adds	r3, r0, #1
 80151b2:	d102      	bne.n	80151ba <_lseek_r+0x1e>
 80151b4:	682b      	ldr	r3, [r5, #0]
 80151b6:	b103      	cbz	r3, 80151ba <_lseek_r+0x1e>
 80151b8:	6023      	str	r3, [r4, #0]
 80151ba:	bd38      	pop	{r3, r4, r5, pc}
 80151bc:	240050d8 	.word	0x240050d8

080151c0 <_read_r>:
 80151c0:	b538      	push	{r3, r4, r5, lr}
 80151c2:	4d07      	ldr	r5, [pc, #28]	; (80151e0 <_read_r+0x20>)
 80151c4:	4604      	mov	r4, r0
 80151c6:	4608      	mov	r0, r1
 80151c8:	4611      	mov	r1, r2
 80151ca:	2200      	movs	r2, #0
 80151cc:	602a      	str	r2, [r5, #0]
 80151ce:	461a      	mov	r2, r3
 80151d0:	f7ed fd32 	bl	8002c38 <_read>
 80151d4:	1c43      	adds	r3, r0, #1
 80151d6:	d102      	bne.n	80151de <_read_r+0x1e>
 80151d8:	682b      	ldr	r3, [r5, #0]
 80151da:	b103      	cbz	r3, 80151de <_read_r+0x1e>
 80151dc:	6023      	str	r3, [r4, #0]
 80151de:	bd38      	pop	{r3, r4, r5, pc}
 80151e0:	240050d8 	.word	0x240050d8

080151e4 <_init>:
 80151e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80151e6:	bf00      	nop
 80151e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80151ea:	bc08      	pop	{r3}
 80151ec:	469e      	mov	lr, r3
 80151ee:	4770      	bx	lr

080151f0 <_fini>:
 80151f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80151f2:	bf00      	nop
 80151f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80151f6:	bc08      	pop	{r3}
 80151f8:	469e      	mov	lr, r3
 80151fa:	4770      	bx	lr
