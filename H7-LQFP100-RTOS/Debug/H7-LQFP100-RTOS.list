
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000165b0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000448  08016850  08016850  00026850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08016c98  08016c98  00026c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08016ca0  08016ca0  00026ca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08016ca4  08016ca4  00026ca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000108  24000000  08016ca8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000594c  24000120  08016db0  00030120  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  24005a6c  08016db0  00035a6c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030108  2**0
                  CONTENTS, READONLY
 10 .debug_info   00032db1  00000000  00000000  00030136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000054fd  00000000  00000000  00062ee7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002670  00000000  00000000  000683e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002478  00000000  00000000  0006aa58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00007ab4  00000000  00000000  0006ced0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00030b84  00000000  00000000  00074984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00194812  00000000  00000000  000a5508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00239d1a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000ad14  00000000  00000000  00239d6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000120 	.word	0x24000120
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08016838 	.word	0x08016838

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000124 	.word	0x24000124
 80002dc:	08016838 	.word	0x08016838

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <HAL_TIM_OC_DelayElapsedCallback>:
 * specific actions based on the timer instance.
 *
 * @param htim Pointer to the timer handle structure.
 *             Supported timer instances are htim1, htim2, and htim3.
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	4a19      	ldr	r2, [pc, #100]	; (8000654 <HAL_TIM_OC_DelayElapsedCallback+0x70>)
 80005f0:	4293      	cmp	r3, r2
 80005f2:	d106      	bne.n	8000602 <HAL_TIM_OC_DelayElapsedCallback+0x1e>
		osEventFlagsSet(event_flags, PMT_FLAG_ID);
 80005f4:	4b18      	ldr	r3, [pc, #96]	; (8000658 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	2101      	movs	r1, #1
 80005fa:	4618      	mov	r0, r3
 80005fc:	f012 f88e 	bl	801271c <osEventFlagsSet>
	} else if (htim == &htim4) {
		osEventFlagsSet(event_flags, VOLTAGE_MONITOR_FLAG_ID);
	} else {
		printf("Unknown Timer Interrupt\n");
	}
}
 8000600:	e023      	b.n	800064a <HAL_TIM_OC_DelayElapsedCallback+0x66>
	} else if (htim == &htim2) {
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4a15      	ldr	r2, [pc, #84]	; (800065c <HAL_TIM_OC_DelayElapsedCallback+0x78>)
 8000606:	4293      	cmp	r3, r2
 8000608:	d106      	bne.n	8000618 <HAL_TIM_OC_DelayElapsedCallback+0x34>
		osEventFlagsSet(event_flags, ERPA_FLAG_ID);
 800060a:	4b13      	ldr	r3, [pc, #76]	; (8000658 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	2102      	movs	r1, #2
 8000610:	4618      	mov	r0, r3
 8000612:	f012 f883 	bl	801271c <osEventFlagsSet>
}
 8000616:	e018      	b.n	800064a <HAL_TIM_OC_DelayElapsedCallback+0x66>
	} else if (htim == &htim3) {
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	4a11      	ldr	r2, [pc, #68]	; (8000660 <HAL_TIM_OC_DelayElapsedCallback+0x7c>)
 800061c:	4293      	cmp	r3, r2
 800061e:	d106      	bne.n	800062e <HAL_TIM_OC_DelayElapsedCallback+0x4a>
		osEventFlagsSet(event_flags, HK_FLAG_ID);
 8000620:	4b0d      	ldr	r3, [pc, #52]	; (8000658 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2104      	movs	r1, #4
 8000626:	4618      	mov	r0, r3
 8000628:	f012 f878 	bl	801271c <osEventFlagsSet>
}
 800062c:	e00d      	b.n	800064a <HAL_TIM_OC_DelayElapsedCallback+0x66>
	} else if (htim == &htim4) {
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	4a0c      	ldr	r2, [pc, #48]	; (8000664 <HAL_TIM_OC_DelayElapsedCallback+0x80>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d106      	bne.n	8000644 <HAL_TIM_OC_DelayElapsedCallback+0x60>
		osEventFlagsSet(event_flags, VOLTAGE_MONITOR_FLAG_ID);
 8000636:	4b08      	ldr	r3, [pc, #32]	; (8000658 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	2108      	movs	r1, #8
 800063c:	4618      	mov	r0, r3
 800063e:	f012 f86d 	bl	801271c <osEventFlagsSet>
}
 8000642:	e002      	b.n	800064a <HAL_TIM_OC_DelayElapsedCallback+0x66>
		printf("Unknown Timer Interrupt\n");
 8000644:	4808      	ldr	r0, [pc, #32]	; (8000668 <HAL_TIM_OC_DelayElapsedCallback+0x84>)
 8000646:	f015 fd47 	bl	80160d8 <puts>
}
 800064a:	bf00      	nop
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	24000508 	.word	0x24000508
 8000658:	24000c54 	.word	0x24000c54
 800065c:	24000554 	.word	0x24000554
 8000660:	240005a0 	.word	0x240005a0
 8000664:	240005ec 	.word	0x240005ec
 8000668:	080168c0 	.word	0x080168c0

0800066c <HAL_UART_RxCpltCallback>:
 * toggling GPIO pins, starting or stopping timers, and other operations.
 *
 * @param huart Pointer to a UART_HandleTypeDef structure that contains
 *              the configuration information for the specified UART module.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800066c:	b580      	push	{r7, lr}
 800066e:	b086      	sub	sp, #24
 8000670:	af02      	add	r7, sp, #8
 8000672:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8000674:	2201      	movs	r2, #1
 8000676:	49f2      	ldr	r1, [pc, #968]	; (8000a40 <HAL_UART_RxCpltCallback+0x3d4>)
 8000678:	48f2      	ldr	r0, [pc, #968]	; (8000a44 <HAL_UART_RxCpltCallback+0x3d8>)
 800067a:	f00f f9e3 	bl	800fa44 <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 800067e:	4bf0      	ldr	r3, [pc, #960]	; (8000a40 <HAL_UART_RxCpltCallback+0x3d4>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 8000684:	7bfb      	ldrb	r3, [r7, #15]
 8000686:	2be0      	cmp	r3, #224	; 0xe0
 8000688:	f200 83e8 	bhi.w	8000e5c <HAL_UART_RxCpltCallback+0x7f0>
 800068c:	a201      	add	r2, pc, #4	; (adr r2, 8000694 <HAL_UART_RxCpltCallback+0x28>)
 800068e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000692:	bf00      	nop
 8000694:	08000a2d 	.word	0x08000a2d
 8000698:	08000a69 	.word	0x08000a69
 800069c:	08000aef 	.word	0x08000aef
 80006a0:	08000b19 	.word	0x08000b19
 80006a4:	08000b41 	.word	0x08000b41
 80006a8:	08000b6b 	.word	0x08000b6b
 80006ac:	08000b97 	.word	0x08000b97
 80006b0:	08000bc3 	.word	0x08000bc3
 80006b4:	08000bed 	.word	0x08000bed
 80006b8:	08000c19 	.word	0x08000c19
 80006bc:	08000c45 	.word	0x08000c45
 80006c0:	08000c77 	.word	0x08000c77
 80006c4:	08000ca9 	.word	0x08000ca9
 80006c8:	08000cfb 	.word	0x08000cfb
 80006cc:	08000e01 	.word	0x08000e01
 80006d0:	08000e31 	.word	0x08000e31
 80006d4:	08000a19 	.word	0x08000a19
 80006d8:	08000a55 	.word	0x08000a55
 80006dc:	08000ad9 	.word	0x08000ad9
 80006e0:	08000b05 	.word	0x08000b05
 80006e4:	08000b2d 	.word	0x08000b2d
 80006e8:	08000b55 	.word	0x08000b55
 80006ec:	08000b81 	.word	0x08000b81
 80006f0:	08000bad 	.word	0x08000bad
 80006f4:	08000bd9 	.word	0x08000bd9
 80006f8:	08000c01 	.word	0x08000c01
 80006fc:	08000c29 	.word	0x08000c29
 8000700:	08000c5b 	.word	0x08000c5b
 8000704:	08000c8d 	.word	0x08000c8d
 8000708:	08000cbf 	.word	0x08000cbf
 800070c:	08000dd9 	.word	0x08000dd9
 8000710:	08000e29 	.word	0x08000e29
 8000714:	08000e5d 	.word	0x08000e5d
 8000718:	08000e5d 	.word	0x08000e5d
 800071c:	08000e5d 	.word	0x08000e5d
 8000720:	08000e5d 	.word	0x08000e5d
 8000724:	08000e5d 	.word	0x08000e5d
 8000728:	08000e5d 	.word	0x08000e5d
 800072c:	08000e5d 	.word	0x08000e5d
 8000730:	08000e5d 	.word	0x08000e5d
 8000734:	08000e5d 	.word	0x08000e5d
 8000738:	08000e5d 	.word	0x08000e5d
 800073c:	08000e5d 	.word	0x08000e5d
 8000740:	08000e5d 	.word	0x08000e5d
 8000744:	08000e5d 	.word	0x08000e5d
 8000748:	08000e5d 	.word	0x08000e5d
 800074c:	08000e5d 	.word	0x08000e5d
 8000750:	08000e5d 	.word	0x08000e5d
 8000754:	08000e5d 	.word	0x08000e5d
 8000758:	08000e5d 	.word	0x08000e5d
 800075c:	08000e5d 	.word	0x08000e5d
 8000760:	08000e5d 	.word	0x08000e5d
 8000764:	08000e5d 	.word	0x08000e5d
 8000768:	08000e5d 	.word	0x08000e5d
 800076c:	08000e5d 	.word	0x08000e5d
 8000770:	08000e5d 	.word	0x08000e5d
 8000774:	08000e5d 	.word	0x08000e5d
 8000778:	08000e5d 	.word	0x08000e5d
 800077c:	08000e5d 	.word	0x08000e5d
 8000780:	08000e5d 	.word	0x08000e5d
 8000784:	08000e5d 	.word	0x08000e5d
 8000788:	08000e5d 	.word	0x08000e5d
 800078c:	08000e5d 	.word	0x08000e5d
 8000790:	08000e5d 	.word	0x08000e5d
 8000794:	08000e5d 	.word	0x08000e5d
 8000798:	08000e5d 	.word	0x08000e5d
 800079c:	08000e5d 	.word	0x08000e5d
 80007a0:	08000e5d 	.word	0x08000e5d
 80007a4:	08000e5d 	.word	0x08000e5d
 80007a8:	08000e5d 	.word	0x08000e5d
 80007ac:	08000e5d 	.word	0x08000e5d
 80007b0:	08000e5d 	.word	0x08000e5d
 80007b4:	08000e5d 	.word	0x08000e5d
 80007b8:	08000e5d 	.word	0x08000e5d
 80007bc:	08000e5d 	.word	0x08000e5d
 80007c0:	08000e5d 	.word	0x08000e5d
 80007c4:	08000e5d 	.word	0x08000e5d
 80007c8:	08000e5d 	.word	0x08000e5d
 80007cc:	08000e5d 	.word	0x08000e5d
 80007d0:	08000e5d 	.word	0x08000e5d
 80007d4:	08000e5d 	.word	0x08000e5d
 80007d8:	08000e5d 	.word	0x08000e5d
 80007dc:	08000e5d 	.word	0x08000e5d
 80007e0:	08000e5d 	.word	0x08000e5d
 80007e4:	08000e5d 	.word	0x08000e5d
 80007e8:	08000e5d 	.word	0x08000e5d
 80007ec:	08000e5d 	.word	0x08000e5d
 80007f0:	08000e5d 	.word	0x08000e5d
 80007f4:	08000e5d 	.word	0x08000e5d
 80007f8:	08000e5d 	.word	0x08000e5d
 80007fc:	08000e5d 	.word	0x08000e5d
 8000800:	08000e5d 	.word	0x08000e5d
 8000804:	08000e5d 	.word	0x08000e5d
 8000808:	08000e5d 	.word	0x08000e5d
 800080c:	08000e5d 	.word	0x08000e5d
 8000810:	08000e5d 	.word	0x08000e5d
 8000814:	08000e5d 	.word	0x08000e5d
 8000818:	08000e5d 	.word	0x08000e5d
 800081c:	08000e5d 	.word	0x08000e5d
 8000820:	08000e5d 	.word	0x08000e5d
 8000824:	08000e5d 	.word	0x08000e5d
 8000828:	08000e5d 	.word	0x08000e5d
 800082c:	08000e5d 	.word	0x08000e5d
 8000830:	08000e5d 	.word	0x08000e5d
 8000834:	08000e5d 	.word	0x08000e5d
 8000838:	08000e5d 	.word	0x08000e5d
 800083c:	08000e5d 	.word	0x08000e5d
 8000840:	08000e5d 	.word	0x08000e5d
 8000844:	08000e5d 	.word	0x08000e5d
 8000848:	08000e5d 	.word	0x08000e5d
 800084c:	08000e5d 	.word	0x08000e5d
 8000850:	08000e5d 	.word	0x08000e5d
 8000854:	08000e5d 	.word	0x08000e5d
 8000858:	08000e5d 	.word	0x08000e5d
 800085c:	08000e5d 	.word	0x08000e5d
 8000860:	08000e5d 	.word	0x08000e5d
 8000864:	08000e5d 	.word	0x08000e5d
 8000868:	08000e5d 	.word	0x08000e5d
 800086c:	08000e5d 	.word	0x08000e5d
 8000870:	08000e5d 	.word	0x08000e5d
 8000874:	08000e5d 	.word	0x08000e5d
 8000878:	08000e5d 	.word	0x08000e5d
 800087c:	08000e5d 	.word	0x08000e5d
 8000880:	08000e5d 	.word	0x08000e5d
 8000884:	08000e5d 	.word	0x08000e5d
 8000888:	08000e5d 	.word	0x08000e5d
 800088c:	08000e5d 	.word	0x08000e5d
 8000890:	08000e5d 	.word	0x08000e5d
 8000894:	08000e5d 	.word	0x08000e5d
 8000898:	08000e5d 	.word	0x08000e5d
 800089c:	08000e5d 	.word	0x08000e5d
 80008a0:	08000e5d 	.word	0x08000e5d
 80008a4:	08000e5d 	.word	0x08000e5d
 80008a8:	08000e5d 	.word	0x08000e5d
 80008ac:	08000e5d 	.word	0x08000e5d
 80008b0:	08000e5d 	.word	0x08000e5d
 80008b4:	08000e5d 	.word	0x08000e5d
 80008b8:	08000e5d 	.word	0x08000e5d
 80008bc:	08000e5d 	.word	0x08000e5d
 80008c0:	08000e5d 	.word	0x08000e5d
 80008c4:	08000e5d 	.word	0x08000e5d
 80008c8:	08000e5d 	.word	0x08000e5d
 80008cc:	08000e5d 	.word	0x08000e5d
 80008d0:	08000e5d 	.word	0x08000e5d
 80008d4:	08000e5d 	.word	0x08000e5d
 80008d8:	08000e5d 	.word	0x08000e5d
 80008dc:	08000e5d 	.word	0x08000e5d
 80008e0:	08000e5d 	.word	0x08000e5d
 80008e4:	08000e5d 	.word	0x08000e5d
 80008e8:	08000e5d 	.word	0x08000e5d
 80008ec:	08000e5d 	.word	0x08000e5d
 80008f0:	08000e5d 	.word	0x08000e5d
 80008f4:	08000e5d 	.word	0x08000e5d
 80008f8:	08000e5d 	.word	0x08000e5d
 80008fc:	08000e5d 	.word	0x08000e5d
 8000900:	08000e5d 	.word	0x08000e5d
 8000904:	08000e5d 	.word	0x08000e5d
 8000908:	08000e5d 	.word	0x08000e5d
 800090c:	08000e5d 	.word	0x08000e5d
 8000910:	08000e5d 	.word	0x08000e5d
 8000914:	08000e5d 	.word	0x08000e5d
 8000918:	08000e5d 	.word	0x08000e5d
 800091c:	08000e5d 	.word	0x08000e5d
 8000920:	08000e5d 	.word	0x08000e5d
 8000924:	08000e5d 	.word	0x08000e5d
 8000928:	08000e5d 	.word	0x08000e5d
 800092c:	08000e5d 	.word	0x08000e5d
 8000930:	08000e5d 	.word	0x08000e5d
 8000934:	08000e5d 	.word	0x08000e5d
 8000938:	08000e5d 	.word	0x08000e5d
 800093c:	08000e5d 	.word	0x08000e5d
 8000940:	08000e5d 	.word	0x08000e5d
 8000944:	08000e5d 	.word	0x08000e5d
 8000948:	08000e5d 	.word	0x08000e5d
 800094c:	08000e5d 	.word	0x08000e5d
 8000950:	08000e5d 	.word	0x08000e5d
 8000954:	08000e5d 	.word	0x08000e5d
 8000958:	08000e5d 	.word	0x08000e5d
 800095c:	08000e5d 	.word	0x08000e5d
 8000960:	08000e5d 	.word	0x08000e5d
 8000964:	08000e5d 	.word	0x08000e5d
 8000968:	08000e5d 	.word	0x08000e5d
 800096c:	08000e5d 	.word	0x08000e5d
 8000970:	08000e5d 	.word	0x08000e5d
 8000974:	08000e5d 	.word	0x08000e5d
 8000978:	08000e5d 	.word	0x08000e5d
 800097c:	08000e5d 	.word	0x08000e5d
 8000980:	08000e5d 	.word	0x08000e5d
 8000984:	08000e5d 	.word	0x08000e5d
 8000988:	08000e5d 	.word	0x08000e5d
 800098c:	08000e5d 	.word	0x08000e5d
 8000990:	08000e5d 	.word	0x08000e5d
 8000994:	08000e5d 	.word	0x08000e5d
 8000998:	08000e5d 	.word	0x08000e5d
 800099c:	08000e5d 	.word	0x08000e5d
 80009a0:	08000e5d 	.word	0x08000e5d
 80009a4:	08000e5d 	.word	0x08000e5d
 80009a8:	08000e5d 	.word	0x08000e5d
 80009ac:	08000e5d 	.word	0x08000e5d
 80009b0:	08000e5d 	.word	0x08000e5d
 80009b4:	08000e5d 	.word	0x08000e5d
 80009b8:	08000e5d 	.word	0x08000e5d
 80009bc:	08000e5d 	.word	0x08000e5d
 80009c0:	08000e5d 	.word	0x08000e5d
 80009c4:	08000e5d 	.word	0x08000e5d
 80009c8:	08000e5d 	.word	0x08000e5d
 80009cc:	08000e5d 	.word	0x08000e5d
 80009d0:	08000e5d 	.word	0x08000e5d
 80009d4:	08000e4b 	.word	0x08000e4b
 80009d8:	08000e5d 	.word	0x08000e5d
 80009dc:	08000e5d 	.word	0x08000e5d
 80009e0:	08000e5d 	.word	0x08000e5d
 80009e4:	08000e5d 	.word	0x08000e5d
 80009e8:	08000e5d 	.word	0x08000e5d
 80009ec:	08000e5d 	.word	0x08000e5d
 80009f0:	08000e5d 	.word	0x08000e5d
 80009f4:	08000e5d 	.word	0x08000e5d
 80009f8:	08000e5d 	.word	0x08000e5d
 80009fc:	08000e5d 	.word	0x08000e5d
 8000a00:	08000e5d 	.word	0x08000e5d
 8000a04:	08000e5d 	.word	0x08000e5d
 8000a08:	08000e5d 	.word	0x08000e5d
 8000a0c:	08000e5d 	.word	0x08000e5d
 8000a10:	08000e5d 	.word	0x08000e5d
 8000a14:	08000e39 	.word	0x08000e39
	case 0x10: {
		printf("SDN1 ON\n");
 8000a18:	480b      	ldr	r0, [pc, #44]	; (8000a48 <HAL_UART_RxCpltCallback+0x3dc>)
 8000a1a:	f015 fb5d 	bl	80160d8 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8000a1e:	4b0b      	ldr	r3, [pc, #44]	; (8000a4c <HAL_UART_RxCpltCallback+0x3e0>)
 8000a20:	2104      	movs	r1, #4
 8000a22:	2201      	movs	r2, #1
 8000a24:	4618      	mov	r0, r3
 8000a26:	f008 f8bb 	bl	8008ba0 <HAL_GPIO_WritePin>
		break;
 8000a2a:	e222      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x00: {
		printf("SDN1 OFF\n");
 8000a2c:	4808      	ldr	r0, [pc, #32]	; (8000a50 <HAL_UART_RxCpltCallback+0x3e4>)
 8000a2e:	f015 fb53 	bl	80160d8 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8000a32:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <HAL_UART_RxCpltCallback+0x3e0>)
 8000a34:	2104      	movs	r1, #4
 8000a36:	2200      	movs	r2, #0
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f008 f8b1 	bl	8008ba0 <HAL_GPIO_WritePin>
		break;
 8000a3e:	e218      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
 8000a40:	24000c58 	.word	0x24000c58
 8000a44:	24000638 	.word	0x24000638
 8000a48:	080168d8 	.word	0x080168d8
 8000a4c:	58020400 	.word	0x58020400
 8000a50:	080168e0 	.word	0x080168e0
	}
	case 0x11: {
		printf("SYS ON PB5\n");
 8000a54:	48b8      	ldr	r0, [pc, #736]	; (8000d38 <HAL_UART_RxCpltCallback+0x6cc>)
 8000a56:	f015 fb3f 	bl	80160d8 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8000a5a:	4bb8      	ldr	r3, [pc, #736]	; (8000d3c <HAL_UART_RxCpltCallback+0x6d0>)
 8000a5c:	2120      	movs	r1, #32
 8000a5e:	2201      	movs	r2, #1
 8000a60:	4618      	mov	r0, r3
 8000a62:	f008 f89d 	bl	8008ba0 <HAL_GPIO_WritePin>

		break;
 8000a66:	e204      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x01: {
		printf("SYS OFF PB5\n");
 8000a68:	48b5      	ldr	r0, [pc, #724]	; (8000d40 <HAL_UART_RxCpltCallback+0x6d4>)
 8000a6a:	f015 fb35 	bl	80160d8 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET); // turning off PB5 & ensuring all other enables are off
 8000a6e:	4bb3      	ldr	r3, [pc, #716]	; (8000d3c <HAL_UART_RxCpltCallback+0x6d0>)
 8000a70:	2120      	movs	r1, #32
 8000a72:	2200      	movs	r2, #0
 8000a74:	4618      	mov	r0, r3
 8000a76:	f008 f893 	bl	8008ba0 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000a7a:	4bb0      	ldr	r3, [pc, #704]	; (8000d3c <HAL_UART_RxCpltCallback+0x6d0>)
 8000a7c:	2140      	movs	r1, #64	; 0x40
 8000a7e:	2200      	movs	r2, #0
 8000a80:	4618      	mov	r0, r3
 8000a82:	f008 f88d 	bl	8008ba0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000a86:	4baf      	ldr	r3, [pc, #700]	; (8000d44 <HAL_UART_RxCpltCallback+0x6d8>)
 8000a88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f008 f886 	bl	8008ba0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000a94:	4bab      	ldr	r3, [pc, #684]	; (8000d44 <HAL_UART_RxCpltCallback+0x6d8>)
 8000a96:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f008 f87f 	bl	8008ba0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000aa2:	4ba8      	ldr	r3, [pc, #672]	; (8000d44 <HAL_UART_RxCpltCallback+0x6d8>)
 8000aa4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f008 f878 	bl	8008ba0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000ab0:	4ba4      	ldr	r3, [pc, #656]	; (8000d44 <HAL_UART_RxCpltCallback+0x6d8>)
 8000ab2:	2140      	movs	r1, #64	; 0x40
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f008 f872 	bl	8008ba0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000abc:	4ba1      	ldr	r3, [pc, #644]	; (8000d44 <HAL_UART_RxCpltCallback+0x6d8>)
 8000abe:	2180      	movs	r1, #128	; 0x80
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f008 f86c 	bl	8008ba0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000ac8:	4b9e      	ldr	r3, [pc, #632]	; (8000d44 <HAL_UART_RxCpltCallback+0x6d8>)
 8000aca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ace:	2200      	movs	r2, #0
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f008 f865 	bl	8008ba0 <HAL_GPIO_WritePin>

		break;
 8000ad6:	e1cc      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x12: {
		printf("3v3 ON PC10\n");
 8000ad8:	489b      	ldr	r0, [pc, #620]	; (8000d48 <HAL_UART_RxCpltCallback+0x6dc>)
 8000ada:	f015 fafd 	bl	80160d8 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000ade:	4b99      	ldr	r3, [pc, #612]	; (8000d44 <HAL_UART_RxCpltCallback+0x6d8>)
 8000ae0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f008 f85a 	bl	8008ba0 <HAL_GPIO_WritePin>
		break;
 8000aec:	e1c1      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x02: {
		printf("3v3 OFF PC10\n");
 8000aee:	4897      	ldr	r0, [pc, #604]	; (8000d4c <HAL_UART_RxCpltCallback+0x6e0>)
 8000af0:	f015 faf2 	bl	80160d8 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000af4:	4b93      	ldr	r3, [pc, #588]	; (8000d44 <HAL_UART_RxCpltCallback+0x6d8>)
 8000af6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000afa:	2200      	movs	r2, #0
 8000afc:	4618      	mov	r0, r3
 8000afe:	f008 f84f 	bl	8008ba0 <HAL_GPIO_WritePin>
		break;
 8000b02:	e1b6      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x13: {
		printf("5v ON PC7\n");
 8000b04:	4892      	ldr	r0, [pc, #584]	; (8000d50 <HAL_UART_RxCpltCallback+0x6e4>)
 8000b06:	f015 fae7 	bl	80160d8 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8000b0a:	4b8e      	ldr	r3, [pc, #568]	; (8000d44 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b0c:	2180      	movs	r1, #128	; 0x80
 8000b0e:	2201      	movs	r2, #1
 8000b10:	4618      	mov	r0, r3
 8000b12:	f008 f845 	bl	8008ba0 <HAL_GPIO_WritePin>
		break;
 8000b16:	e1ac      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x03: {
		printf("5v OFF PC7\n");
 8000b18:	488e      	ldr	r0, [pc, #568]	; (8000d54 <HAL_UART_RxCpltCallback+0x6e8>)
 8000b1a:	f015 fadd 	bl	80160d8 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000b1e:	4b89      	ldr	r3, [pc, #548]	; (8000d44 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b20:	2180      	movs	r1, #128	; 0x80
 8000b22:	2200      	movs	r2, #0
 8000b24:	4618      	mov	r0, r3
 8000b26:	f008 f83b 	bl	8008ba0 <HAL_GPIO_WritePin>
		break;
 8000b2a:	e1a2      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x14: {
		printf("n3v3 ON PC6\n");
 8000b2c:	488a      	ldr	r0, [pc, #552]	; (8000d58 <HAL_UART_RxCpltCallback+0x6ec>)
 8000b2e:	f015 fad3 	bl	80160d8 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8000b32:	4b84      	ldr	r3, [pc, #528]	; (8000d44 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b34:	2140      	movs	r1, #64	; 0x40
 8000b36:	2201      	movs	r2, #1
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f008 f831 	bl	8008ba0 <HAL_GPIO_WritePin>
		break;
 8000b3e:	e198      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x04: {
		printf("n3v3 OFF PC6\n");
 8000b40:	4886      	ldr	r0, [pc, #536]	; (8000d5c <HAL_UART_RxCpltCallback+0x6f0>)
 8000b42:	f015 fac9 	bl	80160d8 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000b46:	4b7f      	ldr	r3, [pc, #508]	; (8000d44 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b48:	2140      	movs	r1, #64	; 0x40
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f008 f827 	bl	8008ba0 <HAL_GPIO_WritePin>
		break;
 8000b52:	e18e      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x15: {
		printf("n5v ON PC8\n");
 8000b54:	4882      	ldr	r0, [pc, #520]	; (8000d60 <HAL_UART_RxCpltCallback+0x6f4>)
 8000b56:	f015 fabf 	bl	80160d8 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8000b5a:	4b7a      	ldr	r3, [pc, #488]	; (8000d44 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b60:	2201      	movs	r2, #1
 8000b62:	4618      	mov	r0, r3
 8000b64:	f008 f81c 	bl	8008ba0 <HAL_GPIO_WritePin>
		break;
 8000b68:	e183      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x05: {
		printf("n5v OFF PC8\n");
 8000b6a:	487e      	ldr	r0, [pc, #504]	; (8000d64 <HAL_UART_RxCpltCallback+0x6f8>)
 8000b6c:	f015 fab4 	bl	80160d8 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000b70:	4b74      	ldr	r3, [pc, #464]	; (8000d44 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b76:	2200      	movs	r2, #0
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f008 f811 	bl	8008ba0 <HAL_GPIO_WritePin>
		break;
 8000b7e:	e178      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x16: {
		printf("15v ON PC9\n");
 8000b80:	4879      	ldr	r0, [pc, #484]	; (8000d68 <HAL_UART_RxCpltCallback+0x6fc>)
 8000b82:	f015 faa9 	bl	80160d8 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8000b86:	4b6f      	ldr	r3, [pc, #444]	; (8000d44 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b88:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f008 f806 	bl	8008ba0 <HAL_GPIO_WritePin>
		break;
 8000b94:	e16d      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x06: {
		printf("15v OFF PC9\n");
 8000b96:	4875      	ldr	r0, [pc, #468]	; (8000d6c <HAL_UART_RxCpltCallback+0x700>)
 8000b98:	f015 fa9e 	bl	80160d8 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000b9c:	4b69      	ldr	r3, [pc, #420]	; (8000d44 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f007 fffb 	bl	8008ba0 <HAL_GPIO_WritePin>
		break;
 8000baa:	e162      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x17: {
		printf("n200v ON PC13\n");
 8000bac:	4870      	ldr	r0, [pc, #448]	; (8000d70 <HAL_UART_RxCpltCallback+0x704>)
 8000bae:	f015 fa93 	bl	80160d8 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000bb2:	4b64      	ldr	r3, [pc, #400]	; (8000d44 <HAL_UART_RxCpltCallback+0x6d8>)
 8000bb4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bb8:	2201      	movs	r2, #1
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f007 fff0 	bl	8008ba0 <HAL_GPIO_WritePin>
		break;
 8000bc0:	e157      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x07: {
		printf("n200v OFF PC13\n");
 8000bc2:	486c      	ldr	r0, [pc, #432]	; (8000d74 <HAL_UART_RxCpltCallback+0x708>)
 8000bc4:	f015 fa88 	bl	80160d8 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000bc8:	4b5e      	ldr	r3, [pc, #376]	; (8000d44 <HAL_UART_RxCpltCallback+0x6d8>)
 8000bca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bce:	2200      	movs	r2, #0
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f007 ffe5 	bl	8008ba0 <HAL_GPIO_WritePin>

		break;
 8000bd6:	e14c      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x18: {
		printf("800v ON PB6\n");
 8000bd8:	4867      	ldr	r0, [pc, #412]	; (8000d78 <HAL_UART_RxCpltCallback+0x70c>)
 8000bda:	f015 fa7d 	bl	80160d8 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000bde:	4b57      	ldr	r3, [pc, #348]	; (8000d3c <HAL_UART_RxCpltCallback+0x6d0>)
 8000be0:	2140      	movs	r1, #64	; 0x40
 8000be2:	2201      	movs	r2, #1
 8000be4:	4618      	mov	r0, r3
 8000be6:	f007 ffdb 	bl	8008ba0 <HAL_GPIO_WritePin>
		break;
 8000bea:	e142      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x08: {
		printf("800v OFF PB6\n");
 8000bec:	4863      	ldr	r0, [pc, #396]	; (8000d7c <HAL_UART_RxCpltCallback+0x710>)
 8000bee:	f015 fa73 	bl	80160d8 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000bf2:	4b52      	ldr	r3, [pc, #328]	; (8000d3c <HAL_UART_RxCpltCallback+0x6d0>)
 8000bf4:	2140      	movs	r1, #64	; 0x40
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f007 ffd1 	bl	8008ba0 <HAL_GPIO_WritePin>
		break;
 8000bfe:	e138      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x19: {
		printf("AUTOSWEEP ON\n");
 8000c00:	485f      	ldr	r0, [pc, #380]	; (8000d80 <HAL_UART_RxCpltCallback+0x714>)
 8000c02:	f015 fa69 	bl	80160d8 <puts>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 8000c06:	2300      	movs	r3, #0
 8000c08:	9300      	str	r3, [sp, #0]
 8000c0a:	2320      	movs	r3, #32
 8000c0c:	4a5d      	ldr	r2, [pc, #372]	; (8000d84 <HAL_UART_RxCpltCallback+0x718>)
 8000c0e:	2100      	movs	r1, #0
 8000c10:	485d      	ldr	r0, [pc, #372]	; (8000d88 <HAL_UART_RxCpltCallback+0x71c>)
 8000c12:	f004 fc35 	bl	8005480 <HAL_DAC_Start_DMA>
		break;
 8000c16:	e12c      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x09: {
		printf("AUTOSWEEP OFF\n");
 8000c18:	485c      	ldr	r0, [pc, #368]	; (8000d8c <HAL_UART_RxCpltCallback+0x720>)
 8000c1a:	f015 fa5d 	bl	80160d8 <puts>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8000c1e:	2100      	movs	r1, #0
 8000c20:	4859      	ldr	r0, [pc, #356]	; (8000d88 <HAL_UART_RxCpltCallback+0x71c>)
 8000c22:	f004 fced 	bl	8005600 <HAL_DAC_Stop_DMA>
		break;
 8000c26:	e124      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x1A: {
		printf("ERPA ON\n");
 8000c28:	4859      	ldr	r0, [pc, #356]	; (8000d90 <HAL_UART_RxCpltCallback+0x724>)
 8000c2a:	f015 fa55 	bl	80160d8 <puts>
		HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8000c2e:	210c      	movs	r1, #12
 8000c30:	4858      	ldr	r0, [pc, #352]	; (8000d94 <HAL_UART_RxCpltCallback+0x728>)
 8000c32:	f00d fb7d 	bl	800e330 <HAL_TIM_OC_Start_IT>
		ERPA_ON = 1;
 8000c36:	4b58      	ldr	r3, [pc, #352]	; (8000d98 <HAL_UART_RxCpltCallback+0x72c>)
 8000c38:	2201      	movs	r2, #1
 8000c3a:	701a      	strb	r2, [r3, #0]
		erpa_seq = 0;
 8000c3c:	4b57      	ldr	r3, [pc, #348]	; (8000d9c <HAL_UART_RxCpltCallback+0x730>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	801a      	strh	r2, [r3, #0]
		break;
 8000c42:	e116      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x0A: {
		printf("ERPA OFF\n");
 8000c44:	4856      	ldr	r0, [pc, #344]	; (8000da0 <HAL_UART_RxCpltCallback+0x734>)
 8000c46:	f015 fa47 	bl	80160d8 <puts>
		HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);
 8000c4a:	210c      	movs	r1, #12
 8000c4c:	4851      	ldr	r0, [pc, #324]	; (8000d94 <HAL_UART_RxCpltCallback+0x728>)
 8000c4e:	f00d fcc9 	bl	800e5e4 <HAL_TIM_OC_Stop_IT>
		ERPA_ON = 0;
 8000c52:	4b51      	ldr	r3, [pc, #324]	; (8000d98 <HAL_UART_RxCpltCallback+0x72c>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	701a      	strb	r2, [r3, #0]
		break;
 8000c58:	e10b      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x1B: {
		printf("PMT ON\n");
 8000c5a:	4852      	ldr	r0, [pc, #328]	; (8000da4 <HAL_UART_RxCpltCallback+0x738>)
 8000c5c:	f015 fa3c 	bl	80160d8 <puts>
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000c60:	2100      	movs	r1, #0
 8000c62:	4851      	ldr	r0, [pc, #324]	; (8000da8 <HAL_UART_RxCpltCallback+0x73c>)
 8000c64:	f00d fb64 	bl	800e330 <HAL_TIM_OC_Start_IT>
		PMT_ON = 1;
 8000c68:	4b50      	ldr	r3, [pc, #320]	; (8000dac <HAL_UART_RxCpltCallback+0x740>)
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	701a      	strb	r2, [r3, #0]
		pmt_seq = 0;
 8000c6e:	4b50      	ldr	r3, [pc, #320]	; (8000db0 <HAL_UART_RxCpltCallback+0x744>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	801a      	strh	r2, [r3, #0]
		break;
 8000c74:	e0fd      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x0B: {
		printf("PMT OFF\n");
 8000c76:	484f      	ldr	r0, [pc, #316]	; (8000db4 <HAL_UART_RxCpltCallback+0x748>)
 8000c78:	f015 fa2e 	bl	80160d8 <puts>
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	484a      	ldr	r0, [pc, #296]	; (8000da8 <HAL_UART_RxCpltCallback+0x73c>)
 8000c80:	f00d fcb0 	bl	800e5e4 <HAL_TIM_OC_Stop_IT>
		PMT_ON = 0;
 8000c84:	4b49      	ldr	r3, [pc, #292]	; (8000dac <HAL_UART_RxCpltCallback+0x740>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	701a      	strb	r2, [r3, #0]
		break;
 8000c8a:	e0f2      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x1C: {
		printf("HK ON \n");
 8000c8c:	484a      	ldr	r0, [pc, #296]	; (8000db8 <HAL_UART_RxCpltCallback+0x74c>)
 8000c8e:	f015 fa23 	bl	80160d8 <puts>
		HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000c92:	2100      	movs	r1, #0
 8000c94:	4849      	ldr	r0, [pc, #292]	; (8000dbc <HAL_UART_RxCpltCallback+0x750>)
 8000c96:	f00d fb4b 	bl	800e330 <HAL_TIM_OC_Start_IT>
		HK_ON = 1;
 8000c9a:	4b49      	ldr	r3, [pc, #292]	; (8000dc0 <HAL_UART_RxCpltCallback+0x754>)
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	701a      	strb	r2, [r3, #0]
		hk_seq = 0;
 8000ca0:	4b48      	ldr	r3, [pc, #288]	; (8000dc4 <HAL_UART_RxCpltCallback+0x758>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	801a      	strh	r2, [r3, #0]
		break;
 8000ca6:	e0e4      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x0C: {
		printf("HK OFF\n");
 8000ca8:	4847      	ldr	r0, [pc, #284]	; (8000dc8 <HAL_UART_RxCpltCallback+0x75c>)
 8000caa:	f015 fa15 	bl	80160d8 <puts>
		HAL_TIM_OC_Stop_IT(&htim3, TIM_CHANNEL_1);
 8000cae:	2100      	movs	r1, #0
 8000cb0:	4842      	ldr	r0, [pc, #264]	; (8000dbc <HAL_UART_RxCpltCallback+0x750>)
 8000cb2:	f00d fc97 	bl	800e5e4 <HAL_TIM_OC_Stop_IT>
		HK_ON = 0;
 8000cb6:	4b42      	ldr	r3, [pc, #264]	; (8000dc0 <HAL_UART_RxCpltCallback+0x754>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	701a      	strb	r2, [r3, #0]
		break;
 8000cbc:	e0d9      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x1D: {
		printf("Step Up\n");
 8000cbe:	4843      	ldr	r0, [pc, #268]	; (8000dcc <HAL_UART_RxCpltCallback+0x760>)
 8000cc0:	f015 fa0a 	bl	80160d8 <puts>
		if (step < 17) {
 8000cc4:	4b42      	ldr	r3, [pc, #264]	; (8000dd0 <HAL_UART_RxCpltCallback+0x764>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	2b10      	cmp	r3, #16
 8000cca:	f200 80cb 	bhi.w	8000e64 <HAL_UART_RxCpltCallback+0x7f8>
			step += 2;
 8000cce:	4b40      	ldr	r3, [pc, #256]	; (8000dd0 <HAL_UART_RxCpltCallback+0x764>)
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	3302      	adds	r3, #2
 8000cd4:	b2da      	uxtb	r2, r3
 8000cd6:	4b3e      	ldr	r3, [pc, #248]	; (8000dd0 <HAL_UART_RxCpltCallback+0x764>)
 8000cd8:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8000cda:	4b3d      	ldr	r3, [pc, #244]	; (8000dd0 <HAL_UART_RxCpltCallback+0x764>)
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	461a      	mov	r2, r3
 8000ce0:	4b28      	ldr	r3, [pc, #160]	; (8000d84 <HAL_UART_RxCpltCallback+0x718>)
 8000ce2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2100      	movs	r1, #0
 8000cea:	4827      	ldr	r0, [pc, #156]	; (8000d88 <HAL_UART_RxCpltCallback+0x71c>)
 8000cec:	f004 fd2b 	bl	8005746 <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	4825      	ldr	r0, [pc, #148]	; (8000d88 <HAL_UART_RxCpltCallback+0x71c>)
 8000cf4:	f004 fb6c 	bl	80053d0 <HAL_DAC_Start>
		}
		break;
 8000cf8:	e0b4      	b.n	8000e64 <HAL_UART_RxCpltCallback+0x7f8>
	}
	case 0x0D: {
		printf("Step Down\n");
 8000cfa:	4836      	ldr	r0, [pc, #216]	; (8000dd4 <HAL_UART_RxCpltCallback+0x768>)
 8000cfc:	f015 f9ec 	bl	80160d8 <puts>
		if (step > 3) {
 8000d00:	4b33      	ldr	r3, [pc, #204]	; (8000dd0 <HAL_UART_RxCpltCallback+0x764>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	2b03      	cmp	r3, #3
 8000d06:	f240 80af 	bls.w	8000e68 <HAL_UART_RxCpltCallback+0x7fc>
			step -= 2;
 8000d0a:	4b31      	ldr	r3, [pc, #196]	; (8000dd0 <HAL_UART_RxCpltCallback+0x764>)
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	3b02      	subs	r3, #2
 8000d10:	b2da      	uxtb	r2, r3
 8000d12:	4b2f      	ldr	r3, [pc, #188]	; (8000dd0 <HAL_UART_RxCpltCallback+0x764>)
 8000d14:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8000d16:	4b2e      	ldr	r3, [pc, #184]	; (8000dd0 <HAL_UART_RxCpltCallback+0x764>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	4b19      	ldr	r3, [pc, #100]	; (8000d84 <HAL_UART_RxCpltCallback+0x718>)
 8000d1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d22:	2200      	movs	r2, #0
 8000d24:	2100      	movs	r1, #0
 8000d26:	4818      	ldr	r0, [pc, #96]	; (8000d88 <HAL_UART_RxCpltCallback+0x71c>)
 8000d28:	f004 fd0d 	bl	8005746 <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4816      	ldr	r0, [pc, #88]	; (8000d88 <HAL_UART_RxCpltCallback+0x71c>)
 8000d30:	f004 fb4e 	bl	80053d0 <HAL_DAC_Start>
		}
		break;
 8000d34:	e098      	b.n	8000e68 <HAL_UART_RxCpltCallback+0x7fc>
 8000d36:	bf00      	nop
 8000d38:	080168ec 	.word	0x080168ec
 8000d3c:	58020400 	.word	0x58020400
 8000d40:	080168f8 	.word	0x080168f8
 8000d44:	58020800 	.word	0x58020800
 8000d48:	08016904 	.word	0x08016904
 8000d4c:	08016910 	.word	0x08016910
 8000d50:	08016920 	.word	0x08016920
 8000d54:	0801692c 	.word	0x0801692c
 8000d58:	08016938 	.word	0x08016938
 8000d5c:	08016944 	.word	0x08016944
 8000d60:	08016954 	.word	0x08016954
 8000d64:	08016960 	.word	0x08016960
 8000d68:	0801696c 	.word	0x0801696c
 8000d6c:	08016978 	.word	0x08016978
 8000d70:	08016984 	.word	0x08016984
 8000d74:	08016994 	.word	0x08016994
 8000d78:	080169a4 	.word	0x080169a4
 8000d7c:	080169b0 	.word	0x080169b0
 8000d80:	080169c0 	.word	0x080169c0
 8000d84:	24000010 	.word	0x24000010
 8000d88:	240002f4 	.word	0x240002f4
 8000d8c:	080169d0 	.word	0x080169d0
 8000d90:	080169e0 	.word	0x080169e0
 8000d94:	24000554 	.word	0x24000554
 8000d98:	24000c4f 	.word	0x24000c4f
 8000d9c:	24000c4a 	.word	0x24000c4a
 8000da0:	080169e8 	.word	0x080169e8
 8000da4:	080169f4 	.word	0x080169f4
 8000da8:	24000508 	.word	0x24000508
 8000dac:	24000c4e 	.word	0x24000c4e
 8000db0:	24000c48 	.word	0x24000c48
 8000db4:	080169fc 	.word	0x080169fc
 8000db8:	08016a04 	.word	0x08016a04
 8000dbc:	240005a0 	.word	0x240005a0
 8000dc0:	24000c50 	.word	0x24000c50
 8000dc4:	24000c4c 	.word	0x24000c4c
 8000dc8:	08016a0c 	.word	0x08016a0c
 8000dcc:	08016a14 	.word	0x08016a14
 8000dd0:	2400000c 	.word	0x2400000c
 8000dd4:	08016a1c 	.word	0x08016a1c
	}
	case 0x1E: {
		printf("Factor Up\n");
 8000dd8:	4828      	ldr	r0, [pc, #160]	; (8000e7c <HAL_UART_RxCpltCallback+0x810>)
 8000dda:	f015 f97d 	bl	80160d8 <puts>
		if (cadence <= 50000) {
 8000dde:	4b28      	ldr	r3, [pc, #160]	; (8000e80 <HAL_UART_RxCpltCallback+0x814>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d840      	bhi.n	8000e6c <HAL_UART_RxCpltCallback+0x800>
			cadence *= 2;
 8000dea:	4b25      	ldr	r3, [pc, #148]	; (8000e80 <HAL_UART_RxCpltCallback+0x814>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	4a23      	ldr	r2, [pc, #140]	; (8000e80 <HAL_UART_RxCpltCallback+0x814>)
 8000df2:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000df4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000df8:	4b21      	ldr	r3, [pc, #132]	; (8000e80 <HAL_UART_RxCpltCallback+0x814>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000dfe:	e035      	b.n	8000e6c <HAL_UART_RxCpltCallback+0x800>
	}
	case 0x0E: {
		printf("Factor Down\n");
 8000e00:	4820      	ldr	r0, [pc, #128]	; (8000e84 <HAL_UART_RxCpltCallback+0x818>)
 8000e02:	f015 f969 	bl	80160d8 <puts>
		if (cadence >= 6250) {
 8000e06:	4b1e      	ldr	r3, [pc, #120]	; (8000e80 <HAL_UART_RxCpltCallback+0x814>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f641 0269 	movw	r2, #6249	; 0x1869
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d92e      	bls.n	8000e70 <HAL_UART_RxCpltCallback+0x804>
			cadence /= 2;
 8000e12:	4b1b      	ldr	r3, [pc, #108]	; (8000e80 <HAL_UART_RxCpltCallback+0x814>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	085b      	lsrs	r3, r3, #1
 8000e18:	4a19      	ldr	r2, [pc, #100]	; (8000e80 <HAL_UART_RxCpltCallback+0x814>)
 8000e1a:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000e1c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e20:	4b17      	ldr	r3, [pc, #92]	; (8000e80 <HAL_UART_RxCpltCallback+0x814>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000e26:	e023      	b.n	8000e70 <HAL_UART_RxCpltCallback+0x804>
	}
	case 0x1F: {
		printf("Exit STOP mode\n");
 8000e28:	4817      	ldr	r0, [pc, #92]	; (8000e88 <HAL_UART_RxCpltCallback+0x81c>)
 8000e2a:	f015 f955 	bl	80160d8 <puts>
		// TODO: Exit stop mode
		break;
 8000e2e:	e020      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x0F: {
		printf("Enter STOP mode\n");
 8000e30:	4816      	ldr	r0, [pc, #88]	; (8000e8c <HAL_UART_RxCpltCallback+0x820>)
 8000e32:	f015 f951 	bl	80160d8 <puts>
		// TODO: Enter stop mode
		break;
 8000e36:	e01c      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0xE0: {
		printf("Auto Init\n");
 8000e38:	4815      	ldr	r0, [pc, #84]	; (8000e90 <HAL_UART_RxCpltCallback+0x824>)
 8000e3a:	f015 f94d 	bl	80160d8 <puts>
		xTaskResumeFromISR(GPIO_on_taskHandle);
 8000e3e:	4b15      	ldr	r3, [pc, #84]	; (8000e94 <HAL_UART_RxCpltCallback+0x828>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4618      	mov	r0, r3
 8000e44:	f013 f9b2 	bl	80141ac <xTaskResumeFromISR>
		break;
 8000e48:	e013      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0xD0: {
		printf("Auto Deinit\n");
 8000e4a:	4813      	ldr	r0, [pc, #76]	; (8000e98 <HAL_UART_RxCpltCallback+0x82c>)
 8000e4c:	f015 f944 	bl	80160d8 <puts>
		xTaskResumeFromISR(GPIO_off_taskHandle);
 8000e50:	4b12      	ldr	r3, [pc, #72]	; (8000e9c <HAL_UART_RxCpltCallback+0x830>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4618      	mov	r0, r3
 8000e56:	f013 f9a9 	bl	80141ac <xTaskResumeFromISR>
		break;
 8000e5a:	e00a      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	default: {
		printf("Unknown Command\n");
 8000e5c:	4810      	ldr	r0, [pc, #64]	; (8000ea0 <HAL_UART_RxCpltCallback+0x834>)
 8000e5e:	f015 f93b 	bl	80160d8 <puts>
		break;
 8000e62:	e006      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
		break;
 8000e64:	bf00      	nop
 8000e66:	e004      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
		break;
 8000e68:	bf00      	nop
 8000e6a:	e002      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
		break;
 8000e6c:	bf00      	nop
 8000e6e:	e000      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
		break;
 8000e70:	bf00      	nop
	}
	}
}
 8000e72:	bf00      	nop
 8000e74:	3710      	adds	r7, #16
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	08016a28 	.word	0x08016a28
 8000e80:	24000008 	.word	0x24000008
 8000e84:	08016a34 	.word	0x08016a34
 8000e88:	08016a40 	.word	0x08016a40
 8000e8c:	08016a50 	.word	0x08016a50
 8000e90:	08016a60 	.word	0x08016a60
 8000e94:	24000754 	.word	0x24000754
 8000e98:	08016a6c 	.word	0x08016a6c
 8000e9c:	240009b4 	.word	0x240009b4
 8000ea0:	08016a78 	.word	0x08016a78

08000ea4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ea8:	f002 fcfe 	bl	80038a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eac:	f000 f8ac 	bl	8001008 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000eb0:	f000 f926 	bl	8001100 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eb4:	f000 fed0 	bl	8001c58 <MX_GPIO_Init>
  MX_DMA_Init();
 8000eb8:	f000 fe96 	bl	8001be8 <MX_DMA_Init>
  MX_TIM3_Init();
 8000ebc:	f000 fdaa 	bl	8001a14 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000ec0:	f000 fe46 	bl	8001b50 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000ec4:	f000 fb32 	bl	800152c <MX_I2C1_Init>
  MX_SPI2_Init();
 8000ec8:	f000 fc28 	bl	800171c <MX_SPI2_Init>
  MX_TIM2_Init();
 8000ecc:	f000 fd2c 	bl	8001928 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000ed0:	f000 fc7c 	bl	80017cc <MX_TIM1_Init>
  MX_ADC3_Init();
 8000ed4:	f000 fa66 	bl	80013a4 <MX_ADC3_Init>
  MX_ADC1_Init();
 8000ed8:	f000 f942 	bl	8001160 <MX_ADC1_Init>
  MX_DAC1_Init();
 8000edc:	f000 faf4 	bl	80014c8 <MX_DAC1_Init>
  MX_SPI1_Init();
 8000ee0:	f000 fbc4 	bl	800166c <MX_SPI1_Init>
  MX_RTC_Init();
 8000ee4:	f000 fb64 	bl	80015b0 <MX_RTC_Init>
  MX_TIM4_Init();
 8000ee8:	f000 fde4 	bl	8001ab4 <MX_TIM4_Init>
	}
#endif
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000eec:	f011 fa98 	bl	8012420 <osKernelInitialize>
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
	mid_MsgQueue = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(packet_t), NULL);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	2108      	movs	r1, #8
 8000ef4:	2080      	movs	r0, #128	; 0x80
 8000ef6:	f011 fcbb 	bl	8012870 <osMessageQueueNew>
 8000efa:	4603      	mov	r3, r0
 8000efc:	4a27      	ldr	r2, [pc, #156]	; (8000f9c <main+0xf8>)
 8000efe:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 8000f00:	4a27      	ldr	r2, [pc, #156]	; (8000fa0 <main+0xfc>)
 8000f02:	2100      	movs	r1, #0
 8000f04:	4827      	ldr	r0, [pc, #156]	; (8000fa4 <main+0x100>)
 8000f06:	f011 fad5 	bl	80124b4 <osThreadNew>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	4a26      	ldr	r2, [pc, #152]	; (8000fa8 <main+0x104>)
 8000f0e:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 8000f10:	4a26      	ldr	r2, [pc, #152]	; (8000fac <main+0x108>)
 8000f12:	2100      	movs	r1, #0
 8000f14:	4826      	ldr	r0, [pc, #152]	; (8000fb0 <main+0x10c>)
 8000f16:	f011 facd 	bl	80124b4 <osThreadNew>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	4a25      	ldr	r2, [pc, #148]	; (8000fb4 <main+0x110>)
 8000f1e:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 8000f20:	4a25      	ldr	r2, [pc, #148]	; (8000fb8 <main+0x114>)
 8000f22:	2100      	movs	r1, #0
 8000f24:	4825      	ldr	r0, [pc, #148]	; (8000fbc <main+0x118>)
 8000f26:	f011 fac5 	bl	80124b4 <osThreadNew>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	4a24      	ldr	r2, [pc, #144]	; (8000fc0 <main+0x11c>)
 8000f2e:	6013      	str	r3, [r2, #0]

  /* creation of UART_RX_task */
  UART_RX_taskHandle = osThreadNew(UART_RX_init, NULL, &UART_RX_task_attributes);
 8000f30:	4a24      	ldr	r2, [pc, #144]	; (8000fc4 <main+0x120>)
 8000f32:	2100      	movs	r1, #0
 8000f34:	4824      	ldr	r0, [pc, #144]	; (8000fc8 <main+0x124>)
 8000f36:	f011 fabd 	bl	80124b4 <osThreadNew>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	4a23      	ldr	r2, [pc, #140]	; (8000fcc <main+0x128>)
 8000f3e:	6013      	str	r3, [r2, #0]

  /* creation of GPIO_on_task */
  GPIO_on_taskHandle = osThreadNew(GPIO_on_init, NULL, &GPIO_on_task_attributes);
 8000f40:	4a23      	ldr	r2, [pc, #140]	; (8000fd0 <main+0x12c>)
 8000f42:	2100      	movs	r1, #0
 8000f44:	4823      	ldr	r0, [pc, #140]	; (8000fd4 <main+0x130>)
 8000f46:	f011 fab5 	bl	80124b4 <osThreadNew>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	4a22      	ldr	r2, [pc, #136]	; (8000fd8 <main+0x134>)
 8000f4e:	6013      	str	r3, [r2, #0]

  /* creation of GPIO_off_task */
  GPIO_off_taskHandle = osThreadNew(GPIO_off_init, NULL, &GPIO_off_task_attributes);
 8000f50:	4a22      	ldr	r2, [pc, #136]	; (8000fdc <main+0x138>)
 8000f52:	2100      	movs	r1, #0
 8000f54:	4822      	ldr	r0, [pc, #136]	; (8000fe0 <main+0x13c>)
 8000f56:	f011 faad 	bl	80124b4 <osThreadNew>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	4a21      	ldr	r2, [pc, #132]	; (8000fe4 <main+0x140>)
 8000f5e:	6013      	str	r3, [r2, #0]

  /* creation of UART_TX_task */
  UART_TX_taskHandle = osThreadNew(UART_TX_init, NULL, &UART_TX_task_attributes);
 8000f60:	4a21      	ldr	r2, [pc, #132]	; (8000fe8 <main+0x144>)
 8000f62:	2100      	movs	r1, #0
 8000f64:	4821      	ldr	r0, [pc, #132]	; (8000fec <main+0x148>)
 8000f66:	f011 faa5 	bl	80124b4 <osThreadNew>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	4a20      	ldr	r2, [pc, #128]	; (8000ff0 <main+0x14c>)
 8000f6e:	6013      	str	r3, [r2, #0]

  /* creation of Voltage_Monitor */
  Voltage_MonitorHandle = osThreadNew(Voltage_Monitor_init, NULL, &Voltage_Monitor_attributes);
 8000f70:	4a20      	ldr	r2, [pc, #128]	; (8000ff4 <main+0x150>)
 8000f72:	2100      	movs	r1, #0
 8000f74:	4820      	ldr	r0, [pc, #128]	; (8000ff8 <main+0x154>)
 8000f76:	f011 fa9d 	bl	80124b4 <osThreadNew>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	4a1f      	ldr	r2, [pc, #124]	; (8000ffc <main+0x158>)
 8000f7e:	6013      	str	r3, [r2, #0]
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	event_flags = osEventFlagsNew(NULL);
 8000f80:	2000      	movs	r0, #0
 8000f82:	f011 fb8b 	bl	801269c <osEventFlagsNew>
 8000f86:	4603      	mov	r3, r0
 8000f88:	4a1d      	ldr	r2, [pc, #116]	; (8001000 <main+0x15c>)
 8000f8a:	6013      	str	r3, [r2, #0]
	system_setup();
 8000f8c:	f000 ffe6 	bl	8001f5c <system_setup>
	printf("Starting kernal...\n");
 8000f90:	481c      	ldr	r0, [pc, #112]	; (8001004 <main+0x160>)
 8000f92:	f015 f8a1 	bl	80160d8 <puts>

  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000f96:	f011 fa67 	bl	8012468 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000f9a:	e7fe      	b.n	8000f9a <main+0xf6>
 8000f9c:	24000c38 	.word	0x24000c38
 8000fa0:	08016ad4 	.word	0x08016ad4
 8000fa4:	080026fd 	.word	0x080026fd
 8000fa8:	24000744 	.word	0x24000744
 8000fac:	08016af8 	.word	0x08016af8
 8000fb0:	08002741 	.word	0x08002741
 8000fb4:	24000748 	.word	0x24000748
 8000fb8:	08016b1c 	.word	0x08016b1c
 8000fbc:	08002785 	.word	0x08002785
 8000fc0:	2400074c 	.word	0x2400074c
 8000fc4:	08016b40 	.word	0x08016b40
 8000fc8:	080027c9 	.word	0x080027c9
 8000fcc:	24000750 	.word	0x24000750
 8000fd0:	08016b64 	.word	0x08016b64
 8000fd4:	080027ed 	.word	0x080027ed
 8000fd8:	24000754 	.word	0x24000754
 8000fdc:	08016b88 	.word	0x08016b88
 8000fe0:	08002895 	.word	0x08002895
 8000fe4:	240009b4 	.word	0x240009b4
 8000fe8:	08016bac 	.word	0x08016bac
 8000fec:	0800293d 	.word	0x0800293d
 8000ff0:	24000c14 	.word	0x24000c14
 8000ff4:	08016bd0 	.word	0x08016bd0
 8000ff8:	080029f5 	.word	0x080029f5
 8000ffc:	24000c18 	.word	0x24000c18
 8001000:	24000c54 	.word	0x24000c54
 8001004:	08016a88 	.word	0x08016a88

08001008 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b09c      	sub	sp, #112	; 0x70
 800100c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800100e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001012:	224c      	movs	r2, #76	; 0x4c
 8001014:	2100      	movs	r1, #0
 8001016:	4618      	mov	r0, r3
 8001018:	f014 ff08 	bl	8015e2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800101c:	1d3b      	adds	r3, r7, #4
 800101e:	2220      	movs	r2, #32
 8001020:	2100      	movs	r1, #0
 8001022:	4618      	mov	r0, r3
 8001024:	f014 ff02 	bl	8015e2c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001028:	2002      	movs	r0, #2
 800102a:	f008 fbdf 	bl	80097ec <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800102e:	2300      	movs	r3, #0
 8001030:	603b      	str	r3, [r7, #0]
 8001032:	4b31      	ldr	r3, [pc, #196]	; (80010f8 <SystemClock_Config+0xf0>)
 8001034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001036:	4a30      	ldr	r2, [pc, #192]	; (80010f8 <SystemClock_Config+0xf0>)
 8001038:	f023 0301 	bic.w	r3, r3, #1
 800103c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800103e:	4b2e      	ldr	r3, [pc, #184]	; (80010f8 <SystemClock_Config+0xf0>)
 8001040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	603b      	str	r3, [r7, #0]
 8001048:	4b2c      	ldr	r3, [pc, #176]	; (80010fc <SystemClock_Config+0xf4>)
 800104a:	699b      	ldr	r3, [r3, #24]
 800104c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001050:	4a2a      	ldr	r2, [pc, #168]	; (80010fc <SystemClock_Config+0xf4>)
 8001052:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001056:	6193      	str	r3, [r2, #24]
 8001058:	4b28      	ldr	r3, [pc, #160]	; (80010fc <SystemClock_Config+0xf4>)
 800105a:	699b      	ldr	r3, [r3, #24]
 800105c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001060:	603b      	str	r3, [r7, #0]
 8001062:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001064:	bf00      	nop
 8001066:	4b25      	ldr	r3, [pc, #148]	; (80010fc <SystemClock_Config+0xf4>)
 8001068:	699b      	ldr	r3, [r3, #24]
 800106a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800106e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001072:	d1f8      	bne.n	8001066 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001074:	2301      	movs	r3, #1
 8001076:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001078:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800107c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800107e:	2302      	movs	r3, #2
 8001080:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001082:	2302      	movs	r3, #2
 8001084:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001086:	2304      	movs	r3, #4
 8001088:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 32;
 800108a:	2320      	movs	r3, #32
 800108c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 4;
 800108e:	2304      	movs	r3, #4
 8001090:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001092:	2304      	movs	r3, #4
 8001094:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001096:	2302      	movs	r3, #2
 8001098:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800109a:	2308      	movs	r3, #8
 800109c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800109e:	2300      	movs	r3, #0
 80010a0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80010a2:	2300      	movs	r3, #0
 80010a4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010aa:	4618      	mov	r0, r3
 80010ac:	f008 fbd8 	bl	8009860 <HAL_RCC_OscConfig>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80010b6:	f001 fcb5 	bl	8002a24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ba:	233f      	movs	r3, #63	; 0x3f
 80010bc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010be:	2303      	movs	r3, #3
 80010c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80010c2:	2300      	movs	r3, #0
 80010c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80010c6:	2300      	movs	r3, #0
 80010c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80010ca:	2300      	movs	r3, #0
 80010cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80010d2:	2300      	movs	r3, #0
 80010d4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80010d6:	2300      	movs	r3, #0
 80010d8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80010da:	1d3b      	adds	r3, r7, #4
 80010dc:	2101      	movs	r1, #1
 80010de:	4618      	mov	r0, r3
 80010e0:	f009 f818 	bl	800a114 <HAL_RCC_ClockConfig>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80010ea:	f001 fc9b 	bl	8002a24 <Error_Handler>
  }
}
 80010ee:	bf00      	nop
 80010f0:	3770      	adds	r7, #112	; 0x70
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	58000400 	.word	0x58000400
 80010fc:	58024800 	.word	0x58024800

08001100 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b0b0      	sub	sp, #192	; 0xc0
 8001104:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001106:	463b      	mov	r3, r7
 8001108:	22c0      	movs	r2, #192	; 0xc0
 800110a:	2100      	movs	r1, #0
 800110c:	4618      	mov	r0, r3
 800110e:	f014 fe8d 	bl	8015e2c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001112:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001116:	f04f 0300 	mov.w	r3, #0
 800111a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 800111e:	2304      	movs	r3, #4
 8001120:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 32;
 8001122:	2320      	movs	r3, #32
 8001124:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
 8001126:	2308      	movs	r3, #8
 8001128:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 4;
 800112a:	2304      	movs	r3, #4
 800112c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800112e:	2302      	movs	r3, #2
 8001130:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8001132:	2380      	movs	r3, #128	; 0x80
 8001134:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001136:	2300      	movs	r3, #0
 8001138:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800113a:	2300      	movs	r3, #0
 800113c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800113e:	2300      	movs	r3, #0
 8001140:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001144:	463b      	mov	r3, r7
 8001146:	4618      	mov	r0, r3
 8001148:	f009 fbb2 	bl	800a8b0 <HAL_RCCEx_PeriphCLKConfig>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8001152:	f001 fc67 	bl	8002a24 <Error_Handler>
  }
}
 8001156:	bf00      	nop
 8001158:	37c0      	adds	r7, #192	; 0xc0
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
	...

08001160 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b08a      	sub	sp, #40	; 0x28
 8001164:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001166:	f107 031c 	add.w	r3, r7, #28
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	605a      	str	r2, [r3, #4]
 8001170:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001172:	463b      	mov	r3, r7
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
 800117e:	611a      	str	r2, [r3, #16]
 8001180:	615a      	str	r2, [r3, #20]
 8001182:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001184:	4b7a      	ldr	r3, [pc, #488]	; (8001370 <MX_ADC1_Init+0x210>)
 8001186:	4a7b      	ldr	r2, [pc, #492]	; (8001374 <MX_ADC1_Init+0x214>)
 8001188:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800118a:	4b79      	ldr	r3, [pc, #484]	; (8001370 <MX_ADC1_Init+0x210>)
 800118c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001190:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001192:	4b77      	ldr	r3, [pc, #476]	; (8001370 <MX_ADC1_Init+0x210>)
 8001194:	2208      	movs	r2, #8
 8001196:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001198:	4b75      	ldr	r3, [pc, #468]	; (8001370 <MX_ADC1_Init+0x210>)
 800119a:	2201      	movs	r2, #1
 800119c:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800119e:	4b74      	ldr	r3, [pc, #464]	; (8001370 <MX_ADC1_Init+0x210>)
 80011a0:	2204      	movs	r2, #4
 80011a2:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80011a4:	4b72      	ldr	r3, [pc, #456]	; (8001370 <MX_ADC1_Init+0x210>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80011aa:	4b71      	ldr	r3, [pc, #452]	; (8001370 <MX_ADC1_Init+0x210>)
 80011ac:	2201      	movs	r2, #1
 80011ae:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 80011b0:	4b6f      	ldr	r3, [pc, #444]	; (8001370 <MX_ADC1_Init+0x210>)
 80011b2:	220b      	movs	r2, #11
 80011b4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011b6:	4b6e      	ldr	r3, [pc, #440]	; (8001370 <MX_ADC1_Init+0x210>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011bc:	4b6c      	ldr	r3, [pc, #432]	; (8001370 <MX_ADC1_Init+0x210>)
 80011be:	2200      	movs	r2, #0
 80011c0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011c2:	4b6b      	ldr	r3, [pc, #428]	; (8001370 <MX_ADC1_Init+0x210>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80011c8:	4b69      	ldr	r3, [pc, #420]	; (8001370 <MX_ADC1_Init+0x210>)
 80011ca:	2203      	movs	r2, #3
 80011cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80011ce:	4b68      	ldr	r3, [pc, #416]	; (8001370 <MX_ADC1_Init+0x210>)
 80011d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011d4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80011d6:	4b66      	ldr	r3, [pc, #408]	; (8001370 <MX_ADC1_Init+0x210>)
 80011d8:	2200      	movs	r2, #0
 80011da:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80011dc:	4b64      	ldr	r3, [pc, #400]	; (8001370 <MX_ADC1_Init+0x210>)
 80011de:	2200      	movs	r2, #0
 80011e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011e4:	4862      	ldr	r0, [pc, #392]	; (8001370 <MX_ADC1_Init+0x210>)
 80011e6:	f002 fdeb 	bl	8003dc0 <HAL_ADC_Init>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80011f0:	f001 fc18 	bl	8002a24 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80011f4:	2300      	movs	r3, #0
 80011f6:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80011f8:	f107 031c 	add.w	r3, r7, #28
 80011fc:	4619      	mov	r1, r3
 80011fe:	485c      	ldr	r0, [pc, #368]	; (8001370 <MX_ADC1_Init+0x210>)
 8001200:	f003 ff06 	bl	8005010 <HAL_ADCEx_MultiModeConfigChannel>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800120a:	f001 fc0b 	bl	8002a24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800120e:	4b5a      	ldr	r3, [pc, #360]	; (8001378 <MX_ADC1_Init+0x218>)
 8001210:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001212:	2306      	movs	r3, #6
 8001214:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8001216:	2307      	movs	r3, #7
 8001218:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800121a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800121e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001220:	2304      	movs	r3, #4
 8001222:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001224:	2300      	movs	r3, #0
 8001226:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001228:	2300      	movs	r3, #0
 800122a:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800122c:	463b      	mov	r3, r7
 800122e:	4619      	mov	r1, r3
 8001230:	484f      	ldr	r0, [pc, #316]	; (8001370 <MX_ADC1_Init+0x210>)
 8001232:	f003 f849 	bl	80042c8 <HAL_ADC_ConfigChannel>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 800123c:	f001 fbf2 	bl	8002a24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001240:	4b4e      	ldr	r3, [pc, #312]	; (800137c <MX_ADC1_Init+0x21c>)
 8001242:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001244:	230c      	movs	r3, #12
 8001246:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001248:	463b      	mov	r3, r7
 800124a:	4619      	mov	r1, r3
 800124c:	4848      	ldr	r0, [pc, #288]	; (8001370 <MX_ADC1_Init+0x210>)
 800124e:	f003 f83b 	bl	80042c8 <HAL_ADC_ConfigChannel>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8001258:	f001 fbe4 	bl	8002a24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800125c:	4b48      	ldr	r3, [pc, #288]	; (8001380 <MX_ADC1_Init+0x220>)
 800125e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001260:	2312      	movs	r3, #18
 8001262:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001264:	463b      	mov	r3, r7
 8001266:	4619      	mov	r1, r3
 8001268:	4841      	ldr	r0, [pc, #260]	; (8001370 <MX_ADC1_Init+0x210>)
 800126a:	f003 f82d 	bl	80042c8 <HAL_ADC_ConfigChannel>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 8001274:	f001 fbd6 	bl	8002a24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001278:	4b42      	ldr	r3, [pc, #264]	; (8001384 <MX_ADC1_Init+0x224>)
 800127a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800127c:	2318      	movs	r3, #24
 800127e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001280:	463b      	mov	r3, r7
 8001282:	4619      	mov	r1, r3
 8001284:	483a      	ldr	r0, [pc, #232]	; (8001370 <MX_ADC1_Init+0x210>)
 8001286:	f003 f81f 	bl	80042c8 <HAL_ADC_ConfigChannel>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8001290:	f001 fbc8 	bl	8002a24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001294:	4b3c      	ldr	r3, [pc, #240]	; (8001388 <MX_ADC1_Init+0x228>)
 8001296:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001298:	f44f 7380 	mov.w	r3, #256	; 0x100
 800129c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800129e:	463b      	mov	r3, r7
 80012a0:	4619      	mov	r1, r3
 80012a2:	4833      	ldr	r0, [pc, #204]	; (8001370 <MX_ADC1_Init+0x210>)
 80012a4:	f003 f810 	bl	80042c8 <HAL_ADC_ConfigChannel>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 80012ae:	f001 fbb9 	bl	8002a24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80012b2:	4b36      	ldr	r3, [pc, #216]	; (800138c <MX_ADC1_Init+0x22c>)
 80012b4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80012b6:	f44f 7383 	mov.w	r3, #262	; 0x106
 80012ba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012bc:	463b      	mov	r3, r7
 80012be:	4619      	mov	r1, r3
 80012c0:	482b      	ldr	r0, [pc, #172]	; (8001370 <MX_ADC1_Init+0x210>)
 80012c2:	f003 f801 	bl	80042c8 <HAL_ADC_ConfigChannel>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 80012cc:	f001 fbaa 	bl	8002a24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80012d0:	4b2f      	ldr	r3, [pc, #188]	; (8001390 <MX_ADC1_Init+0x230>)
 80012d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80012d4:	f44f 7386 	mov.w	r3, #268	; 0x10c
 80012d8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012da:	463b      	mov	r3, r7
 80012dc:	4619      	mov	r1, r3
 80012de:	4824      	ldr	r0, [pc, #144]	; (8001370 <MX_ADC1_Init+0x210>)
 80012e0:	f002 fff2 	bl	80042c8 <HAL_ADC_ConfigChannel>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 80012ea:	f001 fb9b 	bl	8002a24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80012ee:	4b29      	ldr	r3, [pc, #164]	; (8001394 <MX_ADC1_Init+0x234>)
 80012f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80012f2:	f44f 7389 	mov.w	r3, #274	; 0x112
 80012f6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012f8:	463b      	mov	r3, r7
 80012fa:	4619      	mov	r1, r3
 80012fc:	481c      	ldr	r0, [pc, #112]	; (8001370 <MX_ADC1_Init+0x210>)
 80012fe:	f002 ffe3 	bl	80042c8 <HAL_ADC_ConfigChannel>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 8001308:	f001 fb8c 	bl	8002a24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800130c:	4b22      	ldr	r3, [pc, #136]	; (8001398 <MX_ADC1_Init+0x238>)
 800130e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8001310:	f44f 738c 	mov.w	r3, #280	; 0x118
 8001314:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001316:	463b      	mov	r3, r7
 8001318:	4619      	mov	r1, r3
 800131a:	4815      	ldr	r0, [pc, #84]	; (8001370 <MX_ADC1_Init+0x210>)
 800131c:	f002 ffd4 	bl	80042c8 <HAL_ADC_ConfigChannel>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 8001326:	f001 fb7d 	bl	8002a24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800132a:	4b1c      	ldr	r3, [pc, #112]	; (800139c <MX_ADC1_Init+0x23c>)
 800132c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 800132e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001332:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001334:	463b      	mov	r3, r7
 8001336:	4619      	mov	r1, r3
 8001338:	480d      	ldr	r0, [pc, #52]	; (8001370 <MX_ADC1_Init+0x210>)
 800133a:	f002 ffc5 	bl	80042c8 <HAL_ADC_ConfigChannel>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 8001344:	f001 fb6e 	bl	8002a24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8001348:	4b15      	ldr	r3, [pc, #84]	; (80013a0 <MX_ADC1_Init+0x240>)
 800134a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 800134c:	f240 2306 	movw	r3, #518	; 0x206
 8001350:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001352:	463b      	mov	r3, r7
 8001354:	4619      	mov	r1, r3
 8001356:	4806      	ldr	r0, [pc, #24]	; (8001370 <MX_ADC1_Init+0x210>)
 8001358:	f002 ffb6 	bl	80042c8 <HAL_ADC_ConfigChannel>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 8001362:	f001 fb5f 	bl	8002a24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001366:	bf00      	nop
 8001368:	3728      	adds	r7, #40	; 0x28
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	2400013c 	.word	0x2400013c
 8001374:	40022000 	.word	0x40022000
 8001378:	0c900008 	.word	0x0c900008
 800137c:	10c00010 	.word	0x10c00010
 8001380:	14f00020 	.word	0x14f00020
 8001384:	1d500080 	.word	0x1d500080
 8001388:	21800100 	.word	0x21800100
 800138c:	25b00200 	.word	0x25b00200
 8001390:	2a000400 	.word	0x2a000400
 8001394:	2e300800 	.word	0x2e300800
 8001398:	3ac04000 	.word	0x3ac04000
 800139c:	3ef08000 	.word	0x3ef08000
 80013a0:	47520000 	.word	0x47520000

080013a4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b088      	sub	sp, #32
 80013a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013aa:	1d3b      	adds	r3, r7, #4
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	60da      	str	r2, [r3, #12]
 80013b6:	611a      	str	r2, [r3, #16]
 80013b8:	615a      	str	r2, [r3, #20]
 80013ba:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80013bc:	4b3d      	ldr	r3, [pc, #244]	; (80014b4 <MX_ADC3_Init+0x110>)
 80013be:	4a3e      	ldr	r2, [pc, #248]	; (80014b8 <MX_ADC3_Init+0x114>)
 80013c0:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80013c2:	4b3c      	ldr	r3, [pc, #240]	; (80014b4 <MX_ADC3_Init+0x110>)
 80013c4:	2208      	movs	r2, #8
 80013c6:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80013c8:	4b3a      	ldr	r3, [pc, #232]	; (80014b4 <MX_ADC3_Init+0x110>)
 80013ca:	2201      	movs	r2, #1
 80013cc:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013ce:	4b39      	ldr	r3, [pc, #228]	; (80014b4 <MX_ADC3_Init+0x110>)
 80013d0:	2204      	movs	r2, #4
 80013d2:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80013d4:	4b37      	ldr	r3, [pc, #220]	; (80014b4 <MX_ADC3_Init+0x110>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80013da:	4b36      	ldr	r3, [pc, #216]	; (80014b4 <MX_ADC3_Init+0x110>)
 80013dc:	2201      	movs	r2, #1
 80013de:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 80013e0:	4b34      	ldr	r3, [pc, #208]	; (80014b4 <MX_ADC3_Init+0x110>)
 80013e2:	2204      	movs	r2, #4
 80013e4:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80013e6:	4b33      	ldr	r3, [pc, #204]	; (80014b4 <MX_ADC3_Init+0x110>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013ec:	4b31      	ldr	r3, [pc, #196]	; (80014b4 <MX_ADC3_Init+0x110>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013f2:	4b30      	ldr	r3, [pc, #192]	; (80014b4 <MX_ADC3_Init+0x110>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80013f8:	4b2e      	ldr	r3, [pc, #184]	; (80014b4 <MX_ADC3_Init+0x110>)
 80013fa:	2203      	movs	r2, #3
 80013fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80013fe:	4b2d      	ldr	r3, [pc, #180]	; (80014b4 <MX_ADC3_Init+0x110>)
 8001400:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001404:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001406:	4b2b      	ldr	r3, [pc, #172]	; (80014b4 <MX_ADC3_Init+0x110>)
 8001408:	2200      	movs	r2, #0
 800140a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 800140c:	4b29      	ldr	r3, [pc, #164]	; (80014b4 <MX_ADC3_Init+0x110>)
 800140e:	2200      	movs	r2, #0
 8001410:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001414:	4827      	ldr	r0, [pc, #156]	; (80014b4 <MX_ADC3_Init+0x110>)
 8001416:	f002 fcd3 	bl	8003dc0 <HAL_ADC_Init>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 8001420:	f001 fb00 	bl	8002a24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001424:	4b25      	ldr	r3, [pc, #148]	; (80014bc <MX_ADC3_Init+0x118>)
 8001426:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001428:	2306      	movs	r3, #6
 800142a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800142c:	2307      	movs	r3, #7
 800142e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001430:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001434:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001436:	2304      	movs	r3, #4
 8001438:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800143a:	2300      	movs	r3, #0
 800143c:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800143e:	2300      	movs	r3, #0
 8001440:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001442:	1d3b      	adds	r3, r7, #4
 8001444:	4619      	mov	r1, r3
 8001446:	481b      	ldr	r0, [pc, #108]	; (80014b4 <MX_ADC3_Init+0x110>)
 8001448:	f002 ff3e 	bl	80042c8 <HAL_ADC_ConfigChannel>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 8001452:	f001 fae7 	bl	8002a24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001456:	4b1a      	ldr	r3, [pc, #104]	; (80014c0 <MX_ADC3_Init+0x11c>)
 8001458:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800145a:	230c      	movs	r3, #12
 800145c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800145e:	1d3b      	adds	r3, r7, #4
 8001460:	4619      	mov	r1, r3
 8001462:	4814      	ldr	r0, [pc, #80]	; (80014b4 <MX_ADC3_Init+0x110>)
 8001464:	f002 ff30 	bl	80042c8 <HAL_ADC_ConfigChannel>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 800146e:	f001 fad9 	bl	8002a24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001472:	2301      	movs	r3, #1
 8001474:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001476:	2312      	movs	r3, #18
 8001478:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800147a:	1d3b      	adds	r3, r7, #4
 800147c:	4619      	mov	r1, r3
 800147e:	480d      	ldr	r0, [pc, #52]	; (80014b4 <MX_ADC3_Init+0x110>)
 8001480:	f002 ff22 	bl	80042c8 <HAL_ADC_ConfigChannel>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 800148a:	f001 facb 	bl	8002a24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800148e:	4b0d      	ldr	r3, [pc, #52]	; (80014c4 <MX_ADC3_Init+0x120>)
 8001490:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001492:	2318      	movs	r3, #24
 8001494:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001496:	1d3b      	adds	r3, r7, #4
 8001498:	4619      	mov	r1, r3
 800149a:	4806      	ldr	r0, [pc, #24]	; (80014b4 <MX_ADC3_Init+0x110>)
 800149c:	f002 ff14 	bl	80042c8 <HAL_ADC_ConfigChannel>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 80014a6:	f001 fabd 	bl	8002a24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80014aa:	bf00      	nop
 80014ac:	3720      	adds	r7, #32
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	240001a0 	.word	0x240001a0
 80014b8:	58026000 	.word	0x58026000
 80014bc:	cb840000 	.word	0xcb840000
 80014c0:	cfb80000 	.word	0xcfb80000
 80014c4:	04300002 	.word	0x04300002

080014c8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b08a      	sub	sp, #40	; 0x28
 80014cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80014ce:	1d3b      	adds	r3, r7, #4
 80014d0:	2224      	movs	r2, #36	; 0x24
 80014d2:	2100      	movs	r1, #0
 80014d4:	4618      	mov	r0, r3
 80014d6:	f014 fca9 	bl	8015e2c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80014da:	4b12      	ldr	r3, [pc, #72]	; (8001524 <MX_DAC1_Init+0x5c>)
 80014dc:	4a12      	ldr	r2, [pc, #72]	; (8001528 <MX_DAC1_Init+0x60>)
 80014de:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80014e0:	4810      	ldr	r0, [pc, #64]	; (8001524 <MX_DAC1_Init+0x5c>)
 80014e2:	f003 ff53 	bl	800538c <HAL_DAC_Init>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80014ec:	f001 fa9a 	bl	8002a24 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80014f0:	2300      	movs	r3, #0
 80014f2:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80014f4:	230a      	movs	r3, #10
 80014f6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80014f8:	2300      	movs	r3, #0
 80014fa:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80014fc:	2301      	movs	r3, #1
 80014fe:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001500:	2300      	movs	r3, #0
 8001502:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001504:	1d3b      	adds	r3, r7, #4
 8001506:	2200      	movs	r2, #0
 8001508:	4619      	mov	r1, r3
 800150a:	4806      	ldr	r0, [pc, #24]	; (8001524 <MX_DAC1_Init+0x5c>)
 800150c:	f004 f96e 	bl	80057ec <HAL_DAC_ConfigChannel>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001516:	f001 fa85 	bl	8002a24 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800151a:	bf00      	nop
 800151c:	3728      	adds	r7, #40	; 0x28
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	240002f4 	.word	0x240002f4
 8001528:	40007400 	.word	0x40007400

0800152c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001530:	4b1c      	ldr	r3, [pc, #112]	; (80015a4 <MX_I2C1_Init+0x78>)
 8001532:	4a1d      	ldr	r2, [pc, #116]	; (80015a8 <MX_I2C1_Init+0x7c>)
 8001534:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0020081F;
 8001536:	4b1b      	ldr	r3, [pc, #108]	; (80015a4 <MX_I2C1_Init+0x78>)
 8001538:	4a1c      	ldr	r2, [pc, #112]	; (80015ac <MX_I2C1_Init+0x80>)
 800153a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800153c:	4b19      	ldr	r3, [pc, #100]	; (80015a4 <MX_I2C1_Init+0x78>)
 800153e:	2200      	movs	r2, #0
 8001540:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001542:	4b18      	ldr	r3, [pc, #96]	; (80015a4 <MX_I2C1_Init+0x78>)
 8001544:	2201      	movs	r2, #1
 8001546:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001548:	4b16      	ldr	r3, [pc, #88]	; (80015a4 <MX_I2C1_Init+0x78>)
 800154a:	2200      	movs	r2, #0
 800154c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800154e:	4b15      	ldr	r3, [pc, #84]	; (80015a4 <MX_I2C1_Init+0x78>)
 8001550:	2200      	movs	r2, #0
 8001552:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001554:	4b13      	ldr	r3, [pc, #76]	; (80015a4 <MX_I2C1_Init+0x78>)
 8001556:	2200      	movs	r2, #0
 8001558:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800155a:	4b12      	ldr	r3, [pc, #72]	; (80015a4 <MX_I2C1_Init+0x78>)
 800155c:	2200      	movs	r2, #0
 800155e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001560:	4b10      	ldr	r3, [pc, #64]	; (80015a4 <MX_I2C1_Init+0x78>)
 8001562:	2200      	movs	r2, #0
 8001564:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001566:	480f      	ldr	r0, [pc, #60]	; (80015a4 <MX_I2C1_Init+0x78>)
 8001568:	f007 fb34 	bl	8008bd4 <HAL_I2C_Init>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001572:	f001 fa57 	bl	8002a24 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001576:	2100      	movs	r1, #0
 8001578:	480a      	ldr	r0, [pc, #40]	; (80015a4 <MX_I2C1_Init+0x78>)
 800157a:	f008 f87b 	bl	8009674 <HAL_I2CEx_ConfigAnalogFilter>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001584:	f001 fa4e 	bl	8002a24 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001588:	2100      	movs	r1, #0
 800158a:	4806      	ldr	r0, [pc, #24]	; (80015a4 <MX_I2C1_Init+0x78>)
 800158c:	f008 f8bd 	bl	800970a <HAL_I2CEx_ConfigDigitalFilter>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001596:	f001 fa45 	bl	8002a24 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 800159a:	2001      	movs	r0, #1
 800159c:	f008 f902 	bl	80097a4 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015a0:	bf00      	nop
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	24000380 	.word	0x24000380
 80015a8:	40005400 	.word	0x40005400
 80015ac:	0020081f 	.word	0x0020081f

080015b0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b086      	sub	sp, #24
 80015b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80015b6:	1d3b      	adds	r3, r7, #4
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	605a      	str	r2, [r3, #4]
 80015be:	609a      	str	r2, [r3, #8]
 80015c0:	60da      	str	r2, [r3, #12]
 80015c2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80015c4:	2300      	movs	r3, #0
 80015c6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80015c8:	4b26      	ldr	r3, [pc, #152]	; (8001664 <MX_RTC_Init+0xb4>)
 80015ca:	4a27      	ldr	r2, [pc, #156]	; (8001668 <MX_RTC_Init+0xb8>)
 80015cc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80015ce:	4b25      	ldr	r3, [pc, #148]	; (8001664 <MX_RTC_Init+0xb4>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 100;
 80015d4:	4b23      	ldr	r3, [pc, #140]	; (8001664 <MX_RTC_Init+0xb4>)
 80015d6:	2264      	movs	r2, #100	; 0x64
 80015d8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 10000;
 80015da:	4b22      	ldr	r3, [pc, #136]	; (8001664 <MX_RTC_Init+0xb4>)
 80015dc:	f242 7210 	movw	r2, #10000	; 0x2710
 80015e0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80015e2:	4b20      	ldr	r3, [pc, #128]	; (8001664 <MX_RTC_Init+0xb4>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80015e8:	4b1e      	ldr	r3, [pc, #120]	; (8001664 <MX_RTC_Init+0xb4>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80015ee:	4b1d      	ldr	r3, [pc, #116]	; (8001664 <MX_RTC_Init+0xb4>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80015f4:	4b1b      	ldr	r3, [pc, #108]	; (8001664 <MX_RTC_Init+0xb4>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80015fa:	481a      	ldr	r0, [pc, #104]	; (8001664 <MX_RTC_Init+0xb4>)
 80015fc:	f00b fe56 	bl	800d2ac <HAL_RTC_Init>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8001606:	f001 fa0d 	bl	8002a24 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800160a:	2300      	movs	r3, #0
 800160c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800160e:	2300      	movs	r3, #0
 8001610:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001612:	2300      	movs	r3, #0
 8001614:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001616:	2300      	movs	r3, #0
 8001618:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800161a:	2300      	movs	r3, #0
 800161c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800161e:	1d3b      	adds	r3, r7, #4
 8001620:	2201      	movs	r2, #1
 8001622:	4619      	mov	r1, r3
 8001624:	480f      	ldr	r0, [pc, #60]	; (8001664 <MX_RTC_Init+0xb4>)
 8001626:	f00b fec3 	bl	800d3b0 <HAL_RTC_SetTime>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8001630:	f001 f9f8 	bl	8002a24 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001634:	2301      	movs	r3, #1
 8001636:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001638:	2301      	movs	r3, #1
 800163a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 800163c:	2301      	movs	r3, #1
 800163e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001640:	2300      	movs	r3, #0
 8001642:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001644:	463b      	mov	r3, r7
 8001646:	2201      	movs	r2, #1
 8001648:	4619      	mov	r1, r3
 800164a:	4806      	ldr	r0, [pc, #24]	; (8001664 <MX_RTC_Init+0xb4>)
 800164c:	f00b ffaa 	bl	800d5a4 <HAL_RTC_SetDate>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 8001656:	f001 f9e5 	bl	8002a24 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800165a:	bf00      	nop
 800165c:	3718      	adds	r7, #24
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	240003d4 	.word	0x240003d4
 8001668:	58004000 	.word	0x58004000

0800166c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001670:	4b28      	ldr	r3, [pc, #160]	; (8001714 <MX_SPI1_Init+0xa8>)
 8001672:	4a29      	ldr	r2, [pc, #164]	; (8001718 <MX_SPI1_Init+0xac>)
 8001674:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001676:	4b27      	ldr	r3, [pc, #156]	; (8001714 <MX_SPI1_Init+0xa8>)
 8001678:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800167c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800167e:	4b25      	ldr	r3, [pc, #148]	; (8001714 <MX_SPI1_Init+0xa8>)
 8001680:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001684:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001686:	4b23      	ldr	r3, [pc, #140]	; (8001714 <MX_SPI1_Init+0xa8>)
 8001688:	220f      	movs	r2, #15
 800168a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800168c:	4b21      	ldr	r3, [pc, #132]	; (8001714 <MX_SPI1_Init+0xa8>)
 800168e:	2200      	movs	r2, #0
 8001690:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001692:	4b20      	ldr	r3, [pc, #128]	; (8001714 <MX_SPI1_Init+0xa8>)
 8001694:	2200      	movs	r2, #0
 8001696:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001698:	4b1e      	ldr	r3, [pc, #120]	; (8001714 <MX_SPI1_Init+0xa8>)
 800169a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800169e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80016a0:	4b1c      	ldr	r3, [pc, #112]	; (8001714 <MX_SPI1_Init+0xa8>)
 80016a2:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80016a6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016a8:	4b1a      	ldr	r3, [pc, #104]	; (8001714 <MX_SPI1_Init+0xa8>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016ae:	4b19      	ldr	r3, [pc, #100]	; (8001714 <MX_SPI1_Init+0xa8>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016b4:	4b17      	ldr	r3, [pc, #92]	; (8001714 <MX_SPI1_Init+0xa8>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80016ba:	4b16      	ldr	r3, [pc, #88]	; (8001714 <MX_SPI1_Init+0xa8>)
 80016bc:	2200      	movs	r2, #0
 80016be:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80016c0:	4b14      	ldr	r3, [pc, #80]	; (8001714 <MX_SPI1_Init+0xa8>)
 80016c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016c6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80016c8:	4b12      	ldr	r3, [pc, #72]	; (8001714 <MX_SPI1_Init+0xa8>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80016ce:	4b11      	ldr	r3, [pc, #68]	; (8001714 <MX_SPI1_Init+0xa8>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80016d4:	4b0f      	ldr	r3, [pc, #60]	; (8001714 <MX_SPI1_Init+0xa8>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80016da:	4b0e      	ldr	r3, [pc, #56]	; (8001714 <MX_SPI1_Init+0xa8>)
 80016dc:	2200      	movs	r2, #0
 80016de:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80016e0:	4b0c      	ldr	r3, [pc, #48]	; (8001714 <MX_SPI1_Init+0xa8>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80016e6:	4b0b      	ldr	r3, [pc, #44]	; (8001714 <MX_SPI1_Init+0xa8>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80016ec:	4b09      	ldr	r3, [pc, #36]	; (8001714 <MX_SPI1_Init+0xa8>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80016f2:	4b08      	ldr	r3, [pc, #32]	; (8001714 <MX_SPI1_Init+0xa8>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80016f8:	4b06      	ldr	r3, [pc, #24]	; (8001714 <MX_SPI1_Init+0xa8>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016fe:	4805      	ldr	r0, [pc, #20]	; (8001714 <MX_SPI1_Init+0xa8>)
 8001700:	f00c f8f6 	bl	800d8f0 <HAL_SPI_Init>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 800170a:	f001 f98b 	bl	8002a24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	240003f8 	.word	0x240003f8
 8001718:	40013000 	.word	0x40013000

0800171c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001720:	4b28      	ldr	r3, [pc, #160]	; (80017c4 <MX_SPI2_Init+0xa8>)
 8001722:	4a29      	ldr	r2, [pc, #164]	; (80017c8 <MX_SPI2_Init+0xac>)
 8001724:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001726:	4b27      	ldr	r3, [pc, #156]	; (80017c4 <MX_SPI2_Init+0xa8>)
 8001728:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800172c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800172e:	4b25      	ldr	r3, [pc, #148]	; (80017c4 <MX_SPI2_Init+0xa8>)
 8001730:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001734:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8001736:	4b23      	ldr	r3, [pc, #140]	; (80017c4 <MX_SPI2_Init+0xa8>)
 8001738:	220f      	movs	r2, #15
 800173a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800173c:	4b21      	ldr	r3, [pc, #132]	; (80017c4 <MX_SPI2_Init+0xa8>)
 800173e:	2200      	movs	r2, #0
 8001740:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001742:	4b20      	ldr	r3, [pc, #128]	; (80017c4 <MX_SPI2_Init+0xa8>)
 8001744:	2200      	movs	r2, #0
 8001746:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001748:	4b1e      	ldr	r3, [pc, #120]	; (80017c4 <MX_SPI2_Init+0xa8>)
 800174a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800174e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001750:	4b1c      	ldr	r3, [pc, #112]	; (80017c4 <MX_SPI2_Init+0xa8>)
 8001752:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8001756:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001758:	4b1a      	ldr	r3, [pc, #104]	; (80017c4 <MX_SPI2_Init+0xa8>)
 800175a:	2200      	movs	r2, #0
 800175c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800175e:	4b19      	ldr	r3, [pc, #100]	; (80017c4 <MX_SPI2_Init+0xa8>)
 8001760:	2200      	movs	r2, #0
 8001762:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001764:	4b17      	ldr	r3, [pc, #92]	; (80017c4 <MX_SPI2_Init+0xa8>)
 8001766:	2200      	movs	r2, #0
 8001768:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800176a:	4b16      	ldr	r3, [pc, #88]	; (80017c4 <MX_SPI2_Init+0xa8>)
 800176c:	2200      	movs	r2, #0
 800176e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001770:	4b14      	ldr	r3, [pc, #80]	; (80017c4 <MX_SPI2_Init+0xa8>)
 8001772:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001776:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001778:	4b12      	ldr	r3, [pc, #72]	; (80017c4 <MX_SPI2_Init+0xa8>)
 800177a:	2200      	movs	r2, #0
 800177c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800177e:	4b11      	ldr	r3, [pc, #68]	; (80017c4 <MX_SPI2_Init+0xa8>)
 8001780:	2200      	movs	r2, #0
 8001782:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001784:	4b0f      	ldr	r3, [pc, #60]	; (80017c4 <MX_SPI2_Init+0xa8>)
 8001786:	2200      	movs	r2, #0
 8001788:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800178a:	4b0e      	ldr	r3, [pc, #56]	; (80017c4 <MX_SPI2_Init+0xa8>)
 800178c:	2200      	movs	r2, #0
 800178e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001790:	4b0c      	ldr	r3, [pc, #48]	; (80017c4 <MX_SPI2_Init+0xa8>)
 8001792:	2200      	movs	r2, #0
 8001794:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001796:	4b0b      	ldr	r3, [pc, #44]	; (80017c4 <MX_SPI2_Init+0xa8>)
 8001798:	2200      	movs	r2, #0
 800179a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800179c:	4b09      	ldr	r3, [pc, #36]	; (80017c4 <MX_SPI2_Init+0xa8>)
 800179e:	2200      	movs	r2, #0
 80017a0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80017a2:	4b08      	ldr	r3, [pc, #32]	; (80017c4 <MX_SPI2_Init+0xa8>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80017a8:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <MX_SPI2_Init+0xa8>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80017ae:	4805      	ldr	r0, [pc, #20]	; (80017c4 <MX_SPI2_Init+0xa8>)
 80017b0:	f00c f89e 	bl	800d8f0 <HAL_SPI_Init>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 80017ba:	f001 f933 	bl	8002a24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	24000480 	.word	0x24000480
 80017c8:	40003800 	.word	0x40003800

080017cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b09a      	sub	sp, #104	; 0x68
 80017d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017d2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80017d6:	2200      	movs	r2, #0
 80017d8:	601a      	str	r2, [r3, #0]
 80017da:	605a      	str	r2, [r3, #4]
 80017dc:	609a      	str	r2, [r3, #8]
 80017de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017e0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	605a      	str	r2, [r3, #4]
 80017ea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	60da      	str	r2, [r3, #12]
 80017fa:	611a      	str	r2, [r3, #16]
 80017fc:	615a      	str	r2, [r3, #20]
 80017fe:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001800:	1d3b      	adds	r3, r7, #4
 8001802:	222c      	movs	r2, #44	; 0x2c
 8001804:	2100      	movs	r1, #0
 8001806:	4618      	mov	r0, r3
 8001808:	f014 fb10 	bl	8015e2c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800180c:	4b44      	ldr	r3, [pc, #272]	; (8001920 <MX_TIM1_Init+0x154>)
 800180e:	4a45      	ldr	r2, [pc, #276]	; (8001924 <MX_TIM1_Init+0x158>)
 8001810:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 50-1;
 8001812:	4b43      	ldr	r3, [pc, #268]	; (8001920 <MX_TIM1_Init+0x154>)
 8001814:	2231      	movs	r2, #49	; 0x31
 8001816:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001818:	4b41      	ldr	r3, [pc, #260]	; (8001920 <MX_TIM1_Init+0x154>)
 800181a:	2200      	movs	r2, #0
 800181c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 800181e:	4b40      	ldr	r3, [pc, #256]	; (8001920 <MX_TIM1_Init+0x154>)
 8001820:	f24f 4223 	movw	r2, #62499	; 0xf423
 8001824:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001826:	4b3e      	ldr	r3, [pc, #248]	; (8001920 <MX_TIM1_Init+0x154>)
 8001828:	2200      	movs	r2, #0
 800182a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800182c:	4b3c      	ldr	r3, [pc, #240]	; (8001920 <MX_TIM1_Init+0x154>)
 800182e:	2200      	movs	r2, #0
 8001830:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001832:	4b3b      	ldr	r3, [pc, #236]	; (8001920 <MX_TIM1_Init+0x154>)
 8001834:	2200      	movs	r2, #0
 8001836:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001838:	4839      	ldr	r0, [pc, #228]	; (8001920 <MX_TIM1_Init+0x154>)
 800183a:	f00c fcaa 	bl	800e192 <HAL_TIM_Base_Init>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001844:	f001 f8ee 	bl	8002a24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001848:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800184c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800184e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001852:	4619      	mov	r1, r3
 8001854:	4832      	ldr	r0, [pc, #200]	; (8001920 <MX_TIM1_Init+0x154>)
 8001856:	f00d fa25 	bl	800eca4 <HAL_TIM_ConfigClockSource>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001860:	f001 f8e0 	bl	8002a24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001864:	482e      	ldr	r0, [pc, #184]	; (8001920 <MX_TIM1_Init+0x154>)
 8001866:	f00c ffa1 	bl	800e7ac <HAL_TIM_PWM_Init>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001870:	f001 f8d8 	bl	8002a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001874:	2300      	movs	r3, #0
 8001876:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001878:	2300      	movs	r3, #0
 800187a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800187c:	2300      	movs	r3, #0
 800187e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001880:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001884:	4619      	mov	r1, r3
 8001886:	4826      	ldr	r0, [pc, #152]	; (8001920 <MX_TIM1_Init+0x154>)
 8001888:	f00d ff62 	bl	800f750 <HAL_TIMEx_MasterConfigSynchronization>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001892:	f001 f8c7 	bl	8002a24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001896:	2360      	movs	r3, #96	; 0x60
 8001898:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 800189a:	f240 13df 	movw	r3, #479	; 0x1df
 800189e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018a0:	2300      	movs	r3, #0
 80018a2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018a4:	2300      	movs	r3, #0
 80018a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018a8:	2300      	movs	r3, #0
 80018aa:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018ac:	2300      	movs	r3, #0
 80018ae:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018b0:	2300      	movs	r3, #0
 80018b2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018b8:	2200      	movs	r2, #0
 80018ba:	4619      	mov	r1, r3
 80018bc:	4818      	ldr	r0, [pc, #96]	; (8001920 <MX_TIM1_Init+0x154>)
 80018be:	f00d f8dd 	bl	800ea7c <HAL_TIM_PWM_ConfigChannel>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80018c8:	f001 f8ac 	bl	8002a24 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018cc:	2300      	movs	r3, #0
 80018ce:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018d0:	2300      	movs	r3, #0
 80018d2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018d4:	2300      	movs	r3, #0
 80018d6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018d8:	2300      	movs	r3, #0
 80018da:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018e4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80018e6:	2300      	movs	r3, #0
 80018e8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80018ea:	2300      	movs	r3, #0
 80018ec:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80018ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018f2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80018f4:	2300      	movs	r3, #0
 80018f6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018f8:	2300      	movs	r3, #0
 80018fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80018fc:	1d3b      	adds	r3, r7, #4
 80018fe:	4619      	mov	r1, r3
 8001900:	4807      	ldr	r0, [pc, #28]	; (8001920 <MX_TIM1_Init+0x154>)
 8001902:	f00d ffb3 	bl	800f86c <HAL_TIMEx_ConfigBreakDeadTime>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 800190c:	f001 f88a 	bl	8002a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001910:	4803      	ldr	r0, [pc, #12]	; (8001920 <MX_TIM1_Init+0x154>)
 8001912:	f001 fc37 	bl	8003184 <HAL_TIM_MspPostInit>

}
 8001916:	bf00      	nop
 8001918:	3768      	adds	r7, #104	; 0x68
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	24000508 	.word	0x24000508
 8001924:	40010000 	.word	0x40010000

08001928 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b08e      	sub	sp, #56	; 0x38
 800192c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800192e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	605a      	str	r2, [r3, #4]
 8001938:	609a      	str	r2, [r3, #8]
 800193a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800193c:	f107 031c 	add.w	r3, r7, #28
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	605a      	str	r2, [r3, #4]
 8001946:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001948:	463b      	mov	r3, r7
 800194a:	2200      	movs	r2, #0
 800194c:	601a      	str	r2, [r3, #0]
 800194e:	605a      	str	r2, [r3, #4]
 8001950:	609a      	str	r2, [r3, #8]
 8001952:	60da      	str	r2, [r3, #12]
 8001954:	611a      	str	r2, [r3, #16]
 8001956:	615a      	str	r2, [r3, #20]
 8001958:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800195a:	4b2d      	ldr	r3, [pc, #180]	; (8001a10 <MX_TIM2_Init+0xe8>)
 800195c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001960:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 50-1;
 8001962:	4b2b      	ldr	r3, [pc, #172]	; (8001a10 <MX_TIM2_Init+0xe8>)
 8001964:	2231      	movs	r2, #49	; 0x31
 8001966:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001968:	4b29      	ldr	r3, [pc, #164]	; (8001a10 <MX_TIM2_Init+0xe8>)
 800196a:	2200      	movs	r2, #0
 800196c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 800196e:	4b28      	ldr	r3, [pc, #160]	; (8001a10 <MX_TIM2_Init+0xe8>)
 8001970:	f640 4234 	movw	r2, #3124	; 0xc34
 8001974:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001976:	4b26      	ldr	r3, [pc, #152]	; (8001a10 <MX_TIM2_Init+0xe8>)
 8001978:	2200      	movs	r2, #0
 800197a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800197c:	4b24      	ldr	r3, [pc, #144]	; (8001a10 <MX_TIM2_Init+0xe8>)
 800197e:	2280      	movs	r2, #128	; 0x80
 8001980:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001982:	4823      	ldr	r0, [pc, #140]	; (8001a10 <MX_TIM2_Init+0xe8>)
 8001984:	f00c fc05 	bl	800e192 <HAL_TIM_Base_Init>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800198e:	f001 f849 	bl	8002a24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001992:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001996:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001998:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800199c:	4619      	mov	r1, r3
 800199e:	481c      	ldr	r0, [pc, #112]	; (8001a10 <MX_TIM2_Init+0xe8>)
 80019a0:	f00d f980 	bl	800eca4 <HAL_TIM_ConfigClockSource>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80019aa:	f001 f83b 	bl	8002a24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80019ae:	4818      	ldr	r0, [pc, #96]	; (8001a10 <MX_TIM2_Init+0xe8>)
 80019b0:	f00c fefc 	bl	800e7ac <HAL_TIM_PWM_Init>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80019ba:	f001 f833 	bl	8002a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80019be:	2320      	movs	r3, #32
 80019c0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019c2:	2300      	movs	r3, #0
 80019c4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019c6:	f107 031c 	add.w	r3, r7, #28
 80019ca:	4619      	mov	r1, r3
 80019cc:	4810      	ldr	r0, [pc, #64]	; (8001a10 <MX_TIM2_Init+0xe8>)
 80019ce:	f00d febf 	bl	800f750 <HAL_TIMEx_MasterConfigSynchronization>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80019d8:	f001 f824 	bl	8002a24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019dc:	2360      	movs	r3, #96	; 0x60
 80019de:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80019e0:	2300      	movs	r3, #0
 80019e2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019e4:	2300      	movs	r3, #0
 80019e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019e8:	2300      	movs	r3, #0
 80019ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80019ec:	463b      	mov	r3, r7
 80019ee:	220c      	movs	r2, #12
 80019f0:	4619      	mov	r1, r3
 80019f2:	4807      	ldr	r0, [pc, #28]	; (8001a10 <MX_TIM2_Init+0xe8>)
 80019f4:	f00d f842 	bl	800ea7c <HAL_TIM_PWM_ConfigChannel>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80019fe:	f001 f811 	bl	8002a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001a02:	4803      	ldr	r0, [pc, #12]	; (8001a10 <MX_TIM2_Init+0xe8>)
 8001a04:	f001 fbbe 	bl	8003184 <HAL_TIM_MspPostInit>

}
 8001a08:	bf00      	nop
 8001a0a:	3738      	adds	r7, #56	; 0x38
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	24000554 	.word	0x24000554

08001a14 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b088      	sub	sp, #32
 8001a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a1a:	f107 0310 	add.w	r3, r7, #16
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	605a      	str	r2, [r3, #4]
 8001a24:	609a      	str	r2, [r3, #8]
 8001a26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a28:	1d3b      	adds	r3, r7, #4
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	601a      	str	r2, [r3, #0]
 8001a2e:	605a      	str	r2, [r3, #4]
 8001a30:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a32:	4b1e      	ldr	r3, [pc, #120]	; (8001aac <MX_TIM3_Init+0x98>)
 8001a34:	4a1e      	ldr	r2, [pc, #120]	; (8001ab0 <MX_TIM3_Init+0x9c>)
 8001a36:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10000-1;
 8001a38:	4b1c      	ldr	r3, [pc, #112]	; (8001aac <MX_TIM3_Init+0x98>)
 8001a3a:	f242 720f 	movw	r2, #9999	; 0x270f
 8001a3e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a40:	4b1a      	ldr	r3, [pc, #104]	; (8001aac <MX_TIM3_Init+0x98>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 8001a46:	4b19      	ldr	r3, [pc, #100]	; (8001aac <MX_TIM3_Init+0x98>)
 8001a48:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001a4c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a4e:	4b17      	ldr	r3, [pc, #92]	; (8001aac <MX_TIM3_Init+0x98>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a54:	4b15      	ldr	r3, [pc, #84]	; (8001aac <MX_TIM3_Init+0x98>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a5a:	4814      	ldr	r0, [pc, #80]	; (8001aac <MX_TIM3_Init+0x98>)
 8001a5c:	f00c fb99 	bl	800e192 <HAL_TIM_Base_Init>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8001a66:	f000 ffdd 	bl	8002a24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a6e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a70:	f107 0310 	add.w	r3, r7, #16
 8001a74:	4619      	mov	r1, r3
 8001a76:	480d      	ldr	r0, [pc, #52]	; (8001aac <MX_TIM3_Init+0x98>)
 8001a78:	f00d f914 	bl	800eca4 <HAL_TIM_ConfigClockSource>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001a82:	f000 ffcf 	bl	8002a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a86:	2300      	movs	r3, #0
 8001a88:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a8e:	1d3b      	adds	r3, r7, #4
 8001a90:	4619      	mov	r1, r3
 8001a92:	4806      	ldr	r0, [pc, #24]	; (8001aac <MX_TIM3_Init+0x98>)
 8001a94:	f00d fe5c 	bl	800f750 <HAL_TIMEx_MasterConfigSynchronization>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001a9e:	f000 ffc1 	bl	8002a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001aa2:	bf00      	nop
 8001aa4:	3720      	adds	r7, #32
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	240005a0 	.word	0x240005a0
 8001ab0:	40000400 	.word	0x40000400

08001ab4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b088      	sub	sp, #32
 8001ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aba:	f107 0310 	add.w	r3, r7, #16
 8001abe:	2200      	movs	r2, #0
 8001ac0:	601a      	str	r2, [r3, #0]
 8001ac2:	605a      	str	r2, [r3, #4]
 8001ac4:	609a      	str	r2, [r3, #8]
 8001ac6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ac8:	1d3b      	adds	r3, r7, #4
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	605a      	str	r2, [r3, #4]
 8001ad0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001ad2:	4b1d      	ldr	r3, [pc, #116]	; (8001b48 <MX_TIM4_Init+0x94>)
 8001ad4:	4a1d      	ldr	r2, [pc, #116]	; (8001b4c <MX_TIM4_Init+0x98>)
 8001ad6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 100-1;
 8001ad8:	4b1b      	ldr	r3, [pc, #108]	; (8001b48 <MX_TIM4_Init+0x94>)
 8001ada:	2263      	movs	r2, #99	; 0x63
 8001adc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ade:	4b1a      	ldr	r3, [pc, #104]	; (8001b48 <MX_TIM4_Init+0x94>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 50000-1;
 8001ae4:	4b18      	ldr	r3, [pc, #96]	; (8001b48 <MX_TIM4_Init+0x94>)
 8001ae6:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001aea:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aec:	4b16      	ldr	r3, [pc, #88]	; (8001b48 <MX_TIM4_Init+0x94>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001af2:	4b15      	ldr	r3, [pc, #84]	; (8001b48 <MX_TIM4_Init+0x94>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001af8:	4813      	ldr	r0, [pc, #76]	; (8001b48 <MX_TIM4_Init+0x94>)
 8001afa:	f00c fb4a 	bl	800e192 <HAL_TIM_Base_Init>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001b04:	f000 ff8e 	bl	8002a24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b0c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001b0e:	f107 0310 	add.w	r3, r7, #16
 8001b12:	4619      	mov	r1, r3
 8001b14:	480c      	ldr	r0, [pc, #48]	; (8001b48 <MX_TIM4_Init+0x94>)
 8001b16:	f00d f8c5 	bl	800eca4 <HAL_TIM_ConfigClockSource>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001b20:	f000 ff80 	bl	8002a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b24:	2300      	movs	r3, #0
 8001b26:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b2c:	1d3b      	adds	r3, r7, #4
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4805      	ldr	r0, [pc, #20]	; (8001b48 <MX_TIM4_Init+0x94>)
 8001b32:	f00d fe0d 	bl	800f750 <HAL_TIMEx_MasterConfigSynchronization>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001b3c:	f000 ff72 	bl	8002a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001b40:	bf00      	nop
 8001b42:	3720      	adds	r7, #32
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	240005ec 	.word	0x240005ec
 8001b4c:	40000800 	.word	0x40000800

08001b50 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b54:	4b22      	ldr	r3, [pc, #136]	; (8001be0 <MX_USART1_UART_Init+0x90>)
 8001b56:	4a23      	ldr	r2, [pc, #140]	; (8001be4 <MX_USART1_UART_Init+0x94>)
 8001b58:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8001b5a:	4b21      	ldr	r3, [pc, #132]	; (8001be0 <MX_USART1_UART_Init+0x90>)
 8001b5c:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8001b60:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b62:	4b1f      	ldr	r3, [pc, #124]	; (8001be0 <MX_USART1_UART_Init+0x90>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b68:	4b1d      	ldr	r3, [pc, #116]	; (8001be0 <MX_USART1_UART_Init+0x90>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b6e:	4b1c      	ldr	r3, [pc, #112]	; (8001be0 <MX_USART1_UART_Init+0x90>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b74:	4b1a      	ldr	r3, [pc, #104]	; (8001be0 <MX_USART1_UART_Init+0x90>)
 8001b76:	220c      	movs	r2, #12
 8001b78:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b7a:	4b19      	ldr	r3, [pc, #100]	; (8001be0 <MX_USART1_UART_Init+0x90>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b80:	4b17      	ldr	r3, [pc, #92]	; (8001be0 <MX_USART1_UART_Init+0x90>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b86:	4b16      	ldr	r3, [pc, #88]	; (8001be0 <MX_USART1_UART_Init+0x90>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b8c:	4b14      	ldr	r3, [pc, #80]	; (8001be0 <MX_USART1_UART_Init+0x90>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b92:	4b13      	ldr	r3, [pc, #76]	; (8001be0 <MX_USART1_UART_Init+0x90>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b98:	4811      	ldr	r0, [pc, #68]	; (8001be0 <MX_USART1_UART_Init+0x90>)
 8001b9a:	f00d ff03 	bl	800f9a4 <HAL_UART_Init>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001ba4:	f000 ff3e 	bl	8002a24 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ba8:	2100      	movs	r1, #0
 8001baa:	480d      	ldr	r0, [pc, #52]	; (8001be0 <MX_USART1_UART_Init+0x90>)
 8001bac:	f010 fb29 	bl	8012202 <HAL_UARTEx_SetTxFifoThreshold>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001bb6:	f000 ff35 	bl	8002a24 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bba:	2100      	movs	r1, #0
 8001bbc:	4808      	ldr	r0, [pc, #32]	; (8001be0 <MX_USART1_UART_Init+0x90>)
 8001bbe:	f010 fb5e 	bl	801227e <HAL_UARTEx_SetRxFifoThreshold>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001bc8:	f000 ff2c 	bl	8002a24 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001bcc:	4804      	ldr	r0, [pc, #16]	; (8001be0 <MX_USART1_UART_Init+0x90>)
 8001bce:	f010 fadf 	bl	8012190 <HAL_UARTEx_DisableFifoMode>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001bd8:	f000 ff24 	bl	8002a24 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001bdc:	bf00      	nop
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	24000638 	.word	0x24000638
 8001be4:	40011000 	.word	0x40011000

08001be8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bee:	4b19      	ldr	r3, [pc, #100]	; (8001c54 <MX_DMA_Init+0x6c>)
 8001bf0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001bf4:	4a17      	ldr	r2, [pc, #92]	; (8001c54 <MX_DMA_Init+0x6c>)
 8001bf6:	f043 0301 	orr.w	r3, r3, #1
 8001bfa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001bfe:	4b15      	ldr	r3, [pc, #84]	; (8001c54 <MX_DMA_Init+0x6c>)
 8001c00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c04:	f003 0301 	and.w	r3, r3, #1
 8001c08:	607b      	str	r3, [r7, #4]
 8001c0a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	2105      	movs	r1, #5
 8001c10:	200b      	movs	r0, #11
 8001c12:	f003 fb93 	bl	800533c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001c16:	200b      	movs	r0, #11
 8001c18:	f003 fbaa 	bl	8005370 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	2105      	movs	r1, #5
 8001c20:	200c      	movs	r0, #12
 8001c22:	f003 fb8b 	bl	800533c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001c26:	200c      	movs	r0, #12
 8001c28:	f003 fba2 	bl	8005370 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	2105      	movs	r1, #5
 8001c30:	200d      	movs	r0, #13
 8001c32:	f003 fb83 	bl	800533c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001c36:	200d      	movs	r0, #13
 8001c38:	f003 fb9a 	bl	8005370 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	2105      	movs	r1, #5
 8001c40:	2010      	movs	r0, #16
 8001c42:	f003 fb7b 	bl	800533c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001c46:	2010      	movs	r0, #16
 8001c48:	f003 fb92 	bl	8005370 <HAL_NVIC_EnableIRQ>

}
 8001c4c:	bf00      	nop
 8001c4e:	3708      	adds	r7, #8
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	58024400 	.word	0x58024400

08001c58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b08a      	sub	sp, #40	; 0x28
 8001c5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c5e:	f107 0314 	add.w	r3, r7, #20
 8001c62:	2200      	movs	r2, #0
 8001c64:	601a      	str	r2, [r3, #0]
 8001c66:	605a      	str	r2, [r3, #4]
 8001c68:	609a      	str	r2, [r3, #8]
 8001c6a:	60da      	str	r2, [r3, #12]
 8001c6c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c6e:	4b34      	ldr	r3, [pc, #208]	; (8001d40 <MX_GPIO_Init+0xe8>)
 8001c70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c74:	4a32      	ldr	r2, [pc, #200]	; (8001d40 <MX_GPIO_Init+0xe8>)
 8001c76:	f043 0304 	orr.w	r3, r3, #4
 8001c7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c7e:	4b30      	ldr	r3, [pc, #192]	; (8001d40 <MX_GPIO_Init+0xe8>)
 8001c80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c84:	f003 0304 	and.w	r3, r3, #4
 8001c88:	613b      	str	r3, [r7, #16]
 8001c8a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c8c:	4b2c      	ldr	r3, [pc, #176]	; (8001d40 <MX_GPIO_Init+0xe8>)
 8001c8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c92:	4a2b      	ldr	r2, [pc, #172]	; (8001d40 <MX_GPIO_Init+0xe8>)
 8001c94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c9c:	4b28      	ldr	r3, [pc, #160]	; (8001d40 <MX_GPIO_Init+0xe8>)
 8001c9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ca6:	60fb      	str	r3, [r7, #12]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001caa:	4b25      	ldr	r3, [pc, #148]	; (8001d40 <MX_GPIO_Init+0xe8>)
 8001cac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cb0:	4a23      	ldr	r2, [pc, #140]	; (8001d40 <MX_GPIO_Init+0xe8>)
 8001cb2:	f043 0301 	orr.w	r3, r3, #1
 8001cb6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cba:	4b21      	ldr	r3, [pc, #132]	; (8001d40 <MX_GPIO_Init+0xe8>)
 8001cbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cc0:	f003 0301 	and.w	r3, r3, #1
 8001cc4:	60bb      	str	r3, [r7, #8]
 8001cc6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cc8:	4b1d      	ldr	r3, [pc, #116]	; (8001d40 <MX_GPIO_Init+0xe8>)
 8001cca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cce:	4a1c      	ldr	r2, [pc, #112]	; (8001d40 <MX_GPIO_Init+0xe8>)
 8001cd0:	f043 0302 	orr.w	r3, r3, #2
 8001cd4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cd8:	4b19      	ldr	r3, [pc, #100]	; (8001d40 <MX_GPIO_Init+0xe8>)
 8001cda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	607b      	str	r3, [r7, #4]
 8001ce4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8001cec:	4815      	ldr	r0, [pc, #84]	; (8001d44 <MX_GPIO_Init+0xec>)
 8001cee:	f006 ff57 	bl	8008ba0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	2164      	movs	r1, #100	; 0x64
 8001cf6:	4814      	ldr	r0, [pc, #80]	; (8001d48 <MX_GPIO_Init+0xf0>)
 8001cf8:	f006 ff52 	bl	8008ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001cfc:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8001d00:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d02:	2301      	movs	r3, #1
 8001d04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d06:	2302      	movs	r3, #2
 8001d08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d0e:	f107 0314 	add.w	r3, r7, #20
 8001d12:	4619      	mov	r1, r3
 8001d14:	480b      	ldr	r0, [pc, #44]	; (8001d44 <MX_GPIO_Init+0xec>)
 8001d16:	f006 fd7b 	bl	8008810 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001d1a:	2364      	movs	r3, #100	; 0x64
 8001d1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d22:	2302      	movs	r3, #2
 8001d24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d26:	2300      	movs	r3, #0
 8001d28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d2a:	f107 0314 	add.w	r3, r7, #20
 8001d2e:	4619      	mov	r1, r3
 8001d30:	4805      	ldr	r0, [pc, #20]	; (8001d48 <MX_GPIO_Init+0xf0>)
 8001d32:	f006 fd6d 	bl	8008810 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d36:	bf00      	nop
 8001d38:	3728      	adds	r7, #40	; 0x28
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	58024400 	.word	0x58024400
 8001d44:	58020800 	.word	0x58020800
 8001d48:	58020400 	.word	0x58020400

08001d4c <poll_i2c_sensor>:
 * and reads the temperature value.
 *
 * @param TEMP_ADDR The I2C address of the temperature sensor.
 * @return The temperature reading from the sensor, or an error code.
 */
int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR) {
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b086      	sub	sp, #24
 8001d50:	af02      	add	r7, sp, #8
 8001d52:	4603      	mov	r3, r0
 8001d54:	71fb      	strb	r3, [r7, #7]
	int16_t output;
	uint8_t buf[2];
	HAL_StatusTypeDef ret;
	buf[0] = REG_TEMP;
 8001d56:	2300      	movs	r3, #0
 8001d58:	723b      	strb	r3, [r7, #8]
	ret = HAL_I2C_Master_Transmit(&hi2c1, TEMP_ADDR, buf, 1, 1000);
 8001d5a:	79fb      	ldrb	r3, [r7, #7]
 8001d5c:	b299      	uxth	r1, r3
 8001d5e:	f107 0208 	add.w	r2, r7, #8
 8001d62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d66:	9300      	str	r3, [sp, #0]
 8001d68:	2301      	movs	r3, #1
 8001d6a:	4817      	ldr	r0, [pc, #92]	; (8001dc8 <poll_i2c_sensor+0x7c>)
 8001d6c:	f006 ffce 	bl	8008d0c <HAL_I2C_Master_Transmit>
 8001d70:	4603      	mov	r3, r0
 8001d72:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 8001d74:	7b7b      	ldrb	r3, [r7, #13]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d003      	beq.n	8001d82 <poll_i2c_sensor+0x36>
		printf("I2C TX Error\n");
 8001d7a:	4814      	ldr	r0, [pc, #80]	; (8001dcc <poll_i2c_sensor+0x80>)
 8001d7c:	f014 f9ac 	bl	80160d8 <puts>
 8001d80:	e01c      	b.n	8001dbc <poll_i2c_sensor+0x70>
	} else {
		/* Read 2 bytes from the temperature register */
		ret = HAL_I2C_Master_Receive(&hi2c1, TEMP_ADDR, buf, 2, 1000);
 8001d82:	79fb      	ldrb	r3, [r7, #7]
 8001d84:	b299      	uxth	r1, r3
 8001d86:	f107 0208 	add.w	r2, r7, #8
 8001d8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d8e:	9300      	str	r3, [sp, #0]
 8001d90:	2302      	movs	r3, #2
 8001d92:	480d      	ldr	r0, [pc, #52]	; (8001dc8 <poll_i2c_sensor+0x7c>)
 8001d94:	f007 f8d2 	bl	8008f3c <HAL_I2C_Master_Receive>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	737b      	strb	r3, [r7, #13]
		if (ret != HAL_OK) {
 8001d9c:	7b7b      	ldrb	r3, [r7, #13]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d003      	beq.n	8001daa <poll_i2c_sensor+0x5e>
			printf("I2C RX Error\n");
 8001da2:	480b      	ldr	r0, [pc, #44]	; (8001dd0 <poll_i2c_sensor+0x84>)
 8001da4:	f014 f998 	bl	80160d8 <puts>
 8001da8:	e008      	b.n	8001dbc <poll_i2c_sensor+0x70>
		} else {
			output = (int16_t) (buf[0] << 8);
 8001daa:	7a3b      	ldrb	r3, [r7, #8]
 8001dac:	021b      	lsls	r3, r3, #8
 8001dae:	81fb      	strh	r3, [r7, #14]
			output = (output | buf[1]) >> 3;
 8001db0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001db4:	7a7a      	ldrb	r2, [r7, #9]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	10db      	asrs	r3, r3, #3
 8001dba:	81fb      	strh	r3, [r7, #14]
		}
	}
	return output;
 8001dbc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3710      	adds	r7, #16
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	24000380 	.word	0x24000380
 8001dcc:	08016a9c 	.word	0x08016a9c
 8001dd0:	08016aac 	.word	0x08016aac

08001dd4 <receive_pmt_spi>:
 * in the provided buffer.
 *
 * @param spi_handle The handle to the SPI device.
 * @param buffer The buffer to store the received data.
 */
void receive_pmt_spi(uint8_t *buffer) {
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi1, (uint8_t*) spi_raw_data, 1, 1);
 8001ddc:	f107 010c 	add.w	r1, r7, #12
 8001de0:	2301      	movs	r3, #1
 8001de2:	2201      	movs	r2, #1
 8001de4:	480c      	ldr	r0, [pc, #48]	; (8001e18 <receive_pmt_spi+0x44>)
 8001de6:	f00b fea7 	bl	800db38 <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 8001dea:	2300      	movs	r3, #0
 8001dec:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 8001dee:	7b7b      	ldrb	r3, [r7, #13]
 8001df0:	73bb      	strb	r3, [r7, #14]

	hspi1.Instance->CR1 |= 1 << 10;
 8001df2:	4b09      	ldr	r3, [pc, #36]	; (8001e18 <receive_pmt_spi+0x44>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	4b07      	ldr	r3, [pc, #28]	; (8001e18 <receive_pmt_spi+0x44>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001e00:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	7bba      	ldrb	r2, [r7, #14]
 8001e06:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	7bfa      	ldrb	r2, [r7, #15]
 8001e0e:	701a      	strb	r2, [r3, #0]
}
 8001e10:	bf00      	nop
 8001e12:	3710      	adds	r7, #16
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	240003f8 	.word	0x240003f8

08001e1c <receive_erpa_spi>:
 * in the provided buffer.
 *
 * @param spi_handle The handle to the SPI device.
 * @param buffer The buffer to store the received data.
 */
void receive_erpa_spi(uint8_t *buffer) {
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi2, (uint8_t*) spi_raw_data, 1, 100);
 8001e24:	f107 010c 	add.w	r1, r7, #12
 8001e28:	2364      	movs	r3, #100	; 0x64
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	480c      	ldr	r0, [pc, #48]	; (8001e60 <receive_erpa_spi+0x44>)
 8001e2e:	f00b fe83 	bl	800db38 <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 8001e32:	2300      	movs	r3, #0
 8001e34:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 8001e36:	7b7b      	ldrb	r3, [r7, #13]
 8001e38:	73bb      	strb	r3, [r7, #14]

	hspi2.Instance->CR1 |= 1 << 10;
 8001e3a:	4b09      	ldr	r3, [pc, #36]	; (8001e60 <receive_erpa_spi+0x44>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	4b07      	ldr	r3, [pc, #28]	; (8001e60 <receive_erpa_spi+0x44>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001e48:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	7bba      	ldrb	r2, [r7, #14]
 8001e4e:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	3301      	adds	r3, #1
 8001e54:	7bfa      	ldrb	r2, [r7, #15]
 8001e56:	701a      	strb	r2, [r3, #0]
}
 8001e58:	bf00      	nop
 8001e5a:	3710      	adds	r7, #16
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	24000480 	.word	0x24000480

08001e64 <receive_erpa_adc>:
 * This function retrieves data from specific ADC channels and stores the values
 * in the provided buffer.
 *
 * @param buffer The buffer to store the received ADC data.
 */
void receive_erpa_adc(uint16_t *buffer) {
 8001e64:	b480      	push	{r7}
 8001e66:	b085      	sub	sp, #20
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
	uint16_t PC4 = ADC1_raw_data[1];
 8001e6c:	4b09      	ldr	r3, [pc, #36]	; (8001e94 <receive_erpa_adc+0x30>)
 8001e6e:	885b      	ldrh	r3, [r3, #2]
 8001e70:	81fb      	strh	r3, [r7, #14]
	uint16_t PB0 = ADC1_raw_data[5];
 8001e72:	4b08      	ldr	r3, [pc, #32]	; (8001e94 <receive_erpa_adc+0x30>)
 8001e74:	895b      	ldrh	r3, [r3, #10]
 8001e76:	81bb      	strh	r3, [r7, #12]

	buffer[0] = PC4;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	89fa      	ldrh	r2, [r7, #14]
 8001e7c:	801a      	strh	r2, [r3, #0]
	buffer[1] = PB0;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	3302      	adds	r3, #2
 8001e82:	89ba      	ldrh	r2, [r7, #12]
 8001e84:	801a      	strh	r2, [r3, #0]
}
 8001e86:	bf00      	nop
 8001e88:	3714      	adds	r7, #20
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	24000ca0 	.word	0x24000ca0

08001e98 <receive_hk_i2c>:
 *
 * This function polls multiple I2C sensors and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received I2C sensor data.
 */
void receive_hk_i2c(int16_t *buffer) {
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
	int16_t output1 = poll_i2c_sensor(ADT7410_1);
 8001ea0:	2390      	movs	r3, #144	; 0x90
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7ff ff52 	bl	8001d4c <poll_i2c_sensor>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	81fb      	strh	r3, [r7, #14]
	int16_t output2 = poll_i2c_sensor(ADT7410_2);
 8001eac:	2394      	movs	r3, #148	; 0x94
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7ff ff4c 	bl	8001d4c <poll_i2c_sensor>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	81bb      	strh	r3, [r7, #12]
	int16_t output3 = poll_i2c_sensor(ADT7410_3);
 8001eb8:	2392      	movs	r3, #146	; 0x92
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7ff ff46 	bl	8001d4c <poll_i2c_sensor>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	817b      	strh	r3, [r7, #10]
	int16_t output4 = poll_i2c_sensor(ADT7410_4);
 8001ec4:	2396      	movs	r3, #150	; 0x96
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7ff ff40 	bl	8001d4c <poll_i2c_sensor>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	813b      	strh	r3, [r7, #8]

	buffer[0] = output1;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	89fa      	ldrh	r2, [r7, #14]
 8001ed4:	801a      	strh	r2, [r3, #0]
	buffer[1] = output2;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	3302      	adds	r3, #2
 8001eda:	89ba      	ldrh	r2, [r7, #12]
 8001edc:	801a      	strh	r2, [r3, #0]
	buffer[2] = output3;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	3304      	adds	r3, #4
 8001ee2:	897a      	ldrh	r2, [r7, #10]
 8001ee4:	801a      	strh	r2, [r3, #0]
	buffer[3] = output4;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	3306      	adds	r3, #6
 8001eea:	893a      	ldrh	r2, [r7, #8]
 8001eec:	801a      	strh	r2, [r3, #0]
}
 8001eee:	bf00      	nop
 8001ef0:	3710      	adds	r7, #16
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
	...

08001ef8 <HAL_UART_TxCpltCallback>:

/**
 * @brief UART transmit complete callback.
 * @param huart: UART handle.
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
	tx_flag = 1;
 8001f00:	4b04      	ldr	r3, [pc, #16]	; (8001f14 <HAL_UART_TxCpltCallback+0x1c>)
 8001f02:	2201      	movs	r2, #1
 8001f04:	601a      	str	r2, [r3, #0]
}
 8001f06:	bf00      	nop
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	24000000 	.word	0x24000000

08001f18 <create_packet>:
 * @brief Creates a packet with given data and size.
 * @param data: Pointer to data to be copied into the packet.
 * @param size: Size of the data.
 * @return Created packet.
 */
packet_t create_packet(const uint8_t *data, uint16_t size) {
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b086      	sub	sp, #24
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	60b9      	str	r1, [r7, #8]
 8001f22:	4613      	mov	r3, r2
 8001f24:	80fb      	strh	r3, [r7, #6]
	packet_t packet;
	packet.array = (uint8_t*) malloc(size * sizeof(uint8_t));
 8001f26:	88fb      	ldrh	r3, [r7, #6]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f013 ff61 	bl	8015df0 <malloc>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	613b      	str	r3, [r7, #16]
	if (packet.array == NULL) {
		// Packet array is null somehow, should probably do something about this edge case
	}
	memcpy(packet.array, data, size);
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	88fa      	ldrh	r2, [r7, #6]
 8001f36:	68b9      	ldr	r1, [r7, #8]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f013 ff69 	bl	8015e10 <memcpy>
	packet.size = size;
 8001f3e:	88fb      	ldrh	r3, [r7, #6]
 8001f40:	82bb      	strh	r3, [r7, #20]
	return packet;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	461a      	mov	r2, r3
 8001f46:	f107 0310 	add.w	r3, r7, #16
 8001f4a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001f4e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001f52:	68f8      	ldr	r0, [r7, #12]
 8001f54:	3718      	adds	r7, #24
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
	...

08001f5c <system_setup>:
 *
 * This function initializes various system components including timers, ADC calibration, and DMA for ADC data acquisition.
 * It starts PWM for TIM2, performs ADC calibration for ADC1 and ADC3, and starts DMA for ADC data acquisition.
 * Any errors encountered during these initialization steps are handled by the Error_Handler function.
 */
void system_setup() {
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
	HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);
 8001f60:	2100      	movs	r1, #0
 8001f62:	481b      	ldr	r0, [pc, #108]	; (8001fd0 <system_setup+0x74>)
 8001f64:	f00c f9e4 	bl	800e330 <HAL_TIM_OC_Start_IT>

	TIM2->CCR4 = 312;
 8001f68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f6c:	f44f 729c 	mov.w	r2, #312	; 0x138
 8001f70:	641a      	str	r2, [r3, #64]	; 0x40
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 8001f72:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001f76:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001f7a:	4816      	ldr	r0, [pc, #88]	; (8001fd4 <system_setup+0x78>)
 8001f7c:	f002 ffe4 	bl	8004f48 <HAL_ADCEx_Calibration_Start>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <system_setup+0x2e>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 8001f86:	f000 fd4d 	bl	8002a24 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 8001f8a:	220b      	movs	r2, #11
 8001f8c:	4912      	ldr	r1, [pc, #72]	; (8001fd8 <system_setup+0x7c>)
 8001f8e:	4811      	ldr	r0, [pc, #68]	; (8001fd4 <system_setup+0x78>)
 8001f90:	f002 f8b8 	bl	8004104 <HAL_ADC_Start_DMA>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <system_setup+0x42>
	ADC1_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8001f9a:	f000 fd43 	bl	8002a24 <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 8001f9e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001fa2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001fa6:	480d      	ldr	r0, [pc, #52]	; (8001fdc <system_setup+0x80>)
 8001fa8:	f002 ffce 	bl	8004f48 <HAL_ADCEx_Calibration_Start>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <system_setup+0x5a>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 8001fb2:	f000 fd37 	bl	8002a24 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 8001fb6:	2204      	movs	r2, #4
 8001fb8:	4909      	ldr	r1, [pc, #36]	; (8001fe0 <system_setup+0x84>)
 8001fba:	4808      	ldr	r0, [pc, #32]	; (8001fdc <system_setup+0x80>)
 8001fbc:	f002 f8a2 	bl	8004104 <HAL_ADC_Start_DMA>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <system_setup+0x6e>
	ADC3_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8001fc6:	f000 fd2d 	bl	8002a24 <Error_Handler>
	}
}
 8001fca:	bf00      	nop
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	240005ec 	.word	0x240005ec
 8001fd4:	2400013c 	.word	0x2400013c
 8001fd8:	24000ca0 	.word	0x24000ca0
 8001fdc:	240001a0 	.word	0x240001a0
 8001fe0:	24000cc0 	.word	0x24000cc0

08001fe4 <getTimestamp>:

/**
 * @brief Gets the current timestamp and stores it in the provided buffer.
 * @param buffer: Pointer to the buffer where the timestamp will be stored.
 */
void getTimestamp(uint8_t *buffer) {
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b08a      	sub	sp, #40	; 0x28
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef currentTime;
	RTC_DateTypeDef currentDate;

	HAL_RTC_GetTime(&hrtc, &currentTime, RTC_FORMAT_BIN);
 8001fec:	f107 0310 	add.w	r3, r7, #16
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4821      	ldr	r0, [pc, #132]	; (800207c <getTimestamp+0x98>)
 8001ff6:	f00b fa79 	bl	800d4ec <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);
 8001ffa:	f107 030c 	add.w	r3, r7, #12
 8001ffe:	2200      	movs	r2, #0
 8002000:	4619      	mov	r1, r3
 8002002:	481e      	ldr	r0, [pc, #120]	; (800207c <getTimestamp+0x98>)
 8002004:	f00b fb56 	bl	800d6b4 <HAL_RTC_GetDate>

	uint32_t milliseconds = 1000000 - (currentTime.SubSeconds * 100);
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	2264      	movs	r2, #100	; 0x64
 800200c:	fb03 f202 	mul.w	r2, r3, r2
 8002010:	4b1b      	ldr	r3, [pc, #108]	; (8002080 <getTimestamp+0x9c>)
 8002012:	1a9b      	subs	r3, r3, r2
 8002014:	627b      	str	r3, [r7, #36]	; 0x24

	buffer[0] = currentDate.Year;				// 0-99
 8002016:	7bfa      	ldrb	r2, [r7, #15]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	701a      	strb	r2, [r3, #0]
	buffer[1] = currentDate.Month;				// 1-12
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	3301      	adds	r3, #1
 8002020:	7b7a      	ldrb	r2, [r7, #13]
 8002022:	701a      	strb	r2, [r3, #0]
	buffer[2] = currentDate.Date;				// 1-31
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	3302      	adds	r3, #2
 8002028:	7bba      	ldrb	r2, [r7, #14]
 800202a:	701a      	strb	r2, [r3, #0]
	buffer[3] = currentTime.Hours;				// 0-23
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	3303      	adds	r3, #3
 8002030:	7c3a      	ldrb	r2, [r7, #16]
 8002032:	701a      	strb	r2, [r3, #0]
	buffer[4] = currentTime.Minutes;			// 0-59
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	3304      	adds	r3, #4
 8002038:	7c7a      	ldrb	r2, [r7, #17]
 800203a:	701a      	strb	r2, [r3, #0]
	buffer[5] = currentTime.Seconds;			// 0-59
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	3305      	adds	r3, #5
 8002040:	7cba      	ldrb	r2, [r7, #18]
 8002042:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((milliseconds >> 24) & 0xFF);
 8002044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002046:	0e1a      	lsrs	r2, r3, #24
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	3306      	adds	r3, #6
 800204c:	b2d2      	uxtb	r2, r2
 800204e:	701a      	strb	r2, [r3, #0]
	buffer[7] = ((milliseconds >> 16) & 0xFF);
 8002050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002052:	0c1a      	lsrs	r2, r3, #16
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	3307      	adds	r3, #7
 8002058:	b2d2      	uxtb	r2, r2
 800205a:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((milliseconds >> 8) & 0xFF);
 800205c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205e:	0a1a      	lsrs	r2, r3, #8
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	3308      	adds	r3, #8
 8002064:	b2d2      	uxtb	r2, r2
 8002066:	701a      	strb	r2, [r3, #0]
	buffer[9] = milliseconds & 0xFF;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	3309      	adds	r3, #9
 800206c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800206e:	b2d2      	uxtb	r2, r2
 8002070:	701a      	strb	r2, [r3, #0]
}
 8002072:	bf00      	nop
 8002074:	3728      	adds	r7, #40	; 0x28
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	240003d4 	.word	0x240003d4
 8002080:	000f4240 	.word	0x000f4240

08002084 <sample_pmt>:
 * simulated data is used. Otherwise, SPI communication is used to receive actual data.
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_pmt() {
 8002084:	b580      	push	{r7, lr}
 8002086:	b086      	sub	sp, #24
 8002088:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 800208a:	bf00      	nop
 800208c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002090:	4845      	ldr	r0, [pc, #276]	; (80021a8 <sample_pmt+0x124>)
 8002092:	f006 fd6d 	bl	8008b70 <HAL_GPIO_ReadPin>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d1f7      	bne.n	800208c <sample_pmt+0x8>
	}
	uint8_t *buffer = (uint8_t*) malloc(PMT_DATA_SIZE * sizeof(uint8_t));
 800209c:	2010      	movs	r0, #16
 800209e:	f013 fea7 	bl	8015df0 <malloc>
 80020a2:	4603      	mov	r3, r0
 80020a4:	617b      	str	r3, [r7, #20]
	uint8_t *pmt_spi = (uint8_t*) malloc(2 * sizeof(uint8_t));
 80020a6:	2002      	movs	r0, #2
 80020a8:	f013 fea2 	bl	8015df0 <malloc>
 80020ac:	4603      	mov	r3, r0
 80020ae:	613b      	str	r3, [r7, #16]
	uint8_t *timestamp = (uint8_t*) malloc(10 * sizeof(uint8_t));
 80020b0:	200a      	movs	r0, #10
 80020b2:	f013 fe9d 	bl	8015df0 <malloc>
 80020b6:	4603      	mov	r3, r0
 80020b8:	60fb      	str	r3, [r7, #12]
	getTimestamp(timestamp);
 80020ba:	68f8      	ldr	r0, [r7, #12]
 80020bc:	f7ff ff92 	bl	8001fe4 <getTimestamp>

#ifdef SIMULATE
	pmt_spi[0] = 0xE;
	pmt_spi[1] = 0xD;
#else
	receive_pmt_spi(pmt_spi);
 80020c0:	6938      	ldr	r0, [r7, #16]
 80020c2:	f7ff fe87 	bl	8001dd4 <receive_pmt_spi>
#endif

	buffer[0] = PMT_SYNC;
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	22bb      	movs	r2, #187	; 0xbb
 80020ca:	701a      	strb	r2, [r3, #0]
	buffer[1] = PMT_SYNC;
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	3301      	adds	r3, #1
 80020d0:	22bb      	movs	r2, #187	; 0xbb
 80020d2:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 80020d4:	4b35      	ldr	r3, [pc, #212]	; (80021ac <sample_pmt+0x128>)
 80020d6:	881b      	ldrh	r3, [r3, #0]
 80020d8:	0a1b      	lsrs	r3, r3, #8
 80020da:	b29a      	uxth	r2, r3
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	3302      	adds	r3, #2
 80020e0:	b2d2      	uxtb	r2, r2
 80020e2:	701a      	strb	r2, [r3, #0]
	buffer[3] = (pmt_seq & 0xFF);
 80020e4:	4b31      	ldr	r3, [pc, #196]	; (80021ac <sample_pmt+0x128>)
 80020e6:	881a      	ldrh	r2, [r3, #0]
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	3303      	adds	r3, #3
 80020ec:	b2d2      	uxtb	r2, r2
 80020ee:	701a      	strb	r2, [r3, #0]
	buffer[4] = pmt_spi[0];
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	3304      	adds	r3, #4
 80020f4:	693a      	ldr	r2, [r7, #16]
 80020f6:	7812      	ldrb	r2, [r2, #0]
 80020f8:	701a      	strb	r2, [r3, #0]
	buffer[5] = pmt_spi[1];
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	3305      	adds	r3, #5
 80020fe:	693a      	ldr	r2, [r7, #16]
 8002100:	7852      	ldrb	r2, [r2, #1]
 8002102:	701a      	strb	r2, [r3, #0]
	buffer[6] = timestamp[0];
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	3306      	adds	r3, #6
 8002108:	68fa      	ldr	r2, [r7, #12]
 800210a:	7812      	ldrb	r2, [r2, #0]
 800210c:	701a      	strb	r2, [r3, #0]
	buffer[7] = timestamp[1];
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	3307      	adds	r3, #7
 8002112:	68fa      	ldr	r2, [r7, #12]
 8002114:	7852      	ldrb	r2, [r2, #1]
 8002116:	701a      	strb	r2, [r3, #0]
	buffer[8] = timestamp[2];
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	3308      	adds	r3, #8
 800211c:	68fa      	ldr	r2, [r7, #12]
 800211e:	7892      	ldrb	r2, [r2, #2]
 8002120:	701a      	strb	r2, [r3, #0]
	buffer[9] = timestamp[3];
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	3309      	adds	r3, #9
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	78d2      	ldrb	r2, [r2, #3]
 800212a:	701a      	strb	r2, [r3, #0]
	buffer[10] = timestamp[4];
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	330a      	adds	r3, #10
 8002130:	68fa      	ldr	r2, [r7, #12]
 8002132:	7912      	ldrb	r2, [r2, #4]
 8002134:	701a      	strb	r2, [r3, #0]
	buffer[11] = timestamp[5];
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	330b      	adds	r3, #11
 800213a:	68fa      	ldr	r2, [r7, #12]
 800213c:	7952      	ldrb	r2, [r2, #5]
 800213e:	701a      	strb	r2, [r3, #0]
	buffer[12] = timestamp[6];
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	330c      	adds	r3, #12
 8002144:	68fa      	ldr	r2, [r7, #12]
 8002146:	7992      	ldrb	r2, [r2, #6]
 8002148:	701a      	strb	r2, [r3, #0]
	buffer[13] = timestamp[7];
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	330d      	adds	r3, #13
 800214e:	68fa      	ldr	r2, [r7, #12]
 8002150:	79d2      	ldrb	r2, [r2, #7]
 8002152:	701a      	strb	r2, [r3, #0]
	buffer[14] = timestamp[8];
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	330e      	adds	r3, #14
 8002158:	68fa      	ldr	r2, [r7, #12]
 800215a:	7a12      	ldrb	r2, [r2, #8]
 800215c:	701a      	strb	r2, [r3, #0]
	buffer[15] = timestamp[9];
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	330f      	adds	r3, #15
 8002162:	68fa      	ldr	r2, [r7, #12]
 8002164:	7a52      	ldrb	r2, [r2, #9]
 8002166:	701a      	strb	r2, [r3, #0]

	packet_t pmt_packet = create_packet(buffer, PMT_DATA_SIZE);
 8002168:	1d3b      	adds	r3, r7, #4
 800216a:	2210      	movs	r2, #16
 800216c:	6979      	ldr	r1, [r7, #20]
 800216e:	4618      	mov	r0, r3
 8002170:	f7ff fed2 	bl	8001f18 <create_packet>
	osMessageQueuePut(mid_MsgQueue, &pmt_packet, 0U, 0U);
 8002174:	4b0e      	ldr	r3, [pc, #56]	; (80021b0 <sample_pmt+0x12c>)
 8002176:	6818      	ldr	r0, [r3, #0]
 8002178:	1d39      	adds	r1, r7, #4
 800217a:	2300      	movs	r3, #0
 800217c:	2200      	movs	r2, #0
 800217e:	f010 fbeb 	bl	8012958 <osMessageQueuePut>
	available_msgs++;
 8002182:	4b0c      	ldr	r3, [pc, #48]	; (80021b4 <sample_pmt+0x130>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	3301      	adds	r3, #1
 8002188:	4a0a      	ldr	r2, [pc, #40]	; (80021b4 <sample_pmt+0x130>)
 800218a:	6013      	str	r3, [r2, #0]
	free(buffer);
 800218c:	6978      	ldr	r0, [r7, #20]
 800218e:	f013 fe37 	bl	8015e00 <free>
	free(pmt_spi);
 8002192:	6938      	ldr	r0, [r7, #16]
 8002194:	f013 fe34 	bl	8015e00 <free>
	free(timestamp);
 8002198:	68f8      	ldr	r0, [r7, #12]
 800219a:	f013 fe31 	bl	8015e00 <free>
}
 800219e:	bf00      	nop
 80021a0:	3718      	adds	r7, #24
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	58020000 	.word	0x58020000
 80021ac:	24000c48 	.word	0x24000c48
 80021b0:	24000c38 	.word	0x24000c38
 80021b4:	24000c44 	.word	0x24000c44

080021b8 <sample_erpa>:
 * simulated data is used. Otherwise, SPI communication and ADC readings are used to obtain actual data.
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_erpa() {
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 80021be:	bf00      	nop
 80021c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021c4:	4859      	ldr	r0, [pc, #356]	; (800232c <sample_erpa+0x174>)
 80021c6:	f006 fcd3 	bl	8008b70 <HAL_GPIO_ReadPin>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d1f7      	bne.n	80021c0 <sample_erpa+0x8>
	}

	uint8_t *buffer = (uint8_t*) malloc(ERPA_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 80021d0:	2014      	movs	r0, #20
 80021d2:	f013 fe0d 	bl	8015df0 <malloc>
 80021d6:	4603      	mov	r3, r0
 80021d8:	617b      	str	r3, [r7, #20]

	uint8_t *erpa_spi = (uint8_t*) malloc(2 * sizeof(uint8_t));
 80021da:	2002      	movs	r0, #2
 80021dc:	f013 fe08 	bl	8015df0 <malloc>
 80021e0:	4603      	mov	r3, r0
 80021e2:	613b      	str	r3, [r7, #16]
	uint16_t *erpa_adc = (uint16_t*) malloc(2 * sizeof(uint16_t));
 80021e4:	2004      	movs	r0, #4
 80021e6:	f013 fe03 	bl	8015df0 <malloc>
 80021ea:	4603      	mov	r3, r0
 80021ec:	60fb      	str	r3, [r7, #12]
	uint8_t *timestamp = (uint8_t*) malloc(10 * sizeof(uint8_t));
 80021ee:	200a      	movs	r0, #10
 80021f0:	f013 fdfe 	bl	8015df0 <malloc>
 80021f4:	4603      	mov	r3, r0
 80021f6:	60bb      	str	r3, [r7, #8]
	getTimestamp(timestamp);
 80021f8:	68b8      	ldr	r0, [r7, #8]
 80021fa:	f7ff fef3 	bl	8001fe4 <getTimestamp>
	erpa_spi[1] = 0xD;

	erpa_adc[0] = 0xEE;
	erpa_adc[1] = 0xDD;
#else
	receive_erpa_spi(erpa_spi);
 80021fe:	6938      	ldr	r0, [r7, #16]
 8002200:	f7ff fe0c 	bl	8001e1c <receive_erpa_spi>
	receive_erpa_adc(erpa_adc);
 8002204:	68f8      	ldr	r0, [r7, #12]
 8002206:	f7ff fe2d 	bl	8001e64 <receive_erpa_adc>
#endif

	buffer[0] = ERPA_SYNC;
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	22aa      	movs	r2, #170	; 0xaa
 800220e:	701a      	strb	r2, [r3, #0]
	buffer[1] = ERPA_SYNC;
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	3301      	adds	r3, #1
 8002214:	22aa      	movs	r2, #170	; 0xaa
 8002216:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((erpa_seq & 0xFF00) >> 8);
 8002218:	4b45      	ldr	r3, [pc, #276]	; (8002330 <sample_erpa+0x178>)
 800221a:	881b      	ldrh	r3, [r3, #0]
 800221c:	0a1b      	lsrs	r3, r3, #8
 800221e:	b29a      	uxth	r2, r3
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	3302      	adds	r3, #2
 8002224:	b2d2      	uxtb	r2, r2
 8002226:	701a      	strb	r2, [r3, #0]
	buffer[3] = (erpa_seq & 0xFF);
 8002228:	4b41      	ldr	r3, [pc, #260]	; (8002330 <sample_erpa+0x178>)
 800222a:	881a      	ldrh	r2, [r3, #0]
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	3303      	adds	r3, #3
 8002230:	b2d2      	uxtb	r2, r2
 8002232:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	881b      	ldrh	r3, [r3, #0]
 8002238:	0a1b      	lsrs	r3, r3, #8
 800223a:	b29a      	uxth	r2, r3
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	3304      	adds	r3, #4
 8002240:	b2d2      	uxtb	r2, r2
 8002242:	701a      	strb	r2, [r3, #0]
	buffer[5] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	881a      	ldrh	r2, [r3, #0]
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	3305      	adds	r3, #5
 800224c:	b2d2      	uxtb	r2, r2
 800224e:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((erpa_adc[1] & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	3302      	adds	r3, #2
 8002254:	881b      	ldrh	r3, [r3, #0]
 8002256:	0a1b      	lsrs	r3, r3, #8
 8002258:	b29a      	uxth	r2, r3
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	3306      	adds	r3, #6
 800225e:	b2d2      	uxtb	r2, r2
 8002260:	701a      	strb	r2, [r3, #0]
	buffer[7] = (erpa_adc[1] & 0xFF);           // TEMPURATURE 1 LSB
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	3302      	adds	r3, #2
 8002266:	881a      	ldrh	r2, [r3, #0]
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	3307      	adds	r3, #7
 800226c:	b2d2      	uxtb	r2, r2
 800226e:	701a      	strb	r2, [r3, #0]
	buffer[8] = erpa_spi[0];					// ERPA eADC MSB
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	3308      	adds	r3, #8
 8002274:	693a      	ldr	r2, [r7, #16]
 8002276:	7812      	ldrb	r2, [r2, #0]
 8002278:	701a      	strb	r2, [r3, #0]
	buffer[9] = erpa_spi[1];					// ERPA eADC LSB
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	3309      	adds	r3, #9
 800227e:	693a      	ldr	r2, [r7, #16]
 8002280:	7852      	ldrb	r2, [r2, #1]
 8002282:	701a      	strb	r2, [r3, #0]
	buffer[10] = timestamp[0];
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	330a      	adds	r3, #10
 8002288:	68ba      	ldr	r2, [r7, #8]
 800228a:	7812      	ldrb	r2, [r2, #0]
 800228c:	701a      	strb	r2, [r3, #0]
	buffer[11] = timestamp[1];
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	330b      	adds	r3, #11
 8002292:	68ba      	ldr	r2, [r7, #8]
 8002294:	7852      	ldrb	r2, [r2, #1]
 8002296:	701a      	strb	r2, [r3, #0]
	buffer[12] = timestamp[2];
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	330c      	adds	r3, #12
 800229c:	68ba      	ldr	r2, [r7, #8]
 800229e:	7892      	ldrb	r2, [r2, #2]
 80022a0:	701a      	strb	r2, [r3, #0]
	buffer[13] = timestamp[3];
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	330d      	adds	r3, #13
 80022a6:	68ba      	ldr	r2, [r7, #8]
 80022a8:	78d2      	ldrb	r2, [r2, #3]
 80022aa:	701a      	strb	r2, [r3, #0]
	buffer[14] = timestamp[4];
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	330e      	adds	r3, #14
 80022b0:	68ba      	ldr	r2, [r7, #8]
 80022b2:	7912      	ldrb	r2, [r2, #4]
 80022b4:	701a      	strb	r2, [r3, #0]
	buffer[15] = timestamp[5];
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	330f      	adds	r3, #15
 80022ba:	68ba      	ldr	r2, [r7, #8]
 80022bc:	7952      	ldrb	r2, [r2, #5]
 80022be:	701a      	strb	r2, [r3, #0]
	buffer[16] = timestamp[6];
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	3310      	adds	r3, #16
 80022c4:	68ba      	ldr	r2, [r7, #8]
 80022c6:	7992      	ldrb	r2, [r2, #6]
 80022c8:	701a      	strb	r2, [r3, #0]
	buffer[17] = timestamp[7];
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	3311      	adds	r3, #17
 80022ce:	68ba      	ldr	r2, [r7, #8]
 80022d0:	79d2      	ldrb	r2, [r2, #7]
 80022d2:	701a      	strb	r2, [r3, #0]
	buffer[18] = timestamp[8];
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	3312      	adds	r3, #18
 80022d8:	68ba      	ldr	r2, [r7, #8]
 80022da:	7a12      	ldrb	r2, [r2, #8]
 80022dc:	701a      	strb	r2, [r3, #0]
	buffer[19] = timestamp[9];
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	3313      	adds	r3, #19
 80022e2:	68ba      	ldr	r2, [r7, #8]
 80022e4:	7a52      	ldrb	r2, [r2, #9]
 80022e6:	701a      	strb	r2, [r3, #0]

	packet_t erpa_packet = create_packet(buffer, ERPA_DATA_SIZE);
 80022e8:	463b      	mov	r3, r7
 80022ea:	2214      	movs	r2, #20
 80022ec:	6979      	ldr	r1, [r7, #20]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7ff fe12 	bl	8001f18 <create_packet>
	osMessageQueuePut(mid_MsgQueue, &erpa_packet, 0U, 0U);
 80022f4:	4b0f      	ldr	r3, [pc, #60]	; (8002334 <sample_erpa+0x17c>)
 80022f6:	6818      	ldr	r0, [r3, #0]
 80022f8:	4639      	mov	r1, r7
 80022fa:	2300      	movs	r3, #0
 80022fc:	2200      	movs	r2, #0
 80022fe:	f010 fb2b 	bl	8012958 <osMessageQueuePut>
	available_msgs++;
 8002302:	4b0d      	ldr	r3, [pc, #52]	; (8002338 <sample_erpa+0x180>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	3301      	adds	r3, #1
 8002308:	4a0b      	ldr	r2, [pc, #44]	; (8002338 <sample_erpa+0x180>)
 800230a:	6013      	str	r3, [r2, #0]
	free(buffer);
 800230c:	6978      	ldr	r0, [r7, #20]
 800230e:	f013 fd77 	bl	8015e00 <free>
	free(erpa_spi);
 8002312:	6938      	ldr	r0, [r7, #16]
 8002314:	f013 fd74 	bl	8015e00 <free>
	free(erpa_adc);
 8002318:	68f8      	ldr	r0, [r7, #12]
 800231a:	f013 fd71 	bl	8015e00 <free>
	free(timestamp);
 800231e:	68b8      	ldr	r0, [r7, #8]
 8002320:	f013 fd6e 	bl	8015e00 <free>
}
 8002324:	bf00      	nop
 8002326:	3718      	adds	r7, #24
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	58020400 	.word	0x58020400
 8002330:	24000c4a 	.word	0x24000c4a
 8002334:	24000c38 	.word	0x24000c38
 8002338:	24000c44 	.word	0x24000c44

0800233c <sample_hk>:
 * simulated data is used. Otherwise, actual data is obtained through I2C communication and ADC readings.
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_hk() {
 800233c:	b580      	push	{r7, lr}
 800233e:	b086      	sub	sp, #24
 8002340:	af00      	add	r7, sp, #0
	uint8_t *buffer = (uint8_t*) malloc(HK_DATA_SIZE * sizeof(uint8_t));
 8002342:	2030      	movs	r0, #48	; 0x30
 8002344:	f013 fd54 	bl	8015df0 <malloc>
 8002348:	4603      	mov	r3, r0
 800234a:	617b      	str	r3, [r7, #20]

	static uint16_t last_i2c_reading[4];
	int16_t *hk_i2c = (int16_t*) malloc(4 * sizeof(int16_t));
 800234c:	2008      	movs	r0, #8
 800234e:	f013 fd4f 	bl	8015df0 <malloc>
 8002352:	4603      	mov	r3, r0
 8002354:	613b      	str	r3, [r7, #16]
	uint8_t *timestamp = (uint8_t*) malloc(10 * sizeof(uint8_t));
 8002356:	200a      	movs	r0, #10
 8002358:	f013 fd4a 	bl	8015df0 <malloc>
 800235c:	4603      	mov	r3, r0
 800235e:	60fb      	str	r3, [r7, #12]
	getTimestamp(timestamp);
 8002360:	68f8      	ldr	r0, [r7, #12]
 8002362:	f7ff fe3f 	bl	8001fe4 <getTimestamp>
	hk_adc3[0] = 0xB0;
	hk_adc3[1] = 0xB1;
	hk_adc3[2] = 0xB2;
	hk_adc3[3] = 0xB3;
#else
	if (TEMPERATURE_COUNTER > 999) {
 8002366:	4b13      	ldr	r3, [pc, #76]	; (80023b4 <sample_hk+0x78>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800236e:	db25      	blt.n	80023bc <sample_hk+0x80>
		receive_hk_i2c(hk_i2c);
 8002370:	6938      	ldr	r0, [r7, #16]
 8002372:	f7ff fd91 	bl	8001e98 <receive_hk_i2c>
		last_i2c_reading[0] = hk_i2c[0];
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	f9b3 3000 	ldrsh.w	r3, [r3]
 800237c:	b29a      	uxth	r2, r3
 800237e:	4b0e      	ldr	r3, [pc, #56]	; (80023b8 <sample_hk+0x7c>)
 8002380:	801a      	strh	r2, [r3, #0]
		last_i2c_reading[1] = hk_i2c[1];
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	3302      	adds	r3, #2
 8002386:	f9b3 3000 	ldrsh.w	r3, [r3]
 800238a:	b29a      	uxth	r2, r3
 800238c:	4b0a      	ldr	r3, [pc, #40]	; (80023b8 <sample_hk+0x7c>)
 800238e:	805a      	strh	r2, [r3, #2]
		last_i2c_reading[2] = hk_i2c[2];
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	3304      	adds	r3, #4
 8002394:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002398:	b29a      	uxth	r2, r3
 800239a:	4b07      	ldr	r3, [pc, #28]	; (80023b8 <sample_hk+0x7c>)
 800239c:	809a      	strh	r2, [r3, #4]
		last_i2c_reading[3] = hk_i2c[3];
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	3306      	adds	r3, #6
 80023a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023a6:	b29a      	uxth	r2, r3
 80023a8:	4b03      	ldr	r3, [pc, #12]	; (80023b8 <sample_hk+0x7c>)
 80023aa:	80da      	strh	r2, [r3, #6]
		TEMPERATURE_COUNTER = 0;
 80023ac:	4b01      	ldr	r3, [pc, #4]	; (80023b4 <sample_hk+0x78>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	601a      	str	r2, [r3, #0]
 80023b2:	e01f      	b.n	80023f4 <sample_hk+0xb8>
 80023b4:	24000004 	.word	0x24000004
 80023b8:	24000cc8 	.word	0x24000cc8
	} else {
		TEMPERATURE_COUNTER++;
 80023bc:	4b9f      	ldr	r3, [pc, #636]	; (800263c <sample_hk+0x300>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	3301      	adds	r3, #1
 80023c2:	4a9e      	ldr	r2, [pc, #632]	; (800263c <sample_hk+0x300>)
 80023c4:	6013      	str	r3, [r2, #0]
		hk_i2c[0] = last_i2c_reading[0];
 80023c6:	4b9e      	ldr	r3, [pc, #632]	; (8002640 <sample_hk+0x304>)
 80023c8:	881b      	ldrh	r3, [r3, #0]
 80023ca:	b21a      	sxth	r2, r3
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	801a      	strh	r2, [r3, #0]
		hk_i2c[1] = last_i2c_reading[1];
 80023d0:	4b9b      	ldr	r3, [pc, #620]	; (8002640 <sample_hk+0x304>)
 80023d2:	885a      	ldrh	r2, [r3, #2]
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	3302      	adds	r3, #2
 80023d8:	b212      	sxth	r2, r2
 80023da:	801a      	strh	r2, [r3, #0]
		hk_i2c[2] = last_i2c_reading[2];
 80023dc:	4b98      	ldr	r3, [pc, #608]	; (8002640 <sample_hk+0x304>)
 80023de:	889a      	ldrh	r2, [r3, #4]
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	3304      	adds	r3, #4
 80023e4:	b212      	sxth	r2, r2
 80023e6:	801a      	strh	r2, [r3, #0]
		hk_i2c[3] = last_i2c_reading[3];
 80023e8:	4b95      	ldr	r3, [pc, #596]	; (8002640 <sample_hk+0x304>)
 80023ea:	88da      	ldrh	r2, [r3, #6]
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	3306      	adds	r3, #6
 80023f0:	b212      	sxth	r2, r2
 80023f2:	801a      	strh	r2, [r3, #0]
	}

#endif

	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	22cc      	movs	r2, #204	; 0xcc
 80023f8:	701a      	strb	r2, [r3, #0]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	3301      	adds	r3, #1
 80023fe:	22cc      	movs	r2, #204	; 0xcc
 8002400:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 8002402:	4b90      	ldr	r3, [pc, #576]	; (8002644 <sample_hk+0x308>)
 8002404:	881b      	ldrh	r3, [r3, #0]
 8002406:	0a1b      	lsrs	r3, r3, #8
 8002408:	b29a      	uxth	r2, r3
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	3302      	adds	r3, #2
 800240e:	b2d2      	uxtb	r2, r2
 8002410:	701a      	strb	r2, [r3, #0]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 8002412:	4b8c      	ldr	r3, [pc, #560]	; (8002644 <sample_hk+0x308>)
 8002414:	881a      	ldrh	r2, [r3, #0]
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	3303      	adds	r3, #3
 800241a:	b2d2      	uxtb	r2, r2
 800241c:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((_vsense & 0xFF00) >> 8);		// HK vsense MSB
 800241e:	4b8a      	ldr	r3, [pc, #552]	; (8002648 <sample_hk+0x30c>)
 8002420:	881b      	ldrh	r3, [r3, #0]
 8002422:	0a1b      	lsrs	r3, r3, #8
 8002424:	b29a      	uxth	r2, r3
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	3304      	adds	r3, #4
 800242a:	b2d2      	uxtb	r2, r2
 800242c:	701a      	strb	r2, [r3, #0]
	buffer[5] = (_vsense & 0xFF);				// HK vsense LSB
 800242e:	4b86      	ldr	r3, [pc, #536]	; (8002648 <sample_hk+0x30c>)
 8002430:	881a      	ldrh	r2, [r3, #0]
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	3305      	adds	r3, #5
 8002436:	b2d2      	uxtb	r2, r2
 8002438:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((_vrefint & 0xFF00) >> 8);		// HK vrefint MSB
 800243a:	4b84      	ldr	r3, [pc, #528]	; (800264c <sample_hk+0x310>)
 800243c:	881b      	ldrh	r3, [r3, #0]
 800243e:	0a1b      	lsrs	r3, r3, #8
 8002440:	b29a      	uxth	r2, r3
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	3306      	adds	r3, #6
 8002446:	b2d2      	uxtb	r2, r2
 8002448:	701a      	strb	r2, [r3, #0]
	buffer[7] = (_vrefint & 0xFF);				// HK vrefint LSB
 800244a:	4b80      	ldr	r3, [pc, #512]	; (800264c <sample_hk+0x310>)
 800244c:	881a      	ldrh	r2, [r3, #0]
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	3307      	adds	r3, #7
 8002452:	b2d2      	uxtb	r2, r2
 8002454:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((hk_i2c[0] & 0xFF00) >> 8);	// HK TEMP1 MSB
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	f9b3 3000 	ldrsh.w	r3, [r3]
 800245c:	121a      	asrs	r2, r3, #8
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	3308      	adds	r3, #8
 8002462:	b2d2      	uxtb	r2, r2
 8002464:	701a      	strb	r2, [r3, #0]
	buffer[9] = (hk_i2c[0] & 0xFF);				// HK TEMP1 LSB
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	f9b3 2000 	ldrsh.w	r2, [r3]
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	3309      	adds	r3, #9
 8002470:	b2d2      	uxtb	r2, r2
 8002472:	701a      	strb	r2, [r3, #0]
	buffer[10] = ((hk_i2c[1] & 0xFF00) >> 8);	// HK TEMP2 MSB
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	3302      	adds	r3, #2
 8002478:	f9b3 3000 	ldrsh.w	r3, [r3]
 800247c:	121a      	asrs	r2, r3, #8
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	330a      	adds	r3, #10
 8002482:	b2d2      	uxtb	r2, r2
 8002484:	701a      	strb	r2, [r3, #0]
	buffer[11] = (hk_i2c[1] & 0xFF);			// HK TEMP2 LSB
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	3302      	adds	r3, #2
 800248a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	330b      	adds	r3, #11
 8002492:	b2d2      	uxtb	r2, r2
 8002494:	701a      	strb	r2, [r3, #0]
	buffer[12] = ((hk_i2c[2] & 0xFF00) >> 8);	// HK TEMP3 MSB
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	3304      	adds	r3, #4
 800249a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800249e:	121a      	asrs	r2, r3, #8
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	330c      	adds	r3, #12
 80024a4:	b2d2      	uxtb	r2, r2
 80024a6:	701a      	strb	r2, [r3, #0]
	buffer[13] = (hk_i2c[2] & 0xFF);			// HK TEMP3 LSB
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	3304      	adds	r3, #4
 80024ac:	f9b3 2000 	ldrsh.w	r2, [r3]
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	330d      	adds	r3, #13
 80024b4:	b2d2      	uxtb	r2, r2
 80024b6:	701a      	strb	r2, [r3, #0]
	buffer[14] = ((hk_i2c[3] & 0xFF00) >> 8);	// HK TEMP4 MSB
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	3306      	adds	r3, #6
 80024bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024c0:	121a      	asrs	r2, r3, #8
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	330e      	adds	r3, #14
 80024c6:	b2d2      	uxtb	r2, r2
 80024c8:	701a      	strb	r2, [r3, #0]
	buffer[15] = (hk_i2c[3] & 0xFF);			// HK TEMP4 LSB
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	3306      	adds	r3, #6
 80024ce:	f9b3 2000 	ldrsh.w	r2, [r3]
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	330f      	adds	r3, #15
 80024d6:	b2d2      	uxtb	r2, r2
 80024d8:	701a      	strb	r2, [r3, #0]
	buffer[16] = ((_busvmon & 0xFF00) >> 8);	// HK BUSvmon MSB
 80024da:	4b5d      	ldr	r3, [pc, #372]	; (8002650 <sample_hk+0x314>)
 80024dc:	881b      	ldrh	r3, [r3, #0]
 80024de:	0a1b      	lsrs	r3, r3, #8
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	3310      	adds	r3, #16
 80024e6:	b2d2      	uxtb	r2, r2
 80024e8:	701a      	strb	r2, [r3, #0]
	buffer[17] = (_busvmon & 0xFF);				// HK BUSvmon LSB
 80024ea:	4b59      	ldr	r3, [pc, #356]	; (8002650 <sample_hk+0x314>)
 80024ec:	881a      	ldrh	r2, [r3, #0]
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	3311      	adds	r3, #17
 80024f2:	b2d2      	uxtb	r2, r2
 80024f4:	701a      	strb	r2, [r3, #0]
	buffer[18] = ((_busimon & 0xFF00) >> 8);	// HK BUSimon MSB
 80024f6:	4b57      	ldr	r3, [pc, #348]	; (8002654 <sample_hk+0x318>)
 80024f8:	881b      	ldrh	r3, [r3, #0]
 80024fa:	0a1b      	lsrs	r3, r3, #8
 80024fc:	b29a      	uxth	r2, r3
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	3312      	adds	r3, #18
 8002502:	b2d2      	uxtb	r2, r2
 8002504:	701a      	strb	r2, [r3, #0]
	buffer[19] = (_busimon & 0xFF);				// HK BUSimon LSB
 8002506:	4b53      	ldr	r3, [pc, #332]	; (8002654 <sample_hk+0x318>)
 8002508:	881a      	ldrh	r2, [r3, #0]
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	3313      	adds	r3, #19
 800250e:	b2d2      	uxtb	r2, r2
 8002510:	701a      	strb	r2, [r3, #0]
	buffer[20] = ((_2v5 & 0xFF00) >> 8);		// HK 2v5mon MSB
 8002512:	4b51      	ldr	r3, [pc, #324]	; (8002658 <sample_hk+0x31c>)
 8002514:	881b      	ldrh	r3, [r3, #0]
 8002516:	0a1b      	lsrs	r3, r3, #8
 8002518:	b29a      	uxth	r2, r3
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	3314      	adds	r3, #20
 800251e:	b2d2      	uxtb	r2, r2
 8002520:	701a      	strb	r2, [r3, #0]
	buffer[21] = (_2v5 & 0xFF);					// HK 2v5mon LSB
 8002522:	4b4d      	ldr	r3, [pc, #308]	; (8002658 <sample_hk+0x31c>)
 8002524:	881a      	ldrh	r2, [r3, #0]
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	3315      	adds	r3, #21
 800252a:	b2d2      	uxtb	r2, r2
 800252c:	701a      	strb	r2, [r3, #0]
	buffer[22] = ((_3v3 & 0xFF00) >> 8);		// HK 3v3mon MSB
 800252e:	4b4b      	ldr	r3, [pc, #300]	; (800265c <sample_hk+0x320>)
 8002530:	881b      	ldrh	r3, [r3, #0]
 8002532:	0a1b      	lsrs	r3, r3, #8
 8002534:	b29a      	uxth	r2, r3
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	3316      	adds	r3, #22
 800253a:	b2d2      	uxtb	r2, r2
 800253c:	701a      	strb	r2, [r3, #0]
	buffer[23] = (_3v3 & 0xFF);					// HK 3v3mon LSB
 800253e:	4b47      	ldr	r3, [pc, #284]	; (800265c <sample_hk+0x320>)
 8002540:	881a      	ldrh	r2, [r3, #0]
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	3317      	adds	r3, #23
 8002546:	b2d2      	uxtb	r2, r2
 8002548:	701a      	strb	r2, [r3, #0]
	buffer[24] = ((_5v & 0xFF00) >> 8);			// HK 5vmon MSB
 800254a:	4b45      	ldr	r3, [pc, #276]	; (8002660 <sample_hk+0x324>)
 800254c:	881b      	ldrh	r3, [r3, #0]
 800254e:	0a1b      	lsrs	r3, r3, #8
 8002550:	b29a      	uxth	r2, r3
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	3318      	adds	r3, #24
 8002556:	b2d2      	uxtb	r2, r2
 8002558:	701a      	strb	r2, [r3, #0]
	buffer[25] = (_5v & 0xFF);					// HK 5vmon LSB
 800255a:	4b41      	ldr	r3, [pc, #260]	; (8002660 <sample_hk+0x324>)
 800255c:	881a      	ldrh	r2, [r3, #0]
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	3319      	adds	r3, #25
 8002562:	b2d2      	uxtb	r2, r2
 8002564:	701a      	strb	r2, [r3, #0]
	buffer[26] = ((_n3v3 & 0xFF00) >> 8);		// HK n3v3mon MSB
 8002566:	4b3f      	ldr	r3, [pc, #252]	; (8002664 <sample_hk+0x328>)
 8002568:	881b      	ldrh	r3, [r3, #0]
 800256a:	0a1b      	lsrs	r3, r3, #8
 800256c:	b29a      	uxth	r2, r3
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	331a      	adds	r3, #26
 8002572:	b2d2      	uxtb	r2, r2
 8002574:	701a      	strb	r2, [r3, #0]
	buffer[27] = (_n3v3 & 0xFF);				// HK n3v3mon LSB
 8002576:	4b3b      	ldr	r3, [pc, #236]	; (8002664 <sample_hk+0x328>)
 8002578:	881a      	ldrh	r2, [r3, #0]
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	331b      	adds	r3, #27
 800257e:	b2d2      	uxtb	r2, r2
 8002580:	701a      	strb	r2, [r3, #0]
	buffer[28] = ((_n5v & 0xFF00) >> 8);		// HK n5vmon MSB
 8002582:	4b39      	ldr	r3, [pc, #228]	; (8002668 <sample_hk+0x32c>)
 8002584:	881b      	ldrh	r3, [r3, #0]
 8002586:	0a1b      	lsrs	r3, r3, #8
 8002588:	b29a      	uxth	r2, r3
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	331c      	adds	r3, #28
 800258e:	b2d2      	uxtb	r2, r2
 8002590:	701a      	strb	r2, [r3, #0]
	buffer[29] = (_n5v & 0xFF);					// HK n5vmon LSB
 8002592:	4b35      	ldr	r3, [pc, #212]	; (8002668 <sample_hk+0x32c>)
 8002594:	881a      	ldrh	r2, [r3, #0]
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	331d      	adds	r3, #29
 800259a:	b2d2      	uxtb	r2, r2
 800259c:	701a      	strb	r2, [r3, #0]
	buffer[30] = ((_15v & 0xFF00) >> 8);		// HK 15vmon MSB
 800259e:	4b33      	ldr	r3, [pc, #204]	; (800266c <sample_hk+0x330>)
 80025a0:	881b      	ldrh	r3, [r3, #0]
 80025a2:	0a1b      	lsrs	r3, r3, #8
 80025a4:	b29a      	uxth	r2, r3
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	331e      	adds	r3, #30
 80025aa:	b2d2      	uxtb	r2, r2
 80025ac:	701a      	strb	r2, [r3, #0]
	buffer[31] = (_15v & 0xFF);					// HK 15vmon LSB
 80025ae:	4b2f      	ldr	r3, [pc, #188]	; (800266c <sample_hk+0x330>)
 80025b0:	881a      	ldrh	r2, [r3, #0]
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	331f      	adds	r3, #31
 80025b6:	b2d2      	uxtb	r2, r2
 80025b8:	701a      	strb	r2, [r3, #0]
	buffer[32] = ((_5vref & 0xFF00) >> 8);		// HK 5vrefmon MSB
 80025ba:	4b2d      	ldr	r3, [pc, #180]	; (8002670 <sample_hk+0x334>)
 80025bc:	881b      	ldrh	r3, [r3, #0]
 80025be:	0a1b      	lsrs	r3, r3, #8
 80025c0:	b29a      	uxth	r2, r3
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	3320      	adds	r3, #32
 80025c6:	b2d2      	uxtb	r2, r2
 80025c8:	701a      	strb	r2, [r3, #0]
	buffer[33] = (_5vref & 0xFF);				// HK 5vrefmon LSB
 80025ca:	4b29      	ldr	r3, [pc, #164]	; (8002670 <sample_hk+0x334>)
 80025cc:	881a      	ldrh	r2, [r3, #0]
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	3321      	adds	r3, #33	; 0x21
 80025d2:	b2d2      	uxtb	r2, r2
 80025d4:	701a      	strb	r2, [r3, #0]
	buffer[34] = ((_n200v & 0xFF00) >> 8);		// HK n150vmon MSB
 80025d6:	4b27      	ldr	r3, [pc, #156]	; (8002674 <sample_hk+0x338>)
 80025d8:	881b      	ldrh	r3, [r3, #0]
 80025da:	0a1b      	lsrs	r3, r3, #8
 80025dc:	b29a      	uxth	r2, r3
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	3322      	adds	r3, #34	; 0x22
 80025e2:	b2d2      	uxtb	r2, r2
 80025e4:	701a      	strb	r2, [r3, #0]
	buffer[35] = (_n200v & 0xFF);				// HK n150vmon LSB
 80025e6:	4b23      	ldr	r3, [pc, #140]	; (8002674 <sample_hk+0x338>)
 80025e8:	881a      	ldrh	r2, [r3, #0]
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	3323      	adds	r3, #35	; 0x23
 80025ee:	b2d2      	uxtb	r2, r2
 80025f0:	701a      	strb	r2, [r3, #0]
	buffer[36] = ((_n800v & 0xFF00) >> 8);		// HK n800vmon MSB
 80025f2:	4b21      	ldr	r3, [pc, #132]	; (8002678 <sample_hk+0x33c>)
 80025f4:	881b      	ldrh	r3, [r3, #0]
 80025f6:	0a1b      	lsrs	r3, r3, #8
 80025f8:	b29a      	uxth	r2, r3
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	3324      	adds	r3, #36	; 0x24
 80025fe:	b2d2      	uxtb	r2, r2
 8002600:	701a      	strb	r2, [r3, #0]
	buffer[37] = (_n800v & 0xFF);				// HK n800vmon LSB
 8002602:	4b1d      	ldr	r3, [pc, #116]	; (8002678 <sample_hk+0x33c>)
 8002604:	881a      	ldrh	r2, [r3, #0]
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	3325      	adds	r3, #37	; 0x25
 800260a:	b2d2      	uxtb	r2, r2
 800260c:	701a      	strb	r2, [r3, #0]
	buffer[38] = timestamp[0];
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	3326      	adds	r3, #38	; 0x26
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	7812      	ldrb	r2, [r2, #0]
 8002616:	701a      	strb	r2, [r3, #0]
	buffer[39] = timestamp[1];
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	3327      	adds	r3, #39	; 0x27
 800261c:	68fa      	ldr	r2, [r7, #12]
 800261e:	7852      	ldrb	r2, [r2, #1]
 8002620:	701a      	strb	r2, [r3, #0]
	buffer[40] = timestamp[2];
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	3328      	adds	r3, #40	; 0x28
 8002626:	68fa      	ldr	r2, [r7, #12]
 8002628:	7892      	ldrb	r2, [r2, #2]
 800262a:	701a      	strb	r2, [r3, #0]
	buffer[41] = timestamp[3];
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	3329      	adds	r3, #41	; 0x29
 8002630:	68fa      	ldr	r2, [r7, #12]
 8002632:	78d2      	ldrb	r2, [r2, #3]
 8002634:	701a      	strb	r2, [r3, #0]
	buffer[42] = timestamp[4];
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	332a      	adds	r3, #42	; 0x2a
 800263a:	e01f      	b.n	800267c <sample_hk+0x340>
 800263c:	24000004 	.word	0x24000004
 8002640:	24000cc8 	.word	0x24000cc8
 8002644:	24000c4c 	.word	0x24000c4c
 8002648:	24000c1c 	.word	0x24000c1c
 800264c:	24000c1e 	.word	0x24000c1e
 8002650:	24000c20 	.word	0x24000c20
 8002654:	24000c22 	.word	0x24000c22
 8002658:	24000c24 	.word	0x24000c24
 800265c:	24000c26 	.word	0x24000c26
 8002660:	24000c28 	.word	0x24000c28
 8002664:	24000c2a 	.word	0x24000c2a
 8002668:	24000c2c 	.word	0x24000c2c
 800266c:	24000c2e 	.word	0x24000c2e
 8002670:	24000c30 	.word	0x24000c30
 8002674:	24000c32 	.word	0x24000c32
 8002678:	24000c34 	.word	0x24000c34
 800267c:	68fa      	ldr	r2, [r7, #12]
 800267e:	7912      	ldrb	r2, [r2, #4]
 8002680:	701a      	strb	r2, [r3, #0]
	buffer[43] = timestamp[5];
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	332b      	adds	r3, #43	; 0x2b
 8002686:	68fa      	ldr	r2, [r7, #12]
 8002688:	7952      	ldrb	r2, [r2, #5]
 800268a:	701a      	strb	r2, [r3, #0]
	buffer[44] = timestamp[6];
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	332c      	adds	r3, #44	; 0x2c
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	7992      	ldrb	r2, [r2, #6]
 8002694:	701a      	strb	r2, [r3, #0]
	buffer[45] = timestamp[7];
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	332d      	adds	r3, #45	; 0x2d
 800269a:	68fa      	ldr	r2, [r7, #12]
 800269c:	79d2      	ldrb	r2, [r2, #7]
 800269e:	701a      	strb	r2, [r3, #0]
	buffer[46] = timestamp[8];
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	332e      	adds	r3, #46	; 0x2e
 80026a4:	68fa      	ldr	r2, [r7, #12]
 80026a6:	7a12      	ldrb	r2, [r2, #8]
 80026a8:	701a      	strb	r2, [r3, #0]
	buffer[47] = timestamp[9];
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	332f      	adds	r3, #47	; 0x2f
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	7a52      	ldrb	r2, [r2, #9]
 80026b2:	701a      	strb	r2, [r3, #0]

	packet_t hk_packet = create_packet(buffer, HK_DATA_SIZE);
 80026b4:	1d3b      	adds	r3, r7, #4
 80026b6:	2230      	movs	r2, #48	; 0x30
 80026b8:	6979      	ldr	r1, [r7, #20]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7ff fc2c 	bl	8001f18 <create_packet>
	osMessageQueuePut(mid_MsgQueue, &hk_packet, 0U, 0U);
 80026c0:	4b0c      	ldr	r3, [pc, #48]	; (80026f4 <sample_hk+0x3b8>)
 80026c2:	6818      	ldr	r0, [r3, #0]
 80026c4:	1d39      	adds	r1, r7, #4
 80026c6:	2300      	movs	r3, #0
 80026c8:	2200      	movs	r2, #0
 80026ca:	f010 f945 	bl	8012958 <osMessageQueuePut>
	available_msgs++;
 80026ce:	4b0a      	ldr	r3, [pc, #40]	; (80026f8 <sample_hk+0x3bc>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	3301      	adds	r3, #1
 80026d4:	4a08      	ldr	r2, [pc, #32]	; (80026f8 <sample_hk+0x3bc>)
 80026d6:	6013      	str	r3, [r2, #0]

	free(buffer);
 80026d8:	6978      	ldr	r0, [r7, #20]
 80026da:	f013 fb91 	bl	8015e00 <free>
	free(hk_i2c);
 80026de:	6938      	ldr	r0, [r7, #16]
 80026e0:	f013 fb8e 	bl	8015e00 <free>
	free(timestamp);
 80026e4:	68f8      	ldr	r0, [r7, #12]
 80026e6:	f013 fb8b 	bl	8015e00 <free>
}
 80026ea:	bf00      	nop
 80026ec:	3718      	adds	r7, #24
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	24000c38 	.word	0x24000c38
 80026f8:	24000c44 	.word	0x24000c44

080026fc <PMT_init>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {

		osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny,
 8002704:	4b0b      	ldr	r3, [pc, #44]	; (8002734 <PMT_init+0x38>)
 8002706:	6818      	ldr	r0, [r3, #0]
 8002708:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800270c:	2200      	movs	r2, #0
 800270e:	2101      	movs	r1, #1
 8002710:	f010 f848 	bl	80127a4 <osEventFlagsWait>
		osWaitForever);
		if (PMT_ON) {
 8002714:	4b08      	ldr	r3, [pc, #32]	; (8002738 <PMT_init+0x3c>)
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d007      	beq.n	800272c <PMT_init+0x30>
			sample_pmt();
 800271c:	f7ff fcb2 	bl	8002084 <sample_pmt>
			pmt_seq++;
 8002720:	4b06      	ldr	r3, [pc, #24]	; (800273c <PMT_init+0x40>)
 8002722:	881b      	ldrh	r3, [r3, #0]
 8002724:	3301      	adds	r3, #1
 8002726:	b29a      	uxth	r2, r3
 8002728:	4b04      	ldr	r3, [pc, #16]	; (800273c <PMT_init+0x40>)
 800272a:	801a      	strh	r2, [r3, #0]
		osThreadSuspend(PMT_taskHandle);
	}
#endif

		}
		osThreadYield();
 800272c:	f00f ff54 	bl	80125d8 <osThreadYield>
		osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny,
 8002730:	e7e8      	b.n	8002704 <PMT_init+0x8>
 8002732:	bf00      	nop
 8002734:	24000c54 	.word	0x24000c54
 8002738:	24000c4e 	.word	0x24000c4e
 800273c:	24000c48 	.word	0x24000c48

08002740 <ERPA_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */

	/* Infinite loop */
	for (;;) {
		osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny,
 8002748:	4b0b      	ldr	r3, [pc, #44]	; (8002778 <ERPA_init+0x38>)
 800274a:	6818      	ldr	r0, [r3, #0]
 800274c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002750:	2200      	movs	r2, #0
 8002752:	2102      	movs	r1, #2
 8002754:	f010 f826 	bl	80127a4 <osEventFlagsWait>
		osWaitForever);
		if (ERPA_ON) {
 8002758:	4b08      	ldr	r3, [pc, #32]	; (800277c <ERPA_init+0x3c>)
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d007      	beq.n	8002770 <ERPA_init+0x30>
			sample_erpa();
 8002760:	f7ff fd2a 	bl	80021b8 <sample_erpa>
			erpa_seq++;
 8002764:	4b06      	ldr	r3, [pc, #24]	; (8002780 <ERPA_init+0x40>)
 8002766:	881b      	ldrh	r3, [r3, #0]
 8002768:	3301      	adds	r3, #1
 800276a:	b29a      	uxth	r2, r3
 800276c:	4b04      	ldr	r3, [pc, #16]	; (8002780 <ERPA_init+0x40>)
 800276e:	801a      	strh	r2, [r3, #0]
		osThreadSuspend(ERPA_taskHandle);
	}
#endif

		}
		osThreadYield();
 8002770:	f00f ff32 	bl	80125d8 <osThreadYield>
		osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny,
 8002774:	e7e8      	b.n	8002748 <ERPA_init+0x8>
 8002776:	bf00      	nop
 8002778:	24000c54 	.word	0x24000c54
 800277c:	24000c4f 	.word	0x24000c4f
 8002780:	24000c4a 	.word	0x24000c4a

08002784 <HK_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */

	/* Infinite loop */
	for (;;) {
		osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny,
 800278c:	4b0b      	ldr	r3, [pc, #44]	; (80027bc <HK_init+0x38>)
 800278e:	6818      	ldr	r0, [r3, #0]
 8002790:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002794:	2200      	movs	r2, #0
 8002796:	2104      	movs	r1, #4
 8002798:	f010 f804 	bl	80127a4 <osEventFlagsWait>
		osWaitForever);
		if (HK_ON) {
 800279c:	4b08      	ldr	r3, [pc, #32]	; (80027c0 <HK_init+0x3c>)
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d007      	beq.n	80027b4 <HK_init+0x30>
			sample_hk();
 80027a4:	f7ff fdca 	bl	800233c <sample_hk>
			hk_seq++;
 80027a8:	4b06      	ldr	r3, [pc, #24]	; (80027c4 <HK_init+0x40>)
 80027aa:	881b      	ldrh	r3, [r3, #0]
 80027ac:	3301      	adds	r3, #1
 80027ae:	b29a      	uxth	r2, r3
 80027b0:	4b04      	ldr	r3, [pc, #16]	; (80027c4 <HK_init+0x40>)
 80027b2:	801a      	strh	r2, [r3, #0]
	if (hk_seq >= HK_CAP){
		osThreadSuspend(HK_taskHandle);
	}
#endif
		}
		osThreadYield();
 80027b4:	f00f ff10 	bl	80125d8 <osThreadYield>
		osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny,
 80027b8:	e7e8      	b.n	800278c <HK_init+0x8>
 80027ba:	bf00      	nop
 80027bc:	24000c54 	.word	0x24000c54
 80027c0:	24000c50 	.word	0x24000c50
 80027c4:	24000c4c 	.word	0x24000c4c

080027c8 <UART_RX_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_UART_RX_init */
void UART_RX_init(void *argument)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART_RX_init */
	/* Infinite loop */
	for (;;) {
		HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80027d0:	2201      	movs	r2, #1
 80027d2:	4904      	ldr	r1, [pc, #16]	; (80027e4 <UART_RX_init+0x1c>)
 80027d4:	4804      	ldr	r0, [pc, #16]	; (80027e8 <UART_RX_init+0x20>)
 80027d6:	f00d f935 	bl	800fa44 <HAL_UART_Receive_IT>
		osDelay(5);
 80027da:	2005      	movs	r0, #5
 80027dc:	f00f ff43 	bl	8012666 <osDelay>
		HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80027e0:	e7f6      	b.n	80027d0 <UART_RX_init+0x8>
 80027e2:	bf00      	nop
 80027e4:	24000c58 	.word	0x24000c58
 80027e8:	24000638 	.word	0x24000638

080027ec <GPIO_on_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_GPIO_on_init */
void GPIO_on_init(void *argument)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GPIO_on_init */
	osThreadSuspend(GPIO_on_taskHandle);
 80027f4:	4b24      	ldr	r3, [pc, #144]	; (8002888 <GPIO_on_init+0x9c>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4618      	mov	r0, r3
 80027fa:	f00f ff0d 	bl	8012618 <osThreadSuspend>
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET); // sdn1
 80027fe:	4b23      	ldr	r3, [pc, #140]	; (800288c <GPIO_on_init+0xa0>)
 8002800:	2104      	movs	r1, #4
 8002802:	2201      	movs	r2, #1
 8002804:	4618      	mov	r0, r3
 8002806:	f006 f9cb 	bl	8008ba0 <HAL_GPIO_WritePin>
		osDelay(100);
 800280a:	2064      	movs	r0, #100	; 0x64
 800280c:	f00f ff2b 	bl	8012666 <osDelay>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET); // sys on pb5
 8002810:	4b1e      	ldr	r3, [pc, #120]	; (800288c <GPIO_on_init+0xa0>)
 8002812:	2120      	movs	r1, #32
 8002814:	2201      	movs	r2, #1
 8002816:	4618      	mov	r0, r3
 8002818:	f006 f9c2 	bl	8008ba0 <HAL_GPIO_WritePin>
		osDelay(100);
 800281c:	2064      	movs	r0, #100	; 0x64
 800281e:	f00f ff22 	bl	8012666 <osDelay>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET); // 3v3 on pc1
 8002822:	4b1b      	ldr	r3, [pc, #108]	; (8002890 <GPIO_on_init+0xa4>)
 8002824:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002828:	2201      	movs	r2, #1
 800282a:	4618      	mov	r0, r3
 800282c:	f006 f9b8 	bl	8008ba0 <HAL_GPIO_WritePin>
		osDelay(100);
 8002830:	2064      	movs	r0, #100	; 0x64
 8002832:	f00f ff18 	bl	8012666 <osDelay>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET); // 5v on pc7
 8002836:	4b16      	ldr	r3, [pc, #88]	; (8002890 <GPIO_on_init+0xa4>)
 8002838:	2180      	movs	r1, #128	; 0x80
 800283a:	2201      	movs	r2, #1
 800283c:	4618      	mov	r0, r3
 800283e:	f006 f9af 	bl	8008ba0 <HAL_GPIO_WritePin>
		osDelay(100);
 8002842:	2064      	movs	r0, #100	; 0x64
 8002844:	f00f ff0f 	bl	8012666 <osDelay>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET); // n3v3 on pc6
 8002848:	4b11      	ldr	r3, [pc, #68]	; (8002890 <GPIO_on_init+0xa4>)
 800284a:	2140      	movs	r1, #64	; 0x40
 800284c:	2201      	movs	r2, #1
 800284e:	4618      	mov	r0, r3
 8002850:	f006 f9a6 	bl	8008ba0 <HAL_GPIO_WritePin>
		osDelay(100);
 8002854:	2064      	movs	r0, #100	; 0x64
 8002856:	f00f ff06 	bl	8012666 <osDelay>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET); // n5v on pc8
 800285a:	4b0d      	ldr	r3, [pc, #52]	; (8002890 <GPIO_on_init+0xa4>)
 800285c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002860:	2201      	movs	r2, #1
 8002862:	4618      	mov	r0, r3
 8002864:	f006 f99c 	bl	8008ba0 <HAL_GPIO_WritePin>
		osDelay(100);
 8002868:	2064      	movs	r0, #100	; 0x64
 800286a:	f00f fefc 	bl	8012666 <osDelay>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET); // 15v on pc9
 800286e:	4b08      	ldr	r3, [pc, #32]	; (8002890 <GPIO_on_init+0xa4>)
 8002870:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002874:	2201      	movs	r2, #1
 8002876:	4618      	mov	r0, r3
 8002878:	f006 f992 	bl	8008ba0 <HAL_GPIO_WritePin>
		osThreadSuspend(GPIO_on_taskHandle);
 800287c:	4b02      	ldr	r3, [pc, #8]	; (8002888 <GPIO_on_init+0x9c>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4618      	mov	r0, r3
 8002882:	f00f fec9 	bl	8012618 <osThreadSuspend>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET); // sdn1
 8002886:	e7ba      	b.n	80027fe <GPIO_on_init+0x12>
 8002888:	24000754 	.word	0x24000754
 800288c:	58020400 	.word	0x58020400
 8002890:	58020800 	.word	0x58020800

08002894 <GPIO_off_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_GPIO_off_init */
void GPIO_off_init(void *argument)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GPIO_off_init */
	osThreadSuspend(GPIO_off_taskHandle);
 800289c:	4b24      	ldr	r3, [pc, #144]	; (8002930 <GPIO_off_init+0x9c>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4618      	mov	r0, r3
 80028a2:	f00f feb9 	bl	8012618 <osThreadSuspend>
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET); // 15v on pc9
 80028a6:	4b23      	ldr	r3, [pc, #140]	; (8002934 <GPIO_off_init+0xa0>)
 80028a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80028ac:	2200      	movs	r2, #0
 80028ae:	4618      	mov	r0, r3
 80028b0:	f006 f976 	bl	8008ba0 <HAL_GPIO_WritePin>
		osDelay(100);
 80028b4:	2064      	movs	r0, #100	; 0x64
 80028b6:	f00f fed6 	bl	8012666 <osDelay>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET); // n5v on pc8
 80028ba:	4b1e      	ldr	r3, [pc, #120]	; (8002934 <GPIO_off_init+0xa0>)
 80028bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80028c0:	2200      	movs	r2, #0
 80028c2:	4618      	mov	r0, r3
 80028c4:	f006 f96c 	bl	8008ba0 <HAL_GPIO_WritePin>
		osDelay(100);
 80028c8:	2064      	movs	r0, #100	; 0x64
 80028ca:	f00f fecc 	bl	8012666 <osDelay>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET); // n3v3 on pc6
 80028ce:	4b19      	ldr	r3, [pc, #100]	; (8002934 <GPIO_off_init+0xa0>)
 80028d0:	2140      	movs	r1, #64	; 0x40
 80028d2:	2200      	movs	r2, #0
 80028d4:	4618      	mov	r0, r3
 80028d6:	f006 f963 	bl	8008ba0 <HAL_GPIO_WritePin>
		osDelay(100);
 80028da:	2064      	movs	r0, #100	; 0x64
 80028dc:	f00f fec3 	bl	8012666 <osDelay>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET); // 5v on pc7
 80028e0:	4b14      	ldr	r3, [pc, #80]	; (8002934 <GPIO_off_init+0xa0>)
 80028e2:	2180      	movs	r1, #128	; 0x80
 80028e4:	2200      	movs	r2, #0
 80028e6:	4618      	mov	r0, r3
 80028e8:	f006 f95a 	bl	8008ba0 <HAL_GPIO_WritePin>
		osDelay(100);
 80028ec:	2064      	movs	r0, #100	; 0x64
 80028ee:	f00f feba 	bl	8012666 <osDelay>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET); // 3v3 on pc1
 80028f2:	4b10      	ldr	r3, [pc, #64]	; (8002934 <GPIO_off_init+0xa0>)
 80028f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80028f8:	2200      	movs	r2, #0
 80028fa:	4618      	mov	r0, r3
 80028fc:	f006 f950 	bl	8008ba0 <HAL_GPIO_WritePin>
		osDelay(100);
 8002900:	2064      	movs	r0, #100	; 0x64
 8002902:	f00f feb0 	bl	8012666 <osDelay>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET); // sys on pb5
 8002906:	4b0c      	ldr	r3, [pc, #48]	; (8002938 <GPIO_off_init+0xa4>)
 8002908:	2120      	movs	r1, #32
 800290a:	2200      	movs	r2, #0
 800290c:	4618      	mov	r0, r3
 800290e:	f006 f947 	bl	8008ba0 <HAL_GPIO_WritePin>
		osDelay(100);
 8002912:	2064      	movs	r0, #100	; 0x64
 8002914:	f00f fea7 	bl	8012666 <osDelay>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET); // sdn1
 8002918:	4b07      	ldr	r3, [pc, #28]	; (8002938 <GPIO_off_init+0xa4>)
 800291a:	2104      	movs	r1, #4
 800291c:	2200      	movs	r2, #0
 800291e:	4618      	mov	r0, r3
 8002920:	f006 f93e 	bl	8008ba0 <HAL_GPIO_WritePin>
		osThreadSuspend(GPIO_off_taskHandle);
 8002924:	4b02      	ldr	r3, [pc, #8]	; (8002930 <GPIO_off_init+0x9c>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4618      	mov	r0, r3
 800292a:	f00f fe75 	bl	8012618 <osThreadSuspend>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET); // 15v on pc9
 800292e:	e7ba      	b.n	80028a6 <GPIO_off_init+0x12>
 8002930:	240009b4 	.word	0x240009b4
 8002934:	58020800 	.word	0x58020800
 8002938:	58020400 	.word	0x58020400

0800293c <UART_TX_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_UART_TX_init */
void UART_TX_init(void *argument)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART_TX_init */
	static uint8_t tx_buffer[UART_TX_BUFFER_SIZE];

	uint32_t total_size = 0;
 8002944:	2300      	movs	r3, #0
 8002946:	60fb      	str	r3, [r7, #12]
	osStatus_t status;

	while (1) {
		total_size = 0;
 8002948:	2300      	movs	r3, #0
 800294a:	60fb      	str	r3, [r7, #12]
		// Retrieve all messages from the queue and store them in tx_buffer
		do {
			status = osMessageQueueGet(mid_MsgQueue, &msg, NULL, osWaitForever);
 800294c:	4b24      	ldr	r3, [pc, #144]	; (80029e0 <UART_TX_init+0xa4>)
 800294e:	6818      	ldr	r0, [r3, #0]
 8002950:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002954:	2200      	movs	r2, #0
 8002956:	4923      	ldr	r1, [pc, #140]	; (80029e4 <UART_TX_init+0xa8>)
 8002958:	f010 f85e 	bl	8012a18 <osMessageQueueGet>
 800295c:	60b8      	str	r0, [r7, #8]
			if (status == osOK) {
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d120      	bne.n	80029a6 <UART_TX_init+0x6a>
				if ((total_size + msg.size) < UART_TX_BUFFER_SIZE) {
 8002964:	4b1f      	ldr	r3, [pc, #124]	; (80029e4 <UART_TX_init+0xa8>)
 8002966:	889b      	ldrh	r3, [r3, #4]
 8002968:	461a      	mov	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	4413      	add	r3, r2
 800296e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002972:	d218      	bcs.n	80029a6 <UART_TX_init+0x6a>
					memcpy(&tx_buffer[total_size], msg.array, msg.size);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	4a1c      	ldr	r2, [pc, #112]	; (80029e8 <UART_TX_init+0xac>)
 8002978:	4413      	add	r3, r2
 800297a:	4a1a      	ldr	r2, [pc, #104]	; (80029e4 <UART_TX_init+0xa8>)
 800297c:	6811      	ldr	r1, [r2, #0]
 800297e:	4a19      	ldr	r2, [pc, #100]	; (80029e4 <UART_TX_init+0xa8>)
 8002980:	8892      	ldrh	r2, [r2, #4]
 8002982:	4618      	mov	r0, r3
 8002984:	f013 fa44 	bl	8015e10 <memcpy>
					free(msg.array);
 8002988:	4b16      	ldr	r3, [pc, #88]	; (80029e4 <UART_TX_init+0xa8>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4618      	mov	r0, r3
 800298e:	f013 fa37 	bl	8015e00 <free>
					total_size += msg.size;
 8002992:	4b14      	ldr	r3, [pc, #80]	; (80029e4 <UART_TX_init+0xa8>)
 8002994:	889b      	ldrh	r3, [r3, #4]
 8002996:	461a      	mov	r2, r3
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	4413      	add	r3, r2
 800299c:	60fb      	str	r3, [r7, #12]
					if(total_size >= (UART_TX_BUFFER_SIZE - HK_DATA_SIZE)){
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f5b3 7f6e 	cmp.w	r3, #952	; 0x3b8
 80029a4:	d203      	bcs.n	80029ae <UART_TX_init+0x72>
						break;
					}
				}
			}
		} while (status == osOK);
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d0cf      	beq.n	800294c <UART_TX_init+0x10>
 80029ac:	e000      	b.n	80029b0 <UART_TX_init+0x74>
						break;
 80029ae:	bf00      	nop

		if (total_size > 0) {
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d010      	beq.n	80029d8 <UART_TX_init+0x9c>
			HAL_UART_Transmit_DMA(&huart1, tx_buffer, total_size);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	461a      	mov	r2, r3
 80029bc:	490a      	ldr	r1, [pc, #40]	; (80029e8 <UART_TX_init+0xac>)
 80029be:	480b      	ldr	r0, [pc, #44]	; (80029ec <UART_TX_init+0xb0>)
 80029c0:	f00d f88c 	bl	800fadc <HAL_UART_Transmit_DMA>

			// Wait for transmission to complete
			while (tx_flag == 0) {
 80029c4:	e001      	b.n	80029ca <UART_TX_init+0x8e>
				osThreadYield();
 80029c6:	f00f fe07 	bl	80125d8 <osThreadYield>
			while (tx_flag == 0) {
 80029ca:	4b09      	ldr	r3, [pc, #36]	; (80029f0 <UART_TX_init+0xb4>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d0f9      	beq.n	80029c6 <UART_TX_init+0x8a>
			}

			// Reset the flag
			tx_flag = 0;
 80029d2:	4b07      	ldr	r3, [pc, #28]	; (80029f0 <UART_TX_init+0xb4>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	601a      	str	r2, [r3, #0]
		}

		// Yield thread control
		osThreadYield();
 80029d8:	f00f fdfe 	bl	80125d8 <osThreadYield>
		total_size = 0;
 80029dc:	e7b4      	b.n	8002948 <UART_TX_init+0xc>
 80029de:	bf00      	nop
 80029e0:	24000c38 	.word	0x24000c38
 80029e4:	24000c3c 	.word	0x24000c3c
 80029e8:	24000cd0 	.word	0x24000cd0
 80029ec:	24000638 	.word	0x24000638
 80029f0:	24000000 	.word	0x24000000

080029f4 <Voltage_Monitor_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Voltage_Monitor_init */
void Voltage_Monitor_init(void *argument)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Voltage_Monitor_init */
	/* Infinite loop */
#ifdef DAMY
		osThreadExit();
 80029fc:	f00f fe2d 	bl	801265a <osThreadExit>

08002a00 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a04      	ldr	r2, [pc, #16]	; (8002a20 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d101      	bne.n	8002a16 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002a12:	f000 ff85 	bl	8003920 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002a16:	bf00      	nop
 8002a18:	3708      	adds	r7, #8
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	40001000 	.word	0x40001000

08002a24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a28:	b672      	cpsid	i
}
 8002a2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002a2c:	e7fe      	b.n	8002a2c <Error_Handler+0x8>
	...

08002a30 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a36:	4b0c      	ldr	r3, [pc, #48]	; (8002a68 <HAL_MspInit+0x38>)
 8002a38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002a3c:	4a0a      	ldr	r2, [pc, #40]	; (8002a68 <HAL_MspInit+0x38>)
 8002a3e:	f043 0302 	orr.w	r3, r3, #2
 8002a42:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002a46:	4b08      	ldr	r3, [pc, #32]	; (8002a68 <HAL_MspInit+0x38>)
 8002a48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002a4c:	f003 0302 	and.w	r3, r3, #2
 8002a50:	607b      	str	r3, [r7, #4]
 8002a52:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002a54:	2200      	movs	r2, #0
 8002a56:	210f      	movs	r1, #15
 8002a58:	f06f 0001 	mvn.w	r0, #1
 8002a5c:	f002 fc6e 	bl	800533c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a60:	bf00      	nop
 8002a62:	3708      	adds	r7, #8
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	58024400 	.word	0x58024400

08002a6c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b08e      	sub	sp, #56	; 0x38
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a78:	2200      	movs	r2, #0
 8002a7a:	601a      	str	r2, [r3, #0]
 8002a7c:	605a      	str	r2, [r3, #4]
 8002a7e:	609a      	str	r2, [r3, #8]
 8002a80:	60da      	str	r2, [r3, #12]
 8002a82:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a7b      	ldr	r2, [pc, #492]	; (8002c78 <HAL_ADC_MspInit+0x20c>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	f040 8091 	bne.w	8002bb2 <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002a90:	4b7a      	ldr	r3, [pc, #488]	; (8002c7c <HAL_ADC_MspInit+0x210>)
 8002a92:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002a96:	4a79      	ldr	r2, [pc, #484]	; (8002c7c <HAL_ADC_MspInit+0x210>)
 8002a98:	f043 0320 	orr.w	r3, r3, #32
 8002a9c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002aa0:	4b76      	ldr	r3, [pc, #472]	; (8002c7c <HAL_ADC_MspInit+0x210>)
 8002aa2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002aa6:	f003 0320 	and.w	r3, r3, #32
 8002aaa:	623b      	str	r3, [r7, #32]
 8002aac:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002aae:	4b73      	ldr	r3, [pc, #460]	; (8002c7c <HAL_ADC_MspInit+0x210>)
 8002ab0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ab4:	4a71      	ldr	r2, [pc, #452]	; (8002c7c <HAL_ADC_MspInit+0x210>)
 8002ab6:	f043 0304 	orr.w	r3, r3, #4
 8002aba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002abe:	4b6f      	ldr	r3, [pc, #444]	; (8002c7c <HAL_ADC_MspInit+0x210>)
 8002ac0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ac4:	f003 0304 	and.w	r3, r3, #4
 8002ac8:	61fb      	str	r3, [r7, #28]
 8002aca:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002acc:	4b6b      	ldr	r3, [pc, #428]	; (8002c7c <HAL_ADC_MspInit+0x210>)
 8002ace:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ad2:	4a6a      	ldr	r2, [pc, #424]	; (8002c7c <HAL_ADC_MspInit+0x210>)
 8002ad4:	f043 0301 	orr.w	r3, r3, #1
 8002ad8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002adc:	4b67      	ldr	r3, [pc, #412]	; (8002c7c <HAL_ADC_MspInit+0x210>)
 8002ade:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	61bb      	str	r3, [r7, #24]
 8002ae8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aea:	4b64      	ldr	r3, [pc, #400]	; (8002c7c <HAL_ADC_MspInit+0x210>)
 8002aec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002af0:	4a62      	ldr	r2, [pc, #392]	; (8002c7c <HAL_ADC_MspInit+0x210>)
 8002af2:	f043 0302 	orr.w	r3, r3, #2
 8002af6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002afa:	4b60      	ldr	r3, [pc, #384]	; (8002c7c <HAL_ADC_MspInit+0x210>)
 8002afc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	617b      	str	r3, [r7, #20]
 8002b06:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002b08:	2333      	movs	r3, #51	; 0x33
 8002b0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b10:	2300      	movs	r3, #0
 8002b12:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b18:	4619      	mov	r1, r3
 8002b1a:	4859      	ldr	r0, [pc, #356]	; (8002c80 <HAL_ADC_MspInit+0x214>)
 8002b1c:	f005 fe78 	bl	8008810 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8002b20:	23ce      	movs	r3, #206	; 0xce
 8002b22:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b24:	2303      	movs	r3, #3
 8002b26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b30:	4619      	mov	r1, r3
 8002b32:	4854      	ldr	r0, [pc, #336]	; (8002c84 <HAL_ADC_MspInit+0x218>)
 8002b34:	f005 fe6c 	bl	8008810 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b40:	2300      	movs	r3, #0
 8002b42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b48:	4619      	mov	r1, r3
 8002b4a:	484f      	ldr	r0, [pc, #316]	; (8002c88 <HAL_ADC_MspInit+0x21c>)
 8002b4c:	f005 fe60 	bl	8008810 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8002b50:	4b4e      	ldr	r3, [pc, #312]	; (8002c8c <HAL_ADC_MspInit+0x220>)
 8002b52:	4a4f      	ldr	r2, [pc, #316]	; (8002c90 <HAL_ADC_MspInit+0x224>)
 8002b54:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002b56:	4b4d      	ldr	r3, [pc, #308]	; (8002c8c <HAL_ADC_MspInit+0x220>)
 8002b58:	2209      	movs	r2, #9
 8002b5a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b5c:	4b4b      	ldr	r3, [pc, #300]	; (8002c8c <HAL_ADC_MspInit+0x220>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b62:	4b4a      	ldr	r3, [pc, #296]	; (8002c8c <HAL_ADC_MspInit+0x220>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002b68:	4b48      	ldr	r3, [pc, #288]	; (8002c8c <HAL_ADC_MspInit+0x220>)
 8002b6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b6e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002b70:	4b46      	ldr	r3, [pc, #280]	; (8002c8c <HAL_ADC_MspInit+0x220>)
 8002b72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b76:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002b78:	4b44      	ldr	r3, [pc, #272]	; (8002c8c <HAL_ADC_MspInit+0x220>)
 8002b7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b7e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002b80:	4b42      	ldr	r3, [pc, #264]	; (8002c8c <HAL_ADC_MspInit+0x220>)
 8002b82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b86:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002b88:	4b40      	ldr	r3, [pc, #256]	; (8002c8c <HAL_ADC_MspInit+0x220>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b8e:	4b3f      	ldr	r3, [pc, #252]	; (8002c8c <HAL_ADC_MspInit+0x220>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002b94:	483d      	ldr	r0, [pc, #244]	; (8002c8c <HAL_ADC_MspInit+0x220>)
 8002b96:	f002 ffff 	bl	8005b98 <HAL_DMA_Init>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8002ba0:	f7ff ff40 	bl	8002a24 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	4a39      	ldr	r2, [pc, #228]	; (8002c8c <HAL_ADC_MspInit+0x220>)
 8002ba8:	64da      	str	r2, [r3, #76]	; 0x4c
 8002baa:	4a38      	ldr	r2, [pc, #224]	; (8002c8c <HAL_ADC_MspInit+0x220>)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002bb0:	e05e      	b.n	8002c70 <HAL_ADC_MspInit+0x204>
  else if(hadc->Instance==ADC3)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a37      	ldr	r2, [pc, #220]	; (8002c94 <HAL_ADC_MspInit+0x228>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d159      	bne.n	8002c70 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002bbc:	4b2f      	ldr	r3, [pc, #188]	; (8002c7c <HAL_ADC_MspInit+0x210>)
 8002bbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bc2:	4a2e      	ldr	r2, [pc, #184]	; (8002c7c <HAL_ADC_MspInit+0x210>)
 8002bc4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bc8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002bcc:	4b2b      	ldr	r3, [pc, #172]	; (8002c7c <HAL_ADC_MspInit+0x210>)
 8002bce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bd2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bd6:	613b      	str	r3, [r7, #16]
 8002bd8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bda:	4b28      	ldr	r3, [pc, #160]	; (8002c7c <HAL_ADC_MspInit+0x210>)
 8002bdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002be0:	4a26      	ldr	r2, [pc, #152]	; (8002c7c <HAL_ADC_MspInit+0x210>)
 8002be2:	f043 0304 	orr.w	r3, r3, #4
 8002be6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002bea:	4b24      	ldr	r3, [pc, #144]	; (8002c7c <HAL_ADC_MspInit+0x210>)
 8002bec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bf0:	f003 0304 	and.w	r3, r3, #4
 8002bf4:	60fb      	str	r3, [r7, #12]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8002bf8:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8002bfc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002c00:	f000 feba 	bl	8003978 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8002c04:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8002c08:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002c0c:	f000 feb4 	bl	8003978 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8002c10:	4b21      	ldr	r3, [pc, #132]	; (8002c98 <HAL_ADC_MspInit+0x22c>)
 8002c12:	4a22      	ldr	r2, [pc, #136]	; (8002c9c <HAL_ADC_MspInit+0x230>)
 8002c14:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8002c16:	4b20      	ldr	r3, [pc, #128]	; (8002c98 <HAL_ADC_MspInit+0x22c>)
 8002c18:	2273      	movs	r2, #115	; 0x73
 8002c1a:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c1c:	4b1e      	ldr	r3, [pc, #120]	; (8002c98 <HAL_ADC_MspInit+0x22c>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c22:	4b1d      	ldr	r3, [pc, #116]	; (8002c98 <HAL_ADC_MspInit+0x22c>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002c28:	4b1b      	ldr	r3, [pc, #108]	; (8002c98 <HAL_ADC_MspInit+0x22c>)
 8002c2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c2e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002c30:	4b19      	ldr	r3, [pc, #100]	; (8002c98 <HAL_ADC_MspInit+0x22c>)
 8002c32:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c36:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002c38:	4b17      	ldr	r3, [pc, #92]	; (8002c98 <HAL_ADC_MspInit+0x22c>)
 8002c3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c3e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002c40:	4b15      	ldr	r3, [pc, #84]	; (8002c98 <HAL_ADC_MspInit+0x22c>)
 8002c42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c46:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8002c48:	4b13      	ldr	r3, [pc, #76]	; (8002c98 <HAL_ADC_MspInit+0x22c>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c4e:	4b12      	ldr	r3, [pc, #72]	; (8002c98 <HAL_ADC_MspInit+0x22c>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002c54:	4810      	ldr	r0, [pc, #64]	; (8002c98 <HAL_ADC_MspInit+0x22c>)
 8002c56:	f002 ff9f 	bl	8005b98 <HAL_DMA_Init>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8002c60:	f7ff fee0 	bl	8002a24 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	4a0c      	ldr	r2, [pc, #48]	; (8002c98 <HAL_ADC_MspInit+0x22c>)
 8002c68:	64da      	str	r2, [r3, #76]	; 0x4c
 8002c6a:	4a0b      	ldr	r2, [pc, #44]	; (8002c98 <HAL_ADC_MspInit+0x22c>)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002c70:	bf00      	nop
 8002c72:	3738      	adds	r7, #56	; 0x38
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	40022000 	.word	0x40022000
 8002c7c:	58024400 	.word	0x58024400
 8002c80:	58020800 	.word	0x58020800
 8002c84:	58020000 	.word	0x58020000
 8002c88:	58020400 	.word	0x58020400
 8002c8c:	24000204 	.word	0x24000204
 8002c90:	40020010 	.word	0x40020010
 8002c94:	58026000 	.word	0x58026000
 8002c98:	2400027c 	.word	0x2400027c
 8002c9c:	40020028 	.word	0x40020028

08002ca0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b08a      	sub	sp, #40	; 0x28
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ca8:	f107 0314 	add.w	r3, r7, #20
 8002cac:	2200      	movs	r2, #0
 8002cae:	601a      	str	r2, [r3, #0]
 8002cb0:	605a      	str	r2, [r3, #4]
 8002cb2:	609a      	str	r2, [r3, #8]
 8002cb4:	60da      	str	r2, [r3, #12]
 8002cb6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a34      	ldr	r2, [pc, #208]	; (8002d90 <HAL_DAC_MspInit+0xf0>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d161      	bne.n	8002d86 <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8002cc2:	4b34      	ldr	r3, [pc, #208]	; (8002d94 <HAL_DAC_MspInit+0xf4>)
 8002cc4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002cc8:	4a32      	ldr	r2, [pc, #200]	; (8002d94 <HAL_DAC_MspInit+0xf4>)
 8002cca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002cce:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002cd2:	4b30      	ldr	r3, [pc, #192]	; (8002d94 <HAL_DAC_MspInit+0xf4>)
 8002cd4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002cd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002cdc:	613b      	str	r3, [r7, #16]
 8002cde:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ce0:	4b2c      	ldr	r3, [pc, #176]	; (8002d94 <HAL_DAC_MspInit+0xf4>)
 8002ce2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ce6:	4a2b      	ldr	r2, [pc, #172]	; (8002d94 <HAL_DAC_MspInit+0xf4>)
 8002ce8:	f043 0301 	orr.w	r3, r3, #1
 8002cec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002cf0:	4b28      	ldr	r3, [pc, #160]	; (8002d94 <HAL_DAC_MspInit+0xf4>)
 8002cf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cf6:	f003 0301 	and.w	r3, r3, #1
 8002cfa:	60fb      	str	r3, [r7, #12]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002cfe:	2310      	movs	r3, #16
 8002d00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d02:	2303      	movs	r3, #3
 8002d04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d06:	2300      	movs	r3, #0
 8002d08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d0a:	f107 0314 	add.w	r3, r7, #20
 8002d0e:	4619      	mov	r1, r3
 8002d10:	4821      	ldr	r0, [pc, #132]	; (8002d98 <HAL_DAC_MspInit+0xf8>)
 8002d12:	f005 fd7d 	bl	8008810 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8002d16:	4b21      	ldr	r3, [pc, #132]	; (8002d9c <HAL_DAC_MspInit+0xfc>)
 8002d18:	4a21      	ldr	r2, [pc, #132]	; (8002da0 <HAL_DAC_MspInit+0x100>)
 8002d1a:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8002d1c:	4b1f      	ldr	r3, [pc, #124]	; (8002d9c <HAL_DAC_MspInit+0xfc>)
 8002d1e:	2243      	movs	r2, #67	; 0x43
 8002d20:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d22:	4b1e      	ldr	r3, [pc, #120]	; (8002d9c <HAL_DAC_MspInit+0xfc>)
 8002d24:	2240      	movs	r2, #64	; 0x40
 8002d26:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d28:	4b1c      	ldr	r3, [pc, #112]	; (8002d9c <HAL_DAC_MspInit+0xfc>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002d2e:	4b1b      	ldr	r3, [pc, #108]	; (8002d9c <HAL_DAC_MspInit+0xfc>)
 8002d30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d34:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002d36:	4b19      	ldr	r3, [pc, #100]	; (8002d9c <HAL_DAC_MspInit+0xfc>)
 8002d38:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002d3c:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002d3e:	4b17      	ldr	r3, [pc, #92]	; (8002d9c <HAL_DAC_MspInit+0xfc>)
 8002d40:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002d44:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8002d46:	4b15      	ldr	r3, [pc, #84]	; (8002d9c <HAL_DAC_MspInit+0xfc>)
 8002d48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d4c:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002d4e:	4b13      	ldr	r3, [pc, #76]	; (8002d9c <HAL_DAC_MspInit+0xfc>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d54:	4b11      	ldr	r3, [pc, #68]	; (8002d9c <HAL_DAC_MspInit+0xfc>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8002d5a:	4810      	ldr	r0, [pc, #64]	; (8002d9c <HAL_DAC_MspInit+0xfc>)
 8002d5c:	f002 ff1c 	bl	8005b98 <HAL_DMA_Init>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d001      	beq.n	8002d6a <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8002d66:	f7ff fe5d 	bl	8002a24 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a0b      	ldr	r2, [pc, #44]	; (8002d9c <HAL_DAC_MspInit+0xfc>)
 8002d6e:	609a      	str	r2, [r3, #8]
 8002d70:	4a0a      	ldr	r2, [pc, #40]	; (8002d9c <HAL_DAC_MspInit+0xfc>)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8002d76:	2200      	movs	r2, #0
 8002d78:	2105      	movs	r1, #5
 8002d7a:	2036      	movs	r0, #54	; 0x36
 8002d7c:	f002 fade 	bl	800533c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002d80:	2036      	movs	r0, #54	; 0x36
 8002d82:	f002 faf5 	bl	8005370 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002d86:	bf00      	nop
 8002d88:	3728      	adds	r7, #40	; 0x28
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	40007400 	.word	0x40007400
 8002d94:	58024400 	.word	0x58024400
 8002d98:	58020000 	.word	0x58020000
 8002d9c:	24000308 	.word	0x24000308
 8002da0:	40020088 	.word	0x40020088

08002da4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b0ba      	sub	sp, #232	; 0xe8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dac:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002db0:	2200      	movs	r2, #0
 8002db2:	601a      	str	r2, [r3, #0]
 8002db4:	605a      	str	r2, [r3, #4]
 8002db6:	609a      	str	r2, [r3, #8]
 8002db8:	60da      	str	r2, [r3, #12]
 8002dba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002dbc:	f107 0310 	add.w	r3, r7, #16
 8002dc0:	22c0      	movs	r2, #192	; 0xc0
 8002dc2:	2100      	movs	r1, #0
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f013 f831 	bl	8015e2c <memset>
  if(hi2c->Instance==I2C1)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a27      	ldr	r2, [pc, #156]	; (8002e6c <HAL_I2C_MspInit+0xc8>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d146      	bne.n	8002e62 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002dd4:	f04f 0208 	mov.w	r2, #8
 8002dd8:	f04f 0300 	mov.w	r3, #0
 8002ddc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002de0:	2300      	movs	r3, #0
 8002de2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002de6:	f107 0310 	add.w	r3, r7, #16
 8002dea:	4618      	mov	r0, r3
 8002dec:	f007 fd60 	bl	800a8b0 <HAL_RCCEx_PeriphCLKConfig>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d001      	beq.n	8002dfa <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002df6:	f7ff fe15 	bl	8002a24 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dfa:	4b1d      	ldr	r3, [pc, #116]	; (8002e70 <HAL_I2C_MspInit+0xcc>)
 8002dfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e00:	4a1b      	ldr	r2, [pc, #108]	; (8002e70 <HAL_I2C_MspInit+0xcc>)
 8002e02:	f043 0302 	orr.w	r3, r3, #2
 8002e06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e0a:	4b19      	ldr	r3, [pc, #100]	; (8002e70 <HAL_I2C_MspInit+0xcc>)
 8002e0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e10:	f003 0302 	and.w	r3, r3, #2
 8002e14:	60fb      	str	r3, [r7, #12]
 8002e16:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002e18:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002e1c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e20:	2312      	movs	r3, #18
 8002e22:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e26:	2300      	movs	r3, #0
 8002e28:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002e32:	2304      	movs	r3, #4
 8002e34:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e38:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	480d      	ldr	r0, [pc, #52]	; (8002e74 <HAL_I2C_MspInit+0xd0>)
 8002e40:	f005 fce6 	bl	8008810 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002e44:	4b0a      	ldr	r3, [pc, #40]	; (8002e70 <HAL_I2C_MspInit+0xcc>)
 8002e46:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e4a:	4a09      	ldr	r2, [pc, #36]	; (8002e70 <HAL_I2C_MspInit+0xcc>)
 8002e4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002e50:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002e54:	4b06      	ldr	r3, [pc, #24]	; (8002e70 <HAL_I2C_MspInit+0xcc>)
 8002e56:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e5e:	60bb      	str	r3, [r7, #8]
 8002e60:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002e62:	bf00      	nop
 8002e64:	37e8      	adds	r7, #232	; 0xe8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	40005400 	.word	0x40005400
 8002e70:	58024400 	.word	0x58024400
 8002e74:	58020400 	.word	0x58020400

08002e78 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b0b2      	sub	sp, #200	; 0xc8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e80:	f107 0308 	add.w	r3, r7, #8
 8002e84:	22c0      	movs	r2, #192	; 0xc0
 8002e86:	2100      	movs	r1, #0
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f012 ffcf 	bl	8015e2c <memset>
  if(hrtc->Instance==RTC)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a10      	ldr	r2, [pc, #64]	; (8002ed4 <HAL_RTC_MspInit+0x5c>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d118      	bne.n	8002eca <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002e98:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002e9c:	f04f 0300 	mov.w	r3, #0
 8002ea0:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 8002ea4:	4b0c      	ldr	r3, [pc, #48]	; (8002ed8 <HAL_RTC_MspInit+0x60>)
 8002ea6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002eaa:	f107 0308 	add.w	r3, r7, #8
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f007 fcfe 	bl	800a8b0 <HAL_RCCEx_PeriphCLKConfig>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <HAL_RTC_MspInit+0x46>
    {
      Error_Handler();
 8002eba:	f7ff fdb3 	bl	8002a24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002ebe:	4b07      	ldr	r3, [pc, #28]	; (8002edc <HAL_RTC_MspInit+0x64>)
 8002ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec2:	4a06      	ldr	r2, [pc, #24]	; (8002edc <HAL_RTC_MspInit+0x64>)
 8002ec4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ec8:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002eca:	bf00      	nop
 8002ecc:	37c8      	adds	r7, #200	; 0xc8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	58004000 	.word	0x58004000
 8002ed8:	00019300 	.word	0x00019300
 8002edc:	58024400 	.word	0x58024400

08002ee0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b0bc      	sub	sp, #240	; 0xf0
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ee8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002eec:	2200      	movs	r2, #0
 8002eee:	601a      	str	r2, [r3, #0]
 8002ef0:	605a      	str	r2, [r3, #4]
 8002ef2:	609a      	str	r2, [r3, #8]
 8002ef4:	60da      	str	r2, [r3, #12]
 8002ef6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ef8:	f107 0318 	add.w	r3, r7, #24
 8002efc:	22c0      	movs	r2, #192	; 0xc0
 8002efe:	2100      	movs	r1, #0
 8002f00:	4618      	mov	r0, r3
 8002f02:	f012 ff93 	bl	8015e2c <memset>
  if(hspi->Instance==SPI1)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a4c      	ldr	r2, [pc, #304]	; (800303c <HAL_SPI_MspInit+0x15c>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d145      	bne.n	8002f9c <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002f10:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f14:	f04f 0300 	mov.w	r3, #0
 8002f18:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f20:	f107 0318 	add.w	r3, r7, #24
 8002f24:	4618      	mov	r0, r3
 8002f26:	f007 fcc3 	bl	800a8b0 <HAL_RCCEx_PeriphCLKConfig>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d001      	beq.n	8002f34 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8002f30:	f7ff fd78 	bl	8002a24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002f34:	4b42      	ldr	r3, [pc, #264]	; (8003040 <HAL_SPI_MspInit+0x160>)
 8002f36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f3a:	4a41      	ldr	r2, [pc, #260]	; (8003040 <HAL_SPI_MspInit+0x160>)
 8002f3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f40:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002f44:	4b3e      	ldr	r3, [pc, #248]	; (8003040 <HAL_SPI_MspInit+0x160>)
 8002f46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f4e:	617b      	str	r3, [r7, #20]
 8002f50:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f52:	4b3b      	ldr	r3, [pc, #236]	; (8003040 <HAL_SPI_MspInit+0x160>)
 8002f54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f58:	4a39      	ldr	r2, [pc, #228]	; (8003040 <HAL_SPI_MspInit+0x160>)
 8002f5a:	f043 0302 	orr.w	r3, r3, #2
 8002f5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f62:	4b37      	ldr	r3, [pc, #220]	; (8003040 <HAL_SPI_MspInit+0x160>)
 8002f64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	613b      	str	r3, [r7, #16]
 8002f6e:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002f70:	2318      	movs	r3, #24
 8002f72:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f76:	2302      	movs	r3, #2
 8002f78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f82:	2300      	movs	r3, #0
 8002f84:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002f88:	2305      	movs	r3, #5
 8002f8a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f8e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002f92:	4619      	mov	r1, r3
 8002f94:	482b      	ldr	r0, [pc, #172]	; (8003044 <HAL_SPI_MspInit+0x164>)
 8002f96:	f005 fc3b 	bl	8008810 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002f9a:	e04a      	b.n	8003032 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a29      	ldr	r2, [pc, #164]	; (8003048 <HAL_SPI_MspInit+0x168>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d145      	bne.n	8003032 <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002fa6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002faa:	f04f 0300 	mov.w	r3, #0
 8002fae:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002fb6:	f107 0318 	add.w	r3, r7, #24
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f007 fc78 	bl	800a8b0 <HAL_RCCEx_PeriphCLKConfig>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d001      	beq.n	8002fca <HAL_SPI_MspInit+0xea>
      Error_Handler();
 8002fc6:	f7ff fd2d 	bl	8002a24 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002fca:	4b1d      	ldr	r3, [pc, #116]	; (8003040 <HAL_SPI_MspInit+0x160>)
 8002fcc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002fd0:	4a1b      	ldr	r2, [pc, #108]	; (8003040 <HAL_SPI_MspInit+0x160>)
 8002fd2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fd6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002fda:	4b19      	ldr	r3, [pc, #100]	; (8003040 <HAL_SPI_MspInit+0x160>)
 8002fdc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002fe0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fe4:	60fb      	str	r3, [r7, #12]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fe8:	4b15      	ldr	r3, [pc, #84]	; (8003040 <HAL_SPI_MspInit+0x160>)
 8002fea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fee:	4a14      	ldr	r2, [pc, #80]	; (8003040 <HAL_SPI_MspInit+0x160>)
 8002ff0:	f043 0302 	orr.w	r3, r3, #2
 8002ff4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ff8:	4b11      	ldr	r3, [pc, #68]	; (8003040 <HAL_SPI_MspInit+0x160>)
 8002ffa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	60bb      	str	r3, [r7, #8]
 8003004:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8003006:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800300a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800300e:	2302      	movs	r3, #2
 8003010:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003014:	2300      	movs	r3, #0
 8003016:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800301a:	2300      	movs	r3, #0
 800301c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003020:	2305      	movs	r3, #5
 8003022:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003026:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800302a:	4619      	mov	r1, r3
 800302c:	4805      	ldr	r0, [pc, #20]	; (8003044 <HAL_SPI_MspInit+0x164>)
 800302e:	f005 fbef 	bl	8008810 <HAL_GPIO_Init>
}
 8003032:	bf00      	nop
 8003034:	37f0      	adds	r7, #240	; 0xf0
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	40013000 	.word	0x40013000
 8003040:	58024400 	.word	0x58024400
 8003044:	58020400 	.word	0x58020400
 8003048:	40003800 	.word	0x40003800

0800304c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b086      	sub	sp, #24
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a46      	ldr	r2, [pc, #280]	; (8003174 <HAL_TIM_Base_MspInit+0x128>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d12f      	bne.n	80030be <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800305e:	4b46      	ldr	r3, [pc, #280]	; (8003178 <HAL_TIM_Base_MspInit+0x12c>)
 8003060:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003064:	4a44      	ldr	r2, [pc, #272]	; (8003178 <HAL_TIM_Base_MspInit+0x12c>)
 8003066:	f043 0301 	orr.w	r3, r3, #1
 800306a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800306e:	4b42      	ldr	r3, [pc, #264]	; (8003178 <HAL_TIM_Base_MspInit+0x12c>)
 8003070:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003074:	f003 0301 	and.w	r3, r3, #1
 8003078:	617b      	str	r3, [r7, #20]
 800307a:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 800307c:	2200      	movs	r2, #0
 800307e:	2105      	movs	r1, #5
 8003080:	2018      	movs	r0, #24
 8003082:	f002 f95b 	bl	800533c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8003086:	2018      	movs	r0, #24
 8003088:	f002 f972 	bl	8005370 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 800308c:	2200      	movs	r2, #0
 800308e:	2105      	movs	r1, #5
 8003090:	2019      	movs	r0, #25
 8003092:	f002 f953 	bl	800533c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8003096:	2019      	movs	r0, #25
 8003098:	f002 f96a 	bl	8005370 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 800309c:	2200      	movs	r2, #0
 800309e:	2105      	movs	r1, #5
 80030a0:	201a      	movs	r0, #26
 80030a2:	f002 f94b 	bl	800533c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80030a6:	201a      	movs	r0, #26
 80030a8:	f002 f962 	bl	8005370 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 80030ac:	2200      	movs	r2, #0
 80030ae:	2105      	movs	r1, #5
 80030b0:	201b      	movs	r0, #27
 80030b2:	f002 f943 	bl	800533c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80030b6:	201b      	movs	r0, #27
 80030b8:	f002 f95a 	bl	8005370 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80030bc:	e055      	b.n	800316a <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM2)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030c6:	d117      	bne.n	80030f8 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80030c8:	4b2b      	ldr	r3, [pc, #172]	; (8003178 <HAL_TIM_Base_MspInit+0x12c>)
 80030ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80030ce:	4a2a      	ldr	r2, [pc, #168]	; (8003178 <HAL_TIM_Base_MspInit+0x12c>)
 80030d0:	f043 0301 	orr.w	r3, r3, #1
 80030d4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80030d8:	4b27      	ldr	r3, [pc, #156]	; (8003178 <HAL_TIM_Base_MspInit+0x12c>)
 80030da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80030de:	f003 0301 	and.w	r3, r3, #1
 80030e2:	613b      	str	r3, [r7, #16]
 80030e4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80030e6:	2200      	movs	r2, #0
 80030e8:	2105      	movs	r1, #5
 80030ea:	201c      	movs	r0, #28
 80030ec:	f002 f926 	bl	800533c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80030f0:	201c      	movs	r0, #28
 80030f2:	f002 f93d 	bl	8005370 <HAL_NVIC_EnableIRQ>
}
 80030f6:	e038      	b.n	800316a <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM3)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a1f      	ldr	r2, [pc, #124]	; (800317c <HAL_TIM_Base_MspInit+0x130>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d117      	bne.n	8003132 <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003102:	4b1d      	ldr	r3, [pc, #116]	; (8003178 <HAL_TIM_Base_MspInit+0x12c>)
 8003104:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003108:	4a1b      	ldr	r2, [pc, #108]	; (8003178 <HAL_TIM_Base_MspInit+0x12c>)
 800310a:	f043 0302 	orr.w	r3, r3, #2
 800310e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003112:	4b19      	ldr	r3, [pc, #100]	; (8003178 <HAL_TIM_Base_MspInit+0x12c>)
 8003114:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003118:	f003 0302 	and.w	r3, r3, #2
 800311c:	60fb      	str	r3, [r7, #12]
 800311e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8003120:	2200      	movs	r2, #0
 8003122:	2105      	movs	r1, #5
 8003124:	201d      	movs	r0, #29
 8003126:	f002 f909 	bl	800533c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800312a:	201d      	movs	r0, #29
 800312c:	f002 f920 	bl	8005370 <HAL_NVIC_EnableIRQ>
}
 8003130:	e01b      	b.n	800316a <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM4)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a12      	ldr	r2, [pc, #72]	; (8003180 <HAL_TIM_Base_MspInit+0x134>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d116      	bne.n	800316a <HAL_TIM_Base_MspInit+0x11e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800313c:	4b0e      	ldr	r3, [pc, #56]	; (8003178 <HAL_TIM_Base_MspInit+0x12c>)
 800313e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003142:	4a0d      	ldr	r2, [pc, #52]	; (8003178 <HAL_TIM_Base_MspInit+0x12c>)
 8003144:	f043 0304 	orr.w	r3, r3, #4
 8003148:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800314c:	4b0a      	ldr	r3, [pc, #40]	; (8003178 <HAL_TIM_Base_MspInit+0x12c>)
 800314e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003152:	f003 0304 	and.w	r3, r3, #4
 8003156:	60bb      	str	r3, [r7, #8]
 8003158:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 800315a:	2200      	movs	r2, #0
 800315c:	2105      	movs	r1, #5
 800315e:	201e      	movs	r0, #30
 8003160:	f002 f8ec 	bl	800533c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003164:	201e      	movs	r0, #30
 8003166:	f002 f903 	bl	8005370 <HAL_NVIC_EnableIRQ>
}
 800316a:	bf00      	nop
 800316c:	3718      	adds	r7, #24
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	40010000 	.word	0x40010000
 8003178:	58024400 	.word	0x58024400
 800317c:	40000400 	.word	0x40000400
 8003180:	40000800 	.word	0x40000800

08003184 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b08a      	sub	sp, #40	; 0x28
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800318c:	f107 0314 	add.w	r3, r7, #20
 8003190:	2200      	movs	r2, #0
 8003192:	601a      	str	r2, [r3, #0]
 8003194:	605a      	str	r2, [r3, #4]
 8003196:	609a      	str	r2, [r3, #8]
 8003198:	60da      	str	r2, [r3, #12]
 800319a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a26      	ldr	r2, [pc, #152]	; (800323c <HAL_TIM_MspPostInit+0xb8>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d120      	bne.n	80031e8 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031a6:	4b26      	ldr	r3, [pc, #152]	; (8003240 <HAL_TIM_MspPostInit+0xbc>)
 80031a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031ac:	4a24      	ldr	r2, [pc, #144]	; (8003240 <HAL_TIM_MspPostInit+0xbc>)
 80031ae:	f043 0301 	orr.w	r3, r3, #1
 80031b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031b6:	4b22      	ldr	r3, [pc, #136]	; (8003240 <HAL_TIM_MspPostInit+0xbc>)
 80031b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031bc:	f003 0301 	and.w	r3, r3, #1
 80031c0:	613b      	str	r3, [r7, #16]
 80031c2:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80031c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ca:	2302      	movs	r3, #2
 80031cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ce:	2300      	movs	r3, #0
 80031d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031d2:	2300      	movs	r3, #0
 80031d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80031d6:	2301      	movs	r3, #1
 80031d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031da:	f107 0314 	add.w	r3, r7, #20
 80031de:	4619      	mov	r1, r3
 80031e0:	4818      	ldr	r0, [pc, #96]	; (8003244 <HAL_TIM_MspPostInit+0xc0>)
 80031e2:	f005 fb15 	bl	8008810 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80031e6:	e024      	b.n	8003232 <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM2)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031f0:	d11f      	bne.n	8003232 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031f2:	4b13      	ldr	r3, [pc, #76]	; (8003240 <HAL_TIM_MspPostInit+0xbc>)
 80031f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031f8:	4a11      	ldr	r2, [pc, #68]	; (8003240 <HAL_TIM_MspPostInit+0xbc>)
 80031fa:	f043 0302 	orr.w	r3, r3, #2
 80031fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003202:	4b0f      	ldr	r3, [pc, #60]	; (8003240 <HAL_TIM_MspPostInit+0xbc>)
 8003204:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003208:	f003 0302 	and.w	r3, r3, #2
 800320c:	60fb      	str	r3, [r7, #12]
 800320e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003210:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003214:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003216:	2302      	movs	r3, #2
 8003218:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800321a:	2300      	movs	r3, #0
 800321c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800321e:	2300      	movs	r3, #0
 8003220:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003222:	2301      	movs	r3, #1
 8003224:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003226:	f107 0314 	add.w	r3, r7, #20
 800322a:	4619      	mov	r1, r3
 800322c:	4806      	ldr	r0, [pc, #24]	; (8003248 <HAL_TIM_MspPostInit+0xc4>)
 800322e:	f005 faef 	bl	8008810 <HAL_GPIO_Init>
}
 8003232:	bf00      	nop
 8003234:	3728      	adds	r7, #40	; 0x28
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	40010000 	.word	0x40010000
 8003240:	58024400 	.word	0x58024400
 8003244:	58020000 	.word	0x58020000
 8003248:	58020400 	.word	0x58020400

0800324c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b0ba      	sub	sp, #232	; 0xe8
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003254:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003258:	2200      	movs	r2, #0
 800325a:	601a      	str	r2, [r3, #0]
 800325c:	605a      	str	r2, [r3, #4]
 800325e:	609a      	str	r2, [r3, #8]
 8003260:	60da      	str	r2, [r3, #12]
 8003262:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003264:	f107 0310 	add.w	r3, r7, #16
 8003268:	22c0      	movs	r2, #192	; 0xc0
 800326a:	2100      	movs	r1, #0
 800326c:	4618      	mov	r0, r3
 800326e:	f012 fddd 	bl	8015e2c <memset>
  if(huart->Instance==USART1)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a41      	ldr	r2, [pc, #260]	; (800337c <HAL_UART_MspInit+0x130>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d17b      	bne.n	8003374 <HAL_UART_MspInit+0x128>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800327c:	f04f 0201 	mov.w	r2, #1
 8003280:	f04f 0300 	mov.w	r3, #0
 8003284:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8003288:	2300      	movs	r3, #0
 800328a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800328e:	f107 0310 	add.w	r3, r7, #16
 8003292:	4618      	mov	r0, r3
 8003294:	f007 fb0c 	bl	800a8b0 <HAL_RCCEx_PeriphCLKConfig>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d001      	beq.n	80032a2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800329e:	f7ff fbc1 	bl	8002a24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80032a2:	4b37      	ldr	r3, [pc, #220]	; (8003380 <HAL_UART_MspInit+0x134>)
 80032a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80032a8:	4a35      	ldr	r2, [pc, #212]	; (8003380 <HAL_UART_MspInit+0x134>)
 80032aa:	f043 0310 	orr.w	r3, r3, #16
 80032ae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80032b2:	4b33      	ldr	r3, [pc, #204]	; (8003380 <HAL_UART_MspInit+0x134>)
 80032b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80032b8:	f003 0310 	and.w	r3, r3, #16
 80032bc:	60fb      	str	r3, [r7, #12]
 80032be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032c0:	4b2f      	ldr	r3, [pc, #188]	; (8003380 <HAL_UART_MspInit+0x134>)
 80032c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032c6:	4a2e      	ldr	r2, [pc, #184]	; (8003380 <HAL_UART_MspInit+0x134>)
 80032c8:	f043 0301 	orr.w	r3, r3, #1
 80032cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032d0:	4b2b      	ldr	r3, [pc, #172]	; (8003380 <HAL_UART_MspInit+0x134>)
 80032d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032d6:	f003 0301 	and.w	r3, r3, #1
 80032da:	60bb      	str	r3, [r7, #8]
 80032dc:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80032de:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80032e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032e6:	2302      	movs	r3, #2
 80032e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ec:	2300      	movs	r3, #0
 80032ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032f2:	2300      	movs	r3, #0
 80032f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80032f8:	2307      	movs	r3, #7
 80032fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032fe:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003302:	4619      	mov	r1, r3
 8003304:	481f      	ldr	r0, [pc, #124]	; (8003384 <HAL_UART_MspInit+0x138>)
 8003306:	f005 fa83 	bl	8008810 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream2;
 800330a:	4b1f      	ldr	r3, [pc, #124]	; (8003388 <HAL_UART_MspInit+0x13c>)
 800330c:	4a1f      	ldr	r2, [pc, #124]	; (800338c <HAL_UART_MspInit+0x140>)
 800330e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8003310:	4b1d      	ldr	r3, [pc, #116]	; (8003388 <HAL_UART_MspInit+0x13c>)
 8003312:	222a      	movs	r2, #42	; 0x2a
 8003314:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003316:	4b1c      	ldr	r3, [pc, #112]	; (8003388 <HAL_UART_MspInit+0x13c>)
 8003318:	2240      	movs	r2, #64	; 0x40
 800331a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800331c:	4b1a      	ldr	r3, [pc, #104]	; (8003388 <HAL_UART_MspInit+0x13c>)
 800331e:	2200      	movs	r2, #0
 8003320:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003322:	4b19      	ldr	r3, [pc, #100]	; (8003388 <HAL_UART_MspInit+0x13c>)
 8003324:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003328:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800332a:	4b17      	ldr	r3, [pc, #92]	; (8003388 <HAL_UART_MspInit+0x13c>)
 800332c:	2200      	movs	r2, #0
 800332e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003330:	4b15      	ldr	r3, [pc, #84]	; (8003388 <HAL_UART_MspInit+0x13c>)
 8003332:	2200      	movs	r2, #0
 8003334:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003336:	4b14      	ldr	r3, [pc, #80]	; (8003388 <HAL_UART_MspInit+0x13c>)
 8003338:	2200      	movs	r2, #0
 800333a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800333c:	4b12      	ldr	r3, [pc, #72]	; (8003388 <HAL_UART_MspInit+0x13c>)
 800333e:	2200      	movs	r2, #0
 8003340:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003342:	4b11      	ldr	r3, [pc, #68]	; (8003388 <HAL_UART_MspInit+0x13c>)
 8003344:	2200      	movs	r2, #0
 8003346:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003348:	480f      	ldr	r0, [pc, #60]	; (8003388 <HAL_UART_MspInit+0x13c>)
 800334a:	f002 fc25 	bl	8005b98 <HAL_DMA_Init>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d001      	beq.n	8003358 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8003354:	f7ff fb66 	bl	8002a24 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a0b      	ldr	r2, [pc, #44]	; (8003388 <HAL_UART_MspInit+0x13c>)
 800335c:	67da      	str	r2, [r3, #124]	; 0x7c
 800335e:	4a0a      	ldr	r2, [pc, #40]	; (8003388 <HAL_UART_MspInit+0x13c>)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003364:	2200      	movs	r2, #0
 8003366:	2105      	movs	r1, #5
 8003368:	2025      	movs	r0, #37	; 0x25
 800336a:	f001 ffe7 	bl	800533c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800336e:	2025      	movs	r0, #37	; 0x25
 8003370:	f001 fffe 	bl	8005370 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003374:	bf00      	nop
 8003376:	37e8      	adds	r7, #232	; 0xe8
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	40011000 	.word	0x40011000
 8003380:	58024400 	.word	0x58024400
 8003384:	58020000 	.word	0x58020000
 8003388:	240006cc 	.word	0x240006cc
 800338c:	40020040 	.word	0x40020040

08003390 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b090      	sub	sp, #64	; 0x40
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2b0f      	cmp	r3, #15
 800339c:	d827      	bhi.n	80033ee <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800339e:	2200      	movs	r2, #0
 80033a0:	6879      	ldr	r1, [r7, #4]
 80033a2:	2036      	movs	r0, #54	; 0x36
 80033a4:	f001 ffca 	bl	800533c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80033a8:	2036      	movs	r0, #54	; 0x36
 80033aa:	f001 ffe1 	bl	8005370 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80033ae:	4a29      	ldr	r2, [pc, #164]	; (8003454 <HAL_InitTick+0xc4>)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80033b4:	4b28      	ldr	r3, [pc, #160]	; (8003458 <HAL_InitTick+0xc8>)
 80033b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80033ba:	4a27      	ldr	r2, [pc, #156]	; (8003458 <HAL_InitTick+0xc8>)
 80033bc:	f043 0310 	orr.w	r3, r3, #16
 80033c0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80033c4:	4b24      	ldr	r3, [pc, #144]	; (8003458 <HAL_InitTick+0xc8>)
 80033c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80033ca:	f003 0310 	and.w	r3, r3, #16
 80033ce:	60fb      	str	r3, [r7, #12]
 80033d0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80033d2:	f107 0210 	add.w	r2, r7, #16
 80033d6:	f107 0314 	add.w	r3, r7, #20
 80033da:	4611      	mov	r1, r2
 80033dc:	4618      	mov	r0, r3
 80033de:	f007 fa25 	bl	800a82c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80033e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e4:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80033e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d106      	bne.n	80033fa <HAL_InitTick+0x6a>
 80033ec:	e001      	b.n	80033f2 <HAL_InitTick+0x62>
    return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e02b      	b.n	800344a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80033f2:	f007 f9ef 	bl	800a7d4 <HAL_RCC_GetPCLK1Freq>
 80033f6:	63f8      	str	r0, [r7, #60]	; 0x3c
 80033f8:	e004      	b.n	8003404 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80033fa:	f007 f9eb 	bl	800a7d4 <HAL_RCC_GetPCLK1Freq>
 80033fe:	4603      	mov	r3, r0
 8003400:	005b      	lsls	r3, r3, #1
 8003402:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003404:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003406:	4a15      	ldr	r2, [pc, #84]	; (800345c <HAL_InitTick+0xcc>)
 8003408:	fba2 2303 	umull	r2, r3, r2, r3
 800340c:	0c9b      	lsrs	r3, r3, #18
 800340e:	3b01      	subs	r3, #1
 8003410:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003412:	4b13      	ldr	r3, [pc, #76]	; (8003460 <HAL_InitTick+0xd0>)
 8003414:	4a13      	ldr	r2, [pc, #76]	; (8003464 <HAL_InitTick+0xd4>)
 8003416:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003418:	4b11      	ldr	r3, [pc, #68]	; (8003460 <HAL_InitTick+0xd0>)
 800341a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800341e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003420:	4a0f      	ldr	r2, [pc, #60]	; (8003460 <HAL_InitTick+0xd0>)
 8003422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003424:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003426:	4b0e      	ldr	r3, [pc, #56]	; (8003460 <HAL_InitTick+0xd0>)
 8003428:	2200      	movs	r2, #0
 800342a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800342c:	4b0c      	ldr	r3, [pc, #48]	; (8003460 <HAL_InitTick+0xd0>)
 800342e:	2200      	movs	r2, #0
 8003430:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003432:	480b      	ldr	r0, [pc, #44]	; (8003460 <HAL_InitTick+0xd0>)
 8003434:	f00a fead 	bl	800e192 <HAL_TIM_Base_Init>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d104      	bne.n	8003448 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800343e:	4808      	ldr	r0, [pc, #32]	; (8003460 <HAL_InitTick+0xd0>)
 8003440:	f00a fefe 	bl	800e240 <HAL_TIM_Base_Start_IT>
 8003444:	4603      	mov	r3, r0
 8003446:	e000      	b.n	800344a <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
}
 800344a:	4618      	mov	r0, r3
 800344c:	3740      	adds	r7, #64	; 0x40
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	24000098 	.word	0x24000098
 8003458:	58024400 	.word	0x58024400
 800345c:	431bde83 	.word	0x431bde83
 8003460:	240010b8 	.word	0x240010b8
 8003464:	40001000 	.word	0x40001000

08003468 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003468:	b480      	push	{r7}
 800346a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 800346c:	e7fe      	b.n	800346c <NMI_Handler+0x4>

0800346e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800346e:	b480      	push	{r7}
 8003470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003472:	e7fe      	b.n	8003472 <HardFault_Handler+0x4>

08003474 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003474:	b480      	push	{r7}
 8003476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003478:	e7fe      	b.n	8003478 <MemManage_Handler+0x4>

0800347a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800347a:	b480      	push	{r7}
 800347c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800347e:	e7fe      	b.n	800347e <BusFault_Handler+0x4>

08003480 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003480:	b480      	push	{r7}
 8003482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003484:	e7fe      	b.n	8003484 <UsageFault_Handler+0x4>

08003486 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003486:	b480      	push	{r7}
 8003488:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800348a:	bf00      	nop
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr

08003494 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003498:	4802      	ldr	r0, [pc, #8]	; (80034a4 <DMA1_Stream0_IRQHandler+0x10>)
 800349a:	f003 fea7 	bl	80071ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800349e:	bf00      	nop
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	24000204 	.word	0x24000204

080034a8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80034ac:	4802      	ldr	r0, [pc, #8]	; (80034b8 <DMA1_Stream1_IRQHandler+0x10>)
 80034ae:	f003 fe9d 	bl	80071ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80034b2:	bf00      	nop
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	2400027c 	.word	0x2400027c

080034bc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80034c0:	4802      	ldr	r0, [pc, #8]	; (80034cc <DMA1_Stream2_IRQHandler+0x10>)
 80034c2:	f003 fe93 	bl	80071ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80034c6:	bf00      	nop
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	240006cc 	.word	0x240006cc

080034d0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80034d4:	4802      	ldr	r0, [pc, #8]	; (80034e0 <DMA1_Stream5_IRQHandler+0x10>)
 80034d6:	f003 fe89 	bl	80071ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80034da:	bf00      	nop
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	24000308 	.word	0x24000308

080034e4 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80034e8:	4802      	ldr	r0, [pc, #8]	; (80034f4 <TIM1_BRK_IRQHandler+0x10>)
 80034ea:	f00b f9c0 	bl	800e86e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80034ee:	bf00      	nop
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	24000508 	.word	0x24000508

080034f8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80034fc:	4802      	ldr	r0, [pc, #8]	; (8003508 <TIM1_UP_IRQHandler+0x10>)
 80034fe:	f00b f9b6 	bl	800e86e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8003502:	bf00      	nop
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	24000508 	.word	0x24000508

0800350c <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003510:	4802      	ldr	r0, [pc, #8]	; (800351c <TIM1_TRG_COM_IRQHandler+0x10>)
 8003512:	f00b f9ac 	bl	800e86e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8003516:	bf00      	nop
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	24000508 	.word	0x24000508

08003520 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003524:	4802      	ldr	r0, [pc, #8]	; (8003530 <TIM1_CC_IRQHandler+0x10>)
 8003526:	f00b f9a2 	bl	800e86e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800352a:	bf00      	nop
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	24000508 	.word	0x24000508

08003534 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003538:	4802      	ldr	r0, [pc, #8]	; (8003544 <TIM2_IRQHandler+0x10>)
 800353a:	f00b f998 	bl	800e86e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800353e:	bf00      	nop
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	24000554 	.word	0x24000554

08003548 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800354c:	4802      	ldr	r0, [pc, #8]	; (8003558 <TIM3_IRQHandler+0x10>)
 800354e:	f00b f98e 	bl	800e86e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003552:	bf00      	nop
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	240005a0 	.word	0x240005a0

0800355c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003560:	4802      	ldr	r0, [pc, #8]	; (800356c <TIM4_IRQHandler+0x10>)
 8003562:	f00b f984 	bl	800e86e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003566:	bf00      	nop
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	240005ec 	.word	0x240005ec

08003570 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003574:	4802      	ldr	r0, [pc, #8]	; (8003580 <USART1_IRQHandler+0x10>)
 8003576:	f00c fb31 	bl	800fbdc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800357a:	bf00      	nop
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	24000638 	.word	0x24000638

08003584 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 8003588:	4b06      	ldr	r3, [pc, #24]	; (80035a4 <TIM6_DAC_IRQHandler+0x20>)
 800358a:	791b      	ldrb	r3, [r3, #4]
 800358c:	b2db      	uxtb	r3, r3
 800358e:	2b00      	cmp	r3, #0
 8003590:	d002      	beq.n	8003598 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 8003592:	4804      	ldr	r0, [pc, #16]	; (80035a4 <TIM6_DAC_IRQHandler+0x20>)
 8003594:	f002 f881 	bl	800569a <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8003598:	4803      	ldr	r0, [pc, #12]	; (80035a8 <TIM6_DAC_IRQHandler+0x24>)
 800359a:	f00b f968 	bl	800e86e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800359e:	bf00      	nop
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	240002f4 	.word	0x240002f4
 80035a8:	240010b8 	.word	0x240010b8

080035ac <ITM_SendChar>:
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	4603      	mov	r3, r0
 80035b4:	71fb      	strb	r3, [r7, #7]
 80035b6:	4b0f      	ldr	r3, [pc, #60]	; (80035f4 <ITM_SendChar+0x48>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a0e      	ldr	r2, [pc, #56]	; (80035f4 <ITM_SendChar+0x48>)
 80035bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035c0:	6013      	str	r3, [r2, #0]
 80035c2:	4b0d      	ldr	r3, [pc, #52]	; (80035f8 <ITM_SendChar+0x4c>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a0c      	ldr	r2, [pc, #48]	; (80035f8 <ITM_SendChar+0x4c>)
 80035c8:	f043 0301 	orr.w	r3, r3, #1
 80035cc:	6013      	str	r3, [r2, #0]
 80035ce:	bf00      	nop
 80035d0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d0f8      	beq.n	80035d0 <ITM_SendChar+0x24>
 80035de:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80035e2:	79fb      	ldrb	r3, [r7, #7]
 80035e4:	6013      	str	r3, [r2, #0]
 80035e6:	bf00      	nop
 80035e8:	370c      	adds	r7, #12
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	e000edfc 	.word	0xe000edfc
 80035f8:	e0000e00 	.word	0xe0000e00

080035fc <_read>:
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b086      	sub	sp, #24
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	607a      	str	r2, [r7, #4]
 8003608:	2300      	movs	r3, #0
 800360a:	617b      	str	r3, [r7, #20]
 800360c:	e00a      	b.n	8003624 <_read+0x28>
 800360e:	f3af 8000 	nop.w
 8003612:	4601      	mov	r1, r0
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	1c5a      	adds	r2, r3, #1
 8003618:	60ba      	str	r2, [r7, #8]
 800361a:	b2ca      	uxtb	r2, r1
 800361c:	701a      	strb	r2, [r3, #0]
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	3301      	adds	r3, #1
 8003622:	617b      	str	r3, [r7, #20]
 8003624:	697a      	ldr	r2, [r7, #20]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	429a      	cmp	r2, r3
 800362a:	dbf0      	blt.n	800360e <_read+0x12>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4618      	mov	r0, r3
 8003630:	3718      	adds	r7, #24
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}

08003636 <_write>:
 8003636:	b580      	push	{r7, lr}
 8003638:	b086      	sub	sp, #24
 800363a:	af00      	add	r7, sp, #0
 800363c:	60f8      	str	r0, [r7, #12]
 800363e:	60b9      	str	r1, [r7, #8]
 8003640:	607a      	str	r2, [r7, #4]
 8003642:	2300      	movs	r3, #0
 8003644:	617b      	str	r3, [r7, #20]
 8003646:	e009      	b.n	800365c <_write+0x26>
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	1c5a      	adds	r2, r3, #1
 800364c:	60ba      	str	r2, [r7, #8]
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	4618      	mov	r0, r3
 8003652:	f7ff ffab 	bl	80035ac <ITM_SendChar>
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	3301      	adds	r3, #1
 800365a:	617b      	str	r3, [r7, #20]
 800365c:	697a      	ldr	r2, [r7, #20]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	429a      	cmp	r2, r3
 8003662:	dbf1      	blt.n	8003648 <_write+0x12>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4618      	mov	r0, r3
 8003668:	3718      	adds	r7, #24
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}

0800366e <_close>:
 800366e:	b480      	push	{r7}
 8003670:	b083      	sub	sp, #12
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
 8003676:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800367a:	4618      	mov	r0, r3
 800367c:	370c      	adds	r7, #12
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr

08003686 <_fstat>:
 8003686:	b480      	push	{r7}
 8003688:	b083      	sub	sp, #12
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
 800368e:	6039      	str	r1, [r7, #0]
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003696:	605a      	str	r2, [r3, #4]
 8003698:	2300      	movs	r3, #0
 800369a:	4618      	mov	r0, r3
 800369c:	370c      	adds	r7, #12
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr

080036a6 <_isatty>:
 80036a6:	b480      	push	{r7}
 80036a8:	b083      	sub	sp, #12
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
 80036ae:	2301      	movs	r3, #1
 80036b0:	4618      	mov	r0, r3
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr

080036bc <_lseek>:
 80036bc:	b480      	push	{r7}
 80036be:	b085      	sub	sp, #20
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	607a      	str	r2, [r7, #4]
 80036c8:	2300      	movs	r3, #0
 80036ca:	4618      	mov	r0, r3
 80036cc:	3714      	adds	r7, #20
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
	...

080036d8 <_sbrk>:
 80036d8:	b580      	push	{r7, lr}
 80036da:	b086      	sub	sp, #24
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	4a14      	ldr	r2, [pc, #80]	; (8003734 <_sbrk+0x5c>)
 80036e2:	4b15      	ldr	r3, [pc, #84]	; (8003738 <_sbrk+0x60>)
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	617b      	str	r3, [r7, #20]
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	613b      	str	r3, [r7, #16]
 80036ec:	4b13      	ldr	r3, [pc, #76]	; (800373c <_sbrk+0x64>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d102      	bne.n	80036fa <_sbrk+0x22>
 80036f4:	4b11      	ldr	r3, [pc, #68]	; (800373c <_sbrk+0x64>)
 80036f6:	4a12      	ldr	r2, [pc, #72]	; (8003740 <_sbrk+0x68>)
 80036f8:	601a      	str	r2, [r3, #0]
 80036fa:	4b10      	ldr	r3, [pc, #64]	; (800373c <_sbrk+0x64>)
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4413      	add	r3, r2
 8003702:	693a      	ldr	r2, [r7, #16]
 8003704:	429a      	cmp	r2, r3
 8003706:	d207      	bcs.n	8003718 <_sbrk+0x40>
 8003708:	f012 fb48 	bl	8015d9c <__errno>
 800370c:	4603      	mov	r3, r0
 800370e:	220c      	movs	r2, #12
 8003710:	601a      	str	r2, [r3, #0]
 8003712:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003716:	e009      	b.n	800372c <_sbrk+0x54>
 8003718:	4b08      	ldr	r3, [pc, #32]	; (800373c <_sbrk+0x64>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	60fb      	str	r3, [r7, #12]
 800371e:	4b07      	ldr	r3, [pc, #28]	; (800373c <_sbrk+0x64>)
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4413      	add	r3, r2
 8003726:	4a05      	ldr	r2, [pc, #20]	; (800373c <_sbrk+0x64>)
 8003728:	6013      	str	r3, [r2, #0]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	4618      	mov	r0, r3
 800372e:	3718      	adds	r7, #24
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}
 8003734:	24080000 	.word	0x24080000
 8003738:	00000400 	.word	0x00000400
 800373c:	24001104 	.word	0x24001104
 8003740:	24005a70 	.word	0x24005a70

08003744 <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8003744:	b480      	push	{r7}
 8003746:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8003748:	4b37      	ldr	r3, [pc, #220]	; (8003828 <SystemInit+0xe4>)
 800374a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800374e:	4a36      	ldr	r2, [pc, #216]	; (8003828 <SystemInit+0xe4>)
 8003750:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003754:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8003758:	4b34      	ldr	r3, [pc, #208]	; (800382c <SystemInit+0xe8>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 030f 	and.w	r3, r3, #15
 8003760:	2b06      	cmp	r3, #6
 8003762:	d807      	bhi.n	8003774 <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8003764:	4b31      	ldr	r3, [pc, #196]	; (800382c <SystemInit+0xe8>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f023 030f 	bic.w	r3, r3, #15
 800376c:	4a2f      	ldr	r2, [pc, #188]	; (800382c <SystemInit+0xe8>)
 800376e:	f043 0307 	orr.w	r3, r3, #7
 8003772:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 8003774:	4b2e      	ldr	r3, [pc, #184]	; (8003830 <SystemInit+0xec>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a2d      	ldr	r2, [pc, #180]	; (8003830 <SystemInit+0xec>)
 800377a:	f043 0301 	orr.w	r3, r3, #1
 800377e:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8003780:	4b2b      	ldr	r3, [pc, #172]	; (8003830 <SystemInit+0xec>)
 8003782:	2200      	movs	r2, #0
 8003784:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 8003786:	4b2a      	ldr	r3, [pc, #168]	; (8003830 <SystemInit+0xec>)
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	4929      	ldr	r1, [pc, #164]	; (8003830 <SystemInit+0xec>)
 800378c:	4b29      	ldr	r3, [pc, #164]	; (8003834 <SystemInit+0xf0>)
 800378e:	4013      	ands	r3, r2
 8003790:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8003792:	4b26      	ldr	r3, [pc, #152]	; (800382c <SystemInit+0xe8>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0308 	and.w	r3, r3, #8
 800379a:	2b00      	cmp	r3, #0
 800379c:	d007      	beq.n	80037ae <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 800379e:	4b23      	ldr	r3, [pc, #140]	; (800382c <SystemInit+0xe8>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f023 030f 	bic.w	r3, r3, #15
 80037a6:	4a21      	ldr	r2, [pc, #132]	; (800382c <SystemInit+0xe8>)
 80037a8:	f043 0307 	orr.w	r3, r3, #7
 80037ac:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 80037ae:	4b20      	ldr	r3, [pc, #128]	; (8003830 <SystemInit+0xec>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 80037b4:	4b1e      	ldr	r3, [pc, #120]	; (8003830 <SystemInit+0xec>)
 80037b6:	2200      	movs	r2, #0
 80037b8:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 80037ba:	4b1d      	ldr	r3, [pc, #116]	; (8003830 <SystemInit+0xec>)
 80037bc:	2200      	movs	r2, #0
 80037be:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 80037c0:	4b1b      	ldr	r3, [pc, #108]	; (8003830 <SystemInit+0xec>)
 80037c2:	4a1d      	ldr	r2, [pc, #116]	; (8003838 <SystemInit+0xf4>)
 80037c4:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 80037c6:	4b1a      	ldr	r3, [pc, #104]	; (8003830 <SystemInit+0xec>)
 80037c8:	4a1c      	ldr	r2, [pc, #112]	; (800383c <SystemInit+0xf8>)
 80037ca:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 80037cc:	4b18      	ldr	r3, [pc, #96]	; (8003830 <SystemInit+0xec>)
 80037ce:	4a1c      	ldr	r2, [pc, #112]	; (8003840 <SystemInit+0xfc>)
 80037d0:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 80037d2:	4b17      	ldr	r3, [pc, #92]	; (8003830 <SystemInit+0xec>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 80037d8:	4b15      	ldr	r3, [pc, #84]	; (8003830 <SystemInit+0xec>)
 80037da:	4a19      	ldr	r2, [pc, #100]	; (8003840 <SystemInit+0xfc>)
 80037dc:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 80037de:	4b14      	ldr	r3, [pc, #80]	; (8003830 <SystemInit+0xec>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 80037e4:	4b12      	ldr	r3, [pc, #72]	; (8003830 <SystemInit+0xec>)
 80037e6:	4a16      	ldr	r2, [pc, #88]	; (8003840 <SystemInit+0xfc>)
 80037e8:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 80037ea:	4b11      	ldr	r3, [pc, #68]	; (8003830 <SystemInit+0xec>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 80037f0:	4b0f      	ldr	r3, [pc, #60]	; (8003830 <SystemInit+0xec>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a0e      	ldr	r2, [pc, #56]	; (8003830 <SystemInit+0xec>)
 80037f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037fa:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 80037fc:	4b0c      	ldr	r3, [pc, #48]	; (8003830 <SystemInit+0xec>)
 80037fe:	2200      	movs	r2, #0
 8003800:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 8003802:	4b10      	ldr	r3, [pc, #64]	; (8003844 <SystemInit+0x100>)
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	4b10      	ldr	r3, [pc, #64]	; (8003848 <SystemInit+0x104>)
 8003808:	4013      	ands	r3, r2
 800380a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800380e:	d202      	bcs.n	8003816 <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8003810:	4b0e      	ldr	r3, [pc, #56]	; (800384c <SystemInit+0x108>)
 8003812:	2201      	movs	r2, #1
 8003814:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003816:	4b0e      	ldr	r3, [pc, #56]	; (8003850 <SystemInit+0x10c>)
 8003818:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800381c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800381e:	bf00      	nop
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr
 8003828:	e000ed00 	.word	0xe000ed00
 800382c:	52002000 	.word	0x52002000
 8003830:	58024400 	.word	0x58024400
 8003834:	eaf6ed7f 	.word	0xeaf6ed7f
 8003838:	02020200 	.word	0x02020200
 800383c:	01ff0000 	.word	0x01ff0000
 8003840:	01010280 	.word	0x01010280
 8003844:	5c001000 	.word	0x5c001000
 8003848:	ffff0000 	.word	0xffff0000
 800384c:	51008108 	.word	0x51008108
 8003850:	52004000 	.word	0x52004000

08003854 <Reset_Handler>:
 8003854:	f8df d034 	ldr.w	sp, [pc, #52]	; 800388c <LoopFillZerobss+0xe>
 8003858:	f7ff ff74 	bl	8003744 <SystemInit>
 800385c:	480c      	ldr	r0, [pc, #48]	; (8003890 <LoopFillZerobss+0x12>)
 800385e:	490d      	ldr	r1, [pc, #52]	; (8003894 <LoopFillZerobss+0x16>)
 8003860:	4a0d      	ldr	r2, [pc, #52]	; (8003898 <LoopFillZerobss+0x1a>)
 8003862:	2300      	movs	r3, #0
 8003864:	e002      	b.n	800386c <LoopCopyDataInit>

08003866 <CopyDataInit>:
 8003866:	58d4      	ldr	r4, [r2, r3]
 8003868:	50c4      	str	r4, [r0, r3]
 800386a:	3304      	adds	r3, #4

0800386c <LoopCopyDataInit>:
 800386c:	18c4      	adds	r4, r0, r3
 800386e:	428c      	cmp	r4, r1
 8003870:	d3f9      	bcc.n	8003866 <CopyDataInit>
 8003872:	4a0a      	ldr	r2, [pc, #40]	; (800389c <LoopFillZerobss+0x1e>)
 8003874:	4c0a      	ldr	r4, [pc, #40]	; (80038a0 <LoopFillZerobss+0x22>)
 8003876:	2300      	movs	r3, #0
 8003878:	e001      	b.n	800387e <LoopFillZerobss>

0800387a <FillZerobss>:
 800387a:	6013      	str	r3, [r2, #0]
 800387c:	3204      	adds	r2, #4

0800387e <LoopFillZerobss>:
 800387e:	42a2      	cmp	r2, r4
 8003880:	d3fb      	bcc.n	800387a <FillZerobss>
 8003882:	f012 fa91 	bl	8015da8 <__libc_init_array>
 8003886:	f7fd fb0d 	bl	8000ea4 <main>
 800388a:	4770      	bx	lr
 800388c:	24080000 	.word	0x24080000
 8003890:	24000000 	.word	0x24000000
 8003894:	24000108 	.word	0x24000108
 8003898:	08016ca8 	.word	0x08016ca8
 800389c:	24000120 	.word	0x24000120
 80038a0:	24005a6c 	.word	0x24005a6c

080038a4 <ADC3_IRQHandler>:
 80038a4:	e7fe      	b.n	80038a4 <ADC3_IRQHandler>
	...

080038a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038ae:	2003      	movs	r0, #3
 80038b0:	f001 fd39 	bl	8005326 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80038b4:	f006 fde4 	bl	800a480 <HAL_RCC_GetSysClockFreq>
 80038b8:	4602      	mov	r2, r0
 80038ba:	4b15      	ldr	r3, [pc, #84]	; (8003910 <HAL_Init+0x68>)
 80038bc:	699b      	ldr	r3, [r3, #24]
 80038be:	0a1b      	lsrs	r3, r3, #8
 80038c0:	f003 030f 	and.w	r3, r3, #15
 80038c4:	4913      	ldr	r1, [pc, #76]	; (8003914 <HAL_Init+0x6c>)
 80038c6:	5ccb      	ldrb	r3, [r1, r3]
 80038c8:	f003 031f 	and.w	r3, r3, #31
 80038cc:	fa22 f303 	lsr.w	r3, r2, r3
 80038d0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80038d2:	4b0f      	ldr	r3, [pc, #60]	; (8003910 <HAL_Init+0x68>)
 80038d4:	699b      	ldr	r3, [r3, #24]
 80038d6:	f003 030f 	and.w	r3, r3, #15
 80038da:	4a0e      	ldr	r2, [pc, #56]	; (8003914 <HAL_Init+0x6c>)
 80038dc:	5cd3      	ldrb	r3, [r2, r3]
 80038de:	f003 031f 	and.w	r3, r3, #31
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	fa22 f303 	lsr.w	r3, r2, r3
 80038e8:	4a0b      	ldr	r2, [pc, #44]	; (8003918 <HAL_Init+0x70>)
 80038ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80038ec:	4a0b      	ldr	r2, [pc, #44]	; (800391c <HAL_Init+0x74>)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80038f2:	2005      	movs	r0, #5
 80038f4:	f7ff fd4c 	bl	8003390 <HAL_InitTick>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d001      	beq.n	8003902 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e002      	b.n	8003908 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003902:	f7ff f895 	bl	8002a30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003906:	2300      	movs	r3, #0
}
 8003908:	4618      	mov	r0, r3
 800390a:	3708      	adds	r7, #8
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}
 8003910:	58024400 	.word	0x58024400
 8003914:	08016bf4 	.word	0x08016bf4
 8003918:	24000094 	.word	0x24000094
 800391c:	24000090 	.word	0x24000090

08003920 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003920:	b480      	push	{r7}
 8003922:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003924:	4b06      	ldr	r3, [pc, #24]	; (8003940 <HAL_IncTick+0x20>)
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	461a      	mov	r2, r3
 800392a:	4b06      	ldr	r3, [pc, #24]	; (8003944 <HAL_IncTick+0x24>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4413      	add	r3, r2
 8003930:	4a04      	ldr	r2, [pc, #16]	; (8003944 <HAL_IncTick+0x24>)
 8003932:	6013      	str	r3, [r2, #0]
}
 8003934:	bf00      	nop
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr
 800393e:	bf00      	nop
 8003940:	2400009c 	.word	0x2400009c
 8003944:	24001108 	.word	0x24001108

08003948 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003948:	b480      	push	{r7}
 800394a:	af00      	add	r7, sp, #0
  return uwTick;
 800394c:	4b03      	ldr	r3, [pc, #12]	; (800395c <HAL_GetTick+0x14>)
 800394e:	681b      	ldr	r3, [r3, #0]
}
 8003950:	4618      	mov	r0, r3
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	24001108 	.word	0x24001108

08003960 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003960:	b480      	push	{r7}
 8003962:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003964:	4b03      	ldr	r3, [pc, #12]	; (8003974 <HAL_GetREVID+0x14>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	0c1b      	lsrs	r3, r3, #16
}
 800396a:	4618      	mov	r0, r3
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr
 8003974:	5c001000 	.word	0x5c001000

08003978 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003982:	4b07      	ldr	r3, [pc, #28]	; (80039a0 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003984:	685a      	ldr	r2, [r3, #4]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	43db      	mvns	r3, r3
 800398a:	401a      	ands	r2, r3
 800398c:	4904      	ldr	r1, [pc, #16]	; (80039a0 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	4313      	orrs	r3, r2
 8003992:	604b      	str	r3, [r1, #4]
}
 8003994:	bf00      	nop
 8003996:	370c      	adds	r7, #12
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr
 80039a0:	58000400 	.word	0x58000400

080039a4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	431a      	orrs	r2, r3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	609a      	str	r2, [r3, #8]
}
 80039be:	bf00      	nop
 80039c0:	370c      	adds	r7, #12
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr

080039ca <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80039ca:	b480      	push	{r7}
 80039cc:	b083      	sub	sp, #12
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
 80039d2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	431a      	orrs	r2, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	609a      	str	r2, [r3, #8]
}
 80039e4:	bf00      	nop
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b087      	sub	sp, #28
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	60b9      	str	r1, [r7, #8]
 8003a16:	607a      	str	r2, [r7, #4]
 8003a18:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	3360      	adds	r3, #96	; 0x60
 8003a1e:	461a      	mov	r2, r3
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	4413      	add	r3, r2
 8003a26:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	430b      	orrs	r3, r1
 8003a3a:	431a      	orrs	r2, r3
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003a40:	bf00      	nop
 8003a42:	371c      	adds	r7, #28
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b085      	sub	sp, #20
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	60b9      	str	r1, [r7, #8]
 8003a56:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	691b      	ldr	r3, [r3, #16]
 8003a5c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	f003 031f 	and.w	r3, r3, #31
 8003a66:	6879      	ldr	r1, [r7, #4]
 8003a68:	fa01 f303 	lsl.w	r3, r1, r3
 8003a6c:	431a      	orrs	r2, r3
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	611a      	str	r2, [r3, #16]
}
 8003a72:	bf00      	nop
 8003a74:	3714      	adds	r7, #20
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr

08003a7e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003a7e:	b480      	push	{r7}
 8003a80:	b087      	sub	sp, #28
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	60f8      	str	r0, [r7, #12]
 8003a86:	60b9      	str	r1, [r7, #8]
 8003a88:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	3360      	adds	r3, #96	; 0x60
 8003a8e:	461a      	mov	r2, r3
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	4413      	add	r3, r2
 8003a96:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	431a      	orrs	r2, r3
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	601a      	str	r2, [r3, #0]
  }
}
 8003aa8:	bf00      	nop
 8003aaa:	371c      	adds	r7, #28
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr

08003ab4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d101      	bne.n	8003acc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e000      	b.n	8003ace <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003acc:	2300      	movs	r3, #0
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	370c      	adds	r7, #12
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr

08003ada <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003ada:	b480      	push	{r7}
 8003adc:	b087      	sub	sp, #28
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	60f8      	str	r0, [r7, #12]
 8003ae2:	60b9      	str	r1, [r7, #8]
 8003ae4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	3330      	adds	r3, #48	; 0x30
 8003aea:	461a      	mov	r2, r3
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	0a1b      	lsrs	r3, r3, #8
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	f003 030c 	and.w	r3, r3, #12
 8003af6:	4413      	add	r3, r2
 8003af8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	f003 031f 	and.w	r3, r3, #31
 8003b04:	211f      	movs	r1, #31
 8003b06:	fa01 f303 	lsl.w	r3, r1, r3
 8003b0a:	43db      	mvns	r3, r3
 8003b0c:	401a      	ands	r2, r3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	0e9b      	lsrs	r3, r3, #26
 8003b12:	f003 011f 	and.w	r1, r3, #31
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	f003 031f 	and.w	r3, r3, #31
 8003b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b20:	431a      	orrs	r2, r3
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003b26:	bf00      	nop
 8003b28:	371c      	adds	r7, #28
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr

08003b32 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8003b32:	b480      	push	{r7}
 8003b34:	b083      	sub	sp, #12
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
 8003b3a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	f023 0203 	bic.w	r2, r3, #3
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	431a      	orrs	r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	60da      	str	r2, [r3, #12]
}
 8003b4c:	bf00      	nop
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b087      	sub	sp, #28
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	3314      	adds	r3, #20
 8003b68:	461a      	mov	r2, r3
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	0e5b      	lsrs	r3, r3, #25
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	f003 0304 	and.w	r3, r3, #4
 8003b74:	4413      	add	r3, r2
 8003b76:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	0d1b      	lsrs	r3, r3, #20
 8003b80:	f003 031f 	and.w	r3, r3, #31
 8003b84:	2107      	movs	r1, #7
 8003b86:	fa01 f303 	lsl.w	r3, r1, r3
 8003b8a:	43db      	mvns	r3, r3
 8003b8c:	401a      	ands	r2, r3
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	0d1b      	lsrs	r3, r3, #20
 8003b92:	f003 031f 	and.w	r3, r3, #31
 8003b96:	6879      	ldr	r1, [r7, #4]
 8003b98:	fa01 f303 	lsl.w	r3, r1, r3
 8003b9c:	431a      	orrs	r2, r3
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003ba2:	bf00      	nop
 8003ba4:	371c      	adds	r7, #28
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
	...

08003bb0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b085      	sub	sp, #20
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003bc8:	43db      	mvns	r3, r3
 8003bca:	401a      	ands	r2, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f003 0318 	and.w	r3, r3, #24
 8003bd2:	4908      	ldr	r1, [pc, #32]	; (8003bf4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003bd4:	40d9      	lsrs	r1, r3
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	400b      	ands	r3, r1
 8003bda:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003bde:	431a      	orrs	r2, r3
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003be6:	bf00      	nop
 8003be8:	3714      	adds	r7, #20
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop
 8003bf4:	000fffff 	.word	0x000fffff

08003bf8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	f003 031f 	and.w	r3, r3, #31
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	689a      	ldr	r2, [r3, #8]
 8003c20:	4b04      	ldr	r3, [pc, #16]	; (8003c34 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003c22:	4013      	ands	r3, r2
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	6093      	str	r3, [r2, #8]
}
 8003c28:	bf00      	nop
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr
 8003c34:	5fffffc0 	.word	0x5fffffc0

08003c38 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c4c:	d101      	bne.n	8003c52 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e000      	b.n	8003c54 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003c52:	2300      	movs	r3, #0
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	370c      	adds	r7, #12
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	689a      	ldr	r2, [r3, #8]
 8003c6c:	4b05      	ldr	r3, [pc, #20]	; (8003c84 <LL_ADC_EnableInternalRegulator+0x24>)
 8003c6e:	4013      	ands	r3, r2
 8003c70:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003c78:	bf00      	nop
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr
 8003c84:	6fffffc0 	.word	0x6fffffc0

08003c88 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c98:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c9c:	d101      	bne.n	8003ca2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e000      	b.n	8003ca4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003ca2:	2300      	movs	r3, #0
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	370c      	adds	r7, #12
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr

08003cb0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	689a      	ldr	r2, [r3, #8]
 8003cbc:	4b05      	ldr	r3, [pc, #20]	; (8003cd4 <LL_ADC_Enable+0x24>)
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	f043 0201 	orr.w	r2, r3, #1
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003cc8:	bf00      	nop
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr
 8003cd4:	7fffffc0 	.word	0x7fffffc0

08003cd8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	689a      	ldr	r2, [r3, #8]
 8003ce4:	4b05      	ldr	r3, [pc, #20]	; (8003cfc <LL_ADC_Disable+0x24>)
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	f043 0202 	orr.w	r2, r3, #2
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003cf0:	bf00      	nop
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr
 8003cfc:	7fffffc0 	.word	0x7fffffc0

08003d00 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	f003 0301 	and.w	r3, r3, #1
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d101      	bne.n	8003d18 <LL_ADC_IsEnabled+0x18>
 8003d14:	2301      	movs	r3, #1
 8003d16:	e000      	b.n	8003d1a <LL_ADC_IsEnabled+0x1a>
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	370c      	adds	r7, #12
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr

08003d26 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003d26:	b480      	push	{r7}
 8003d28:	b083      	sub	sp, #12
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d101      	bne.n	8003d3e <LL_ADC_IsDisableOngoing+0x18>
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e000      	b.n	8003d40 <LL_ADC_IsDisableOngoing+0x1a>
 8003d3e:	2300      	movs	r3, #0
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	689a      	ldr	r2, [r3, #8]
 8003d58:	4b05      	ldr	r3, [pc, #20]	; (8003d70 <LL_ADC_REG_StartConversion+0x24>)
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	f043 0204 	orr.w	r2, r3, #4
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003d64:	bf00      	nop
 8003d66:	370c      	adds	r7, #12
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr
 8003d70:	7fffffc0 	.word	0x7fffffc0

08003d74 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	f003 0304 	and.w	r3, r3, #4
 8003d84:	2b04      	cmp	r3, #4
 8003d86:	d101      	bne.n	8003d8c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e000      	b.n	8003d8e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003d8c:	2300      	movs	r3, #0
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	370c      	adds	r7, #12
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr

08003d9a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003d9a:	b480      	push	{r7}
 8003d9c:	b083      	sub	sp, #12
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	f003 0308 	and.w	r3, r3, #8
 8003daa:	2b08      	cmp	r3, #8
 8003dac:	d101      	bne.n	8003db2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003dae:	2301      	movs	r3, #1
 8003db0:	e000      	b.n	8003db4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003db2:	2300      	movs	r3, #0
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003dc0:	b590      	push	{r4, r7, lr}
 8003dc2:	b089      	sub	sp, #36	; 0x24
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d101      	bne.n	8003dda <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e18f      	b.n	80040fa <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d109      	bne.n	8003dfc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f7fe fe3f 	bl	8002a6c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4618      	mov	r0, r3
 8003e02:	f7ff ff19 	bl	8003c38 <LL_ADC_IsDeepPowerDownEnabled>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d004      	beq.n	8003e16 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4618      	mov	r0, r3
 8003e12:	f7ff feff 	bl	8003c14 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f7ff ff34 	bl	8003c88 <LL_ADC_IsInternalRegulatorEnabled>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d114      	bne.n	8003e50 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7ff ff18 	bl	8003c60 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003e30:	4b87      	ldr	r3, [pc, #540]	; (8004050 <HAL_ADC_Init+0x290>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	099b      	lsrs	r3, r3, #6
 8003e36:	4a87      	ldr	r2, [pc, #540]	; (8004054 <HAL_ADC_Init+0x294>)
 8003e38:	fba2 2303 	umull	r2, r3, r2, r3
 8003e3c:	099b      	lsrs	r3, r3, #6
 8003e3e:	3301      	adds	r3, #1
 8003e40:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003e42:	e002      	b.n	8003e4a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	3b01      	subs	r3, #1
 8003e48:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d1f9      	bne.n	8003e44 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7ff ff17 	bl	8003c88 <LL_ADC_IsInternalRegulatorEnabled>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d10d      	bne.n	8003e7c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e64:	f043 0210 	orr.w	r2, r3, #16
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e70:	f043 0201 	orr.w	r2, r3, #1
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4618      	mov	r0, r3
 8003e82:	f7ff ff77 	bl	8003d74 <LL_ADC_REG_IsConversionOngoing>
 8003e86:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e8c:	f003 0310 	and.w	r3, r3, #16
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	f040 8129 	bne.w	80040e8 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	f040 8125 	bne.w	80040e8 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ea2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003ea6:	f043 0202 	orr.w	r2, r3, #2
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f7ff ff24 	bl	8003d00 <LL_ADC_IsEnabled>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d136      	bne.n	8003f2c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a65      	ldr	r2, [pc, #404]	; (8004058 <HAL_ADC_Init+0x298>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d004      	beq.n	8003ed2 <HAL_ADC_Init+0x112>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a63      	ldr	r2, [pc, #396]	; (800405c <HAL_ADC_Init+0x29c>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d10e      	bne.n	8003ef0 <HAL_ADC_Init+0x130>
 8003ed2:	4861      	ldr	r0, [pc, #388]	; (8004058 <HAL_ADC_Init+0x298>)
 8003ed4:	f7ff ff14 	bl	8003d00 <LL_ADC_IsEnabled>
 8003ed8:	4604      	mov	r4, r0
 8003eda:	4860      	ldr	r0, [pc, #384]	; (800405c <HAL_ADC_Init+0x29c>)
 8003edc:	f7ff ff10 	bl	8003d00 <LL_ADC_IsEnabled>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	4323      	orrs	r3, r4
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	bf0c      	ite	eq
 8003ee8:	2301      	moveq	r3, #1
 8003eea:	2300      	movne	r3, #0
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	e008      	b.n	8003f02 <HAL_ADC_Init+0x142>
 8003ef0:	485b      	ldr	r0, [pc, #364]	; (8004060 <HAL_ADC_Init+0x2a0>)
 8003ef2:	f7ff ff05 	bl	8003d00 <LL_ADC_IsEnabled>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	bf0c      	ite	eq
 8003efc:	2301      	moveq	r3, #1
 8003efe:	2300      	movne	r3, #0
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d012      	beq.n	8003f2c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a53      	ldr	r2, [pc, #332]	; (8004058 <HAL_ADC_Init+0x298>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d004      	beq.n	8003f1a <HAL_ADC_Init+0x15a>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a51      	ldr	r2, [pc, #324]	; (800405c <HAL_ADC_Init+0x29c>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d101      	bne.n	8003f1e <HAL_ADC_Init+0x15e>
 8003f1a:	4a52      	ldr	r2, [pc, #328]	; (8004064 <HAL_ADC_Init+0x2a4>)
 8003f1c:	e000      	b.n	8003f20 <HAL_ADC_Init+0x160>
 8003f1e:	4a52      	ldr	r2, [pc, #328]	; (8004068 <HAL_ADC_Init+0x2a8>)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	4619      	mov	r1, r3
 8003f26:	4610      	mov	r0, r2
 8003f28:	f7ff fd3c 	bl	80039a4 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003f2c:	f7ff fd18 	bl	8003960 <HAL_GetREVID>
 8003f30:	4603      	mov	r3, r0
 8003f32:	f241 0203 	movw	r2, #4099	; 0x1003
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d914      	bls.n	8003f64 <HAL_ADC_Init+0x1a4>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	2b10      	cmp	r3, #16
 8003f40:	d110      	bne.n	8003f64 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	7d5b      	ldrb	r3, [r3, #21]
 8003f46:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003f4c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003f52:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	7f1b      	ldrb	r3, [r3, #28]
 8003f58:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003f5a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003f5c:	f043 030c 	orr.w	r3, r3, #12
 8003f60:	61bb      	str	r3, [r7, #24]
 8003f62:	e00d      	b.n	8003f80 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	7d5b      	ldrb	r3, [r3, #21]
 8003f68:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003f6e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003f74:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	7f1b      	ldrb	r3, [r3, #28]
 8003f7a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	7f1b      	ldrb	r3, [r3, #28]
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d106      	bne.n	8003f96 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6a1b      	ldr	r3, [r3, #32]
 8003f8c:	3b01      	subs	r3, #1
 8003f8e:	045b      	lsls	r3, r3, #17
 8003f90:	69ba      	ldr	r2, [r7, #24]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d009      	beq.n	8003fb2 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa2:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003faa:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003fac:	69ba      	ldr	r2, [r7, #24]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	68da      	ldr	r2, [r3, #12]
 8003fb8:	4b2c      	ldr	r3, [pc, #176]	; (800406c <HAL_ADC_Init+0x2ac>)
 8003fba:	4013      	ands	r3, r2
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	6812      	ldr	r2, [r2, #0]
 8003fc0:	69b9      	ldr	r1, [r7, #24]
 8003fc2:	430b      	orrs	r3, r1
 8003fc4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f7ff fed2 	bl	8003d74 <LL_ADC_REG_IsConversionOngoing>
 8003fd0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f7ff fedf 	bl	8003d9a <LL_ADC_INJ_IsConversionOngoing>
 8003fdc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d15f      	bne.n	80040a4 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d15c      	bne.n	80040a4 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	7d1b      	ldrb	r3, [r3, #20]
 8003fee:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	68da      	ldr	r2, [r3, #12]
 8003ffe:	4b1c      	ldr	r3, [pc, #112]	; (8004070 <HAL_ADC_Init+0x2b0>)
 8004000:	4013      	ands	r3, r2
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	6812      	ldr	r2, [r2, #0]
 8004006:	69b9      	ldr	r1, [r7, #24]
 8004008:	430b      	orrs	r3, r1
 800400a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004012:	2b01      	cmp	r3, #1
 8004014:	d130      	bne.n	8004078 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	691a      	ldr	r2, [r3, #16]
 8004022:	4b14      	ldr	r3, [pc, #80]	; (8004074 <HAL_ADC_Init+0x2b4>)
 8004024:	4013      	ands	r3, r2
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800402a:	3a01      	subs	r2, #1
 800402c:	0411      	lsls	r1, r2, #16
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004032:	4311      	orrs	r1, r2
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004038:	4311      	orrs	r1, r2
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800403e:	430a      	orrs	r2, r1
 8004040:	431a      	orrs	r2, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f042 0201 	orr.w	r2, r2, #1
 800404a:	611a      	str	r2, [r3, #16]
 800404c:	e01c      	b.n	8004088 <HAL_ADC_Init+0x2c8>
 800404e:	bf00      	nop
 8004050:	24000090 	.word	0x24000090
 8004054:	053e2d63 	.word	0x053e2d63
 8004058:	40022000 	.word	0x40022000
 800405c:	40022100 	.word	0x40022100
 8004060:	58026000 	.word	0x58026000
 8004064:	40022300 	.word	0x40022300
 8004068:	58026300 	.word	0x58026300
 800406c:	fff0c003 	.word	0xfff0c003
 8004070:	ffffbffc 	.word	0xffffbffc
 8004074:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	691a      	ldr	r2, [r3, #16]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f022 0201 	bic.w	r2, r2, #1
 8004086:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	430a      	orrs	r2, r1
 800409c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 fdec 	bl	8004c7c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d10c      	bne.n	80040c6 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b2:	f023 010f 	bic.w	r1, r3, #15
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	1e5a      	subs	r2, r3, #1
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	430a      	orrs	r2, r1
 80040c2:	631a      	str	r2, [r3, #48]	; 0x30
 80040c4:	e007      	b.n	80040d6 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f022 020f 	bic.w	r2, r2, #15
 80040d4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040da:	f023 0303 	bic.w	r3, r3, #3
 80040de:	f043 0201 	orr.w	r2, r3, #1
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	655a      	str	r2, [r3, #84]	; 0x54
 80040e6:	e007      	b.n	80040f8 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ec:	f043 0210 	orr.w	r2, r3, #16
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80040f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3724      	adds	r7, #36	; 0x24
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd90      	pop	{r4, r7, pc}
 8004102:	bf00      	nop

08004104 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b086      	sub	sp, #24
 8004108:	af00      	add	r7, sp, #0
 800410a:	60f8      	str	r0, [r7, #12]
 800410c:	60b9      	str	r1, [r7, #8]
 800410e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a55      	ldr	r2, [pc, #340]	; (800426c <HAL_ADC_Start_DMA+0x168>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d004      	beq.n	8004124 <HAL_ADC_Start_DMA+0x20>
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a54      	ldr	r2, [pc, #336]	; (8004270 <HAL_ADC_Start_DMA+0x16c>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d101      	bne.n	8004128 <HAL_ADC_Start_DMA+0x24>
 8004124:	4b53      	ldr	r3, [pc, #332]	; (8004274 <HAL_ADC_Start_DMA+0x170>)
 8004126:	e000      	b.n	800412a <HAL_ADC_Start_DMA+0x26>
 8004128:	4b53      	ldr	r3, [pc, #332]	; (8004278 <HAL_ADC_Start_DMA+0x174>)
 800412a:	4618      	mov	r0, r3
 800412c:	f7ff fd64 	bl	8003bf8 <LL_ADC_GetMultimode>
 8004130:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4618      	mov	r0, r3
 8004138:	f7ff fe1c 	bl	8003d74 <LL_ADC_REG_IsConversionOngoing>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	f040 808c 	bne.w	800425c <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800414a:	2b01      	cmp	r3, #1
 800414c:	d101      	bne.n	8004152 <HAL_ADC_Start_DMA+0x4e>
 800414e:	2302      	movs	r3, #2
 8004150:	e087      	b.n	8004262 <HAL_ADC_Start_DMA+0x15e>
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2201      	movs	r2, #1
 8004156:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d005      	beq.n	800416c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	2b05      	cmp	r3, #5
 8004164:	d002      	beq.n	800416c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	2b09      	cmp	r3, #9
 800416a:	d170      	bne.n	800424e <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800416c:	68f8      	ldr	r0, [r7, #12]
 800416e:	f000 fc07 	bl	8004980 <ADC_Enable>
 8004172:	4603      	mov	r3, r0
 8004174:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004176:	7dfb      	ldrb	r3, [r7, #23]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d163      	bne.n	8004244 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004180:	4b3e      	ldr	r3, [pc, #248]	; (800427c <HAL_ADC_Start_DMA+0x178>)
 8004182:	4013      	ands	r3, r2
 8004184:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a37      	ldr	r2, [pc, #220]	; (8004270 <HAL_ADC_Start_DMA+0x16c>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d002      	beq.n	800419c <HAL_ADC_Start_DMA+0x98>
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	e000      	b.n	800419e <HAL_ADC_Start_DMA+0x9a>
 800419c:	4b33      	ldr	r3, [pc, #204]	; (800426c <HAL_ADC_Start_DMA+0x168>)
 800419e:	68fa      	ldr	r2, [r7, #12]
 80041a0:	6812      	ldr	r2, [r2, #0]
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d002      	beq.n	80041ac <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d105      	bne.n	80041b8 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d006      	beq.n	80041d2 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041c8:	f023 0206 	bic.w	r2, r3, #6
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	659a      	str	r2, [r3, #88]	; 0x58
 80041d0:	e002      	b.n	80041d8 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2200      	movs	r2, #0
 80041d6:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041dc:	4a28      	ldr	r2, [pc, #160]	; (8004280 <HAL_ADC_Start_DMA+0x17c>)
 80041de:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041e4:	4a27      	ldr	r2, [pc, #156]	; (8004284 <HAL_ADC_Start_DMA+0x180>)
 80041e6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041ec:	4a26      	ldr	r2, [pc, #152]	; (8004288 <HAL_ADC_Start_DMA+0x184>)
 80041ee:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	221c      	movs	r2, #28
 80041f6:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	685a      	ldr	r2, [r3, #4]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f042 0210 	orr.w	r2, r2, #16
 800420e:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004218:	4619      	mov	r1, r3
 800421a:	4610      	mov	r0, r2
 800421c:	f7ff fc89 	bl	8003b32 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	3340      	adds	r3, #64	; 0x40
 800422a:	4619      	mov	r1, r3
 800422c:	68ba      	ldr	r2, [r7, #8]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f002 f80e 	bl	8006250 <HAL_DMA_Start_IT>
 8004234:	4603      	mov	r3, r0
 8004236:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4618      	mov	r0, r3
 800423e:	f7ff fd85 	bl	8003d4c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004242:	e00d      	b.n	8004260 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2200      	movs	r2, #0
 8004248:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 800424c:	e008      	b.n	8004260 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2200      	movs	r2, #0
 8004256:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800425a:	e001      	b.n	8004260 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800425c:	2302      	movs	r3, #2
 800425e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004260:	7dfb      	ldrb	r3, [r7, #23]
}
 8004262:	4618      	mov	r0, r3
 8004264:	3718      	adds	r7, #24
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	40022000 	.word	0x40022000
 8004270:	40022100 	.word	0x40022100
 8004274:	40022300 	.word	0x40022300
 8004278:	58026300 	.word	0x58026300
 800427c:	fffff0fe 	.word	0xfffff0fe
 8004280:	08004b53 	.word	0x08004b53
 8004284:	08004c2b 	.word	0x08004c2b
 8004288:	08004c47 	.word	0x08004c47

0800428c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004294:	bf00      	nop
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80042a8:	bf00      	nop
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80042bc:	bf00      	nop
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80042c8:	b590      	push	{r4, r7, lr}
 80042ca:	b0a1      	sub	sp, #132	; 0x84
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042d2:	2300      	movs	r3, #0
 80042d4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80042d8:	2300      	movs	r3, #0
 80042da:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	4a65      	ldr	r2, [pc, #404]	; (8004478 <HAL_ADC_ConfigChannel+0x1b0>)
 80042e2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d101      	bne.n	80042f2 <HAL_ADC_ConfigChannel+0x2a>
 80042ee:	2302      	movs	r3, #2
 80042f0:	e32e      	b.n	8004950 <HAL_ADC_ConfigChannel+0x688>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2201      	movs	r2, #1
 80042f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4618      	mov	r0, r3
 8004300:	f7ff fd38 	bl	8003d74 <LL_ADC_REG_IsConversionOngoing>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	f040 8313 	bne.w	8004932 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2b00      	cmp	r3, #0
 8004312:	db2c      	blt.n	800436e <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800431c:	2b00      	cmp	r3, #0
 800431e:	d108      	bne.n	8004332 <HAL_ADC_ConfigChannel+0x6a>
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	0e9b      	lsrs	r3, r3, #26
 8004326:	f003 031f 	and.w	r3, r3, #31
 800432a:	2201      	movs	r2, #1
 800432c:	fa02 f303 	lsl.w	r3, r2, r3
 8004330:	e016      	b.n	8004360 <HAL_ADC_ConfigChannel+0x98>
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004338:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800433a:	fa93 f3a3 	rbit	r3, r3
 800433e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004340:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004342:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004344:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004346:	2b00      	cmp	r3, #0
 8004348:	d101      	bne.n	800434e <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 800434a:	2320      	movs	r3, #32
 800434c:	e003      	b.n	8004356 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 800434e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004350:	fab3 f383 	clz	r3, r3
 8004354:	b2db      	uxtb	r3, r3
 8004356:	f003 031f 	and.w	r3, r3, #31
 800435a:	2201      	movs	r2, #1
 800435c:	fa02 f303 	lsl.w	r3, r2, r3
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	6812      	ldr	r2, [r2, #0]
 8004364:	69d1      	ldr	r1, [r2, #28]
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	6812      	ldr	r2, [r2, #0]
 800436a:	430b      	orrs	r3, r1
 800436c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6818      	ldr	r0, [r3, #0]
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	6859      	ldr	r1, [r3, #4]
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	461a      	mov	r2, r3
 800437c:	f7ff fbad 	bl	8003ada <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4618      	mov	r0, r3
 8004386:	f7ff fcf5 	bl	8003d74 <LL_ADC_REG_IsConversionOngoing>
 800438a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4618      	mov	r0, r3
 8004392:	f7ff fd02 	bl	8003d9a <LL_ADC_INJ_IsConversionOngoing>
 8004396:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004398:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800439a:	2b00      	cmp	r3, #0
 800439c:	f040 80b8 	bne.w	8004510 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80043a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	f040 80b4 	bne.w	8004510 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6818      	ldr	r0, [r3, #0]
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	6819      	ldr	r1, [r3, #0]
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	461a      	mov	r2, r3
 80043b6:	f7ff fbcf 	bl	8003b58 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80043ba:	4b30      	ldr	r3, [pc, #192]	; (800447c <HAL_ADC_ConfigChannel+0x1b4>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80043c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043c6:	d10b      	bne.n	80043e0 <HAL_ADC_ConfigChannel+0x118>
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	695a      	ldr	r2, [r3, #20]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	089b      	lsrs	r3, r3, #2
 80043d4:	f003 0307 	and.w	r3, r3, #7
 80043d8:	005b      	lsls	r3, r3, #1
 80043da:	fa02 f303 	lsl.w	r3, r2, r3
 80043de:	e01d      	b.n	800441c <HAL_ADC_ConfigChannel+0x154>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	f003 0310 	and.w	r3, r3, #16
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d10b      	bne.n	8004406 <HAL_ADC_ConfigChannel+0x13e>
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	695a      	ldr	r2, [r3, #20]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	089b      	lsrs	r3, r3, #2
 80043fa:	f003 0307 	and.w	r3, r3, #7
 80043fe:	005b      	lsls	r3, r3, #1
 8004400:	fa02 f303 	lsl.w	r3, r2, r3
 8004404:	e00a      	b.n	800441c <HAL_ADC_ConfigChannel+0x154>
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	695a      	ldr	r2, [r3, #20]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	089b      	lsrs	r3, r3, #2
 8004412:	f003 0304 	and.w	r3, r3, #4
 8004416:	005b      	lsls	r3, r3, #1
 8004418:	fa02 f303 	lsl.w	r3, r2, r3
 800441c:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	2b04      	cmp	r3, #4
 8004424:	d02c      	beq.n	8004480 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6818      	ldr	r0, [r3, #0]
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	6919      	ldr	r1, [r3, #16]
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004434:	f7ff faea 	bl	8003a0c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6818      	ldr	r0, [r3, #0]
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	6919      	ldr	r1, [r3, #16]
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	7e5b      	ldrb	r3, [r3, #25]
 8004444:	2b01      	cmp	r3, #1
 8004446:	d102      	bne.n	800444e <HAL_ADC_ConfigChannel+0x186>
 8004448:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800444c:	e000      	b.n	8004450 <HAL_ADC_ConfigChannel+0x188>
 800444e:	2300      	movs	r3, #0
 8004450:	461a      	mov	r2, r3
 8004452:	f7ff fb14 	bl	8003a7e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6818      	ldr	r0, [r3, #0]
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	6919      	ldr	r1, [r3, #16]
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	7e1b      	ldrb	r3, [r3, #24]
 8004462:	2b01      	cmp	r3, #1
 8004464:	d102      	bne.n	800446c <HAL_ADC_ConfigChannel+0x1a4>
 8004466:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800446a:	e000      	b.n	800446e <HAL_ADC_ConfigChannel+0x1a6>
 800446c:	2300      	movs	r3, #0
 800446e:	461a      	mov	r2, r3
 8004470:	f7ff faec 	bl	8003a4c <LL_ADC_SetDataRightShift>
 8004474:	e04c      	b.n	8004510 <HAL_ADC_ConfigChannel+0x248>
 8004476:	bf00      	nop
 8004478:	47ff0000 	.word	0x47ff0000
 800447c:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004486:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	069b      	lsls	r3, r3, #26
 8004490:	429a      	cmp	r2, r3
 8004492:	d107      	bne.n	80044a4 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80044a2:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	069b      	lsls	r3, r3, #26
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d107      	bne.n	80044c8 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80044c6:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	069b      	lsls	r3, r3, #26
 80044d8:	429a      	cmp	r2, r3
 80044da:	d107      	bne.n	80044ec <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80044ea:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	069b      	lsls	r3, r3, #26
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d107      	bne.n	8004510 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800450e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4618      	mov	r0, r3
 8004516:	f7ff fbf3 	bl	8003d00 <LL_ADC_IsEnabled>
 800451a:	4603      	mov	r3, r0
 800451c:	2b00      	cmp	r3, #0
 800451e:	f040 8211 	bne.w	8004944 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6818      	ldr	r0, [r3, #0]
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	6819      	ldr	r1, [r3, #0]
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	461a      	mov	r2, r3
 8004530:	f7ff fb3e 	bl	8003bb0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	4aa1      	ldr	r2, [pc, #644]	; (80047c0 <HAL_ADC_ConfigChannel+0x4f8>)
 800453a:	4293      	cmp	r3, r2
 800453c:	f040 812e 	bne.w	800479c <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800454c:	2b00      	cmp	r3, #0
 800454e:	d10b      	bne.n	8004568 <HAL_ADC_ConfigChannel+0x2a0>
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	0e9b      	lsrs	r3, r3, #26
 8004556:	3301      	adds	r3, #1
 8004558:	f003 031f 	and.w	r3, r3, #31
 800455c:	2b09      	cmp	r3, #9
 800455e:	bf94      	ite	ls
 8004560:	2301      	movls	r3, #1
 8004562:	2300      	movhi	r3, #0
 8004564:	b2db      	uxtb	r3, r3
 8004566:	e019      	b.n	800459c <HAL_ADC_ConfigChannel+0x2d4>
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800456e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004570:	fa93 f3a3 	rbit	r3, r3
 8004574:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004576:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004578:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800457a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800457c:	2b00      	cmp	r3, #0
 800457e:	d101      	bne.n	8004584 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8004580:	2320      	movs	r3, #32
 8004582:	e003      	b.n	800458c <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8004584:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004586:	fab3 f383 	clz	r3, r3
 800458a:	b2db      	uxtb	r3, r3
 800458c:	3301      	adds	r3, #1
 800458e:	f003 031f 	and.w	r3, r3, #31
 8004592:	2b09      	cmp	r3, #9
 8004594:	bf94      	ite	ls
 8004596:	2301      	movls	r3, #1
 8004598:	2300      	movhi	r3, #0
 800459a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800459c:	2b00      	cmp	r3, #0
 800459e:	d079      	beq.n	8004694 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d107      	bne.n	80045bc <HAL_ADC_ConfigChannel+0x2f4>
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	0e9b      	lsrs	r3, r3, #26
 80045b2:	3301      	adds	r3, #1
 80045b4:	069b      	lsls	r3, r3, #26
 80045b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80045ba:	e015      	b.n	80045e8 <HAL_ADC_ConfigChannel+0x320>
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045c4:	fa93 f3a3 	rbit	r3, r3
 80045c8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80045ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045cc:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80045ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d101      	bne.n	80045d8 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 80045d4:	2320      	movs	r3, #32
 80045d6:	e003      	b.n	80045e0 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 80045d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045da:	fab3 f383 	clz	r3, r3
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	3301      	adds	r3, #1
 80045e2:	069b      	lsls	r3, r3, #26
 80045e4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d109      	bne.n	8004608 <HAL_ADC_ConfigChannel+0x340>
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	0e9b      	lsrs	r3, r3, #26
 80045fa:	3301      	adds	r3, #1
 80045fc:	f003 031f 	and.w	r3, r3, #31
 8004600:	2101      	movs	r1, #1
 8004602:	fa01 f303 	lsl.w	r3, r1, r3
 8004606:	e017      	b.n	8004638 <HAL_ADC_ConfigChannel+0x370>
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800460e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004610:	fa93 f3a3 	rbit	r3, r3
 8004614:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004616:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004618:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800461a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800461c:	2b00      	cmp	r3, #0
 800461e:	d101      	bne.n	8004624 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8004620:	2320      	movs	r3, #32
 8004622:	e003      	b.n	800462c <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8004624:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004626:	fab3 f383 	clz	r3, r3
 800462a:	b2db      	uxtb	r3, r3
 800462c:	3301      	adds	r3, #1
 800462e:	f003 031f 	and.w	r3, r3, #31
 8004632:	2101      	movs	r1, #1
 8004634:	fa01 f303 	lsl.w	r3, r1, r3
 8004638:	ea42 0103 	orr.w	r1, r2, r3
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004644:	2b00      	cmp	r3, #0
 8004646:	d10a      	bne.n	800465e <HAL_ADC_ConfigChannel+0x396>
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	0e9b      	lsrs	r3, r3, #26
 800464e:	3301      	adds	r3, #1
 8004650:	f003 021f 	and.w	r2, r3, #31
 8004654:	4613      	mov	r3, r2
 8004656:	005b      	lsls	r3, r3, #1
 8004658:	4413      	add	r3, r2
 800465a:	051b      	lsls	r3, r3, #20
 800465c:	e018      	b.n	8004690 <HAL_ADC_ConfigChannel+0x3c8>
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004666:	fa93 f3a3 	rbit	r3, r3
 800466a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800466c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800466e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004672:	2b00      	cmp	r3, #0
 8004674:	d101      	bne.n	800467a <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8004676:	2320      	movs	r3, #32
 8004678:	e003      	b.n	8004682 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 800467a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800467c:	fab3 f383 	clz	r3, r3
 8004680:	b2db      	uxtb	r3, r3
 8004682:	3301      	adds	r3, #1
 8004684:	f003 021f 	and.w	r2, r3, #31
 8004688:	4613      	mov	r3, r2
 800468a:	005b      	lsls	r3, r3, #1
 800468c:	4413      	add	r3, r2
 800468e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004690:	430b      	orrs	r3, r1
 8004692:	e07e      	b.n	8004792 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800469c:	2b00      	cmp	r3, #0
 800469e:	d107      	bne.n	80046b0 <HAL_ADC_ConfigChannel+0x3e8>
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	0e9b      	lsrs	r3, r3, #26
 80046a6:	3301      	adds	r3, #1
 80046a8:	069b      	lsls	r3, r3, #26
 80046aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80046ae:	e015      	b.n	80046dc <HAL_ADC_ConfigChannel+0x414>
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b8:	fa93 f3a3 	rbit	r3, r3
 80046bc:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80046be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80046c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d101      	bne.n	80046cc <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 80046c8:	2320      	movs	r3, #32
 80046ca:	e003      	b.n	80046d4 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 80046cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ce:	fab3 f383 	clz	r3, r3
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	3301      	adds	r3, #1
 80046d6:	069b      	lsls	r3, r3, #26
 80046d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d109      	bne.n	80046fc <HAL_ADC_ConfigChannel+0x434>
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	0e9b      	lsrs	r3, r3, #26
 80046ee:	3301      	adds	r3, #1
 80046f0:	f003 031f 	and.w	r3, r3, #31
 80046f4:	2101      	movs	r1, #1
 80046f6:	fa01 f303 	lsl.w	r3, r1, r3
 80046fa:	e017      	b.n	800472c <HAL_ADC_ConfigChannel+0x464>
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	fa93 f3a3 	rbit	r3, r3
 8004708:	61bb      	str	r3, [r7, #24]
  return result;
 800470a:	69bb      	ldr	r3, [r7, #24]
 800470c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800470e:	6a3b      	ldr	r3, [r7, #32]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d101      	bne.n	8004718 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8004714:	2320      	movs	r3, #32
 8004716:	e003      	b.n	8004720 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8004718:	6a3b      	ldr	r3, [r7, #32]
 800471a:	fab3 f383 	clz	r3, r3
 800471e:	b2db      	uxtb	r3, r3
 8004720:	3301      	adds	r3, #1
 8004722:	f003 031f 	and.w	r3, r3, #31
 8004726:	2101      	movs	r1, #1
 8004728:	fa01 f303 	lsl.w	r3, r1, r3
 800472c:	ea42 0103 	orr.w	r1, r2, r3
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004738:	2b00      	cmp	r3, #0
 800473a:	d10d      	bne.n	8004758 <HAL_ADC_ConfigChannel+0x490>
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	0e9b      	lsrs	r3, r3, #26
 8004742:	3301      	adds	r3, #1
 8004744:	f003 021f 	and.w	r2, r3, #31
 8004748:	4613      	mov	r3, r2
 800474a:	005b      	lsls	r3, r3, #1
 800474c:	4413      	add	r3, r2
 800474e:	3b1e      	subs	r3, #30
 8004750:	051b      	lsls	r3, r3, #20
 8004752:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004756:	e01b      	b.n	8004790 <HAL_ADC_ConfigChannel+0x4c8>
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	fa93 f3a3 	rbit	r3, r3
 8004764:	60fb      	str	r3, [r7, #12]
  return result;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d101      	bne.n	8004774 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8004770:	2320      	movs	r3, #32
 8004772:	e003      	b.n	800477c <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	fab3 f383 	clz	r3, r3
 800477a:	b2db      	uxtb	r3, r3
 800477c:	3301      	adds	r3, #1
 800477e:	f003 021f 	and.w	r2, r3, #31
 8004782:	4613      	mov	r3, r2
 8004784:	005b      	lsls	r3, r3, #1
 8004786:	4413      	add	r3, r2
 8004788:	3b1e      	subs	r3, #30
 800478a:	051b      	lsls	r3, r3, #20
 800478c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004790:	430b      	orrs	r3, r1
 8004792:	683a      	ldr	r2, [r7, #0]
 8004794:	6892      	ldr	r2, [r2, #8]
 8004796:	4619      	mov	r1, r3
 8004798:	f7ff f9de 	bl	8003b58 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	f280 80cf 	bge.w	8004944 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a06      	ldr	r2, [pc, #24]	; (80047c4 <HAL_ADC_ConfigChannel+0x4fc>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d004      	beq.n	80047ba <HAL_ADC_ConfigChannel+0x4f2>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a04      	ldr	r2, [pc, #16]	; (80047c8 <HAL_ADC_ConfigChannel+0x500>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d10a      	bne.n	80047d0 <HAL_ADC_ConfigChannel+0x508>
 80047ba:	4b04      	ldr	r3, [pc, #16]	; (80047cc <HAL_ADC_ConfigChannel+0x504>)
 80047bc:	e009      	b.n	80047d2 <HAL_ADC_ConfigChannel+0x50a>
 80047be:	bf00      	nop
 80047c0:	47ff0000 	.word	0x47ff0000
 80047c4:	40022000 	.word	0x40022000
 80047c8:	40022100 	.word	0x40022100
 80047cc:	40022300 	.word	0x40022300
 80047d0:	4b61      	ldr	r3, [pc, #388]	; (8004958 <HAL_ADC_ConfigChannel+0x690>)
 80047d2:	4618      	mov	r0, r3
 80047d4:	f7ff f90c 	bl	80039f0 <LL_ADC_GetCommonPathInternalCh>
 80047d8:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a5f      	ldr	r2, [pc, #380]	; (800495c <HAL_ADC_ConfigChannel+0x694>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d004      	beq.n	80047ee <HAL_ADC_ConfigChannel+0x526>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a5d      	ldr	r2, [pc, #372]	; (8004960 <HAL_ADC_ConfigChannel+0x698>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d10e      	bne.n	800480c <HAL_ADC_ConfigChannel+0x544>
 80047ee:	485b      	ldr	r0, [pc, #364]	; (800495c <HAL_ADC_ConfigChannel+0x694>)
 80047f0:	f7ff fa86 	bl	8003d00 <LL_ADC_IsEnabled>
 80047f4:	4604      	mov	r4, r0
 80047f6:	485a      	ldr	r0, [pc, #360]	; (8004960 <HAL_ADC_ConfigChannel+0x698>)
 80047f8:	f7ff fa82 	bl	8003d00 <LL_ADC_IsEnabled>
 80047fc:	4603      	mov	r3, r0
 80047fe:	4323      	orrs	r3, r4
 8004800:	2b00      	cmp	r3, #0
 8004802:	bf0c      	ite	eq
 8004804:	2301      	moveq	r3, #1
 8004806:	2300      	movne	r3, #0
 8004808:	b2db      	uxtb	r3, r3
 800480a:	e008      	b.n	800481e <HAL_ADC_ConfigChannel+0x556>
 800480c:	4855      	ldr	r0, [pc, #340]	; (8004964 <HAL_ADC_ConfigChannel+0x69c>)
 800480e:	f7ff fa77 	bl	8003d00 <LL_ADC_IsEnabled>
 8004812:	4603      	mov	r3, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	bf0c      	ite	eq
 8004818:	2301      	moveq	r3, #1
 800481a:	2300      	movne	r3, #0
 800481c:	b2db      	uxtb	r3, r3
 800481e:	2b00      	cmp	r3, #0
 8004820:	d07d      	beq.n	800491e <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a50      	ldr	r2, [pc, #320]	; (8004968 <HAL_ADC_ConfigChannel+0x6a0>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d130      	bne.n	800488e <HAL_ADC_ConfigChannel+0x5c6>
 800482c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800482e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d12b      	bne.n	800488e <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a4a      	ldr	r2, [pc, #296]	; (8004964 <HAL_ADC_ConfigChannel+0x69c>)
 800483c:	4293      	cmp	r3, r2
 800483e:	f040 8081 	bne.w	8004944 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a45      	ldr	r2, [pc, #276]	; (800495c <HAL_ADC_ConfigChannel+0x694>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d004      	beq.n	8004856 <HAL_ADC_ConfigChannel+0x58e>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a43      	ldr	r2, [pc, #268]	; (8004960 <HAL_ADC_ConfigChannel+0x698>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d101      	bne.n	800485a <HAL_ADC_ConfigChannel+0x592>
 8004856:	4a45      	ldr	r2, [pc, #276]	; (800496c <HAL_ADC_ConfigChannel+0x6a4>)
 8004858:	e000      	b.n	800485c <HAL_ADC_ConfigChannel+0x594>
 800485a:	4a3f      	ldr	r2, [pc, #252]	; (8004958 <HAL_ADC_ConfigChannel+0x690>)
 800485c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800485e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004862:	4619      	mov	r1, r3
 8004864:	4610      	mov	r0, r2
 8004866:	f7ff f8b0 	bl	80039ca <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800486a:	4b41      	ldr	r3, [pc, #260]	; (8004970 <HAL_ADC_ConfigChannel+0x6a8>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	099b      	lsrs	r3, r3, #6
 8004870:	4a40      	ldr	r2, [pc, #256]	; (8004974 <HAL_ADC_ConfigChannel+0x6ac>)
 8004872:	fba2 2303 	umull	r2, r3, r2, r3
 8004876:	099b      	lsrs	r3, r3, #6
 8004878:	3301      	adds	r3, #1
 800487a:	005b      	lsls	r3, r3, #1
 800487c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800487e:	e002      	b.n	8004886 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	3b01      	subs	r3, #1
 8004884:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d1f9      	bne.n	8004880 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800488c:	e05a      	b.n	8004944 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a39      	ldr	r2, [pc, #228]	; (8004978 <HAL_ADC_ConfigChannel+0x6b0>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d11e      	bne.n	80048d6 <HAL_ADC_ConfigChannel+0x60e>
 8004898:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800489a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d119      	bne.n	80048d6 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a2f      	ldr	r2, [pc, #188]	; (8004964 <HAL_ADC_ConfigChannel+0x69c>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d14b      	bne.n	8004944 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a2a      	ldr	r2, [pc, #168]	; (800495c <HAL_ADC_ConfigChannel+0x694>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d004      	beq.n	80048c0 <HAL_ADC_ConfigChannel+0x5f8>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a29      	ldr	r2, [pc, #164]	; (8004960 <HAL_ADC_ConfigChannel+0x698>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d101      	bne.n	80048c4 <HAL_ADC_ConfigChannel+0x5fc>
 80048c0:	4a2a      	ldr	r2, [pc, #168]	; (800496c <HAL_ADC_ConfigChannel+0x6a4>)
 80048c2:	e000      	b.n	80048c6 <HAL_ADC_ConfigChannel+0x5fe>
 80048c4:	4a24      	ldr	r2, [pc, #144]	; (8004958 <HAL_ADC_ConfigChannel+0x690>)
 80048c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048cc:	4619      	mov	r1, r3
 80048ce:	4610      	mov	r0, r2
 80048d0:	f7ff f87b 	bl	80039ca <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80048d4:	e036      	b.n	8004944 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a28      	ldr	r2, [pc, #160]	; (800497c <HAL_ADC_ConfigChannel+0x6b4>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d131      	bne.n	8004944 <HAL_ADC_ConfigChannel+0x67c>
 80048e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d12c      	bne.n	8004944 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a1d      	ldr	r2, [pc, #116]	; (8004964 <HAL_ADC_ConfigChannel+0x69c>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d127      	bne.n	8004944 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a18      	ldr	r2, [pc, #96]	; (800495c <HAL_ADC_ConfigChannel+0x694>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d004      	beq.n	8004908 <HAL_ADC_ConfigChannel+0x640>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a17      	ldr	r2, [pc, #92]	; (8004960 <HAL_ADC_ConfigChannel+0x698>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d101      	bne.n	800490c <HAL_ADC_ConfigChannel+0x644>
 8004908:	4a18      	ldr	r2, [pc, #96]	; (800496c <HAL_ADC_ConfigChannel+0x6a4>)
 800490a:	e000      	b.n	800490e <HAL_ADC_ConfigChannel+0x646>
 800490c:	4a12      	ldr	r2, [pc, #72]	; (8004958 <HAL_ADC_ConfigChannel+0x690>)
 800490e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004910:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004914:	4619      	mov	r1, r3
 8004916:	4610      	mov	r0, r2
 8004918:	f7ff f857 	bl	80039ca <LL_ADC_SetCommonPathInternalCh>
 800491c:	e012      	b.n	8004944 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004922:	f043 0220 	orr.w	r2, r3, #32
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004930:	e008      	b.n	8004944 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004936:	f043 0220 	orr.w	r2, r3, #32
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800494c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004950:	4618      	mov	r0, r3
 8004952:	3784      	adds	r7, #132	; 0x84
 8004954:	46bd      	mov	sp, r7
 8004956:	bd90      	pop	{r4, r7, pc}
 8004958:	58026300 	.word	0x58026300
 800495c:	40022000 	.word	0x40022000
 8004960:	40022100 	.word	0x40022100
 8004964:	58026000 	.word	0x58026000
 8004968:	cb840000 	.word	0xcb840000
 800496c:	40022300 	.word	0x40022300
 8004970:	24000090 	.word	0x24000090
 8004974:	053e2d63 	.word	0x053e2d63
 8004978:	c7520000 	.word	0xc7520000
 800497c:	cfb80000 	.word	0xcfb80000

08004980 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4618      	mov	r0, r3
 800498e:	f7ff f9b7 	bl	8003d00 <LL_ADC_IsEnabled>
 8004992:	4603      	mov	r3, r0
 8004994:	2b00      	cmp	r3, #0
 8004996:	d16e      	bne.n	8004a76 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	689a      	ldr	r2, [r3, #8]
 800499e:	4b38      	ldr	r3, [pc, #224]	; (8004a80 <ADC_Enable+0x100>)
 80049a0:	4013      	ands	r3, r2
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d00d      	beq.n	80049c2 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049aa:	f043 0210 	orr.w	r2, r3, #16
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049b6:	f043 0201 	orr.w	r2, r3, #1
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e05a      	b.n	8004a78 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4618      	mov	r0, r3
 80049c8:	f7ff f972 	bl	8003cb0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80049cc:	f7fe ffbc 	bl	8003948 <HAL_GetTick>
 80049d0:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a2b      	ldr	r2, [pc, #172]	; (8004a84 <ADC_Enable+0x104>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d004      	beq.n	80049e6 <ADC_Enable+0x66>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a29      	ldr	r2, [pc, #164]	; (8004a88 <ADC_Enable+0x108>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d101      	bne.n	80049ea <ADC_Enable+0x6a>
 80049e6:	4b29      	ldr	r3, [pc, #164]	; (8004a8c <ADC_Enable+0x10c>)
 80049e8:	e000      	b.n	80049ec <ADC_Enable+0x6c>
 80049ea:	4b29      	ldr	r3, [pc, #164]	; (8004a90 <ADC_Enable+0x110>)
 80049ec:	4618      	mov	r0, r3
 80049ee:	f7ff f903 	bl	8003bf8 <LL_ADC_GetMultimode>
 80049f2:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a23      	ldr	r2, [pc, #140]	; (8004a88 <ADC_Enable+0x108>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d002      	beq.n	8004a04 <ADC_Enable+0x84>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	e000      	b.n	8004a06 <ADC_Enable+0x86>
 8004a04:	4b1f      	ldr	r3, [pc, #124]	; (8004a84 <ADC_Enable+0x104>)
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	6812      	ldr	r2, [r2, #0]
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d02c      	beq.n	8004a68 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d130      	bne.n	8004a76 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004a14:	e028      	b.n	8004a68 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f7ff f970 	bl	8003d00 <LL_ADC_IsEnabled>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d104      	bne.n	8004a30 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f7ff f940 	bl	8003cb0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004a30:	f7fe ff8a 	bl	8003948 <HAL_GetTick>
 8004a34:	4602      	mov	r2, r0
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d914      	bls.n	8004a68 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0301 	and.w	r3, r3, #1
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d00d      	beq.n	8004a68 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a50:	f043 0210 	orr.w	r2, r3, #16
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a5c:	f043 0201 	orr.w	r2, r3, #1
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e007      	b.n	8004a78 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0301 	and.w	r3, r3, #1
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d1cf      	bne.n	8004a16 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004a76:	2300      	movs	r3, #0
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3710      	adds	r7, #16
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	8000003f 	.word	0x8000003f
 8004a84:	40022000 	.word	0x40022000
 8004a88:	40022100 	.word	0x40022100
 8004a8c:	40022300 	.word	0x40022300
 8004a90:	58026300 	.word	0x58026300

08004a94 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f7ff f940 	bl	8003d26 <LL_ADC_IsDisableOngoing>
 8004aa6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4618      	mov	r0, r3
 8004aae:	f7ff f927 	bl	8003d00 <LL_ADC_IsEnabled>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d047      	beq.n	8004b48 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d144      	bne.n	8004b48 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	f003 030d 	and.w	r3, r3, #13
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d10c      	bne.n	8004ae6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f7ff f901 	bl	8003cd8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	2203      	movs	r2, #3
 8004adc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004ade:	f7fe ff33 	bl	8003948 <HAL_GetTick>
 8004ae2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004ae4:	e029      	b.n	8004b3a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aea:	f043 0210 	orr.w	r2, r3, #16
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004af6:	f043 0201 	orr.w	r2, r3, #1
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e023      	b.n	8004b4a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004b02:	f7fe ff21 	bl	8003948 <HAL_GetTick>
 8004b06:	4602      	mov	r2, r0
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	1ad3      	subs	r3, r2, r3
 8004b0c:	2b02      	cmp	r3, #2
 8004b0e:	d914      	bls.n	8004b3a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	f003 0301 	and.w	r3, r3, #1
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d00d      	beq.n	8004b3a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b22:	f043 0210 	orr.w	r2, r3, #16
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b2e:	f043 0201 	orr.w	r2, r3, #1
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e007      	b.n	8004b4a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	f003 0301 	and.w	r3, r3, #1
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d1dc      	bne.n	8004b02 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004b48:	2300      	movs	r3, #0
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3710      	adds	r7, #16
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}

08004b52 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004b52:	b580      	push	{r7, lr}
 8004b54:	b084      	sub	sp, #16
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b5e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d14b      	bne.n	8004c04 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b70:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 0308 	and.w	r3, r3, #8
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d021      	beq.n	8004bca <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f7fe ff92 	bl	8003ab4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d032      	beq.n	8004bfc <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d12b      	bne.n	8004bfc <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ba8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d11f      	bne.n	8004bfc <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bc0:	f043 0201 	orr.w	r2, r3, #1
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	655a      	str	r2, [r3, #84]	; 0x54
 8004bc8:	e018      	b.n	8004bfc <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	f003 0303 	and.w	r3, r3, #3
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d111      	bne.n	8004bfc <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bdc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004be8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d105      	bne.n	8004bfc <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bf4:	f043 0201 	orr.w	r2, r3, #1
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004bfc:	68f8      	ldr	r0, [r7, #12]
 8004bfe:	f7ff fb45 	bl	800428c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004c02:	e00e      	b.n	8004c22 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c08:	f003 0310 	and.w	r3, r3, #16
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d003      	beq.n	8004c18 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004c10:	68f8      	ldr	r0, [r7, #12]
 8004c12:	f7ff fb4f 	bl	80042b4 <HAL_ADC_ErrorCallback>
}
 8004c16:	e004      	b.n	8004c22 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	4798      	blx	r3
}
 8004c22:	bf00      	nop
 8004c24:	3710      	adds	r7, #16
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}

08004c2a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004c2a:	b580      	push	{r7, lr}
 8004c2c:	b084      	sub	sp, #16
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c36:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004c38:	68f8      	ldr	r0, [r7, #12]
 8004c3a:	f7ff fb31 	bl	80042a0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004c3e:	bf00      	nop
 8004c40:	3710      	adds	r7, #16
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}

08004c46 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004c46:	b580      	push	{r7, lr}
 8004c48:	b084      	sub	sp, #16
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c52:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c58:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c64:	f043 0204 	orr.w	r2, r3, #4
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004c6c:	68f8      	ldr	r0, [r7, #12]
 8004c6e:	f7ff fb21 	bl	80042b4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004c72:	bf00      	nop
 8004c74:	3710      	adds	r7, #16
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
	...

08004c7c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a7a      	ldr	r2, [pc, #488]	; (8004e74 <ADC_ConfigureBoostMode+0x1f8>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d004      	beq.n	8004c98 <ADC_ConfigureBoostMode+0x1c>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a79      	ldr	r2, [pc, #484]	; (8004e78 <ADC_ConfigureBoostMode+0x1fc>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d109      	bne.n	8004cac <ADC_ConfigureBoostMode+0x30>
 8004c98:	4b78      	ldr	r3, [pc, #480]	; (8004e7c <ADC_ConfigureBoostMode+0x200>)
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	bf14      	ite	ne
 8004ca4:	2301      	movne	r3, #1
 8004ca6:	2300      	moveq	r3, #0
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	e008      	b.n	8004cbe <ADC_ConfigureBoostMode+0x42>
 8004cac:	4b74      	ldr	r3, [pc, #464]	; (8004e80 <ADC_ConfigureBoostMode+0x204>)
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	bf14      	ite	ne
 8004cb8:	2301      	movne	r3, #1
 8004cba:	2300      	moveq	r3, #0
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d01c      	beq.n	8004cfc <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004cc2:	f005 fd57 	bl	800a774 <HAL_RCC_GetHCLKFreq>
 8004cc6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004cd0:	d010      	beq.n	8004cf4 <ADC_ConfigureBoostMode+0x78>
 8004cd2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004cd6:	d873      	bhi.n	8004dc0 <ADC_ConfigureBoostMode+0x144>
 8004cd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cdc:	d002      	beq.n	8004ce4 <ADC_ConfigureBoostMode+0x68>
 8004cde:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ce2:	d16d      	bne.n	8004dc0 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	0c1b      	lsrs	r3, r3, #16
 8004cea:	68fa      	ldr	r2, [r7, #12]
 8004cec:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cf0:	60fb      	str	r3, [r7, #12]
        break;
 8004cf2:	e068      	b.n	8004dc6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	089b      	lsrs	r3, r3, #2
 8004cf8:	60fb      	str	r3, [r7, #12]
        break;
 8004cfa:	e064      	b.n	8004dc6 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004cfc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004d00:	f04f 0100 	mov.w	r1, #0
 8004d04:	f006 ffde 	bl	800bcc4 <HAL_RCCEx_GetPeriphCLKFreq>
 8004d08:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004d12:	d051      	beq.n	8004db8 <ADC_ConfigureBoostMode+0x13c>
 8004d14:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004d18:	d854      	bhi.n	8004dc4 <ADC_ConfigureBoostMode+0x148>
 8004d1a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004d1e:	d047      	beq.n	8004db0 <ADC_ConfigureBoostMode+0x134>
 8004d20:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004d24:	d84e      	bhi.n	8004dc4 <ADC_ConfigureBoostMode+0x148>
 8004d26:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004d2a:	d03d      	beq.n	8004da8 <ADC_ConfigureBoostMode+0x12c>
 8004d2c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004d30:	d848      	bhi.n	8004dc4 <ADC_ConfigureBoostMode+0x148>
 8004d32:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d36:	d033      	beq.n	8004da0 <ADC_ConfigureBoostMode+0x124>
 8004d38:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d3c:	d842      	bhi.n	8004dc4 <ADC_ConfigureBoostMode+0x148>
 8004d3e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004d42:	d029      	beq.n	8004d98 <ADC_ConfigureBoostMode+0x11c>
 8004d44:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004d48:	d83c      	bhi.n	8004dc4 <ADC_ConfigureBoostMode+0x148>
 8004d4a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004d4e:	d01a      	beq.n	8004d86 <ADC_ConfigureBoostMode+0x10a>
 8004d50:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004d54:	d836      	bhi.n	8004dc4 <ADC_ConfigureBoostMode+0x148>
 8004d56:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004d5a:	d014      	beq.n	8004d86 <ADC_ConfigureBoostMode+0x10a>
 8004d5c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004d60:	d830      	bhi.n	8004dc4 <ADC_ConfigureBoostMode+0x148>
 8004d62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d66:	d00e      	beq.n	8004d86 <ADC_ConfigureBoostMode+0x10a>
 8004d68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d6c:	d82a      	bhi.n	8004dc4 <ADC_ConfigureBoostMode+0x148>
 8004d6e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004d72:	d008      	beq.n	8004d86 <ADC_ConfigureBoostMode+0x10a>
 8004d74:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004d78:	d824      	bhi.n	8004dc4 <ADC_ConfigureBoostMode+0x148>
 8004d7a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d7e:	d002      	beq.n	8004d86 <ADC_ConfigureBoostMode+0x10a>
 8004d80:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004d84:	d11e      	bne.n	8004dc4 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	0c9b      	lsrs	r3, r3, #18
 8004d8c:	005b      	lsls	r3, r3, #1
 8004d8e:	68fa      	ldr	r2, [r7, #12]
 8004d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d94:	60fb      	str	r3, [r7, #12]
        break;
 8004d96:	e016      	b.n	8004dc6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	091b      	lsrs	r3, r3, #4
 8004d9c:	60fb      	str	r3, [r7, #12]
        break;
 8004d9e:	e012      	b.n	8004dc6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	095b      	lsrs	r3, r3, #5
 8004da4:	60fb      	str	r3, [r7, #12]
        break;
 8004da6:	e00e      	b.n	8004dc6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	099b      	lsrs	r3, r3, #6
 8004dac:	60fb      	str	r3, [r7, #12]
        break;
 8004dae:	e00a      	b.n	8004dc6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	09db      	lsrs	r3, r3, #7
 8004db4:	60fb      	str	r3, [r7, #12]
        break;
 8004db6:	e006      	b.n	8004dc6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	0a1b      	lsrs	r3, r3, #8
 8004dbc:	60fb      	str	r3, [r7, #12]
        break;
 8004dbe:	e002      	b.n	8004dc6 <ADC_ConfigureBoostMode+0x14a>
        break;
 8004dc0:	bf00      	nop
 8004dc2:	e000      	b.n	8004dc6 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004dc4:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8004dc6:	f7fe fdcb 	bl	8003960 <HAL_GetREVID>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	f241 0203 	movw	r2, #4099	; 0x1003
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d815      	bhi.n	8004e00 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	4a2b      	ldr	r2, [pc, #172]	; (8004e84 <ADC_ConfigureBoostMode+0x208>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d908      	bls.n	8004dee <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	689a      	ldr	r2, [r3, #8]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004dea:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004dec:	e03e      	b.n	8004e6c <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	689a      	ldr	r2, [r3, #8]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004dfc:	609a      	str	r2, [r3, #8]
}
 8004dfe:	e035      	b.n	8004e6c <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	085b      	lsrs	r3, r3, #1
 8004e04:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	4a1f      	ldr	r2, [pc, #124]	; (8004e88 <ADC_ConfigureBoostMode+0x20c>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d808      	bhi.n	8004e20 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	689a      	ldr	r2, [r3, #8]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004e1c:	609a      	str	r2, [r3, #8]
}
 8004e1e:	e025      	b.n	8004e6c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	4a1a      	ldr	r2, [pc, #104]	; (8004e8c <ADC_ConfigureBoostMode+0x210>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d80a      	bhi.n	8004e3e <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e3a:	609a      	str	r2, [r3, #8]
}
 8004e3c:	e016      	b.n	8004e6c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	4a13      	ldr	r2, [pc, #76]	; (8004e90 <ADC_ConfigureBoostMode+0x214>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d80a      	bhi.n	8004e5c <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e58:	609a      	str	r2, [r3, #8]
}
 8004e5a:	e007      	b.n	8004e6c <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	689a      	ldr	r2, [r3, #8]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004e6a:	609a      	str	r2, [r3, #8]
}
 8004e6c:	bf00      	nop
 8004e6e:	3710      	adds	r7, #16
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	40022000 	.word	0x40022000
 8004e78:	40022100 	.word	0x40022100
 8004e7c:	40022300 	.word	0x40022300
 8004e80:	58026300 	.word	0x58026300
 8004e84:	01312d00 	.word	0x01312d00
 8004e88:	005f5e10 	.word	0x005f5e10
 8004e8c:	00bebc20 	.word	0x00bebc20
 8004e90:	017d7840 	.word	0x017d7840

08004e94 <LL_ADC_IsEnabled>:
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	f003 0301 	and.w	r3, r3, #1
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d101      	bne.n	8004eac <LL_ADC_IsEnabled+0x18>
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e000      	b.n	8004eae <LL_ADC_IsEnabled+0x1a>
 8004eac:	2300      	movs	r3, #0
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	370c      	adds	r7, #12
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr
	...

08004ebc <LL_ADC_StartCalibration>:
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b085      	sub	sp, #20
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	60b9      	str	r1, [r7, #8]
 8004ec6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	689a      	ldr	r2, [r3, #8]
 8004ecc:	4b09      	ldr	r3, [pc, #36]	; (8004ef4 <LL_ADC_StartCalibration+0x38>)
 8004ece:	4013      	ands	r3, r2
 8004ed0:	68ba      	ldr	r2, [r7, #8]
 8004ed2:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004edc:	430a      	orrs	r2, r1
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	609a      	str	r2, [r3, #8]
}
 8004ee8:	bf00      	nop
 8004eea:	3714      	adds	r7, #20
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr
 8004ef4:	3ffeffc0 	.word	0x3ffeffc0

08004ef8 <LL_ADC_IsCalibrationOnGoing>:
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b083      	sub	sp, #12
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f0c:	d101      	bne.n	8004f12 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e000      	b.n	8004f14 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004f12:	2300      	movs	r3, #0
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	370c      	adds	r7, #12
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr

08004f20 <LL_ADC_REG_IsConversionOngoing>:
{
 8004f20:	b480      	push	{r7}
 8004f22:	b083      	sub	sp, #12
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	f003 0304 	and.w	r3, r3, #4
 8004f30:	2b04      	cmp	r3, #4
 8004f32:	d101      	bne.n	8004f38 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004f34:	2301      	movs	r3, #1
 8004f36:	e000      	b.n	8004f3a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	370c      	adds	r7, #12
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr
	...

08004f48 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b086      	sub	sp, #24
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004f54:	2300      	movs	r3, #0
 8004f56:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d101      	bne.n	8004f66 <HAL_ADCEx_Calibration_Start+0x1e>
 8004f62:	2302      	movs	r3, #2
 8004f64:	e04c      	b.n	8005000 <HAL_ADCEx_Calibration_Start+0xb8>
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004f6e:	68f8      	ldr	r0, [r7, #12]
 8004f70:	f7ff fd90 	bl	8004a94 <ADC_Disable>
 8004f74:	4603      	mov	r3, r0
 8004f76:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004f78:	7dfb      	ldrb	r3, [r7, #23]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d135      	bne.n	8004fea <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f82:	4b21      	ldr	r3, [pc, #132]	; (8005008 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004f84:	4013      	ands	r3, r2
 8004f86:	f043 0202 	orr.w	r2, r3, #2
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	68b9      	ldr	r1, [r7, #8]
 8004f96:	4618      	mov	r0, r3
 8004f98:	f7ff ff90 	bl	8004ebc <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004f9c:	e014      	b.n	8004fc8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	3301      	adds	r3, #1
 8004fa2:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	4a19      	ldr	r2, [pc, #100]	; (800500c <HAL_ADCEx_Calibration_Start+0xc4>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d30d      	bcc.n	8004fc8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fb0:	f023 0312 	bic.w	r3, r3, #18
 8004fb4:	f043 0210 	orr.w	r2, r3, #16
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e01b      	b.n	8005000 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f7ff ff93 	bl	8004ef8 <LL_ADC_IsCalibrationOnGoing>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d1e2      	bne.n	8004f9e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fdc:	f023 0303 	bic.w	r3, r3, #3
 8004fe0:	f043 0201 	orr.w	r2, r3, #1
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	655a      	str	r2, [r3, #84]	; 0x54
 8004fe8:	e005      	b.n	8004ff6 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fee:	f043 0210 	orr.w	r2, r3, #16
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004ffe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005000:	4618      	mov	r0, r3
 8005002:	3718      	adds	r7, #24
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}
 8005008:	ffffeefd 	.word	0xffffeefd
 800500c:	25c3f800 	.word	0x25c3f800

08005010 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005010:	b590      	push	{r4, r7, lr}
 8005012:	b09f      	sub	sp, #124	; 0x7c
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800501a:	2300      	movs	r3, #0
 800501c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005026:	2b01      	cmp	r3, #1
 8005028:	d101      	bne.n	800502e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800502a:	2302      	movs	r3, #2
 800502c:	e0be      	b.n	80051ac <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2201      	movs	r2, #1
 8005032:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8005036:	2300      	movs	r3, #0
 8005038:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800503a:	2300      	movs	r3, #0
 800503c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a5c      	ldr	r2, [pc, #368]	; (80051b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d102      	bne.n	800504e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005048:	4b5b      	ldr	r3, [pc, #364]	; (80051b8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800504a:	60bb      	str	r3, [r7, #8]
 800504c:	e001      	b.n	8005052 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800504e:	2300      	movs	r3, #0
 8005050:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d10b      	bne.n	8005070 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800505c:	f043 0220 	orr.w	r2, r3, #32
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	e09d      	b.n	80051ac <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	4618      	mov	r0, r3
 8005074:	f7ff ff54 	bl	8004f20 <LL_ADC_REG_IsConversionOngoing>
 8005078:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4618      	mov	r0, r3
 8005080:	f7ff ff4e 	bl	8004f20 <LL_ADC_REG_IsConversionOngoing>
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d17f      	bne.n	800518a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800508a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800508c:	2b00      	cmp	r3, #0
 800508e:	d17c      	bne.n	800518a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a47      	ldr	r2, [pc, #284]	; (80051b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d004      	beq.n	80050a4 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a46      	ldr	r2, [pc, #280]	; (80051b8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d101      	bne.n	80050a8 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80050a4:	4b45      	ldr	r3, [pc, #276]	; (80051bc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80050a6:	e000      	b.n	80050aa <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80050a8:	4b45      	ldr	r3, [pc, #276]	; (80051c0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80050aa:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d039      	beq.n	8005128 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80050b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	431a      	orrs	r2, r3
 80050c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050c4:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a3a      	ldr	r2, [pc, #232]	; (80051b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d004      	beq.n	80050da <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a38      	ldr	r2, [pc, #224]	; (80051b8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d10e      	bne.n	80050f8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80050da:	4836      	ldr	r0, [pc, #216]	; (80051b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80050dc:	f7ff feda 	bl	8004e94 <LL_ADC_IsEnabled>
 80050e0:	4604      	mov	r4, r0
 80050e2:	4835      	ldr	r0, [pc, #212]	; (80051b8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80050e4:	f7ff fed6 	bl	8004e94 <LL_ADC_IsEnabled>
 80050e8:	4603      	mov	r3, r0
 80050ea:	4323      	orrs	r3, r4
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	bf0c      	ite	eq
 80050f0:	2301      	moveq	r3, #1
 80050f2:	2300      	movne	r3, #0
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	e008      	b.n	800510a <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80050f8:	4832      	ldr	r0, [pc, #200]	; (80051c4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80050fa:	f7ff fecb 	bl	8004e94 <LL_ADC_IsEnabled>
 80050fe:	4603      	mov	r3, r0
 8005100:	2b00      	cmp	r3, #0
 8005102:	bf0c      	ite	eq
 8005104:	2301      	moveq	r3, #1
 8005106:	2300      	movne	r3, #0
 8005108:	b2db      	uxtb	r3, r3
 800510a:	2b00      	cmp	r3, #0
 800510c:	d047      	beq.n	800519e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800510e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005110:	689a      	ldr	r2, [r3, #8]
 8005112:	4b2d      	ldr	r3, [pc, #180]	; (80051c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005114:	4013      	ands	r3, r2
 8005116:	683a      	ldr	r2, [r7, #0]
 8005118:	6811      	ldr	r1, [r2, #0]
 800511a:	683a      	ldr	r2, [r7, #0]
 800511c:	6892      	ldr	r2, [r2, #8]
 800511e:	430a      	orrs	r2, r1
 8005120:	431a      	orrs	r2, r3
 8005122:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005124:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005126:	e03a      	b.n	800519e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8005128:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005130:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005132:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a1e      	ldr	r2, [pc, #120]	; (80051b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d004      	beq.n	8005148 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a1d      	ldr	r2, [pc, #116]	; (80051b8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d10e      	bne.n	8005166 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8005148:	481a      	ldr	r0, [pc, #104]	; (80051b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800514a:	f7ff fea3 	bl	8004e94 <LL_ADC_IsEnabled>
 800514e:	4604      	mov	r4, r0
 8005150:	4819      	ldr	r0, [pc, #100]	; (80051b8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005152:	f7ff fe9f 	bl	8004e94 <LL_ADC_IsEnabled>
 8005156:	4603      	mov	r3, r0
 8005158:	4323      	orrs	r3, r4
 800515a:	2b00      	cmp	r3, #0
 800515c:	bf0c      	ite	eq
 800515e:	2301      	moveq	r3, #1
 8005160:	2300      	movne	r3, #0
 8005162:	b2db      	uxtb	r3, r3
 8005164:	e008      	b.n	8005178 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8005166:	4817      	ldr	r0, [pc, #92]	; (80051c4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005168:	f7ff fe94 	bl	8004e94 <LL_ADC_IsEnabled>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	bf0c      	ite	eq
 8005172:	2301      	moveq	r3, #1
 8005174:	2300      	movne	r3, #0
 8005176:	b2db      	uxtb	r3, r3
 8005178:	2b00      	cmp	r3, #0
 800517a:	d010      	beq.n	800519e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800517c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800517e:	689a      	ldr	r2, [r3, #8]
 8005180:	4b11      	ldr	r3, [pc, #68]	; (80051c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005182:	4013      	ands	r3, r2
 8005184:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005186:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005188:	e009      	b.n	800519e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800518e:	f043 0220 	orr.w	r2, r3, #32
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800519c:	e000      	b.n	80051a0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800519e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80051a8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	377c      	adds	r7, #124	; 0x7c
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd90      	pop	{r4, r7, pc}
 80051b4:	40022000 	.word	0x40022000
 80051b8:	40022100 	.word	0x40022100
 80051bc:	40022300 	.word	0x40022300
 80051c0:	58026300 	.word	0x58026300
 80051c4:	58026000 	.word	0x58026000
 80051c8:	fffff0e0 	.word	0xfffff0e0

080051cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b085      	sub	sp, #20
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f003 0307 	and.w	r3, r3, #7
 80051da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80051dc:	4b0b      	ldr	r3, [pc, #44]	; (800520c <__NVIC_SetPriorityGrouping+0x40>)
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80051e2:	68ba      	ldr	r2, [r7, #8]
 80051e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80051e8:	4013      	ands	r3, r2
 80051ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80051f4:	4b06      	ldr	r3, [pc, #24]	; (8005210 <__NVIC_SetPriorityGrouping+0x44>)
 80051f6:	4313      	orrs	r3, r2
 80051f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80051fa:	4a04      	ldr	r2, [pc, #16]	; (800520c <__NVIC_SetPriorityGrouping+0x40>)
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	60d3      	str	r3, [r2, #12]
}
 8005200:	bf00      	nop
 8005202:	3714      	adds	r7, #20
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr
 800520c:	e000ed00 	.word	0xe000ed00
 8005210:	05fa0000 	.word	0x05fa0000

08005214 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005214:	b480      	push	{r7}
 8005216:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005218:	4b04      	ldr	r3, [pc, #16]	; (800522c <__NVIC_GetPriorityGrouping+0x18>)
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	0a1b      	lsrs	r3, r3, #8
 800521e:	f003 0307 	and.w	r3, r3, #7
}
 8005222:	4618      	mov	r0, r3
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr
 800522c:	e000ed00 	.word	0xe000ed00

08005230 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	4603      	mov	r3, r0
 8005238:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800523a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800523e:	2b00      	cmp	r3, #0
 8005240:	db0b      	blt.n	800525a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005242:	88fb      	ldrh	r3, [r7, #6]
 8005244:	f003 021f 	and.w	r2, r3, #31
 8005248:	4907      	ldr	r1, [pc, #28]	; (8005268 <__NVIC_EnableIRQ+0x38>)
 800524a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800524e:	095b      	lsrs	r3, r3, #5
 8005250:	2001      	movs	r0, #1
 8005252:	fa00 f202 	lsl.w	r2, r0, r2
 8005256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800525a:	bf00      	nop
 800525c:	370c      	adds	r7, #12
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr
 8005266:	bf00      	nop
 8005268:	e000e100 	.word	0xe000e100

0800526c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
 8005272:	4603      	mov	r3, r0
 8005274:	6039      	str	r1, [r7, #0]
 8005276:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005278:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800527c:	2b00      	cmp	r3, #0
 800527e:	db0a      	blt.n	8005296 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	b2da      	uxtb	r2, r3
 8005284:	490c      	ldr	r1, [pc, #48]	; (80052b8 <__NVIC_SetPriority+0x4c>)
 8005286:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800528a:	0112      	lsls	r2, r2, #4
 800528c:	b2d2      	uxtb	r2, r2
 800528e:	440b      	add	r3, r1
 8005290:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005294:	e00a      	b.n	80052ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	b2da      	uxtb	r2, r3
 800529a:	4908      	ldr	r1, [pc, #32]	; (80052bc <__NVIC_SetPriority+0x50>)
 800529c:	88fb      	ldrh	r3, [r7, #6]
 800529e:	f003 030f 	and.w	r3, r3, #15
 80052a2:	3b04      	subs	r3, #4
 80052a4:	0112      	lsls	r2, r2, #4
 80052a6:	b2d2      	uxtb	r2, r2
 80052a8:	440b      	add	r3, r1
 80052aa:	761a      	strb	r2, [r3, #24]
}
 80052ac:	bf00      	nop
 80052ae:	370c      	adds	r7, #12
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr
 80052b8:	e000e100 	.word	0xe000e100
 80052bc:	e000ed00 	.word	0xe000ed00

080052c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b089      	sub	sp, #36	; 0x24
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	60b9      	str	r1, [r7, #8]
 80052ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f003 0307 	and.w	r3, r3, #7
 80052d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	f1c3 0307 	rsb	r3, r3, #7
 80052da:	2b04      	cmp	r3, #4
 80052dc:	bf28      	it	cs
 80052de:	2304      	movcs	r3, #4
 80052e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	3304      	adds	r3, #4
 80052e6:	2b06      	cmp	r3, #6
 80052e8:	d902      	bls.n	80052f0 <NVIC_EncodePriority+0x30>
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	3b03      	subs	r3, #3
 80052ee:	e000      	b.n	80052f2 <NVIC_EncodePriority+0x32>
 80052f0:	2300      	movs	r3, #0
 80052f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80052f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80052f8:	69bb      	ldr	r3, [r7, #24]
 80052fa:	fa02 f303 	lsl.w	r3, r2, r3
 80052fe:	43da      	mvns	r2, r3
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	401a      	ands	r2, r3
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005308:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	fa01 f303 	lsl.w	r3, r1, r3
 8005312:	43d9      	mvns	r1, r3
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005318:	4313      	orrs	r3, r2
         );
}
 800531a:	4618      	mov	r0, r3
 800531c:	3724      	adds	r7, #36	; 0x24
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr

08005326 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005326:	b580      	push	{r7, lr}
 8005328:	b082      	sub	sp, #8
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f7ff ff4c 	bl	80051cc <__NVIC_SetPriorityGrouping>
}
 8005334:	bf00      	nop
 8005336:	3708      	adds	r7, #8
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}

0800533c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b086      	sub	sp, #24
 8005340:	af00      	add	r7, sp, #0
 8005342:	4603      	mov	r3, r0
 8005344:	60b9      	str	r1, [r7, #8]
 8005346:	607a      	str	r2, [r7, #4]
 8005348:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800534a:	f7ff ff63 	bl	8005214 <__NVIC_GetPriorityGrouping>
 800534e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	68b9      	ldr	r1, [r7, #8]
 8005354:	6978      	ldr	r0, [r7, #20]
 8005356:	f7ff ffb3 	bl	80052c0 <NVIC_EncodePriority>
 800535a:	4602      	mov	r2, r0
 800535c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005360:	4611      	mov	r1, r2
 8005362:	4618      	mov	r0, r3
 8005364:	f7ff ff82 	bl	800526c <__NVIC_SetPriority>
}
 8005368:	bf00      	nop
 800536a:	3718      	adds	r7, #24
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}

08005370 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b082      	sub	sp, #8
 8005374:	af00      	add	r7, sp, #0
 8005376:	4603      	mov	r3, r0
 8005378:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800537a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800537e:	4618      	mov	r0, r3
 8005380:	f7ff ff56 	bl	8005230 <__NVIC_EnableIRQ>
}
 8005384:	bf00      	nop
 8005386:	3708      	adds	r7, #8
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b082      	sub	sp, #8
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d101      	bne.n	800539e <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	e014      	b.n	80053c8 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	791b      	ldrb	r3, [r3, #4]
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d105      	bne.n	80053b4 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f7fd fc76 	bl	8002ca0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2202      	movs	r2, #2
 80053b8:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80053c6:	2300      	movs	r3, #0
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3708      	adds	r7, #8
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b083      	sub	sp, #12
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d101      	bne.n	80053e4 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	e046      	b.n	8005472 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	795b      	ldrb	r3, [r3, #5]
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d101      	bne.n	80053f0 <HAL_DAC_Start+0x20>
 80053ec:	2302      	movs	r3, #2
 80053ee:	e040      	b.n	8005472 <HAL_DAC_Start+0xa2>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2201      	movs	r2, #1
 80053f4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2202      	movs	r2, #2
 80053fa:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	6819      	ldr	r1, [r3, #0]
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	f003 0310 	and.w	r3, r3, #16
 8005408:	2201      	movs	r2, #1
 800540a:	409a      	lsls	r2, r3
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	430a      	orrs	r2, r1
 8005412:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d10f      	bne.n	800543a <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8005424:	2b02      	cmp	r3, #2
 8005426:	d11d      	bne.n	8005464 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	685a      	ldr	r2, [r3, #4]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f042 0201 	orr.w	r2, r2, #1
 8005436:	605a      	str	r2, [r3, #4]
 8005438:	e014      	b.n	8005464 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	f003 0310 	and.w	r3, r3, #16
 800544a:	2102      	movs	r1, #2
 800544c:	fa01 f303 	lsl.w	r3, r1, r3
 8005450:	429a      	cmp	r2, r3
 8005452:	d107      	bne.n	8005464 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	685a      	ldr	r2, [r3, #4]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f042 0202 	orr.w	r2, r2, #2
 8005462:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005470:	2300      	movs	r3, #0
}
 8005472:	4618      	mov	r0, r3
 8005474:	370c      	adds	r7, #12
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr
	...

08005480 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b086      	sub	sp, #24
 8005484:	af00      	add	r7, sp, #0
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	60b9      	str	r1, [r7, #8]
 800548a:	607a      	str	r2, [r7, #4]
 800548c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d101      	bne.n	8005498 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	e0a2      	b.n	80055de <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	795b      	ldrb	r3, [r3, #5]
 800549c:	2b01      	cmp	r3, #1
 800549e:	d101      	bne.n	80054a4 <HAL_DAC_Start_DMA+0x24>
 80054a0:	2302      	movs	r3, #2
 80054a2:	e09c      	b.n	80055de <HAL_DAC_Start_DMA+0x15e>
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2201      	movs	r2, #1
 80054a8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2202      	movs	r2, #2
 80054ae:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d129      	bne.n	800550a <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	4a4b      	ldr	r2, [pc, #300]	; (80055e8 <HAL_DAC_Start_DMA+0x168>)
 80054bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	4a4a      	ldr	r2, [pc, #296]	; (80055ec <HAL_DAC_Start_DMA+0x16c>)
 80054c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	4a49      	ldr	r2, [pc, #292]	; (80055f0 <HAL_DAC_Start_DMA+0x170>)
 80054cc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80054dc:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80054de:	6a3b      	ldr	r3, [r7, #32]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d003      	beq.n	80054ec <HAL_DAC_Start_DMA+0x6c>
 80054e4:	6a3b      	ldr	r3, [r7, #32]
 80054e6:	2b04      	cmp	r3, #4
 80054e8:	d005      	beq.n	80054f6 <HAL_DAC_Start_DMA+0x76>
 80054ea:	e009      	b.n	8005500 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	3308      	adds	r3, #8
 80054f2:	613b      	str	r3, [r7, #16]
        break;
 80054f4:	e033      	b.n	800555e <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	330c      	adds	r3, #12
 80054fc:	613b      	str	r3, [r7, #16]
        break;
 80054fe:	e02e      	b.n	800555e <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	3310      	adds	r3, #16
 8005506:	613b      	str	r3, [r7, #16]
        break;
 8005508:	e029      	b.n	800555e <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	68db      	ldr	r3, [r3, #12]
 800550e:	4a39      	ldr	r2, [pc, #228]	; (80055f4 <HAL_DAC_Start_DMA+0x174>)
 8005510:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	4a38      	ldr	r2, [pc, #224]	; (80055f8 <HAL_DAC_Start_DMA+0x178>)
 8005518:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	68db      	ldr	r3, [r3, #12]
 800551e:	4a37      	ldr	r2, [pc, #220]	; (80055fc <HAL_DAC_Start_DMA+0x17c>)
 8005520:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005530:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8005532:	6a3b      	ldr	r3, [r7, #32]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d003      	beq.n	8005540 <HAL_DAC_Start_DMA+0xc0>
 8005538:	6a3b      	ldr	r3, [r7, #32]
 800553a:	2b04      	cmp	r3, #4
 800553c:	d005      	beq.n	800554a <HAL_DAC_Start_DMA+0xca>
 800553e:	e009      	b.n	8005554 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	3314      	adds	r3, #20
 8005546:	613b      	str	r3, [r7, #16]
        break;
 8005548:	e009      	b.n	800555e <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	3318      	adds	r3, #24
 8005550:	613b      	str	r3, [r7, #16]
        break;
 8005552:	e004      	b.n	800555e <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	331c      	adds	r3, #28
 800555a:	613b      	str	r3, [r7, #16]
        break;
 800555c:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d111      	bne.n	8005588 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005572:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6898      	ldr	r0, [r3, #8]
 8005578:	6879      	ldr	r1, [r7, #4]
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	693a      	ldr	r2, [r7, #16]
 800557e:	f000 fe67 	bl	8006250 <HAL_DMA_Start_IT>
 8005582:	4603      	mov	r3, r0
 8005584:	75fb      	strb	r3, [r7, #23]
 8005586:	e010      	b.n	80055aa <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8005596:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	68d8      	ldr	r0, [r3, #12]
 800559c:	6879      	ldr	r1, [r7, #4]
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	693a      	ldr	r2, [r7, #16]
 80055a2:	f000 fe55 	bl	8006250 <HAL_DMA_Start_IT>
 80055a6:	4603      	mov	r3, r0
 80055a8:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2200      	movs	r2, #0
 80055ae:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80055b0:	7dfb      	ldrb	r3, [r7, #23]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d10c      	bne.n	80055d0 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	6819      	ldr	r1, [r3, #0]
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	f003 0310 	and.w	r3, r3, #16
 80055c2:	2201      	movs	r2, #1
 80055c4:	409a      	lsls	r2, r3
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	430a      	orrs	r2, r1
 80055cc:	601a      	str	r2, [r3, #0]
 80055ce:	e005      	b.n	80055dc <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	691b      	ldr	r3, [r3, #16]
 80055d4:	f043 0204 	orr.w	r2, r3, #4
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80055dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3718      	adds	r7, #24
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
 80055e6:	bf00      	nop
 80055e8:	08005a71 	.word	0x08005a71
 80055ec:	08005a93 	.word	0x08005a93
 80055f0:	08005aaf 	.word	0x08005aaf
 80055f4:	08005b2d 	.word	0x08005b2d
 80055f8:	08005b4f 	.word	0x08005b4f
 80055fc:	08005b6b 	.word	0x08005b6b

08005600 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b082      	sub	sp, #8
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d101      	bne.n	8005614 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	e03e      	b.n	8005692 <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	6819      	ldr	r1, [r3, #0]
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	f003 0310 	and.w	r3, r3, #16
 8005620:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005624:	fa02 f303 	lsl.w	r3, r2, r3
 8005628:	43da      	mvns	r2, r3
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	400a      	ands	r2, r1
 8005630:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	6819      	ldr	r1, [r3, #0]
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	f003 0310 	and.w	r3, r3, #16
 800563e:	2201      	movs	r2, #1
 8005640:	fa02 f303 	lsl.w	r3, r2, r3
 8005644:	43da      	mvns	r2, r3
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	400a      	ands	r2, r1
 800564c:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d10d      	bne.n	8005670 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	4618      	mov	r0, r3
 800565a:	f001 f863 	bl	8006724 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800566c:	601a      	str	r2, [r3, #0]
 800566e:	e00c      	b.n	800568a <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	4618      	mov	r0, r3
 8005676:	f001 f855 	bl	8006724 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8005688:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2201      	movs	r2, #1
 800568e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005690:	2300      	movs	r3, #0
}
 8005692:	4618      	mov	r0, r3
 8005694:	3708      	adds	r7, #8
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}

0800569a <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 800569a:	b580      	push	{r7, lr}
 800569c:	b084      	sub	sp, #16
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056b0:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d01d      	beq.n	80056f8 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d018      	beq.n	80056f8 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2204      	movs	r2, #4
 80056ca:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	691b      	ldr	r3, [r3, #16]
 80056d0:	f043 0201 	orr.w	r2, r3, #1
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80056e0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80056f0:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 f86f 	bl	80057d6 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d01d      	beq.n	800573e <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005708:	2b00      	cmp	r3, #0
 800570a:	d018      	beq.n	800573e <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2204      	movs	r2, #4
 8005710:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	f043 0202 	orr.w	r2, r3, #2
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005726:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005736:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f000 f9ed 	bl	8005b18 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 800573e:	bf00      	nop
 8005740:	3710      	adds	r7, #16
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}

08005746 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8005746:	b480      	push	{r7}
 8005748:	b087      	sub	sp, #28
 800574a:	af00      	add	r7, sp, #0
 800574c:	60f8      	str	r0, [r7, #12]
 800574e:	60b9      	str	r1, [r7, #8]
 8005750:	607a      	str	r2, [r7, #4]
 8005752:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8005754:	2300      	movs	r3, #0
 8005756:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d101      	bne.n	8005762 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e015      	b.n	800578e <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d105      	bne.n	800577a <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800576e:	697a      	ldr	r2, [r7, #20]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	4413      	add	r3, r2
 8005774:	3308      	adds	r3, #8
 8005776:	617b      	str	r3, [r7, #20]
 8005778:	e004      	b.n	8005784 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800577a:	697a      	ldr	r2, [r7, #20]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	4413      	add	r3, r2
 8005780:	3314      	adds	r3, #20
 8005782:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	461a      	mov	r2, r3
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800578c:	2300      	movs	r3, #0
}
 800578e:	4618      	mov	r0, r3
 8005790:	371c      	adds	r7, #28
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr

0800579a <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800579a:	b480      	push	{r7}
 800579c:	b083      	sub	sp, #12
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80057a2:	bf00      	nop
 80057a4:	370c      	adds	r7, #12
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr

080057ae <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80057ae:	b480      	push	{r7}
 80057b0:	b083      	sub	sp, #12
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80057b6:	bf00      	nop
 80057b8:	370c      	adds	r7, #12
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr

080057c2 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80057c2:	b480      	push	{r7}
 80057c4:	b083      	sub	sp, #12
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80057ca:	bf00      	nop
 80057cc:	370c      	adds	r7, #12
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr

080057d6 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80057d6:	b480      	push	{r7}
 80057d8:	b083      	sub	sp, #12
 80057da:	af00      	add	r7, sp, #0
 80057dc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80057de:	bf00      	nop
 80057e0:	370c      	adds	r7, #12
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr
	...

080057ec <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b08a      	sub	sp, #40	; 0x28
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057f8:	2300      	movs	r3, #0
 80057fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d002      	beq.n	800580a <HAL_DAC_ConfigChannel+0x1e>
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d101      	bne.n	800580e <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	e12a      	b.n	8005a64 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	795b      	ldrb	r3, [r3, #5]
 8005812:	2b01      	cmp	r3, #1
 8005814:	d101      	bne.n	800581a <HAL_DAC_ConfigChannel+0x2e>
 8005816:	2302      	movs	r3, #2
 8005818:	e124      	b.n	8005a64 <HAL_DAC_ConfigChannel+0x278>
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2201      	movs	r2, #1
 800581e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2202      	movs	r2, #2
 8005824:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	2b04      	cmp	r3, #4
 800582c:	d17a      	bne.n	8005924 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800582e:	f7fe f88b 	bl	8003948 <HAL_GetTick>
 8005832:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d13d      	bne.n	80058b6 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800583a:	e018      	b.n	800586e <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800583c:	f7fe f884 	bl	8003948 <HAL_GetTick>
 8005840:	4602      	mov	r2, r0
 8005842:	69fb      	ldr	r3, [r7, #28]
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	2b01      	cmp	r3, #1
 8005848:	d911      	bls.n	800586e <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005850:	4b86      	ldr	r3, [pc, #536]	; (8005a6c <HAL_DAC_ConfigChannel+0x280>)
 8005852:	4013      	ands	r3, r2
 8005854:	2b00      	cmp	r3, #0
 8005856:	d00a      	beq.n	800586e <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	691b      	ldr	r3, [r3, #16]
 800585c:	f043 0208 	orr.w	r2, r3, #8
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2203      	movs	r2, #3
 8005868:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800586a:	2303      	movs	r3, #3
 800586c:	e0fa      	b.n	8005a64 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005874:	4b7d      	ldr	r3, [pc, #500]	; (8005a6c <HAL_DAC_ConfigChannel+0x280>)
 8005876:	4013      	ands	r3, r2
 8005878:	2b00      	cmp	r3, #0
 800587a:	d1df      	bne.n	800583c <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	68ba      	ldr	r2, [r7, #8]
 8005882:	6992      	ldr	r2, [r2, #24]
 8005884:	641a      	str	r2, [r3, #64]	; 0x40
 8005886:	e020      	b.n	80058ca <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005888:	f7fe f85e 	bl	8003948 <HAL_GetTick>
 800588c:	4602      	mov	r2, r0
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	1ad3      	subs	r3, r2, r3
 8005892:	2b01      	cmp	r3, #1
 8005894:	d90f      	bls.n	80058b6 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800589c:	2b00      	cmp	r3, #0
 800589e:	da0a      	bge.n	80058b6 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	691b      	ldr	r3, [r3, #16]
 80058a4:	f043 0208 	orr.w	r2, r3, #8
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2203      	movs	r2, #3
 80058b0:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80058b2:	2303      	movs	r3, #3
 80058b4:	e0d6      	b.n	8005a64 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058bc:	2b00      	cmp	r3, #0
 80058be:	dbe3      	blt.n	8005888 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	68ba      	ldr	r2, [r7, #8]
 80058c6:	6992      	ldr	r2, [r2, #24]
 80058c8:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f003 0310 	and.w	r3, r3, #16
 80058d6:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80058da:	fa01 f303 	lsl.w	r3, r1, r3
 80058de:	43db      	mvns	r3, r3
 80058e0:	ea02 0103 	and.w	r1, r2, r3
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	69da      	ldr	r2, [r3, #28]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f003 0310 	and.w	r3, r3, #16
 80058ee:	409a      	lsls	r2, r3
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	430a      	orrs	r2, r1
 80058f6:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f003 0310 	and.w	r3, r3, #16
 8005904:	21ff      	movs	r1, #255	; 0xff
 8005906:	fa01 f303 	lsl.w	r3, r1, r3
 800590a:	43db      	mvns	r3, r3
 800590c:	ea02 0103 	and.w	r1, r2, r3
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	6a1a      	ldr	r2, [r3, #32]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f003 0310 	and.w	r3, r3, #16
 800591a:	409a      	lsls	r2, r3
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	430a      	orrs	r2, r1
 8005922:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	691b      	ldr	r3, [r3, #16]
 8005928:	2b01      	cmp	r3, #1
 800592a:	d11d      	bne.n	8005968 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005932:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f003 0310 	and.w	r3, r3, #16
 800593a:	221f      	movs	r2, #31
 800593c:	fa02 f303 	lsl.w	r3, r2, r3
 8005940:	43db      	mvns	r3, r3
 8005942:	69ba      	ldr	r2, [r7, #24]
 8005944:	4013      	ands	r3, r2
 8005946:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	695b      	ldr	r3, [r3, #20]
 800594c:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f003 0310 	and.w	r3, r3, #16
 8005954:	697a      	ldr	r2, [r7, #20]
 8005956:	fa02 f303 	lsl.w	r3, r2, r3
 800595a:	69ba      	ldr	r2, [r7, #24]
 800595c:	4313      	orrs	r3, r2
 800595e:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	69ba      	ldr	r2, [r7, #24]
 8005966:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800596e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f003 0310 	and.w	r3, r3, #16
 8005976:	2207      	movs	r2, #7
 8005978:	fa02 f303 	lsl.w	r3, r2, r3
 800597c:	43db      	mvns	r3, r3
 800597e:	69ba      	ldr	r2, [r7, #24]
 8005980:	4013      	ands	r3, r2
 8005982:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	68db      	ldr	r3, [r3, #12]
 8005988:	2b01      	cmp	r3, #1
 800598a:	d102      	bne.n	8005992 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 800598c:	2300      	movs	r3, #0
 800598e:	627b      	str	r3, [r7, #36]	; 0x24
 8005990:	e00f      	b.n	80059b2 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	2b02      	cmp	r3, #2
 8005998:	d102      	bne.n	80059a0 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800599a:	2301      	movs	r3, #1
 800599c:	627b      	str	r3, [r7, #36]	; 0x24
 800599e:	e008      	b.n	80059b2 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d102      	bne.n	80059ae <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80059a8:	2301      	movs	r3, #1
 80059aa:	627b      	str	r3, [r7, #36]	; 0x24
 80059ac:	e001      	b.n	80059b2 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80059ae:	2300      	movs	r3, #0
 80059b0:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059be:	4313      	orrs	r3, r2
 80059c0:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f003 0310 	and.w	r3, r3, #16
 80059c8:	697a      	ldr	r2, [r7, #20]
 80059ca:	fa02 f303 	lsl.w	r3, r2, r3
 80059ce:	69ba      	ldr	r2, [r7, #24]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	69ba      	ldr	r2, [r7, #24]
 80059da:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	6819      	ldr	r1, [r3, #0]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f003 0310 	and.w	r3, r3, #16
 80059e8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80059ec:	fa02 f303 	lsl.w	r3, r2, r3
 80059f0:	43da      	mvns	r2, r3
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	400a      	ands	r2, r1
 80059f8:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f003 0310 	and.w	r3, r3, #16
 8005a08:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a10:	43db      	mvns	r3, r3
 8005a12:	69ba      	ldr	r2, [r7, #24]
 8005a14:	4013      	ands	r3, r2
 8005a16:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f003 0310 	and.w	r3, r3, #16
 8005a24:	697a      	ldr	r2, [r7, #20]
 8005a26:	fa02 f303 	lsl.w	r3, r2, r3
 8005a2a:	69ba      	ldr	r2, [r7, #24]
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	69ba      	ldr	r2, [r7, #24]
 8005a36:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	6819      	ldr	r1, [r3, #0]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f003 0310 	and.w	r3, r3, #16
 8005a44:	22c0      	movs	r2, #192	; 0xc0
 8005a46:	fa02 f303 	lsl.w	r3, r2, r3
 8005a4a:	43da      	mvns	r2, r3
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	400a      	ands	r2, r1
 8005a52:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2201      	movs	r2, #1
 8005a58:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8005a60:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3728      	adds	r7, #40	; 0x28
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}
 8005a6c:	20008000 	.word	0x20008000

08005a70 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b084      	sub	sp, #16
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a7c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8005a7e:	68f8      	ldr	r0, [r7, #12]
 8005a80:	f7ff fe8b 	bl	800579a <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2201      	movs	r2, #1
 8005a88:	711a      	strb	r2, [r3, #4]
}
 8005a8a:	bf00      	nop
 8005a8c:	3710      	adds	r7, #16
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}

08005a92 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005a92:	b580      	push	{r7, lr}
 8005a94:	b084      	sub	sp, #16
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a9e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8005aa0:	68f8      	ldr	r0, [r7, #12]
 8005aa2:	f7ff fe84 	bl	80057ae <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005aa6:	bf00      	nop
 8005aa8:	3710      	adds	r7, #16
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}

08005aae <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8005aae:	b580      	push	{r7, lr}
 8005ab0:	b084      	sub	sp, #16
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aba:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	691b      	ldr	r3, [r3, #16]
 8005ac0:	f043 0204 	orr.w	r2, r3, #4
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8005ac8:	68f8      	ldr	r0, [r7, #12]
 8005aca:	f7ff fe7a 	bl	80057c2 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	711a      	strb	r2, [r3, #4]
}
 8005ad4:	bf00      	nop
 8005ad6:	3710      	adds	r7, #16
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}

08005adc <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b083      	sub	sp, #12
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8005ae4:	bf00      	nop
 8005ae6:	370c      	adds	r7, #12
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr

08005af0 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b083      	sub	sp, #12
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8005af8:	bf00      	nop
 8005afa:	370c      	adds	r7, #12
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr

08005b04 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b083      	sub	sp, #12
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8005b0c:	bf00      	nop
 8005b0e:	370c      	adds	r7, #12
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8005b20:	bf00      	nop
 8005b22:	370c      	adds	r7, #12
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr

08005b2c <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b084      	sub	sp, #16
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b38:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8005b3a:	68f8      	ldr	r0, [r7, #12]
 8005b3c:	f7ff ffce 	bl	8005adc <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2201      	movs	r2, #1
 8005b44:	711a      	strb	r2, [r3, #4]
}
 8005b46:	bf00      	nop
 8005b48:	3710      	adds	r7, #16
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}

08005b4e <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005b4e:	b580      	push	{r7, lr}
 8005b50:	b084      	sub	sp, #16
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b5a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8005b5c:	68f8      	ldr	r0, [r7, #12]
 8005b5e:	f7ff ffc7 	bl	8005af0 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005b62:	bf00      	nop
 8005b64:	3710      	adds	r7, #16
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}

08005b6a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8005b6a:	b580      	push	{r7, lr}
 8005b6c:	b084      	sub	sp, #16
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b76:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	691b      	ldr	r3, [r3, #16]
 8005b7c:	f043 0204 	orr.w	r2, r3, #4
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8005b84:	68f8      	ldr	r0, [r7, #12]
 8005b86:	f7ff ffbd 	bl	8005b04 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	711a      	strb	r2, [r3, #4]
}
 8005b90:	bf00      	nop
 8005b92:	3710      	adds	r7, #16
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b086      	sub	sp, #24
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005ba0:	f7fd fed2 	bl	8003948 <HAL_GetTick>
 8005ba4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d101      	bne.n	8005bb0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	e316      	b.n	80061de <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a66      	ldr	r2, [pc, #408]	; (8005d50 <HAL_DMA_Init+0x1b8>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d04a      	beq.n	8005c50 <HAL_DMA_Init+0xb8>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a65      	ldr	r2, [pc, #404]	; (8005d54 <HAL_DMA_Init+0x1bc>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d045      	beq.n	8005c50 <HAL_DMA_Init+0xb8>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a63      	ldr	r2, [pc, #396]	; (8005d58 <HAL_DMA_Init+0x1c0>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d040      	beq.n	8005c50 <HAL_DMA_Init+0xb8>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a62      	ldr	r2, [pc, #392]	; (8005d5c <HAL_DMA_Init+0x1c4>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d03b      	beq.n	8005c50 <HAL_DMA_Init+0xb8>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a60      	ldr	r2, [pc, #384]	; (8005d60 <HAL_DMA_Init+0x1c8>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d036      	beq.n	8005c50 <HAL_DMA_Init+0xb8>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a5f      	ldr	r2, [pc, #380]	; (8005d64 <HAL_DMA_Init+0x1cc>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d031      	beq.n	8005c50 <HAL_DMA_Init+0xb8>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a5d      	ldr	r2, [pc, #372]	; (8005d68 <HAL_DMA_Init+0x1d0>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d02c      	beq.n	8005c50 <HAL_DMA_Init+0xb8>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a5c      	ldr	r2, [pc, #368]	; (8005d6c <HAL_DMA_Init+0x1d4>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d027      	beq.n	8005c50 <HAL_DMA_Init+0xb8>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a5a      	ldr	r2, [pc, #360]	; (8005d70 <HAL_DMA_Init+0x1d8>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d022      	beq.n	8005c50 <HAL_DMA_Init+0xb8>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a59      	ldr	r2, [pc, #356]	; (8005d74 <HAL_DMA_Init+0x1dc>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d01d      	beq.n	8005c50 <HAL_DMA_Init+0xb8>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a57      	ldr	r2, [pc, #348]	; (8005d78 <HAL_DMA_Init+0x1e0>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d018      	beq.n	8005c50 <HAL_DMA_Init+0xb8>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a56      	ldr	r2, [pc, #344]	; (8005d7c <HAL_DMA_Init+0x1e4>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d013      	beq.n	8005c50 <HAL_DMA_Init+0xb8>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a54      	ldr	r2, [pc, #336]	; (8005d80 <HAL_DMA_Init+0x1e8>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d00e      	beq.n	8005c50 <HAL_DMA_Init+0xb8>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a53      	ldr	r2, [pc, #332]	; (8005d84 <HAL_DMA_Init+0x1ec>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d009      	beq.n	8005c50 <HAL_DMA_Init+0xb8>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a51      	ldr	r2, [pc, #324]	; (8005d88 <HAL_DMA_Init+0x1f0>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d004      	beq.n	8005c50 <HAL_DMA_Init+0xb8>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a50      	ldr	r2, [pc, #320]	; (8005d8c <HAL_DMA_Init+0x1f4>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d101      	bne.n	8005c54 <HAL_DMA_Init+0xbc>
 8005c50:	2301      	movs	r3, #1
 8005c52:	e000      	b.n	8005c56 <HAL_DMA_Init+0xbe>
 8005c54:	2300      	movs	r3, #0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	f000 813b 	beq.w	8005ed2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2202      	movs	r2, #2
 8005c60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2200      	movs	r2, #0
 8005c68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a37      	ldr	r2, [pc, #220]	; (8005d50 <HAL_DMA_Init+0x1b8>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d04a      	beq.n	8005d0c <HAL_DMA_Init+0x174>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a36      	ldr	r2, [pc, #216]	; (8005d54 <HAL_DMA_Init+0x1bc>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d045      	beq.n	8005d0c <HAL_DMA_Init+0x174>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a34      	ldr	r2, [pc, #208]	; (8005d58 <HAL_DMA_Init+0x1c0>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d040      	beq.n	8005d0c <HAL_DMA_Init+0x174>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a33      	ldr	r2, [pc, #204]	; (8005d5c <HAL_DMA_Init+0x1c4>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d03b      	beq.n	8005d0c <HAL_DMA_Init+0x174>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a31      	ldr	r2, [pc, #196]	; (8005d60 <HAL_DMA_Init+0x1c8>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d036      	beq.n	8005d0c <HAL_DMA_Init+0x174>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a30      	ldr	r2, [pc, #192]	; (8005d64 <HAL_DMA_Init+0x1cc>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d031      	beq.n	8005d0c <HAL_DMA_Init+0x174>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a2e      	ldr	r2, [pc, #184]	; (8005d68 <HAL_DMA_Init+0x1d0>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d02c      	beq.n	8005d0c <HAL_DMA_Init+0x174>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a2d      	ldr	r2, [pc, #180]	; (8005d6c <HAL_DMA_Init+0x1d4>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d027      	beq.n	8005d0c <HAL_DMA_Init+0x174>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a2b      	ldr	r2, [pc, #172]	; (8005d70 <HAL_DMA_Init+0x1d8>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d022      	beq.n	8005d0c <HAL_DMA_Init+0x174>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a2a      	ldr	r2, [pc, #168]	; (8005d74 <HAL_DMA_Init+0x1dc>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d01d      	beq.n	8005d0c <HAL_DMA_Init+0x174>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a28      	ldr	r2, [pc, #160]	; (8005d78 <HAL_DMA_Init+0x1e0>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d018      	beq.n	8005d0c <HAL_DMA_Init+0x174>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a27      	ldr	r2, [pc, #156]	; (8005d7c <HAL_DMA_Init+0x1e4>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d013      	beq.n	8005d0c <HAL_DMA_Init+0x174>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a25      	ldr	r2, [pc, #148]	; (8005d80 <HAL_DMA_Init+0x1e8>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d00e      	beq.n	8005d0c <HAL_DMA_Init+0x174>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a24      	ldr	r2, [pc, #144]	; (8005d84 <HAL_DMA_Init+0x1ec>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d009      	beq.n	8005d0c <HAL_DMA_Init+0x174>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a22      	ldr	r2, [pc, #136]	; (8005d88 <HAL_DMA_Init+0x1f0>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d004      	beq.n	8005d0c <HAL_DMA_Init+0x174>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a21      	ldr	r2, [pc, #132]	; (8005d8c <HAL_DMA_Init+0x1f4>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d108      	bne.n	8005d1e <HAL_DMA_Init+0x186>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f022 0201 	bic.w	r2, r2, #1
 8005d1a:	601a      	str	r2, [r3, #0]
 8005d1c:	e007      	b.n	8005d2e <HAL_DMA_Init+0x196>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f022 0201 	bic.w	r2, r2, #1
 8005d2c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005d2e:	e02f      	b.n	8005d90 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005d30:	f7fd fe0a 	bl	8003948 <HAL_GetTick>
 8005d34:	4602      	mov	r2, r0
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	1ad3      	subs	r3, r2, r3
 8005d3a:	2b05      	cmp	r3, #5
 8005d3c:	d928      	bls.n	8005d90 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2220      	movs	r2, #32
 8005d42:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2203      	movs	r2, #3
 8005d48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e246      	b.n	80061de <HAL_DMA_Init+0x646>
 8005d50:	40020010 	.word	0x40020010
 8005d54:	40020028 	.word	0x40020028
 8005d58:	40020040 	.word	0x40020040
 8005d5c:	40020058 	.word	0x40020058
 8005d60:	40020070 	.word	0x40020070
 8005d64:	40020088 	.word	0x40020088
 8005d68:	400200a0 	.word	0x400200a0
 8005d6c:	400200b8 	.word	0x400200b8
 8005d70:	40020410 	.word	0x40020410
 8005d74:	40020428 	.word	0x40020428
 8005d78:	40020440 	.word	0x40020440
 8005d7c:	40020458 	.word	0x40020458
 8005d80:	40020470 	.word	0x40020470
 8005d84:	40020488 	.word	0x40020488
 8005d88:	400204a0 	.word	0x400204a0
 8005d8c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f003 0301 	and.w	r3, r3, #1
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d1c8      	bne.n	8005d30 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005da6:	697a      	ldr	r2, [r7, #20]
 8005da8:	4b83      	ldr	r3, [pc, #524]	; (8005fb8 <HAL_DMA_Init+0x420>)
 8005daa:	4013      	ands	r3, r2
 8005dac:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005db6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	691b      	ldr	r3, [r3, #16]
 8005dbc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005dc2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	699b      	ldr	r3, [r3, #24]
 8005dc8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005dce:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6a1b      	ldr	r3, [r3, #32]
 8005dd4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005dd6:	697a      	ldr	r2, [r7, #20]
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de0:	2b04      	cmp	r3, #4
 8005de2:	d107      	bne.n	8005df4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dec:	4313      	orrs	r3, r2
 8005dee:	697a      	ldr	r2, [r7, #20]
 8005df0:	4313      	orrs	r3, r2
 8005df2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005df4:	4b71      	ldr	r3, [pc, #452]	; (8005fbc <HAL_DMA_Init+0x424>)
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	4b71      	ldr	r3, [pc, #452]	; (8005fc0 <HAL_DMA_Init+0x428>)
 8005dfa:	4013      	ands	r3, r2
 8005dfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e00:	d328      	bcc.n	8005e54 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	2b28      	cmp	r3, #40	; 0x28
 8005e08:	d903      	bls.n	8005e12 <HAL_DMA_Init+0x27a>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	2b2e      	cmp	r3, #46	; 0x2e
 8005e10:	d917      	bls.n	8005e42 <HAL_DMA_Init+0x2aa>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	2b3e      	cmp	r3, #62	; 0x3e
 8005e18:	d903      	bls.n	8005e22 <HAL_DMA_Init+0x28a>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	2b42      	cmp	r3, #66	; 0x42
 8005e20:	d90f      	bls.n	8005e42 <HAL_DMA_Init+0x2aa>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	2b46      	cmp	r3, #70	; 0x46
 8005e28:	d903      	bls.n	8005e32 <HAL_DMA_Init+0x29a>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	2b48      	cmp	r3, #72	; 0x48
 8005e30:	d907      	bls.n	8005e42 <HAL_DMA_Init+0x2aa>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	2b4e      	cmp	r3, #78	; 0x4e
 8005e38:	d905      	bls.n	8005e46 <HAL_DMA_Init+0x2ae>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	2b52      	cmp	r3, #82	; 0x52
 8005e40:	d801      	bhi.n	8005e46 <HAL_DMA_Init+0x2ae>
 8005e42:	2301      	movs	r3, #1
 8005e44:	e000      	b.n	8005e48 <HAL_DMA_Init+0x2b0>
 8005e46:	2300      	movs	r3, #0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d003      	beq.n	8005e54 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e52:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	697a      	ldr	r2, [r7, #20]
 8005e5a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	695b      	ldr	r3, [r3, #20]
 8005e62:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	f023 0307 	bic.w	r3, r3, #7
 8005e6a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e70:	697a      	ldr	r2, [r7, #20]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7a:	2b04      	cmp	r3, #4
 8005e7c:	d117      	bne.n	8005eae <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e82:	697a      	ldr	r2, [r7, #20]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d00e      	beq.n	8005eae <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f002 fb33 	bl	80084fc <DMA_CheckFifoParam>
 8005e96:	4603      	mov	r3, r0
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d008      	beq.n	8005eae <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2240      	movs	r2, #64	; 0x40
 8005ea0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e197      	b.n	80061de <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	697a      	ldr	r2, [r7, #20]
 8005eb4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f002 fa6e 	bl	8008398 <DMA_CalcBaseAndBitshift>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ec4:	f003 031f 	and.w	r3, r3, #31
 8005ec8:	223f      	movs	r2, #63	; 0x3f
 8005eca:	409a      	lsls	r2, r3
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	609a      	str	r2, [r3, #8]
 8005ed0:	e0cd      	b.n	800606e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a3b      	ldr	r2, [pc, #236]	; (8005fc4 <HAL_DMA_Init+0x42c>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d022      	beq.n	8005f22 <HAL_DMA_Init+0x38a>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a39      	ldr	r2, [pc, #228]	; (8005fc8 <HAL_DMA_Init+0x430>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d01d      	beq.n	8005f22 <HAL_DMA_Init+0x38a>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a38      	ldr	r2, [pc, #224]	; (8005fcc <HAL_DMA_Init+0x434>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d018      	beq.n	8005f22 <HAL_DMA_Init+0x38a>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a36      	ldr	r2, [pc, #216]	; (8005fd0 <HAL_DMA_Init+0x438>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d013      	beq.n	8005f22 <HAL_DMA_Init+0x38a>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a35      	ldr	r2, [pc, #212]	; (8005fd4 <HAL_DMA_Init+0x43c>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d00e      	beq.n	8005f22 <HAL_DMA_Init+0x38a>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a33      	ldr	r2, [pc, #204]	; (8005fd8 <HAL_DMA_Init+0x440>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d009      	beq.n	8005f22 <HAL_DMA_Init+0x38a>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a32      	ldr	r2, [pc, #200]	; (8005fdc <HAL_DMA_Init+0x444>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d004      	beq.n	8005f22 <HAL_DMA_Init+0x38a>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a30      	ldr	r2, [pc, #192]	; (8005fe0 <HAL_DMA_Init+0x448>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d101      	bne.n	8005f26 <HAL_DMA_Init+0x38e>
 8005f22:	2301      	movs	r3, #1
 8005f24:	e000      	b.n	8005f28 <HAL_DMA_Init+0x390>
 8005f26:	2300      	movs	r3, #0
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	f000 8097 	beq.w	800605c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a24      	ldr	r2, [pc, #144]	; (8005fc4 <HAL_DMA_Init+0x42c>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d021      	beq.n	8005f7c <HAL_DMA_Init+0x3e4>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a22      	ldr	r2, [pc, #136]	; (8005fc8 <HAL_DMA_Init+0x430>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d01c      	beq.n	8005f7c <HAL_DMA_Init+0x3e4>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a21      	ldr	r2, [pc, #132]	; (8005fcc <HAL_DMA_Init+0x434>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d017      	beq.n	8005f7c <HAL_DMA_Init+0x3e4>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a1f      	ldr	r2, [pc, #124]	; (8005fd0 <HAL_DMA_Init+0x438>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d012      	beq.n	8005f7c <HAL_DMA_Init+0x3e4>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a1e      	ldr	r2, [pc, #120]	; (8005fd4 <HAL_DMA_Init+0x43c>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d00d      	beq.n	8005f7c <HAL_DMA_Init+0x3e4>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a1c      	ldr	r2, [pc, #112]	; (8005fd8 <HAL_DMA_Init+0x440>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d008      	beq.n	8005f7c <HAL_DMA_Init+0x3e4>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a1b      	ldr	r2, [pc, #108]	; (8005fdc <HAL_DMA_Init+0x444>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d003      	beq.n	8005f7c <HAL_DMA_Init+0x3e4>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a19      	ldr	r2, [pc, #100]	; (8005fe0 <HAL_DMA_Init+0x448>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2202      	movs	r2, #2
 8005f82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005f96:	697a      	ldr	r2, [r7, #20]
 8005f98:	4b12      	ldr	r3, [pc, #72]	; (8005fe4 <HAL_DMA_Init+0x44c>)
 8005f9a:	4013      	ands	r3, r2
 8005f9c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	2b40      	cmp	r3, #64	; 0x40
 8005fa4:	d020      	beq.n	8005fe8 <HAL_DMA_Init+0x450>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	2b80      	cmp	r3, #128	; 0x80
 8005fac:	d102      	bne.n	8005fb4 <HAL_DMA_Init+0x41c>
 8005fae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005fb2:	e01a      	b.n	8005fea <HAL_DMA_Init+0x452>
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	e018      	b.n	8005fea <HAL_DMA_Init+0x452>
 8005fb8:	fe10803f 	.word	0xfe10803f
 8005fbc:	5c001000 	.word	0x5c001000
 8005fc0:	ffff0000 	.word	0xffff0000
 8005fc4:	58025408 	.word	0x58025408
 8005fc8:	5802541c 	.word	0x5802541c
 8005fcc:	58025430 	.word	0x58025430
 8005fd0:	58025444 	.word	0x58025444
 8005fd4:	58025458 	.word	0x58025458
 8005fd8:	5802546c 	.word	0x5802546c
 8005fdc:	58025480 	.word	0x58025480
 8005fe0:	58025494 	.word	0x58025494
 8005fe4:	fffe000f 	.word	0xfffe000f
 8005fe8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005fea:	687a      	ldr	r2, [r7, #4]
 8005fec:	68d2      	ldr	r2, [r2, #12]
 8005fee:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005ff0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	691b      	ldr	r3, [r3, #16]
 8005ff6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005ff8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	695b      	ldr	r3, [r3, #20]
 8005ffe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006000:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	699b      	ldr	r3, [r3, #24]
 8006006:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006008:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	69db      	ldr	r3, [r3, #28]
 800600e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006010:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6a1b      	ldr	r3, [r3, #32]
 8006016:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006018:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800601a:	697a      	ldr	r2, [r7, #20]
 800601c:	4313      	orrs	r3, r2
 800601e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	697a      	ldr	r2, [r7, #20]
 8006026:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	461a      	mov	r2, r3
 800602e:	4b6e      	ldr	r3, [pc, #440]	; (80061e8 <HAL_DMA_Init+0x650>)
 8006030:	4413      	add	r3, r2
 8006032:	4a6e      	ldr	r2, [pc, #440]	; (80061ec <HAL_DMA_Init+0x654>)
 8006034:	fba2 2303 	umull	r2, r3, r2, r3
 8006038:	091b      	lsrs	r3, r3, #4
 800603a:	009a      	lsls	r2, r3, #2
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f002 f9a9 	bl	8008398 <DMA_CalcBaseAndBitshift>
 8006046:	4603      	mov	r3, r0
 8006048:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800604e:	f003 031f 	and.w	r3, r3, #31
 8006052:	2201      	movs	r2, #1
 8006054:	409a      	lsls	r2, r3
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	605a      	str	r2, [r3, #4]
 800605a:	e008      	b.n	800606e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2240      	movs	r2, #64	; 0x40
 8006060:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2203      	movs	r2, #3
 8006066:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	e0b7      	b.n	80061de <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a5f      	ldr	r2, [pc, #380]	; (80061f0 <HAL_DMA_Init+0x658>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d072      	beq.n	800615e <HAL_DMA_Init+0x5c6>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a5d      	ldr	r2, [pc, #372]	; (80061f4 <HAL_DMA_Init+0x65c>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d06d      	beq.n	800615e <HAL_DMA_Init+0x5c6>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a5c      	ldr	r2, [pc, #368]	; (80061f8 <HAL_DMA_Init+0x660>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d068      	beq.n	800615e <HAL_DMA_Init+0x5c6>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a5a      	ldr	r2, [pc, #360]	; (80061fc <HAL_DMA_Init+0x664>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d063      	beq.n	800615e <HAL_DMA_Init+0x5c6>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a59      	ldr	r2, [pc, #356]	; (8006200 <HAL_DMA_Init+0x668>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d05e      	beq.n	800615e <HAL_DMA_Init+0x5c6>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a57      	ldr	r2, [pc, #348]	; (8006204 <HAL_DMA_Init+0x66c>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d059      	beq.n	800615e <HAL_DMA_Init+0x5c6>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a56      	ldr	r2, [pc, #344]	; (8006208 <HAL_DMA_Init+0x670>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d054      	beq.n	800615e <HAL_DMA_Init+0x5c6>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a54      	ldr	r2, [pc, #336]	; (800620c <HAL_DMA_Init+0x674>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d04f      	beq.n	800615e <HAL_DMA_Init+0x5c6>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a53      	ldr	r2, [pc, #332]	; (8006210 <HAL_DMA_Init+0x678>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d04a      	beq.n	800615e <HAL_DMA_Init+0x5c6>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a51      	ldr	r2, [pc, #324]	; (8006214 <HAL_DMA_Init+0x67c>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d045      	beq.n	800615e <HAL_DMA_Init+0x5c6>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a50      	ldr	r2, [pc, #320]	; (8006218 <HAL_DMA_Init+0x680>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d040      	beq.n	800615e <HAL_DMA_Init+0x5c6>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a4e      	ldr	r2, [pc, #312]	; (800621c <HAL_DMA_Init+0x684>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d03b      	beq.n	800615e <HAL_DMA_Init+0x5c6>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a4d      	ldr	r2, [pc, #308]	; (8006220 <HAL_DMA_Init+0x688>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d036      	beq.n	800615e <HAL_DMA_Init+0x5c6>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a4b      	ldr	r2, [pc, #300]	; (8006224 <HAL_DMA_Init+0x68c>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d031      	beq.n	800615e <HAL_DMA_Init+0x5c6>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a4a      	ldr	r2, [pc, #296]	; (8006228 <HAL_DMA_Init+0x690>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d02c      	beq.n	800615e <HAL_DMA_Init+0x5c6>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a48      	ldr	r2, [pc, #288]	; (800622c <HAL_DMA_Init+0x694>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d027      	beq.n	800615e <HAL_DMA_Init+0x5c6>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a47      	ldr	r2, [pc, #284]	; (8006230 <HAL_DMA_Init+0x698>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d022      	beq.n	800615e <HAL_DMA_Init+0x5c6>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a45      	ldr	r2, [pc, #276]	; (8006234 <HAL_DMA_Init+0x69c>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d01d      	beq.n	800615e <HAL_DMA_Init+0x5c6>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a44      	ldr	r2, [pc, #272]	; (8006238 <HAL_DMA_Init+0x6a0>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d018      	beq.n	800615e <HAL_DMA_Init+0x5c6>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a42      	ldr	r2, [pc, #264]	; (800623c <HAL_DMA_Init+0x6a4>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d013      	beq.n	800615e <HAL_DMA_Init+0x5c6>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a41      	ldr	r2, [pc, #260]	; (8006240 <HAL_DMA_Init+0x6a8>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d00e      	beq.n	800615e <HAL_DMA_Init+0x5c6>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a3f      	ldr	r2, [pc, #252]	; (8006244 <HAL_DMA_Init+0x6ac>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d009      	beq.n	800615e <HAL_DMA_Init+0x5c6>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a3e      	ldr	r2, [pc, #248]	; (8006248 <HAL_DMA_Init+0x6b0>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d004      	beq.n	800615e <HAL_DMA_Init+0x5c6>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a3c      	ldr	r2, [pc, #240]	; (800624c <HAL_DMA_Init+0x6b4>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d101      	bne.n	8006162 <HAL_DMA_Init+0x5ca>
 800615e:	2301      	movs	r3, #1
 8006160:	e000      	b.n	8006164 <HAL_DMA_Init+0x5cc>
 8006162:	2300      	movs	r3, #0
 8006164:	2b00      	cmp	r3, #0
 8006166:	d032      	beq.n	80061ce <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f002 fa43 	bl	80085f4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	2b80      	cmp	r3, #128	; 0x80
 8006174:	d102      	bne.n	800617c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	685a      	ldr	r2, [r3, #4]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006184:	b2d2      	uxtb	r2, r2
 8006186:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800618c:	687a      	ldr	r2, [r7, #4]
 800618e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006190:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d010      	beq.n	80061bc <HAL_DMA_Init+0x624>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	2b08      	cmp	r3, #8
 80061a0:	d80c      	bhi.n	80061bc <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f002 fac0 	bl	8008728 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061ac:	2200      	movs	r2, #0
 80061ae:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80061b8:	605a      	str	r2, [r3, #4]
 80061ba:	e008      	b.n	80061ce <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2200      	movs	r2, #0
 80061c6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2200      	movs	r2, #0
 80061cc:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2200      	movs	r2, #0
 80061d2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2201      	movs	r2, #1
 80061d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80061dc:	2300      	movs	r3, #0
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3718      	adds	r7, #24
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
 80061e6:	bf00      	nop
 80061e8:	a7fdabf8 	.word	0xa7fdabf8
 80061ec:	cccccccd 	.word	0xcccccccd
 80061f0:	40020010 	.word	0x40020010
 80061f4:	40020028 	.word	0x40020028
 80061f8:	40020040 	.word	0x40020040
 80061fc:	40020058 	.word	0x40020058
 8006200:	40020070 	.word	0x40020070
 8006204:	40020088 	.word	0x40020088
 8006208:	400200a0 	.word	0x400200a0
 800620c:	400200b8 	.word	0x400200b8
 8006210:	40020410 	.word	0x40020410
 8006214:	40020428 	.word	0x40020428
 8006218:	40020440 	.word	0x40020440
 800621c:	40020458 	.word	0x40020458
 8006220:	40020470 	.word	0x40020470
 8006224:	40020488 	.word	0x40020488
 8006228:	400204a0 	.word	0x400204a0
 800622c:	400204b8 	.word	0x400204b8
 8006230:	58025408 	.word	0x58025408
 8006234:	5802541c 	.word	0x5802541c
 8006238:	58025430 	.word	0x58025430
 800623c:	58025444 	.word	0x58025444
 8006240:	58025458 	.word	0x58025458
 8006244:	5802546c 	.word	0x5802546c
 8006248:	58025480 	.word	0x58025480
 800624c:	58025494 	.word	0x58025494

08006250 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b086      	sub	sp, #24
 8006254:	af00      	add	r7, sp, #0
 8006256:	60f8      	str	r0, [r7, #12]
 8006258:	60b9      	str	r1, [r7, #8]
 800625a:	607a      	str	r2, [r7, #4]
 800625c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800625e:	2300      	movs	r3, #0
 8006260:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d101      	bne.n	800626c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	e226      	b.n	80066ba <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006272:	2b01      	cmp	r3, #1
 8006274:	d101      	bne.n	800627a <HAL_DMA_Start_IT+0x2a>
 8006276:	2302      	movs	r3, #2
 8006278:	e21f      	b.n	80066ba <HAL_DMA_Start_IT+0x46a>
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2201      	movs	r2, #1
 800627e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006288:	b2db      	uxtb	r3, r3
 800628a:	2b01      	cmp	r3, #1
 800628c:	f040 820a 	bne.w	80066a4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2202      	movs	r2, #2
 8006294:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2200      	movs	r2, #0
 800629c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a68      	ldr	r2, [pc, #416]	; (8006444 <HAL_DMA_Start_IT+0x1f4>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d04a      	beq.n	800633e <HAL_DMA_Start_IT+0xee>
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a66      	ldr	r2, [pc, #408]	; (8006448 <HAL_DMA_Start_IT+0x1f8>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d045      	beq.n	800633e <HAL_DMA_Start_IT+0xee>
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a65      	ldr	r2, [pc, #404]	; (800644c <HAL_DMA_Start_IT+0x1fc>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d040      	beq.n	800633e <HAL_DMA_Start_IT+0xee>
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a63      	ldr	r2, [pc, #396]	; (8006450 <HAL_DMA_Start_IT+0x200>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d03b      	beq.n	800633e <HAL_DMA_Start_IT+0xee>
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a62      	ldr	r2, [pc, #392]	; (8006454 <HAL_DMA_Start_IT+0x204>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d036      	beq.n	800633e <HAL_DMA_Start_IT+0xee>
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a60      	ldr	r2, [pc, #384]	; (8006458 <HAL_DMA_Start_IT+0x208>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d031      	beq.n	800633e <HAL_DMA_Start_IT+0xee>
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a5f      	ldr	r2, [pc, #380]	; (800645c <HAL_DMA_Start_IT+0x20c>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d02c      	beq.n	800633e <HAL_DMA_Start_IT+0xee>
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a5d      	ldr	r2, [pc, #372]	; (8006460 <HAL_DMA_Start_IT+0x210>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d027      	beq.n	800633e <HAL_DMA_Start_IT+0xee>
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a5c      	ldr	r2, [pc, #368]	; (8006464 <HAL_DMA_Start_IT+0x214>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d022      	beq.n	800633e <HAL_DMA_Start_IT+0xee>
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a5a      	ldr	r2, [pc, #360]	; (8006468 <HAL_DMA_Start_IT+0x218>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d01d      	beq.n	800633e <HAL_DMA_Start_IT+0xee>
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a59      	ldr	r2, [pc, #356]	; (800646c <HAL_DMA_Start_IT+0x21c>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d018      	beq.n	800633e <HAL_DMA_Start_IT+0xee>
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a57      	ldr	r2, [pc, #348]	; (8006470 <HAL_DMA_Start_IT+0x220>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d013      	beq.n	800633e <HAL_DMA_Start_IT+0xee>
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a56      	ldr	r2, [pc, #344]	; (8006474 <HAL_DMA_Start_IT+0x224>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d00e      	beq.n	800633e <HAL_DMA_Start_IT+0xee>
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a54      	ldr	r2, [pc, #336]	; (8006478 <HAL_DMA_Start_IT+0x228>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d009      	beq.n	800633e <HAL_DMA_Start_IT+0xee>
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a53      	ldr	r2, [pc, #332]	; (800647c <HAL_DMA_Start_IT+0x22c>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d004      	beq.n	800633e <HAL_DMA_Start_IT+0xee>
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a51      	ldr	r2, [pc, #324]	; (8006480 <HAL_DMA_Start_IT+0x230>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d108      	bne.n	8006350 <HAL_DMA_Start_IT+0x100>
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f022 0201 	bic.w	r2, r2, #1
 800634c:	601a      	str	r2, [r3, #0]
 800634e:	e007      	b.n	8006360 <HAL_DMA_Start_IT+0x110>
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f022 0201 	bic.w	r2, r2, #1
 800635e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	687a      	ldr	r2, [r7, #4]
 8006364:	68b9      	ldr	r1, [r7, #8]
 8006366:	68f8      	ldr	r0, [r7, #12]
 8006368:	f001 fe6a 	bl	8008040 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a34      	ldr	r2, [pc, #208]	; (8006444 <HAL_DMA_Start_IT+0x1f4>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d04a      	beq.n	800640c <HAL_DMA_Start_IT+0x1bc>
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a33      	ldr	r2, [pc, #204]	; (8006448 <HAL_DMA_Start_IT+0x1f8>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d045      	beq.n	800640c <HAL_DMA_Start_IT+0x1bc>
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a31      	ldr	r2, [pc, #196]	; (800644c <HAL_DMA_Start_IT+0x1fc>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d040      	beq.n	800640c <HAL_DMA_Start_IT+0x1bc>
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a30      	ldr	r2, [pc, #192]	; (8006450 <HAL_DMA_Start_IT+0x200>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d03b      	beq.n	800640c <HAL_DMA_Start_IT+0x1bc>
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a2e      	ldr	r2, [pc, #184]	; (8006454 <HAL_DMA_Start_IT+0x204>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d036      	beq.n	800640c <HAL_DMA_Start_IT+0x1bc>
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a2d      	ldr	r2, [pc, #180]	; (8006458 <HAL_DMA_Start_IT+0x208>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d031      	beq.n	800640c <HAL_DMA_Start_IT+0x1bc>
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a2b      	ldr	r2, [pc, #172]	; (800645c <HAL_DMA_Start_IT+0x20c>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d02c      	beq.n	800640c <HAL_DMA_Start_IT+0x1bc>
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a2a      	ldr	r2, [pc, #168]	; (8006460 <HAL_DMA_Start_IT+0x210>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d027      	beq.n	800640c <HAL_DMA_Start_IT+0x1bc>
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a28      	ldr	r2, [pc, #160]	; (8006464 <HAL_DMA_Start_IT+0x214>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d022      	beq.n	800640c <HAL_DMA_Start_IT+0x1bc>
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a27      	ldr	r2, [pc, #156]	; (8006468 <HAL_DMA_Start_IT+0x218>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d01d      	beq.n	800640c <HAL_DMA_Start_IT+0x1bc>
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a25      	ldr	r2, [pc, #148]	; (800646c <HAL_DMA_Start_IT+0x21c>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d018      	beq.n	800640c <HAL_DMA_Start_IT+0x1bc>
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a24      	ldr	r2, [pc, #144]	; (8006470 <HAL_DMA_Start_IT+0x220>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d013      	beq.n	800640c <HAL_DMA_Start_IT+0x1bc>
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a22      	ldr	r2, [pc, #136]	; (8006474 <HAL_DMA_Start_IT+0x224>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d00e      	beq.n	800640c <HAL_DMA_Start_IT+0x1bc>
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a21      	ldr	r2, [pc, #132]	; (8006478 <HAL_DMA_Start_IT+0x228>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d009      	beq.n	800640c <HAL_DMA_Start_IT+0x1bc>
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a1f      	ldr	r2, [pc, #124]	; (800647c <HAL_DMA_Start_IT+0x22c>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d004      	beq.n	800640c <HAL_DMA_Start_IT+0x1bc>
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a1e      	ldr	r2, [pc, #120]	; (8006480 <HAL_DMA_Start_IT+0x230>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d101      	bne.n	8006410 <HAL_DMA_Start_IT+0x1c0>
 800640c:	2301      	movs	r3, #1
 800640e:	e000      	b.n	8006412 <HAL_DMA_Start_IT+0x1c2>
 8006410:	2300      	movs	r3, #0
 8006412:	2b00      	cmp	r3, #0
 8006414:	d036      	beq.n	8006484 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f023 021e 	bic.w	r2, r3, #30
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f042 0216 	orr.w	r2, r2, #22
 8006428:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800642e:	2b00      	cmp	r3, #0
 8006430:	d03e      	beq.n	80064b0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f042 0208 	orr.w	r2, r2, #8
 8006440:	601a      	str	r2, [r3, #0]
 8006442:	e035      	b.n	80064b0 <HAL_DMA_Start_IT+0x260>
 8006444:	40020010 	.word	0x40020010
 8006448:	40020028 	.word	0x40020028
 800644c:	40020040 	.word	0x40020040
 8006450:	40020058 	.word	0x40020058
 8006454:	40020070 	.word	0x40020070
 8006458:	40020088 	.word	0x40020088
 800645c:	400200a0 	.word	0x400200a0
 8006460:	400200b8 	.word	0x400200b8
 8006464:	40020410 	.word	0x40020410
 8006468:	40020428 	.word	0x40020428
 800646c:	40020440 	.word	0x40020440
 8006470:	40020458 	.word	0x40020458
 8006474:	40020470 	.word	0x40020470
 8006478:	40020488 	.word	0x40020488
 800647c:	400204a0 	.word	0x400204a0
 8006480:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f023 020e 	bic.w	r2, r3, #14
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f042 020a 	orr.w	r2, r2, #10
 8006496:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800649c:	2b00      	cmp	r3, #0
 800649e:	d007      	beq.n	80064b0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	681a      	ldr	r2, [r3, #0]
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f042 0204 	orr.w	r2, r2, #4
 80064ae:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a83      	ldr	r2, [pc, #524]	; (80066c4 <HAL_DMA_Start_IT+0x474>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d072      	beq.n	80065a0 <HAL_DMA_Start_IT+0x350>
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a82      	ldr	r2, [pc, #520]	; (80066c8 <HAL_DMA_Start_IT+0x478>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d06d      	beq.n	80065a0 <HAL_DMA_Start_IT+0x350>
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a80      	ldr	r2, [pc, #512]	; (80066cc <HAL_DMA_Start_IT+0x47c>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d068      	beq.n	80065a0 <HAL_DMA_Start_IT+0x350>
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a7f      	ldr	r2, [pc, #508]	; (80066d0 <HAL_DMA_Start_IT+0x480>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d063      	beq.n	80065a0 <HAL_DMA_Start_IT+0x350>
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a7d      	ldr	r2, [pc, #500]	; (80066d4 <HAL_DMA_Start_IT+0x484>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d05e      	beq.n	80065a0 <HAL_DMA_Start_IT+0x350>
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a7c      	ldr	r2, [pc, #496]	; (80066d8 <HAL_DMA_Start_IT+0x488>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d059      	beq.n	80065a0 <HAL_DMA_Start_IT+0x350>
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a7a      	ldr	r2, [pc, #488]	; (80066dc <HAL_DMA_Start_IT+0x48c>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d054      	beq.n	80065a0 <HAL_DMA_Start_IT+0x350>
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a79      	ldr	r2, [pc, #484]	; (80066e0 <HAL_DMA_Start_IT+0x490>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d04f      	beq.n	80065a0 <HAL_DMA_Start_IT+0x350>
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a77      	ldr	r2, [pc, #476]	; (80066e4 <HAL_DMA_Start_IT+0x494>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d04a      	beq.n	80065a0 <HAL_DMA_Start_IT+0x350>
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a76      	ldr	r2, [pc, #472]	; (80066e8 <HAL_DMA_Start_IT+0x498>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d045      	beq.n	80065a0 <HAL_DMA_Start_IT+0x350>
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a74      	ldr	r2, [pc, #464]	; (80066ec <HAL_DMA_Start_IT+0x49c>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d040      	beq.n	80065a0 <HAL_DMA_Start_IT+0x350>
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a73      	ldr	r2, [pc, #460]	; (80066f0 <HAL_DMA_Start_IT+0x4a0>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d03b      	beq.n	80065a0 <HAL_DMA_Start_IT+0x350>
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a71      	ldr	r2, [pc, #452]	; (80066f4 <HAL_DMA_Start_IT+0x4a4>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d036      	beq.n	80065a0 <HAL_DMA_Start_IT+0x350>
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a70      	ldr	r2, [pc, #448]	; (80066f8 <HAL_DMA_Start_IT+0x4a8>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d031      	beq.n	80065a0 <HAL_DMA_Start_IT+0x350>
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a6e      	ldr	r2, [pc, #440]	; (80066fc <HAL_DMA_Start_IT+0x4ac>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d02c      	beq.n	80065a0 <HAL_DMA_Start_IT+0x350>
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a6d      	ldr	r2, [pc, #436]	; (8006700 <HAL_DMA_Start_IT+0x4b0>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d027      	beq.n	80065a0 <HAL_DMA_Start_IT+0x350>
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a6b      	ldr	r2, [pc, #428]	; (8006704 <HAL_DMA_Start_IT+0x4b4>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d022      	beq.n	80065a0 <HAL_DMA_Start_IT+0x350>
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a6a      	ldr	r2, [pc, #424]	; (8006708 <HAL_DMA_Start_IT+0x4b8>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d01d      	beq.n	80065a0 <HAL_DMA_Start_IT+0x350>
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a68      	ldr	r2, [pc, #416]	; (800670c <HAL_DMA_Start_IT+0x4bc>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d018      	beq.n	80065a0 <HAL_DMA_Start_IT+0x350>
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a67      	ldr	r2, [pc, #412]	; (8006710 <HAL_DMA_Start_IT+0x4c0>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d013      	beq.n	80065a0 <HAL_DMA_Start_IT+0x350>
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a65      	ldr	r2, [pc, #404]	; (8006714 <HAL_DMA_Start_IT+0x4c4>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d00e      	beq.n	80065a0 <HAL_DMA_Start_IT+0x350>
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a64      	ldr	r2, [pc, #400]	; (8006718 <HAL_DMA_Start_IT+0x4c8>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d009      	beq.n	80065a0 <HAL_DMA_Start_IT+0x350>
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a62      	ldr	r2, [pc, #392]	; (800671c <HAL_DMA_Start_IT+0x4cc>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d004      	beq.n	80065a0 <HAL_DMA_Start_IT+0x350>
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a61      	ldr	r2, [pc, #388]	; (8006720 <HAL_DMA_Start_IT+0x4d0>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d101      	bne.n	80065a4 <HAL_DMA_Start_IT+0x354>
 80065a0:	2301      	movs	r3, #1
 80065a2:	e000      	b.n	80065a6 <HAL_DMA_Start_IT+0x356>
 80065a4:	2300      	movs	r3, #0
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d01a      	beq.n	80065e0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d007      	beq.n	80065c8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80065c6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d007      	beq.n	80065e0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065d4:	681a      	ldr	r2, [r3, #0]
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80065de:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a37      	ldr	r2, [pc, #220]	; (80066c4 <HAL_DMA_Start_IT+0x474>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d04a      	beq.n	8006680 <HAL_DMA_Start_IT+0x430>
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a36      	ldr	r2, [pc, #216]	; (80066c8 <HAL_DMA_Start_IT+0x478>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d045      	beq.n	8006680 <HAL_DMA_Start_IT+0x430>
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a34      	ldr	r2, [pc, #208]	; (80066cc <HAL_DMA_Start_IT+0x47c>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d040      	beq.n	8006680 <HAL_DMA_Start_IT+0x430>
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a33      	ldr	r2, [pc, #204]	; (80066d0 <HAL_DMA_Start_IT+0x480>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d03b      	beq.n	8006680 <HAL_DMA_Start_IT+0x430>
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a31      	ldr	r2, [pc, #196]	; (80066d4 <HAL_DMA_Start_IT+0x484>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d036      	beq.n	8006680 <HAL_DMA_Start_IT+0x430>
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a30      	ldr	r2, [pc, #192]	; (80066d8 <HAL_DMA_Start_IT+0x488>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d031      	beq.n	8006680 <HAL_DMA_Start_IT+0x430>
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a2e      	ldr	r2, [pc, #184]	; (80066dc <HAL_DMA_Start_IT+0x48c>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d02c      	beq.n	8006680 <HAL_DMA_Start_IT+0x430>
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a2d      	ldr	r2, [pc, #180]	; (80066e0 <HAL_DMA_Start_IT+0x490>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d027      	beq.n	8006680 <HAL_DMA_Start_IT+0x430>
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a2b      	ldr	r2, [pc, #172]	; (80066e4 <HAL_DMA_Start_IT+0x494>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d022      	beq.n	8006680 <HAL_DMA_Start_IT+0x430>
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a2a      	ldr	r2, [pc, #168]	; (80066e8 <HAL_DMA_Start_IT+0x498>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d01d      	beq.n	8006680 <HAL_DMA_Start_IT+0x430>
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a28      	ldr	r2, [pc, #160]	; (80066ec <HAL_DMA_Start_IT+0x49c>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d018      	beq.n	8006680 <HAL_DMA_Start_IT+0x430>
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a27      	ldr	r2, [pc, #156]	; (80066f0 <HAL_DMA_Start_IT+0x4a0>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d013      	beq.n	8006680 <HAL_DMA_Start_IT+0x430>
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a25      	ldr	r2, [pc, #148]	; (80066f4 <HAL_DMA_Start_IT+0x4a4>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d00e      	beq.n	8006680 <HAL_DMA_Start_IT+0x430>
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a24      	ldr	r2, [pc, #144]	; (80066f8 <HAL_DMA_Start_IT+0x4a8>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d009      	beq.n	8006680 <HAL_DMA_Start_IT+0x430>
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a22      	ldr	r2, [pc, #136]	; (80066fc <HAL_DMA_Start_IT+0x4ac>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d004      	beq.n	8006680 <HAL_DMA_Start_IT+0x430>
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a21      	ldr	r2, [pc, #132]	; (8006700 <HAL_DMA_Start_IT+0x4b0>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d108      	bne.n	8006692 <HAL_DMA_Start_IT+0x442>
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f042 0201 	orr.w	r2, r2, #1
 800668e:	601a      	str	r2, [r3, #0]
 8006690:	e012      	b.n	80066b8 <HAL_DMA_Start_IT+0x468>
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f042 0201 	orr.w	r2, r2, #1
 80066a0:	601a      	str	r2, [r3, #0]
 80066a2:	e009      	b.n	80066b8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80066aa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2200      	movs	r2, #0
 80066b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80066b4:	2301      	movs	r3, #1
 80066b6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80066b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3718      	adds	r7, #24
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	bf00      	nop
 80066c4:	40020010 	.word	0x40020010
 80066c8:	40020028 	.word	0x40020028
 80066cc:	40020040 	.word	0x40020040
 80066d0:	40020058 	.word	0x40020058
 80066d4:	40020070 	.word	0x40020070
 80066d8:	40020088 	.word	0x40020088
 80066dc:	400200a0 	.word	0x400200a0
 80066e0:	400200b8 	.word	0x400200b8
 80066e4:	40020410 	.word	0x40020410
 80066e8:	40020428 	.word	0x40020428
 80066ec:	40020440 	.word	0x40020440
 80066f0:	40020458 	.word	0x40020458
 80066f4:	40020470 	.word	0x40020470
 80066f8:	40020488 	.word	0x40020488
 80066fc:	400204a0 	.word	0x400204a0
 8006700:	400204b8 	.word	0x400204b8
 8006704:	58025408 	.word	0x58025408
 8006708:	5802541c 	.word	0x5802541c
 800670c:	58025430 	.word	0x58025430
 8006710:	58025444 	.word	0x58025444
 8006714:	58025458 	.word	0x58025458
 8006718:	5802546c 	.word	0x5802546c
 800671c:	58025480 	.word	0x58025480
 8006720:	58025494 	.word	0x58025494

08006724 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b086      	sub	sp, #24
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800672c:	f7fd f90c 	bl	8003948 <HAL_GetTick>
 8006730:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d101      	bne.n	800673c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	e2dc      	b.n	8006cf6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006742:	b2db      	uxtb	r3, r3
 8006744:	2b02      	cmp	r3, #2
 8006746:	d008      	beq.n	800675a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2280      	movs	r2, #128	; 0x80
 800674c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2200      	movs	r2, #0
 8006752:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	e2cd      	b.n	8006cf6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a76      	ldr	r2, [pc, #472]	; (8006938 <HAL_DMA_Abort+0x214>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d04a      	beq.n	80067fa <HAL_DMA_Abort+0xd6>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a74      	ldr	r2, [pc, #464]	; (800693c <HAL_DMA_Abort+0x218>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d045      	beq.n	80067fa <HAL_DMA_Abort+0xd6>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a73      	ldr	r2, [pc, #460]	; (8006940 <HAL_DMA_Abort+0x21c>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d040      	beq.n	80067fa <HAL_DMA_Abort+0xd6>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a71      	ldr	r2, [pc, #452]	; (8006944 <HAL_DMA_Abort+0x220>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d03b      	beq.n	80067fa <HAL_DMA_Abort+0xd6>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a70      	ldr	r2, [pc, #448]	; (8006948 <HAL_DMA_Abort+0x224>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d036      	beq.n	80067fa <HAL_DMA_Abort+0xd6>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a6e      	ldr	r2, [pc, #440]	; (800694c <HAL_DMA_Abort+0x228>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d031      	beq.n	80067fa <HAL_DMA_Abort+0xd6>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a6d      	ldr	r2, [pc, #436]	; (8006950 <HAL_DMA_Abort+0x22c>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d02c      	beq.n	80067fa <HAL_DMA_Abort+0xd6>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a6b      	ldr	r2, [pc, #428]	; (8006954 <HAL_DMA_Abort+0x230>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d027      	beq.n	80067fa <HAL_DMA_Abort+0xd6>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a6a      	ldr	r2, [pc, #424]	; (8006958 <HAL_DMA_Abort+0x234>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d022      	beq.n	80067fa <HAL_DMA_Abort+0xd6>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a68      	ldr	r2, [pc, #416]	; (800695c <HAL_DMA_Abort+0x238>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d01d      	beq.n	80067fa <HAL_DMA_Abort+0xd6>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a67      	ldr	r2, [pc, #412]	; (8006960 <HAL_DMA_Abort+0x23c>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d018      	beq.n	80067fa <HAL_DMA_Abort+0xd6>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a65      	ldr	r2, [pc, #404]	; (8006964 <HAL_DMA_Abort+0x240>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d013      	beq.n	80067fa <HAL_DMA_Abort+0xd6>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a64      	ldr	r2, [pc, #400]	; (8006968 <HAL_DMA_Abort+0x244>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d00e      	beq.n	80067fa <HAL_DMA_Abort+0xd6>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a62      	ldr	r2, [pc, #392]	; (800696c <HAL_DMA_Abort+0x248>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d009      	beq.n	80067fa <HAL_DMA_Abort+0xd6>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a61      	ldr	r2, [pc, #388]	; (8006970 <HAL_DMA_Abort+0x24c>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d004      	beq.n	80067fa <HAL_DMA_Abort+0xd6>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a5f      	ldr	r2, [pc, #380]	; (8006974 <HAL_DMA_Abort+0x250>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d101      	bne.n	80067fe <HAL_DMA_Abort+0xda>
 80067fa:	2301      	movs	r3, #1
 80067fc:	e000      	b.n	8006800 <HAL_DMA_Abort+0xdc>
 80067fe:	2300      	movs	r3, #0
 8006800:	2b00      	cmp	r3, #0
 8006802:	d013      	beq.n	800682c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f022 021e 	bic.w	r2, r2, #30
 8006812:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	695a      	ldr	r2, [r3, #20]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006822:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	617b      	str	r3, [r7, #20]
 800682a:	e00a      	b.n	8006842 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f022 020e 	bic.w	r2, r2, #14
 800683a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a3c      	ldr	r2, [pc, #240]	; (8006938 <HAL_DMA_Abort+0x214>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d072      	beq.n	8006932 <HAL_DMA_Abort+0x20e>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a3a      	ldr	r2, [pc, #232]	; (800693c <HAL_DMA_Abort+0x218>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d06d      	beq.n	8006932 <HAL_DMA_Abort+0x20e>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a39      	ldr	r2, [pc, #228]	; (8006940 <HAL_DMA_Abort+0x21c>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d068      	beq.n	8006932 <HAL_DMA_Abort+0x20e>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a37      	ldr	r2, [pc, #220]	; (8006944 <HAL_DMA_Abort+0x220>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d063      	beq.n	8006932 <HAL_DMA_Abort+0x20e>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a36      	ldr	r2, [pc, #216]	; (8006948 <HAL_DMA_Abort+0x224>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d05e      	beq.n	8006932 <HAL_DMA_Abort+0x20e>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a34      	ldr	r2, [pc, #208]	; (800694c <HAL_DMA_Abort+0x228>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d059      	beq.n	8006932 <HAL_DMA_Abort+0x20e>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a33      	ldr	r2, [pc, #204]	; (8006950 <HAL_DMA_Abort+0x22c>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d054      	beq.n	8006932 <HAL_DMA_Abort+0x20e>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a31      	ldr	r2, [pc, #196]	; (8006954 <HAL_DMA_Abort+0x230>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d04f      	beq.n	8006932 <HAL_DMA_Abort+0x20e>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a30      	ldr	r2, [pc, #192]	; (8006958 <HAL_DMA_Abort+0x234>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d04a      	beq.n	8006932 <HAL_DMA_Abort+0x20e>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a2e      	ldr	r2, [pc, #184]	; (800695c <HAL_DMA_Abort+0x238>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d045      	beq.n	8006932 <HAL_DMA_Abort+0x20e>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a2d      	ldr	r2, [pc, #180]	; (8006960 <HAL_DMA_Abort+0x23c>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d040      	beq.n	8006932 <HAL_DMA_Abort+0x20e>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a2b      	ldr	r2, [pc, #172]	; (8006964 <HAL_DMA_Abort+0x240>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d03b      	beq.n	8006932 <HAL_DMA_Abort+0x20e>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a2a      	ldr	r2, [pc, #168]	; (8006968 <HAL_DMA_Abort+0x244>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d036      	beq.n	8006932 <HAL_DMA_Abort+0x20e>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a28      	ldr	r2, [pc, #160]	; (800696c <HAL_DMA_Abort+0x248>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d031      	beq.n	8006932 <HAL_DMA_Abort+0x20e>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a27      	ldr	r2, [pc, #156]	; (8006970 <HAL_DMA_Abort+0x24c>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d02c      	beq.n	8006932 <HAL_DMA_Abort+0x20e>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a25      	ldr	r2, [pc, #148]	; (8006974 <HAL_DMA_Abort+0x250>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d027      	beq.n	8006932 <HAL_DMA_Abort+0x20e>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a24      	ldr	r2, [pc, #144]	; (8006978 <HAL_DMA_Abort+0x254>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d022      	beq.n	8006932 <HAL_DMA_Abort+0x20e>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a22      	ldr	r2, [pc, #136]	; (800697c <HAL_DMA_Abort+0x258>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d01d      	beq.n	8006932 <HAL_DMA_Abort+0x20e>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a21      	ldr	r2, [pc, #132]	; (8006980 <HAL_DMA_Abort+0x25c>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d018      	beq.n	8006932 <HAL_DMA_Abort+0x20e>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a1f      	ldr	r2, [pc, #124]	; (8006984 <HAL_DMA_Abort+0x260>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d013      	beq.n	8006932 <HAL_DMA_Abort+0x20e>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a1e      	ldr	r2, [pc, #120]	; (8006988 <HAL_DMA_Abort+0x264>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d00e      	beq.n	8006932 <HAL_DMA_Abort+0x20e>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a1c      	ldr	r2, [pc, #112]	; (800698c <HAL_DMA_Abort+0x268>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d009      	beq.n	8006932 <HAL_DMA_Abort+0x20e>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a1b      	ldr	r2, [pc, #108]	; (8006990 <HAL_DMA_Abort+0x26c>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d004      	beq.n	8006932 <HAL_DMA_Abort+0x20e>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a19      	ldr	r2, [pc, #100]	; (8006994 <HAL_DMA_Abort+0x270>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d132      	bne.n	8006998 <HAL_DMA_Abort+0x274>
 8006932:	2301      	movs	r3, #1
 8006934:	e031      	b.n	800699a <HAL_DMA_Abort+0x276>
 8006936:	bf00      	nop
 8006938:	40020010 	.word	0x40020010
 800693c:	40020028 	.word	0x40020028
 8006940:	40020040 	.word	0x40020040
 8006944:	40020058 	.word	0x40020058
 8006948:	40020070 	.word	0x40020070
 800694c:	40020088 	.word	0x40020088
 8006950:	400200a0 	.word	0x400200a0
 8006954:	400200b8 	.word	0x400200b8
 8006958:	40020410 	.word	0x40020410
 800695c:	40020428 	.word	0x40020428
 8006960:	40020440 	.word	0x40020440
 8006964:	40020458 	.word	0x40020458
 8006968:	40020470 	.word	0x40020470
 800696c:	40020488 	.word	0x40020488
 8006970:	400204a0 	.word	0x400204a0
 8006974:	400204b8 	.word	0x400204b8
 8006978:	58025408 	.word	0x58025408
 800697c:	5802541c 	.word	0x5802541c
 8006980:	58025430 	.word	0x58025430
 8006984:	58025444 	.word	0x58025444
 8006988:	58025458 	.word	0x58025458
 800698c:	5802546c 	.word	0x5802546c
 8006990:	58025480 	.word	0x58025480
 8006994:	58025494 	.word	0x58025494
 8006998:	2300      	movs	r3, #0
 800699a:	2b00      	cmp	r3, #0
 800699c:	d007      	beq.n	80069ae <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80069ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a6d      	ldr	r2, [pc, #436]	; (8006b68 <HAL_DMA_Abort+0x444>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d04a      	beq.n	8006a4e <HAL_DMA_Abort+0x32a>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a6b      	ldr	r2, [pc, #428]	; (8006b6c <HAL_DMA_Abort+0x448>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d045      	beq.n	8006a4e <HAL_DMA_Abort+0x32a>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a6a      	ldr	r2, [pc, #424]	; (8006b70 <HAL_DMA_Abort+0x44c>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d040      	beq.n	8006a4e <HAL_DMA_Abort+0x32a>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a68      	ldr	r2, [pc, #416]	; (8006b74 <HAL_DMA_Abort+0x450>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d03b      	beq.n	8006a4e <HAL_DMA_Abort+0x32a>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a67      	ldr	r2, [pc, #412]	; (8006b78 <HAL_DMA_Abort+0x454>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d036      	beq.n	8006a4e <HAL_DMA_Abort+0x32a>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a65      	ldr	r2, [pc, #404]	; (8006b7c <HAL_DMA_Abort+0x458>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d031      	beq.n	8006a4e <HAL_DMA_Abort+0x32a>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a64      	ldr	r2, [pc, #400]	; (8006b80 <HAL_DMA_Abort+0x45c>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d02c      	beq.n	8006a4e <HAL_DMA_Abort+0x32a>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a62      	ldr	r2, [pc, #392]	; (8006b84 <HAL_DMA_Abort+0x460>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d027      	beq.n	8006a4e <HAL_DMA_Abort+0x32a>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a61      	ldr	r2, [pc, #388]	; (8006b88 <HAL_DMA_Abort+0x464>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d022      	beq.n	8006a4e <HAL_DMA_Abort+0x32a>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a5f      	ldr	r2, [pc, #380]	; (8006b8c <HAL_DMA_Abort+0x468>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d01d      	beq.n	8006a4e <HAL_DMA_Abort+0x32a>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a5e      	ldr	r2, [pc, #376]	; (8006b90 <HAL_DMA_Abort+0x46c>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d018      	beq.n	8006a4e <HAL_DMA_Abort+0x32a>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a5c      	ldr	r2, [pc, #368]	; (8006b94 <HAL_DMA_Abort+0x470>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d013      	beq.n	8006a4e <HAL_DMA_Abort+0x32a>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a5b      	ldr	r2, [pc, #364]	; (8006b98 <HAL_DMA_Abort+0x474>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d00e      	beq.n	8006a4e <HAL_DMA_Abort+0x32a>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a59      	ldr	r2, [pc, #356]	; (8006b9c <HAL_DMA_Abort+0x478>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d009      	beq.n	8006a4e <HAL_DMA_Abort+0x32a>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a58      	ldr	r2, [pc, #352]	; (8006ba0 <HAL_DMA_Abort+0x47c>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d004      	beq.n	8006a4e <HAL_DMA_Abort+0x32a>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a56      	ldr	r2, [pc, #344]	; (8006ba4 <HAL_DMA_Abort+0x480>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d108      	bne.n	8006a60 <HAL_DMA_Abort+0x33c>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	681a      	ldr	r2, [r3, #0]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f022 0201 	bic.w	r2, r2, #1
 8006a5c:	601a      	str	r2, [r3, #0]
 8006a5e:	e007      	b.n	8006a70 <HAL_DMA_Abort+0x34c>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	681a      	ldr	r2, [r3, #0]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f022 0201 	bic.w	r2, r2, #1
 8006a6e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006a70:	e013      	b.n	8006a9a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006a72:	f7fc ff69 	bl	8003948 <HAL_GetTick>
 8006a76:	4602      	mov	r2, r0
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	1ad3      	subs	r3, r2, r3
 8006a7c:	2b05      	cmp	r3, #5
 8006a7e:	d90c      	bls.n	8006a9a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2220      	movs	r2, #32
 8006a84:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2203      	movs	r2, #3
 8006a8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2200      	movs	r2, #0
 8006a92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8006a96:	2301      	movs	r3, #1
 8006a98:	e12d      	b.n	8006cf6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f003 0301 	and.w	r3, r3, #1
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d1e5      	bne.n	8006a72 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a2f      	ldr	r2, [pc, #188]	; (8006b68 <HAL_DMA_Abort+0x444>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d04a      	beq.n	8006b46 <HAL_DMA_Abort+0x422>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a2d      	ldr	r2, [pc, #180]	; (8006b6c <HAL_DMA_Abort+0x448>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d045      	beq.n	8006b46 <HAL_DMA_Abort+0x422>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a2c      	ldr	r2, [pc, #176]	; (8006b70 <HAL_DMA_Abort+0x44c>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d040      	beq.n	8006b46 <HAL_DMA_Abort+0x422>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a2a      	ldr	r2, [pc, #168]	; (8006b74 <HAL_DMA_Abort+0x450>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d03b      	beq.n	8006b46 <HAL_DMA_Abort+0x422>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a29      	ldr	r2, [pc, #164]	; (8006b78 <HAL_DMA_Abort+0x454>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d036      	beq.n	8006b46 <HAL_DMA_Abort+0x422>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a27      	ldr	r2, [pc, #156]	; (8006b7c <HAL_DMA_Abort+0x458>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d031      	beq.n	8006b46 <HAL_DMA_Abort+0x422>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a26      	ldr	r2, [pc, #152]	; (8006b80 <HAL_DMA_Abort+0x45c>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d02c      	beq.n	8006b46 <HAL_DMA_Abort+0x422>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a24      	ldr	r2, [pc, #144]	; (8006b84 <HAL_DMA_Abort+0x460>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d027      	beq.n	8006b46 <HAL_DMA_Abort+0x422>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a23      	ldr	r2, [pc, #140]	; (8006b88 <HAL_DMA_Abort+0x464>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d022      	beq.n	8006b46 <HAL_DMA_Abort+0x422>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a21      	ldr	r2, [pc, #132]	; (8006b8c <HAL_DMA_Abort+0x468>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d01d      	beq.n	8006b46 <HAL_DMA_Abort+0x422>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a20      	ldr	r2, [pc, #128]	; (8006b90 <HAL_DMA_Abort+0x46c>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d018      	beq.n	8006b46 <HAL_DMA_Abort+0x422>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a1e      	ldr	r2, [pc, #120]	; (8006b94 <HAL_DMA_Abort+0x470>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d013      	beq.n	8006b46 <HAL_DMA_Abort+0x422>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a1d      	ldr	r2, [pc, #116]	; (8006b98 <HAL_DMA_Abort+0x474>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d00e      	beq.n	8006b46 <HAL_DMA_Abort+0x422>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a1b      	ldr	r2, [pc, #108]	; (8006b9c <HAL_DMA_Abort+0x478>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d009      	beq.n	8006b46 <HAL_DMA_Abort+0x422>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a1a      	ldr	r2, [pc, #104]	; (8006ba0 <HAL_DMA_Abort+0x47c>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d004      	beq.n	8006b46 <HAL_DMA_Abort+0x422>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a18      	ldr	r2, [pc, #96]	; (8006ba4 <HAL_DMA_Abort+0x480>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d101      	bne.n	8006b4a <HAL_DMA_Abort+0x426>
 8006b46:	2301      	movs	r3, #1
 8006b48:	e000      	b.n	8006b4c <HAL_DMA_Abort+0x428>
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d02b      	beq.n	8006ba8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b54:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b5a:	f003 031f 	and.w	r3, r3, #31
 8006b5e:	223f      	movs	r2, #63	; 0x3f
 8006b60:	409a      	lsls	r2, r3
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	609a      	str	r2, [r3, #8]
 8006b66:	e02a      	b.n	8006bbe <HAL_DMA_Abort+0x49a>
 8006b68:	40020010 	.word	0x40020010
 8006b6c:	40020028 	.word	0x40020028
 8006b70:	40020040 	.word	0x40020040
 8006b74:	40020058 	.word	0x40020058
 8006b78:	40020070 	.word	0x40020070
 8006b7c:	40020088 	.word	0x40020088
 8006b80:	400200a0 	.word	0x400200a0
 8006b84:	400200b8 	.word	0x400200b8
 8006b88:	40020410 	.word	0x40020410
 8006b8c:	40020428 	.word	0x40020428
 8006b90:	40020440 	.word	0x40020440
 8006b94:	40020458 	.word	0x40020458
 8006b98:	40020470 	.word	0x40020470
 8006b9c:	40020488 	.word	0x40020488
 8006ba0:	400204a0 	.word	0x400204a0
 8006ba4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bac:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bb2:	f003 031f 	and.w	r3, r3, #31
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	409a      	lsls	r2, r3
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a4f      	ldr	r2, [pc, #316]	; (8006d00 <HAL_DMA_Abort+0x5dc>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d072      	beq.n	8006cae <HAL_DMA_Abort+0x58a>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a4d      	ldr	r2, [pc, #308]	; (8006d04 <HAL_DMA_Abort+0x5e0>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d06d      	beq.n	8006cae <HAL_DMA_Abort+0x58a>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a4c      	ldr	r2, [pc, #304]	; (8006d08 <HAL_DMA_Abort+0x5e4>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d068      	beq.n	8006cae <HAL_DMA_Abort+0x58a>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a4a      	ldr	r2, [pc, #296]	; (8006d0c <HAL_DMA_Abort+0x5e8>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d063      	beq.n	8006cae <HAL_DMA_Abort+0x58a>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a49      	ldr	r2, [pc, #292]	; (8006d10 <HAL_DMA_Abort+0x5ec>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d05e      	beq.n	8006cae <HAL_DMA_Abort+0x58a>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a47      	ldr	r2, [pc, #284]	; (8006d14 <HAL_DMA_Abort+0x5f0>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d059      	beq.n	8006cae <HAL_DMA_Abort+0x58a>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a46      	ldr	r2, [pc, #280]	; (8006d18 <HAL_DMA_Abort+0x5f4>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d054      	beq.n	8006cae <HAL_DMA_Abort+0x58a>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a44      	ldr	r2, [pc, #272]	; (8006d1c <HAL_DMA_Abort+0x5f8>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d04f      	beq.n	8006cae <HAL_DMA_Abort+0x58a>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a43      	ldr	r2, [pc, #268]	; (8006d20 <HAL_DMA_Abort+0x5fc>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d04a      	beq.n	8006cae <HAL_DMA_Abort+0x58a>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a41      	ldr	r2, [pc, #260]	; (8006d24 <HAL_DMA_Abort+0x600>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d045      	beq.n	8006cae <HAL_DMA_Abort+0x58a>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a40      	ldr	r2, [pc, #256]	; (8006d28 <HAL_DMA_Abort+0x604>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d040      	beq.n	8006cae <HAL_DMA_Abort+0x58a>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a3e      	ldr	r2, [pc, #248]	; (8006d2c <HAL_DMA_Abort+0x608>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d03b      	beq.n	8006cae <HAL_DMA_Abort+0x58a>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a3d      	ldr	r2, [pc, #244]	; (8006d30 <HAL_DMA_Abort+0x60c>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d036      	beq.n	8006cae <HAL_DMA_Abort+0x58a>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a3b      	ldr	r2, [pc, #236]	; (8006d34 <HAL_DMA_Abort+0x610>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d031      	beq.n	8006cae <HAL_DMA_Abort+0x58a>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a3a      	ldr	r2, [pc, #232]	; (8006d38 <HAL_DMA_Abort+0x614>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d02c      	beq.n	8006cae <HAL_DMA_Abort+0x58a>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a38      	ldr	r2, [pc, #224]	; (8006d3c <HAL_DMA_Abort+0x618>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d027      	beq.n	8006cae <HAL_DMA_Abort+0x58a>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a37      	ldr	r2, [pc, #220]	; (8006d40 <HAL_DMA_Abort+0x61c>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d022      	beq.n	8006cae <HAL_DMA_Abort+0x58a>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a35      	ldr	r2, [pc, #212]	; (8006d44 <HAL_DMA_Abort+0x620>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d01d      	beq.n	8006cae <HAL_DMA_Abort+0x58a>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a34      	ldr	r2, [pc, #208]	; (8006d48 <HAL_DMA_Abort+0x624>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d018      	beq.n	8006cae <HAL_DMA_Abort+0x58a>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a32      	ldr	r2, [pc, #200]	; (8006d4c <HAL_DMA_Abort+0x628>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d013      	beq.n	8006cae <HAL_DMA_Abort+0x58a>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a31      	ldr	r2, [pc, #196]	; (8006d50 <HAL_DMA_Abort+0x62c>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d00e      	beq.n	8006cae <HAL_DMA_Abort+0x58a>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a2f      	ldr	r2, [pc, #188]	; (8006d54 <HAL_DMA_Abort+0x630>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d009      	beq.n	8006cae <HAL_DMA_Abort+0x58a>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a2e      	ldr	r2, [pc, #184]	; (8006d58 <HAL_DMA_Abort+0x634>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d004      	beq.n	8006cae <HAL_DMA_Abort+0x58a>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a2c      	ldr	r2, [pc, #176]	; (8006d5c <HAL_DMA_Abort+0x638>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d101      	bne.n	8006cb2 <HAL_DMA_Abort+0x58e>
 8006cae:	2301      	movs	r3, #1
 8006cb0:	e000      	b.n	8006cb4 <HAL_DMA_Abort+0x590>
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d015      	beq.n	8006ce4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cbc:	687a      	ldr	r2, [r7, #4]
 8006cbe:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006cc0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d00c      	beq.n	8006ce4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cce:	681a      	ldr	r2, [r3, #0]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cd4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006cd8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cde:	687a      	ldr	r2, [r7, #4]
 8006ce0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006ce2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8006cf4:	2300      	movs	r3, #0
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3718      	adds	r7, #24
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}
 8006cfe:	bf00      	nop
 8006d00:	40020010 	.word	0x40020010
 8006d04:	40020028 	.word	0x40020028
 8006d08:	40020040 	.word	0x40020040
 8006d0c:	40020058 	.word	0x40020058
 8006d10:	40020070 	.word	0x40020070
 8006d14:	40020088 	.word	0x40020088
 8006d18:	400200a0 	.word	0x400200a0
 8006d1c:	400200b8 	.word	0x400200b8
 8006d20:	40020410 	.word	0x40020410
 8006d24:	40020428 	.word	0x40020428
 8006d28:	40020440 	.word	0x40020440
 8006d2c:	40020458 	.word	0x40020458
 8006d30:	40020470 	.word	0x40020470
 8006d34:	40020488 	.word	0x40020488
 8006d38:	400204a0 	.word	0x400204a0
 8006d3c:	400204b8 	.word	0x400204b8
 8006d40:	58025408 	.word	0x58025408
 8006d44:	5802541c 	.word	0x5802541c
 8006d48:	58025430 	.word	0x58025430
 8006d4c:	58025444 	.word	0x58025444
 8006d50:	58025458 	.word	0x58025458
 8006d54:	5802546c 	.word	0x5802546c
 8006d58:	58025480 	.word	0x58025480
 8006d5c:	58025494 	.word	0x58025494

08006d60 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b084      	sub	sp, #16
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d101      	bne.n	8006d72 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	e237      	b.n	80071e2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006d78:	b2db      	uxtb	r3, r3
 8006d7a:	2b02      	cmp	r3, #2
 8006d7c:	d004      	beq.n	8006d88 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2280      	movs	r2, #128	; 0x80
 8006d82:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006d84:	2301      	movs	r3, #1
 8006d86:	e22c      	b.n	80071e2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a5c      	ldr	r2, [pc, #368]	; (8006f00 <HAL_DMA_Abort_IT+0x1a0>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d04a      	beq.n	8006e28 <HAL_DMA_Abort_IT+0xc8>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a5b      	ldr	r2, [pc, #364]	; (8006f04 <HAL_DMA_Abort_IT+0x1a4>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d045      	beq.n	8006e28 <HAL_DMA_Abort_IT+0xc8>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a59      	ldr	r2, [pc, #356]	; (8006f08 <HAL_DMA_Abort_IT+0x1a8>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d040      	beq.n	8006e28 <HAL_DMA_Abort_IT+0xc8>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a58      	ldr	r2, [pc, #352]	; (8006f0c <HAL_DMA_Abort_IT+0x1ac>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d03b      	beq.n	8006e28 <HAL_DMA_Abort_IT+0xc8>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a56      	ldr	r2, [pc, #344]	; (8006f10 <HAL_DMA_Abort_IT+0x1b0>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d036      	beq.n	8006e28 <HAL_DMA_Abort_IT+0xc8>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a55      	ldr	r2, [pc, #340]	; (8006f14 <HAL_DMA_Abort_IT+0x1b4>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d031      	beq.n	8006e28 <HAL_DMA_Abort_IT+0xc8>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a53      	ldr	r2, [pc, #332]	; (8006f18 <HAL_DMA_Abort_IT+0x1b8>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d02c      	beq.n	8006e28 <HAL_DMA_Abort_IT+0xc8>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a52      	ldr	r2, [pc, #328]	; (8006f1c <HAL_DMA_Abort_IT+0x1bc>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d027      	beq.n	8006e28 <HAL_DMA_Abort_IT+0xc8>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a50      	ldr	r2, [pc, #320]	; (8006f20 <HAL_DMA_Abort_IT+0x1c0>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d022      	beq.n	8006e28 <HAL_DMA_Abort_IT+0xc8>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a4f      	ldr	r2, [pc, #316]	; (8006f24 <HAL_DMA_Abort_IT+0x1c4>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d01d      	beq.n	8006e28 <HAL_DMA_Abort_IT+0xc8>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a4d      	ldr	r2, [pc, #308]	; (8006f28 <HAL_DMA_Abort_IT+0x1c8>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d018      	beq.n	8006e28 <HAL_DMA_Abort_IT+0xc8>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a4c      	ldr	r2, [pc, #304]	; (8006f2c <HAL_DMA_Abort_IT+0x1cc>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d013      	beq.n	8006e28 <HAL_DMA_Abort_IT+0xc8>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a4a      	ldr	r2, [pc, #296]	; (8006f30 <HAL_DMA_Abort_IT+0x1d0>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d00e      	beq.n	8006e28 <HAL_DMA_Abort_IT+0xc8>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a49      	ldr	r2, [pc, #292]	; (8006f34 <HAL_DMA_Abort_IT+0x1d4>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d009      	beq.n	8006e28 <HAL_DMA_Abort_IT+0xc8>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a47      	ldr	r2, [pc, #284]	; (8006f38 <HAL_DMA_Abort_IT+0x1d8>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d004      	beq.n	8006e28 <HAL_DMA_Abort_IT+0xc8>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a46      	ldr	r2, [pc, #280]	; (8006f3c <HAL_DMA_Abort_IT+0x1dc>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d101      	bne.n	8006e2c <HAL_DMA_Abort_IT+0xcc>
 8006e28:	2301      	movs	r3, #1
 8006e2a:	e000      	b.n	8006e2e <HAL_DMA_Abort_IT+0xce>
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	f000 8086 	beq.w	8006f40 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2204      	movs	r2, #4
 8006e38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a2f      	ldr	r2, [pc, #188]	; (8006f00 <HAL_DMA_Abort_IT+0x1a0>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d04a      	beq.n	8006edc <HAL_DMA_Abort_IT+0x17c>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a2e      	ldr	r2, [pc, #184]	; (8006f04 <HAL_DMA_Abort_IT+0x1a4>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d045      	beq.n	8006edc <HAL_DMA_Abort_IT+0x17c>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a2c      	ldr	r2, [pc, #176]	; (8006f08 <HAL_DMA_Abort_IT+0x1a8>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d040      	beq.n	8006edc <HAL_DMA_Abort_IT+0x17c>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a2b      	ldr	r2, [pc, #172]	; (8006f0c <HAL_DMA_Abort_IT+0x1ac>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d03b      	beq.n	8006edc <HAL_DMA_Abort_IT+0x17c>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a29      	ldr	r2, [pc, #164]	; (8006f10 <HAL_DMA_Abort_IT+0x1b0>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d036      	beq.n	8006edc <HAL_DMA_Abort_IT+0x17c>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a28      	ldr	r2, [pc, #160]	; (8006f14 <HAL_DMA_Abort_IT+0x1b4>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d031      	beq.n	8006edc <HAL_DMA_Abort_IT+0x17c>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a26      	ldr	r2, [pc, #152]	; (8006f18 <HAL_DMA_Abort_IT+0x1b8>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d02c      	beq.n	8006edc <HAL_DMA_Abort_IT+0x17c>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a25      	ldr	r2, [pc, #148]	; (8006f1c <HAL_DMA_Abort_IT+0x1bc>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d027      	beq.n	8006edc <HAL_DMA_Abort_IT+0x17c>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a23      	ldr	r2, [pc, #140]	; (8006f20 <HAL_DMA_Abort_IT+0x1c0>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d022      	beq.n	8006edc <HAL_DMA_Abort_IT+0x17c>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a22      	ldr	r2, [pc, #136]	; (8006f24 <HAL_DMA_Abort_IT+0x1c4>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d01d      	beq.n	8006edc <HAL_DMA_Abort_IT+0x17c>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a20      	ldr	r2, [pc, #128]	; (8006f28 <HAL_DMA_Abort_IT+0x1c8>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d018      	beq.n	8006edc <HAL_DMA_Abort_IT+0x17c>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a1f      	ldr	r2, [pc, #124]	; (8006f2c <HAL_DMA_Abort_IT+0x1cc>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d013      	beq.n	8006edc <HAL_DMA_Abort_IT+0x17c>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a1d      	ldr	r2, [pc, #116]	; (8006f30 <HAL_DMA_Abort_IT+0x1d0>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d00e      	beq.n	8006edc <HAL_DMA_Abort_IT+0x17c>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a1c      	ldr	r2, [pc, #112]	; (8006f34 <HAL_DMA_Abort_IT+0x1d4>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d009      	beq.n	8006edc <HAL_DMA_Abort_IT+0x17c>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a1a      	ldr	r2, [pc, #104]	; (8006f38 <HAL_DMA_Abort_IT+0x1d8>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d004      	beq.n	8006edc <HAL_DMA_Abort_IT+0x17c>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a19      	ldr	r2, [pc, #100]	; (8006f3c <HAL_DMA_Abort_IT+0x1dc>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d108      	bne.n	8006eee <HAL_DMA_Abort_IT+0x18e>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	681a      	ldr	r2, [r3, #0]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f022 0201 	bic.w	r2, r2, #1
 8006eea:	601a      	str	r2, [r3, #0]
 8006eec:	e178      	b.n	80071e0 <HAL_DMA_Abort_IT+0x480>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	681a      	ldr	r2, [r3, #0]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f022 0201 	bic.w	r2, r2, #1
 8006efc:	601a      	str	r2, [r3, #0]
 8006efe:	e16f      	b.n	80071e0 <HAL_DMA_Abort_IT+0x480>
 8006f00:	40020010 	.word	0x40020010
 8006f04:	40020028 	.word	0x40020028
 8006f08:	40020040 	.word	0x40020040
 8006f0c:	40020058 	.word	0x40020058
 8006f10:	40020070 	.word	0x40020070
 8006f14:	40020088 	.word	0x40020088
 8006f18:	400200a0 	.word	0x400200a0
 8006f1c:	400200b8 	.word	0x400200b8
 8006f20:	40020410 	.word	0x40020410
 8006f24:	40020428 	.word	0x40020428
 8006f28:	40020440 	.word	0x40020440
 8006f2c:	40020458 	.word	0x40020458
 8006f30:	40020470 	.word	0x40020470
 8006f34:	40020488 	.word	0x40020488
 8006f38:	400204a0 	.word	0x400204a0
 8006f3c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	681a      	ldr	r2, [r3, #0]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f022 020e 	bic.w	r2, r2, #14
 8006f4e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a6c      	ldr	r2, [pc, #432]	; (8007108 <HAL_DMA_Abort_IT+0x3a8>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d04a      	beq.n	8006ff0 <HAL_DMA_Abort_IT+0x290>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a6b      	ldr	r2, [pc, #428]	; (800710c <HAL_DMA_Abort_IT+0x3ac>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d045      	beq.n	8006ff0 <HAL_DMA_Abort_IT+0x290>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a69      	ldr	r2, [pc, #420]	; (8007110 <HAL_DMA_Abort_IT+0x3b0>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d040      	beq.n	8006ff0 <HAL_DMA_Abort_IT+0x290>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a68      	ldr	r2, [pc, #416]	; (8007114 <HAL_DMA_Abort_IT+0x3b4>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d03b      	beq.n	8006ff0 <HAL_DMA_Abort_IT+0x290>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a66      	ldr	r2, [pc, #408]	; (8007118 <HAL_DMA_Abort_IT+0x3b8>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d036      	beq.n	8006ff0 <HAL_DMA_Abort_IT+0x290>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a65      	ldr	r2, [pc, #404]	; (800711c <HAL_DMA_Abort_IT+0x3bc>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d031      	beq.n	8006ff0 <HAL_DMA_Abort_IT+0x290>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a63      	ldr	r2, [pc, #396]	; (8007120 <HAL_DMA_Abort_IT+0x3c0>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d02c      	beq.n	8006ff0 <HAL_DMA_Abort_IT+0x290>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a62      	ldr	r2, [pc, #392]	; (8007124 <HAL_DMA_Abort_IT+0x3c4>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d027      	beq.n	8006ff0 <HAL_DMA_Abort_IT+0x290>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a60      	ldr	r2, [pc, #384]	; (8007128 <HAL_DMA_Abort_IT+0x3c8>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d022      	beq.n	8006ff0 <HAL_DMA_Abort_IT+0x290>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a5f      	ldr	r2, [pc, #380]	; (800712c <HAL_DMA_Abort_IT+0x3cc>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d01d      	beq.n	8006ff0 <HAL_DMA_Abort_IT+0x290>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a5d      	ldr	r2, [pc, #372]	; (8007130 <HAL_DMA_Abort_IT+0x3d0>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d018      	beq.n	8006ff0 <HAL_DMA_Abort_IT+0x290>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a5c      	ldr	r2, [pc, #368]	; (8007134 <HAL_DMA_Abort_IT+0x3d4>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d013      	beq.n	8006ff0 <HAL_DMA_Abort_IT+0x290>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a5a      	ldr	r2, [pc, #360]	; (8007138 <HAL_DMA_Abort_IT+0x3d8>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d00e      	beq.n	8006ff0 <HAL_DMA_Abort_IT+0x290>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a59      	ldr	r2, [pc, #356]	; (800713c <HAL_DMA_Abort_IT+0x3dc>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d009      	beq.n	8006ff0 <HAL_DMA_Abort_IT+0x290>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a57      	ldr	r2, [pc, #348]	; (8007140 <HAL_DMA_Abort_IT+0x3e0>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d004      	beq.n	8006ff0 <HAL_DMA_Abort_IT+0x290>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a56      	ldr	r2, [pc, #344]	; (8007144 <HAL_DMA_Abort_IT+0x3e4>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d108      	bne.n	8007002 <HAL_DMA_Abort_IT+0x2a2>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	681a      	ldr	r2, [r3, #0]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f022 0201 	bic.w	r2, r2, #1
 8006ffe:	601a      	str	r2, [r3, #0]
 8007000:	e007      	b.n	8007012 <HAL_DMA_Abort_IT+0x2b2>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	681a      	ldr	r2, [r3, #0]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f022 0201 	bic.w	r2, r2, #1
 8007010:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a3c      	ldr	r2, [pc, #240]	; (8007108 <HAL_DMA_Abort_IT+0x3a8>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d072      	beq.n	8007102 <HAL_DMA_Abort_IT+0x3a2>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a3a      	ldr	r2, [pc, #232]	; (800710c <HAL_DMA_Abort_IT+0x3ac>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d06d      	beq.n	8007102 <HAL_DMA_Abort_IT+0x3a2>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a39      	ldr	r2, [pc, #228]	; (8007110 <HAL_DMA_Abort_IT+0x3b0>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d068      	beq.n	8007102 <HAL_DMA_Abort_IT+0x3a2>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a37      	ldr	r2, [pc, #220]	; (8007114 <HAL_DMA_Abort_IT+0x3b4>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d063      	beq.n	8007102 <HAL_DMA_Abort_IT+0x3a2>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a36      	ldr	r2, [pc, #216]	; (8007118 <HAL_DMA_Abort_IT+0x3b8>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d05e      	beq.n	8007102 <HAL_DMA_Abort_IT+0x3a2>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a34      	ldr	r2, [pc, #208]	; (800711c <HAL_DMA_Abort_IT+0x3bc>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d059      	beq.n	8007102 <HAL_DMA_Abort_IT+0x3a2>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a33      	ldr	r2, [pc, #204]	; (8007120 <HAL_DMA_Abort_IT+0x3c0>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d054      	beq.n	8007102 <HAL_DMA_Abort_IT+0x3a2>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a31      	ldr	r2, [pc, #196]	; (8007124 <HAL_DMA_Abort_IT+0x3c4>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d04f      	beq.n	8007102 <HAL_DMA_Abort_IT+0x3a2>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a30      	ldr	r2, [pc, #192]	; (8007128 <HAL_DMA_Abort_IT+0x3c8>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d04a      	beq.n	8007102 <HAL_DMA_Abort_IT+0x3a2>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a2e      	ldr	r2, [pc, #184]	; (800712c <HAL_DMA_Abort_IT+0x3cc>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d045      	beq.n	8007102 <HAL_DMA_Abort_IT+0x3a2>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a2d      	ldr	r2, [pc, #180]	; (8007130 <HAL_DMA_Abort_IT+0x3d0>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d040      	beq.n	8007102 <HAL_DMA_Abort_IT+0x3a2>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a2b      	ldr	r2, [pc, #172]	; (8007134 <HAL_DMA_Abort_IT+0x3d4>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d03b      	beq.n	8007102 <HAL_DMA_Abort_IT+0x3a2>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a2a      	ldr	r2, [pc, #168]	; (8007138 <HAL_DMA_Abort_IT+0x3d8>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d036      	beq.n	8007102 <HAL_DMA_Abort_IT+0x3a2>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a28      	ldr	r2, [pc, #160]	; (800713c <HAL_DMA_Abort_IT+0x3dc>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d031      	beq.n	8007102 <HAL_DMA_Abort_IT+0x3a2>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a27      	ldr	r2, [pc, #156]	; (8007140 <HAL_DMA_Abort_IT+0x3e0>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d02c      	beq.n	8007102 <HAL_DMA_Abort_IT+0x3a2>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a25      	ldr	r2, [pc, #148]	; (8007144 <HAL_DMA_Abort_IT+0x3e4>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d027      	beq.n	8007102 <HAL_DMA_Abort_IT+0x3a2>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a24      	ldr	r2, [pc, #144]	; (8007148 <HAL_DMA_Abort_IT+0x3e8>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d022      	beq.n	8007102 <HAL_DMA_Abort_IT+0x3a2>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a22      	ldr	r2, [pc, #136]	; (800714c <HAL_DMA_Abort_IT+0x3ec>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d01d      	beq.n	8007102 <HAL_DMA_Abort_IT+0x3a2>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a21      	ldr	r2, [pc, #132]	; (8007150 <HAL_DMA_Abort_IT+0x3f0>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d018      	beq.n	8007102 <HAL_DMA_Abort_IT+0x3a2>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a1f      	ldr	r2, [pc, #124]	; (8007154 <HAL_DMA_Abort_IT+0x3f4>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d013      	beq.n	8007102 <HAL_DMA_Abort_IT+0x3a2>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a1e      	ldr	r2, [pc, #120]	; (8007158 <HAL_DMA_Abort_IT+0x3f8>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d00e      	beq.n	8007102 <HAL_DMA_Abort_IT+0x3a2>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a1c      	ldr	r2, [pc, #112]	; (800715c <HAL_DMA_Abort_IT+0x3fc>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d009      	beq.n	8007102 <HAL_DMA_Abort_IT+0x3a2>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a1b      	ldr	r2, [pc, #108]	; (8007160 <HAL_DMA_Abort_IT+0x400>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d004      	beq.n	8007102 <HAL_DMA_Abort_IT+0x3a2>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a19      	ldr	r2, [pc, #100]	; (8007164 <HAL_DMA_Abort_IT+0x404>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d132      	bne.n	8007168 <HAL_DMA_Abort_IT+0x408>
 8007102:	2301      	movs	r3, #1
 8007104:	e031      	b.n	800716a <HAL_DMA_Abort_IT+0x40a>
 8007106:	bf00      	nop
 8007108:	40020010 	.word	0x40020010
 800710c:	40020028 	.word	0x40020028
 8007110:	40020040 	.word	0x40020040
 8007114:	40020058 	.word	0x40020058
 8007118:	40020070 	.word	0x40020070
 800711c:	40020088 	.word	0x40020088
 8007120:	400200a0 	.word	0x400200a0
 8007124:	400200b8 	.word	0x400200b8
 8007128:	40020410 	.word	0x40020410
 800712c:	40020428 	.word	0x40020428
 8007130:	40020440 	.word	0x40020440
 8007134:	40020458 	.word	0x40020458
 8007138:	40020470 	.word	0x40020470
 800713c:	40020488 	.word	0x40020488
 8007140:	400204a0 	.word	0x400204a0
 8007144:	400204b8 	.word	0x400204b8
 8007148:	58025408 	.word	0x58025408
 800714c:	5802541c 	.word	0x5802541c
 8007150:	58025430 	.word	0x58025430
 8007154:	58025444 	.word	0x58025444
 8007158:	58025458 	.word	0x58025458
 800715c:	5802546c 	.word	0x5802546c
 8007160:	58025480 	.word	0x58025480
 8007164:	58025494 	.word	0x58025494
 8007168:	2300      	movs	r3, #0
 800716a:	2b00      	cmp	r3, #0
 800716c:	d028      	beq.n	80071c0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007178:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800717c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007182:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007188:	f003 031f 	and.w	r3, r3, #31
 800718c:	2201      	movs	r2, #1
 800718e:	409a      	lsls	r2, r3
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007198:	687a      	ldr	r2, [r7, #4]
 800719a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800719c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d00c      	beq.n	80071c0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071aa:	681a      	ldr	r2, [r3, #0]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80071b4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071ba:	687a      	ldr	r2, [r7, #4]
 80071bc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80071be:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2201      	movs	r2, #1
 80071c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2200      	movs	r2, #0
 80071cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d003      	beq.n	80071e0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80071e0:	2300      	movs	r3, #0
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3710      	adds	r7, #16
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}
 80071ea:	bf00      	nop

080071ec <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b08a      	sub	sp, #40	; 0x28
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80071f4:	2300      	movs	r3, #0
 80071f6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80071f8:	4b67      	ldr	r3, [pc, #412]	; (8007398 <HAL_DMA_IRQHandler+0x1ac>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a67      	ldr	r2, [pc, #412]	; (800739c <HAL_DMA_IRQHandler+0x1b0>)
 80071fe:	fba2 2303 	umull	r2, r3, r2, r3
 8007202:	0a9b      	lsrs	r3, r3, #10
 8007204:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800720a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007210:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8007212:	6a3b      	ldr	r3, [r7, #32]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007218:	69fb      	ldr	r3, [r7, #28]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a5f      	ldr	r2, [pc, #380]	; (80073a0 <HAL_DMA_IRQHandler+0x1b4>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d04a      	beq.n	80072be <HAL_DMA_IRQHandler+0xd2>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a5d      	ldr	r2, [pc, #372]	; (80073a4 <HAL_DMA_IRQHandler+0x1b8>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d045      	beq.n	80072be <HAL_DMA_IRQHandler+0xd2>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a5c      	ldr	r2, [pc, #368]	; (80073a8 <HAL_DMA_IRQHandler+0x1bc>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d040      	beq.n	80072be <HAL_DMA_IRQHandler+0xd2>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a5a      	ldr	r2, [pc, #360]	; (80073ac <HAL_DMA_IRQHandler+0x1c0>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d03b      	beq.n	80072be <HAL_DMA_IRQHandler+0xd2>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a59      	ldr	r2, [pc, #356]	; (80073b0 <HAL_DMA_IRQHandler+0x1c4>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d036      	beq.n	80072be <HAL_DMA_IRQHandler+0xd2>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a57      	ldr	r2, [pc, #348]	; (80073b4 <HAL_DMA_IRQHandler+0x1c8>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d031      	beq.n	80072be <HAL_DMA_IRQHandler+0xd2>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a56      	ldr	r2, [pc, #344]	; (80073b8 <HAL_DMA_IRQHandler+0x1cc>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d02c      	beq.n	80072be <HAL_DMA_IRQHandler+0xd2>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a54      	ldr	r2, [pc, #336]	; (80073bc <HAL_DMA_IRQHandler+0x1d0>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d027      	beq.n	80072be <HAL_DMA_IRQHandler+0xd2>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a53      	ldr	r2, [pc, #332]	; (80073c0 <HAL_DMA_IRQHandler+0x1d4>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d022      	beq.n	80072be <HAL_DMA_IRQHandler+0xd2>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a51      	ldr	r2, [pc, #324]	; (80073c4 <HAL_DMA_IRQHandler+0x1d8>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d01d      	beq.n	80072be <HAL_DMA_IRQHandler+0xd2>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a50      	ldr	r2, [pc, #320]	; (80073c8 <HAL_DMA_IRQHandler+0x1dc>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d018      	beq.n	80072be <HAL_DMA_IRQHandler+0xd2>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a4e      	ldr	r2, [pc, #312]	; (80073cc <HAL_DMA_IRQHandler+0x1e0>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d013      	beq.n	80072be <HAL_DMA_IRQHandler+0xd2>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a4d      	ldr	r2, [pc, #308]	; (80073d0 <HAL_DMA_IRQHandler+0x1e4>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d00e      	beq.n	80072be <HAL_DMA_IRQHandler+0xd2>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a4b      	ldr	r2, [pc, #300]	; (80073d4 <HAL_DMA_IRQHandler+0x1e8>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d009      	beq.n	80072be <HAL_DMA_IRQHandler+0xd2>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a4a      	ldr	r2, [pc, #296]	; (80073d8 <HAL_DMA_IRQHandler+0x1ec>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d004      	beq.n	80072be <HAL_DMA_IRQHandler+0xd2>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a48      	ldr	r2, [pc, #288]	; (80073dc <HAL_DMA_IRQHandler+0x1f0>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d101      	bne.n	80072c2 <HAL_DMA_IRQHandler+0xd6>
 80072be:	2301      	movs	r3, #1
 80072c0:	e000      	b.n	80072c4 <HAL_DMA_IRQHandler+0xd8>
 80072c2:	2300      	movs	r3, #0
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	f000 842b 	beq.w	8007b20 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072ce:	f003 031f 	and.w	r3, r3, #31
 80072d2:	2208      	movs	r2, #8
 80072d4:	409a      	lsls	r2, r3
 80072d6:	69bb      	ldr	r3, [r7, #24]
 80072d8:	4013      	ands	r3, r2
 80072da:	2b00      	cmp	r3, #0
 80072dc:	f000 80a2 	beq.w	8007424 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a2e      	ldr	r2, [pc, #184]	; (80073a0 <HAL_DMA_IRQHandler+0x1b4>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d04a      	beq.n	8007380 <HAL_DMA_IRQHandler+0x194>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a2d      	ldr	r2, [pc, #180]	; (80073a4 <HAL_DMA_IRQHandler+0x1b8>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d045      	beq.n	8007380 <HAL_DMA_IRQHandler+0x194>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a2b      	ldr	r2, [pc, #172]	; (80073a8 <HAL_DMA_IRQHandler+0x1bc>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d040      	beq.n	8007380 <HAL_DMA_IRQHandler+0x194>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a2a      	ldr	r2, [pc, #168]	; (80073ac <HAL_DMA_IRQHandler+0x1c0>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d03b      	beq.n	8007380 <HAL_DMA_IRQHandler+0x194>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a28      	ldr	r2, [pc, #160]	; (80073b0 <HAL_DMA_IRQHandler+0x1c4>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d036      	beq.n	8007380 <HAL_DMA_IRQHandler+0x194>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a27      	ldr	r2, [pc, #156]	; (80073b4 <HAL_DMA_IRQHandler+0x1c8>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d031      	beq.n	8007380 <HAL_DMA_IRQHandler+0x194>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a25      	ldr	r2, [pc, #148]	; (80073b8 <HAL_DMA_IRQHandler+0x1cc>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d02c      	beq.n	8007380 <HAL_DMA_IRQHandler+0x194>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a24      	ldr	r2, [pc, #144]	; (80073bc <HAL_DMA_IRQHandler+0x1d0>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d027      	beq.n	8007380 <HAL_DMA_IRQHandler+0x194>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a22      	ldr	r2, [pc, #136]	; (80073c0 <HAL_DMA_IRQHandler+0x1d4>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d022      	beq.n	8007380 <HAL_DMA_IRQHandler+0x194>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a21      	ldr	r2, [pc, #132]	; (80073c4 <HAL_DMA_IRQHandler+0x1d8>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d01d      	beq.n	8007380 <HAL_DMA_IRQHandler+0x194>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a1f      	ldr	r2, [pc, #124]	; (80073c8 <HAL_DMA_IRQHandler+0x1dc>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d018      	beq.n	8007380 <HAL_DMA_IRQHandler+0x194>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a1e      	ldr	r2, [pc, #120]	; (80073cc <HAL_DMA_IRQHandler+0x1e0>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d013      	beq.n	8007380 <HAL_DMA_IRQHandler+0x194>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a1c      	ldr	r2, [pc, #112]	; (80073d0 <HAL_DMA_IRQHandler+0x1e4>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d00e      	beq.n	8007380 <HAL_DMA_IRQHandler+0x194>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a1b      	ldr	r2, [pc, #108]	; (80073d4 <HAL_DMA_IRQHandler+0x1e8>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d009      	beq.n	8007380 <HAL_DMA_IRQHandler+0x194>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a19      	ldr	r2, [pc, #100]	; (80073d8 <HAL_DMA_IRQHandler+0x1ec>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d004      	beq.n	8007380 <HAL_DMA_IRQHandler+0x194>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a18      	ldr	r2, [pc, #96]	; (80073dc <HAL_DMA_IRQHandler+0x1f0>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d12f      	bne.n	80073e0 <HAL_DMA_IRQHandler+0x1f4>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f003 0304 	and.w	r3, r3, #4
 800738a:	2b00      	cmp	r3, #0
 800738c:	bf14      	ite	ne
 800738e:	2301      	movne	r3, #1
 8007390:	2300      	moveq	r3, #0
 8007392:	b2db      	uxtb	r3, r3
 8007394:	e02e      	b.n	80073f4 <HAL_DMA_IRQHandler+0x208>
 8007396:	bf00      	nop
 8007398:	24000090 	.word	0x24000090
 800739c:	1b4e81b5 	.word	0x1b4e81b5
 80073a0:	40020010 	.word	0x40020010
 80073a4:	40020028 	.word	0x40020028
 80073a8:	40020040 	.word	0x40020040
 80073ac:	40020058 	.word	0x40020058
 80073b0:	40020070 	.word	0x40020070
 80073b4:	40020088 	.word	0x40020088
 80073b8:	400200a0 	.word	0x400200a0
 80073bc:	400200b8 	.word	0x400200b8
 80073c0:	40020410 	.word	0x40020410
 80073c4:	40020428 	.word	0x40020428
 80073c8:	40020440 	.word	0x40020440
 80073cc:	40020458 	.word	0x40020458
 80073d0:	40020470 	.word	0x40020470
 80073d4:	40020488 	.word	0x40020488
 80073d8:	400204a0 	.word	0x400204a0
 80073dc:	400204b8 	.word	0x400204b8
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f003 0308 	and.w	r3, r3, #8
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	bf14      	ite	ne
 80073ee:	2301      	movne	r3, #1
 80073f0:	2300      	moveq	r3, #0
 80073f2:	b2db      	uxtb	r3, r3
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d015      	beq.n	8007424 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	681a      	ldr	r2, [r3, #0]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f022 0204 	bic.w	r2, r2, #4
 8007406:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800740c:	f003 031f 	and.w	r3, r3, #31
 8007410:	2208      	movs	r2, #8
 8007412:	409a      	lsls	r2, r3
 8007414:	6a3b      	ldr	r3, [r7, #32]
 8007416:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800741c:	f043 0201 	orr.w	r2, r3, #1
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007428:	f003 031f 	and.w	r3, r3, #31
 800742c:	69ba      	ldr	r2, [r7, #24]
 800742e:	fa22 f303 	lsr.w	r3, r2, r3
 8007432:	f003 0301 	and.w	r3, r3, #1
 8007436:	2b00      	cmp	r3, #0
 8007438:	d06e      	beq.n	8007518 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a69      	ldr	r2, [pc, #420]	; (80075e4 <HAL_DMA_IRQHandler+0x3f8>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d04a      	beq.n	80074da <HAL_DMA_IRQHandler+0x2ee>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a67      	ldr	r2, [pc, #412]	; (80075e8 <HAL_DMA_IRQHandler+0x3fc>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d045      	beq.n	80074da <HAL_DMA_IRQHandler+0x2ee>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a66      	ldr	r2, [pc, #408]	; (80075ec <HAL_DMA_IRQHandler+0x400>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d040      	beq.n	80074da <HAL_DMA_IRQHandler+0x2ee>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a64      	ldr	r2, [pc, #400]	; (80075f0 <HAL_DMA_IRQHandler+0x404>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d03b      	beq.n	80074da <HAL_DMA_IRQHandler+0x2ee>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a63      	ldr	r2, [pc, #396]	; (80075f4 <HAL_DMA_IRQHandler+0x408>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d036      	beq.n	80074da <HAL_DMA_IRQHandler+0x2ee>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a61      	ldr	r2, [pc, #388]	; (80075f8 <HAL_DMA_IRQHandler+0x40c>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d031      	beq.n	80074da <HAL_DMA_IRQHandler+0x2ee>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a60      	ldr	r2, [pc, #384]	; (80075fc <HAL_DMA_IRQHandler+0x410>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d02c      	beq.n	80074da <HAL_DMA_IRQHandler+0x2ee>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a5e      	ldr	r2, [pc, #376]	; (8007600 <HAL_DMA_IRQHandler+0x414>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d027      	beq.n	80074da <HAL_DMA_IRQHandler+0x2ee>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a5d      	ldr	r2, [pc, #372]	; (8007604 <HAL_DMA_IRQHandler+0x418>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d022      	beq.n	80074da <HAL_DMA_IRQHandler+0x2ee>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a5b      	ldr	r2, [pc, #364]	; (8007608 <HAL_DMA_IRQHandler+0x41c>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d01d      	beq.n	80074da <HAL_DMA_IRQHandler+0x2ee>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4a5a      	ldr	r2, [pc, #360]	; (800760c <HAL_DMA_IRQHandler+0x420>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d018      	beq.n	80074da <HAL_DMA_IRQHandler+0x2ee>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a58      	ldr	r2, [pc, #352]	; (8007610 <HAL_DMA_IRQHandler+0x424>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d013      	beq.n	80074da <HAL_DMA_IRQHandler+0x2ee>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a57      	ldr	r2, [pc, #348]	; (8007614 <HAL_DMA_IRQHandler+0x428>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d00e      	beq.n	80074da <HAL_DMA_IRQHandler+0x2ee>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a55      	ldr	r2, [pc, #340]	; (8007618 <HAL_DMA_IRQHandler+0x42c>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d009      	beq.n	80074da <HAL_DMA_IRQHandler+0x2ee>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4a54      	ldr	r2, [pc, #336]	; (800761c <HAL_DMA_IRQHandler+0x430>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d004      	beq.n	80074da <HAL_DMA_IRQHandler+0x2ee>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a52      	ldr	r2, [pc, #328]	; (8007620 <HAL_DMA_IRQHandler+0x434>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d10a      	bne.n	80074f0 <HAL_DMA_IRQHandler+0x304>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	695b      	ldr	r3, [r3, #20]
 80074e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	bf14      	ite	ne
 80074e8:	2301      	movne	r3, #1
 80074ea:	2300      	moveq	r3, #0
 80074ec:	b2db      	uxtb	r3, r3
 80074ee:	e003      	b.n	80074f8 <HAL_DMA_IRQHandler+0x30c>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	2300      	movs	r3, #0
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d00d      	beq.n	8007518 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007500:	f003 031f 	and.w	r3, r3, #31
 8007504:	2201      	movs	r2, #1
 8007506:	409a      	lsls	r2, r3
 8007508:	6a3b      	ldr	r3, [r7, #32]
 800750a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007510:	f043 0202 	orr.w	r2, r3, #2
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800751c:	f003 031f 	and.w	r3, r3, #31
 8007520:	2204      	movs	r2, #4
 8007522:	409a      	lsls	r2, r3
 8007524:	69bb      	ldr	r3, [r7, #24]
 8007526:	4013      	ands	r3, r2
 8007528:	2b00      	cmp	r3, #0
 800752a:	f000 808f 	beq.w	800764c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a2c      	ldr	r2, [pc, #176]	; (80075e4 <HAL_DMA_IRQHandler+0x3f8>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d04a      	beq.n	80075ce <HAL_DMA_IRQHandler+0x3e2>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a2a      	ldr	r2, [pc, #168]	; (80075e8 <HAL_DMA_IRQHandler+0x3fc>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d045      	beq.n	80075ce <HAL_DMA_IRQHandler+0x3e2>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a29      	ldr	r2, [pc, #164]	; (80075ec <HAL_DMA_IRQHandler+0x400>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d040      	beq.n	80075ce <HAL_DMA_IRQHandler+0x3e2>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a27      	ldr	r2, [pc, #156]	; (80075f0 <HAL_DMA_IRQHandler+0x404>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d03b      	beq.n	80075ce <HAL_DMA_IRQHandler+0x3e2>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a26      	ldr	r2, [pc, #152]	; (80075f4 <HAL_DMA_IRQHandler+0x408>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d036      	beq.n	80075ce <HAL_DMA_IRQHandler+0x3e2>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a24      	ldr	r2, [pc, #144]	; (80075f8 <HAL_DMA_IRQHandler+0x40c>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d031      	beq.n	80075ce <HAL_DMA_IRQHandler+0x3e2>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4a23      	ldr	r2, [pc, #140]	; (80075fc <HAL_DMA_IRQHandler+0x410>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d02c      	beq.n	80075ce <HAL_DMA_IRQHandler+0x3e2>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a21      	ldr	r2, [pc, #132]	; (8007600 <HAL_DMA_IRQHandler+0x414>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d027      	beq.n	80075ce <HAL_DMA_IRQHandler+0x3e2>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4a20      	ldr	r2, [pc, #128]	; (8007604 <HAL_DMA_IRQHandler+0x418>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d022      	beq.n	80075ce <HAL_DMA_IRQHandler+0x3e2>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4a1e      	ldr	r2, [pc, #120]	; (8007608 <HAL_DMA_IRQHandler+0x41c>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d01d      	beq.n	80075ce <HAL_DMA_IRQHandler+0x3e2>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4a1d      	ldr	r2, [pc, #116]	; (800760c <HAL_DMA_IRQHandler+0x420>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d018      	beq.n	80075ce <HAL_DMA_IRQHandler+0x3e2>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4a1b      	ldr	r2, [pc, #108]	; (8007610 <HAL_DMA_IRQHandler+0x424>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d013      	beq.n	80075ce <HAL_DMA_IRQHandler+0x3e2>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a1a      	ldr	r2, [pc, #104]	; (8007614 <HAL_DMA_IRQHandler+0x428>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d00e      	beq.n	80075ce <HAL_DMA_IRQHandler+0x3e2>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a18      	ldr	r2, [pc, #96]	; (8007618 <HAL_DMA_IRQHandler+0x42c>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d009      	beq.n	80075ce <HAL_DMA_IRQHandler+0x3e2>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4a17      	ldr	r2, [pc, #92]	; (800761c <HAL_DMA_IRQHandler+0x430>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d004      	beq.n	80075ce <HAL_DMA_IRQHandler+0x3e2>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a15      	ldr	r2, [pc, #84]	; (8007620 <HAL_DMA_IRQHandler+0x434>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d12a      	bne.n	8007624 <HAL_DMA_IRQHandler+0x438>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f003 0302 	and.w	r3, r3, #2
 80075d8:	2b00      	cmp	r3, #0
 80075da:	bf14      	ite	ne
 80075dc:	2301      	movne	r3, #1
 80075de:	2300      	moveq	r3, #0
 80075e0:	b2db      	uxtb	r3, r3
 80075e2:	e023      	b.n	800762c <HAL_DMA_IRQHandler+0x440>
 80075e4:	40020010 	.word	0x40020010
 80075e8:	40020028 	.word	0x40020028
 80075ec:	40020040 	.word	0x40020040
 80075f0:	40020058 	.word	0x40020058
 80075f4:	40020070 	.word	0x40020070
 80075f8:	40020088 	.word	0x40020088
 80075fc:	400200a0 	.word	0x400200a0
 8007600:	400200b8 	.word	0x400200b8
 8007604:	40020410 	.word	0x40020410
 8007608:	40020428 	.word	0x40020428
 800760c:	40020440 	.word	0x40020440
 8007610:	40020458 	.word	0x40020458
 8007614:	40020470 	.word	0x40020470
 8007618:	40020488 	.word	0x40020488
 800761c:	400204a0 	.word	0x400204a0
 8007620:	400204b8 	.word	0x400204b8
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	2300      	movs	r3, #0
 800762c:	2b00      	cmp	r3, #0
 800762e:	d00d      	beq.n	800764c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007634:	f003 031f 	and.w	r3, r3, #31
 8007638:	2204      	movs	r2, #4
 800763a:	409a      	lsls	r2, r3
 800763c:	6a3b      	ldr	r3, [r7, #32]
 800763e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007644:	f043 0204 	orr.w	r2, r3, #4
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007650:	f003 031f 	and.w	r3, r3, #31
 8007654:	2210      	movs	r2, #16
 8007656:	409a      	lsls	r2, r3
 8007658:	69bb      	ldr	r3, [r7, #24]
 800765a:	4013      	ands	r3, r2
 800765c:	2b00      	cmp	r3, #0
 800765e:	f000 80a6 	beq.w	80077ae <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a85      	ldr	r2, [pc, #532]	; (800787c <HAL_DMA_IRQHandler+0x690>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d04a      	beq.n	8007702 <HAL_DMA_IRQHandler+0x516>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a83      	ldr	r2, [pc, #524]	; (8007880 <HAL_DMA_IRQHandler+0x694>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d045      	beq.n	8007702 <HAL_DMA_IRQHandler+0x516>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a82      	ldr	r2, [pc, #520]	; (8007884 <HAL_DMA_IRQHandler+0x698>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d040      	beq.n	8007702 <HAL_DMA_IRQHandler+0x516>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a80      	ldr	r2, [pc, #512]	; (8007888 <HAL_DMA_IRQHandler+0x69c>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d03b      	beq.n	8007702 <HAL_DMA_IRQHandler+0x516>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a7f      	ldr	r2, [pc, #508]	; (800788c <HAL_DMA_IRQHandler+0x6a0>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d036      	beq.n	8007702 <HAL_DMA_IRQHandler+0x516>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a7d      	ldr	r2, [pc, #500]	; (8007890 <HAL_DMA_IRQHandler+0x6a4>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d031      	beq.n	8007702 <HAL_DMA_IRQHandler+0x516>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a7c      	ldr	r2, [pc, #496]	; (8007894 <HAL_DMA_IRQHandler+0x6a8>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d02c      	beq.n	8007702 <HAL_DMA_IRQHandler+0x516>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a7a      	ldr	r2, [pc, #488]	; (8007898 <HAL_DMA_IRQHandler+0x6ac>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d027      	beq.n	8007702 <HAL_DMA_IRQHandler+0x516>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a79      	ldr	r2, [pc, #484]	; (800789c <HAL_DMA_IRQHandler+0x6b0>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d022      	beq.n	8007702 <HAL_DMA_IRQHandler+0x516>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a77      	ldr	r2, [pc, #476]	; (80078a0 <HAL_DMA_IRQHandler+0x6b4>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d01d      	beq.n	8007702 <HAL_DMA_IRQHandler+0x516>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a76      	ldr	r2, [pc, #472]	; (80078a4 <HAL_DMA_IRQHandler+0x6b8>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d018      	beq.n	8007702 <HAL_DMA_IRQHandler+0x516>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a74      	ldr	r2, [pc, #464]	; (80078a8 <HAL_DMA_IRQHandler+0x6bc>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d013      	beq.n	8007702 <HAL_DMA_IRQHandler+0x516>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a73      	ldr	r2, [pc, #460]	; (80078ac <HAL_DMA_IRQHandler+0x6c0>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d00e      	beq.n	8007702 <HAL_DMA_IRQHandler+0x516>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a71      	ldr	r2, [pc, #452]	; (80078b0 <HAL_DMA_IRQHandler+0x6c4>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d009      	beq.n	8007702 <HAL_DMA_IRQHandler+0x516>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a70      	ldr	r2, [pc, #448]	; (80078b4 <HAL_DMA_IRQHandler+0x6c8>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d004      	beq.n	8007702 <HAL_DMA_IRQHandler+0x516>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a6e      	ldr	r2, [pc, #440]	; (80078b8 <HAL_DMA_IRQHandler+0x6cc>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d10a      	bne.n	8007718 <HAL_DMA_IRQHandler+0x52c>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f003 0308 	and.w	r3, r3, #8
 800770c:	2b00      	cmp	r3, #0
 800770e:	bf14      	ite	ne
 8007710:	2301      	movne	r3, #1
 8007712:	2300      	moveq	r3, #0
 8007714:	b2db      	uxtb	r3, r3
 8007716:	e009      	b.n	800772c <HAL_DMA_IRQHandler+0x540>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f003 0304 	and.w	r3, r3, #4
 8007722:	2b00      	cmp	r3, #0
 8007724:	bf14      	ite	ne
 8007726:	2301      	movne	r3, #1
 8007728:	2300      	moveq	r3, #0
 800772a:	b2db      	uxtb	r3, r3
 800772c:	2b00      	cmp	r3, #0
 800772e:	d03e      	beq.n	80077ae <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007734:	f003 031f 	and.w	r3, r3, #31
 8007738:	2210      	movs	r2, #16
 800773a:	409a      	lsls	r2, r3
 800773c:	6a3b      	ldr	r3, [r7, #32]
 800773e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800774a:	2b00      	cmp	r3, #0
 800774c:	d018      	beq.n	8007780 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007758:	2b00      	cmp	r3, #0
 800775a:	d108      	bne.n	800776e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007760:	2b00      	cmp	r3, #0
 8007762:	d024      	beq.n	80077ae <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	4798      	blx	r3
 800776c:	e01f      	b.n	80077ae <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007772:	2b00      	cmp	r3, #0
 8007774:	d01b      	beq.n	80077ae <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	4798      	blx	r3
 800777e:	e016      	b.n	80077ae <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800778a:	2b00      	cmp	r3, #0
 800778c:	d107      	bne.n	800779e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	681a      	ldr	r2, [r3, #0]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f022 0208 	bic.w	r2, r2, #8
 800779c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d003      	beq.n	80077ae <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077b2:	f003 031f 	and.w	r3, r3, #31
 80077b6:	2220      	movs	r2, #32
 80077b8:	409a      	lsls	r2, r3
 80077ba:	69bb      	ldr	r3, [r7, #24]
 80077bc:	4013      	ands	r3, r2
 80077be:	2b00      	cmp	r3, #0
 80077c0:	f000 8110 	beq.w	80079e4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a2c      	ldr	r2, [pc, #176]	; (800787c <HAL_DMA_IRQHandler+0x690>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d04a      	beq.n	8007864 <HAL_DMA_IRQHandler+0x678>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a2b      	ldr	r2, [pc, #172]	; (8007880 <HAL_DMA_IRQHandler+0x694>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d045      	beq.n	8007864 <HAL_DMA_IRQHandler+0x678>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a29      	ldr	r2, [pc, #164]	; (8007884 <HAL_DMA_IRQHandler+0x698>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d040      	beq.n	8007864 <HAL_DMA_IRQHandler+0x678>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a28      	ldr	r2, [pc, #160]	; (8007888 <HAL_DMA_IRQHandler+0x69c>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d03b      	beq.n	8007864 <HAL_DMA_IRQHandler+0x678>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a26      	ldr	r2, [pc, #152]	; (800788c <HAL_DMA_IRQHandler+0x6a0>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d036      	beq.n	8007864 <HAL_DMA_IRQHandler+0x678>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a25      	ldr	r2, [pc, #148]	; (8007890 <HAL_DMA_IRQHandler+0x6a4>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d031      	beq.n	8007864 <HAL_DMA_IRQHandler+0x678>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a23      	ldr	r2, [pc, #140]	; (8007894 <HAL_DMA_IRQHandler+0x6a8>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d02c      	beq.n	8007864 <HAL_DMA_IRQHandler+0x678>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a22      	ldr	r2, [pc, #136]	; (8007898 <HAL_DMA_IRQHandler+0x6ac>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d027      	beq.n	8007864 <HAL_DMA_IRQHandler+0x678>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a20      	ldr	r2, [pc, #128]	; (800789c <HAL_DMA_IRQHandler+0x6b0>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d022      	beq.n	8007864 <HAL_DMA_IRQHandler+0x678>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a1f      	ldr	r2, [pc, #124]	; (80078a0 <HAL_DMA_IRQHandler+0x6b4>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d01d      	beq.n	8007864 <HAL_DMA_IRQHandler+0x678>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a1d      	ldr	r2, [pc, #116]	; (80078a4 <HAL_DMA_IRQHandler+0x6b8>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d018      	beq.n	8007864 <HAL_DMA_IRQHandler+0x678>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a1c      	ldr	r2, [pc, #112]	; (80078a8 <HAL_DMA_IRQHandler+0x6bc>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d013      	beq.n	8007864 <HAL_DMA_IRQHandler+0x678>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a1a      	ldr	r2, [pc, #104]	; (80078ac <HAL_DMA_IRQHandler+0x6c0>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d00e      	beq.n	8007864 <HAL_DMA_IRQHandler+0x678>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a19      	ldr	r2, [pc, #100]	; (80078b0 <HAL_DMA_IRQHandler+0x6c4>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d009      	beq.n	8007864 <HAL_DMA_IRQHandler+0x678>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a17      	ldr	r2, [pc, #92]	; (80078b4 <HAL_DMA_IRQHandler+0x6c8>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d004      	beq.n	8007864 <HAL_DMA_IRQHandler+0x678>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a16      	ldr	r2, [pc, #88]	; (80078b8 <HAL_DMA_IRQHandler+0x6cc>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d12b      	bne.n	80078bc <HAL_DMA_IRQHandler+0x6d0>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f003 0310 	and.w	r3, r3, #16
 800786e:	2b00      	cmp	r3, #0
 8007870:	bf14      	ite	ne
 8007872:	2301      	movne	r3, #1
 8007874:	2300      	moveq	r3, #0
 8007876:	b2db      	uxtb	r3, r3
 8007878:	e02a      	b.n	80078d0 <HAL_DMA_IRQHandler+0x6e4>
 800787a:	bf00      	nop
 800787c:	40020010 	.word	0x40020010
 8007880:	40020028 	.word	0x40020028
 8007884:	40020040 	.word	0x40020040
 8007888:	40020058 	.word	0x40020058
 800788c:	40020070 	.word	0x40020070
 8007890:	40020088 	.word	0x40020088
 8007894:	400200a0 	.word	0x400200a0
 8007898:	400200b8 	.word	0x400200b8
 800789c:	40020410 	.word	0x40020410
 80078a0:	40020428 	.word	0x40020428
 80078a4:	40020440 	.word	0x40020440
 80078a8:	40020458 	.word	0x40020458
 80078ac:	40020470 	.word	0x40020470
 80078b0:	40020488 	.word	0x40020488
 80078b4:	400204a0 	.word	0x400204a0
 80078b8:	400204b8 	.word	0x400204b8
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f003 0302 	and.w	r3, r3, #2
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	bf14      	ite	ne
 80078ca:	2301      	movne	r3, #1
 80078cc:	2300      	moveq	r3, #0
 80078ce:	b2db      	uxtb	r3, r3
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	f000 8087 	beq.w	80079e4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078da:	f003 031f 	and.w	r3, r3, #31
 80078de:	2220      	movs	r2, #32
 80078e0:	409a      	lsls	r2, r3
 80078e2:	6a3b      	ldr	r3, [r7, #32]
 80078e4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	2b04      	cmp	r3, #4
 80078f0:	d139      	bne.n	8007966 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	681a      	ldr	r2, [r3, #0]
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f022 0216 	bic.w	r2, r2, #22
 8007900:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	695a      	ldr	r2, [r3, #20]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007910:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007916:	2b00      	cmp	r3, #0
 8007918:	d103      	bne.n	8007922 <HAL_DMA_IRQHandler+0x736>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800791e:	2b00      	cmp	r3, #0
 8007920:	d007      	beq.n	8007932 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	681a      	ldr	r2, [r3, #0]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f022 0208 	bic.w	r2, r2, #8
 8007930:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007936:	f003 031f 	and.w	r3, r3, #31
 800793a:	223f      	movs	r2, #63	; 0x3f
 800793c:	409a      	lsls	r2, r3
 800793e:	6a3b      	ldr	r3, [r7, #32]
 8007940:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2201      	movs	r2, #1
 8007946:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2200      	movs	r2, #0
 800794e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007956:	2b00      	cmp	r3, #0
 8007958:	f000 834a 	beq.w	8007ff0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	4798      	blx	r3
          }
          return;
 8007964:	e344      	b.n	8007ff0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007970:	2b00      	cmp	r3, #0
 8007972:	d018      	beq.n	80079a6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800797e:	2b00      	cmp	r3, #0
 8007980:	d108      	bne.n	8007994 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007986:	2b00      	cmp	r3, #0
 8007988:	d02c      	beq.n	80079e4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	4798      	blx	r3
 8007992:	e027      	b.n	80079e4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007998:	2b00      	cmp	r3, #0
 800799a:	d023      	beq.n	80079e4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	4798      	blx	r3
 80079a4:	e01e      	b.n	80079e4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d10f      	bne.n	80079d4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	681a      	ldr	r2, [r3, #0]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f022 0210 	bic.w	r2, r2, #16
 80079c2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2201      	movs	r2, #1
 80079c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2200      	movs	r2, #0
 80079d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d003      	beq.n	80079e4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	f000 8306 	beq.w	8007ffa <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079f2:	f003 0301 	and.w	r3, r3, #1
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	f000 8088 	beq.w	8007b0c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2204      	movs	r2, #4
 8007a00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a7a      	ldr	r2, [pc, #488]	; (8007bf4 <HAL_DMA_IRQHandler+0xa08>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d04a      	beq.n	8007aa4 <HAL_DMA_IRQHandler+0x8b8>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a79      	ldr	r2, [pc, #484]	; (8007bf8 <HAL_DMA_IRQHandler+0xa0c>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d045      	beq.n	8007aa4 <HAL_DMA_IRQHandler+0x8b8>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a77      	ldr	r2, [pc, #476]	; (8007bfc <HAL_DMA_IRQHandler+0xa10>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d040      	beq.n	8007aa4 <HAL_DMA_IRQHandler+0x8b8>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a76      	ldr	r2, [pc, #472]	; (8007c00 <HAL_DMA_IRQHandler+0xa14>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d03b      	beq.n	8007aa4 <HAL_DMA_IRQHandler+0x8b8>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a74      	ldr	r2, [pc, #464]	; (8007c04 <HAL_DMA_IRQHandler+0xa18>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d036      	beq.n	8007aa4 <HAL_DMA_IRQHandler+0x8b8>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a73      	ldr	r2, [pc, #460]	; (8007c08 <HAL_DMA_IRQHandler+0xa1c>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d031      	beq.n	8007aa4 <HAL_DMA_IRQHandler+0x8b8>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4a71      	ldr	r2, [pc, #452]	; (8007c0c <HAL_DMA_IRQHandler+0xa20>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d02c      	beq.n	8007aa4 <HAL_DMA_IRQHandler+0x8b8>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4a70      	ldr	r2, [pc, #448]	; (8007c10 <HAL_DMA_IRQHandler+0xa24>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d027      	beq.n	8007aa4 <HAL_DMA_IRQHandler+0x8b8>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4a6e      	ldr	r2, [pc, #440]	; (8007c14 <HAL_DMA_IRQHandler+0xa28>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d022      	beq.n	8007aa4 <HAL_DMA_IRQHandler+0x8b8>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4a6d      	ldr	r2, [pc, #436]	; (8007c18 <HAL_DMA_IRQHandler+0xa2c>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d01d      	beq.n	8007aa4 <HAL_DMA_IRQHandler+0x8b8>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4a6b      	ldr	r2, [pc, #428]	; (8007c1c <HAL_DMA_IRQHandler+0xa30>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d018      	beq.n	8007aa4 <HAL_DMA_IRQHandler+0x8b8>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4a6a      	ldr	r2, [pc, #424]	; (8007c20 <HAL_DMA_IRQHandler+0xa34>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d013      	beq.n	8007aa4 <HAL_DMA_IRQHandler+0x8b8>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4a68      	ldr	r2, [pc, #416]	; (8007c24 <HAL_DMA_IRQHandler+0xa38>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d00e      	beq.n	8007aa4 <HAL_DMA_IRQHandler+0x8b8>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4a67      	ldr	r2, [pc, #412]	; (8007c28 <HAL_DMA_IRQHandler+0xa3c>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d009      	beq.n	8007aa4 <HAL_DMA_IRQHandler+0x8b8>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a65      	ldr	r2, [pc, #404]	; (8007c2c <HAL_DMA_IRQHandler+0xa40>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d004      	beq.n	8007aa4 <HAL_DMA_IRQHandler+0x8b8>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4a64      	ldr	r2, [pc, #400]	; (8007c30 <HAL_DMA_IRQHandler+0xa44>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d108      	bne.n	8007ab6 <HAL_DMA_IRQHandler+0x8ca>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	681a      	ldr	r2, [r3, #0]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f022 0201 	bic.w	r2, r2, #1
 8007ab2:	601a      	str	r2, [r3, #0]
 8007ab4:	e007      	b.n	8007ac6 <HAL_DMA_IRQHandler+0x8da>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	681a      	ldr	r2, [r3, #0]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f022 0201 	bic.w	r2, r2, #1
 8007ac4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	3301      	adds	r3, #1
 8007aca:	60fb      	str	r3, [r7, #12]
 8007acc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ace:	429a      	cmp	r2, r3
 8007ad0:	d307      	bcc.n	8007ae2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f003 0301 	and.w	r3, r3, #1
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d1f2      	bne.n	8007ac6 <HAL_DMA_IRQHandler+0x8da>
 8007ae0:	e000      	b.n	8007ae4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007ae2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f003 0301 	and.w	r3, r3, #1
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d004      	beq.n	8007afc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2203      	movs	r2, #3
 8007af6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8007afa:	e003      	b.n	8007b04 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2201      	movs	r2, #1
 8007b00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2200      	movs	r2, #0
 8007b08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	f000 8272 	beq.w	8007ffa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	4798      	blx	r3
 8007b1e:	e26c      	b.n	8007ffa <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a43      	ldr	r2, [pc, #268]	; (8007c34 <HAL_DMA_IRQHandler+0xa48>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d022      	beq.n	8007b70 <HAL_DMA_IRQHandler+0x984>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	4a42      	ldr	r2, [pc, #264]	; (8007c38 <HAL_DMA_IRQHandler+0xa4c>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d01d      	beq.n	8007b70 <HAL_DMA_IRQHandler+0x984>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4a40      	ldr	r2, [pc, #256]	; (8007c3c <HAL_DMA_IRQHandler+0xa50>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d018      	beq.n	8007b70 <HAL_DMA_IRQHandler+0x984>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	4a3f      	ldr	r2, [pc, #252]	; (8007c40 <HAL_DMA_IRQHandler+0xa54>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d013      	beq.n	8007b70 <HAL_DMA_IRQHandler+0x984>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a3d      	ldr	r2, [pc, #244]	; (8007c44 <HAL_DMA_IRQHandler+0xa58>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d00e      	beq.n	8007b70 <HAL_DMA_IRQHandler+0x984>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4a3c      	ldr	r2, [pc, #240]	; (8007c48 <HAL_DMA_IRQHandler+0xa5c>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d009      	beq.n	8007b70 <HAL_DMA_IRQHandler+0x984>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a3a      	ldr	r2, [pc, #232]	; (8007c4c <HAL_DMA_IRQHandler+0xa60>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d004      	beq.n	8007b70 <HAL_DMA_IRQHandler+0x984>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4a39      	ldr	r2, [pc, #228]	; (8007c50 <HAL_DMA_IRQHandler+0xa64>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d101      	bne.n	8007b74 <HAL_DMA_IRQHandler+0x988>
 8007b70:	2301      	movs	r3, #1
 8007b72:	e000      	b.n	8007b76 <HAL_DMA_IRQHandler+0x98a>
 8007b74:	2300      	movs	r3, #0
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	f000 823f 	beq.w	8007ffa <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b88:	f003 031f 	and.w	r3, r3, #31
 8007b8c:	2204      	movs	r2, #4
 8007b8e:	409a      	lsls	r2, r3
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	4013      	ands	r3, r2
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	f000 80cd 	beq.w	8007d34 <HAL_DMA_IRQHandler+0xb48>
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	f003 0304 	and.w	r3, r3, #4
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	f000 80c7 	beq.w	8007d34 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007baa:	f003 031f 	and.w	r3, r3, #31
 8007bae:	2204      	movs	r2, #4
 8007bb0:	409a      	lsls	r2, r3
 8007bb2:	69fb      	ldr	r3, [r7, #28]
 8007bb4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d049      	beq.n	8007c54 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d109      	bne.n	8007bde <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	f000 8210 	beq.w	8007ff4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007bdc:	e20a      	b.n	8007ff4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	f000 8206 	beq.w	8007ff4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007bf0:	e200      	b.n	8007ff4 <HAL_DMA_IRQHandler+0xe08>
 8007bf2:	bf00      	nop
 8007bf4:	40020010 	.word	0x40020010
 8007bf8:	40020028 	.word	0x40020028
 8007bfc:	40020040 	.word	0x40020040
 8007c00:	40020058 	.word	0x40020058
 8007c04:	40020070 	.word	0x40020070
 8007c08:	40020088 	.word	0x40020088
 8007c0c:	400200a0 	.word	0x400200a0
 8007c10:	400200b8 	.word	0x400200b8
 8007c14:	40020410 	.word	0x40020410
 8007c18:	40020428 	.word	0x40020428
 8007c1c:	40020440 	.word	0x40020440
 8007c20:	40020458 	.word	0x40020458
 8007c24:	40020470 	.word	0x40020470
 8007c28:	40020488 	.word	0x40020488
 8007c2c:	400204a0 	.word	0x400204a0
 8007c30:	400204b8 	.word	0x400204b8
 8007c34:	58025408 	.word	0x58025408
 8007c38:	5802541c 	.word	0x5802541c
 8007c3c:	58025430 	.word	0x58025430
 8007c40:	58025444 	.word	0x58025444
 8007c44:	58025458 	.word	0x58025458
 8007c48:	5802546c 	.word	0x5802546c
 8007c4c:	58025480 	.word	0x58025480
 8007c50:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	f003 0320 	and.w	r3, r3, #32
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d160      	bne.n	8007d20 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4a7f      	ldr	r2, [pc, #508]	; (8007e60 <HAL_DMA_IRQHandler+0xc74>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d04a      	beq.n	8007cfe <HAL_DMA_IRQHandler+0xb12>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4a7d      	ldr	r2, [pc, #500]	; (8007e64 <HAL_DMA_IRQHandler+0xc78>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d045      	beq.n	8007cfe <HAL_DMA_IRQHandler+0xb12>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a7c      	ldr	r2, [pc, #496]	; (8007e68 <HAL_DMA_IRQHandler+0xc7c>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d040      	beq.n	8007cfe <HAL_DMA_IRQHandler+0xb12>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4a7a      	ldr	r2, [pc, #488]	; (8007e6c <HAL_DMA_IRQHandler+0xc80>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d03b      	beq.n	8007cfe <HAL_DMA_IRQHandler+0xb12>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4a79      	ldr	r2, [pc, #484]	; (8007e70 <HAL_DMA_IRQHandler+0xc84>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d036      	beq.n	8007cfe <HAL_DMA_IRQHandler+0xb12>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a77      	ldr	r2, [pc, #476]	; (8007e74 <HAL_DMA_IRQHandler+0xc88>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d031      	beq.n	8007cfe <HAL_DMA_IRQHandler+0xb12>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a76      	ldr	r2, [pc, #472]	; (8007e78 <HAL_DMA_IRQHandler+0xc8c>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d02c      	beq.n	8007cfe <HAL_DMA_IRQHandler+0xb12>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a74      	ldr	r2, [pc, #464]	; (8007e7c <HAL_DMA_IRQHandler+0xc90>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d027      	beq.n	8007cfe <HAL_DMA_IRQHandler+0xb12>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a73      	ldr	r2, [pc, #460]	; (8007e80 <HAL_DMA_IRQHandler+0xc94>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d022      	beq.n	8007cfe <HAL_DMA_IRQHandler+0xb12>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4a71      	ldr	r2, [pc, #452]	; (8007e84 <HAL_DMA_IRQHandler+0xc98>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d01d      	beq.n	8007cfe <HAL_DMA_IRQHandler+0xb12>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a70      	ldr	r2, [pc, #448]	; (8007e88 <HAL_DMA_IRQHandler+0xc9c>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d018      	beq.n	8007cfe <HAL_DMA_IRQHandler+0xb12>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a6e      	ldr	r2, [pc, #440]	; (8007e8c <HAL_DMA_IRQHandler+0xca0>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d013      	beq.n	8007cfe <HAL_DMA_IRQHandler+0xb12>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4a6d      	ldr	r2, [pc, #436]	; (8007e90 <HAL_DMA_IRQHandler+0xca4>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d00e      	beq.n	8007cfe <HAL_DMA_IRQHandler+0xb12>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4a6b      	ldr	r2, [pc, #428]	; (8007e94 <HAL_DMA_IRQHandler+0xca8>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d009      	beq.n	8007cfe <HAL_DMA_IRQHandler+0xb12>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4a6a      	ldr	r2, [pc, #424]	; (8007e98 <HAL_DMA_IRQHandler+0xcac>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d004      	beq.n	8007cfe <HAL_DMA_IRQHandler+0xb12>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4a68      	ldr	r2, [pc, #416]	; (8007e9c <HAL_DMA_IRQHandler+0xcb0>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d108      	bne.n	8007d10 <HAL_DMA_IRQHandler+0xb24>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	681a      	ldr	r2, [r3, #0]
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f022 0208 	bic.w	r2, r2, #8
 8007d0c:	601a      	str	r2, [r3, #0]
 8007d0e:	e007      	b.n	8007d20 <HAL_DMA_IRQHandler+0xb34>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	681a      	ldr	r2, [r3, #0]
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f022 0204 	bic.w	r2, r2, #4
 8007d1e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	f000 8165 	beq.w	8007ff4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007d32:	e15f      	b.n	8007ff4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d38:	f003 031f 	and.w	r3, r3, #31
 8007d3c:	2202      	movs	r2, #2
 8007d3e:	409a      	lsls	r2, r3
 8007d40:	697b      	ldr	r3, [r7, #20]
 8007d42:	4013      	ands	r3, r2
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	f000 80c5 	beq.w	8007ed4 <HAL_DMA_IRQHandler+0xce8>
 8007d4a:	693b      	ldr	r3, [r7, #16]
 8007d4c:	f003 0302 	and.w	r3, r3, #2
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	f000 80bf 	beq.w	8007ed4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d5a:	f003 031f 	and.w	r3, r3, #31
 8007d5e:	2202      	movs	r2, #2
 8007d60:	409a      	lsls	r2, r3
 8007d62:	69fb      	ldr	r3, [r7, #28]
 8007d64:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d018      	beq.n	8007da2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d109      	bne.n	8007d8e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	f000 813a 	beq.w	8007ff8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007d8c:	e134      	b.n	8007ff8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	f000 8130 	beq.w	8007ff8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007da0:	e12a      	b.n	8007ff8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	f003 0320 	and.w	r3, r3, #32
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	f040 8089 	bne.w	8007ec0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4a2b      	ldr	r2, [pc, #172]	; (8007e60 <HAL_DMA_IRQHandler+0xc74>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d04a      	beq.n	8007e4e <HAL_DMA_IRQHandler+0xc62>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4a29      	ldr	r2, [pc, #164]	; (8007e64 <HAL_DMA_IRQHandler+0xc78>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d045      	beq.n	8007e4e <HAL_DMA_IRQHandler+0xc62>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4a28      	ldr	r2, [pc, #160]	; (8007e68 <HAL_DMA_IRQHandler+0xc7c>)
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d040      	beq.n	8007e4e <HAL_DMA_IRQHandler+0xc62>
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a26      	ldr	r2, [pc, #152]	; (8007e6c <HAL_DMA_IRQHandler+0xc80>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d03b      	beq.n	8007e4e <HAL_DMA_IRQHandler+0xc62>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	4a25      	ldr	r2, [pc, #148]	; (8007e70 <HAL_DMA_IRQHandler+0xc84>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d036      	beq.n	8007e4e <HAL_DMA_IRQHandler+0xc62>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4a23      	ldr	r2, [pc, #140]	; (8007e74 <HAL_DMA_IRQHandler+0xc88>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d031      	beq.n	8007e4e <HAL_DMA_IRQHandler+0xc62>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4a22      	ldr	r2, [pc, #136]	; (8007e78 <HAL_DMA_IRQHandler+0xc8c>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d02c      	beq.n	8007e4e <HAL_DMA_IRQHandler+0xc62>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4a20      	ldr	r2, [pc, #128]	; (8007e7c <HAL_DMA_IRQHandler+0xc90>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d027      	beq.n	8007e4e <HAL_DMA_IRQHandler+0xc62>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	4a1f      	ldr	r2, [pc, #124]	; (8007e80 <HAL_DMA_IRQHandler+0xc94>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d022      	beq.n	8007e4e <HAL_DMA_IRQHandler+0xc62>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	4a1d      	ldr	r2, [pc, #116]	; (8007e84 <HAL_DMA_IRQHandler+0xc98>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d01d      	beq.n	8007e4e <HAL_DMA_IRQHandler+0xc62>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4a1c      	ldr	r2, [pc, #112]	; (8007e88 <HAL_DMA_IRQHandler+0xc9c>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d018      	beq.n	8007e4e <HAL_DMA_IRQHandler+0xc62>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a1a      	ldr	r2, [pc, #104]	; (8007e8c <HAL_DMA_IRQHandler+0xca0>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d013      	beq.n	8007e4e <HAL_DMA_IRQHandler+0xc62>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4a19      	ldr	r2, [pc, #100]	; (8007e90 <HAL_DMA_IRQHandler+0xca4>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d00e      	beq.n	8007e4e <HAL_DMA_IRQHandler+0xc62>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4a17      	ldr	r2, [pc, #92]	; (8007e94 <HAL_DMA_IRQHandler+0xca8>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d009      	beq.n	8007e4e <HAL_DMA_IRQHandler+0xc62>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	4a16      	ldr	r2, [pc, #88]	; (8007e98 <HAL_DMA_IRQHandler+0xcac>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d004      	beq.n	8007e4e <HAL_DMA_IRQHandler+0xc62>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4a14      	ldr	r2, [pc, #80]	; (8007e9c <HAL_DMA_IRQHandler+0xcb0>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d128      	bne.n	8007ea0 <HAL_DMA_IRQHandler+0xcb4>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	681a      	ldr	r2, [r3, #0]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f022 0214 	bic.w	r2, r2, #20
 8007e5c:	601a      	str	r2, [r3, #0]
 8007e5e:	e027      	b.n	8007eb0 <HAL_DMA_IRQHandler+0xcc4>
 8007e60:	40020010 	.word	0x40020010
 8007e64:	40020028 	.word	0x40020028
 8007e68:	40020040 	.word	0x40020040
 8007e6c:	40020058 	.word	0x40020058
 8007e70:	40020070 	.word	0x40020070
 8007e74:	40020088 	.word	0x40020088
 8007e78:	400200a0 	.word	0x400200a0
 8007e7c:	400200b8 	.word	0x400200b8
 8007e80:	40020410 	.word	0x40020410
 8007e84:	40020428 	.word	0x40020428
 8007e88:	40020440 	.word	0x40020440
 8007e8c:	40020458 	.word	0x40020458
 8007e90:	40020470 	.word	0x40020470
 8007e94:	40020488 	.word	0x40020488
 8007e98:	400204a0 	.word	0x400204a0
 8007e9c:	400204b8 	.word	0x400204b8
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	681a      	ldr	r2, [r3, #0]
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f022 020a 	bic.w	r2, r2, #10
 8007eae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2201      	movs	r2, #1
 8007eb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	f000 8097 	beq.w	8007ff8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007ed2:	e091      	b.n	8007ff8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ed8:	f003 031f 	and.w	r3, r3, #31
 8007edc:	2208      	movs	r2, #8
 8007ede:	409a      	lsls	r2, r3
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	4013      	ands	r3, r2
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	f000 8088 	beq.w	8007ffa <HAL_DMA_IRQHandler+0xe0e>
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	f003 0308 	and.w	r3, r3, #8
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	f000 8082 	beq.w	8007ffa <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4a41      	ldr	r2, [pc, #260]	; (8008000 <HAL_DMA_IRQHandler+0xe14>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d04a      	beq.n	8007f96 <HAL_DMA_IRQHandler+0xdaa>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4a3f      	ldr	r2, [pc, #252]	; (8008004 <HAL_DMA_IRQHandler+0xe18>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d045      	beq.n	8007f96 <HAL_DMA_IRQHandler+0xdaa>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	4a3e      	ldr	r2, [pc, #248]	; (8008008 <HAL_DMA_IRQHandler+0xe1c>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d040      	beq.n	8007f96 <HAL_DMA_IRQHandler+0xdaa>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4a3c      	ldr	r2, [pc, #240]	; (800800c <HAL_DMA_IRQHandler+0xe20>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d03b      	beq.n	8007f96 <HAL_DMA_IRQHandler+0xdaa>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4a3b      	ldr	r2, [pc, #236]	; (8008010 <HAL_DMA_IRQHandler+0xe24>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d036      	beq.n	8007f96 <HAL_DMA_IRQHandler+0xdaa>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	4a39      	ldr	r2, [pc, #228]	; (8008014 <HAL_DMA_IRQHandler+0xe28>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d031      	beq.n	8007f96 <HAL_DMA_IRQHandler+0xdaa>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4a38      	ldr	r2, [pc, #224]	; (8008018 <HAL_DMA_IRQHandler+0xe2c>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d02c      	beq.n	8007f96 <HAL_DMA_IRQHandler+0xdaa>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a36      	ldr	r2, [pc, #216]	; (800801c <HAL_DMA_IRQHandler+0xe30>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d027      	beq.n	8007f96 <HAL_DMA_IRQHandler+0xdaa>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a35      	ldr	r2, [pc, #212]	; (8008020 <HAL_DMA_IRQHandler+0xe34>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d022      	beq.n	8007f96 <HAL_DMA_IRQHandler+0xdaa>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4a33      	ldr	r2, [pc, #204]	; (8008024 <HAL_DMA_IRQHandler+0xe38>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d01d      	beq.n	8007f96 <HAL_DMA_IRQHandler+0xdaa>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4a32      	ldr	r2, [pc, #200]	; (8008028 <HAL_DMA_IRQHandler+0xe3c>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d018      	beq.n	8007f96 <HAL_DMA_IRQHandler+0xdaa>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4a30      	ldr	r2, [pc, #192]	; (800802c <HAL_DMA_IRQHandler+0xe40>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d013      	beq.n	8007f96 <HAL_DMA_IRQHandler+0xdaa>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4a2f      	ldr	r2, [pc, #188]	; (8008030 <HAL_DMA_IRQHandler+0xe44>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d00e      	beq.n	8007f96 <HAL_DMA_IRQHandler+0xdaa>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a2d      	ldr	r2, [pc, #180]	; (8008034 <HAL_DMA_IRQHandler+0xe48>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d009      	beq.n	8007f96 <HAL_DMA_IRQHandler+0xdaa>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4a2c      	ldr	r2, [pc, #176]	; (8008038 <HAL_DMA_IRQHandler+0xe4c>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d004      	beq.n	8007f96 <HAL_DMA_IRQHandler+0xdaa>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a2a      	ldr	r2, [pc, #168]	; (800803c <HAL_DMA_IRQHandler+0xe50>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d108      	bne.n	8007fa8 <HAL_DMA_IRQHandler+0xdbc>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	681a      	ldr	r2, [r3, #0]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f022 021c 	bic.w	r2, r2, #28
 8007fa4:	601a      	str	r2, [r3, #0]
 8007fa6:	e007      	b.n	8007fb8 <HAL_DMA_IRQHandler+0xdcc>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	681a      	ldr	r2, [r3, #0]
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f022 020e 	bic.w	r2, r2, #14
 8007fb6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fbc:	f003 031f 	and.w	r3, r3, #31
 8007fc0:	2201      	movs	r2, #1
 8007fc2:	409a      	lsls	r2, r3
 8007fc4:	69fb      	ldr	r3, [r7, #28]
 8007fc6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2201      	movs	r2, #1
 8007fcc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2201      	movs	r2, #1
 8007fd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d009      	beq.n	8007ffa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	4798      	blx	r3
 8007fee:	e004      	b.n	8007ffa <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007ff0:	bf00      	nop
 8007ff2:	e002      	b.n	8007ffa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007ff4:	bf00      	nop
 8007ff6:	e000      	b.n	8007ffa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007ff8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007ffa:	3728      	adds	r7, #40	; 0x28
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}
 8008000:	40020010 	.word	0x40020010
 8008004:	40020028 	.word	0x40020028
 8008008:	40020040 	.word	0x40020040
 800800c:	40020058 	.word	0x40020058
 8008010:	40020070 	.word	0x40020070
 8008014:	40020088 	.word	0x40020088
 8008018:	400200a0 	.word	0x400200a0
 800801c:	400200b8 	.word	0x400200b8
 8008020:	40020410 	.word	0x40020410
 8008024:	40020428 	.word	0x40020428
 8008028:	40020440 	.word	0x40020440
 800802c:	40020458 	.word	0x40020458
 8008030:	40020470 	.word	0x40020470
 8008034:	40020488 	.word	0x40020488
 8008038:	400204a0 	.word	0x400204a0
 800803c:	400204b8 	.word	0x400204b8

08008040 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008040:	b480      	push	{r7}
 8008042:	b087      	sub	sp, #28
 8008044:	af00      	add	r7, sp, #0
 8008046:	60f8      	str	r0, [r7, #12]
 8008048:	60b9      	str	r1, [r7, #8]
 800804a:	607a      	str	r2, [r7, #4]
 800804c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008052:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008058:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4a7f      	ldr	r2, [pc, #508]	; (800825c <DMA_SetConfig+0x21c>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d072      	beq.n	800814a <DMA_SetConfig+0x10a>
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4a7d      	ldr	r2, [pc, #500]	; (8008260 <DMA_SetConfig+0x220>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d06d      	beq.n	800814a <DMA_SetConfig+0x10a>
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4a7c      	ldr	r2, [pc, #496]	; (8008264 <DMA_SetConfig+0x224>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d068      	beq.n	800814a <DMA_SetConfig+0x10a>
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4a7a      	ldr	r2, [pc, #488]	; (8008268 <DMA_SetConfig+0x228>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d063      	beq.n	800814a <DMA_SetConfig+0x10a>
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4a79      	ldr	r2, [pc, #484]	; (800826c <DMA_SetConfig+0x22c>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d05e      	beq.n	800814a <DMA_SetConfig+0x10a>
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4a77      	ldr	r2, [pc, #476]	; (8008270 <DMA_SetConfig+0x230>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d059      	beq.n	800814a <DMA_SetConfig+0x10a>
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4a76      	ldr	r2, [pc, #472]	; (8008274 <DMA_SetConfig+0x234>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d054      	beq.n	800814a <DMA_SetConfig+0x10a>
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4a74      	ldr	r2, [pc, #464]	; (8008278 <DMA_SetConfig+0x238>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d04f      	beq.n	800814a <DMA_SetConfig+0x10a>
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4a73      	ldr	r2, [pc, #460]	; (800827c <DMA_SetConfig+0x23c>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d04a      	beq.n	800814a <DMA_SetConfig+0x10a>
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4a71      	ldr	r2, [pc, #452]	; (8008280 <DMA_SetConfig+0x240>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d045      	beq.n	800814a <DMA_SetConfig+0x10a>
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	4a70      	ldr	r2, [pc, #448]	; (8008284 <DMA_SetConfig+0x244>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d040      	beq.n	800814a <DMA_SetConfig+0x10a>
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a6e      	ldr	r2, [pc, #440]	; (8008288 <DMA_SetConfig+0x248>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d03b      	beq.n	800814a <DMA_SetConfig+0x10a>
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a6d      	ldr	r2, [pc, #436]	; (800828c <DMA_SetConfig+0x24c>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d036      	beq.n	800814a <DMA_SetConfig+0x10a>
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a6b      	ldr	r2, [pc, #428]	; (8008290 <DMA_SetConfig+0x250>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d031      	beq.n	800814a <DMA_SetConfig+0x10a>
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a6a      	ldr	r2, [pc, #424]	; (8008294 <DMA_SetConfig+0x254>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d02c      	beq.n	800814a <DMA_SetConfig+0x10a>
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4a68      	ldr	r2, [pc, #416]	; (8008298 <DMA_SetConfig+0x258>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d027      	beq.n	800814a <DMA_SetConfig+0x10a>
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4a67      	ldr	r2, [pc, #412]	; (800829c <DMA_SetConfig+0x25c>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d022      	beq.n	800814a <DMA_SetConfig+0x10a>
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4a65      	ldr	r2, [pc, #404]	; (80082a0 <DMA_SetConfig+0x260>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d01d      	beq.n	800814a <DMA_SetConfig+0x10a>
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4a64      	ldr	r2, [pc, #400]	; (80082a4 <DMA_SetConfig+0x264>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d018      	beq.n	800814a <DMA_SetConfig+0x10a>
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4a62      	ldr	r2, [pc, #392]	; (80082a8 <DMA_SetConfig+0x268>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d013      	beq.n	800814a <DMA_SetConfig+0x10a>
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4a61      	ldr	r2, [pc, #388]	; (80082ac <DMA_SetConfig+0x26c>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d00e      	beq.n	800814a <DMA_SetConfig+0x10a>
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4a5f      	ldr	r2, [pc, #380]	; (80082b0 <DMA_SetConfig+0x270>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d009      	beq.n	800814a <DMA_SetConfig+0x10a>
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4a5e      	ldr	r2, [pc, #376]	; (80082b4 <DMA_SetConfig+0x274>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d004      	beq.n	800814a <DMA_SetConfig+0x10a>
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4a5c      	ldr	r2, [pc, #368]	; (80082b8 <DMA_SetConfig+0x278>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d101      	bne.n	800814e <DMA_SetConfig+0x10e>
 800814a:	2301      	movs	r3, #1
 800814c:	e000      	b.n	8008150 <DMA_SetConfig+0x110>
 800814e:	2300      	movs	r3, #0
 8008150:	2b00      	cmp	r3, #0
 8008152:	d00d      	beq.n	8008170 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008158:	68fa      	ldr	r2, [r7, #12]
 800815a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800815c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008162:	2b00      	cmp	r3, #0
 8008164:	d004      	beq.n	8008170 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800816a:	68fa      	ldr	r2, [r7, #12]
 800816c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800816e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4a39      	ldr	r2, [pc, #228]	; (800825c <DMA_SetConfig+0x21c>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d04a      	beq.n	8008210 <DMA_SetConfig+0x1d0>
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4a38      	ldr	r2, [pc, #224]	; (8008260 <DMA_SetConfig+0x220>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d045      	beq.n	8008210 <DMA_SetConfig+0x1d0>
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4a36      	ldr	r2, [pc, #216]	; (8008264 <DMA_SetConfig+0x224>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d040      	beq.n	8008210 <DMA_SetConfig+0x1d0>
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4a35      	ldr	r2, [pc, #212]	; (8008268 <DMA_SetConfig+0x228>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d03b      	beq.n	8008210 <DMA_SetConfig+0x1d0>
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a33      	ldr	r2, [pc, #204]	; (800826c <DMA_SetConfig+0x22c>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d036      	beq.n	8008210 <DMA_SetConfig+0x1d0>
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4a32      	ldr	r2, [pc, #200]	; (8008270 <DMA_SetConfig+0x230>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d031      	beq.n	8008210 <DMA_SetConfig+0x1d0>
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4a30      	ldr	r2, [pc, #192]	; (8008274 <DMA_SetConfig+0x234>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d02c      	beq.n	8008210 <DMA_SetConfig+0x1d0>
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4a2f      	ldr	r2, [pc, #188]	; (8008278 <DMA_SetConfig+0x238>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d027      	beq.n	8008210 <DMA_SetConfig+0x1d0>
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4a2d      	ldr	r2, [pc, #180]	; (800827c <DMA_SetConfig+0x23c>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d022      	beq.n	8008210 <DMA_SetConfig+0x1d0>
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	4a2c      	ldr	r2, [pc, #176]	; (8008280 <DMA_SetConfig+0x240>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d01d      	beq.n	8008210 <DMA_SetConfig+0x1d0>
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	4a2a      	ldr	r2, [pc, #168]	; (8008284 <DMA_SetConfig+0x244>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d018      	beq.n	8008210 <DMA_SetConfig+0x1d0>
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4a29      	ldr	r2, [pc, #164]	; (8008288 <DMA_SetConfig+0x248>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d013      	beq.n	8008210 <DMA_SetConfig+0x1d0>
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4a27      	ldr	r2, [pc, #156]	; (800828c <DMA_SetConfig+0x24c>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d00e      	beq.n	8008210 <DMA_SetConfig+0x1d0>
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4a26      	ldr	r2, [pc, #152]	; (8008290 <DMA_SetConfig+0x250>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d009      	beq.n	8008210 <DMA_SetConfig+0x1d0>
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4a24      	ldr	r2, [pc, #144]	; (8008294 <DMA_SetConfig+0x254>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d004      	beq.n	8008210 <DMA_SetConfig+0x1d0>
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4a23      	ldr	r2, [pc, #140]	; (8008298 <DMA_SetConfig+0x258>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d101      	bne.n	8008214 <DMA_SetConfig+0x1d4>
 8008210:	2301      	movs	r3, #1
 8008212:	e000      	b.n	8008216 <DMA_SetConfig+0x1d6>
 8008214:	2300      	movs	r3, #0
 8008216:	2b00      	cmp	r3, #0
 8008218:	d059      	beq.n	80082ce <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800821e:	f003 031f 	and.w	r3, r3, #31
 8008222:	223f      	movs	r2, #63	; 0x3f
 8008224:	409a      	lsls	r2, r3
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	681a      	ldr	r2, [r3, #0]
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008238:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	683a      	ldr	r2, [r7, #0]
 8008240:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	689b      	ldr	r3, [r3, #8]
 8008246:	2b40      	cmp	r3, #64	; 0x40
 8008248:	d138      	bne.n	80082bc <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	687a      	ldr	r2, [r7, #4]
 8008250:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	68ba      	ldr	r2, [r7, #8]
 8008258:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800825a:	e086      	b.n	800836a <DMA_SetConfig+0x32a>
 800825c:	40020010 	.word	0x40020010
 8008260:	40020028 	.word	0x40020028
 8008264:	40020040 	.word	0x40020040
 8008268:	40020058 	.word	0x40020058
 800826c:	40020070 	.word	0x40020070
 8008270:	40020088 	.word	0x40020088
 8008274:	400200a0 	.word	0x400200a0
 8008278:	400200b8 	.word	0x400200b8
 800827c:	40020410 	.word	0x40020410
 8008280:	40020428 	.word	0x40020428
 8008284:	40020440 	.word	0x40020440
 8008288:	40020458 	.word	0x40020458
 800828c:	40020470 	.word	0x40020470
 8008290:	40020488 	.word	0x40020488
 8008294:	400204a0 	.word	0x400204a0
 8008298:	400204b8 	.word	0x400204b8
 800829c:	58025408 	.word	0x58025408
 80082a0:	5802541c 	.word	0x5802541c
 80082a4:	58025430 	.word	0x58025430
 80082a8:	58025444 	.word	0x58025444
 80082ac:	58025458 	.word	0x58025458
 80082b0:	5802546c 	.word	0x5802546c
 80082b4:	58025480 	.word	0x58025480
 80082b8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	68ba      	ldr	r2, [r7, #8]
 80082c2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	687a      	ldr	r2, [r7, #4]
 80082ca:	60da      	str	r2, [r3, #12]
}
 80082cc:	e04d      	b.n	800836a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	4a29      	ldr	r2, [pc, #164]	; (8008378 <DMA_SetConfig+0x338>)
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d022      	beq.n	800831e <DMA_SetConfig+0x2de>
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4a27      	ldr	r2, [pc, #156]	; (800837c <DMA_SetConfig+0x33c>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d01d      	beq.n	800831e <DMA_SetConfig+0x2de>
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4a26      	ldr	r2, [pc, #152]	; (8008380 <DMA_SetConfig+0x340>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d018      	beq.n	800831e <DMA_SetConfig+0x2de>
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4a24      	ldr	r2, [pc, #144]	; (8008384 <DMA_SetConfig+0x344>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d013      	beq.n	800831e <DMA_SetConfig+0x2de>
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a23      	ldr	r2, [pc, #140]	; (8008388 <DMA_SetConfig+0x348>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d00e      	beq.n	800831e <DMA_SetConfig+0x2de>
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4a21      	ldr	r2, [pc, #132]	; (800838c <DMA_SetConfig+0x34c>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d009      	beq.n	800831e <DMA_SetConfig+0x2de>
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4a20      	ldr	r2, [pc, #128]	; (8008390 <DMA_SetConfig+0x350>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d004      	beq.n	800831e <DMA_SetConfig+0x2de>
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4a1e      	ldr	r2, [pc, #120]	; (8008394 <DMA_SetConfig+0x354>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d101      	bne.n	8008322 <DMA_SetConfig+0x2e2>
 800831e:	2301      	movs	r3, #1
 8008320:	e000      	b.n	8008324 <DMA_SetConfig+0x2e4>
 8008322:	2300      	movs	r3, #0
 8008324:	2b00      	cmp	r3, #0
 8008326:	d020      	beq.n	800836a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800832c:	f003 031f 	and.w	r3, r3, #31
 8008330:	2201      	movs	r2, #1
 8008332:	409a      	lsls	r2, r3
 8008334:	693b      	ldr	r3, [r7, #16]
 8008336:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	683a      	ldr	r2, [r7, #0]
 800833e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	689b      	ldr	r3, [r3, #8]
 8008344:	2b40      	cmp	r3, #64	; 0x40
 8008346:	d108      	bne.n	800835a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	687a      	ldr	r2, [r7, #4]
 800834e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	68ba      	ldr	r2, [r7, #8]
 8008356:	60da      	str	r2, [r3, #12]
}
 8008358:	e007      	b.n	800836a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	68ba      	ldr	r2, [r7, #8]
 8008360:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	687a      	ldr	r2, [r7, #4]
 8008368:	60da      	str	r2, [r3, #12]
}
 800836a:	bf00      	nop
 800836c:	371c      	adds	r7, #28
 800836e:	46bd      	mov	sp, r7
 8008370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008374:	4770      	bx	lr
 8008376:	bf00      	nop
 8008378:	58025408 	.word	0x58025408
 800837c:	5802541c 	.word	0x5802541c
 8008380:	58025430 	.word	0x58025430
 8008384:	58025444 	.word	0x58025444
 8008388:	58025458 	.word	0x58025458
 800838c:	5802546c 	.word	0x5802546c
 8008390:	58025480 	.word	0x58025480
 8008394:	58025494 	.word	0x58025494

08008398 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008398:	b480      	push	{r7}
 800839a:	b085      	sub	sp, #20
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4a42      	ldr	r2, [pc, #264]	; (80084b0 <DMA_CalcBaseAndBitshift+0x118>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d04a      	beq.n	8008440 <DMA_CalcBaseAndBitshift+0xa8>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a41      	ldr	r2, [pc, #260]	; (80084b4 <DMA_CalcBaseAndBitshift+0x11c>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d045      	beq.n	8008440 <DMA_CalcBaseAndBitshift+0xa8>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a3f      	ldr	r2, [pc, #252]	; (80084b8 <DMA_CalcBaseAndBitshift+0x120>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d040      	beq.n	8008440 <DMA_CalcBaseAndBitshift+0xa8>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4a3e      	ldr	r2, [pc, #248]	; (80084bc <DMA_CalcBaseAndBitshift+0x124>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d03b      	beq.n	8008440 <DMA_CalcBaseAndBitshift+0xa8>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a3c      	ldr	r2, [pc, #240]	; (80084c0 <DMA_CalcBaseAndBitshift+0x128>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d036      	beq.n	8008440 <DMA_CalcBaseAndBitshift+0xa8>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4a3b      	ldr	r2, [pc, #236]	; (80084c4 <DMA_CalcBaseAndBitshift+0x12c>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d031      	beq.n	8008440 <DMA_CalcBaseAndBitshift+0xa8>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a39      	ldr	r2, [pc, #228]	; (80084c8 <DMA_CalcBaseAndBitshift+0x130>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d02c      	beq.n	8008440 <DMA_CalcBaseAndBitshift+0xa8>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a38      	ldr	r2, [pc, #224]	; (80084cc <DMA_CalcBaseAndBitshift+0x134>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d027      	beq.n	8008440 <DMA_CalcBaseAndBitshift+0xa8>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a36      	ldr	r2, [pc, #216]	; (80084d0 <DMA_CalcBaseAndBitshift+0x138>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d022      	beq.n	8008440 <DMA_CalcBaseAndBitshift+0xa8>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a35      	ldr	r2, [pc, #212]	; (80084d4 <DMA_CalcBaseAndBitshift+0x13c>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d01d      	beq.n	8008440 <DMA_CalcBaseAndBitshift+0xa8>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a33      	ldr	r2, [pc, #204]	; (80084d8 <DMA_CalcBaseAndBitshift+0x140>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d018      	beq.n	8008440 <DMA_CalcBaseAndBitshift+0xa8>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4a32      	ldr	r2, [pc, #200]	; (80084dc <DMA_CalcBaseAndBitshift+0x144>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d013      	beq.n	8008440 <DMA_CalcBaseAndBitshift+0xa8>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a30      	ldr	r2, [pc, #192]	; (80084e0 <DMA_CalcBaseAndBitshift+0x148>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d00e      	beq.n	8008440 <DMA_CalcBaseAndBitshift+0xa8>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4a2f      	ldr	r2, [pc, #188]	; (80084e4 <DMA_CalcBaseAndBitshift+0x14c>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d009      	beq.n	8008440 <DMA_CalcBaseAndBitshift+0xa8>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a2d      	ldr	r2, [pc, #180]	; (80084e8 <DMA_CalcBaseAndBitshift+0x150>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d004      	beq.n	8008440 <DMA_CalcBaseAndBitshift+0xa8>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4a2c      	ldr	r2, [pc, #176]	; (80084ec <DMA_CalcBaseAndBitshift+0x154>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d101      	bne.n	8008444 <DMA_CalcBaseAndBitshift+0xac>
 8008440:	2301      	movs	r3, #1
 8008442:	e000      	b.n	8008446 <DMA_CalcBaseAndBitshift+0xae>
 8008444:	2300      	movs	r3, #0
 8008446:	2b00      	cmp	r3, #0
 8008448:	d024      	beq.n	8008494 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	b2db      	uxtb	r3, r3
 8008450:	3b10      	subs	r3, #16
 8008452:	4a27      	ldr	r2, [pc, #156]	; (80084f0 <DMA_CalcBaseAndBitshift+0x158>)
 8008454:	fba2 2303 	umull	r2, r3, r2, r3
 8008458:	091b      	lsrs	r3, r3, #4
 800845a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	f003 0307 	and.w	r3, r3, #7
 8008462:	4a24      	ldr	r2, [pc, #144]	; (80084f4 <DMA_CalcBaseAndBitshift+0x15c>)
 8008464:	5cd3      	ldrb	r3, [r2, r3]
 8008466:	461a      	mov	r2, r3
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	2b03      	cmp	r3, #3
 8008470:	d908      	bls.n	8008484 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	461a      	mov	r2, r3
 8008478:	4b1f      	ldr	r3, [pc, #124]	; (80084f8 <DMA_CalcBaseAndBitshift+0x160>)
 800847a:	4013      	ands	r3, r2
 800847c:	1d1a      	adds	r2, r3, #4
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	659a      	str	r2, [r3, #88]	; 0x58
 8008482:	e00d      	b.n	80084a0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	461a      	mov	r2, r3
 800848a:	4b1b      	ldr	r3, [pc, #108]	; (80084f8 <DMA_CalcBaseAndBitshift+0x160>)
 800848c:	4013      	ands	r3, r2
 800848e:	687a      	ldr	r2, [r7, #4]
 8008490:	6593      	str	r3, [r2, #88]	; 0x58
 8008492:	e005      	b.n	80084a0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	3714      	adds	r7, #20
 80084a8:	46bd      	mov	sp, r7
 80084aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ae:	4770      	bx	lr
 80084b0:	40020010 	.word	0x40020010
 80084b4:	40020028 	.word	0x40020028
 80084b8:	40020040 	.word	0x40020040
 80084bc:	40020058 	.word	0x40020058
 80084c0:	40020070 	.word	0x40020070
 80084c4:	40020088 	.word	0x40020088
 80084c8:	400200a0 	.word	0x400200a0
 80084cc:	400200b8 	.word	0x400200b8
 80084d0:	40020410 	.word	0x40020410
 80084d4:	40020428 	.word	0x40020428
 80084d8:	40020440 	.word	0x40020440
 80084dc:	40020458 	.word	0x40020458
 80084e0:	40020470 	.word	0x40020470
 80084e4:	40020488 	.word	0x40020488
 80084e8:	400204a0 	.word	0x400204a0
 80084ec:	400204b8 	.word	0x400204b8
 80084f0:	aaaaaaab 	.word	0xaaaaaaab
 80084f4:	08016c04 	.word	0x08016c04
 80084f8:	fffffc00 	.word	0xfffffc00

080084fc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80084fc:	b480      	push	{r7}
 80084fe:	b085      	sub	sp, #20
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008504:	2300      	movs	r3, #0
 8008506:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	699b      	ldr	r3, [r3, #24]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d120      	bne.n	8008552 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008514:	2b03      	cmp	r3, #3
 8008516:	d858      	bhi.n	80085ca <DMA_CheckFifoParam+0xce>
 8008518:	a201      	add	r2, pc, #4	; (adr r2, 8008520 <DMA_CheckFifoParam+0x24>)
 800851a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800851e:	bf00      	nop
 8008520:	08008531 	.word	0x08008531
 8008524:	08008543 	.word	0x08008543
 8008528:	08008531 	.word	0x08008531
 800852c:	080085cb 	.word	0x080085cb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008534:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008538:	2b00      	cmp	r3, #0
 800853a:	d048      	beq.n	80085ce <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800853c:	2301      	movs	r3, #1
 800853e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008540:	e045      	b.n	80085ce <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008546:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800854a:	d142      	bne.n	80085d2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800854c:	2301      	movs	r3, #1
 800854e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008550:	e03f      	b.n	80085d2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	699b      	ldr	r3, [r3, #24]
 8008556:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800855a:	d123      	bne.n	80085a4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008560:	2b03      	cmp	r3, #3
 8008562:	d838      	bhi.n	80085d6 <DMA_CheckFifoParam+0xda>
 8008564:	a201      	add	r2, pc, #4	; (adr r2, 800856c <DMA_CheckFifoParam+0x70>)
 8008566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800856a:	bf00      	nop
 800856c:	0800857d 	.word	0x0800857d
 8008570:	08008583 	.word	0x08008583
 8008574:	0800857d 	.word	0x0800857d
 8008578:	08008595 	.word	0x08008595
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800857c:	2301      	movs	r3, #1
 800857e:	73fb      	strb	r3, [r7, #15]
        break;
 8008580:	e030      	b.n	80085e4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008586:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800858a:	2b00      	cmp	r3, #0
 800858c:	d025      	beq.n	80085da <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800858e:	2301      	movs	r3, #1
 8008590:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008592:	e022      	b.n	80085da <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008598:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800859c:	d11f      	bne.n	80085de <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800859e:	2301      	movs	r3, #1
 80085a0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80085a2:	e01c      	b.n	80085de <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085a8:	2b02      	cmp	r3, #2
 80085aa:	d902      	bls.n	80085b2 <DMA_CheckFifoParam+0xb6>
 80085ac:	2b03      	cmp	r3, #3
 80085ae:	d003      	beq.n	80085b8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80085b0:	e018      	b.n	80085e4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80085b2:	2301      	movs	r3, #1
 80085b4:	73fb      	strb	r3, [r7, #15]
        break;
 80085b6:	e015      	b.n	80085e4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d00e      	beq.n	80085e2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80085c4:	2301      	movs	r3, #1
 80085c6:	73fb      	strb	r3, [r7, #15]
    break;
 80085c8:	e00b      	b.n	80085e2 <DMA_CheckFifoParam+0xe6>
        break;
 80085ca:	bf00      	nop
 80085cc:	e00a      	b.n	80085e4 <DMA_CheckFifoParam+0xe8>
        break;
 80085ce:	bf00      	nop
 80085d0:	e008      	b.n	80085e4 <DMA_CheckFifoParam+0xe8>
        break;
 80085d2:	bf00      	nop
 80085d4:	e006      	b.n	80085e4 <DMA_CheckFifoParam+0xe8>
        break;
 80085d6:	bf00      	nop
 80085d8:	e004      	b.n	80085e4 <DMA_CheckFifoParam+0xe8>
        break;
 80085da:	bf00      	nop
 80085dc:	e002      	b.n	80085e4 <DMA_CheckFifoParam+0xe8>
        break;
 80085de:	bf00      	nop
 80085e0:	e000      	b.n	80085e4 <DMA_CheckFifoParam+0xe8>
    break;
 80085e2:	bf00      	nop
    }
  }

  return status;
 80085e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3714      	adds	r7, #20
 80085ea:	46bd      	mov	sp, r7
 80085ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f0:	4770      	bx	lr
 80085f2:	bf00      	nop

080085f4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80085f4:	b480      	push	{r7}
 80085f6:	b085      	sub	sp, #20
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	4a38      	ldr	r2, [pc, #224]	; (80086e8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008608:	4293      	cmp	r3, r2
 800860a:	d022      	beq.n	8008652 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	4a36      	ldr	r2, [pc, #216]	; (80086ec <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008612:	4293      	cmp	r3, r2
 8008614:	d01d      	beq.n	8008652 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	4a35      	ldr	r2, [pc, #212]	; (80086f0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d018      	beq.n	8008652 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	4a33      	ldr	r2, [pc, #204]	; (80086f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8008626:	4293      	cmp	r3, r2
 8008628:	d013      	beq.n	8008652 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	4a32      	ldr	r2, [pc, #200]	; (80086f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008630:	4293      	cmp	r3, r2
 8008632:	d00e      	beq.n	8008652 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	4a30      	ldr	r2, [pc, #192]	; (80086fc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d009      	beq.n	8008652 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	4a2f      	ldr	r2, [pc, #188]	; (8008700 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d004      	beq.n	8008652 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4a2d      	ldr	r2, [pc, #180]	; (8008704 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d101      	bne.n	8008656 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8008652:	2301      	movs	r3, #1
 8008654:	e000      	b.n	8008658 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8008656:	2300      	movs	r3, #0
 8008658:	2b00      	cmp	r3, #0
 800865a:	d01a      	beq.n	8008692 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	b2db      	uxtb	r3, r3
 8008662:	3b08      	subs	r3, #8
 8008664:	4a28      	ldr	r2, [pc, #160]	; (8008708 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8008666:	fba2 2303 	umull	r2, r3, r2, r3
 800866a:	091b      	lsrs	r3, r3, #4
 800866c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800866e:	68fa      	ldr	r2, [r7, #12]
 8008670:	4b26      	ldr	r3, [pc, #152]	; (800870c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8008672:	4413      	add	r3, r2
 8008674:	009b      	lsls	r3, r3, #2
 8008676:	461a      	mov	r2, r3
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	4a24      	ldr	r2, [pc, #144]	; (8008710 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008680:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	f003 031f 	and.w	r3, r3, #31
 8008688:	2201      	movs	r2, #1
 800868a:	409a      	lsls	r2, r3
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008690:	e024      	b.n	80086dc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	b2db      	uxtb	r3, r3
 8008698:	3b10      	subs	r3, #16
 800869a:	4a1e      	ldr	r2, [pc, #120]	; (8008714 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800869c:	fba2 2303 	umull	r2, r3, r2, r3
 80086a0:	091b      	lsrs	r3, r3, #4
 80086a2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	4a1c      	ldr	r2, [pc, #112]	; (8008718 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80086a8:	4293      	cmp	r3, r2
 80086aa:	d806      	bhi.n	80086ba <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	4a1b      	ldr	r2, [pc, #108]	; (800871c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d902      	bls.n	80086ba <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	3308      	adds	r3, #8
 80086b8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80086ba:	68fa      	ldr	r2, [r7, #12]
 80086bc:	4b18      	ldr	r3, [pc, #96]	; (8008720 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80086be:	4413      	add	r3, r2
 80086c0:	009b      	lsls	r3, r3, #2
 80086c2:	461a      	mov	r2, r3
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	4a16      	ldr	r2, [pc, #88]	; (8008724 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80086cc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	f003 031f 	and.w	r3, r3, #31
 80086d4:	2201      	movs	r2, #1
 80086d6:	409a      	lsls	r2, r3
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	669a      	str	r2, [r3, #104]	; 0x68
}
 80086dc:	bf00      	nop
 80086de:	3714      	adds	r7, #20
 80086e0:	46bd      	mov	sp, r7
 80086e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e6:	4770      	bx	lr
 80086e8:	58025408 	.word	0x58025408
 80086ec:	5802541c 	.word	0x5802541c
 80086f0:	58025430 	.word	0x58025430
 80086f4:	58025444 	.word	0x58025444
 80086f8:	58025458 	.word	0x58025458
 80086fc:	5802546c 	.word	0x5802546c
 8008700:	58025480 	.word	0x58025480
 8008704:	58025494 	.word	0x58025494
 8008708:	cccccccd 	.word	0xcccccccd
 800870c:	16009600 	.word	0x16009600
 8008710:	58025880 	.word	0x58025880
 8008714:	aaaaaaab 	.word	0xaaaaaaab
 8008718:	400204b8 	.word	0x400204b8
 800871c:	4002040f 	.word	0x4002040f
 8008720:	10008200 	.word	0x10008200
 8008724:	40020880 	.word	0x40020880

08008728 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008728:	b480      	push	{r7}
 800872a:	b085      	sub	sp, #20
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	b2db      	uxtb	r3, r3
 8008736:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d04a      	beq.n	80087d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	2b08      	cmp	r3, #8
 8008742:	d847      	bhi.n	80087d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	4a25      	ldr	r2, [pc, #148]	; (80087e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d022      	beq.n	8008794 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	4a24      	ldr	r2, [pc, #144]	; (80087e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d01d      	beq.n	8008794 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4a22      	ldr	r2, [pc, #136]	; (80087e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d018      	beq.n	8008794 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	4a21      	ldr	r2, [pc, #132]	; (80087ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d013      	beq.n	8008794 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4a1f      	ldr	r2, [pc, #124]	; (80087f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d00e      	beq.n	8008794 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4a1e      	ldr	r2, [pc, #120]	; (80087f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d009      	beq.n	8008794 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4a1c      	ldr	r2, [pc, #112]	; (80087f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d004      	beq.n	8008794 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4a1b      	ldr	r2, [pc, #108]	; (80087fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d101      	bne.n	8008798 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008794:	2301      	movs	r3, #1
 8008796:	e000      	b.n	800879a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008798:	2300      	movs	r3, #0
 800879a:	2b00      	cmp	r3, #0
 800879c:	d00a      	beq.n	80087b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800879e:	68fa      	ldr	r2, [r7, #12]
 80087a0:	4b17      	ldr	r3, [pc, #92]	; (8008800 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80087a2:	4413      	add	r3, r2
 80087a4:	009b      	lsls	r3, r3, #2
 80087a6:	461a      	mov	r2, r3
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	4a15      	ldr	r2, [pc, #84]	; (8008804 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80087b0:	671a      	str	r2, [r3, #112]	; 0x70
 80087b2:	e009      	b.n	80087c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80087b4:	68fa      	ldr	r2, [r7, #12]
 80087b6:	4b14      	ldr	r3, [pc, #80]	; (8008808 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80087b8:	4413      	add	r3, r2
 80087ba:	009b      	lsls	r3, r3, #2
 80087bc:	461a      	mov	r2, r3
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	4a11      	ldr	r2, [pc, #68]	; (800880c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80087c6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	3b01      	subs	r3, #1
 80087cc:	2201      	movs	r2, #1
 80087ce:	409a      	lsls	r2, r3
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80087d4:	bf00      	nop
 80087d6:	3714      	adds	r7, #20
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr
 80087e0:	58025408 	.word	0x58025408
 80087e4:	5802541c 	.word	0x5802541c
 80087e8:	58025430 	.word	0x58025430
 80087ec:	58025444 	.word	0x58025444
 80087f0:	58025458 	.word	0x58025458
 80087f4:	5802546c 	.word	0x5802546c
 80087f8:	58025480 	.word	0x58025480
 80087fc:	58025494 	.word	0x58025494
 8008800:	1600963f 	.word	0x1600963f
 8008804:	58025940 	.word	0x58025940
 8008808:	1000823f 	.word	0x1000823f
 800880c:	40020940 	.word	0x40020940

08008810 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008810:	b480      	push	{r7}
 8008812:	b089      	sub	sp, #36	; 0x24
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
 8008818:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800881a:	2300      	movs	r3, #0
 800881c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800881e:	4b89      	ldr	r3, [pc, #548]	; (8008a44 <HAL_GPIO_Init+0x234>)
 8008820:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008822:	e194      	b.n	8008b4e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	681a      	ldr	r2, [r3, #0]
 8008828:	2101      	movs	r1, #1
 800882a:	69fb      	ldr	r3, [r7, #28]
 800882c:	fa01 f303 	lsl.w	r3, r1, r3
 8008830:	4013      	ands	r3, r2
 8008832:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008834:	693b      	ldr	r3, [r7, #16]
 8008836:	2b00      	cmp	r3, #0
 8008838:	f000 8186 	beq.w	8008b48 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	f003 0303 	and.w	r3, r3, #3
 8008844:	2b01      	cmp	r3, #1
 8008846:	d005      	beq.n	8008854 <HAL_GPIO_Init+0x44>
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	685b      	ldr	r3, [r3, #4]
 800884c:	f003 0303 	and.w	r3, r3, #3
 8008850:	2b02      	cmp	r3, #2
 8008852:	d130      	bne.n	80088b6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	689b      	ldr	r3, [r3, #8]
 8008858:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800885a:	69fb      	ldr	r3, [r7, #28]
 800885c:	005b      	lsls	r3, r3, #1
 800885e:	2203      	movs	r2, #3
 8008860:	fa02 f303 	lsl.w	r3, r2, r3
 8008864:	43db      	mvns	r3, r3
 8008866:	69ba      	ldr	r2, [r7, #24]
 8008868:	4013      	ands	r3, r2
 800886a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	68da      	ldr	r2, [r3, #12]
 8008870:	69fb      	ldr	r3, [r7, #28]
 8008872:	005b      	lsls	r3, r3, #1
 8008874:	fa02 f303 	lsl.w	r3, r2, r3
 8008878:	69ba      	ldr	r2, [r7, #24]
 800887a:	4313      	orrs	r3, r2
 800887c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	69ba      	ldr	r2, [r7, #24]
 8008882:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	685b      	ldr	r3, [r3, #4]
 8008888:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800888a:	2201      	movs	r2, #1
 800888c:	69fb      	ldr	r3, [r7, #28]
 800888e:	fa02 f303 	lsl.w	r3, r2, r3
 8008892:	43db      	mvns	r3, r3
 8008894:	69ba      	ldr	r2, [r7, #24]
 8008896:	4013      	ands	r3, r2
 8008898:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	685b      	ldr	r3, [r3, #4]
 800889e:	091b      	lsrs	r3, r3, #4
 80088a0:	f003 0201 	and.w	r2, r3, #1
 80088a4:	69fb      	ldr	r3, [r7, #28]
 80088a6:	fa02 f303 	lsl.w	r3, r2, r3
 80088aa:	69ba      	ldr	r2, [r7, #24]
 80088ac:	4313      	orrs	r3, r2
 80088ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	69ba      	ldr	r2, [r7, #24]
 80088b4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	685b      	ldr	r3, [r3, #4]
 80088ba:	f003 0303 	and.w	r3, r3, #3
 80088be:	2b03      	cmp	r3, #3
 80088c0:	d017      	beq.n	80088f2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	68db      	ldr	r3, [r3, #12]
 80088c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80088c8:	69fb      	ldr	r3, [r7, #28]
 80088ca:	005b      	lsls	r3, r3, #1
 80088cc:	2203      	movs	r2, #3
 80088ce:	fa02 f303 	lsl.w	r3, r2, r3
 80088d2:	43db      	mvns	r3, r3
 80088d4:	69ba      	ldr	r2, [r7, #24]
 80088d6:	4013      	ands	r3, r2
 80088d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	689a      	ldr	r2, [r3, #8]
 80088de:	69fb      	ldr	r3, [r7, #28]
 80088e0:	005b      	lsls	r3, r3, #1
 80088e2:	fa02 f303 	lsl.w	r3, r2, r3
 80088e6:	69ba      	ldr	r2, [r7, #24]
 80088e8:	4313      	orrs	r3, r2
 80088ea:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	69ba      	ldr	r2, [r7, #24]
 80088f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	685b      	ldr	r3, [r3, #4]
 80088f6:	f003 0303 	and.w	r3, r3, #3
 80088fa:	2b02      	cmp	r3, #2
 80088fc:	d123      	bne.n	8008946 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80088fe:	69fb      	ldr	r3, [r7, #28]
 8008900:	08da      	lsrs	r2, r3, #3
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	3208      	adds	r2, #8
 8008906:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800890a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800890c:	69fb      	ldr	r3, [r7, #28]
 800890e:	f003 0307 	and.w	r3, r3, #7
 8008912:	009b      	lsls	r3, r3, #2
 8008914:	220f      	movs	r2, #15
 8008916:	fa02 f303 	lsl.w	r3, r2, r3
 800891a:	43db      	mvns	r3, r3
 800891c:	69ba      	ldr	r2, [r7, #24]
 800891e:	4013      	ands	r3, r2
 8008920:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	691a      	ldr	r2, [r3, #16]
 8008926:	69fb      	ldr	r3, [r7, #28]
 8008928:	f003 0307 	and.w	r3, r3, #7
 800892c:	009b      	lsls	r3, r3, #2
 800892e:	fa02 f303 	lsl.w	r3, r2, r3
 8008932:	69ba      	ldr	r2, [r7, #24]
 8008934:	4313      	orrs	r3, r2
 8008936:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008938:	69fb      	ldr	r3, [r7, #28]
 800893a:	08da      	lsrs	r2, r3, #3
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	3208      	adds	r2, #8
 8008940:	69b9      	ldr	r1, [r7, #24]
 8008942:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800894c:	69fb      	ldr	r3, [r7, #28]
 800894e:	005b      	lsls	r3, r3, #1
 8008950:	2203      	movs	r2, #3
 8008952:	fa02 f303 	lsl.w	r3, r2, r3
 8008956:	43db      	mvns	r3, r3
 8008958:	69ba      	ldr	r2, [r7, #24]
 800895a:	4013      	ands	r3, r2
 800895c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	685b      	ldr	r3, [r3, #4]
 8008962:	f003 0203 	and.w	r2, r3, #3
 8008966:	69fb      	ldr	r3, [r7, #28]
 8008968:	005b      	lsls	r3, r3, #1
 800896a:	fa02 f303 	lsl.w	r3, r2, r3
 800896e:	69ba      	ldr	r2, [r7, #24]
 8008970:	4313      	orrs	r3, r2
 8008972:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	69ba      	ldr	r2, [r7, #24]
 8008978:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	685b      	ldr	r3, [r3, #4]
 800897e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008982:	2b00      	cmp	r3, #0
 8008984:	f000 80e0 	beq.w	8008b48 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008988:	4b2f      	ldr	r3, [pc, #188]	; (8008a48 <HAL_GPIO_Init+0x238>)
 800898a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800898e:	4a2e      	ldr	r2, [pc, #184]	; (8008a48 <HAL_GPIO_Init+0x238>)
 8008990:	f043 0302 	orr.w	r3, r3, #2
 8008994:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008998:	4b2b      	ldr	r3, [pc, #172]	; (8008a48 <HAL_GPIO_Init+0x238>)
 800899a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800899e:	f003 0302 	and.w	r3, r3, #2
 80089a2:	60fb      	str	r3, [r7, #12]
 80089a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80089a6:	4a29      	ldr	r2, [pc, #164]	; (8008a4c <HAL_GPIO_Init+0x23c>)
 80089a8:	69fb      	ldr	r3, [r7, #28]
 80089aa:	089b      	lsrs	r3, r3, #2
 80089ac:	3302      	adds	r3, #2
 80089ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80089b4:	69fb      	ldr	r3, [r7, #28]
 80089b6:	f003 0303 	and.w	r3, r3, #3
 80089ba:	009b      	lsls	r3, r3, #2
 80089bc:	220f      	movs	r2, #15
 80089be:	fa02 f303 	lsl.w	r3, r2, r3
 80089c2:	43db      	mvns	r3, r3
 80089c4:	69ba      	ldr	r2, [r7, #24]
 80089c6:	4013      	ands	r3, r2
 80089c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	4a20      	ldr	r2, [pc, #128]	; (8008a50 <HAL_GPIO_Init+0x240>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d052      	beq.n	8008a78 <HAL_GPIO_Init+0x268>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	4a1f      	ldr	r2, [pc, #124]	; (8008a54 <HAL_GPIO_Init+0x244>)
 80089d6:	4293      	cmp	r3, r2
 80089d8:	d031      	beq.n	8008a3e <HAL_GPIO_Init+0x22e>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	4a1e      	ldr	r2, [pc, #120]	; (8008a58 <HAL_GPIO_Init+0x248>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	d02b      	beq.n	8008a3a <HAL_GPIO_Init+0x22a>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	4a1d      	ldr	r2, [pc, #116]	; (8008a5c <HAL_GPIO_Init+0x24c>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d025      	beq.n	8008a36 <HAL_GPIO_Init+0x226>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	4a1c      	ldr	r2, [pc, #112]	; (8008a60 <HAL_GPIO_Init+0x250>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d01f      	beq.n	8008a32 <HAL_GPIO_Init+0x222>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	4a1b      	ldr	r2, [pc, #108]	; (8008a64 <HAL_GPIO_Init+0x254>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d019      	beq.n	8008a2e <HAL_GPIO_Init+0x21e>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	4a1a      	ldr	r2, [pc, #104]	; (8008a68 <HAL_GPIO_Init+0x258>)
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d013      	beq.n	8008a2a <HAL_GPIO_Init+0x21a>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	4a19      	ldr	r2, [pc, #100]	; (8008a6c <HAL_GPIO_Init+0x25c>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d00d      	beq.n	8008a26 <HAL_GPIO_Init+0x216>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	4a18      	ldr	r2, [pc, #96]	; (8008a70 <HAL_GPIO_Init+0x260>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d007      	beq.n	8008a22 <HAL_GPIO_Init+0x212>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	4a17      	ldr	r2, [pc, #92]	; (8008a74 <HAL_GPIO_Init+0x264>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d101      	bne.n	8008a1e <HAL_GPIO_Init+0x20e>
 8008a1a:	2309      	movs	r3, #9
 8008a1c:	e02d      	b.n	8008a7a <HAL_GPIO_Init+0x26a>
 8008a1e:	230a      	movs	r3, #10
 8008a20:	e02b      	b.n	8008a7a <HAL_GPIO_Init+0x26a>
 8008a22:	2308      	movs	r3, #8
 8008a24:	e029      	b.n	8008a7a <HAL_GPIO_Init+0x26a>
 8008a26:	2307      	movs	r3, #7
 8008a28:	e027      	b.n	8008a7a <HAL_GPIO_Init+0x26a>
 8008a2a:	2306      	movs	r3, #6
 8008a2c:	e025      	b.n	8008a7a <HAL_GPIO_Init+0x26a>
 8008a2e:	2305      	movs	r3, #5
 8008a30:	e023      	b.n	8008a7a <HAL_GPIO_Init+0x26a>
 8008a32:	2304      	movs	r3, #4
 8008a34:	e021      	b.n	8008a7a <HAL_GPIO_Init+0x26a>
 8008a36:	2303      	movs	r3, #3
 8008a38:	e01f      	b.n	8008a7a <HAL_GPIO_Init+0x26a>
 8008a3a:	2302      	movs	r3, #2
 8008a3c:	e01d      	b.n	8008a7a <HAL_GPIO_Init+0x26a>
 8008a3e:	2301      	movs	r3, #1
 8008a40:	e01b      	b.n	8008a7a <HAL_GPIO_Init+0x26a>
 8008a42:	bf00      	nop
 8008a44:	58000080 	.word	0x58000080
 8008a48:	58024400 	.word	0x58024400
 8008a4c:	58000400 	.word	0x58000400
 8008a50:	58020000 	.word	0x58020000
 8008a54:	58020400 	.word	0x58020400
 8008a58:	58020800 	.word	0x58020800
 8008a5c:	58020c00 	.word	0x58020c00
 8008a60:	58021000 	.word	0x58021000
 8008a64:	58021400 	.word	0x58021400
 8008a68:	58021800 	.word	0x58021800
 8008a6c:	58021c00 	.word	0x58021c00
 8008a70:	58022000 	.word	0x58022000
 8008a74:	58022400 	.word	0x58022400
 8008a78:	2300      	movs	r3, #0
 8008a7a:	69fa      	ldr	r2, [r7, #28]
 8008a7c:	f002 0203 	and.w	r2, r2, #3
 8008a80:	0092      	lsls	r2, r2, #2
 8008a82:	4093      	lsls	r3, r2
 8008a84:	69ba      	ldr	r2, [r7, #24]
 8008a86:	4313      	orrs	r3, r2
 8008a88:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008a8a:	4938      	ldr	r1, [pc, #224]	; (8008b6c <HAL_GPIO_Init+0x35c>)
 8008a8c:	69fb      	ldr	r3, [r7, #28]
 8008a8e:	089b      	lsrs	r3, r3, #2
 8008a90:	3302      	adds	r3, #2
 8008a92:	69ba      	ldr	r2, [r7, #24]
 8008a94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008a98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	43db      	mvns	r3, r3
 8008aa4:	69ba      	ldr	r2, [r7, #24]
 8008aa6:	4013      	ands	r3, r2
 8008aa8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	685b      	ldr	r3, [r3, #4]
 8008aae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d003      	beq.n	8008abe <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8008ab6:	69ba      	ldr	r2, [r7, #24]
 8008ab8:	693b      	ldr	r3, [r7, #16]
 8008aba:	4313      	orrs	r3, r2
 8008abc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008abe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008ac2:	69bb      	ldr	r3, [r7, #24]
 8008ac4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008ac6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008aca:	685b      	ldr	r3, [r3, #4]
 8008acc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008ace:	693b      	ldr	r3, [r7, #16]
 8008ad0:	43db      	mvns	r3, r3
 8008ad2:	69ba      	ldr	r2, [r7, #24]
 8008ad4:	4013      	ands	r3, r2
 8008ad6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	685b      	ldr	r3, [r3, #4]
 8008adc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d003      	beq.n	8008aec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008ae4:	69ba      	ldr	r2, [r7, #24]
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	4313      	orrs	r3, r2
 8008aea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008aec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008af0:	69bb      	ldr	r3, [r7, #24]
 8008af2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008af4:	697b      	ldr	r3, [r7, #20]
 8008af6:	685b      	ldr	r3, [r3, #4]
 8008af8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	43db      	mvns	r3, r3
 8008afe:	69ba      	ldr	r2, [r7, #24]
 8008b00:	4013      	ands	r3, r2
 8008b02:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	685b      	ldr	r3, [r3, #4]
 8008b08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d003      	beq.n	8008b18 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008b10:	69ba      	ldr	r2, [r7, #24]
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	4313      	orrs	r3, r2
 8008b16:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	69ba      	ldr	r2, [r7, #24]
 8008b1c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	43db      	mvns	r3, r3
 8008b28:	69ba      	ldr	r2, [r7, #24]
 8008b2a:	4013      	ands	r3, r2
 8008b2c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	685b      	ldr	r3, [r3, #4]
 8008b32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d003      	beq.n	8008b42 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8008b3a:	69ba      	ldr	r2, [r7, #24]
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	4313      	orrs	r3, r2
 8008b40:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	69ba      	ldr	r2, [r7, #24]
 8008b46:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008b48:	69fb      	ldr	r3, [r7, #28]
 8008b4a:	3301      	adds	r3, #1
 8008b4c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	681a      	ldr	r2, [r3, #0]
 8008b52:	69fb      	ldr	r3, [r7, #28]
 8008b54:	fa22 f303 	lsr.w	r3, r2, r3
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	f47f ae63 	bne.w	8008824 <HAL_GPIO_Init+0x14>
  }
}
 8008b5e:	bf00      	nop
 8008b60:	bf00      	nop
 8008b62:	3724      	adds	r7, #36	; 0x24
 8008b64:	46bd      	mov	sp, r7
 8008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6a:	4770      	bx	lr
 8008b6c:	58000400 	.word	0x58000400

08008b70 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008b70:	b480      	push	{r7}
 8008b72:	b085      	sub	sp, #20
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
 8008b78:	460b      	mov	r3, r1
 8008b7a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	691a      	ldr	r2, [r3, #16]
 8008b80:	887b      	ldrh	r3, [r7, #2]
 8008b82:	4013      	ands	r3, r2
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d002      	beq.n	8008b8e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008b88:	2301      	movs	r3, #1
 8008b8a:	73fb      	strb	r3, [r7, #15]
 8008b8c:	e001      	b.n	8008b92 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	3714      	adds	r7, #20
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9e:	4770      	bx	lr

08008ba0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b083      	sub	sp, #12
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
 8008ba8:	460b      	mov	r3, r1
 8008baa:	807b      	strh	r3, [r7, #2]
 8008bac:	4613      	mov	r3, r2
 8008bae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008bb0:	787b      	ldrb	r3, [r7, #1]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d003      	beq.n	8008bbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008bb6:	887a      	ldrh	r2, [r7, #2]
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008bbc:	e003      	b.n	8008bc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008bbe:	887b      	ldrh	r3, [r7, #2]
 8008bc0:	041a      	lsls	r2, r3, #16
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	619a      	str	r2, [r3, #24]
}
 8008bc6:	bf00      	nop
 8008bc8:	370c      	adds	r7, #12
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd0:	4770      	bx	lr
	...

08008bd4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b082      	sub	sp, #8
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d101      	bne.n	8008be6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008be2:	2301      	movs	r3, #1
 8008be4:	e08b      	b.n	8008cfe <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008bec:	b2db      	uxtb	r3, r3
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d106      	bne.n	8008c00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f7fa f8d2 	bl	8002da4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2224      	movs	r2, #36	; 0x24
 8008c04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	681a      	ldr	r2, [r3, #0]
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f022 0201 	bic.w	r2, r2, #1
 8008c16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	685a      	ldr	r2, [r3, #4]
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008c24:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	689a      	ldr	r2, [r3, #8]
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008c34:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	68db      	ldr	r3, [r3, #12]
 8008c3a:	2b01      	cmp	r3, #1
 8008c3c:	d107      	bne.n	8008c4e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	689a      	ldr	r2, [r3, #8]
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008c4a:	609a      	str	r2, [r3, #8]
 8008c4c:	e006      	b.n	8008c5c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	689a      	ldr	r2, [r3, #8]
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008c5a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	68db      	ldr	r3, [r3, #12]
 8008c60:	2b02      	cmp	r3, #2
 8008c62:	d108      	bne.n	8008c76 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	685a      	ldr	r2, [r3, #4]
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008c72:	605a      	str	r2, [r3, #4]
 8008c74:	e007      	b.n	8008c86 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	685a      	ldr	r2, [r3, #4]
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008c84:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	6859      	ldr	r1, [r3, #4]
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681a      	ldr	r2, [r3, #0]
 8008c90:	4b1d      	ldr	r3, [pc, #116]	; (8008d08 <HAL_I2C_Init+0x134>)
 8008c92:	430b      	orrs	r3, r1
 8008c94:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	68da      	ldr	r2, [r3, #12]
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008ca4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	691a      	ldr	r2, [r3, #16]
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	695b      	ldr	r3, [r3, #20]
 8008cae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	699b      	ldr	r3, [r3, #24]
 8008cb6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	430a      	orrs	r2, r1
 8008cbe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	69d9      	ldr	r1, [r3, #28]
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6a1a      	ldr	r2, [r3, #32]
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	430a      	orrs	r2, r1
 8008cce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	681a      	ldr	r2, [r3, #0]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f042 0201 	orr.w	r2, r2, #1
 8008cde:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2220      	movs	r2, #32
 8008cea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008cfc:	2300      	movs	r3, #0
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	3708      	adds	r7, #8
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}
 8008d06:	bf00      	nop
 8008d08:	02008000 	.word	0x02008000

08008d0c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b088      	sub	sp, #32
 8008d10:	af02      	add	r7, sp, #8
 8008d12:	60f8      	str	r0, [r7, #12]
 8008d14:	607a      	str	r2, [r7, #4]
 8008d16:	461a      	mov	r2, r3
 8008d18:	460b      	mov	r3, r1
 8008d1a:	817b      	strh	r3, [r7, #10]
 8008d1c:	4613      	mov	r3, r2
 8008d1e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008d26:	b2db      	uxtb	r3, r3
 8008d28:	2b20      	cmp	r3, #32
 8008d2a:	f040 80fd 	bne.w	8008f28 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008d34:	2b01      	cmp	r3, #1
 8008d36:	d101      	bne.n	8008d3c <HAL_I2C_Master_Transmit+0x30>
 8008d38:	2302      	movs	r3, #2
 8008d3a:	e0f6      	b.n	8008f2a <HAL_I2C_Master_Transmit+0x21e>
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	2201      	movs	r2, #1
 8008d40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008d44:	f7fa fe00 	bl	8003948 <HAL_GetTick>
 8008d48:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008d4a:	693b      	ldr	r3, [r7, #16]
 8008d4c:	9300      	str	r3, [sp, #0]
 8008d4e:	2319      	movs	r3, #25
 8008d50:	2201      	movs	r2, #1
 8008d52:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008d56:	68f8      	ldr	r0, [r7, #12]
 8008d58:	f000 fa0a 	bl	8009170 <I2C_WaitOnFlagUntilTimeout>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d001      	beq.n	8008d66 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8008d62:	2301      	movs	r3, #1
 8008d64:	e0e1      	b.n	8008f2a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	2221      	movs	r2, #33	; 0x21
 8008d6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	2210      	movs	r2, #16
 8008d72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	687a      	ldr	r2, [r7, #4]
 8008d80:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	893a      	ldrh	r2, [r7, #8]
 8008d86:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d92:	b29b      	uxth	r3, r3
 8008d94:	2bff      	cmp	r3, #255	; 0xff
 8008d96:	d906      	bls.n	8008da6 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	22ff      	movs	r2, #255	; 0xff
 8008d9c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8008d9e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008da2:	617b      	str	r3, [r7, #20]
 8008da4:	e007      	b.n	8008db6 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008daa:	b29a      	uxth	r2, r3
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8008db0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008db4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d024      	beq.n	8008e08 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dc2:	781a      	ldrb	r2, [r3, #0]
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dce:	1c5a      	adds	r2, r3, #1
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008dd8:	b29b      	uxth	r3, r3
 8008dda:	3b01      	subs	r3, #1
 8008ddc:	b29a      	uxth	r2, r3
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008de6:	3b01      	subs	r3, #1
 8008de8:	b29a      	uxth	r2, r3
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008df2:	b2db      	uxtb	r3, r3
 8008df4:	3301      	adds	r3, #1
 8008df6:	b2da      	uxtb	r2, r3
 8008df8:	8979      	ldrh	r1, [r7, #10]
 8008dfa:	4b4e      	ldr	r3, [pc, #312]	; (8008f34 <HAL_I2C_Master_Transmit+0x228>)
 8008dfc:	9300      	str	r3, [sp, #0]
 8008dfe:	697b      	ldr	r3, [r7, #20]
 8008e00:	68f8      	ldr	r0, [r7, #12]
 8008e02:	f000 fc05 	bl	8009610 <I2C_TransferConfig>
 8008e06:	e066      	b.n	8008ed6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e0c:	b2da      	uxtb	r2, r3
 8008e0e:	8979      	ldrh	r1, [r7, #10]
 8008e10:	4b48      	ldr	r3, [pc, #288]	; (8008f34 <HAL_I2C_Master_Transmit+0x228>)
 8008e12:	9300      	str	r3, [sp, #0]
 8008e14:	697b      	ldr	r3, [r7, #20]
 8008e16:	68f8      	ldr	r0, [r7, #12]
 8008e18:	f000 fbfa 	bl	8009610 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8008e1c:	e05b      	b.n	8008ed6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008e1e:	693a      	ldr	r2, [r7, #16]
 8008e20:	6a39      	ldr	r1, [r7, #32]
 8008e22:	68f8      	ldr	r0, [r7, #12]
 8008e24:	f000 f9fd 	bl	8009222 <I2C_WaitOnTXISFlagUntilTimeout>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d001      	beq.n	8008e32 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8008e2e:	2301      	movs	r3, #1
 8008e30:	e07b      	b.n	8008f2a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e36:	781a      	ldrb	r2, [r3, #0]
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e42:	1c5a      	adds	r2, r3, #1
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e4c:	b29b      	uxth	r3, r3
 8008e4e:	3b01      	subs	r3, #1
 8008e50:	b29a      	uxth	r2, r3
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e5a:	3b01      	subs	r3, #1
 8008e5c:	b29a      	uxth	r2, r3
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e66:	b29b      	uxth	r3, r3
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d034      	beq.n	8008ed6 <HAL_I2C_Master_Transmit+0x1ca>
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d130      	bne.n	8008ed6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008e74:	693b      	ldr	r3, [r7, #16]
 8008e76:	9300      	str	r3, [sp, #0]
 8008e78:	6a3b      	ldr	r3, [r7, #32]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	2180      	movs	r1, #128	; 0x80
 8008e7e:	68f8      	ldr	r0, [r7, #12]
 8008e80:	f000 f976 	bl	8009170 <I2C_WaitOnFlagUntilTimeout>
 8008e84:	4603      	mov	r3, r0
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d001      	beq.n	8008e8e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	e04d      	b.n	8008f2a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e92:	b29b      	uxth	r3, r3
 8008e94:	2bff      	cmp	r3, #255	; 0xff
 8008e96:	d90e      	bls.n	8008eb6 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	22ff      	movs	r2, #255	; 0xff
 8008e9c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ea2:	b2da      	uxtb	r2, r3
 8008ea4:	8979      	ldrh	r1, [r7, #10]
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	9300      	str	r3, [sp, #0]
 8008eaa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008eae:	68f8      	ldr	r0, [r7, #12]
 8008eb0:	f000 fbae 	bl	8009610 <I2C_TransferConfig>
 8008eb4:	e00f      	b.n	8008ed6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008eba:	b29a      	uxth	r2, r3
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ec4:	b2da      	uxtb	r2, r3
 8008ec6:	8979      	ldrh	r1, [r7, #10]
 8008ec8:	2300      	movs	r3, #0
 8008eca:	9300      	str	r3, [sp, #0]
 8008ecc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008ed0:	68f8      	ldr	r0, [r7, #12]
 8008ed2:	f000 fb9d 	bl	8009610 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008eda:	b29b      	uxth	r3, r3
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d19e      	bne.n	8008e1e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008ee0:	693a      	ldr	r2, [r7, #16]
 8008ee2:	6a39      	ldr	r1, [r7, #32]
 8008ee4:	68f8      	ldr	r0, [r7, #12]
 8008ee6:	f000 f9e3 	bl	80092b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008eea:	4603      	mov	r3, r0
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d001      	beq.n	8008ef4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	e01a      	b.n	8008f2a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	2220      	movs	r2, #32
 8008efa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	6859      	ldr	r1, [r3, #4]
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681a      	ldr	r2, [r3, #0]
 8008f06:	4b0c      	ldr	r3, [pc, #48]	; (8008f38 <HAL_I2C_Master_Transmit+0x22c>)
 8008f08:	400b      	ands	r3, r1
 8008f0a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	2220      	movs	r2, #32
 8008f10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	2200      	movs	r2, #0
 8008f18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008f24:	2300      	movs	r3, #0
 8008f26:	e000      	b.n	8008f2a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8008f28:	2302      	movs	r3, #2
  }
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3718      	adds	r7, #24
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}
 8008f32:	bf00      	nop
 8008f34:	80002000 	.word	0x80002000
 8008f38:	fe00e800 	.word	0xfe00e800

08008f3c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b088      	sub	sp, #32
 8008f40:	af02      	add	r7, sp, #8
 8008f42:	60f8      	str	r0, [r7, #12]
 8008f44:	607a      	str	r2, [r7, #4]
 8008f46:	461a      	mov	r2, r3
 8008f48:	460b      	mov	r3, r1
 8008f4a:	817b      	strh	r3, [r7, #10]
 8008f4c:	4613      	mov	r3, r2
 8008f4e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f56:	b2db      	uxtb	r3, r3
 8008f58:	2b20      	cmp	r3, #32
 8008f5a:	f040 80db 	bne.w	8009114 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008f64:	2b01      	cmp	r3, #1
 8008f66:	d101      	bne.n	8008f6c <HAL_I2C_Master_Receive+0x30>
 8008f68:	2302      	movs	r3, #2
 8008f6a:	e0d4      	b.n	8009116 <HAL_I2C_Master_Receive+0x1da>
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	2201      	movs	r2, #1
 8008f70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008f74:	f7fa fce8 	bl	8003948 <HAL_GetTick>
 8008f78:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	9300      	str	r3, [sp, #0]
 8008f7e:	2319      	movs	r3, #25
 8008f80:	2201      	movs	r2, #1
 8008f82:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008f86:	68f8      	ldr	r0, [r7, #12]
 8008f88:	f000 f8f2 	bl	8009170 <I2C_WaitOnFlagUntilTimeout>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d001      	beq.n	8008f96 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8008f92:	2301      	movs	r3, #1
 8008f94:	e0bf      	b.n	8009116 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	2222      	movs	r2, #34	; 0x22
 8008f9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	2210      	movs	r2, #16
 8008fa2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	687a      	ldr	r2, [r7, #4]
 8008fb0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	893a      	ldrh	r2, [r7, #8]
 8008fb6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fc2:	b29b      	uxth	r3, r3
 8008fc4:	2bff      	cmp	r3, #255	; 0xff
 8008fc6:	d90e      	bls.n	8008fe6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	22ff      	movs	r2, #255	; 0xff
 8008fcc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fd2:	b2da      	uxtb	r2, r3
 8008fd4:	8979      	ldrh	r1, [r7, #10]
 8008fd6:	4b52      	ldr	r3, [pc, #328]	; (8009120 <HAL_I2C_Master_Receive+0x1e4>)
 8008fd8:	9300      	str	r3, [sp, #0]
 8008fda:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008fde:	68f8      	ldr	r0, [r7, #12]
 8008fe0:	f000 fb16 	bl	8009610 <I2C_TransferConfig>
 8008fe4:	e06d      	b.n	80090c2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fea:	b29a      	uxth	r2, r3
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ff4:	b2da      	uxtb	r2, r3
 8008ff6:	8979      	ldrh	r1, [r7, #10]
 8008ff8:	4b49      	ldr	r3, [pc, #292]	; (8009120 <HAL_I2C_Master_Receive+0x1e4>)
 8008ffa:	9300      	str	r3, [sp, #0]
 8008ffc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009000:	68f8      	ldr	r0, [r7, #12]
 8009002:	f000 fb05 	bl	8009610 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8009006:	e05c      	b.n	80090c2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009008:	697a      	ldr	r2, [r7, #20]
 800900a:	6a39      	ldr	r1, [r7, #32]
 800900c:	68f8      	ldr	r0, [r7, #12]
 800900e:	f000 f993 	bl	8009338 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009012:	4603      	mov	r3, r0
 8009014:	2b00      	cmp	r3, #0
 8009016:	d001      	beq.n	800901c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8009018:	2301      	movs	r3, #1
 800901a:	e07c      	b.n	8009116 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009026:	b2d2      	uxtb	r2, r2
 8009028:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800902e:	1c5a      	adds	r2, r3, #1
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009038:	3b01      	subs	r3, #1
 800903a:	b29a      	uxth	r2, r3
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009044:	b29b      	uxth	r3, r3
 8009046:	3b01      	subs	r3, #1
 8009048:	b29a      	uxth	r2, r3
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009052:	b29b      	uxth	r3, r3
 8009054:	2b00      	cmp	r3, #0
 8009056:	d034      	beq.n	80090c2 <HAL_I2C_Master_Receive+0x186>
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800905c:	2b00      	cmp	r3, #0
 800905e:	d130      	bne.n	80090c2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009060:	697b      	ldr	r3, [r7, #20]
 8009062:	9300      	str	r3, [sp, #0]
 8009064:	6a3b      	ldr	r3, [r7, #32]
 8009066:	2200      	movs	r2, #0
 8009068:	2180      	movs	r1, #128	; 0x80
 800906a:	68f8      	ldr	r0, [r7, #12]
 800906c:	f000 f880 	bl	8009170 <I2C_WaitOnFlagUntilTimeout>
 8009070:	4603      	mov	r3, r0
 8009072:	2b00      	cmp	r3, #0
 8009074:	d001      	beq.n	800907a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8009076:	2301      	movs	r3, #1
 8009078:	e04d      	b.n	8009116 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800907e:	b29b      	uxth	r3, r3
 8009080:	2bff      	cmp	r3, #255	; 0xff
 8009082:	d90e      	bls.n	80090a2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	22ff      	movs	r2, #255	; 0xff
 8009088:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800908e:	b2da      	uxtb	r2, r3
 8009090:	8979      	ldrh	r1, [r7, #10]
 8009092:	2300      	movs	r3, #0
 8009094:	9300      	str	r3, [sp, #0]
 8009096:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800909a:	68f8      	ldr	r0, [r7, #12]
 800909c:	f000 fab8 	bl	8009610 <I2C_TransferConfig>
 80090a0:	e00f      	b.n	80090c2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090a6:	b29a      	uxth	r2, r3
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090b0:	b2da      	uxtb	r2, r3
 80090b2:	8979      	ldrh	r1, [r7, #10]
 80090b4:	2300      	movs	r3, #0
 80090b6:	9300      	str	r3, [sp, #0]
 80090b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80090bc:	68f8      	ldr	r0, [r7, #12]
 80090be:	f000 faa7 	bl	8009610 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090c6:	b29b      	uxth	r3, r3
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d19d      	bne.n	8009008 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80090cc:	697a      	ldr	r2, [r7, #20]
 80090ce:	6a39      	ldr	r1, [r7, #32]
 80090d0:	68f8      	ldr	r0, [r7, #12]
 80090d2:	f000 f8ed 	bl	80092b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80090d6:	4603      	mov	r3, r0
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d001      	beq.n	80090e0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80090dc:	2301      	movs	r3, #1
 80090de:	e01a      	b.n	8009116 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	2220      	movs	r2, #32
 80090e6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	6859      	ldr	r1, [r3, #4]
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	681a      	ldr	r2, [r3, #0]
 80090f2:	4b0c      	ldr	r3, [pc, #48]	; (8009124 <HAL_I2C_Master_Receive+0x1e8>)
 80090f4:	400b      	ands	r3, r1
 80090f6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	2220      	movs	r2, #32
 80090fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	2200      	movs	r2, #0
 8009104:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	2200      	movs	r2, #0
 800910c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009110:	2300      	movs	r3, #0
 8009112:	e000      	b.n	8009116 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8009114:	2302      	movs	r3, #2
  }
}
 8009116:	4618      	mov	r0, r3
 8009118:	3718      	adds	r7, #24
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}
 800911e:	bf00      	nop
 8009120:	80002400 	.word	0x80002400
 8009124:	fe00e800 	.word	0xfe00e800

08009128 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009128:	b480      	push	{r7}
 800912a:	b083      	sub	sp, #12
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	699b      	ldr	r3, [r3, #24]
 8009136:	f003 0302 	and.w	r3, r3, #2
 800913a:	2b02      	cmp	r3, #2
 800913c:	d103      	bne.n	8009146 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	2200      	movs	r2, #0
 8009144:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	699b      	ldr	r3, [r3, #24]
 800914c:	f003 0301 	and.w	r3, r3, #1
 8009150:	2b01      	cmp	r3, #1
 8009152:	d007      	beq.n	8009164 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	699a      	ldr	r2, [r3, #24]
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f042 0201 	orr.w	r2, r2, #1
 8009162:	619a      	str	r2, [r3, #24]
  }
}
 8009164:	bf00      	nop
 8009166:	370c      	adds	r7, #12
 8009168:	46bd      	mov	sp, r7
 800916a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916e:	4770      	bx	lr

08009170 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b084      	sub	sp, #16
 8009174:	af00      	add	r7, sp, #0
 8009176:	60f8      	str	r0, [r7, #12]
 8009178:	60b9      	str	r1, [r7, #8]
 800917a:	603b      	str	r3, [r7, #0]
 800917c:	4613      	mov	r3, r2
 800917e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009180:	e03b      	b.n	80091fa <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009182:	69ba      	ldr	r2, [r7, #24]
 8009184:	6839      	ldr	r1, [r7, #0]
 8009186:	68f8      	ldr	r0, [r7, #12]
 8009188:	f000 f962 	bl	8009450 <I2C_IsErrorOccurred>
 800918c:	4603      	mov	r3, r0
 800918e:	2b00      	cmp	r3, #0
 8009190:	d001      	beq.n	8009196 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8009192:	2301      	movs	r3, #1
 8009194:	e041      	b.n	800921a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800919c:	d02d      	beq.n	80091fa <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800919e:	f7fa fbd3 	bl	8003948 <HAL_GetTick>
 80091a2:	4602      	mov	r2, r0
 80091a4:	69bb      	ldr	r3, [r7, #24]
 80091a6:	1ad3      	subs	r3, r2, r3
 80091a8:	683a      	ldr	r2, [r7, #0]
 80091aa:	429a      	cmp	r2, r3
 80091ac:	d302      	bcc.n	80091b4 <I2C_WaitOnFlagUntilTimeout+0x44>
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d122      	bne.n	80091fa <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	699a      	ldr	r2, [r3, #24]
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	4013      	ands	r3, r2
 80091be:	68ba      	ldr	r2, [r7, #8]
 80091c0:	429a      	cmp	r2, r3
 80091c2:	bf0c      	ite	eq
 80091c4:	2301      	moveq	r3, #1
 80091c6:	2300      	movne	r3, #0
 80091c8:	b2db      	uxtb	r3, r3
 80091ca:	461a      	mov	r2, r3
 80091cc:	79fb      	ldrb	r3, [r7, #7]
 80091ce:	429a      	cmp	r2, r3
 80091d0:	d113      	bne.n	80091fa <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091d6:	f043 0220 	orr.w	r2, r3, #32
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	2220      	movs	r2, #32
 80091e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	2200      	movs	r2, #0
 80091ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	2200      	movs	r2, #0
 80091f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80091f6:	2301      	movs	r3, #1
 80091f8:	e00f      	b.n	800921a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	699a      	ldr	r2, [r3, #24]
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	4013      	ands	r3, r2
 8009204:	68ba      	ldr	r2, [r7, #8]
 8009206:	429a      	cmp	r2, r3
 8009208:	bf0c      	ite	eq
 800920a:	2301      	moveq	r3, #1
 800920c:	2300      	movne	r3, #0
 800920e:	b2db      	uxtb	r3, r3
 8009210:	461a      	mov	r2, r3
 8009212:	79fb      	ldrb	r3, [r7, #7]
 8009214:	429a      	cmp	r2, r3
 8009216:	d0b4      	beq.n	8009182 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009218:	2300      	movs	r3, #0
}
 800921a:	4618      	mov	r0, r3
 800921c:	3710      	adds	r7, #16
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}

08009222 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009222:	b580      	push	{r7, lr}
 8009224:	b084      	sub	sp, #16
 8009226:	af00      	add	r7, sp, #0
 8009228:	60f8      	str	r0, [r7, #12]
 800922a:	60b9      	str	r1, [r7, #8]
 800922c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800922e:	e033      	b.n	8009298 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009230:	687a      	ldr	r2, [r7, #4]
 8009232:	68b9      	ldr	r1, [r7, #8]
 8009234:	68f8      	ldr	r0, [r7, #12]
 8009236:	f000 f90b 	bl	8009450 <I2C_IsErrorOccurred>
 800923a:	4603      	mov	r3, r0
 800923c:	2b00      	cmp	r3, #0
 800923e:	d001      	beq.n	8009244 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009240:	2301      	movs	r3, #1
 8009242:	e031      	b.n	80092a8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800924a:	d025      	beq.n	8009298 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800924c:	f7fa fb7c 	bl	8003948 <HAL_GetTick>
 8009250:	4602      	mov	r2, r0
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	1ad3      	subs	r3, r2, r3
 8009256:	68ba      	ldr	r2, [r7, #8]
 8009258:	429a      	cmp	r2, r3
 800925a:	d302      	bcc.n	8009262 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d11a      	bne.n	8009298 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	699b      	ldr	r3, [r3, #24]
 8009268:	f003 0302 	and.w	r3, r3, #2
 800926c:	2b02      	cmp	r3, #2
 800926e:	d013      	beq.n	8009298 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009274:	f043 0220 	orr.w	r2, r3, #32
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	2220      	movs	r2, #32
 8009280:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	2200      	movs	r2, #0
 8009288:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	2200      	movs	r2, #0
 8009290:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8009294:	2301      	movs	r3, #1
 8009296:	e007      	b.n	80092a8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	699b      	ldr	r3, [r3, #24]
 800929e:	f003 0302 	and.w	r3, r3, #2
 80092a2:	2b02      	cmp	r3, #2
 80092a4:	d1c4      	bne.n	8009230 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80092a6:	2300      	movs	r3, #0
}
 80092a8:	4618      	mov	r0, r3
 80092aa:	3710      	adds	r7, #16
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bd80      	pop	{r7, pc}

080092b0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b084      	sub	sp, #16
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	60f8      	str	r0, [r7, #12]
 80092b8:	60b9      	str	r1, [r7, #8]
 80092ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80092bc:	e02f      	b.n	800931e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80092be:	687a      	ldr	r2, [r7, #4]
 80092c0:	68b9      	ldr	r1, [r7, #8]
 80092c2:	68f8      	ldr	r0, [r7, #12]
 80092c4:	f000 f8c4 	bl	8009450 <I2C_IsErrorOccurred>
 80092c8:	4603      	mov	r3, r0
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d001      	beq.n	80092d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80092ce:	2301      	movs	r3, #1
 80092d0:	e02d      	b.n	800932e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80092d2:	f7fa fb39 	bl	8003948 <HAL_GetTick>
 80092d6:	4602      	mov	r2, r0
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	1ad3      	subs	r3, r2, r3
 80092dc:	68ba      	ldr	r2, [r7, #8]
 80092de:	429a      	cmp	r2, r3
 80092e0:	d302      	bcc.n	80092e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d11a      	bne.n	800931e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	699b      	ldr	r3, [r3, #24]
 80092ee:	f003 0320 	and.w	r3, r3, #32
 80092f2:	2b20      	cmp	r3, #32
 80092f4:	d013      	beq.n	800931e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092fa:	f043 0220 	orr.w	r2, r3, #32
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	2220      	movs	r2, #32
 8009306:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	2200      	movs	r2, #0
 800930e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	2200      	movs	r2, #0
 8009316:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800931a:	2301      	movs	r3, #1
 800931c:	e007      	b.n	800932e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	699b      	ldr	r3, [r3, #24]
 8009324:	f003 0320 	and.w	r3, r3, #32
 8009328:	2b20      	cmp	r3, #32
 800932a:	d1c8      	bne.n	80092be <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800932c:	2300      	movs	r3, #0
}
 800932e:	4618      	mov	r0, r3
 8009330:	3710      	adds	r7, #16
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}
	...

08009338 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b086      	sub	sp, #24
 800933c:	af00      	add	r7, sp, #0
 800933e:	60f8      	str	r0, [r7, #12]
 8009340:	60b9      	str	r1, [r7, #8]
 8009342:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009344:	2300      	movs	r3, #0
 8009346:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8009348:	e071      	b.n	800942e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800934a:	687a      	ldr	r2, [r7, #4]
 800934c:	68b9      	ldr	r1, [r7, #8]
 800934e:	68f8      	ldr	r0, [r7, #12]
 8009350:	f000 f87e 	bl	8009450 <I2C_IsErrorOccurred>
 8009354:	4603      	mov	r3, r0
 8009356:	2b00      	cmp	r3, #0
 8009358:	d001      	beq.n	800935e <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800935a:	2301      	movs	r3, #1
 800935c:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	699b      	ldr	r3, [r3, #24]
 8009364:	f003 0320 	and.w	r3, r3, #32
 8009368:	2b20      	cmp	r3, #32
 800936a:	d13b      	bne.n	80093e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800936c:	7dfb      	ldrb	r3, [r7, #23]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d138      	bne.n	80093e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	699b      	ldr	r3, [r3, #24]
 8009378:	f003 0304 	and.w	r3, r3, #4
 800937c:	2b04      	cmp	r3, #4
 800937e:	d105      	bne.n	800938c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009384:	2b00      	cmp	r3, #0
 8009386:	d001      	beq.n	800938c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8009388:	2300      	movs	r3, #0
 800938a:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	699b      	ldr	r3, [r3, #24]
 8009392:	f003 0310 	and.w	r3, r3, #16
 8009396:	2b10      	cmp	r3, #16
 8009398:	d121      	bne.n	80093de <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	2210      	movs	r2, #16
 80093a0:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	2204      	movs	r2, #4
 80093a6:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	2220      	movs	r2, #32
 80093ae:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	6859      	ldr	r1, [r3, #4]
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	681a      	ldr	r2, [r3, #0]
 80093ba:	4b24      	ldr	r3, [pc, #144]	; (800944c <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80093bc:	400b      	ands	r3, r1
 80093be:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	2220      	movs	r2, #32
 80093c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	2200      	movs	r2, #0
 80093cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	2200      	movs	r2, #0
 80093d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 80093d8:	2301      	movs	r3, #1
 80093da:	75fb      	strb	r3, [r7, #23]
 80093dc:	e002      	b.n	80093e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	2200      	movs	r2, #0
 80093e2:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80093e4:	f7fa fab0 	bl	8003948 <HAL_GetTick>
 80093e8:	4602      	mov	r2, r0
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	1ad3      	subs	r3, r2, r3
 80093ee:	68ba      	ldr	r2, [r7, #8]
 80093f0:	429a      	cmp	r2, r3
 80093f2:	d302      	bcc.n	80093fa <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d119      	bne.n	800942e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80093fa:	7dfb      	ldrb	r3, [r7, #23]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d116      	bne.n	800942e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	699b      	ldr	r3, [r3, #24]
 8009406:	f003 0304 	and.w	r3, r3, #4
 800940a:	2b04      	cmp	r3, #4
 800940c:	d00f      	beq.n	800942e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009412:	f043 0220 	orr.w	r2, r3, #32
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	2220      	movs	r2, #32
 800941e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	2200      	movs	r2, #0
 8009426:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 800942a:	2301      	movs	r3, #1
 800942c:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	699b      	ldr	r3, [r3, #24]
 8009434:	f003 0304 	and.w	r3, r3, #4
 8009438:	2b04      	cmp	r3, #4
 800943a:	d002      	beq.n	8009442 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 800943c:	7dfb      	ldrb	r3, [r7, #23]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d083      	beq.n	800934a <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8009442:	7dfb      	ldrb	r3, [r7, #23]
}
 8009444:	4618      	mov	r0, r3
 8009446:	3718      	adds	r7, #24
 8009448:	46bd      	mov	sp, r7
 800944a:	bd80      	pop	{r7, pc}
 800944c:	fe00e800 	.word	0xfe00e800

08009450 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b08a      	sub	sp, #40	; 0x28
 8009454:	af00      	add	r7, sp, #0
 8009456:	60f8      	str	r0, [r7, #12]
 8009458:	60b9      	str	r1, [r7, #8]
 800945a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800945c:	2300      	movs	r3, #0
 800945e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	699b      	ldr	r3, [r3, #24]
 8009468:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800946a:	2300      	movs	r3, #0
 800946c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009472:	69bb      	ldr	r3, [r7, #24]
 8009474:	f003 0310 	and.w	r3, r3, #16
 8009478:	2b00      	cmp	r3, #0
 800947a:	d068      	beq.n	800954e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	2210      	movs	r2, #16
 8009482:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009484:	e049      	b.n	800951a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800948c:	d045      	beq.n	800951a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800948e:	f7fa fa5b 	bl	8003948 <HAL_GetTick>
 8009492:	4602      	mov	r2, r0
 8009494:	69fb      	ldr	r3, [r7, #28]
 8009496:	1ad3      	subs	r3, r2, r3
 8009498:	68ba      	ldr	r2, [r7, #8]
 800949a:	429a      	cmp	r2, r3
 800949c:	d302      	bcc.n	80094a4 <I2C_IsErrorOccurred+0x54>
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d13a      	bne.n	800951a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	685b      	ldr	r3, [r3, #4]
 80094aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80094ae:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80094b6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	699b      	ldr	r3, [r3, #24]
 80094be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80094c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094c6:	d121      	bne.n	800950c <I2C_IsErrorOccurred+0xbc>
 80094c8:	697b      	ldr	r3, [r7, #20]
 80094ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80094ce:	d01d      	beq.n	800950c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80094d0:	7cfb      	ldrb	r3, [r7, #19]
 80094d2:	2b20      	cmp	r3, #32
 80094d4:	d01a      	beq.n	800950c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	685a      	ldr	r2, [r3, #4]
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80094e4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80094e6:	f7fa fa2f 	bl	8003948 <HAL_GetTick>
 80094ea:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80094ec:	e00e      	b.n	800950c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80094ee:	f7fa fa2b 	bl	8003948 <HAL_GetTick>
 80094f2:	4602      	mov	r2, r0
 80094f4:	69fb      	ldr	r3, [r7, #28]
 80094f6:	1ad3      	subs	r3, r2, r3
 80094f8:	2b19      	cmp	r3, #25
 80094fa:	d907      	bls.n	800950c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80094fc:	6a3b      	ldr	r3, [r7, #32]
 80094fe:	f043 0320 	orr.w	r3, r3, #32
 8009502:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009504:	2301      	movs	r3, #1
 8009506:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800950a:	e006      	b.n	800951a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	699b      	ldr	r3, [r3, #24]
 8009512:	f003 0320 	and.w	r3, r3, #32
 8009516:	2b20      	cmp	r3, #32
 8009518:	d1e9      	bne.n	80094ee <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	699b      	ldr	r3, [r3, #24]
 8009520:	f003 0320 	and.w	r3, r3, #32
 8009524:	2b20      	cmp	r3, #32
 8009526:	d003      	beq.n	8009530 <I2C_IsErrorOccurred+0xe0>
 8009528:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800952c:	2b00      	cmp	r3, #0
 800952e:	d0aa      	beq.n	8009486 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009530:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009534:	2b00      	cmp	r3, #0
 8009536:	d103      	bne.n	8009540 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	2220      	movs	r2, #32
 800953e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009540:	6a3b      	ldr	r3, [r7, #32]
 8009542:	f043 0304 	orr.w	r3, r3, #4
 8009546:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009548:	2301      	movs	r3, #1
 800954a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	699b      	ldr	r3, [r3, #24]
 8009554:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009556:	69bb      	ldr	r3, [r7, #24]
 8009558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800955c:	2b00      	cmp	r3, #0
 800955e:	d00b      	beq.n	8009578 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009560:	6a3b      	ldr	r3, [r7, #32]
 8009562:	f043 0301 	orr.w	r3, r3, #1
 8009566:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009570:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009572:	2301      	movs	r3, #1
 8009574:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009578:	69bb      	ldr	r3, [r7, #24]
 800957a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800957e:	2b00      	cmp	r3, #0
 8009580:	d00b      	beq.n	800959a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009582:	6a3b      	ldr	r3, [r7, #32]
 8009584:	f043 0308 	orr.w	r3, r3, #8
 8009588:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009592:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009594:	2301      	movs	r3, #1
 8009596:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800959a:	69bb      	ldr	r3, [r7, #24]
 800959c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d00b      	beq.n	80095bc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80095a4:	6a3b      	ldr	r3, [r7, #32]
 80095a6:	f043 0302 	orr.w	r3, r3, #2
 80095aa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80095b4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80095b6:	2301      	movs	r3, #1
 80095b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80095bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d01c      	beq.n	80095fe <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80095c4:	68f8      	ldr	r0, [r7, #12]
 80095c6:	f7ff fdaf 	bl	8009128 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	6859      	ldr	r1, [r3, #4]
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	681a      	ldr	r2, [r3, #0]
 80095d4:	4b0d      	ldr	r3, [pc, #52]	; (800960c <I2C_IsErrorOccurred+0x1bc>)
 80095d6:	400b      	ands	r3, r1
 80095d8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80095de:	6a3b      	ldr	r3, [r7, #32]
 80095e0:	431a      	orrs	r2, r3
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	2220      	movs	r2, #32
 80095ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	2200      	movs	r2, #0
 80095f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	2200      	movs	r2, #0
 80095fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80095fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009602:	4618      	mov	r0, r3
 8009604:	3728      	adds	r7, #40	; 0x28
 8009606:	46bd      	mov	sp, r7
 8009608:	bd80      	pop	{r7, pc}
 800960a:	bf00      	nop
 800960c:	fe00e800 	.word	0xfe00e800

08009610 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009610:	b480      	push	{r7}
 8009612:	b087      	sub	sp, #28
 8009614:	af00      	add	r7, sp, #0
 8009616:	60f8      	str	r0, [r7, #12]
 8009618:	607b      	str	r3, [r7, #4]
 800961a:	460b      	mov	r3, r1
 800961c:	817b      	strh	r3, [r7, #10]
 800961e:	4613      	mov	r3, r2
 8009620:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009622:	897b      	ldrh	r3, [r7, #10]
 8009624:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009628:	7a7b      	ldrb	r3, [r7, #9]
 800962a:	041b      	lsls	r3, r3, #16
 800962c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009630:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009636:	6a3b      	ldr	r3, [r7, #32]
 8009638:	4313      	orrs	r3, r2
 800963a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800963e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	685a      	ldr	r2, [r3, #4]
 8009646:	6a3b      	ldr	r3, [r7, #32]
 8009648:	0d5b      	lsrs	r3, r3, #21
 800964a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800964e:	4b08      	ldr	r3, [pc, #32]	; (8009670 <I2C_TransferConfig+0x60>)
 8009650:	430b      	orrs	r3, r1
 8009652:	43db      	mvns	r3, r3
 8009654:	ea02 0103 	and.w	r1, r2, r3
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	697a      	ldr	r2, [r7, #20]
 800965e:	430a      	orrs	r2, r1
 8009660:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009662:	bf00      	nop
 8009664:	371c      	adds	r7, #28
 8009666:	46bd      	mov	sp, r7
 8009668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966c:	4770      	bx	lr
 800966e:	bf00      	nop
 8009670:	03ff63ff 	.word	0x03ff63ff

08009674 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009674:	b480      	push	{r7}
 8009676:	b083      	sub	sp, #12
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
 800967c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009684:	b2db      	uxtb	r3, r3
 8009686:	2b20      	cmp	r3, #32
 8009688:	d138      	bne.n	80096fc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009690:	2b01      	cmp	r3, #1
 8009692:	d101      	bne.n	8009698 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009694:	2302      	movs	r3, #2
 8009696:	e032      	b.n	80096fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2201      	movs	r2, #1
 800969c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2224      	movs	r2, #36	; 0x24
 80096a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	681a      	ldr	r2, [r3, #0]
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f022 0201 	bic.w	r2, r2, #1
 80096b6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	681a      	ldr	r2, [r3, #0]
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80096c6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	6819      	ldr	r1, [r3, #0]
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	683a      	ldr	r2, [r7, #0]
 80096d4:	430a      	orrs	r2, r1
 80096d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	681a      	ldr	r2, [r3, #0]
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f042 0201 	orr.w	r2, r2, #1
 80096e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2220      	movs	r2, #32
 80096ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2200      	movs	r2, #0
 80096f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80096f8:	2300      	movs	r3, #0
 80096fa:	e000      	b.n	80096fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80096fc:	2302      	movs	r3, #2
  }
}
 80096fe:	4618      	mov	r0, r3
 8009700:	370c      	adds	r7, #12
 8009702:	46bd      	mov	sp, r7
 8009704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009708:	4770      	bx	lr

0800970a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800970a:	b480      	push	{r7}
 800970c:	b085      	sub	sp, #20
 800970e:	af00      	add	r7, sp, #0
 8009710:	6078      	str	r0, [r7, #4]
 8009712:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800971a:	b2db      	uxtb	r3, r3
 800971c:	2b20      	cmp	r3, #32
 800971e:	d139      	bne.n	8009794 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009726:	2b01      	cmp	r3, #1
 8009728:	d101      	bne.n	800972e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800972a:	2302      	movs	r3, #2
 800972c:	e033      	b.n	8009796 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2201      	movs	r2, #1
 8009732:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2224      	movs	r2, #36	; 0x24
 800973a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	681a      	ldr	r2, [r3, #0]
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f022 0201 	bic.w	r2, r2, #1
 800974c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800975c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	021b      	lsls	r3, r3, #8
 8009762:	68fa      	ldr	r2, [r7, #12]
 8009764:	4313      	orrs	r3, r2
 8009766:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	68fa      	ldr	r2, [r7, #12]
 800976e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	681a      	ldr	r2, [r3, #0]
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f042 0201 	orr.w	r2, r2, #1
 800977e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2220      	movs	r2, #32
 8009784:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2200      	movs	r2, #0
 800978c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009790:	2300      	movs	r3, #0
 8009792:	e000      	b.n	8009796 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009794:	2302      	movs	r3, #2
  }
}
 8009796:	4618      	mov	r0, r3
 8009798:	3714      	adds	r7, #20
 800979a:	46bd      	mov	sp, r7
 800979c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a0:	4770      	bx	lr
	...

080097a4 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 80097a4:	b480      	push	{r7}
 80097a6:	b085      	sub	sp, #20
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80097ac:	4b0d      	ldr	r3, [pc, #52]	; (80097e4 <HAL_I2CEx_EnableFastModePlus+0x40>)
 80097ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80097b2:	4a0c      	ldr	r2, [pc, #48]	; (80097e4 <HAL_I2CEx_EnableFastModePlus+0x40>)
 80097b4:	f043 0302 	orr.w	r3, r3, #2
 80097b8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80097bc:	4b09      	ldr	r3, [pc, #36]	; (80097e4 <HAL_I2CEx_EnableFastModePlus+0x40>)
 80097be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80097c2:	f003 0302 	and.w	r3, r3, #2
 80097c6:	60fb      	str	r3, [r7, #12]
 80097c8:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 80097ca:	4b07      	ldr	r3, [pc, #28]	; (80097e8 <HAL_I2CEx_EnableFastModePlus+0x44>)
 80097cc:	685a      	ldr	r2, [r3, #4]
 80097ce:	4906      	ldr	r1, [pc, #24]	; (80097e8 <HAL_I2CEx_EnableFastModePlus+0x44>)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	4313      	orrs	r3, r2
 80097d4:	604b      	str	r3, [r1, #4]
}
 80097d6:	bf00      	nop
 80097d8:	3714      	adds	r7, #20
 80097da:	46bd      	mov	sp, r7
 80097dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e0:	4770      	bx	lr
 80097e2:	bf00      	nop
 80097e4:	58024400 	.word	0x58024400
 80097e8:	58000400 	.word	0x58000400

080097ec <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b084      	sub	sp, #16
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80097f4:	4b19      	ldr	r3, [pc, #100]	; (800985c <HAL_PWREx_ConfigSupply+0x70>)
 80097f6:	68db      	ldr	r3, [r3, #12]
 80097f8:	f003 0304 	and.w	r3, r3, #4
 80097fc:	2b04      	cmp	r3, #4
 80097fe:	d00a      	beq.n	8009816 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009800:	4b16      	ldr	r3, [pc, #88]	; (800985c <HAL_PWREx_ConfigSupply+0x70>)
 8009802:	68db      	ldr	r3, [r3, #12]
 8009804:	f003 0307 	and.w	r3, r3, #7
 8009808:	687a      	ldr	r2, [r7, #4]
 800980a:	429a      	cmp	r2, r3
 800980c:	d001      	beq.n	8009812 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800980e:	2301      	movs	r3, #1
 8009810:	e01f      	b.n	8009852 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009812:	2300      	movs	r3, #0
 8009814:	e01d      	b.n	8009852 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009816:	4b11      	ldr	r3, [pc, #68]	; (800985c <HAL_PWREx_ConfigSupply+0x70>)
 8009818:	68db      	ldr	r3, [r3, #12]
 800981a:	f023 0207 	bic.w	r2, r3, #7
 800981e:	490f      	ldr	r1, [pc, #60]	; (800985c <HAL_PWREx_ConfigSupply+0x70>)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	4313      	orrs	r3, r2
 8009824:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009826:	f7fa f88f 	bl	8003948 <HAL_GetTick>
 800982a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800982c:	e009      	b.n	8009842 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800982e:	f7fa f88b 	bl	8003948 <HAL_GetTick>
 8009832:	4602      	mov	r2, r0
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	1ad3      	subs	r3, r2, r3
 8009838:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800983c:	d901      	bls.n	8009842 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800983e:	2301      	movs	r3, #1
 8009840:	e007      	b.n	8009852 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009842:	4b06      	ldr	r3, [pc, #24]	; (800985c <HAL_PWREx_ConfigSupply+0x70>)
 8009844:	685b      	ldr	r3, [r3, #4]
 8009846:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800984a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800984e:	d1ee      	bne.n	800982e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009850:	2300      	movs	r3, #0
}
 8009852:	4618      	mov	r0, r3
 8009854:	3710      	adds	r7, #16
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}
 800985a:	bf00      	nop
 800985c:	58024800 	.word	0x58024800

08009860 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b08c      	sub	sp, #48	; 0x30
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d102      	bne.n	8009874 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800986e:	2301      	movs	r3, #1
 8009870:	f000 bc48 	b.w	800a104 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	f003 0301 	and.w	r3, r3, #1
 800987c:	2b00      	cmp	r3, #0
 800987e:	f000 8088 	beq.w	8009992 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009882:	4b99      	ldr	r3, [pc, #612]	; (8009ae8 <HAL_RCC_OscConfig+0x288>)
 8009884:	691b      	ldr	r3, [r3, #16]
 8009886:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800988a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800988c:	4b96      	ldr	r3, [pc, #600]	; (8009ae8 <HAL_RCC_OscConfig+0x288>)
 800988e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009890:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009894:	2b10      	cmp	r3, #16
 8009896:	d007      	beq.n	80098a8 <HAL_RCC_OscConfig+0x48>
 8009898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800989a:	2b18      	cmp	r3, #24
 800989c:	d111      	bne.n	80098c2 <HAL_RCC_OscConfig+0x62>
 800989e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098a0:	f003 0303 	and.w	r3, r3, #3
 80098a4:	2b02      	cmp	r3, #2
 80098a6:	d10c      	bne.n	80098c2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80098a8:	4b8f      	ldr	r3, [pc, #572]	; (8009ae8 <HAL_RCC_OscConfig+0x288>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d06d      	beq.n	8009990 <HAL_RCC_OscConfig+0x130>
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	685b      	ldr	r3, [r3, #4]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d169      	bne.n	8009990 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80098bc:	2301      	movs	r3, #1
 80098be:	f000 bc21 	b.w	800a104 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	685b      	ldr	r3, [r3, #4]
 80098c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80098ca:	d106      	bne.n	80098da <HAL_RCC_OscConfig+0x7a>
 80098cc:	4b86      	ldr	r3, [pc, #536]	; (8009ae8 <HAL_RCC_OscConfig+0x288>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	4a85      	ldr	r2, [pc, #532]	; (8009ae8 <HAL_RCC_OscConfig+0x288>)
 80098d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80098d6:	6013      	str	r3, [r2, #0]
 80098d8:	e02e      	b.n	8009938 <HAL_RCC_OscConfig+0xd8>
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	685b      	ldr	r3, [r3, #4]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d10c      	bne.n	80098fc <HAL_RCC_OscConfig+0x9c>
 80098e2:	4b81      	ldr	r3, [pc, #516]	; (8009ae8 <HAL_RCC_OscConfig+0x288>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	4a80      	ldr	r2, [pc, #512]	; (8009ae8 <HAL_RCC_OscConfig+0x288>)
 80098e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80098ec:	6013      	str	r3, [r2, #0]
 80098ee:	4b7e      	ldr	r3, [pc, #504]	; (8009ae8 <HAL_RCC_OscConfig+0x288>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	4a7d      	ldr	r2, [pc, #500]	; (8009ae8 <HAL_RCC_OscConfig+0x288>)
 80098f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80098f8:	6013      	str	r3, [r2, #0]
 80098fa:	e01d      	b.n	8009938 <HAL_RCC_OscConfig+0xd8>
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	685b      	ldr	r3, [r3, #4]
 8009900:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009904:	d10c      	bne.n	8009920 <HAL_RCC_OscConfig+0xc0>
 8009906:	4b78      	ldr	r3, [pc, #480]	; (8009ae8 <HAL_RCC_OscConfig+0x288>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	4a77      	ldr	r2, [pc, #476]	; (8009ae8 <HAL_RCC_OscConfig+0x288>)
 800990c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009910:	6013      	str	r3, [r2, #0]
 8009912:	4b75      	ldr	r3, [pc, #468]	; (8009ae8 <HAL_RCC_OscConfig+0x288>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	4a74      	ldr	r2, [pc, #464]	; (8009ae8 <HAL_RCC_OscConfig+0x288>)
 8009918:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800991c:	6013      	str	r3, [r2, #0]
 800991e:	e00b      	b.n	8009938 <HAL_RCC_OscConfig+0xd8>
 8009920:	4b71      	ldr	r3, [pc, #452]	; (8009ae8 <HAL_RCC_OscConfig+0x288>)
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	4a70      	ldr	r2, [pc, #448]	; (8009ae8 <HAL_RCC_OscConfig+0x288>)
 8009926:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800992a:	6013      	str	r3, [r2, #0]
 800992c:	4b6e      	ldr	r3, [pc, #440]	; (8009ae8 <HAL_RCC_OscConfig+0x288>)
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	4a6d      	ldr	r2, [pc, #436]	; (8009ae8 <HAL_RCC_OscConfig+0x288>)
 8009932:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009936:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	685b      	ldr	r3, [r3, #4]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d013      	beq.n	8009968 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009940:	f7fa f802 	bl	8003948 <HAL_GetTick>
 8009944:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009946:	e008      	b.n	800995a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009948:	f7f9 fffe 	bl	8003948 <HAL_GetTick>
 800994c:	4602      	mov	r2, r0
 800994e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009950:	1ad3      	subs	r3, r2, r3
 8009952:	2b64      	cmp	r3, #100	; 0x64
 8009954:	d901      	bls.n	800995a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009956:	2303      	movs	r3, #3
 8009958:	e3d4      	b.n	800a104 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800995a:	4b63      	ldr	r3, [pc, #396]	; (8009ae8 <HAL_RCC_OscConfig+0x288>)
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009962:	2b00      	cmp	r3, #0
 8009964:	d0f0      	beq.n	8009948 <HAL_RCC_OscConfig+0xe8>
 8009966:	e014      	b.n	8009992 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009968:	f7f9 ffee 	bl	8003948 <HAL_GetTick>
 800996c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800996e:	e008      	b.n	8009982 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009970:	f7f9 ffea 	bl	8003948 <HAL_GetTick>
 8009974:	4602      	mov	r2, r0
 8009976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009978:	1ad3      	subs	r3, r2, r3
 800997a:	2b64      	cmp	r3, #100	; 0x64
 800997c:	d901      	bls.n	8009982 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800997e:	2303      	movs	r3, #3
 8009980:	e3c0      	b.n	800a104 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009982:	4b59      	ldr	r3, [pc, #356]	; (8009ae8 <HAL_RCC_OscConfig+0x288>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800998a:	2b00      	cmp	r3, #0
 800998c:	d1f0      	bne.n	8009970 <HAL_RCC_OscConfig+0x110>
 800998e:	e000      	b.n	8009992 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009990:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f003 0302 	and.w	r3, r3, #2
 800999a:	2b00      	cmp	r3, #0
 800999c:	f000 80ca 	beq.w	8009b34 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80099a0:	4b51      	ldr	r3, [pc, #324]	; (8009ae8 <HAL_RCC_OscConfig+0x288>)
 80099a2:	691b      	ldr	r3, [r3, #16]
 80099a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80099a8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80099aa:	4b4f      	ldr	r3, [pc, #316]	; (8009ae8 <HAL_RCC_OscConfig+0x288>)
 80099ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099ae:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80099b0:	6a3b      	ldr	r3, [r7, #32]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d007      	beq.n	80099c6 <HAL_RCC_OscConfig+0x166>
 80099b6:	6a3b      	ldr	r3, [r7, #32]
 80099b8:	2b18      	cmp	r3, #24
 80099ba:	d156      	bne.n	8009a6a <HAL_RCC_OscConfig+0x20a>
 80099bc:	69fb      	ldr	r3, [r7, #28]
 80099be:	f003 0303 	and.w	r3, r3, #3
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d151      	bne.n	8009a6a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80099c6:	4b48      	ldr	r3, [pc, #288]	; (8009ae8 <HAL_RCC_OscConfig+0x288>)
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	f003 0304 	and.w	r3, r3, #4
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d005      	beq.n	80099de <HAL_RCC_OscConfig+0x17e>
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	68db      	ldr	r3, [r3, #12]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d101      	bne.n	80099de <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80099da:	2301      	movs	r3, #1
 80099dc:	e392      	b.n	800a104 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80099de:	4b42      	ldr	r3, [pc, #264]	; (8009ae8 <HAL_RCC_OscConfig+0x288>)
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	f023 0219 	bic.w	r2, r3, #25
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	68db      	ldr	r3, [r3, #12]
 80099ea:	493f      	ldr	r1, [pc, #252]	; (8009ae8 <HAL_RCC_OscConfig+0x288>)
 80099ec:	4313      	orrs	r3, r2
 80099ee:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099f0:	f7f9 ffaa 	bl	8003948 <HAL_GetTick>
 80099f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80099f6:	e008      	b.n	8009a0a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80099f8:	f7f9 ffa6 	bl	8003948 <HAL_GetTick>
 80099fc:	4602      	mov	r2, r0
 80099fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a00:	1ad3      	subs	r3, r2, r3
 8009a02:	2b02      	cmp	r3, #2
 8009a04:	d901      	bls.n	8009a0a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8009a06:	2303      	movs	r3, #3
 8009a08:	e37c      	b.n	800a104 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009a0a:	4b37      	ldr	r3, [pc, #220]	; (8009ae8 <HAL_RCC_OscConfig+0x288>)
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f003 0304 	and.w	r3, r3, #4
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d0f0      	beq.n	80099f8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009a16:	f7f9 ffa3 	bl	8003960 <HAL_GetREVID>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	f241 0203 	movw	r2, #4099	; 0x1003
 8009a20:	4293      	cmp	r3, r2
 8009a22:	d817      	bhi.n	8009a54 <HAL_RCC_OscConfig+0x1f4>
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	691b      	ldr	r3, [r3, #16]
 8009a28:	2b40      	cmp	r3, #64	; 0x40
 8009a2a:	d108      	bne.n	8009a3e <HAL_RCC_OscConfig+0x1de>
 8009a2c:	4b2e      	ldr	r3, [pc, #184]	; (8009ae8 <HAL_RCC_OscConfig+0x288>)
 8009a2e:	685b      	ldr	r3, [r3, #4]
 8009a30:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009a34:	4a2c      	ldr	r2, [pc, #176]	; (8009ae8 <HAL_RCC_OscConfig+0x288>)
 8009a36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a3a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009a3c:	e07a      	b.n	8009b34 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009a3e:	4b2a      	ldr	r3, [pc, #168]	; (8009ae8 <HAL_RCC_OscConfig+0x288>)
 8009a40:	685b      	ldr	r3, [r3, #4]
 8009a42:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	691b      	ldr	r3, [r3, #16]
 8009a4a:	031b      	lsls	r3, r3, #12
 8009a4c:	4926      	ldr	r1, [pc, #152]	; (8009ae8 <HAL_RCC_OscConfig+0x288>)
 8009a4e:	4313      	orrs	r3, r2
 8009a50:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009a52:	e06f      	b.n	8009b34 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009a54:	4b24      	ldr	r3, [pc, #144]	; (8009ae8 <HAL_RCC_OscConfig+0x288>)
 8009a56:	685b      	ldr	r3, [r3, #4]
 8009a58:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	691b      	ldr	r3, [r3, #16]
 8009a60:	061b      	lsls	r3, r3, #24
 8009a62:	4921      	ldr	r1, [pc, #132]	; (8009ae8 <HAL_RCC_OscConfig+0x288>)
 8009a64:	4313      	orrs	r3, r2
 8009a66:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009a68:	e064      	b.n	8009b34 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	68db      	ldr	r3, [r3, #12]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d047      	beq.n	8009b02 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009a72:	4b1d      	ldr	r3, [pc, #116]	; (8009ae8 <HAL_RCC_OscConfig+0x288>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f023 0219 	bic.w	r2, r3, #25
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	68db      	ldr	r3, [r3, #12]
 8009a7e:	491a      	ldr	r1, [pc, #104]	; (8009ae8 <HAL_RCC_OscConfig+0x288>)
 8009a80:	4313      	orrs	r3, r2
 8009a82:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a84:	f7f9 ff60 	bl	8003948 <HAL_GetTick>
 8009a88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009a8a:	e008      	b.n	8009a9e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009a8c:	f7f9 ff5c 	bl	8003948 <HAL_GetTick>
 8009a90:	4602      	mov	r2, r0
 8009a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a94:	1ad3      	subs	r3, r2, r3
 8009a96:	2b02      	cmp	r3, #2
 8009a98:	d901      	bls.n	8009a9e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8009a9a:	2303      	movs	r3, #3
 8009a9c:	e332      	b.n	800a104 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009a9e:	4b12      	ldr	r3, [pc, #72]	; (8009ae8 <HAL_RCC_OscConfig+0x288>)
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	f003 0304 	and.w	r3, r3, #4
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d0f0      	beq.n	8009a8c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009aaa:	f7f9 ff59 	bl	8003960 <HAL_GetREVID>
 8009aae:	4603      	mov	r3, r0
 8009ab0:	f241 0203 	movw	r2, #4099	; 0x1003
 8009ab4:	4293      	cmp	r3, r2
 8009ab6:	d819      	bhi.n	8009aec <HAL_RCC_OscConfig+0x28c>
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	691b      	ldr	r3, [r3, #16]
 8009abc:	2b40      	cmp	r3, #64	; 0x40
 8009abe:	d108      	bne.n	8009ad2 <HAL_RCC_OscConfig+0x272>
 8009ac0:	4b09      	ldr	r3, [pc, #36]	; (8009ae8 <HAL_RCC_OscConfig+0x288>)
 8009ac2:	685b      	ldr	r3, [r3, #4]
 8009ac4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009ac8:	4a07      	ldr	r2, [pc, #28]	; (8009ae8 <HAL_RCC_OscConfig+0x288>)
 8009aca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ace:	6053      	str	r3, [r2, #4]
 8009ad0:	e030      	b.n	8009b34 <HAL_RCC_OscConfig+0x2d4>
 8009ad2:	4b05      	ldr	r3, [pc, #20]	; (8009ae8 <HAL_RCC_OscConfig+0x288>)
 8009ad4:	685b      	ldr	r3, [r3, #4]
 8009ad6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	691b      	ldr	r3, [r3, #16]
 8009ade:	031b      	lsls	r3, r3, #12
 8009ae0:	4901      	ldr	r1, [pc, #4]	; (8009ae8 <HAL_RCC_OscConfig+0x288>)
 8009ae2:	4313      	orrs	r3, r2
 8009ae4:	604b      	str	r3, [r1, #4]
 8009ae6:	e025      	b.n	8009b34 <HAL_RCC_OscConfig+0x2d4>
 8009ae8:	58024400 	.word	0x58024400
 8009aec:	4b9a      	ldr	r3, [pc, #616]	; (8009d58 <HAL_RCC_OscConfig+0x4f8>)
 8009aee:	685b      	ldr	r3, [r3, #4]
 8009af0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	691b      	ldr	r3, [r3, #16]
 8009af8:	061b      	lsls	r3, r3, #24
 8009afa:	4997      	ldr	r1, [pc, #604]	; (8009d58 <HAL_RCC_OscConfig+0x4f8>)
 8009afc:	4313      	orrs	r3, r2
 8009afe:	604b      	str	r3, [r1, #4]
 8009b00:	e018      	b.n	8009b34 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009b02:	4b95      	ldr	r3, [pc, #596]	; (8009d58 <HAL_RCC_OscConfig+0x4f8>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	4a94      	ldr	r2, [pc, #592]	; (8009d58 <HAL_RCC_OscConfig+0x4f8>)
 8009b08:	f023 0301 	bic.w	r3, r3, #1
 8009b0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b0e:	f7f9 ff1b 	bl	8003948 <HAL_GetTick>
 8009b12:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009b14:	e008      	b.n	8009b28 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009b16:	f7f9 ff17 	bl	8003948 <HAL_GetTick>
 8009b1a:	4602      	mov	r2, r0
 8009b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b1e:	1ad3      	subs	r3, r2, r3
 8009b20:	2b02      	cmp	r3, #2
 8009b22:	d901      	bls.n	8009b28 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8009b24:	2303      	movs	r3, #3
 8009b26:	e2ed      	b.n	800a104 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009b28:	4b8b      	ldr	r3, [pc, #556]	; (8009d58 <HAL_RCC_OscConfig+0x4f8>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	f003 0304 	and.w	r3, r3, #4
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d1f0      	bne.n	8009b16 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f003 0310 	and.w	r3, r3, #16
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	f000 80a9 	beq.w	8009c94 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009b42:	4b85      	ldr	r3, [pc, #532]	; (8009d58 <HAL_RCC_OscConfig+0x4f8>)
 8009b44:	691b      	ldr	r3, [r3, #16]
 8009b46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009b4a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009b4c:	4b82      	ldr	r3, [pc, #520]	; (8009d58 <HAL_RCC_OscConfig+0x4f8>)
 8009b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b50:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009b52:	69bb      	ldr	r3, [r7, #24]
 8009b54:	2b08      	cmp	r3, #8
 8009b56:	d007      	beq.n	8009b68 <HAL_RCC_OscConfig+0x308>
 8009b58:	69bb      	ldr	r3, [r7, #24]
 8009b5a:	2b18      	cmp	r3, #24
 8009b5c:	d13a      	bne.n	8009bd4 <HAL_RCC_OscConfig+0x374>
 8009b5e:	697b      	ldr	r3, [r7, #20]
 8009b60:	f003 0303 	and.w	r3, r3, #3
 8009b64:	2b01      	cmp	r3, #1
 8009b66:	d135      	bne.n	8009bd4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009b68:	4b7b      	ldr	r3, [pc, #492]	; (8009d58 <HAL_RCC_OscConfig+0x4f8>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d005      	beq.n	8009b80 <HAL_RCC_OscConfig+0x320>
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	69db      	ldr	r3, [r3, #28]
 8009b78:	2b80      	cmp	r3, #128	; 0x80
 8009b7a:	d001      	beq.n	8009b80 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8009b7c:	2301      	movs	r3, #1
 8009b7e:	e2c1      	b.n	800a104 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009b80:	f7f9 feee 	bl	8003960 <HAL_GetREVID>
 8009b84:	4603      	mov	r3, r0
 8009b86:	f241 0203 	movw	r2, #4099	; 0x1003
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	d817      	bhi.n	8009bbe <HAL_RCC_OscConfig+0x35e>
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6a1b      	ldr	r3, [r3, #32]
 8009b92:	2b20      	cmp	r3, #32
 8009b94:	d108      	bne.n	8009ba8 <HAL_RCC_OscConfig+0x348>
 8009b96:	4b70      	ldr	r3, [pc, #448]	; (8009d58 <HAL_RCC_OscConfig+0x4f8>)
 8009b98:	685b      	ldr	r3, [r3, #4]
 8009b9a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009b9e:	4a6e      	ldr	r2, [pc, #440]	; (8009d58 <HAL_RCC_OscConfig+0x4f8>)
 8009ba0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009ba4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009ba6:	e075      	b.n	8009c94 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009ba8:	4b6b      	ldr	r3, [pc, #428]	; (8009d58 <HAL_RCC_OscConfig+0x4f8>)
 8009baa:	685b      	ldr	r3, [r3, #4]
 8009bac:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	6a1b      	ldr	r3, [r3, #32]
 8009bb4:	069b      	lsls	r3, r3, #26
 8009bb6:	4968      	ldr	r1, [pc, #416]	; (8009d58 <HAL_RCC_OscConfig+0x4f8>)
 8009bb8:	4313      	orrs	r3, r2
 8009bba:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009bbc:	e06a      	b.n	8009c94 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009bbe:	4b66      	ldr	r3, [pc, #408]	; (8009d58 <HAL_RCC_OscConfig+0x4f8>)
 8009bc0:	68db      	ldr	r3, [r3, #12]
 8009bc2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6a1b      	ldr	r3, [r3, #32]
 8009bca:	061b      	lsls	r3, r3, #24
 8009bcc:	4962      	ldr	r1, [pc, #392]	; (8009d58 <HAL_RCC_OscConfig+0x4f8>)
 8009bce:	4313      	orrs	r3, r2
 8009bd0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009bd2:	e05f      	b.n	8009c94 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	69db      	ldr	r3, [r3, #28]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d042      	beq.n	8009c62 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009bdc:	4b5e      	ldr	r3, [pc, #376]	; (8009d58 <HAL_RCC_OscConfig+0x4f8>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	4a5d      	ldr	r2, [pc, #372]	; (8009d58 <HAL_RCC_OscConfig+0x4f8>)
 8009be2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009be6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009be8:	f7f9 feae 	bl	8003948 <HAL_GetTick>
 8009bec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009bee:	e008      	b.n	8009c02 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009bf0:	f7f9 feaa 	bl	8003948 <HAL_GetTick>
 8009bf4:	4602      	mov	r2, r0
 8009bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bf8:	1ad3      	subs	r3, r2, r3
 8009bfa:	2b02      	cmp	r3, #2
 8009bfc:	d901      	bls.n	8009c02 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8009bfe:	2303      	movs	r3, #3
 8009c00:	e280      	b.n	800a104 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009c02:	4b55      	ldr	r3, [pc, #340]	; (8009d58 <HAL_RCC_OscConfig+0x4f8>)
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d0f0      	beq.n	8009bf0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009c0e:	f7f9 fea7 	bl	8003960 <HAL_GetREVID>
 8009c12:	4603      	mov	r3, r0
 8009c14:	f241 0203 	movw	r2, #4099	; 0x1003
 8009c18:	4293      	cmp	r3, r2
 8009c1a:	d817      	bhi.n	8009c4c <HAL_RCC_OscConfig+0x3ec>
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	6a1b      	ldr	r3, [r3, #32]
 8009c20:	2b20      	cmp	r3, #32
 8009c22:	d108      	bne.n	8009c36 <HAL_RCC_OscConfig+0x3d6>
 8009c24:	4b4c      	ldr	r3, [pc, #304]	; (8009d58 <HAL_RCC_OscConfig+0x4f8>)
 8009c26:	685b      	ldr	r3, [r3, #4]
 8009c28:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009c2c:	4a4a      	ldr	r2, [pc, #296]	; (8009d58 <HAL_RCC_OscConfig+0x4f8>)
 8009c2e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009c32:	6053      	str	r3, [r2, #4]
 8009c34:	e02e      	b.n	8009c94 <HAL_RCC_OscConfig+0x434>
 8009c36:	4b48      	ldr	r3, [pc, #288]	; (8009d58 <HAL_RCC_OscConfig+0x4f8>)
 8009c38:	685b      	ldr	r3, [r3, #4]
 8009c3a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6a1b      	ldr	r3, [r3, #32]
 8009c42:	069b      	lsls	r3, r3, #26
 8009c44:	4944      	ldr	r1, [pc, #272]	; (8009d58 <HAL_RCC_OscConfig+0x4f8>)
 8009c46:	4313      	orrs	r3, r2
 8009c48:	604b      	str	r3, [r1, #4]
 8009c4a:	e023      	b.n	8009c94 <HAL_RCC_OscConfig+0x434>
 8009c4c:	4b42      	ldr	r3, [pc, #264]	; (8009d58 <HAL_RCC_OscConfig+0x4f8>)
 8009c4e:	68db      	ldr	r3, [r3, #12]
 8009c50:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	6a1b      	ldr	r3, [r3, #32]
 8009c58:	061b      	lsls	r3, r3, #24
 8009c5a:	493f      	ldr	r1, [pc, #252]	; (8009d58 <HAL_RCC_OscConfig+0x4f8>)
 8009c5c:	4313      	orrs	r3, r2
 8009c5e:	60cb      	str	r3, [r1, #12]
 8009c60:	e018      	b.n	8009c94 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009c62:	4b3d      	ldr	r3, [pc, #244]	; (8009d58 <HAL_RCC_OscConfig+0x4f8>)
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	4a3c      	ldr	r2, [pc, #240]	; (8009d58 <HAL_RCC_OscConfig+0x4f8>)
 8009c68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009c6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c6e:	f7f9 fe6b 	bl	8003948 <HAL_GetTick>
 8009c72:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009c74:	e008      	b.n	8009c88 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009c76:	f7f9 fe67 	bl	8003948 <HAL_GetTick>
 8009c7a:	4602      	mov	r2, r0
 8009c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c7e:	1ad3      	subs	r3, r2, r3
 8009c80:	2b02      	cmp	r3, #2
 8009c82:	d901      	bls.n	8009c88 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009c84:	2303      	movs	r3, #3
 8009c86:	e23d      	b.n	800a104 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009c88:	4b33      	ldr	r3, [pc, #204]	; (8009d58 <HAL_RCC_OscConfig+0x4f8>)
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d1f0      	bne.n	8009c76 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f003 0308 	and.w	r3, r3, #8
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d036      	beq.n	8009d0e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	695b      	ldr	r3, [r3, #20]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d019      	beq.n	8009cdc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009ca8:	4b2b      	ldr	r3, [pc, #172]	; (8009d58 <HAL_RCC_OscConfig+0x4f8>)
 8009caa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009cac:	4a2a      	ldr	r2, [pc, #168]	; (8009d58 <HAL_RCC_OscConfig+0x4f8>)
 8009cae:	f043 0301 	orr.w	r3, r3, #1
 8009cb2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009cb4:	f7f9 fe48 	bl	8003948 <HAL_GetTick>
 8009cb8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009cba:	e008      	b.n	8009cce <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009cbc:	f7f9 fe44 	bl	8003948 <HAL_GetTick>
 8009cc0:	4602      	mov	r2, r0
 8009cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cc4:	1ad3      	subs	r3, r2, r3
 8009cc6:	2b02      	cmp	r3, #2
 8009cc8:	d901      	bls.n	8009cce <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8009cca:	2303      	movs	r3, #3
 8009ccc:	e21a      	b.n	800a104 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009cce:	4b22      	ldr	r3, [pc, #136]	; (8009d58 <HAL_RCC_OscConfig+0x4f8>)
 8009cd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009cd2:	f003 0302 	and.w	r3, r3, #2
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d0f0      	beq.n	8009cbc <HAL_RCC_OscConfig+0x45c>
 8009cda:	e018      	b.n	8009d0e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009cdc:	4b1e      	ldr	r3, [pc, #120]	; (8009d58 <HAL_RCC_OscConfig+0x4f8>)
 8009cde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ce0:	4a1d      	ldr	r2, [pc, #116]	; (8009d58 <HAL_RCC_OscConfig+0x4f8>)
 8009ce2:	f023 0301 	bic.w	r3, r3, #1
 8009ce6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009ce8:	f7f9 fe2e 	bl	8003948 <HAL_GetTick>
 8009cec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009cee:	e008      	b.n	8009d02 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009cf0:	f7f9 fe2a 	bl	8003948 <HAL_GetTick>
 8009cf4:	4602      	mov	r2, r0
 8009cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cf8:	1ad3      	subs	r3, r2, r3
 8009cfa:	2b02      	cmp	r3, #2
 8009cfc:	d901      	bls.n	8009d02 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8009cfe:	2303      	movs	r3, #3
 8009d00:	e200      	b.n	800a104 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009d02:	4b15      	ldr	r3, [pc, #84]	; (8009d58 <HAL_RCC_OscConfig+0x4f8>)
 8009d04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d06:	f003 0302 	and.w	r3, r3, #2
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d1f0      	bne.n	8009cf0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	f003 0320 	and.w	r3, r3, #32
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d039      	beq.n	8009d8e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	699b      	ldr	r3, [r3, #24]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d01c      	beq.n	8009d5c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009d22:	4b0d      	ldr	r3, [pc, #52]	; (8009d58 <HAL_RCC_OscConfig+0x4f8>)
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	4a0c      	ldr	r2, [pc, #48]	; (8009d58 <HAL_RCC_OscConfig+0x4f8>)
 8009d28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009d2c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009d2e:	f7f9 fe0b 	bl	8003948 <HAL_GetTick>
 8009d32:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009d34:	e008      	b.n	8009d48 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009d36:	f7f9 fe07 	bl	8003948 <HAL_GetTick>
 8009d3a:	4602      	mov	r2, r0
 8009d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d3e:	1ad3      	subs	r3, r2, r3
 8009d40:	2b02      	cmp	r3, #2
 8009d42:	d901      	bls.n	8009d48 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8009d44:	2303      	movs	r3, #3
 8009d46:	e1dd      	b.n	800a104 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009d48:	4b03      	ldr	r3, [pc, #12]	; (8009d58 <HAL_RCC_OscConfig+0x4f8>)
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d0f0      	beq.n	8009d36 <HAL_RCC_OscConfig+0x4d6>
 8009d54:	e01b      	b.n	8009d8e <HAL_RCC_OscConfig+0x52e>
 8009d56:	bf00      	nop
 8009d58:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009d5c:	4b9b      	ldr	r3, [pc, #620]	; (8009fcc <HAL_RCC_OscConfig+0x76c>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	4a9a      	ldr	r2, [pc, #616]	; (8009fcc <HAL_RCC_OscConfig+0x76c>)
 8009d62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009d66:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009d68:	f7f9 fdee 	bl	8003948 <HAL_GetTick>
 8009d6c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009d6e:	e008      	b.n	8009d82 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009d70:	f7f9 fdea 	bl	8003948 <HAL_GetTick>
 8009d74:	4602      	mov	r2, r0
 8009d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d78:	1ad3      	subs	r3, r2, r3
 8009d7a:	2b02      	cmp	r3, #2
 8009d7c:	d901      	bls.n	8009d82 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8009d7e:	2303      	movs	r3, #3
 8009d80:	e1c0      	b.n	800a104 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009d82:	4b92      	ldr	r3, [pc, #584]	; (8009fcc <HAL_RCC_OscConfig+0x76c>)
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d1f0      	bne.n	8009d70 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	f003 0304 	and.w	r3, r3, #4
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	f000 8081 	beq.w	8009e9e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009d9c:	4b8c      	ldr	r3, [pc, #560]	; (8009fd0 <HAL_RCC_OscConfig+0x770>)
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	4a8b      	ldr	r2, [pc, #556]	; (8009fd0 <HAL_RCC_OscConfig+0x770>)
 8009da2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009da6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009da8:	f7f9 fdce 	bl	8003948 <HAL_GetTick>
 8009dac:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009dae:	e008      	b.n	8009dc2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009db0:	f7f9 fdca 	bl	8003948 <HAL_GetTick>
 8009db4:	4602      	mov	r2, r0
 8009db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db8:	1ad3      	subs	r3, r2, r3
 8009dba:	2b64      	cmp	r3, #100	; 0x64
 8009dbc:	d901      	bls.n	8009dc2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8009dbe:	2303      	movs	r3, #3
 8009dc0:	e1a0      	b.n	800a104 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009dc2:	4b83      	ldr	r3, [pc, #524]	; (8009fd0 <HAL_RCC_OscConfig+0x770>)
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d0f0      	beq.n	8009db0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	689b      	ldr	r3, [r3, #8]
 8009dd2:	2b01      	cmp	r3, #1
 8009dd4:	d106      	bne.n	8009de4 <HAL_RCC_OscConfig+0x584>
 8009dd6:	4b7d      	ldr	r3, [pc, #500]	; (8009fcc <HAL_RCC_OscConfig+0x76c>)
 8009dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dda:	4a7c      	ldr	r2, [pc, #496]	; (8009fcc <HAL_RCC_OscConfig+0x76c>)
 8009ddc:	f043 0301 	orr.w	r3, r3, #1
 8009de0:	6713      	str	r3, [r2, #112]	; 0x70
 8009de2:	e02d      	b.n	8009e40 <HAL_RCC_OscConfig+0x5e0>
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	689b      	ldr	r3, [r3, #8]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d10c      	bne.n	8009e06 <HAL_RCC_OscConfig+0x5a6>
 8009dec:	4b77      	ldr	r3, [pc, #476]	; (8009fcc <HAL_RCC_OscConfig+0x76c>)
 8009dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009df0:	4a76      	ldr	r2, [pc, #472]	; (8009fcc <HAL_RCC_OscConfig+0x76c>)
 8009df2:	f023 0301 	bic.w	r3, r3, #1
 8009df6:	6713      	str	r3, [r2, #112]	; 0x70
 8009df8:	4b74      	ldr	r3, [pc, #464]	; (8009fcc <HAL_RCC_OscConfig+0x76c>)
 8009dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dfc:	4a73      	ldr	r2, [pc, #460]	; (8009fcc <HAL_RCC_OscConfig+0x76c>)
 8009dfe:	f023 0304 	bic.w	r3, r3, #4
 8009e02:	6713      	str	r3, [r2, #112]	; 0x70
 8009e04:	e01c      	b.n	8009e40 <HAL_RCC_OscConfig+0x5e0>
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	689b      	ldr	r3, [r3, #8]
 8009e0a:	2b05      	cmp	r3, #5
 8009e0c:	d10c      	bne.n	8009e28 <HAL_RCC_OscConfig+0x5c8>
 8009e0e:	4b6f      	ldr	r3, [pc, #444]	; (8009fcc <HAL_RCC_OscConfig+0x76c>)
 8009e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e12:	4a6e      	ldr	r2, [pc, #440]	; (8009fcc <HAL_RCC_OscConfig+0x76c>)
 8009e14:	f043 0304 	orr.w	r3, r3, #4
 8009e18:	6713      	str	r3, [r2, #112]	; 0x70
 8009e1a:	4b6c      	ldr	r3, [pc, #432]	; (8009fcc <HAL_RCC_OscConfig+0x76c>)
 8009e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e1e:	4a6b      	ldr	r2, [pc, #428]	; (8009fcc <HAL_RCC_OscConfig+0x76c>)
 8009e20:	f043 0301 	orr.w	r3, r3, #1
 8009e24:	6713      	str	r3, [r2, #112]	; 0x70
 8009e26:	e00b      	b.n	8009e40 <HAL_RCC_OscConfig+0x5e0>
 8009e28:	4b68      	ldr	r3, [pc, #416]	; (8009fcc <HAL_RCC_OscConfig+0x76c>)
 8009e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e2c:	4a67      	ldr	r2, [pc, #412]	; (8009fcc <HAL_RCC_OscConfig+0x76c>)
 8009e2e:	f023 0301 	bic.w	r3, r3, #1
 8009e32:	6713      	str	r3, [r2, #112]	; 0x70
 8009e34:	4b65      	ldr	r3, [pc, #404]	; (8009fcc <HAL_RCC_OscConfig+0x76c>)
 8009e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e38:	4a64      	ldr	r2, [pc, #400]	; (8009fcc <HAL_RCC_OscConfig+0x76c>)
 8009e3a:	f023 0304 	bic.w	r3, r3, #4
 8009e3e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	689b      	ldr	r3, [r3, #8]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d015      	beq.n	8009e74 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e48:	f7f9 fd7e 	bl	8003948 <HAL_GetTick>
 8009e4c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009e4e:	e00a      	b.n	8009e66 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009e50:	f7f9 fd7a 	bl	8003948 <HAL_GetTick>
 8009e54:	4602      	mov	r2, r0
 8009e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e58:	1ad3      	subs	r3, r2, r3
 8009e5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e5e:	4293      	cmp	r3, r2
 8009e60:	d901      	bls.n	8009e66 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8009e62:	2303      	movs	r3, #3
 8009e64:	e14e      	b.n	800a104 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009e66:	4b59      	ldr	r3, [pc, #356]	; (8009fcc <HAL_RCC_OscConfig+0x76c>)
 8009e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e6a:	f003 0302 	and.w	r3, r3, #2
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d0ee      	beq.n	8009e50 <HAL_RCC_OscConfig+0x5f0>
 8009e72:	e014      	b.n	8009e9e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e74:	f7f9 fd68 	bl	8003948 <HAL_GetTick>
 8009e78:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009e7a:	e00a      	b.n	8009e92 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009e7c:	f7f9 fd64 	bl	8003948 <HAL_GetTick>
 8009e80:	4602      	mov	r2, r0
 8009e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e84:	1ad3      	subs	r3, r2, r3
 8009e86:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e8a:	4293      	cmp	r3, r2
 8009e8c:	d901      	bls.n	8009e92 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8009e8e:	2303      	movs	r3, #3
 8009e90:	e138      	b.n	800a104 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009e92:	4b4e      	ldr	r3, [pc, #312]	; (8009fcc <HAL_RCC_OscConfig+0x76c>)
 8009e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e96:	f003 0302 	and.w	r3, r3, #2
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d1ee      	bne.n	8009e7c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	f000 812d 	beq.w	800a102 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009ea8:	4b48      	ldr	r3, [pc, #288]	; (8009fcc <HAL_RCC_OscConfig+0x76c>)
 8009eaa:	691b      	ldr	r3, [r3, #16]
 8009eac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009eb0:	2b18      	cmp	r3, #24
 8009eb2:	f000 80bd 	beq.w	800a030 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eba:	2b02      	cmp	r3, #2
 8009ebc:	f040 809e 	bne.w	8009ffc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009ec0:	4b42      	ldr	r3, [pc, #264]	; (8009fcc <HAL_RCC_OscConfig+0x76c>)
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	4a41      	ldr	r2, [pc, #260]	; (8009fcc <HAL_RCC_OscConfig+0x76c>)
 8009ec6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009eca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ecc:	f7f9 fd3c 	bl	8003948 <HAL_GetTick>
 8009ed0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009ed2:	e008      	b.n	8009ee6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009ed4:	f7f9 fd38 	bl	8003948 <HAL_GetTick>
 8009ed8:	4602      	mov	r2, r0
 8009eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009edc:	1ad3      	subs	r3, r2, r3
 8009ede:	2b02      	cmp	r3, #2
 8009ee0:	d901      	bls.n	8009ee6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8009ee2:	2303      	movs	r3, #3
 8009ee4:	e10e      	b.n	800a104 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009ee6:	4b39      	ldr	r3, [pc, #228]	; (8009fcc <HAL_RCC_OscConfig+0x76c>)
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d1f0      	bne.n	8009ed4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009ef2:	4b36      	ldr	r3, [pc, #216]	; (8009fcc <HAL_RCC_OscConfig+0x76c>)
 8009ef4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009ef6:	4b37      	ldr	r3, [pc, #220]	; (8009fd4 <HAL_RCC_OscConfig+0x774>)
 8009ef8:	4013      	ands	r3, r2
 8009efa:	687a      	ldr	r2, [r7, #4]
 8009efc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009efe:	687a      	ldr	r2, [r7, #4]
 8009f00:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009f02:	0112      	lsls	r2, r2, #4
 8009f04:	430a      	orrs	r2, r1
 8009f06:	4931      	ldr	r1, [pc, #196]	; (8009fcc <HAL_RCC_OscConfig+0x76c>)
 8009f08:	4313      	orrs	r3, r2
 8009f0a:	628b      	str	r3, [r1, #40]	; 0x28
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f10:	3b01      	subs	r3, #1
 8009f12:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f1a:	3b01      	subs	r3, #1
 8009f1c:	025b      	lsls	r3, r3, #9
 8009f1e:	b29b      	uxth	r3, r3
 8009f20:	431a      	orrs	r2, r3
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f26:	3b01      	subs	r3, #1
 8009f28:	041b      	lsls	r3, r3, #16
 8009f2a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009f2e:	431a      	orrs	r2, r3
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f34:	3b01      	subs	r3, #1
 8009f36:	061b      	lsls	r3, r3, #24
 8009f38:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009f3c:	4923      	ldr	r1, [pc, #140]	; (8009fcc <HAL_RCC_OscConfig+0x76c>)
 8009f3e:	4313      	orrs	r3, r2
 8009f40:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8009f42:	4b22      	ldr	r3, [pc, #136]	; (8009fcc <HAL_RCC_OscConfig+0x76c>)
 8009f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f46:	4a21      	ldr	r2, [pc, #132]	; (8009fcc <HAL_RCC_OscConfig+0x76c>)
 8009f48:	f023 0301 	bic.w	r3, r3, #1
 8009f4c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009f4e:	4b1f      	ldr	r3, [pc, #124]	; (8009fcc <HAL_RCC_OscConfig+0x76c>)
 8009f50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f52:	4b21      	ldr	r3, [pc, #132]	; (8009fd8 <HAL_RCC_OscConfig+0x778>)
 8009f54:	4013      	ands	r3, r2
 8009f56:	687a      	ldr	r2, [r7, #4]
 8009f58:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009f5a:	00d2      	lsls	r2, r2, #3
 8009f5c:	491b      	ldr	r1, [pc, #108]	; (8009fcc <HAL_RCC_OscConfig+0x76c>)
 8009f5e:	4313      	orrs	r3, r2
 8009f60:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009f62:	4b1a      	ldr	r3, [pc, #104]	; (8009fcc <HAL_RCC_OscConfig+0x76c>)
 8009f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f66:	f023 020c 	bic.w	r2, r3, #12
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f6e:	4917      	ldr	r1, [pc, #92]	; (8009fcc <HAL_RCC_OscConfig+0x76c>)
 8009f70:	4313      	orrs	r3, r2
 8009f72:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009f74:	4b15      	ldr	r3, [pc, #84]	; (8009fcc <HAL_RCC_OscConfig+0x76c>)
 8009f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f78:	f023 0202 	bic.w	r2, r3, #2
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f80:	4912      	ldr	r1, [pc, #72]	; (8009fcc <HAL_RCC_OscConfig+0x76c>)
 8009f82:	4313      	orrs	r3, r2
 8009f84:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009f86:	4b11      	ldr	r3, [pc, #68]	; (8009fcc <HAL_RCC_OscConfig+0x76c>)
 8009f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f8a:	4a10      	ldr	r2, [pc, #64]	; (8009fcc <HAL_RCC_OscConfig+0x76c>)
 8009f8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f90:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f92:	4b0e      	ldr	r3, [pc, #56]	; (8009fcc <HAL_RCC_OscConfig+0x76c>)
 8009f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f96:	4a0d      	ldr	r2, [pc, #52]	; (8009fcc <HAL_RCC_OscConfig+0x76c>)
 8009f98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f9c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009f9e:	4b0b      	ldr	r3, [pc, #44]	; (8009fcc <HAL_RCC_OscConfig+0x76c>)
 8009fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fa2:	4a0a      	ldr	r2, [pc, #40]	; (8009fcc <HAL_RCC_OscConfig+0x76c>)
 8009fa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009fa8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8009faa:	4b08      	ldr	r3, [pc, #32]	; (8009fcc <HAL_RCC_OscConfig+0x76c>)
 8009fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fae:	4a07      	ldr	r2, [pc, #28]	; (8009fcc <HAL_RCC_OscConfig+0x76c>)
 8009fb0:	f043 0301 	orr.w	r3, r3, #1
 8009fb4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009fb6:	4b05      	ldr	r3, [pc, #20]	; (8009fcc <HAL_RCC_OscConfig+0x76c>)
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	4a04      	ldr	r2, [pc, #16]	; (8009fcc <HAL_RCC_OscConfig+0x76c>)
 8009fbc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009fc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fc2:	f7f9 fcc1 	bl	8003948 <HAL_GetTick>
 8009fc6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009fc8:	e011      	b.n	8009fee <HAL_RCC_OscConfig+0x78e>
 8009fca:	bf00      	nop
 8009fcc:	58024400 	.word	0x58024400
 8009fd0:	58024800 	.word	0x58024800
 8009fd4:	fffffc0c 	.word	0xfffffc0c
 8009fd8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009fdc:	f7f9 fcb4 	bl	8003948 <HAL_GetTick>
 8009fe0:	4602      	mov	r2, r0
 8009fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fe4:	1ad3      	subs	r3, r2, r3
 8009fe6:	2b02      	cmp	r3, #2
 8009fe8:	d901      	bls.n	8009fee <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8009fea:	2303      	movs	r3, #3
 8009fec:	e08a      	b.n	800a104 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009fee:	4b47      	ldr	r3, [pc, #284]	; (800a10c <HAL_RCC_OscConfig+0x8ac>)
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d0f0      	beq.n	8009fdc <HAL_RCC_OscConfig+0x77c>
 8009ffa:	e082      	b.n	800a102 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009ffc:	4b43      	ldr	r3, [pc, #268]	; (800a10c <HAL_RCC_OscConfig+0x8ac>)
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	4a42      	ldr	r2, [pc, #264]	; (800a10c <HAL_RCC_OscConfig+0x8ac>)
 800a002:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a006:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a008:	f7f9 fc9e 	bl	8003948 <HAL_GetTick>
 800a00c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a00e:	e008      	b.n	800a022 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a010:	f7f9 fc9a 	bl	8003948 <HAL_GetTick>
 800a014:	4602      	mov	r2, r0
 800a016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a018:	1ad3      	subs	r3, r2, r3
 800a01a:	2b02      	cmp	r3, #2
 800a01c:	d901      	bls.n	800a022 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800a01e:	2303      	movs	r3, #3
 800a020:	e070      	b.n	800a104 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a022:	4b3a      	ldr	r3, [pc, #232]	; (800a10c <HAL_RCC_OscConfig+0x8ac>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d1f0      	bne.n	800a010 <HAL_RCC_OscConfig+0x7b0>
 800a02e:	e068      	b.n	800a102 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a030:	4b36      	ldr	r3, [pc, #216]	; (800a10c <HAL_RCC_OscConfig+0x8ac>)
 800a032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a034:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a036:	4b35      	ldr	r3, [pc, #212]	; (800a10c <HAL_RCC_OscConfig+0x8ac>)
 800a038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a03a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a040:	2b01      	cmp	r3, #1
 800a042:	d031      	beq.n	800a0a8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a044:	693b      	ldr	r3, [r7, #16]
 800a046:	f003 0203 	and.w	r2, r3, #3
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a04e:	429a      	cmp	r2, r3
 800a050:	d12a      	bne.n	800a0a8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a052:	693b      	ldr	r3, [r7, #16]
 800a054:	091b      	lsrs	r3, r3, #4
 800a056:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a05e:	429a      	cmp	r2, r3
 800a060:	d122      	bne.n	800a0a8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a06c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a06e:	429a      	cmp	r2, r3
 800a070:	d11a      	bne.n	800a0a8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	0a5b      	lsrs	r3, r3, #9
 800a076:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a07e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a080:	429a      	cmp	r2, r3
 800a082:	d111      	bne.n	800a0a8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	0c1b      	lsrs	r3, r3, #16
 800a088:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a090:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a092:	429a      	cmp	r2, r3
 800a094:	d108      	bne.n	800a0a8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	0e1b      	lsrs	r3, r3, #24
 800a09a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0a2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a0a4:	429a      	cmp	r2, r3
 800a0a6:	d001      	beq.n	800a0ac <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800a0a8:	2301      	movs	r3, #1
 800a0aa:	e02b      	b.n	800a104 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a0ac:	4b17      	ldr	r3, [pc, #92]	; (800a10c <HAL_RCC_OscConfig+0x8ac>)
 800a0ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0b0:	08db      	lsrs	r3, r3, #3
 800a0b2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a0b6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a0bc:	693a      	ldr	r2, [r7, #16]
 800a0be:	429a      	cmp	r2, r3
 800a0c0:	d01f      	beq.n	800a102 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800a0c2:	4b12      	ldr	r3, [pc, #72]	; (800a10c <HAL_RCC_OscConfig+0x8ac>)
 800a0c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0c6:	4a11      	ldr	r2, [pc, #68]	; (800a10c <HAL_RCC_OscConfig+0x8ac>)
 800a0c8:	f023 0301 	bic.w	r3, r3, #1
 800a0cc:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a0ce:	f7f9 fc3b 	bl	8003948 <HAL_GetTick>
 800a0d2:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a0d4:	bf00      	nop
 800a0d6:	f7f9 fc37 	bl	8003948 <HAL_GetTick>
 800a0da:	4602      	mov	r2, r0
 800a0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0de:	4293      	cmp	r3, r2
 800a0e0:	d0f9      	beq.n	800a0d6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a0e2:	4b0a      	ldr	r3, [pc, #40]	; (800a10c <HAL_RCC_OscConfig+0x8ac>)
 800a0e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a0e6:	4b0a      	ldr	r3, [pc, #40]	; (800a110 <HAL_RCC_OscConfig+0x8b0>)
 800a0e8:	4013      	ands	r3, r2
 800a0ea:	687a      	ldr	r2, [r7, #4]
 800a0ec:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a0ee:	00d2      	lsls	r2, r2, #3
 800a0f0:	4906      	ldr	r1, [pc, #24]	; (800a10c <HAL_RCC_OscConfig+0x8ac>)
 800a0f2:	4313      	orrs	r3, r2
 800a0f4:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800a0f6:	4b05      	ldr	r3, [pc, #20]	; (800a10c <HAL_RCC_OscConfig+0x8ac>)
 800a0f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0fa:	4a04      	ldr	r2, [pc, #16]	; (800a10c <HAL_RCC_OscConfig+0x8ac>)
 800a0fc:	f043 0301 	orr.w	r3, r3, #1
 800a100:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a102:	2300      	movs	r3, #0
}
 800a104:	4618      	mov	r0, r3
 800a106:	3730      	adds	r7, #48	; 0x30
 800a108:	46bd      	mov	sp, r7
 800a10a:	bd80      	pop	{r7, pc}
 800a10c:	58024400 	.word	0x58024400
 800a110:	ffff0007 	.word	0xffff0007

0800a114 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b086      	sub	sp, #24
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
 800a11c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d101      	bne.n	800a128 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a124:	2301      	movs	r3, #1
 800a126:	e19c      	b.n	800a462 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a128:	4b8a      	ldr	r3, [pc, #552]	; (800a354 <HAL_RCC_ClockConfig+0x240>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	f003 030f 	and.w	r3, r3, #15
 800a130:	683a      	ldr	r2, [r7, #0]
 800a132:	429a      	cmp	r2, r3
 800a134:	d910      	bls.n	800a158 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a136:	4b87      	ldr	r3, [pc, #540]	; (800a354 <HAL_RCC_ClockConfig+0x240>)
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	f023 020f 	bic.w	r2, r3, #15
 800a13e:	4985      	ldr	r1, [pc, #532]	; (800a354 <HAL_RCC_ClockConfig+0x240>)
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	4313      	orrs	r3, r2
 800a144:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a146:	4b83      	ldr	r3, [pc, #524]	; (800a354 <HAL_RCC_ClockConfig+0x240>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	f003 030f 	and.w	r3, r3, #15
 800a14e:	683a      	ldr	r2, [r7, #0]
 800a150:	429a      	cmp	r2, r3
 800a152:	d001      	beq.n	800a158 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a154:	2301      	movs	r3, #1
 800a156:	e184      	b.n	800a462 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	f003 0304 	and.w	r3, r3, #4
 800a160:	2b00      	cmp	r3, #0
 800a162:	d010      	beq.n	800a186 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	691a      	ldr	r2, [r3, #16]
 800a168:	4b7b      	ldr	r3, [pc, #492]	; (800a358 <HAL_RCC_ClockConfig+0x244>)
 800a16a:	699b      	ldr	r3, [r3, #24]
 800a16c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a170:	429a      	cmp	r2, r3
 800a172:	d908      	bls.n	800a186 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a174:	4b78      	ldr	r3, [pc, #480]	; (800a358 <HAL_RCC_ClockConfig+0x244>)
 800a176:	699b      	ldr	r3, [r3, #24]
 800a178:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	691b      	ldr	r3, [r3, #16]
 800a180:	4975      	ldr	r1, [pc, #468]	; (800a358 <HAL_RCC_ClockConfig+0x244>)
 800a182:	4313      	orrs	r3, r2
 800a184:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	f003 0308 	and.w	r3, r3, #8
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d010      	beq.n	800a1b4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	695a      	ldr	r2, [r3, #20]
 800a196:	4b70      	ldr	r3, [pc, #448]	; (800a358 <HAL_RCC_ClockConfig+0x244>)
 800a198:	69db      	ldr	r3, [r3, #28]
 800a19a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a19e:	429a      	cmp	r2, r3
 800a1a0:	d908      	bls.n	800a1b4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a1a2:	4b6d      	ldr	r3, [pc, #436]	; (800a358 <HAL_RCC_ClockConfig+0x244>)
 800a1a4:	69db      	ldr	r3, [r3, #28]
 800a1a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	695b      	ldr	r3, [r3, #20]
 800a1ae:	496a      	ldr	r1, [pc, #424]	; (800a358 <HAL_RCC_ClockConfig+0x244>)
 800a1b0:	4313      	orrs	r3, r2
 800a1b2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	f003 0310 	and.w	r3, r3, #16
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d010      	beq.n	800a1e2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	699a      	ldr	r2, [r3, #24]
 800a1c4:	4b64      	ldr	r3, [pc, #400]	; (800a358 <HAL_RCC_ClockConfig+0x244>)
 800a1c6:	69db      	ldr	r3, [r3, #28]
 800a1c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a1cc:	429a      	cmp	r2, r3
 800a1ce:	d908      	bls.n	800a1e2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a1d0:	4b61      	ldr	r3, [pc, #388]	; (800a358 <HAL_RCC_ClockConfig+0x244>)
 800a1d2:	69db      	ldr	r3, [r3, #28]
 800a1d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	699b      	ldr	r3, [r3, #24]
 800a1dc:	495e      	ldr	r1, [pc, #376]	; (800a358 <HAL_RCC_ClockConfig+0x244>)
 800a1de:	4313      	orrs	r3, r2
 800a1e0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	f003 0320 	and.w	r3, r3, #32
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d010      	beq.n	800a210 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	69da      	ldr	r2, [r3, #28]
 800a1f2:	4b59      	ldr	r3, [pc, #356]	; (800a358 <HAL_RCC_ClockConfig+0x244>)
 800a1f4:	6a1b      	ldr	r3, [r3, #32]
 800a1f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a1fa:	429a      	cmp	r2, r3
 800a1fc:	d908      	bls.n	800a210 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a1fe:	4b56      	ldr	r3, [pc, #344]	; (800a358 <HAL_RCC_ClockConfig+0x244>)
 800a200:	6a1b      	ldr	r3, [r3, #32]
 800a202:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	69db      	ldr	r3, [r3, #28]
 800a20a:	4953      	ldr	r1, [pc, #332]	; (800a358 <HAL_RCC_ClockConfig+0x244>)
 800a20c:	4313      	orrs	r3, r2
 800a20e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	f003 0302 	and.w	r3, r3, #2
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d010      	beq.n	800a23e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	68da      	ldr	r2, [r3, #12]
 800a220:	4b4d      	ldr	r3, [pc, #308]	; (800a358 <HAL_RCC_ClockConfig+0x244>)
 800a222:	699b      	ldr	r3, [r3, #24]
 800a224:	f003 030f 	and.w	r3, r3, #15
 800a228:	429a      	cmp	r2, r3
 800a22a:	d908      	bls.n	800a23e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a22c:	4b4a      	ldr	r3, [pc, #296]	; (800a358 <HAL_RCC_ClockConfig+0x244>)
 800a22e:	699b      	ldr	r3, [r3, #24]
 800a230:	f023 020f 	bic.w	r2, r3, #15
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	68db      	ldr	r3, [r3, #12]
 800a238:	4947      	ldr	r1, [pc, #284]	; (800a358 <HAL_RCC_ClockConfig+0x244>)
 800a23a:	4313      	orrs	r3, r2
 800a23c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	f003 0301 	and.w	r3, r3, #1
 800a246:	2b00      	cmp	r3, #0
 800a248:	d055      	beq.n	800a2f6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a24a:	4b43      	ldr	r3, [pc, #268]	; (800a358 <HAL_RCC_ClockConfig+0x244>)
 800a24c:	699b      	ldr	r3, [r3, #24]
 800a24e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	689b      	ldr	r3, [r3, #8]
 800a256:	4940      	ldr	r1, [pc, #256]	; (800a358 <HAL_RCC_ClockConfig+0x244>)
 800a258:	4313      	orrs	r3, r2
 800a25a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	685b      	ldr	r3, [r3, #4]
 800a260:	2b02      	cmp	r3, #2
 800a262:	d107      	bne.n	800a274 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a264:	4b3c      	ldr	r3, [pc, #240]	; (800a358 <HAL_RCC_ClockConfig+0x244>)
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d121      	bne.n	800a2b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a270:	2301      	movs	r3, #1
 800a272:	e0f6      	b.n	800a462 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	685b      	ldr	r3, [r3, #4]
 800a278:	2b03      	cmp	r3, #3
 800a27a:	d107      	bne.n	800a28c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a27c:	4b36      	ldr	r3, [pc, #216]	; (800a358 <HAL_RCC_ClockConfig+0x244>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a284:	2b00      	cmp	r3, #0
 800a286:	d115      	bne.n	800a2b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a288:	2301      	movs	r3, #1
 800a28a:	e0ea      	b.n	800a462 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	685b      	ldr	r3, [r3, #4]
 800a290:	2b01      	cmp	r3, #1
 800a292:	d107      	bne.n	800a2a4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a294:	4b30      	ldr	r3, [pc, #192]	; (800a358 <HAL_RCC_ClockConfig+0x244>)
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d109      	bne.n	800a2b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a2a0:	2301      	movs	r3, #1
 800a2a2:	e0de      	b.n	800a462 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a2a4:	4b2c      	ldr	r3, [pc, #176]	; (800a358 <HAL_RCC_ClockConfig+0x244>)
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	f003 0304 	and.w	r3, r3, #4
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d101      	bne.n	800a2b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	e0d6      	b.n	800a462 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a2b4:	4b28      	ldr	r3, [pc, #160]	; (800a358 <HAL_RCC_ClockConfig+0x244>)
 800a2b6:	691b      	ldr	r3, [r3, #16]
 800a2b8:	f023 0207 	bic.w	r2, r3, #7
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	685b      	ldr	r3, [r3, #4]
 800a2c0:	4925      	ldr	r1, [pc, #148]	; (800a358 <HAL_RCC_ClockConfig+0x244>)
 800a2c2:	4313      	orrs	r3, r2
 800a2c4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a2c6:	f7f9 fb3f 	bl	8003948 <HAL_GetTick>
 800a2ca:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a2cc:	e00a      	b.n	800a2e4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a2ce:	f7f9 fb3b 	bl	8003948 <HAL_GetTick>
 800a2d2:	4602      	mov	r2, r0
 800a2d4:	697b      	ldr	r3, [r7, #20]
 800a2d6:	1ad3      	subs	r3, r2, r3
 800a2d8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	d901      	bls.n	800a2e4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a2e0:	2303      	movs	r3, #3
 800a2e2:	e0be      	b.n	800a462 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a2e4:	4b1c      	ldr	r3, [pc, #112]	; (800a358 <HAL_RCC_ClockConfig+0x244>)
 800a2e6:	691b      	ldr	r3, [r3, #16]
 800a2e8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	685b      	ldr	r3, [r3, #4]
 800a2f0:	00db      	lsls	r3, r3, #3
 800a2f2:	429a      	cmp	r2, r3
 800a2f4:	d1eb      	bne.n	800a2ce <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	f003 0302 	and.w	r3, r3, #2
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d010      	beq.n	800a324 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	68da      	ldr	r2, [r3, #12]
 800a306:	4b14      	ldr	r3, [pc, #80]	; (800a358 <HAL_RCC_ClockConfig+0x244>)
 800a308:	699b      	ldr	r3, [r3, #24]
 800a30a:	f003 030f 	and.w	r3, r3, #15
 800a30e:	429a      	cmp	r2, r3
 800a310:	d208      	bcs.n	800a324 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a312:	4b11      	ldr	r3, [pc, #68]	; (800a358 <HAL_RCC_ClockConfig+0x244>)
 800a314:	699b      	ldr	r3, [r3, #24]
 800a316:	f023 020f 	bic.w	r2, r3, #15
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	68db      	ldr	r3, [r3, #12]
 800a31e:	490e      	ldr	r1, [pc, #56]	; (800a358 <HAL_RCC_ClockConfig+0x244>)
 800a320:	4313      	orrs	r3, r2
 800a322:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a324:	4b0b      	ldr	r3, [pc, #44]	; (800a354 <HAL_RCC_ClockConfig+0x240>)
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	f003 030f 	and.w	r3, r3, #15
 800a32c:	683a      	ldr	r2, [r7, #0]
 800a32e:	429a      	cmp	r2, r3
 800a330:	d214      	bcs.n	800a35c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a332:	4b08      	ldr	r3, [pc, #32]	; (800a354 <HAL_RCC_ClockConfig+0x240>)
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	f023 020f 	bic.w	r2, r3, #15
 800a33a:	4906      	ldr	r1, [pc, #24]	; (800a354 <HAL_RCC_ClockConfig+0x240>)
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	4313      	orrs	r3, r2
 800a340:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a342:	4b04      	ldr	r3, [pc, #16]	; (800a354 <HAL_RCC_ClockConfig+0x240>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	f003 030f 	and.w	r3, r3, #15
 800a34a:	683a      	ldr	r2, [r7, #0]
 800a34c:	429a      	cmp	r2, r3
 800a34e:	d005      	beq.n	800a35c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a350:	2301      	movs	r3, #1
 800a352:	e086      	b.n	800a462 <HAL_RCC_ClockConfig+0x34e>
 800a354:	52002000 	.word	0x52002000
 800a358:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	f003 0304 	and.w	r3, r3, #4
 800a364:	2b00      	cmp	r3, #0
 800a366:	d010      	beq.n	800a38a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	691a      	ldr	r2, [r3, #16]
 800a36c:	4b3f      	ldr	r3, [pc, #252]	; (800a46c <HAL_RCC_ClockConfig+0x358>)
 800a36e:	699b      	ldr	r3, [r3, #24]
 800a370:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a374:	429a      	cmp	r2, r3
 800a376:	d208      	bcs.n	800a38a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a378:	4b3c      	ldr	r3, [pc, #240]	; (800a46c <HAL_RCC_ClockConfig+0x358>)
 800a37a:	699b      	ldr	r3, [r3, #24]
 800a37c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	691b      	ldr	r3, [r3, #16]
 800a384:	4939      	ldr	r1, [pc, #228]	; (800a46c <HAL_RCC_ClockConfig+0x358>)
 800a386:	4313      	orrs	r3, r2
 800a388:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	f003 0308 	and.w	r3, r3, #8
 800a392:	2b00      	cmp	r3, #0
 800a394:	d010      	beq.n	800a3b8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	695a      	ldr	r2, [r3, #20]
 800a39a:	4b34      	ldr	r3, [pc, #208]	; (800a46c <HAL_RCC_ClockConfig+0x358>)
 800a39c:	69db      	ldr	r3, [r3, #28]
 800a39e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a3a2:	429a      	cmp	r2, r3
 800a3a4:	d208      	bcs.n	800a3b8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a3a6:	4b31      	ldr	r3, [pc, #196]	; (800a46c <HAL_RCC_ClockConfig+0x358>)
 800a3a8:	69db      	ldr	r3, [r3, #28]
 800a3aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	695b      	ldr	r3, [r3, #20]
 800a3b2:	492e      	ldr	r1, [pc, #184]	; (800a46c <HAL_RCC_ClockConfig+0x358>)
 800a3b4:	4313      	orrs	r3, r2
 800a3b6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	f003 0310 	and.w	r3, r3, #16
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d010      	beq.n	800a3e6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	699a      	ldr	r2, [r3, #24]
 800a3c8:	4b28      	ldr	r3, [pc, #160]	; (800a46c <HAL_RCC_ClockConfig+0x358>)
 800a3ca:	69db      	ldr	r3, [r3, #28]
 800a3cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a3d0:	429a      	cmp	r2, r3
 800a3d2:	d208      	bcs.n	800a3e6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a3d4:	4b25      	ldr	r3, [pc, #148]	; (800a46c <HAL_RCC_ClockConfig+0x358>)
 800a3d6:	69db      	ldr	r3, [r3, #28]
 800a3d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	699b      	ldr	r3, [r3, #24]
 800a3e0:	4922      	ldr	r1, [pc, #136]	; (800a46c <HAL_RCC_ClockConfig+0x358>)
 800a3e2:	4313      	orrs	r3, r2
 800a3e4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	f003 0320 	and.w	r3, r3, #32
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d010      	beq.n	800a414 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	69da      	ldr	r2, [r3, #28]
 800a3f6:	4b1d      	ldr	r3, [pc, #116]	; (800a46c <HAL_RCC_ClockConfig+0x358>)
 800a3f8:	6a1b      	ldr	r3, [r3, #32]
 800a3fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a3fe:	429a      	cmp	r2, r3
 800a400:	d208      	bcs.n	800a414 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a402:	4b1a      	ldr	r3, [pc, #104]	; (800a46c <HAL_RCC_ClockConfig+0x358>)
 800a404:	6a1b      	ldr	r3, [r3, #32]
 800a406:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	69db      	ldr	r3, [r3, #28]
 800a40e:	4917      	ldr	r1, [pc, #92]	; (800a46c <HAL_RCC_ClockConfig+0x358>)
 800a410:	4313      	orrs	r3, r2
 800a412:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a414:	f000 f834 	bl	800a480 <HAL_RCC_GetSysClockFreq>
 800a418:	4602      	mov	r2, r0
 800a41a:	4b14      	ldr	r3, [pc, #80]	; (800a46c <HAL_RCC_ClockConfig+0x358>)
 800a41c:	699b      	ldr	r3, [r3, #24]
 800a41e:	0a1b      	lsrs	r3, r3, #8
 800a420:	f003 030f 	and.w	r3, r3, #15
 800a424:	4912      	ldr	r1, [pc, #72]	; (800a470 <HAL_RCC_ClockConfig+0x35c>)
 800a426:	5ccb      	ldrb	r3, [r1, r3]
 800a428:	f003 031f 	and.w	r3, r3, #31
 800a42c:	fa22 f303 	lsr.w	r3, r2, r3
 800a430:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a432:	4b0e      	ldr	r3, [pc, #56]	; (800a46c <HAL_RCC_ClockConfig+0x358>)
 800a434:	699b      	ldr	r3, [r3, #24]
 800a436:	f003 030f 	and.w	r3, r3, #15
 800a43a:	4a0d      	ldr	r2, [pc, #52]	; (800a470 <HAL_RCC_ClockConfig+0x35c>)
 800a43c:	5cd3      	ldrb	r3, [r2, r3]
 800a43e:	f003 031f 	and.w	r3, r3, #31
 800a442:	693a      	ldr	r2, [r7, #16]
 800a444:	fa22 f303 	lsr.w	r3, r2, r3
 800a448:	4a0a      	ldr	r2, [pc, #40]	; (800a474 <HAL_RCC_ClockConfig+0x360>)
 800a44a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a44c:	4a0a      	ldr	r2, [pc, #40]	; (800a478 <HAL_RCC_ClockConfig+0x364>)
 800a44e:	693b      	ldr	r3, [r7, #16]
 800a450:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a452:	4b0a      	ldr	r3, [pc, #40]	; (800a47c <HAL_RCC_ClockConfig+0x368>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	4618      	mov	r0, r3
 800a458:	f7f8 ff9a 	bl	8003390 <HAL_InitTick>
 800a45c:	4603      	mov	r3, r0
 800a45e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a460:	7bfb      	ldrb	r3, [r7, #15]
}
 800a462:	4618      	mov	r0, r3
 800a464:	3718      	adds	r7, #24
 800a466:	46bd      	mov	sp, r7
 800a468:	bd80      	pop	{r7, pc}
 800a46a:	bf00      	nop
 800a46c:	58024400 	.word	0x58024400
 800a470:	08016bf4 	.word	0x08016bf4
 800a474:	24000094 	.word	0x24000094
 800a478:	24000090 	.word	0x24000090
 800a47c:	24000098 	.word	0x24000098

0800a480 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a480:	b480      	push	{r7}
 800a482:	b089      	sub	sp, #36	; 0x24
 800a484:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a486:	4bb3      	ldr	r3, [pc, #716]	; (800a754 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a488:	691b      	ldr	r3, [r3, #16]
 800a48a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a48e:	2b18      	cmp	r3, #24
 800a490:	f200 8155 	bhi.w	800a73e <HAL_RCC_GetSysClockFreq+0x2be>
 800a494:	a201      	add	r2, pc, #4	; (adr r2, 800a49c <HAL_RCC_GetSysClockFreq+0x1c>)
 800a496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a49a:	bf00      	nop
 800a49c:	0800a501 	.word	0x0800a501
 800a4a0:	0800a73f 	.word	0x0800a73f
 800a4a4:	0800a73f 	.word	0x0800a73f
 800a4a8:	0800a73f 	.word	0x0800a73f
 800a4ac:	0800a73f 	.word	0x0800a73f
 800a4b0:	0800a73f 	.word	0x0800a73f
 800a4b4:	0800a73f 	.word	0x0800a73f
 800a4b8:	0800a73f 	.word	0x0800a73f
 800a4bc:	0800a527 	.word	0x0800a527
 800a4c0:	0800a73f 	.word	0x0800a73f
 800a4c4:	0800a73f 	.word	0x0800a73f
 800a4c8:	0800a73f 	.word	0x0800a73f
 800a4cc:	0800a73f 	.word	0x0800a73f
 800a4d0:	0800a73f 	.word	0x0800a73f
 800a4d4:	0800a73f 	.word	0x0800a73f
 800a4d8:	0800a73f 	.word	0x0800a73f
 800a4dc:	0800a52d 	.word	0x0800a52d
 800a4e0:	0800a73f 	.word	0x0800a73f
 800a4e4:	0800a73f 	.word	0x0800a73f
 800a4e8:	0800a73f 	.word	0x0800a73f
 800a4ec:	0800a73f 	.word	0x0800a73f
 800a4f0:	0800a73f 	.word	0x0800a73f
 800a4f4:	0800a73f 	.word	0x0800a73f
 800a4f8:	0800a73f 	.word	0x0800a73f
 800a4fc:	0800a533 	.word	0x0800a533
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a500:	4b94      	ldr	r3, [pc, #592]	; (800a754 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	f003 0320 	and.w	r3, r3, #32
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d009      	beq.n	800a520 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a50c:	4b91      	ldr	r3, [pc, #580]	; (800a754 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	08db      	lsrs	r3, r3, #3
 800a512:	f003 0303 	and.w	r3, r3, #3
 800a516:	4a90      	ldr	r2, [pc, #576]	; (800a758 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a518:	fa22 f303 	lsr.w	r3, r2, r3
 800a51c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800a51e:	e111      	b.n	800a744 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a520:	4b8d      	ldr	r3, [pc, #564]	; (800a758 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a522:	61bb      	str	r3, [r7, #24]
      break;
 800a524:	e10e      	b.n	800a744 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800a526:	4b8d      	ldr	r3, [pc, #564]	; (800a75c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a528:	61bb      	str	r3, [r7, #24]
      break;
 800a52a:	e10b      	b.n	800a744 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800a52c:	4b8c      	ldr	r3, [pc, #560]	; (800a760 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a52e:	61bb      	str	r3, [r7, #24]
      break;
 800a530:	e108      	b.n	800a744 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a532:	4b88      	ldr	r3, [pc, #544]	; (800a754 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a536:	f003 0303 	and.w	r3, r3, #3
 800a53a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a53c:	4b85      	ldr	r3, [pc, #532]	; (800a754 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a53e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a540:	091b      	lsrs	r3, r3, #4
 800a542:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a546:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a548:	4b82      	ldr	r3, [pc, #520]	; (800a754 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a54a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a54c:	f003 0301 	and.w	r3, r3, #1
 800a550:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a552:	4b80      	ldr	r3, [pc, #512]	; (800a754 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a556:	08db      	lsrs	r3, r3, #3
 800a558:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a55c:	68fa      	ldr	r2, [r7, #12]
 800a55e:	fb02 f303 	mul.w	r3, r2, r3
 800a562:	ee07 3a90 	vmov	s15, r3
 800a566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a56a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800a56e:	693b      	ldr	r3, [r7, #16]
 800a570:	2b00      	cmp	r3, #0
 800a572:	f000 80e1 	beq.w	800a738 <HAL_RCC_GetSysClockFreq+0x2b8>
 800a576:	697b      	ldr	r3, [r7, #20]
 800a578:	2b02      	cmp	r3, #2
 800a57a:	f000 8083 	beq.w	800a684 <HAL_RCC_GetSysClockFreq+0x204>
 800a57e:	697b      	ldr	r3, [r7, #20]
 800a580:	2b02      	cmp	r3, #2
 800a582:	f200 80a1 	bhi.w	800a6c8 <HAL_RCC_GetSysClockFreq+0x248>
 800a586:	697b      	ldr	r3, [r7, #20]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d003      	beq.n	800a594 <HAL_RCC_GetSysClockFreq+0x114>
 800a58c:	697b      	ldr	r3, [r7, #20]
 800a58e:	2b01      	cmp	r3, #1
 800a590:	d056      	beq.n	800a640 <HAL_RCC_GetSysClockFreq+0x1c0>
 800a592:	e099      	b.n	800a6c8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a594:	4b6f      	ldr	r3, [pc, #444]	; (800a754 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	f003 0320 	and.w	r3, r3, #32
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d02d      	beq.n	800a5fc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a5a0:	4b6c      	ldr	r3, [pc, #432]	; (800a754 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	08db      	lsrs	r3, r3, #3
 800a5a6:	f003 0303 	and.w	r3, r3, #3
 800a5aa:	4a6b      	ldr	r2, [pc, #428]	; (800a758 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a5ac:	fa22 f303 	lsr.w	r3, r2, r3
 800a5b0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	ee07 3a90 	vmov	s15, r3
 800a5b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5bc:	693b      	ldr	r3, [r7, #16]
 800a5be:	ee07 3a90 	vmov	s15, r3
 800a5c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5ca:	4b62      	ldr	r3, [pc, #392]	; (800a754 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a5cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5d2:	ee07 3a90 	vmov	s15, r3
 800a5d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5da:	ed97 6a02 	vldr	s12, [r7, #8]
 800a5de:	eddf 5a61 	vldr	s11, [pc, #388]	; 800a764 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a5e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a5ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5f6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800a5fa:	e087      	b.n	800a70c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a5fc:	693b      	ldr	r3, [r7, #16]
 800a5fe:	ee07 3a90 	vmov	s15, r3
 800a602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a606:	eddf 6a58 	vldr	s13, [pc, #352]	; 800a768 <HAL_RCC_GetSysClockFreq+0x2e8>
 800a60a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a60e:	4b51      	ldr	r3, [pc, #324]	; (800a754 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a612:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a616:	ee07 3a90 	vmov	s15, r3
 800a61a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a61e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a622:	eddf 5a50 	vldr	s11, [pc, #320]	; 800a764 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a626:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a62a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a62e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a632:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a636:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a63a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a63e:	e065      	b.n	800a70c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a640:	693b      	ldr	r3, [r7, #16]
 800a642:	ee07 3a90 	vmov	s15, r3
 800a646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a64a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800a76c <HAL_RCC_GetSysClockFreq+0x2ec>
 800a64e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a652:	4b40      	ldr	r3, [pc, #256]	; (800a754 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a656:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a65a:	ee07 3a90 	vmov	s15, r3
 800a65e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a662:	ed97 6a02 	vldr	s12, [r7, #8]
 800a666:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800a764 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a66a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a66e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a672:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a676:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a67a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a67e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a682:	e043      	b.n	800a70c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a684:	693b      	ldr	r3, [r7, #16]
 800a686:	ee07 3a90 	vmov	s15, r3
 800a68a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a68e:	eddf 6a38 	vldr	s13, [pc, #224]	; 800a770 <HAL_RCC_GetSysClockFreq+0x2f0>
 800a692:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a696:	4b2f      	ldr	r3, [pc, #188]	; (800a754 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a69a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a69e:	ee07 3a90 	vmov	s15, r3
 800a6a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6a6:	ed97 6a02 	vldr	s12, [r7, #8]
 800a6aa:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800a764 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a6ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a6b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a6b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a6ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a6be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a6c6:	e021      	b.n	800a70c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a6c8:	693b      	ldr	r3, [r7, #16]
 800a6ca:	ee07 3a90 	vmov	s15, r3
 800a6ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6d2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a76c <HAL_RCC_GetSysClockFreq+0x2ec>
 800a6d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6da:	4b1e      	ldr	r3, [pc, #120]	; (800a754 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a6dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6e2:	ee07 3a90 	vmov	s15, r3
 800a6e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6ea:	ed97 6a02 	vldr	s12, [r7, #8]
 800a6ee:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800a764 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a6f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a6f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a6fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a6fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a702:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a706:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a70a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a70c:	4b11      	ldr	r3, [pc, #68]	; (800a754 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a70e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a710:	0a5b      	lsrs	r3, r3, #9
 800a712:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a716:	3301      	adds	r3, #1
 800a718:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	ee07 3a90 	vmov	s15, r3
 800a720:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a724:	edd7 6a07 	vldr	s13, [r7, #28]
 800a728:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a72c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a730:	ee17 3a90 	vmov	r3, s15
 800a734:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800a736:	e005      	b.n	800a744 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800a738:	2300      	movs	r3, #0
 800a73a:	61bb      	str	r3, [r7, #24]
      break;
 800a73c:	e002      	b.n	800a744 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800a73e:	4b07      	ldr	r3, [pc, #28]	; (800a75c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a740:	61bb      	str	r3, [r7, #24]
      break;
 800a742:	bf00      	nop
  }

  return sysclockfreq;
 800a744:	69bb      	ldr	r3, [r7, #24]
}
 800a746:	4618      	mov	r0, r3
 800a748:	3724      	adds	r7, #36	; 0x24
 800a74a:	46bd      	mov	sp, r7
 800a74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a750:	4770      	bx	lr
 800a752:	bf00      	nop
 800a754:	58024400 	.word	0x58024400
 800a758:	03d09000 	.word	0x03d09000
 800a75c:	003d0900 	.word	0x003d0900
 800a760:	017d7840 	.word	0x017d7840
 800a764:	46000000 	.word	0x46000000
 800a768:	4c742400 	.word	0x4c742400
 800a76c:	4a742400 	.word	0x4a742400
 800a770:	4bbebc20 	.word	0x4bbebc20

0800a774 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b082      	sub	sp, #8
 800a778:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a77a:	f7ff fe81 	bl	800a480 <HAL_RCC_GetSysClockFreq>
 800a77e:	4602      	mov	r2, r0
 800a780:	4b10      	ldr	r3, [pc, #64]	; (800a7c4 <HAL_RCC_GetHCLKFreq+0x50>)
 800a782:	699b      	ldr	r3, [r3, #24]
 800a784:	0a1b      	lsrs	r3, r3, #8
 800a786:	f003 030f 	and.w	r3, r3, #15
 800a78a:	490f      	ldr	r1, [pc, #60]	; (800a7c8 <HAL_RCC_GetHCLKFreq+0x54>)
 800a78c:	5ccb      	ldrb	r3, [r1, r3]
 800a78e:	f003 031f 	and.w	r3, r3, #31
 800a792:	fa22 f303 	lsr.w	r3, r2, r3
 800a796:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a798:	4b0a      	ldr	r3, [pc, #40]	; (800a7c4 <HAL_RCC_GetHCLKFreq+0x50>)
 800a79a:	699b      	ldr	r3, [r3, #24]
 800a79c:	f003 030f 	and.w	r3, r3, #15
 800a7a0:	4a09      	ldr	r2, [pc, #36]	; (800a7c8 <HAL_RCC_GetHCLKFreq+0x54>)
 800a7a2:	5cd3      	ldrb	r3, [r2, r3]
 800a7a4:	f003 031f 	and.w	r3, r3, #31
 800a7a8:	687a      	ldr	r2, [r7, #4]
 800a7aa:	fa22 f303 	lsr.w	r3, r2, r3
 800a7ae:	4a07      	ldr	r2, [pc, #28]	; (800a7cc <HAL_RCC_GetHCLKFreq+0x58>)
 800a7b0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a7b2:	4a07      	ldr	r2, [pc, #28]	; (800a7d0 <HAL_RCC_GetHCLKFreq+0x5c>)
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a7b8:	4b04      	ldr	r3, [pc, #16]	; (800a7cc <HAL_RCC_GetHCLKFreq+0x58>)
 800a7ba:	681b      	ldr	r3, [r3, #0]
}
 800a7bc:	4618      	mov	r0, r3
 800a7be:	3708      	adds	r7, #8
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	bd80      	pop	{r7, pc}
 800a7c4:	58024400 	.word	0x58024400
 800a7c8:	08016bf4 	.word	0x08016bf4
 800a7cc:	24000094 	.word	0x24000094
 800a7d0:	24000090 	.word	0x24000090

0800a7d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a7d8:	f7ff ffcc 	bl	800a774 <HAL_RCC_GetHCLKFreq>
 800a7dc:	4602      	mov	r2, r0
 800a7de:	4b06      	ldr	r3, [pc, #24]	; (800a7f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a7e0:	69db      	ldr	r3, [r3, #28]
 800a7e2:	091b      	lsrs	r3, r3, #4
 800a7e4:	f003 0307 	and.w	r3, r3, #7
 800a7e8:	4904      	ldr	r1, [pc, #16]	; (800a7fc <HAL_RCC_GetPCLK1Freq+0x28>)
 800a7ea:	5ccb      	ldrb	r3, [r1, r3]
 800a7ec:	f003 031f 	and.w	r3, r3, #31
 800a7f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	bd80      	pop	{r7, pc}
 800a7f8:	58024400 	.word	0x58024400
 800a7fc:	08016bf4 	.word	0x08016bf4

0800a800 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a800:	b580      	push	{r7, lr}
 800a802:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a804:	f7ff ffb6 	bl	800a774 <HAL_RCC_GetHCLKFreq>
 800a808:	4602      	mov	r2, r0
 800a80a:	4b06      	ldr	r3, [pc, #24]	; (800a824 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a80c:	69db      	ldr	r3, [r3, #28]
 800a80e:	0a1b      	lsrs	r3, r3, #8
 800a810:	f003 0307 	and.w	r3, r3, #7
 800a814:	4904      	ldr	r1, [pc, #16]	; (800a828 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a816:	5ccb      	ldrb	r3, [r1, r3]
 800a818:	f003 031f 	and.w	r3, r3, #31
 800a81c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a820:	4618      	mov	r0, r3
 800a822:	bd80      	pop	{r7, pc}
 800a824:	58024400 	.word	0x58024400
 800a828:	08016bf4 	.word	0x08016bf4

0800a82c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a82c:	b480      	push	{r7}
 800a82e:	b083      	sub	sp, #12
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
 800a834:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	223f      	movs	r2, #63	; 0x3f
 800a83a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a83c:	4b1a      	ldr	r3, [pc, #104]	; (800a8a8 <HAL_RCC_GetClockConfig+0x7c>)
 800a83e:	691b      	ldr	r3, [r3, #16]
 800a840:	f003 0207 	and.w	r2, r3, #7
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800a848:	4b17      	ldr	r3, [pc, #92]	; (800a8a8 <HAL_RCC_GetClockConfig+0x7c>)
 800a84a:	699b      	ldr	r3, [r3, #24]
 800a84c:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800a854:	4b14      	ldr	r3, [pc, #80]	; (800a8a8 <HAL_RCC_GetClockConfig+0x7c>)
 800a856:	699b      	ldr	r3, [r3, #24]
 800a858:	f003 020f 	and.w	r2, r3, #15
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800a860:	4b11      	ldr	r3, [pc, #68]	; (800a8a8 <HAL_RCC_GetClockConfig+0x7c>)
 800a862:	699b      	ldr	r3, [r3, #24]
 800a864:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800a86c:	4b0e      	ldr	r3, [pc, #56]	; (800a8a8 <HAL_RCC_GetClockConfig+0x7c>)
 800a86e:	69db      	ldr	r3, [r3, #28]
 800a870:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800a878:	4b0b      	ldr	r3, [pc, #44]	; (800a8a8 <HAL_RCC_GetClockConfig+0x7c>)
 800a87a:	69db      	ldr	r3, [r3, #28]
 800a87c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800a884:	4b08      	ldr	r3, [pc, #32]	; (800a8a8 <HAL_RCC_GetClockConfig+0x7c>)
 800a886:	6a1b      	ldr	r3, [r3, #32]
 800a888:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a890:	4b06      	ldr	r3, [pc, #24]	; (800a8ac <HAL_RCC_GetClockConfig+0x80>)
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	f003 020f 	and.w	r2, r3, #15
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	601a      	str	r2, [r3, #0]
}
 800a89c:	bf00      	nop
 800a89e:	370c      	adds	r7, #12
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a6:	4770      	bx	lr
 800a8a8:	58024400 	.word	0x58024400
 800a8ac:	52002000 	.word	0x52002000

0800a8b0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a8b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a8b4:	b0ca      	sub	sp, #296	; 0x128
 800a8b6:	af00      	add	r7, sp, #0
 800a8b8:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a8bc:	2300      	movs	r3, #0
 800a8be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a8c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8d0:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800a8d4:	2500      	movs	r5, #0
 800a8d6:	ea54 0305 	orrs.w	r3, r4, r5
 800a8da:	d049      	beq.n	800a970 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800a8dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a8e2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a8e6:	d02f      	beq.n	800a948 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800a8e8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a8ec:	d828      	bhi.n	800a940 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a8ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a8f2:	d01a      	beq.n	800a92a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800a8f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a8f8:	d822      	bhi.n	800a940 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d003      	beq.n	800a906 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800a8fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a902:	d007      	beq.n	800a914 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a904:	e01c      	b.n	800a940 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a906:	4bb8      	ldr	r3, [pc, #736]	; (800abe8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a90a:	4ab7      	ldr	r2, [pc, #732]	; (800abe8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a90c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a910:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a912:	e01a      	b.n	800a94a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a914:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a918:	3308      	adds	r3, #8
 800a91a:	2102      	movs	r1, #2
 800a91c:	4618      	mov	r0, r3
 800a91e:	f002 fb61 	bl	800cfe4 <RCCEx_PLL2_Config>
 800a922:	4603      	mov	r3, r0
 800a924:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a928:	e00f      	b.n	800a94a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a92a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a92e:	3328      	adds	r3, #40	; 0x28
 800a930:	2102      	movs	r1, #2
 800a932:	4618      	mov	r0, r3
 800a934:	f002 fc08 	bl	800d148 <RCCEx_PLL3_Config>
 800a938:	4603      	mov	r3, r0
 800a93a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a93e:	e004      	b.n	800a94a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a940:	2301      	movs	r3, #1
 800a942:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a946:	e000      	b.n	800a94a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800a948:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a94a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d10a      	bne.n	800a968 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a952:	4ba5      	ldr	r3, [pc, #660]	; (800abe8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a954:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a956:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a95a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a95e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a960:	4aa1      	ldr	r2, [pc, #644]	; (800abe8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a962:	430b      	orrs	r3, r1
 800a964:	6513      	str	r3, [r2, #80]	; 0x50
 800a966:	e003      	b.n	800a970 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a968:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a96c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a970:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a974:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a978:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800a97c:	f04f 0900 	mov.w	r9, #0
 800a980:	ea58 0309 	orrs.w	r3, r8, r9
 800a984:	d047      	beq.n	800aa16 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800a986:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a98a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a98c:	2b04      	cmp	r3, #4
 800a98e:	d82a      	bhi.n	800a9e6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800a990:	a201      	add	r2, pc, #4	; (adr r2, 800a998 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800a992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a996:	bf00      	nop
 800a998:	0800a9ad 	.word	0x0800a9ad
 800a99c:	0800a9bb 	.word	0x0800a9bb
 800a9a0:	0800a9d1 	.word	0x0800a9d1
 800a9a4:	0800a9ef 	.word	0x0800a9ef
 800a9a8:	0800a9ef 	.word	0x0800a9ef
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a9ac:	4b8e      	ldr	r3, [pc, #568]	; (800abe8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a9ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9b0:	4a8d      	ldr	r2, [pc, #564]	; (800abe8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a9b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a9b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a9b8:	e01a      	b.n	800a9f0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a9ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9be:	3308      	adds	r3, #8
 800a9c0:	2100      	movs	r1, #0
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	f002 fb0e 	bl	800cfe4 <RCCEx_PLL2_Config>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a9ce:	e00f      	b.n	800a9f0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a9d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9d4:	3328      	adds	r3, #40	; 0x28
 800a9d6:	2100      	movs	r1, #0
 800a9d8:	4618      	mov	r0, r3
 800a9da:	f002 fbb5 	bl	800d148 <RCCEx_PLL3_Config>
 800a9de:	4603      	mov	r3, r0
 800a9e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a9e4:	e004      	b.n	800a9f0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a9e6:	2301      	movs	r3, #1
 800a9e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a9ec:	e000      	b.n	800a9f0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800a9ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a9f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d10a      	bne.n	800aa0e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a9f8:	4b7b      	ldr	r3, [pc, #492]	; (800abe8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a9fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9fc:	f023 0107 	bic.w	r1, r3, #7
 800aa00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa06:	4a78      	ldr	r2, [pc, #480]	; (800abe8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aa08:	430b      	orrs	r3, r1
 800aa0a:	6513      	str	r3, [r2, #80]	; 0x50
 800aa0c:	e003      	b.n	800aa16 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa12:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800aa16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa1e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800aa22:	f04f 0b00 	mov.w	fp, #0
 800aa26:	ea5a 030b 	orrs.w	r3, sl, fp
 800aa2a:	d04c      	beq.n	800aac6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800aa2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa36:	d030      	beq.n	800aa9a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800aa38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa3c:	d829      	bhi.n	800aa92 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800aa3e:	2bc0      	cmp	r3, #192	; 0xc0
 800aa40:	d02d      	beq.n	800aa9e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800aa42:	2bc0      	cmp	r3, #192	; 0xc0
 800aa44:	d825      	bhi.n	800aa92 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800aa46:	2b80      	cmp	r3, #128	; 0x80
 800aa48:	d018      	beq.n	800aa7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800aa4a:	2b80      	cmp	r3, #128	; 0x80
 800aa4c:	d821      	bhi.n	800aa92 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d002      	beq.n	800aa58 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800aa52:	2b40      	cmp	r3, #64	; 0x40
 800aa54:	d007      	beq.n	800aa66 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800aa56:	e01c      	b.n	800aa92 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa58:	4b63      	ldr	r3, [pc, #396]	; (800abe8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aa5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa5c:	4a62      	ldr	r2, [pc, #392]	; (800abe8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aa5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800aa64:	e01c      	b.n	800aaa0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aa66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa6a:	3308      	adds	r3, #8
 800aa6c:	2100      	movs	r1, #0
 800aa6e:	4618      	mov	r0, r3
 800aa70:	f002 fab8 	bl	800cfe4 <RCCEx_PLL2_Config>
 800aa74:	4603      	mov	r3, r0
 800aa76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800aa7a:	e011      	b.n	800aaa0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aa7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa80:	3328      	adds	r3, #40	; 0x28
 800aa82:	2100      	movs	r1, #0
 800aa84:	4618      	mov	r0, r3
 800aa86:	f002 fb5f 	bl	800d148 <RCCEx_PLL3_Config>
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800aa90:	e006      	b.n	800aaa0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aa92:	2301      	movs	r3, #1
 800aa94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800aa98:	e002      	b.n	800aaa0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800aa9a:	bf00      	nop
 800aa9c:	e000      	b.n	800aaa0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800aa9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aaa0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d10a      	bne.n	800aabe <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800aaa8:	4b4f      	ldr	r3, [pc, #316]	; (800abe8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aaaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aaac:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800aab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aab6:	4a4c      	ldr	r2, [pc, #304]	; (800abe8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aab8:	430b      	orrs	r3, r1
 800aaba:	6513      	str	r3, [r2, #80]	; 0x50
 800aabc:	e003      	b.n	800aac6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aabe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aac2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800aac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aaca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aace:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800aad2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800aad6:	2300      	movs	r3, #0
 800aad8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800aadc:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800aae0:	460b      	mov	r3, r1
 800aae2:	4313      	orrs	r3, r2
 800aae4:	d053      	beq.n	800ab8e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800aae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aaea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800aaee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800aaf2:	d035      	beq.n	800ab60 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800aaf4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800aaf8:	d82e      	bhi.n	800ab58 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800aafa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800aafe:	d031      	beq.n	800ab64 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800ab00:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ab04:	d828      	bhi.n	800ab58 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800ab06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ab0a:	d01a      	beq.n	800ab42 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800ab0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ab10:	d822      	bhi.n	800ab58 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d003      	beq.n	800ab1e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800ab16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ab1a:	d007      	beq.n	800ab2c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800ab1c:	e01c      	b.n	800ab58 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab1e:	4b32      	ldr	r3, [pc, #200]	; (800abe8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ab20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab22:	4a31      	ldr	r2, [pc, #196]	; (800abe8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ab24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab28:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ab2a:	e01c      	b.n	800ab66 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ab2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab30:	3308      	adds	r3, #8
 800ab32:	2100      	movs	r1, #0
 800ab34:	4618      	mov	r0, r3
 800ab36:	f002 fa55 	bl	800cfe4 <RCCEx_PLL2_Config>
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ab40:	e011      	b.n	800ab66 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ab42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab46:	3328      	adds	r3, #40	; 0x28
 800ab48:	2100      	movs	r1, #0
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	f002 fafc 	bl	800d148 <RCCEx_PLL3_Config>
 800ab50:	4603      	mov	r3, r0
 800ab52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ab56:	e006      	b.n	800ab66 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ab58:	2301      	movs	r3, #1
 800ab5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ab5e:	e002      	b.n	800ab66 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800ab60:	bf00      	nop
 800ab62:	e000      	b.n	800ab66 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800ab64:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d10b      	bne.n	800ab86 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800ab6e:	4b1e      	ldr	r3, [pc, #120]	; (800abe8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ab70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab72:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800ab76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab7a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ab7e:	4a1a      	ldr	r2, [pc, #104]	; (800abe8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ab80:	430b      	orrs	r3, r1
 800ab82:	6593      	str	r3, [r2, #88]	; 0x58
 800ab84:	e003      	b.n	800ab8e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab8a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800ab8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab96:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800ab9a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800ab9e:	2300      	movs	r3, #0
 800aba0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800aba4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800aba8:	460b      	mov	r3, r1
 800abaa:	4313      	orrs	r3, r2
 800abac:	d056      	beq.n	800ac5c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800abae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abb2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800abb6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800abba:	d038      	beq.n	800ac2e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800abbc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800abc0:	d831      	bhi.n	800ac26 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800abc2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800abc6:	d034      	beq.n	800ac32 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800abc8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800abcc:	d82b      	bhi.n	800ac26 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800abce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800abd2:	d01d      	beq.n	800ac10 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800abd4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800abd8:	d825      	bhi.n	800ac26 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d006      	beq.n	800abec <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800abde:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800abe2:	d00a      	beq.n	800abfa <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800abe4:	e01f      	b.n	800ac26 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800abe6:	bf00      	nop
 800abe8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800abec:	4ba2      	ldr	r3, [pc, #648]	; (800ae78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800abee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abf0:	4aa1      	ldr	r2, [pc, #644]	; (800ae78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800abf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800abf6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800abf8:	e01c      	b.n	800ac34 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800abfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abfe:	3308      	adds	r3, #8
 800ac00:	2100      	movs	r1, #0
 800ac02:	4618      	mov	r0, r3
 800ac04:	f002 f9ee 	bl	800cfe4 <RCCEx_PLL2_Config>
 800ac08:	4603      	mov	r3, r0
 800ac0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ac0e:	e011      	b.n	800ac34 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ac10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac14:	3328      	adds	r3, #40	; 0x28
 800ac16:	2100      	movs	r1, #0
 800ac18:	4618      	mov	r0, r3
 800ac1a:	f002 fa95 	bl	800d148 <RCCEx_PLL3_Config>
 800ac1e:	4603      	mov	r3, r0
 800ac20:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ac24:	e006      	b.n	800ac34 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ac26:	2301      	movs	r3, #1
 800ac28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ac2c:	e002      	b.n	800ac34 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800ac2e:	bf00      	nop
 800ac30:	e000      	b.n	800ac34 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800ac32:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac34:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d10b      	bne.n	800ac54 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800ac3c:	4b8e      	ldr	r3, [pc, #568]	; (800ae78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ac3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac40:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800ac44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac48:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ac4c:	4a8a      	ldr	r2, [pc, #552]	; (800ae78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ac4e:	430b      	orrs	r3, r1
 800ac50:	6593      	str	r3, [r2, #88]	; 0x58
 800ac52:	e003      	b.n	800ac5c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ac58:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800ac5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac64:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800ac68:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ac72:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800ac76:	460b      	mov	r3, r1
 800ac78:	4313      	orrs	r3, r2
 800ac7a:	d03a      	beq.n	800acf2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800ac7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac82:	2b30      	cmp	r3, #48	; 0x30
 800ac84:	d01f      	beq.n	800acc6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800ac86:	2b30      	cmp	r3, #48	; 0x30
 800ac88:	d819      	bhi.n	800acbe <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800ac8a:	2b20      	cmp	r3, #32
 800ac8c:	d00c      	beq.n	800aca8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800ac8e:	2b20      	cmp	r3, #32
 800ac90:	d815      	bhi.n	800acbe <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d019      	beq.n	800acca <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800ac96:	2b10      	cmp	r3, #16
 800ac98:	d111      	bne.n	800acbe <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac9a:	4b77      	ldr	r3, [pc, #476]	; (800ae78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ac9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac9e:	4a76      	ldr	r2, [pc, #472]	; (800ae78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800aca0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aca4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800aca6:	e011      	b.n	800accc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800aca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800acac:	3308      	adds	r3, #8
 800acae:	2102      	movs	r1, #2
 800acb0:	4618      	mov	r0, r3
 800acb2:	f002 f997 	bl	800cfe4 <RCCEx_PLL2_Config>
 800acb6:	4603      	mov	r3, r0
 800acb8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800acbc:	e006      	b.n	800accc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800acbe:	2301      	movs	r3, #1
 800acc0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800acc4:	e002      	b.n	800accc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800acc6:	bf00      	nop
 800acc8:	e000      	b.n	800accc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800acca:	bf00      	nop
    }

    if (ret == HAL_OK)
 800accc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d10a      	bne.n	800acea <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800acd4:	4b68      	ldr	r3, [pc, #416]	; (800ae78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800acd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800acd8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800acdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ace0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ace2:	4a65      	ldr	r2, [pc, #404]	; (800ae78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ace4:	430b      	orrs	r3, r1
 800ace6:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ace8:	e003      	b.n	800acf2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800acea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800acee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800acf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800acf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acfa:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800acfe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ad02:	2300      	movs	r3, #0
 800ad04:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ad08:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800ad0c:	460b      	mov	r3, r1
 800ad0e:	4313      	orrs	r3, r2
 800ad10:	d051      	beq.n	800adb6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800ad12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ad1c:	d035      	beq.n	800ad8a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800ad1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ad22:	d82e      	bhi.n	800ad82 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800ad24:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ad28:	d031      	beq.n	800ad8e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800ad2a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ad2e:	d828      	bhi.n	800ad82 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800ad30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ad34:	d01a      	beq.n	800ad6c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800ad36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ad3a:	d822      	bhi.n	800ad82 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d003      	beq.n	800ad48 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800ad40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad44:	d007      	beq.n	800ad56 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800ad46:	e01c      	b.n	800ad82 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad48:	4b4b      	ldr	r3, [pc, #300]	; (800ae78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ad4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad4c:	4a4a      	ldr	r2, [pc, #296]	; (800ae78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ad4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ad54:	e01c      	b.n	800ad90 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ad56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad5a:	3308      	adds	r3, #8
 800ad5c:	2100      	movs	r1, #0
 800ad5e:	4618      	mov	r0, r3
 800ad60:	f002 f940 	bl	800cfe4 <RCCEx_PLL2_Config>
 800ad64:	4603      	mov	r3, r0
 800ad66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ad6a:	e011      	b.n	800ad90 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ad6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad70:	3328      	adds	r3, #40	; 0x28
 800ad72:	2100      	movs	r1, #0
 800ad74:	4618      	mov	r0, r3
 800ad76:	f002 f9e7 	bl	800d148 <RCCEx_PLL3_Config>
 800ad7a:	4603      	mov	r3, r0
 800ad7c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ad80:	e006      	b.n	800ad90 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ad82:	2301      	movs	r3, #1
 800ad84:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ad88:	e002      	b.n	800ad90 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800ad8a:	bf00      	nop
 800ad8c:	e000      	b.n	800ad90 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800ad8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad90:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d10a      	bne.n	800adae <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800ad98:	4b37      	ldr	r3, [pc, #220]	; (800ae78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ad9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad9c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800ada0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ada4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ada6:	4a34      	ldr	r2, [pc, #208]	; (800ae78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ada8:	430b      	orrs	r3, r1
 800adaa:	6513      	str	r3, [r2, #80]	; 0x50
 800adac:	e003      	b.n	800adb6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800adae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800adb2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800adb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800adba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adbe:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800adc2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800adc6:	2300      	movs	r3, #0
 800adc8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800adcc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800add0:	460b      	mov	r3, r1
 800add2:	4313      	orrs	r3, r2
 800add4:	d056      	beq.n	800ae84 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800add6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800adda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800addc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ade0:	d033      	beq.n	800ae4a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800ade2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ade6:	d82c      	bhi.n	800ae42 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800ade8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800adec:	d02f      	beq.n	800ae4e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800adee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800adf2:	d826      	bhi.n	800ae42 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800adf4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800adf8:	d02b      	beq.n	800ae52 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800adfa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800adfe:	d820      	bhi.n	800ae42 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800ae00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ae04:	d012      	beq.n	800ae2c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800ae06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ae0a:	d81a      	bhi.n	800ae42 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d022      	beq.n	800ae56 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800ae10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae14:	d115      	bne.n	800ae42 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ae16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae1a:	3308      	adds	r3, #8
 800ae1c:	2101      	movs	r1, #1
 800ae1e:	4618      	mov	r0, r3
 800ae20:	f002 f8e0 	bl	800cfe4 <RCCEx_PLL2_Config>
 800ae24:	4603      	mov	r3, r0
 800ae26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ae2a:	e015      	b.n	800ae58 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ae2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae30:	3328      	adds	r3, #40	; 0x28
 800ae32:	2101      	movs	r1, #1
 800ae34:	4618      	mov	r0, r3
 800ae36:	f002 f987 	bl	800d148 <RCCEx_PLL3_Config>
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ae40:	e00a      	b.n	800ae58 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ae42:	2301      	movs	r3, #1
 800ae44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ae48:	e006      	b.n	800ae58 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800ae4a:	bf00      	nop
 800ae4c:	e004      	b.n	800ae58 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800ae4e:	bf00      	nop
 800ae50:	e002      	b.n	800ae58 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800ae52:	bf00      	nop
 800ae54:	e000      	b.n	800ae58 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800ae56:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae58:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d10d      	bne.n	800ae7c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800ae60:	4b05      	ldr	r3, [pc, #20]	; (800ae78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ae62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae64:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800ae68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae6e:	4a02      	ldr	r2, [pc, #8]	; (800ae78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ae70:	430b      	orrs	r3, r1
 800ae72:	6513      	str	r3, [r2, #80]	; 0x50
 800ae74:	e006      	b.n	800ae84 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800ae76:	bf00      	nop
 800ae78:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae7c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae80:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800ae84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae8c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800ae90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ae94:	2300      	movs	r3, #0
 800ae96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ae9a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800ae9e:	460b      	mov	r3, r1
 800aea0:	4313      	orrs	r3, r2
 800aea2:	d055      	beq.n	800af50 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800aea4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aea8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800aeac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aeb0:	d033      	beq.n	800af1a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800aeb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aeb6:	d82c      	bhi.n	800af12 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800aeb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aebc:	d02f      	beq.n	800af1e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800aebe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aec2:	d826      	bhi.n	800af12 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800aec4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800aec8:	d02b      	beq.n	800af22 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800aeca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800aece:	d820      	bhi.n	800af12 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800aed0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aed4:	d012      	beq.n	800aefc <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800aed6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aeda:	d81a      	bhi.n	800af12 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d022      	beq.n	800af26 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800aee0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aee4:	d115      	bne.n	800af12 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800aee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aeea:	3308      	adds	r3, #8
 800aeec:	2101      	movs	r1, #1
 800aeee:	4618      	mov	r0, r3
 800aef0:	f002 f878 	bl	800cfe4 <RCCEx_PLL2_Config>
 800aef4:	4603      	mov	r3, r0
 800aef6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800aefa:	e015      	b.n	800af28 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800aefc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af00:	3328      	adds	r3, #40	; 0x28
 800af02:	2101      	movs	r1, #1
 800af04:	4618      	mov	r0, r3
 800af06:	f002 f91f 	bl	800d148 <RCCEx_PLL3_Config>
 800af0a:	4603      	mov	r3, r0
 800af0c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800af10:	e00a      	b.n	800af28 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800af12:	2301      	movs	r3, #1
 800af14:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800af18:	e006      	b.n	800af28 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800af1a:	bf00      	nop
 800af1c:	e004      	b.n	800af28 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800af1e:	bf00      	nop
 800af20:	e002      	b.n	800af28 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800af22:	bf00      	nop
 800af24:	e000      	b.n	800af28 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800af26:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af28:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d10b      	bne.n	800af48 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800af30:	4ba3      	ldr	r3, [pc, #652]	; (800b1c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800af32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af34:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800af38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af3c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800af40:	4a9f      	ldr	r2, [pc, #636]	; (800b1c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800af42:	430b      	orrs	r3, r1
 800af44:	6593      	str	r3, [r2, #88]	; 0x58
 800af46:	e003      	b.n	800af50 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af48:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af4c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800af50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af58:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800af5c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800af60:	2300      	movs	r3, #0
 800af62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800af66:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800af6a:	460b      	mov	r3, r1
 800af6c:	4313      	orrs	r3, r2
 800af6e:	d037      	beq.n	800afe0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800af70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af7a:	d00e      	beq.n	800af9a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800af7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af80:	d816      	bhi.n	800afb0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800af82:	2b00      	cmp	r3, #0
 800af84:	d018      	beq.n	800afb8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800af86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800af8a:	d111      	bne.n	800afb0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af8c:	4b8c      	ldr	r3, [pc, #560]	; (800b1c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800af8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af90:	4a8b      	ldr	r2, [pc, #556]	; (800b1c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800af92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800af98:	e00f      	b.n	800afba <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800af9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af9e:	3308      	adds	r3, #8
 800afa0:	2101      	movs	r1, #1
 800afa2:	4618      	mov	r0, r3
 800afa4:	f002 f81e 	bl	800cfe4 <RCCEx_PLL2_Config>
 800afa8:	4603      	mov	r3, r0
 800afaa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800afae:	e004      	b.n	800afba <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800afb0:	2301      	movs	r3, #1
 800afb2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800afb6:	e000      	b.n	800afba <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800afb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800afba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d10a      	bne.n	800afd8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800afc2:	4b7f      	ldr	r3, [pc, #508]	; (800b1c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800afc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800afc6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800afca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afd0:	4a7b      	ldr	r2, [pc, #492]	; (800b1c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800afd2:	430b      	orrs	r3, r1
 800afd4:	6513      	str	r3, [r2, #80]	; 0x50
 800afd6:	e003      	b.n	800afe0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afd8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800afdc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800afe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afe8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800afec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800aff0:	2300      	movs	r3, #0
 800aff2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800aff6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800affa:	460b      	mov	r3, r1
 800affc:	4313      	orrs	r3, r2
 800affe:	d039      	beq.n	800b074 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800b000:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b004:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b006:	2b03      	cmp	r3, #3
 800b008:	d81c      	bhi.n	800b044 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800b00a:	a201      	add	r2, pc, #4	; (adr r2, 800b010 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800b00c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b010:	0800b04d 	.word	0x0800b04d
 800b014:	0800b021 	.word	0x0800b021
 800b018:	0800b02f 	.word	0x0800b02f
 800b01c:	0800b04d 	.word	0x0800b04d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b020:	4b67      	ldr	r3, [pc, #412]	; (800b1c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b024:	4a66      	ldr	r2, [pc, #408]	; (800b1c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b026:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b02a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b02c:	e00f      	b.n	800b04e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b02e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b032:	3308      	adds	r3, #8
 800b034:	2102      	movs	r1, #2
 800b036:	4618      	mov	r0, r3
 800b038:	f001 ffd4 	bl	800cfe4 <RCCEx_PLL2_Config>
 800b03c:	4603      	mov	r3, r0
 800b03e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b042:	e004      	b.n	800b04e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b044:	2301      	movs	r3, #1
 800b046:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b04a:	e000      	b.n	800b04e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800b04c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b04e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b052:	2b00      	cmp	r3, #0
 800b054:	d10a      	bne.n	800b06c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b056:	4b5a      	ldr	r3, [pc, #360]	; (800b1c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b05a:	f023 0103 	bic.w	r1, r3, #3
 800b05e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b062:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b064:	4a56      	ldr	r2, [pc, #344]	; (800b1c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b066:	430b      	orrs	r3, r1
 800b068:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b06a:	e003      	b.n	800b074 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b06c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b070:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b074:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b07c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800b080:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b084:	2300      	movs	r3, #0
 800b086:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b08a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800b08e:	460b      	mov	r3, r1
 800b090:	4313      	orrs	r3, r2
 800b092:	f000 809f 	beq.w	800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b096:	4b4b      	ldr	r3, [pc, #300]	; (800b1c4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	4a4a      	ldr	r2, [pc, #296]	; (800b1c4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b09c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b0a0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b0a2:	f7f8 fc51 	bl	8003948 <HAL_GetTick>
 800b0a6:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b0aa:	e00b      	b.n	800b0c4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b0ac:	f7f8 fc4c 	bl	8003948 <HAL_GetTick>
 800b0b0:	4602      	mov	r2, r0
 800b0b2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b0b6:	1ad3      	subs	r3, r2, r3
 800b0b8:	2b64      	cmp	r3, #100	; 0x64
 800b0ba:	d903      	bls.n	800b0c4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800b0bc:	2303      	movs	r3, #3
 800b0be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b0c2:	e005      	b.n	800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b0c4:	4b3f      	ldr	r3, [pc, #252]	; (800b1c4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d0ed      	beq.n	800b0ac <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800b0d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d179      	bne.n	800b1cc <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b0d8:	4b39      	ldr	r3, [pc, #228]	; (800b1c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b0da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b0dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0e0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b0e4:	4053      	eors	r3, r2
 800b0e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d015      	beq.n	800b11a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b0ee:	4b34      	ldr	r3, [pc, #208]	; (800b1c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b0f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b0f6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b0fa:	4b31      	ldr	r3, [pc, #196]	; (800b1c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b0fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0fe:	4a30      	ldr	r2, [pc, #192]	; (800b1c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b100:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b104:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b106:	4b2e      	ldr	r3, [pc, #184]	; (800b1c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b10a:	4a2d      	ldr	r2, [pc, #180]	; (800b1c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b10c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b110:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b112:	4a2b      	ldr	r2, [pc, #172]	; (800b1c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b114:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b118:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b11a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b11e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b122:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b126:	d118      	bne.n	800b15a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b128:	f7f8 fc0e 	bl	8003948 <HAL_GetTick>
 800b12c:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b130:	e00d      	b.n	800b14e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b132:	f7f8 fc09 	bl	8003948 <HAL_GetTick>
 800b136:	4602      	mov	r2, r0
 800b138:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b13c:	1ad2      	subs	r2, r2, r3
 800b13e:	f241 3388 	movw	r3, #5000	; 0x1388
 800b142:	429a      	cmp	r2, r3
 800b144:	d903      	bls.n	800b14e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800b146:	2303      	movs	r3, #3
 800b148:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800b14c:	e005      	b.n	800b15a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b14e:	4b1c      	ldr	r3, [pc, #112]	; (800b1c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b152:	f003 0302 	and.w	r3, r3, #2
 800b156:	2b00      	cmp	r3, #0
 800b158:	d0eb      	beq.n	800b132 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800b15a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d129      	bne.n	800b1b6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b162:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b166:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b16a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b16e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b172:	d10e      	bne.n	800b192 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800b174:	4b12      	ldr	r3, [pc, #72]	; (800b1c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b176:	691b      	ldr	r3, [r3, #16]
 800b178:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800b17c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b180:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b184:	091a      	lsrs	r2, r3, #4
 800b186:	4b10      	ldr	r3, [pc, #64]	; (800b1c8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800b188:	4013      	ands	r3, r2
 800b18a:	4a0d      	ldr	r2, [pc, #52]	; (800b1c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b18c:	430b      	orrs	r3, r1
 800b18e:	6113      	str	r3, [r2, #16]
 800b190:	e005      	b.n	800b19e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800b192:	4b0b      	ldr	r3, [pc, #44]	; (800b1c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b194:	691b      	ldr	r3, [r3, #16]
 800b196:	4a0a      	ldr	r2, [pc, #40]	; (800b1c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b198:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b19c:	6113      	str	r3, [r2, #16]
 800b19e:	4b08      	ldr	r3, [pc, #32]	; (800b1c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b1a0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b1a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b1aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b1ae:	4a04      	ldr	r2, [pc, #16]	; (800b1c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b1b0:	430b      	orrs	r3, r1
 800b1b2:	6713      	str	r3, [r2, #112]	; 0x70
 800b1b4:	e00e      	b.n	800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b1b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b1ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800b1be:	e009      	b.n	800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800b1c0:	58024400 	.word	0x58024400
 800b1c4:	58024800 	.word	0x58024800
 800b1c8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b1d0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b1d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1dc:	f002 0301 	and.w	r3, r2, #1
 800b1e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b1ea:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b1ee:	460b      	mov	r3, r1
 800b1f0:	4313      	orrs	r3, r2
 800b1f2:	f000 8089 	beq.w	800b308 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b1f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b1fc:	2b28      	cmp	r3, #40	; 0x28
 800b1fe:	d86b      	bhi.n	800b2d8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800b200:	a201      	add	r2, pc, #4	; (adr r2, 800b208 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b206:	bf00      	nop
 800b208:	0800b2e1 	.word	0x0800b2e1
 800b20c:	0800b2d9 	.word	0x0800b2d9
 800b210:	0800b2d9 	.word	0x0800b2d9
 800b214:	0800b2d9 	.word	0x0800b2d9
 800b218:	0800b2d9 	.word	0x0800b2d9
 800b21c:	0800b2d9 	.word	0x0800b2d9
 800b220:	0800b2d9 	.word	0x0800b2d9
 800b224:	0800b2d9 	.word	0x0800b2d9
 800b228:	0800b2ad 	.word	0x0800b2ad
 800b22c:	0800b2d9 	.word	0x0800b2d9
 800b230:	0800b2d9 	.word	0x0800b2d9
 800b234:	0800b2d9 	.word	0x0800b2d9
 800b238:	0800b2d9 	.word	0x0800b2d9
 800b23c:	0800b2d9 	.word	0x0800b2d9
 800b240:	0800b2d9 	.word	0x0800b2d9
 800b244:	0800b2d9 	.word	0x0800b2d9
 800b248:	0800b2c3 	.word	0x0800b2c3
 800b24c:	0800b2d9 	.word	0x0800b2d9
 800b250:	0800b2d9 	.word	0x0800b2d9
 800b254:	0800b2d9 	.word	0x0800b2d9
 800b258:	0800b2d9 	.word	0x0800b2d9
 800b25c:	0800b2d9 	.word	0x0800b2d9
 800b260:	0800b2d9 	.word	0x0800b2d9
 800b264:	0800b2d9 	.word	0x0800b2d9
 800b268:	0800b2e1 	.word	0x0800b2e1
 800b26c:	0800b2d9 	.word	0x0800b2d9
 800b270:	0800b2d9 	.word	0x0800b2d9
 800b274:	0800b2d9 	.word	0x0800b2d9
 800b278:	0800b2d9 	.word	0x0800b2d9
 800b27c:	0800b2d9 	.word	0x0800b2d9
 800b280:	0800b2d9 	.word	0x0800b2d9
 800b284:	0800b2d9 	.word	0x0800b2d9
 800b288:	0800b2e1 	.word	0x0800b2e1
 800b28c:	0800b2d9 	.word	0x0800b2d9
 800b290:	0800b2d9 	.word	0x0800b2d9
 800b294:	0800b2d9 	.word	0x0800b2d9
 800b298:	0800b2d9 	.word	0x0800b2d9
 800b29c:	0800b2d9 	.word	0x0800b2d9
 800b2a0:	0800b2d9 	.word	0x0800b2d9
 800b2a4:	0800b2d9 	.word	0x0800b2d9
 800b2a8:	0800b2e1 	.word	0x0800b2e1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b2ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2b0:	3308      	adds	r3, #8
 800b2b2:	2101      	movs	r1, #1
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	f001 fe95 	bl	800cfe4 <RCCEx_PLL2_Config>
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b2c0:	e00f      	b.n	800b2e2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b2c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2c6:	3328      	adds	r3, #40	; 0x28
 800b2c8:	2101      	movs	r1, #1
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	f001 ff3c 	bl	800d148 <RCCEx_PLL3_Config>
 800b2d0:	4603      	mov	r3, r0
 800b2d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b2d6:	e004      	b.n	800b2e2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b2d8:	2301      	movs	r3, #1
 800b2da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b2de:	e000      	b.n	800b2e2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800b2e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b2e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d10a      	bne.n	800b300 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b2ea:	4bbf      	ldr	r3, [pc, #764]	; (800b5e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b2ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2ee:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800b2f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b2f8:	4abb      	ldr	r2, [pc, #748]	; (800b5e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b2fa:	430b      	orrs	r3, r1
 800b2fc:	6553      	str	r3, [r2, #84]	; 0x54
 800b2fe:	e003      	b.n	800b308 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b300:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b304:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b308:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b30c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b310:	f002 0302 	and.w	r3, r2, #2
 800b314:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b318:	2300      	movs	r3, #0
 800b31a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b31e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800b322:	460b      	mov	r3, r1
 800b324:	4313      	orrs	r3, r2
 800b326:	d041      	beq.n	800b3ac <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b328:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b32c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b32e:	2b05      	cmp	r3, #5
 800b330:	d824      	bhi.n	800b37c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800b332:	a201      	add	r2, pc, #4	; (adr r2, 800b338 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800b334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b338:	0800b385 	.word	0x0800b385
 800b33c:	0800b351 	.word	0x0800b351
 800b340:	0800b367 	.word	0x0800b367
 800b344:	0800b385 	.word	0x0800b385
 800b348:	0800b385 	.word	0x0800b385
 800b34c:	0800b385 	.word	0x0800b385
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b350:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b354:	3308      	adds	r3, #8
 800b356:	2101      	movs	r1, #1
 800b358:	4618      	mov	r0, r3
 800b35a:	f001 fe43 	bl	800cfe4 <RCCEx_PLL2_Config>
 800b35e:	4603      	mov	r3, r0
 800b360:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b364:	e00f      	b.n	800b386 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b366:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b36a:	3328      	adds	r3, #40	; 0x28
 800b36c:	2101      	movs	r1, #1
 800b36e:	4618      	mov	r0, r3
 800b370:	f001 feea 	bl	800d148 <RCCEx_PLL3_Config>
 800b374:	4603      	mov	r3, r0
 800b376:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b37a:	e004      	b.n	800b386 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b37c:	2301      	movs	r3, #1
 800b37e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b382:	e000      	b.n	800b386 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800b384:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b386:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d10a      	bne.n	800b3a4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b38e:	4b96      	ldr	r3, [pc, #600]	; (800b5e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b392:	f023 0107 	bic.w	r1, r3, #7
 800b396:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b39a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b39c:	4a92      	ldr	r2, [pc, #584]	; (800b5e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b39e:	430b      	orrs	r3, r1
 800b3a0:	6553      	str	r3, [r2, #84]	; 0x54
 800b3a2:	e003      	b.n	800b3ac <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b3a8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b3ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3b4:	f002 0304 	and.w	r3, r2, #4
 800b3b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b3bc:	2300      	movs	r3, #0
 800b3be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b3c2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800b3c6:	460b      	mov	r3, r1
 800b3c8:	4313      	orrs	r3, r2
 800b3ca:	d044      	beq.n	800b456 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b3cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b3d4:	2b05      	cmp	r3, #5
 800b3d6:	d825      	bhi.n	800b424 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800b3d8:	a201      	add	r2, pc, #4	; (adr r2, 800b3e0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800b3da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3de:	bf00      	nop
 800b3e0:	0800b42d 	.word	0x0800b42d
 800b3e4:	0800b3f9 	.word	0x0800b3f9
 800b3e8:	0800b40f 	.word	0x0800b40f
 800b3ec:	0800b42d 	.word	0x0800b42d
 800b3f0:	0800b42d 	.word	0x0800b42d
 800b3f4:	0800b42d 	.word	0x0800b42d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b3f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3fc:	3308      	adds	r3, #8
 800b3fe:	2101      	movs	r1, #1
 800b400:	4618      	mov	r0, r3
 800b402:	f001 fdef 	bl	800cfe4 <RCCEx_PLL2_Config>
 800b406:	4603      	mov	r3, r0
 800b408:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b40c:	e00f      	b.n	800b42e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b40e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b412:	3328      	adds	r3, #40	; 0x28
 800b414:	2101      	movs	r1, #1
 800b416:	4618      	mov	r0, r3
 800b418:	f001 fe96 	bl	800d148 <RCCEx_PLL3_Config>
 800b41c:	4603      	mov	r3, r0
 800b41e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b422:	e004      	b.n	800b42e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b424:	2301      	movs	r3, #1
 800b426:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b42a:	e000      	b.n	800b42e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800b42c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b42e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b432:	2b00      	cmp	r3, #0
 800b434:	d10b      	bne.n	800b44e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b436:	4b6c      	ldr	r3, [pc, #432]	; (800b5e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b43a:	f023 0107 	bic.w	r1, r3, #7
 800b43e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b442:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b446:	4a68      	ldr	r2, [pc, #416]	; (800b5e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b448:	430b      	orrs	r3, r1
 800b44a:	6593      	str	r3, [r2, #88]	; 0x58
 800b44c:	e003      	b.n	800b456 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b44e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b452:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b456:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b45a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b45e:	f002 0320 	and.w	r3, r2, #32
 800b462:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b466:	2300      	movs	r3, #0
 800b468:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b46c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b470:	460b      	mov	r3, r1
 800b472:	4313      	orrs	r3, r2
 800b474:	d055      	beq.n	800b522 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b476:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b47a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b47e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b482:	d033      	beq.n	800b4ec <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800b484:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b488:	d82c      	bhi.n	800b4e4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b48a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b48e:	d02f      	beq.n	800b4f0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800b490:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b494:	d826      	bhi.n	800b4e4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b496:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b49a:	d02b      	beq.n	800b4f4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800b49c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b4a0:	d820      	bhi.n	800b4e4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b4a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b4a6:	d012      	beq.n	800b4ce <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800b4a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b4ac:	d81a      	bhi.n	800b4e4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d022      	beq.n	800b4f8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800b4b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b4b6:	d115      	bne.n	800b4e4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b4b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4bc:	3308      	adds	r3, #8
 800b4be:	2100      	movs	r1, #0
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	f001 fd8f 	bl	800cfe4 <RCCEx_PLL2_Config>
 800b4c6:	4603      	mov	r3, r0
 800b4c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b4cc:	e015      	b.n	800b4fa <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b4ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4d2:	3328      	adds	r3, #40	; 0x28
 800b4d4:	2102      	movs	r1, #2
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	f001 fe36 	bl	800d148 <RCCEx_PLL3_Config>
 800b4dc:	4603      	mov	r3, r0
 800b4de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b4e2:	e00a      	b.n	800b4fa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b4e4:	2301      	movs	r3, #1
 800b4e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b4ea:	e006      	b.n	800b4fa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b4ec:	bf00      	nop
 800b4ee:	e004      	b.n	800b4fa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b4f0:	bf00      	nop
 800b4f2:	e002      	b.n	800b4fa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b4f4:	bf00      	nop
 800b4f6:	e000      	b.n	800b4fa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b4f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b4fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d10b      	bne.n	800b51a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b502:	4b39      	ldr	r3, [pc, #228]	; (800b5e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b506:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b50a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b50e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b512:	4a35      	ldr	r2, [pc, #212]	; (800b5e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b514:	430b      	orrs	r3, r1
 800b516:	6553      	str	r3, [r2, #84]	; 0x54
 800b518:	e003      	b.n	800b522 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b51a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b51e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b522:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b52a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800b52e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b532:	2300      	movs	r3, #0
 800b534:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b538:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800b53c:	460b      	mov	r3, r1
 800b53e:	4313      	orrs	r3, r2
 800b540:	d058      	beq.n	800b5f4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b542:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b546:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b54a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b54e:	d033      	beq.n	800b5b8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800b550:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b554:	d82c      	bhi.n	800b5b0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b556:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b55a:	d02f      	beq.n	800b5bc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800b55c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b560:	d826      	bhi.n	800b5b0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b562:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b566:	d02b      	beq.n	800b5c0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800b568:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b56c:	d820      	bhi.n	800b5b0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b56e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b572:	d012      	beq.n	800b59a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800b574:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b578:	d81a      	bhi.n	800b5b0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d022      	beq.n	800b5c4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800b57e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b582:	d115      	bne.n	800b5b0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b584:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b588:	3308      	adds	r3, #8
 800b58a:	2100      	movs	r1, #0
 800b58c:	4618      	mov	r0, r3
 800b58e:	f001 fd29 	bl	800cfe4 <RCCEx_PLL2_Config>
 800b592:	4603      	mov	r3, r0
 800b594:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b598:	e015      	b.n	800b5c6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b59a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b59e:	3328      	adds	r3, #40	; 0x28
 800b5a0:	2102      	movs	r1, #2
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	f001 fdd0 	bl	800d148 <RCCEx_PLL3_Config>
 800b5a8:	4603      	mov	r3, r0
 800b5aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b5ae:	e00a      	b.n	800b5c6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b5b0:	2301      	movs	r3, #1
 800b5b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b5b6:	e006      	b.n	800b5c6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b5b8:	bf00      	nop
 800b5ba:	e004      	b.n	800b5c6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b5bc:	bf00      	nop
 800b5be:	e002      	b.n	800b5c6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b5c0:	bf00      	nop
 800b5c2:	e000      	b.n	800b5c6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b5c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b5c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d10e      	bne.n	800b5ec <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b5ce:	4b06      	ldr	r3, [pc, #24]	; (800b5e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b5d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5d2:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800b5d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b5de:	4a02      	ldr	r2, [pc, #8]	; (800b5e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b5e0:	430b      	orrs	r3, r1
 800b5e2:	6593      	str	r3, [r2, #88]	; 0x58
 800b5e4:	e006      	b.n	800b5f4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800b5e6:	bf00      	nop
 800b5e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b5f0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b5f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5fc:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800b600:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b604:	2300      	movs	r3, #0
 800b606:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b60a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800b60e:	460b      	mov	r3, r1
 800b610:	4313      	orrs	r3, r2
 800b612:	d055      	beq.n	800b6c0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b614:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b618:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b61c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b620:	d033      	beq.n	800b68a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800b622:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b626:	d82c      	bhi.n	800b682 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b628:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b62c:	d02f      	beq.n	800b68e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800b62e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b632:	d826      	bhi.n	800b682 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b634:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b638:	d02b      	beq.n	800b692 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800b63a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b63e:	d820      	bhi.n	800b682 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b640:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b644:	d012      	beq.n	800b66c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800b646:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b64a:	d81a      	bhi.n	800b682 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d022      	beq.n	800b696 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800b650:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b654:	d115      	bne.n	800b682 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b656:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b65a:	3308      	adds	r3, #8
 800b65c:	2100      	movs	r1, #0
 800b65e:	4618      	mov	r0, r3
 800b660:	f001 fcc0 	bl	800cfe4 <RCCEx_PLL2_Config>
 800b664:	4603      	mov	r3, r0
 800b666:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b66a:	e015      	b.n	800b698 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b66c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b670:	3328      	adds	r3, #40	; 0x28
 800b672:	2102      	movs	r1, #2
 800b674:	4618      	mov	r0, r3
 800b676:	f001 fd67 	bl	800d148 <RCCEx_PLL3_Config>
 800b67a:	4603      	mov	r3, r0
 800b67c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b680:	e00a      	b.n	800b698 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b682:	2301      	movs	r3, #1
 800b684:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b688:	e006      	b.n	800b698 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b68a:	bf00      	nop
 800b68c:	e004      	b.n	800b698 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b68e:	bf00      	nop
 800b690:	e002      	b.n	800b698 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b692:	bf00      	nop
 800b694:	e000      	b.n	800b698 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b696:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b698:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d10b      	bne.n	800b6b8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b6a0:	4ba1      	ldr	r3, [pc, #644]	; (800b928 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b6a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6a4:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800b6a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b6b0:	4a9d      	ldr	r2, [pc, #628]	; (800b928 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b6b2:	430b      	orrs	r3, r1
 800b6b4:	6593      	str	r3, [r2, #88]	; 0x58
 800b6b6:	e003      	b.n	800b6c0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b6bc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b6c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6c8:	f002 0308 	and.w	r3, r2, #8
 800b6cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b6d6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800b6da:	460b      	mov	r3, r1
 800b6dc:	4313      	orrs	r3, r2
 800b6de:	d01e      	beq.n	800b71e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800b6e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b6e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b6ec:	d10c      	bne.n	800b708 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b6ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6f2:	3328      	adds	r3, #40	; 0x28
 800b6f4:	2102      	movs	r1, #2
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	f001 fd26 	bl	800d148 <RCCEx_PLL3_Config>
 800b6fc:	4603      	mov	r3, r0
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d002      	beq.n	800b708 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800b702:	2301      	movs	r3, #1
 800b704:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b708:	4b87      	ldr	r3, [pc, #540]	; (800b928 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b70a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b70c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b710:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b714:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b718:	4a83      	ldr	r2, [pc, #524]	; (800b928 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b71a:	430b      	orrs	r3, r1
 800b71c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b71e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b722:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b726:	f002 0310 	and.w	r3, r2, #16
 800b72a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b72e:	2300      	movs	r3, #0
 800b730:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b734:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800b738:	460b      	mov	r3, r1
 800b73a:	4313      	orrs	r3, r2
 800b73c:	d01e      	beq.n	800b77c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b73e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b742:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b746:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b74a:	d10c      	bne.n	800b766 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b74c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b750:	3328      	adds	r3, #40	; 0x28
 800b752:	2102      	movs	r1, #2
 800b754:	4618      	mov	r0, r3
 800b756:	f001 fcf7 	bl	800d148 <RCCEx_PLL3_Config>
 800b75a:	4603      	mov	r3, r0
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d002      	beq.n	800b766 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800b760:	2301      	movs	r3, #1
 800b762:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b766:	4b70      	ldr	r3, [pc, #448]	; (800b928 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b76a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b76e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b772:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b776:	4a6c      	ldr	r2, [pc, #432]	; (800b928 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b778:	430b      	orrs	r3, r1
 800b77a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b77c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b780:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b784:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800b788:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b78c:	2300      	movs	r3, #0
 800b78e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b792:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800b796:	460b      	mov	r3, r1
 800b798:	4313      	orrs	r3, r2
 800b79a:	d03e      	beq.n	800b81a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800b79c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b7a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b7a8:	d022      	beq.n	800b7f0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800b7aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b7ae:	d81b      	bhi.n	800b7e8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d003      	beq.n	800b7bc <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800b7b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b7b8:	d00b      	beq.n	800b7d2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800b7ba:	e015      	b.n	800b7e8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b7bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7c0:	3308      	adds	r3, #8
 800b7c2:	2100      	movs	r1, #0
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	f001 fc0d 	bl	800cfe4 <RCCEx_PLL2_Config>
 800b7ca:	4603      	mov	r3, r0
 800b7cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b7d0:	e00f      	b.n	800b7f2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b7d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7d6:	3328      	adds	r3, #40	; 0x28
 800b7d8:	2102      	movs	r1, #2
 800b7da:	4618      	mov	r0, r3
 800b7dc:	f001 fcb4 	bl	800d148 <RCCEx_PLL3_Config>
 800b7e0:	4603      	mov	r3, r0
 800b7e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b7e6:	e004      	b.n	800b7f2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b7e8:	2301      	movs	r3, #1
 800b7ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b7ee:	e000      	b.n	800b7f2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800b7f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b7f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d10b      	bne.n	800b812 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b7fa:	4b4b      	ldr	r3, [pc, #300]	; (800b928 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b7fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7fe:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800b802:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b806:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b80a:	4a47      	ldr	r2, [pc, #284]	; (800b928 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b80c:	430b      	orrs	r3, r1
 800b80e:	6593      	str	r3, [r2, #88]	; 0x58
 800b810:	e003      	b.n	800b81a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b812:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b816:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b81a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b81e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b822:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800b826:	67bb      	str	r3, [r7, #120]	; 0x78
 800b828:	2300      	movs	r3, #0
 800b82a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b82c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800b830:	460b      	mov	r3, r1
 800b832:	4313      	orrs	r3, r2
 800b834:	d03b      	beq.n	800b8ae <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800b836:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b83a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b83e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b842:	d01f      	beq.n	800b884 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800b844:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b848:	d818      	bhi.n	800b87c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800b84a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b84e:	d003      	beq.n	800b858 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800b850:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b854:	d007      	beq.n	800b866 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800b856:	e011      	b.n	800b87c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b858:	4b33      	ldr	r3, [pc, #204]	; (800b928 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b85a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b85c:	4a32      	ldr	r2, [pc, #200]	; (800b928 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b85e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b862:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800b864:	e00f      	b.n	800b886 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b866:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b86a:	3328      	adds	r3, #40	; 0x28
 800b86c:	2101      	movs	r1, #1
 800b86e:	4618      	mov	r0, r3
 800b870:	f001 fc6a 	bl	800d148 <RCCEx_PLL3_Config>
 800b874:	4603      	mov	r3, r0
 800b876:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800b87a:	e004      	b.n	800b886 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b87c:	2301      	movs	r3, #1
 800b87e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b882:	e000      	b.n	800b886 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800b884:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b886:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d10b      	bne.n	800b8a6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b88e:	4b26      	ldr	r3, [pc, #152]	; (800b928 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b892:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b896:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b89a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b89e:	4a22      	ldr	r2, [pc, #136]	; (800b928 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b8a0:	430b      	orrs	r3, r1
 800b8a2:	6553      	str	r3, [r2, #84]	; 0x54
 800b8a4:	e003      	b.n	800b8ae <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b8aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b8ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8b6:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800b8ba:	673b      	str	r3, [r7, #112]	; 0x70
 800b8bc:	2300      	movs	r3, #0
 800b8be:	677b      	str	r3, [r7, #116]	; 0x74
 800b8c0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800b8c4:	460b      	mov	r3, r1
 800b8c6:	4313      	orrs	r3, r2
 800b8c8:	d034      	beq.n	800b934 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800b8ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d003      	beq.n	800b8dc <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800b8d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b8d8:	d007      	beq.n	800b8ea <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800b8da:	e011      	b.n	800b900 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b8dc:	4b12      	ldr	r3, [pc, #72]	; (800b928 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b8de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8e0:	4a11      	ldr	r2, [pc, #68]	; (800b928 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b8e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b8e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b8e8:	e00e      	b.n	800b908 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b8ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8ee:	3308      	adds	r3, #8
 800b8f0:	2102      	movs	r1, #2
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	f001 fb76 	bl	800cfe4 <RCCEx_PLL2_Config>
 800b8f8:	4603      	mov	r3, r0
 800b8fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b8fe:	e003      	b.n	800b908 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800b900:	2301      	movs	r3, #1
 800b902:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b906:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b908:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d10d      	bne.n	800b92c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b910:	4b05      	ldr	r3, [pc, #20]	; (800b928 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b914:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b918:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b91c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b91e:	4a02      	ldr	r2, [pc, #8]	; (800b928 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b920:	430b      	orrs	r3, r1
 800b922:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b924:	e006      	b.n	800b934 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800b926:	bf00      	nop
 800b928:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b92c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b930:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b934:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b93c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800b940:	66bb      	str	r3, [r7, #104]	; 0x68
 800b942:	2300      	movs	r3, #0
 800b944:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b946:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800b94a:	460b      	mov	r3, r1
 800b94c:	4313      	orrs	r3, r2
 800b94e:	d00c      	beq.n	800b96a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b950:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b954:	3328      	adds	r3, #40	; 0x28
 800b956:	2102      	movs	r1, #2
 800b958:	4618      	mov	r0, r3
 800b95a:	f001 fbf5 	bl	800d148 <RCCEx_PLL3_Config>
 800b95e:	4603      	mov	r3, r0
 800b960:	2b00      	cmp	r3, #0
 800b962:	d002      	beq.n	800b96a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800b964:	2301      	movs	r3, #1
 800b966:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b96a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b96e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b972:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800b976:	663b      	str	r3, [r7, #96]	; 0x60
 800b978:	2300      	movs	r3, #0
 800b97a:	667b      	str	r3, [r7, #100]	; 0x64
 800b97c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800b980:	460b      	mov	r3, r1
 800b982:	4313      	orrs	r3, r2
 800b984:	d038      	beq.n	800b9f8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800b986:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b98a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b98e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b992:	d018      	beq.n	800b9c6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800b994:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b998:	d811      	bhi.n	800b9be <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800b99a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b99e:	d014      	beq.n	800b9ca <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800b9a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b9a4:	d80b      	bhi.n	800b9be <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d011      	beq.n	800b9ce <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800b9aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b9ae:	d106      	bne.n	800b9be <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b9b0:	4bc3      	ldr	r3, [pc, #780]	; (800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b9b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9b4:	4ac2      	ldr	r2, [pc, #776]	; (800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b9b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b9ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800b9bc:	e008      	b.n	800b9d0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b9be:	2301      	movs	r3, #1
 800b9c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b9c4:	e004      	b.n	800b9d0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800b9c6:	bf00      	nop
 800b9c8:	e002      	b.n	800b9d0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800b9ca:	bf00      	nop
 800b9cc:	e000      	b.n	800b9d0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800b9ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b9d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d10b      	bne.n	800b9f0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b9d8:	4bb9      	ldr	r3, [pc, #740]	; (800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b9da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9dc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b9e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b9e8:	4ab5      	ldr	r2, [pc, #724]	; (800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b9ea:	430b      	orrs	r3, r1
 800b9ec:	6553      	str	r3, [r2, #84]	; 0x54
 800b9ee:	e003      	b.n	800b9f8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b9f4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b9f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba00:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800ba04:	65bb      	str	r3, [r7, #88]	; 0x58
 800ba06:	2300      	movs	r3, #0
 800ba08:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ba0a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800ba0e:	460b      	mov	r3, r1
 800ba10:	4313      	orrs	r3, r2
 800ba12:	d009      	beq.n	800ba28 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ba14:	4baa      	ldr	r3, [pc, #680]	; (800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ba16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba18:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ba1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ba22:	4aa7      	ldr	r2, [pc, #668]	; (800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ba24:	430b      	orrs	r3, r1
 800ba26:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800ba28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba30:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800ba34:	653b      	str	r3, [r7, #80]	; 0x50
 800ba36:	2300      	movs	r3, #0
 800ba38:	657b      	str	r3, [r7, #84]	; 0x54
 800ba3a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800ba3e:	460b      	mov	r3, r1
 800ba40:	4313      	orrs	r3, r2
 800ba42:	d00a      	beq.n	800ba5a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800ba44:	4b9e      	ldr	r3, [pc, #632]	; (800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ba46:	691b      	ldr	r3, [r3, #16]
 800ba48:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800ba4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba50:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800ba54:	4a9a      	ldr	r2, [pc, #616]	; (800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ba56:	430b      	orrs	r3, r1
 800ba58:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ba5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba62:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800ba66:	64bb      	str	r3, [r7, #72]	; 0x48
 800ba68:	2300      	movs	r3, #0
 800ba6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ba6c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800ba70:	460b      	mov	r3, r1
 800ba72:	4313      	orrs	r3, r2
 800ba74:	d009      	beq.n	800ba8a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ba76:	4b92      	ldr	r3, [pc, #584]	; (800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ba78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba7a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800ba7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba84:	4a8e      	ldr	r2, [pc, #568]	; (800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ba86:	430b      	orrs	r3, r1
 800ba88:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800ba8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba92:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800ba96:	643b      	str	r3, [r7, #64]	; 0x40
 800ba98:	2300      	movs	r3, #0
 800ba9a:	647b      	str	r3, [r7, #68]	; 0x44
 800ba9c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800baa0:	460b      	mov	r3, r1
 800baa2:	4313      	orrs	r3, r2
 800baa4:	d00e      	beq.n	800bac4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800baa6:	4b86      	ldr	r3, [pc, #536]	; (800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800baa8:	691b      	ldr	r3, [r3, #16]
 800baaa:	4a85      	ldr	r2, [pc, #532]	; (800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800baac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bab0:	6113      	str	r3, [r2, #16]
 800bab2:	4b83      	ldr	r3, [pc, #524]	; (800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bab4:	6919      	ldr	r1, [r3, #16]
 800bab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800baba:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800babe:	4a80      	ldr	r2, [pc, #512]	; (800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bac0:	430b      	orrs	r3, r1
 800bac2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800bac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bacc:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800bad0:	63bb      	str	r3, [r7, #56]	; 0x38
 800bad2:	2300      	movs	r3, #0
 800bad4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bad6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800bada:	460b      	mov	r3, r1
 800badc:	4313      	orrs	r3, r2
 800bade:	d009      	beq.n	800baf4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800bae0:	4b77      	ldr	r3, [pc, #476]	; (800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bae4:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800bae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800baec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800baee:	4a74      	ldr	r2, [pc, #464]	; (800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800baf0:	430b      	orrs	r3, r1
 800baf2:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800baf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800baf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bafc:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800bb00:	633b      	str	r3, [r7, #48]	; 0x30
 800bb02:	2300      	movs	r3, #0
 800bb04:	637b      	str	r3, [r7, #52]	; 0x34
 800bb06:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800bb0a:	460b      	mov	r3, r1
 800bb0c:	4313      	orrs	r3, r2
 800bb0e:	d00a      	beq.n	800bb26 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800bb10:	4b6b      	ldr	r3, [pc, #428]	; (800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bb12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb14:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800bb18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bb20:	4a67      	ldr	r2, [pc, #412]	; (800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bb22:	430b      	orrs	r3, r1
 800bb24:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800bb26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb2e:	2100      	movs	r1, #0
 800bb30:	62b9      	str	r1, [r7, #40]	; 0x28
 800bb32:	f003 0301 	and.w	r3, r3, #1
 800bb36:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bb38:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800bb3c:	460b      	mov	r3, r1
 800bb3e:	4313      	orrs	r3, r2
 800bb40:	d011      	beq.n	800bb66 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bb42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb46:	3308      	adds	r3, #8
 800bb48:	2100      	movs	r1, #0
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	f001 fa4a 	bl	800cfe4 <RCCEx_PLL2_Config>
 800bb50:	4603      	mov	r3, r0
 800bb52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800bb56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d003      	beq.n	800bb66 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb62:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800bb66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb6e:	2100      	movs	r1, #0
 800bb70:	6239      	str	r1, [r7, #32]
 800bb72:	f003 0302 	and.w	r3, r3, #2
 800bb76:	627b      	str	r3, [r7, #36]	; 0x24
 800bb78:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800bb7c:	460b      	mov	r3, r1
 800bb7e:	4313      	orrs	r3, r2
 800bb80:	d011      	beq.n	800bba6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bb82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb86:	3308      	adds	r3, #8
 800bb88:	2101      	movs	r1, #1
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	f001 fa2a 	bl	800cfe4 <RCCEx_PLL2_Config>
 800bb90:	4603      	mov	r3, r0
 800bb92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800bb96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d003      	beq.n	800bba6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bba2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800bba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbae:	2100      	movs	r1, #0
 800bbb0:	61b9      	str	r1, [r7, #24]
 800bbb2:	f003 0304 	and.w	r3, r3, #4
 800bbb6:	61fb      	str	r3, [r7, #28]
 800bbb8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800bbbc:	460b      	mov	r3, r1
 800bbbe:	4313      	orrs	r3, r2
 800bbc0:	d011      	beq.n	800bbe6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bbc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbc6:	3308      	adds	r3, #8
 800bbc8:	2102      	movs	r1, #2
 800bbca:	4618      	mov	r0, r3
 800bbcc:	f001 fa0a 	bl	800cfe4 <RCCEx_PLL2_Config>
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800bbd6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d003      	beq.n	800bbe6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbde:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bbe2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800bbe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbee:	2100      	movs	r1, #0
 800bbf0:	6139      	str	r1, [r7, #16]
 800bbf2:	f003 0308 	and.w	r3, r3, #8
 800bbf6:	617b      	str	r3, [r7, #20]
 800bbf8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800bbfc:	460b      	mov	r3, r1
 800bbfe:	4313      	orrs	r3, r2
 800bc00:	d011      	beq.n	800bc26 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bc02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc06:	3328      	adds	r3, #40	; 0x28
 800bc08:	2100      	movs	r1, #0
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	f001 fa9c 	bl	800d148 <RCCEx_PLL3_Config>
 800bc10:	4603      	mov	r3, r0
 800bc12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800bc16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d003      	beq.n	800bc26 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc22:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800bc26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc2e:	2100      	movs	r1, #0
 800bc30:	60b9      	str	r1, [r7, #8]
 800bc32:	f003 0310 	and.w	r3, r3, #16
 800bc36:	60fb      	str	r3, [r7, #12]
 800bc38:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800bc3c:	460b      	mov	r3, r1
 800bc3e:	4313      	orrs	r3, r2
 800bc40:	d011      	beq.n	800bc66 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bc42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc46:	3328      	adds	r3, #40	; 0x28
 800bc48:	2101      	movs	r1, #1
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	f001 fa7c 	bl	800d148 <RCCEx_PLL3_Config>
 800bc50:	4603      	mov	r3, r0
 800bc52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800bc56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d003      	beq.n	800bc66 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc62:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800bc66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc6e:	2100      	movs	r1, #0
 800bc70:	6039      	str	r1, [r7, #0]
 800bc72:	f003 0320 	and.w	r3, r3, #32
 800bc76:	607b      	str	r3, [r7, #4]
 800bc78:	e9d7 1200 	ldrd	r1, r2, [r7]
 800bc7c:	460b      	mov	r3, r1
 800bc7e:	4313      	orrs	r3, r2
 800bc80:	d011      	beq.n	800bca6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bc82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc86:	3328      	adds	r3, #40	; 0x28
 800bc88:	2102      	movs	r1, #2
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	f001 fa5c 	bl	800d148 <RCCEx_PLL3_Config>
 800bc90:	4603      	mov	r3, r0
 800bc92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800bc96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d003      	beq.n	800bca6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bca2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800bca6:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d101      	bne.n	800bcb2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800bcae:	2300      	movs	r3, #0
 800bcb0:	e000      	b.n	800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800bcb2:	2301      	movs	r3, #1
}
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bcc0:	58024400 	.word	0x58024400

0800bcc4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b090      	sub	sp, #64	; 0x40
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800bcce:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bcd2:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800bcd6:	430b      	orrs	r3, r1
 800bcd8:	f040 8094 	bne.w	800be04 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800bcdc:	4b9e      	ldr	r3, [pc, #632]	; (800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bcde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bce0:	f003 0307 	and.w	r3, r3, #7
 800bce4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bce8:	2b04      	cmp	r3, #4
 800bcea:	f200 8087 	bhi.w	800bdfc <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800bcee:	a201      	add	r2, pc, #4	; (adr r2, 800bcf4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800bcf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcf4:	0800bd09 	.word	0x0800bd09
 800bcf8:	0800bd31 	.word	0x0800bd31
 800bcfc:	0800bd59 	.word	0x0800bd59
 800bd00:	0800bdf5 	.word	0x0800bdf5
 800bd04:	0800bd81 	.word	0x0800bd81
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bd08:	4b93      	ldr	r3, [pc, #588]	; (800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bd10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bd14:	d108      	bne.n	800bd28 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bd16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	f001 f810 	bl	800cd40 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bd20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd22:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd24:	f000 bd45 	b.w	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bd28:	2300      	movs	r3, #0
 800bd2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd2c:	f000 bd41 	b.w	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bd30:	4b89      	ldr	r3, [pc, #548]	; (800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bd38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bd3c:	d108      	bne.n	800bd50 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bd3e:	f107 0318 	add.w	r3, r7, #24
 800bd42:	4618      	mov	r0, r3
 800bd44:	f000 fd54 	bl	800c7f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bd48:	69bb      	ldr	r3, [r7, #24]
 800bd4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd4c:	f000 bd31 	b.w	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bd50:	2300      	movs	r3, #0
 800bd52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd54:	f000 bd2d 	b.w	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bd58:	4b7f      	ldr	r3, [pc, #508]	; (800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bd60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bd64:	d108      	bne.n	800bd78 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bd66:	f107 030c 	add.w	r3, r7, #12
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	f000 fe94 	bl	800ca98 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd74:	f000 bd1d 	b.w	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bd78:	2300      	movs	r3, #0
 800bd7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd7c:	f000 bd19 	b.w	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bd80:	4b75      	ldr	r3, [pc, #468]	; (800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bd82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd84:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bd88:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bd8a:	4b73      	ldr	r3, [pc, #460]	; (800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	f003 0304 	and.w	r3, r3, #4
 800bd92:	2b04      	cmp	r3, #4
 800bd94:	d10c      	bne.n	800bdb0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800bd96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d109      	bne.n	800bdb0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bd9c:	4b6e      	ldr	r3, [pc, #440]	; (800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	08db      	lsrs	r3, r3, #3
 800bda2:	f003 0303 	and.w	r3, r3, #3
 800bda6:	4a6d      	ldr	r2, [pc, #436]	; (800bf5c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bda8:	fa22 f303 	lsr.w	r3, r2, r3
 800bdac:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bdae:	e01f      	b.n	800bdf0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bdb0:	4b69      	ldr	r3, [pc, #420]	; (800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bdb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bdbc:	d106      	bne.n	800bdcc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800bdbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdc0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bdc4:	d102      	bne.n	800bdcc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bdc6:	4b66      	ldr	r3, [pc, #408]	; (800bf60 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800bdc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bdca:	e011      	b.n	800bdf0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bdcc:	4b62      	ldr	r3, [pc, #392]	; (800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bdd4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bdd8:	d106      	bne.n	800bde8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800bdda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bddc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bde0:	d102      	bne.n	800bde8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bde2:	4b60      	ldr	r3, [pc, #384]	; (800bf64 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800bde4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bde6:	e003      	b.n	800bdf0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bde8:	2300      	movs	r3, #0
 800bdea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bdec:	f000 bce1 	b.w	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bdf0:	f000 bcdf 	b.w	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bdf4:	4b5c      	ldr	r3, [pc, #368]	; (800bf68 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800bdf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bdf8:	f000 bcdb 	b.w	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be00:	f000 bcd7 	b.w	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800be04:	e9d7 2300 	ldrd	r2, r3, [r7]
 800be08:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800be0c:	430b      	orrs	r3, r1
 800be0e:	f040 80ad 	bne.w	800bf6c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800be12:	4b51      	ldr	r3, [pc, #324]	; (800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800be14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be16:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800be1a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800be1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be22:	d056      	beq.n	800bed2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800be24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be2a:	f200 8090 	bhi.w	800bf4e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800be2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be30:	2bc0      	cmp	r3, #192	; 0xc0
 800be32:	f000 8088 	beq.w	800bf46 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800be36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be38:	2bc0      	cmp	r3, #192	; 0xc0
 800be3a:	f200 8088 	bhi.w	800bf4e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800be3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be40:	2b80      	cmp	r3, #128	; 0x80
 800be42:	d032      	beq.n	800beaa <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800be44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be46:	2b80      	cmp	r3, #128	; 0x80
 800be48:	f200 8081 	bhi.w	800bf4e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800be4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d003      	beq.n	800be5a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800be52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be54:	2b40      	cmp	r3, #64	; 0x40
 800be56:	d014      	beq.n	800be82 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800be58:	e079      	b.n	800bf4e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800be5a:	4b3f      	ldr	r3, [pc, #252]	; (800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800be62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800be66:	d108      	bne.n	800be7a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800be68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800be6c:	4618      	mov	r0, r3
 800be6e:	f000 ff67 	bl	800cd40 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800be72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be74:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800be76:	f000 bc9c 	b.w	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800be7a:	2300      	movs	r3, #0
 800be7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be7e:	f000 bc98 	b.w	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800be82:	4b35      	ldr	r3, [pc, #212]	; (800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800be8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800be8e:	d108      	bne.n	800bea2 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800be90:	f107 0318 	add.w	r3, r7, #24
 800be94:	4618      	mov	r0, r3
 800be96:	f000 fcab 	bl	800c7f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800be9a:	69bb      	ldr	r3, [r7, #24]
 800be9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800be9e:	f000 bc88 	b.w	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bea2:	2300      	movs	r3, #0
 800bea4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bea6:	f000 bc84 	b.w	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800beaa:	4b2b      	ldr	r3, [pc, #172]	; (800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800beb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800beb6:	d108      	bne.n	800beca <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800beb8:	f107 030c 	add.w	r3, r7, #12
 800bebc:	4618      	mov	r0, r3
 800bebe:	f000 fdeb 	bl	800ca98 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bec6:	f000 bc74 	b.w	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800beca:	2300      	movs	r3, #0
 800becc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bece:	f000 bc70 	b.w	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bed2:	4b21      	ldr	r3, [pc, #132]	; (800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bed6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800beda:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bedc:	4b1e      	ldr	r3, [pc, #120]	; (800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	f003 0304 	and.w	r3, r3, #4
 800bee4:	2b04      	cmp	r3, #4
 800bee6:	d10c      	bne.n	800bf02 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800bee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800beea:	2b00      	cmp	r3, #0
 800beec:	d109      	bne.n	800bf02 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800beee:	4b1a      	ldr	r3, [pc, #104]	; (800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	08db      	lsrs	r3, r3, #3
 800bef4:	f003 0303 	and.w	r3, r3, #3
 800bef8:	4a18      	ldr	r2, [pc, #96]	; (800bf5c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800befa:	fa22 f303 	lsr.w	r3, r2, r3
 800befe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf00:	e01f      	b.n	800bf42 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bf02:	4b15      	ldr	r3, [pc, #84]	; (800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf0e:	d106      	bne.n	800bf1e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800bf10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bf16:	d102      	bne.n	800bf1e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bf18:	4b11      	ldr	r3, [pc, #68]	; (800bf60 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800bf1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf1c:	e011      	b.n	800bf42 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bf1e:	4b0e      	ldr	r3, [pc, #56]	; (800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bf26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bf2a:	d106      	bne.n	800bf3a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800bf2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf32:	d102      	bne.n	800bf3a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bf34:	4b0b      	ldr	r3, [pc, #44]	; (800bf64 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800bf36:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf38:	e003      	b.n	800bf42 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bf3e:	f000 bc38 	b.w	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bf42:	f000 bc36 	b.w	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bf46:	4b08      	ldr	r3, [pc, #32]	; (800bf68 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800bf48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf4a:	f000 bc32 	b.w	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800bf4e:	2300      	movs	r3, #0
 800bf50:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf52:	f000 bc2e 	b.w	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bf56:	bf00      	nop
 800bf58:	58024400 	.word	0x58024400
 800bf5c:	03d09000 	.word	0x03d09000
 800bf60:	003d0900 	.word	0x003d0900
 800bf64:	017d7840 	.word	0x017d7840
 800bf68:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800bf6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf70:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800bf74:	430b      	orrs	r3, r1
 800bf76:	f040 809c 	bne.w	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800bf7a:	4b9e      	ldr	r3, [pc, #632]	; (800c1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bf7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf7e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800bf82:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bf84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf86:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bf8a:	d054      	beq.n	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800bf8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf8e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bf92:	f200 808b 	bhi.w	800c0ac <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800bf96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf98:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bf9c:	f000 8083 	beq.w	800c0a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800bfa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfa2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bfa6:	f200 8081 	bhi.w	800c0ac <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800bfaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bfb0:	d02f      	beq.n	800c012 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800bfb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfb4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bfb8:	d878      	bhi.n	800c0ac <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800bfba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d004      	beq.n	800bfca <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800bfc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfc2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bfc6:	d012      	beq.n	800bfee <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800bfc8:	e070      	b.n	800c0ac <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bfca:	4b8a      	ldr	r3, [pc, #552]	; (800c1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bfd2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bfd6:	d107      	bne.n	800bfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bfd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bfdc:	4618      	mov	r0, r3
 800bfde:	f000 feaf 	bl	800cd40 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bfe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfe4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bfe6:	e3e4      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bfe8:	2300      	movs	r3, #0
 800bfea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bfec:	e3e1      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bfee:	4b81      	ldr	r3, [pc, #516]	; (800c1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bff6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bffa:	d107      	bne.n	800c00c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bffc:	f107 0318 	add.w	r3, r7, #24
 800c000:	4618      	mov	r0, r3
 800c002:	f000 fbf5 	bl	800c7f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c006:	69bb      	ldr	r3, [r7, #24]
 800c008:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c00a:	e3d2      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c00c:	2300      	movs	r3, #0
 800c00e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c010:	e3cf      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c012:	4b78      	ldr	r3, [pc, #480]	; (800c1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c01a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c01e:	d107      	bne.n	800c030 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c020:	f107 030c 	add.w	r3, r7, #12
 800c024:	4618      	mov	r0, r3
 800c026:	f000 fd37 	bl	800ca98 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c02e:	e3c0      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c030:	2300      	movs	r3, #0
 800c032:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c034:	e3bd      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c036:	4b6f      	ldr	r3, [pc, #444]	; (800c1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c03a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c03e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c040:	4b6c      	ldr	r3, [pc, #432]	; (800c1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	f003 0304 	and.w	r3, r3, #4
 800c048:	2b04      	cmp	r3, #4
 800c04a:	d10c      	bne.n	800c066 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800c04c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d109      	bne.n	800c066 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c052:	4b68      	ldr	r3, [pc, #416]	; (800c1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	08db      	lsrs	r3, r3, #3
 800c058:	f003 0303 	and.w	r3, r3, #3
 800c05c:	4a66      	ldr	r2, [pc, #408]	; (800c1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c05e:	fa22 f303 	lsr.w	r3, r2, r3
 800c062:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c064:	e01e      	b.n	800c0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c066:	4b63      	ldr	r3, [pc, #396]	; (800c1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c06e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c072:	d106      	bne.n	800c082 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800c074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c076:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c07a:	d102      	bne.n	800c082 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c07c:	4b5f      	ldr	r3, [pc, #380]	; (800c1fc <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c07e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c080:	e010      	b.n	800c0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c082:	4b5c      	ldr	r3, [pc, #368]	; (800c1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c08a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c08e:	d106      	bne.n	800c09e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800c090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c092:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c096:	d102      	bne.n	800c09e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c098:	4b59      	ldr	r3, [pc, #356]	; (800c200 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c09a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c09c:	e002      	b.n	800c0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c09e:	2300      	movs	r3, #0
 800c0a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c0a2:	e386      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c0a4:	e385      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c0a6:	4b57      	ldr	r3, [pc, #348]	; (800c204 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c0a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0aa:	e382      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0b0:	e37f      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800c0b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c0b6:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800c0ba:	430b      	orrs	r3, r1
 800c0bc:	f040 80a7 	bne.w	800c20e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800c0c0:	4b4c      	ldr	r3, [pc, #304]	; (800c1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c0c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0c4:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800c0c8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c0ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c0d0:	d055      	beq.n	800c17e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800c0d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c0d8:	f200 8096 	bhi.w	800c208 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c0dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0de:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c0e2:	f000 8084 	beq.w	800c1ee <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800c0e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0e8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c0ec:	f200 808c 	bhi.w	800c208 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c0f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c0f6:	d030      	beq.n	800c15a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800c0f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c0fe:	f200 8083 	bhi.w	800c208 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c104:	2b00      	cmp	r3, #0
 800c106:	d004      	beq.n	800c112 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800c108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c10a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c10e:	d012      	beq.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800c110:	e07a      	b.n	800c208 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c112:	4b38      	ldr	r3, [pc, #224]	; (800c1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c11a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c11e:	d107      	bne.n	800c130 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c120:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c124:	4618      	mov	r0, r3
 800c126:	f000 fe0b 	bl	800cd40 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c12a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c12c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c12e:	e340      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c130:	2300      	movs	r3, #0
 800c132:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c134:	e33d      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c136:	4b2f      	ldr	r3, [pc, #188]	; (800c1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c13e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c142:	d107      	bne.n	800c154 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c144:	f107 0318 	add.w	r3, r7, #24
 800c148:	4618      	mov	r0, r3
 800c14a:	f000 fb51 	bl	800c7f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c14e:	69bb      	ldr	r3, [r7, #24]
 800c150:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c152:	e32e      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c154:	2300      	movs	r3, #0
 800c156:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c158:	e32b      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c15a:	4b26      	ldr	r3, [pc, #152]	; (800c1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c162:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c166:	d107      	bne.n	800c178 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c168:	f107 030c 	add.w	r3, r7, #12
 800c16c:	4618      	mov	r0, r3
 800c16e:	f000 fc93 	bl	800ca98 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c176:	e31c      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c178:	2300      	movs	r3, #0
 800c17a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c17c:	e319      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c17e:	4b1d      	ldr	r3, [pc, #116]	; (800c1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c182:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c186:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c188:	4b1a      	ldr	r3, [pc, #104]	; (800c1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	f003 0304 	and.w	r3, r3, #4
 800c190:	2b04      	cmp	r3, #4
 800c192:	d10c      	bne.n	800c1ae <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800c194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c196:	2b00      	cmp	r3, #0
 800c198:	d109      	bne.n	800c1ae <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c19a:	4b16      	ldr	r3, [pc, #88]	; (800c1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	08db      	lsrs	r3, r3, #3
 800c1a0:	f003 0303 	and.w	r3, r3, #3
 800c1a4:	4a14      	ldr	r2, [pc, #80]	; (800c1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c1a6:	fa22 f303 	lsr.w	r3, r2, r3
 800c1aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c1ac:	e01e      	b.n	800c1ec <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c1ae:	4b11      	ldr	r3, [pc, #68]	; (800c1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c1b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c1ba:	d106      	bne.n	800c1ca <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800c1bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c1c2:	d102      	bne.n	800c1ca <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c1c4:	4b0d      	ldr	r3, [pc, #52]	; (800c1fc <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c1c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c1c8:	e010      	b.n	800c1ec <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c1ca:	4b0a      	ldr	r3, [pc, #40]	; (800c1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c1d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c1d6:	d106      	bne.n	800c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800c1d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c1de:	d102      	bne.n	800c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c1e0:	4b07      	ldr	r3, [pc, #28]	; (800c200 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c1e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c1e4:	e002      	b.n	800c1ec <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c1ea:	e2e2      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c1ec:	e2e1      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c1ee:	4b05      	ldr	r3, [pc, #20]	; (800c204 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c1f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1f2:	e2de      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c1f4:	58024400 	.word	0x58024400
 800c1f8:	03d09000 	.word	0x03d09000
 800c1fc:	003d0900 	.word	0x003d0900
 800c200:	017d7840 	.word	0x017d7840
 800c204:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800c208:	2300      	movs	r3, #0
 800c20a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c20c:	e2d1      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800c20e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c212:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800c216:	430b      	orrs	r3, r1
 800c218:	f040 809c 	bne.w	800c354 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800c21c:	4b93      	ldr	r3, [pc, #588]	; (800c46c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c21e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c220:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800c224:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c228:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c22c:	d054      	beq.n	800c2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800c22e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c230:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c234:	f200 808b 	bhi.w	800c34e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c23a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c23e:	f000 8083 	beq.w	800c348 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800c242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c244:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c248:	f200 8081 	bhi.w	800c34e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c24c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c24e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c252:	d02f      	beq.n	800c2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800c254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c256:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c25a:	d878      	bhi.n	800c34e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c25c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d004      	beq.n	800c26c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800c262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c264:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c268:	d012      	beq.n	800c290 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800c26a:	e070      	b.n	800c34e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c26c:	4b7f      	ldr	r3, [pc, #508]	; (800c46c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c274:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c278:	d107      	bne.n	800c28a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c27a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c27e:	4618      	mov	r0, r3
 800c280:	f000 fd5e 	bl	800cd40 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c286:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c288:	e293      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c28a:	2300      	movs	r3, #0
 800c28c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c28e:	e290      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c290:	4b76      	ldr	r3, [pc, #472]	; (800c46c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c298:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c29c:	d107      	bne.n	800c2ae <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c29e:	f107 0318 	add.w	r3, r7, #24
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	f000 faa4 	bl	800c7f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c2a8:	69bb      	ldr	r3, [r7, #24]
 800c2aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2ac:	e281      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2b2:	e27e      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c2b4:	4b6d      	ldr	r3, [pc, #436]	; (800c46c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c2bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c2c0:	d107      	bne.n	800c2d2 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c2c2:	f107 030c 	add.w	r3, r7, #12
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	f000 fbe6 	bl	800ca98 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2d0:	e26f      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2d6:	e26c      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c2d8:	4b64      	ldr	r3, [pc, #400]	; (800c46c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c2da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c2dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c2e0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c2e2:	4b62      	ldr	r3, [pc, #392]	; (800c46c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	f003 0304 	and.w	r3, r3, #4
 800c2ea:	2b04      	cmp	r3, #4
 800c2ec:	d10c      	bne.n	800c308 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800c2ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d109      	bne.n	800c308 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c2f4:	4b5d      	ldr	r3, [pc, #372]	; (800c46c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	08db      	lsrs	r3, r3, #3
 800c2fa:	f003 0303 	and.w	r3, r3, #3
 800c2fe:	4a5c      	ldr	r2, [pc, #368]	; (800c470 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800c300:	fa22 f303 	lsr.w	r3, r2, r3
 800c304:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c306:	e01e      	b.n	800c346 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c308:	4b58      	ldr	r3, [pc, #352]	; (800c46c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c310:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c314:	d106      	bne.n	800c324 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800c316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c318:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c31c:	d102      	bne.n	800c324 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c31e:	4b55      	ldr	r3, [pc, #340]	; (800c474 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c320:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c322:	e010      	b.n	800c346 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c324:	4b51      	ldr	r3, [pc, #324]	; (800c46c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c32c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c330:	d106      	bne.n	800c340 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800c332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c334:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c338:	d102      	bne.n	800c340 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c33a:	4b4f      	ldr	r3, [pc, #316]	; (800c478 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800c33c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c33e:	e002      	b.n	800c346 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c340:	2300      	movs	r3, #0
 800c342:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c344:	e235      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c346:	e234      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c348:	4b4c      	ldr	r3, [pc, #304]	; (800c47c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800c34a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c34c:	e231      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c34e:	2300      	movs	r3, #0
 800c350:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c352:	e22e      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800c354:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c358:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800c35c:	430b      	orrs	r3, r1
 800c35e:	f040 808f 	bne.w	800c480 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800c362:	4b42      	ldr	r3, [pc, #264]	; (800c46c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c364:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c366:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800c36a:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800c36c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c36e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c372:	d06b      	beq.n	800c44c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800c374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c376:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c37a:	d874      	bhi.n	800c466 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c37c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c37e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c382:	d056      	beq.n	800c432 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800c384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c386:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c38a:	d86c      	bhi.n	800c466 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c38c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c38e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c392:	d03b      	beq.n	800c40c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800c394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c396:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c39a:	d864      	bhi.n	800c466 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c39c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c39e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c3a2:	d021      	beq.n	800c3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800c3a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c3aa:	d85c      	bhi.n	800c466 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c3ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d004      	beq.n	800c3bc <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800c3b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c3b8:	d004      	beq.n	800c3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800c3ba:	e054      	b.n	800c466 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800c3bc:	f7fe fa0a 	bl	800a7d4 <HAL_RCC_GetPCLK1Freq>
 800c3c0:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c3c2:	e1f6      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c3c4:	4b29      	ldr	r3, [pc, #164]	; (800c46c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c3cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c3d0:	d107      	bne.n	800c3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c3d2:	f107 0318 	add.w	r3, r7, #24
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	f000 fa0a 	bl	800c7f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c3dc:	69fb      	ldr	r3, [r7, #28]
 800c3de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c3e0:	e1e7      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3e6:	e1e4      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c3e8:	4b20      	ldr	r3, [pc, #128]	; (800c46c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c3f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c3f4:	d107      	bne.n	800c406 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c3f6:	f107 030c 	add.w	r3, r7, #12
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	f000 fb4c 	bl	800ca98 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c400:	693b      	ldr	r3, [r7, #16]
 800c402:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c404:	e1d5      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c406:	2300      	movs	r3, #0
 800c408:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c40a:	e1d2      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c40c:	4b17      	ldr	r3, [pc, #92]	; (800c46c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	f003 0304 	and.w	r3, r3, #4
 800c414:	2b04      	cmp	r3, #4
 800c416:	d109      	bne.n	800c42c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c418:	4b14      	ldr	r3, [pc, #80]	; (800c46c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	08db      	lsrs	r3, r3, #3
 800c41e:	f003 0303 	and.w	r3, r3, #3
 800c422:	4a13      	ldr	r2, [pc, #76]	; (800c470 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800c424:	fa22 f303 	lsr.w	r3, r2, r3
 800c428:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c42a:	e1c2      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c42c:	2300      	movs	r3, #0
 800c42e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c430:	e1bf      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c432:	4b0e      	ldr	r3, [pc, #56]	; (800c46c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c43a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c43e:	d102      	bne.n	800c446 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800c440:	4b0c      	ldr	r3, [pc, #48]	; (800c474 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c442:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c444:	e1b5      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c446:	2300      	movs	r3, #0
 800c448:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c44a:	e1b2      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c44c:	4b07      	ldr	r3, [pc, #28]	; (800c46c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c454:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c458:	d102      	bne.n	800c460 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800c45a:	4b07      	ldr	r3, [pc, #28]	; (800c478 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800c45c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c45e:	e1a8      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c460:	2300      	movs	r3, #0
 800c462:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c464:	e1a5      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c466:	2300      	movs	r3, #0
 800c468:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c46a:	e1a2      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c46c:	58024400 	.word	0x58024400
 800c470:	03d09000 	.word	0x03d09000
 800c474:	003d0900 	.word	0x003d0900
 800c478:	017d7840 	.word	0x017d7840
 800c47c:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800c480:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c484:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800c488:	430b      	orrs	r3, r1
 800c48a:	d173      	bne.n	800c574 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800c48c:	4b9c      	ldr	r3, [pc, #624]	; (800c700 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c48e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c490:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c494:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c498:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c49c:	d02f      	beq.n	800c4fe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800c49e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c4a4:	d863      	bhi.n	800c56e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800c4a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d004      	beq.n	800c4b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800c4ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c4b2:	d012      	beq.n	800c4da <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800c4b4:	e05b      	b.n	800c56e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c4b6:	4b92      	ldr	r3, [pc, #584]	; (800c700 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c4be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c4c2:	d107      	bne.n	800c4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c4c4:	f107 0318 	add.w	r3, r7, #24
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	f000 f991 	bl	800c7f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c4ce:	69bb      	ldr	r3, [r7, #24]
 800c4d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4d2:	e16e      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4d8:	e16b      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c4da:	4b89      	ldr	r3, [pc, #548]	; (800c700 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c4e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c4e6:	d107      	bne.n	800c4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c4e8:	f107 030c 	add.w	r3, r7, #12
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	f000 fad3 	bl	800ca98 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c4f2:	697b      	ldr	r3, [r7, #20]
 800c4f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4f6:	e15c      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4fc:	e159      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c4fe:	4b80      	ldr	r3, [pc, #512]	; (800c700 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c502:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c506:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c508:	4b7d      	ldr	r3, [pc, #500]	; (800c700 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	f003 0304 	and.w	r3, r3, #4
 800c510:	2b04      	cmp	r3, #4
 800c512:	d10c      	bne.n	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800c514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c516:	2b00      	cmp	r3, #0
 800c518:	d109      	bne.n	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c51a:	4b79      	ldr	r3, [pc, #484]	; (800c700 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	08db      	lsrs	r3, r3, #3
 800c520:	f003 0303 	and.w	r3, r3, #3
 800c524:	4a77      	ldr	r2, [pc, #476]	; (800c704 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800c526:	fa22 f303 	lsr.w	r3, r2, r3
 800c52a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c52c:	e01e      	b.n	800c56c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c52e:	4b74      	ldr	r3, [pc, #464]	; (800c700 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c536:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c53a:	d106      	bne.n	800c54a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800c53c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c53e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c542:	d102      	bne.n	800c54a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c544:	4b70      	ldr	r3, [pc, #448]	; (800c708 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800c546:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c548:	e010      	b.n	800c56c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c54a:	4b6d      	ldr	r3, [pc, #436]	; (800c700 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c552:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c556:	d106      	bne.n	800c566 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800c558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c55a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c55e:	d102      	bne.n	800c566 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c560:	4b6a      	ldr	r3, [pc, #424]	; (800c70c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800c562:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c564:	e002      	b.n	800c56c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c566:	2300      	movs	r3, #0
 800c568:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c56a:	e122      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c56c:	e121      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c56e:	2300      	movs	r3, #0
 800c570:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c572:	e11e      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c574:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c578:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800c57c:	430b      	orrs	r3, r1
 800c57e:	d133      	bne.n	800c5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c580:	4b5f      	ldr	r3, [pc, #380]	; (800c700 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c582:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c584:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c588:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c58a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d004      	beq.n	800c59a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800c590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c592:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c596:	d012      	beq.n	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800c598:	e023      	b.n	800c5e2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c59a:	4b59      	ldr	r3, [pc, #356]	; (800c700 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c5a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c5a6:	d107      	bne.n	800c5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c5a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	f000 fbc7 	bl	800cd40 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c5b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5b6:	e0fc      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5bc:	e0f9      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c5be:	4b50      	ldr	r3, [pc, #320]	; (800c700 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c5c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c5ca:	d107      	bne.n	800c5dc <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c5cc:	f107 0318 	add.w	r3, r7, #24
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	f000 f90d 	bl	800c7f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800c5d6:	6a3b      	ldr	r3, [r7, #32]
 800c5d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5da:	e0ea      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c5dc:	2300      	movs	r3, #0
 800c5de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5e0:	e0e7      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5e6:	e0e4      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800c5e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c5ec:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800c5f0:	430b      	orrs	r3, r1
 800c5f2:	f040 808d 	bne.w	800c710 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800c5f6:	4b42      	ldr	r3, [pc, #264]	; (800c700 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c5f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c5fa:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800c5fe:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c602:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c606:	d06b      	beq.n	800c6e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800c608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c60a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c60e:	d874      	bhi.n	800c6fa <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c612:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c616:	d056      	beq.n	800c6c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800c618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c61a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c61e:	d86c      	bhi.n	800c6fa <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c622:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c626:	d03b      	beq.n	800c6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800c628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c62a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c62e:	d864      	bhi.n	800c6fa <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c632:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c636:	d021      	beq.n	800c67c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800c638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c63a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c63e:	d85c      	bhi.n	800c6fa <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c642:	2b00      	cmp	r3, #0
 800c644:	d004      	beq.n	800c650 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800c646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c648:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c64c:	d004      	beq.n	800c658 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800c64e:	e054      	b.n	800c6fa <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800c650:	f000 f8b8 	bl	800c7c4 <HAL_RCCEx_GetD3PCLK1Freq>
 800c654:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c656:	e0ac      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c658:	4b29      	ldr	r3, [pc, #164]	; (800c700 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c660:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c664:	d107      	bne.n	800c676 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c666:	f107 0318 	add.w	r3, r7, #24
 800c66a:	4618      	mov	r0, r3
 800c66c:	f000 f8c0 	bl	800c7f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c670:	69fb      	ldr	r3, [r7, #28]
 800c672:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c674:	e09d      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c676:	2300      	movs	r3, #0
 800c678:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c67a:	e09a      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c67c:	4b20      	ldr	r3, [pc, #128]	; (800c700 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c684:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c688:	d107      	bne.n	800c69a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c68a:	f107 030c 	add.w	r3, r7, #12
 800c68e:	4618      	mov	r0, r3
 800c690:	f000 fa02 	bl	800ca98 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c694:	693b      	ldr	r3, [r7, #16]
 800c696:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c698:	e08b      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c69a:	2300      	movs	r3, #0
 800c69c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c69e:	e088      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c6a0:	4b17      	ldr	r3, [pc, #92]	; (800c700 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	f003 0304 	and.w	r3, r3, #4
 800c6a8:	2b04      	cmp	r3, #4
 800c6aa:	d109      	bne.n	800c6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c6ac:	4b14      	ldr	r3, [pc, #80]	; (800c700 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	08db      	lsrs	r3, r3, #3
 800c6b2:	f003 0303 	and.w	r3, r3, #3
 800c6b6:	4a13      	ldr	r2, [pc, #76]	; (800c704 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800c6b8:	fa22 f303 	lsr.w	r3, r2, r3
 800c6bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6be:	e078      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6c4:	e075      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c6c6:	4b0e      	ldr	r3, [pc, #56]	; (800c700 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c6ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c6d2:	d102      	bne.n	800c6da <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800c6d4:	4b0c      	ldr	r3, [pc, #48]	; (800c708 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800c6d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6d8:	e06b      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c6da:	2300      	movs	r3, #0
 800c6dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6de:	e068      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c6e0:	4b07      	ldr	r3, [pc, #28]	; (800c700 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c6e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c6ec:	d102      	bne.n	800c6f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800c6ee:	4b07      	ldr	r3, [pc, #28]	; (800c70c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800c6f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6f2:	e05e      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6f8:	e05b      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6fe:	e058      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c700:	58024400 	.word	0x58024400
 800c704:	03d09000 	.word	0x03d09000
 800c708:	003d0900 	.word	0x003d0900
 800c70c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800c710:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c714:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800c718:	430b      	orrs	r3, r1
 800c71a:	d148      	bne.n	800c7ae <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800c71c:	4b27      	ldr	r3, [pc, #156]	; (800c7bc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c71e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c720:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c724:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c728:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c72c:	d02a      	beq.n	800c784 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800c72e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c730:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c734:	d838      	bhi.n	800c7a8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800c736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d004      	beq.n	800c746 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800c73c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c73e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c742:	d00d      	beq.n	800c760 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800c744:	e030      	b.n	800c7a8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c746:	4b1d      	ldr	r3, [pc, #116]	; (800c7bc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c74e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c752:	d102      	bne.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800c754:	4b1a      	ldr	r3, [pc, #104]	; (800c7c0 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800c756:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c758:	e02b      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c75a:	2300      	movs	r3, #0
 800c75c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c75e:	e028      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c760:	4b16      	ldr	r3, [pc, #88]	; (800c7bc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c768:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c76c:	d107      	bne.n	800c77e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c76e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c772:	4618      	mov	r0, r3
 800c774:	f000 fae4 	bl	800cd40 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c77a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c77c:	e019      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c77e:	2300      	movs	r3, #0
 800c780:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c782:	e016      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c784:	4b0d      	ldr	r3, [pc, #52]	; (800c7bc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c78c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c790:	d107      	bne.n	800c7a2 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c792:	f107 0318 	add.w	r3, r7, #24
 800c796:	4618      	mov	r0, r3
 800c798:	f000 f82a 	bl	800c7f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c79c:	69fb      	ldr	r3, [r7, #28]
 800c79e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c7a0:	e007      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7a6:	e004      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7ac:	e001      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800c7b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	3740      	adds	r7, #64	; 0x40
 800c7b8:	46bd      	mov	sp, r7
 800c7ba:	bd80      	pop	{r7, pc}
 800c7bc:	58024400 	.word	0x58024400
 800c7c0:	017d7840 	.word	0x017d7840

0800c7c4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c7c8:	f7fd ffd4 	bl	800a774 <HAL_RCC_GetHCLKFreq>
 800c7cc:	4602      	mov	r2, r0
 800c7ce:	4b06      	ldr	r3, [pc, #24]	; (800c7e8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c7d0:	6a1b      	ldr	r3, [r3, #32]
 800c7d2:	091b      	lsrs	r3, r3, #4
 800c7d4:	f003 0307 	and.w	r3, r3, #7
 800c7d8:	4904      	ldr	r1, [pc, #16]	; (800c7ec <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c7da:	5ccb      	ldrb	r3, [r1, r3]
 800c7dc:	f003 031f 	and.w	r3, r3, #31
 800c7e0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	bd80      	pop	{r7, pc}
 800c7e8:	58024400 	.word	0x58024400
 800c7ec:	08016bf4 	.word	0x08016bf4

0800c7f0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800c7f0:	b480      	push	{r7}
 800c7f2:	b089      	sub	sp, #36	; 0x24
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c7f8:	4ba1      	ldr	r3, [pc, #644]	; (800ca80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c7fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7fc:	f003 0303 	and.w	r3, r3, #3
 800c800:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c802:	4b9f      	ldr	r3, [pc, #636]	; (800ca80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c806:	0b1b      	lsrs	r3, r3, #12
 800c808:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c80c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c80e:	4b9c      	ldr	r3, [pc, #624]	; (800ca80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c812:	091b      	lsrs	r3, r3, #4
 800c814:	f003 0301 	and.w	r3, r3, #1
 800c818:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c81a:	4b99      	ldr	r3, [pc, #612]	; (800ca80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c81c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c81e:	08db      	lsrs	r3, r3, #3
 800c820:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c824:	693a      	ldr	r2, [r7, #16]
 800c826:	fb02 f303 	mul.w	r3, r2, r3
 800c82a:	ee07 3a90 	vmov	s15, r3
 800c82e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c832:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c836:	697b      	ldr	r3, [r7, #20]
 800c838:	2b00      	cmp	r3, #0
 800c83a:	f000 8111 	beq.w	800ca60 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c83e:	69bb      	ldr	r3, [r7, #24]
 800c840:	2b02      	cmp	r3, #2
 800c842:	f000 8083 	beq.w	800c94c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c846:	69bb      	ldr	r3, [r7, #24]
 800c848:	2b02      	cmp	r3, #2
 800c84a:	f200 80a1 	bhi.w	800c990 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c84e:	69bb      	ldr	r3, [r7, #24]
 800c850:	2b00      	cmp	r3, #0
 800c852:	d003      	beq.n	800c85c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c854:	69bb      	ldr	r3, [r7, #24]
 800c856:	2b01      	cmp	r3, #1
 800c858:	d056      	beq.n	800c908 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c85a:	e099      	b.n	800c990 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c85c:	4b88      	ldr	r3, [pc, #544]	; (800ca80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	f003 0320 	and.w	r3, r3, #32
 800c864:	2b00      	cmp	r3, #0
 800c866:	d02d      	beq.n	800c8c4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c868:	4b85      	ldr	r3, [pc, #532]	; (800ca80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	08db      	lsrs	r3, r3, #3
 800c86e:	f003 0303 	and.w	r3, r3, #3
 800c872:	4a84      	ldr	r2, [pc, #528]	; (800ca84 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c874:	fa22 f303 	lsr.w	r3, r2, r3
 800c878:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c87a:	68bb      	ldr	r3, [r7, #8]
 800c87c:	ee07 3a90 	vmov	s15, r3
 800c880:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c884:	697b      	ldr	r3, [r7, #20]
 800c886:	ee07 3a90 	vmov	s15, r3
 800c88a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c88e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c892:	4b7b      	ldr	r3, [pc, #492]	; (800ca80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c896:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c89a:	ee07 3a90 	vmov	s15, r3
 800c89e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c8a2:	ed97 6a03 	vldr	s12, [r7, #12]
 800c8a6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ca88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c8aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c8ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c8b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c8b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c8ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c8be:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c8c2:	e087      	b.n	800c9d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c8c4:	697b      	ldr	r3, [r7, #20]
 800c8c6:	ee07 3a90 	vmov	s15, r3
 800c8ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8ce:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ca8c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c8d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c8d6:	4b6a      	ldr	r3, [pc, #424]	; (800ca80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c8d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8de:	ee07 3a90 	vmov	s15, r3
 800c8e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c8e6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c8ea:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ca88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c8ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c8f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c8f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c8fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c8fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c902:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c906:	e065      	b.n	800c9d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c908:	697b      	ldr	r3, [r7, #20]
 800c90a:	ee07 3a90 	vmov	s15, r3
 800c90e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c912:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ca90 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c916:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c91a:	4b59      	ldr	r3, [pc, #356]	; (800ca80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c91c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c91e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c922:	ee07 3a90 	vmov	s15, r3
 800c926:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c92a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c92e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ca88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c932:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c936:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c93a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c93e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c942:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c946:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c94a:	e043      	b.n	800c9d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c94c:	697b      	ldr	r3, [r7, #20]
 800c94e:	ee07 3a90 	vmov	s15, r3
 800c952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c956:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ca94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c95a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c95e:	4b48      	ldr	r3, [pc, #288]	; (800ca80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c962:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c966:	ee07 3a90 	vmov	s15, r3
 800c96a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c96e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c972:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ca88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c976:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c97a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c97e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c982:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c986:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c98a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c98e:	e021      	b.n	800c9d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c990:	697b      	ldr	r3, [r7, #20]
 800c992:	ee07 3a90 	vmov	s15, r3
 800c996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c99a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ca90 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c99e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c9a2:	4b37      	ldr	r3, [pc, #220]	; (800ca80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c9a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9aa:	ee07 3a90 	vmov	s15, r3
 800c9ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c9b2:	ed97 6a03 	vldr	s12, [r7, #12]
 800c9b6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ca88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c9ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c9be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c9c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c9c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c9ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c9d2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800c9d4:	4b2a      	ldr	r3, [pc, #168]	; (800ca80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c9d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9d8:	0a5b      	lsrs	r3, r3, #9
 800c9da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c9de:	ee07 3a90 	vmov	s15, r3
 800c9e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c9ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c9ee:	edd7 6a07 	vldr	s13, [r7, #28]
 800c9f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c9f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c9fa:	ee17 2a90 	vmov	r2, s15
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800ca02:	4b1f      	ldr	r3, [pc, #124]	; (800ca80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca06:	0c1b      	lsrs	r3, r3, #16
 800ca08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca0c:	ee07 3a90 	vmov	s15, r3
 800ca10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca14:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ca18:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ca1c:	edd7 6a07 	vldr	s13, [r7, #28]
 800ca20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca28:	ee17 2a90 	vmov	r2, s15
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800ca30:	4b13      	ldr	r3, [pc, #76]	; (800ca80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca34:	0e1b      	lsrs	r3, r3, #24
 800ca36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca3a:	ee07 3a90 	vmov	s15, r3
 800ca3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ca46:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ca4a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ca4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca56:	ee17 2a90 	vmov	r2, s15
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ca5e:	e008      	b.n	800ca72 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	2200      	movs	r2, #0
 800ca64:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	2200      	movs	r2, #0
 800ca6a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	2200      	movs	r2, #0
 800ca70:	609a      	str	r2, [r3, #8]
}
 800ca72:	bf00      	nop
 800ca74:	3724      	adds	r7, #36	; 0x24
 800ca76:	46bd      	mov	sp, r7
 800ca78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7c:	4770      	bx	lr
 800ca7e:	bf00      	nop
 800ca80:	58024400 	.word	0x58024400
 800ca84:	03d09000 	.word	0x03d09000
 800ca88:	46000000 	.word	0x46000000
 800ca8c:	4c742400 	.word	0x4c742400
 800ca90:	4a742400 	.word	0x4a742400
 800ca94:	4bbebc20 	.word	0x4bbebc20

0800ca98 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800ca98:	b480      	push	{r7}
 800ca9a:	b089      	sub	sp, #36	; 0x24
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800caa0:	4ba1      	ldr	r3, [pc, #644]	; (800cd28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800caa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800caa4:	f003 0303 	and.w	r3, r3, #3
 800caa8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800caaa:	4b9f      	ldr	r3, [pc, #636]	; (800cd28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800caac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800caae:	0d1b      	lsrs	r3, r3, #20
 800cab0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cab4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800cab6:	4b9c      	ldr	r3, [pc, #624]	; (800cd28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caba:	0a1b      	lsrs	r3, r3, #8
 800cabc:	f003 0301 	and.w	r3, r3, #1
 800cac0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800cac2:	4b99      	ldr	r3, [pc, #612]	; (800cd28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cac6:	08db      	lsrs	r3, r3, #3
 800cac8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cacc:	693a      	ldr	r2, [r7, #16]
 800cace:	fb02 f303 	mul.w	r3, r2, r3
 800cad2:	ee07 3a90 	vmov	s15, r3
 800cad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cada:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800cade:	697b      	ldr	r3, [r7, #20]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	f000 8111 	beq.w	800cd08 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800cae6:	69bb      	ldr	r3, [r7, #24]
 800cae8:	2b02      	cmp	r3, #2
 800caea:	f000 8083 	beq.w	800cbf4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800caee:	69bb      	ldr	r3, [r7, #24]
 800caf0:	2b02      	cmp	r3, #2
 800caf2:	f200 80a1 	bhi.w	800cc38 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800caf6:	69bb      	ldr	r3, [r7, #24]
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d003      	beq.n	800cb04 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800cafc:	69bb      	ldr	r3, [r7, #24]
 800cafe:	2b01      	cmp	r3, #1
 800cb00:	d056      	beq.n	800cbb0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800cb02:	e099      	b.n	800cc38 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cb04:	4b88      	ldr	r3, [pc, #544]	; (800cd28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	f003 0320 	and.w	r3, r3, #32
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d02d      	beq.n	800cb6c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cb10:	4b85      	ldr	r3, [pc, #532]	; (800cd28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	08db      	lsrs	r3, r3, #3
 800cb16:	f003 0303 	and.w	r3, r3, #3
 800cb1a:	4a84      	ldr	r2, [pc, #528]	; (800cd2c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800cb1c:	fa22 f303 	lsr.w	r3, r2, r3
 800cb20:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cb22:	68bb      	ldr	r3, [r7, #8]
 800cb24:	ee07 3a90 	vmov	s15, r3
 800cb28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb2c:	697b      	ldr	r3, [r7, #20]
 800cb2e:	ee07 3a90 	vmov	s15, r3
 800cb32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb3a:	4b7b      	ldr	r3, [pc, #492]	; (800cd28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb42:	ee07 3a90 	vmov	s15, r3
 800cb46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb4a:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb4e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800cd30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cb52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb62:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb66:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cb6a:	e087      	b.n	800cc7c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cb6c:	697b      	ldr	r3, [r7, #20]
 800cb6e:	ee07 3a90 	vmov	s15, r3
 800cb72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb76:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cd34 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800cb7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb7e:	4b6a      	ldr	r3, [pc, #424]	; (800cd28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb86:	ee07 3a90 	vmov	s15, r3
 800cb8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb8e:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb92:	eddf 5a67 	vldr	s11, [pc, #412]	; 800cd30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cb96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cba2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cbaa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cbae:	e065      	b.n	800cc7c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cbb0:	697b      	ldr	r3, [r7, #20]
 800cbb2:	ee07 3a90 	vmov	s15, r3
 800cbb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbba:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cd38 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cbbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cbc2:	4b59      	ldr	r3, [pc, #356]	; (800cd28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cbc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbca:	ee07 3a90 	vmov	s15, r3
 800cbce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cbd2:	ed97 6a03 	vldr	s12, [r7, #12]
 800cbd6:	eddf 5a56 	vldr	s11, [pc, #344]	; 800cd30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cbda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cbde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cbe2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cbe6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cbea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cbee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cbf2:	e043      	b.n	800cc7c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cbf4:	697b      	ldr	r3, [r7, #20]
 800cbf6:	ee07 3a90 	vmov	s15, r3
 800cbfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbfe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800cd3c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800cc02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc06:	4b48      	ldr	r3, [pc, #288]	; (800cd28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc0e:	ee07 3a90 	vmov	s15, r3
 800cc12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc16:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc1a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cd30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cc1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cc36:	e021      	b.n	800cc7c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cc38:	697b      	ldr	r3, [r7, #20]
 800cc3a:	ee07 3a90 	vmov	s15, r3
 800cc3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc42:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cd38 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cc46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc4a:	4b37      	ldr	r3, [pc, #220]	; (800cd28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc52:	ee07 3a90 	vmov	s15, r3
 800cc56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc5a:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc5e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800cd30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cc62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cc7a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800cc7c:	4b2a      	ldr	r3, [pc, #168]	; (800cd28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc80:	0a5b      	lsrs	r3, r3, #9
 800cc82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc86:	ee07 3a90 	vmov	s15, r3
 800cc8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cc92:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cc96:	edd7 6a07 	vldr	s13, [r7, #28]
 800cc9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cc9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cca2:	ee17 2a90 	vmov	r2, s15
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800ccaa:	4b1f      	ldr	r3, [pc, #124]	; (800cd28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ccac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccae:	0c1b      	lsrs	r3, r3, #16
 800ccb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ccb4:	ee07 3a90 	vmov	s15, r3
 800ccb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccbc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ccc0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ccc4:	edd7 6a07 	vldr	s13, [r7, #28]
 800ccc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cccc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ccd0:	ee17 2a90 	vmov	r2, s15
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800ccd8:	4b13      	ldr	r3, [pc, #76]	; (800cd28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ccda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccdc:	0e1b      	lsrs	r3, r3, #24
 800ccde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cce2:	ee07 3a90 	vmov	s15, r3
 800cce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ccee:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ccf2:	edd7 6a07 	vldr	s13, [r7, #28]
 800ccf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ccfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ccfe:	ee17 2a90 	vmov	r2, s15
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800cd06:	e008      	b.n	800cd1a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	2200      	movs	r2, #0
 800cd12:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	2200      	movs	r2, #0
 800cd18:	609a      	str	r2, [r3, #8]
}
 800cd1a:	bf00      	nop
 800cd1c:	3724      	adds	r7, #36	; 0x24
 800cd1e:	46bd      	mov	sp, r7
 800cd20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd24:	4770      	bx	lr
 800cd26:	bf00      	nop
 800cd28:	58024400 	.word	0x58024400
 800cd2c:	03d09000 	.word	0x03d09000
 800cd30:	46000000 	.word	0x46000000
 800cd34:	4c742400 	.word	0x4c742400
 800cd38:	4a742400 	.word	0x4a742400
 800cd3c:	4bbebc20 	.word	0x4bbebc20

0800cd40 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800cd40:	b480      	push	{r7}
 800cd42:	b089      	sub	sp, #36	; 0x24
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cd48:	4ba0      	ldr	r3, [pc, #640]	; (800cfcc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cd4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd4c:	f003 0303 	and.w	r3, r3, #3
 800cd50:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800cd52:	4b9e      	ldr	r3, [pc, #632]	; (800cfcc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cd54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd56:	091b      	lsrs	r3, r3, #4
 800cd58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cd5c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800cd5e:	4b9b      	ldr	r3, [pc, #620]	; (800cfcc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cd60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd62:	f003 0301 	and.w	r3, r3, #1
 800cd66:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800cd68:	4b98      	ldr	r3, [pc, #608]	; (800cfcc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cd6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd6c:	08db      	lsrs	r3, r3, #3
 800cd6e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cd72:	693a      	ldr	r2, [r7, #16]
 800cd74:	fb02 f303 	mul.w	r3, r2, r3
 800cd78:	ee07 3a90 	vmov	s15, r3
 800cd7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd80:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800cd84:	697b      	ldr	r3, [r7, #20]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	f000 8111 	beq.w	800cfae <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800cd8c:	69bb      	ldr	r3, [r7, #24]
 800cd8e:	2b02      	cmp	r3, #2
 800cd90:	f000 8083 	beq.w	800ce9a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800cd94:	69bb      	ldr	r3, [r7, #24]
 800cd96:	2b02      	cmp	r3, #2
 800cd98:	f200 80a1 	bhi.w	800cede <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800cd9c:	69bb      	ldr	r3, [r7, #24]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d003      	beq.n	800cdaa <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800cda2:	69bb      	ldr	r3, [r7, #24]
 800cda4:	2b01      	cmp	r3, #1
 800cda6:	d056      	beq.n	800ce56 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800cda8:	e099      	b.n	800cede <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cdaa:	4b88      	ldr	r3, [pc, #544]	; (800cfcc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	f003 0320 	and.w	r3, r3, #32
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d02d      	beq.n	800ce12 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cdb6:	4b85      	ldr	r3, [pc, #532]	; (800cfcc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	08db      	lsrs	r3, r3, #3
 800cdbc:	f003 0303 	and.w	r3, r3, #3
 800cdc0:	4a83      	ldr	r2, [pc, #524]	; (800cfd0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800cdc2:	fa22 f303 	lsr.w	r3, r2, r3
 800cdc6:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cdc8:	68bb      	ldr	r3, [r7, #8]
 800cdca:	ee07 3a90 	vmov	s15, r3
 800cdce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cdd2:	697b      	ldr	r3, [r7, #20]
 800cdd4:	ee07 3a90 	vmov	s15, r3
 800cdd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cddc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cde0:	4b7a      	ldr	r3, [pc, #488]	; (800cfcc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cde2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cde4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cde8:	ee07 3a90 	vmov	s15, r3
 800cdec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cdf0:	ed97 6a03 	vldr	s12, [r7, #12]
 800cdf4:	eddf 5a77 	vldr	s11, [pc, #476]	; 800cfd4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cdf8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cdfc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ce04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce08:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce0c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ce10:	e087      	b.n	800cf22 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ce12:	697b      	ldr	r3, [r7, #20]
 800ce14:	ee07 3a90 	vmov	s15, r3
 800ce18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce1c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800cfd8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800ce20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce24:	4b69      	ldr	r3, [pc, #420]	; (800cfcc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ce26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce2c:	ee07 3a90 	vmov	s15, r3
 800ce30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce34:	ed97 6a03 	vldr	s12, [r7, #12]
 800ce38:	eddf 5a66 	vldr	s11, [pc, #408]	; 800cfd4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ce3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ce48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce50:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ce54:	e065      	b.n	800cf22 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ce56:	697b      	ldr	r3, [r7, #20]
 800ce58:	ee07 3a90 	vmov	s15, r3
 800ce5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce60:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800cfdc <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800ce64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce68:	4b58      	ldr	r3, [pc, #352]	; (800cfcc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ce6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce70:	ee07 3a90 	vmov	s15, r3
 800ce74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce78:	ed97 6a03 	vldr	s12, [r7, #12]
 800ce7c:	eddf 5a55 	vldr	s11, [pc, #340]	; 800cfd4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ce80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ce8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce90:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce94:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ce98:	e043      	b.n	800cf22 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ce9a:	697b      	ldr	r3, [r7, #20]
 800ce9c:	ee07 3a90 	vmov	s15, r3
 800cea0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cea4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800cfe0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800cea8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ceac:	4b47      	ldr	r3, [pc, #284]	; (800cfcc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ceae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ceb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ceb4:	ee07 3a90 	vmov	s15, r3
 800ceb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cebc:	ed97 6a03 	vldr	s12, [r7, #12]
 800cec0:	eddf 5a44 	vldr	s11, [pc, #272]	; 800cfd4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cec4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cec8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cecc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ced0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ced4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ced8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cedc:	e021      	b.n	800cf22 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cede:	697b      	ldr	r3, [r7, #20]
 800cee0:	ee07 3a90 	vmov	s15, r3
 800cee4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cee8:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800cfd8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800ceec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cef0:	4b36      	ldr	r3, [pc, #216]	; (800cfcc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cef4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cef8:	ee07 3a90 	vmov	s15, r3
 800cefc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf00:	ed97 6a03 	vldr	s12, [r7, #12]
 800cf04:	eddf 5a33 	vldr	s11, [pc, #204]	; 800cfd4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cf08:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf10:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cf14:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf18:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf1c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cf20:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800cf22:	4b2a      	ldr	r3, [pc, #168]	; (800cfcc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf26:	0a5b      	lsrs	r3, r3, #9
 800cf28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf2c:	ee07 3a90 	vmov	s15, r3
 800cf30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cf38:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cf3c:	edd7 6a07 	vldr	s13, [r7, #28]
 800cf40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cf44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cf48:	ee17 2a90 	vmov	r2, s15
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800cf50:	4b1e      	ldr	r3, [pc, #120]	; (800cfcc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf54:	0c1b      	lsrs	r3, r3, #16
 800cf56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf5a:	ee07 3a90 	vmov	s15, r3
 800cf5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cf66:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cf6a:	edd7 6a07 	vldr	s13, [r7, #28]
 800cf6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cf72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cf76:	ee17 2a90 	vmov	r2, s15
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800cf7e:	4b13      	ldr	r3, [pc, #76]	; (800cfcc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf82:	0e1b      	lsrs	r3, r3, #24
 800cf84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf88:	ee07 3a90 	vmov	s15, r3
 800cf8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf90:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cf94:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cf98:	edd7 6a07 	vldr	s13, [r7, #28]
 800cf9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cfa0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cfa4:	ee17 2a90 	vmov	r2, s15
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800cfac:	e008      	b.n	800cfc0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	2200      	movs	r2, #0
 800cfb2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	2200      	movs	r2, #0
 800cfb8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	2200      	movs	r2, #0
 800cfbe:	609a      	str	r2, [r3, #8]
}
 800cfc0:	bf00      	nop
 800cfc2:	3724      	adds	r7, #36	; 0x24
 800cfc4:	46bd      	mov	sp, r7
 800cfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfca:	4770      	bx	lr
 800cfcc:	58024400 	.word	0x58024400
 800cfd0:	03d09000 	.word	0x03d09000
 800cfd4:	46000000 	.word	0x46000000
 800cfd8:	4c742400 	.word	0x4c742400
 800cfdc:	4a742400 	.word	0x4a742400
 800cfe0:	4bbebc20 	.word	0x4bbebc20

0800cfe4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	b084      	sub	sp, #16
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	6078      	str	r0, [r7, #4]
 800cfec:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cfee:	2300      	movs	r3, #0
 800cff0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cff2:	4b53      	ldr	r3, [pc, #332]	; (800d140 <RCCEx_PLL2_Config+0x15c>)
 800cff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cff6:	f003 0303 	and.w	r3, r3, #3
 800cffa:	2b03      	cmp	r3, #3
 800cffc:	d101      	bne.n	800d002 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800cffe:	2301      	movs	r3, #1
 800d000:	e099      	b.n	800d136 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d002:	4b4f      	ldr	r3, [pc, #316]	; (800d140 <RCCEx_PLL2_Config+0x15c>)
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	4a4e      	ldr	r2, [pc, #312]	; (800d140 <RCCEx_PLL2_Config+0x15c>)
 800d008:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d00c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d00e:	f7f6 fc9b 	bl	8003948 <HAL_GetTick>
 800d012:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d014:	e008      	b.n	800d028 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d016:	f7f6 fc97 	bl	8003948 <HAL_GetTick>
 800d01a:	4602      	mov	r2, r0
 800d01c:	68bb      	ldr	r3, [r7, #8]
 800d01e:	1ad3      	subs	r3, r2, r3
 800d020:	2b02      	cmp	r3, #2
 800d022:	d901      	bls.n	800d028 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d024:	2303      	movs	r3, #3
 800d026:	e086      	b.n	800d136 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d028:	4b45      	ldr	r3, [pc, #276]	; (800d140 <RCCEx_PLL2_Config+0x15c>)
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d030:	2b00      	cmp	r3, #0
 800d032:	d1f0      	bne.n	800d016 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d034:	4b42      	ldr	r3, [pc, #264]	; (800d140 <RCCEx_PLL2_Config+0x15c>)
 800d036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d038:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	031b      	lsls	r3, r3, #12
 800d042:	493f      	ldr	r1, [pc, #252]	; (800d140 <RCCEx_PLL2_Config+0x15c>)
 800d044:	4313      	orrs	r3, r2
 800d046:	628b      	str	r3, [r1, #40]	; 0x28
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	685b      	ldr	r3, [r3, #4]
 800d04c:	3b01      	subs	r3, #1
 800d04e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	689b      	ldr	r3, [r3, #8]
 800d056:	3b01      	subs	r3, #1
 800d058:	025b      	lsls	r3, r3, #9
 800d05a:	b29b      	uxth	r3, r3
 800d05c:	431a      	orrs	r2, r3
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	68db      	ldr	r3, [r3, #12]
 800d062:	3b01      	subs	r3, #1
 800d064:	041b      	lsls	r3, r3, #16
 800d066:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d06a:	431a      	orrs	r2, r3
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	691b      	ldr	r3, [r3, #16]
 800d070:	3b01      	subs	r3, #1
 800d072:	061b      	lsls	r3, r3, #24
 800d074:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d078:	4931      	ldr	r1, [pc, #196]	; (800d140 <RCCEx_PLL2_Config+0x15c>)
 800d07a:	4313      	orrs	r3, r2
 800d07c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d07e:	4b30      	ldr	r3, [pc, #192]	; (800d140 <RCCEx_PLL2_Config+0x15c>)
 800d080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d082:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	695b      	ldr	r3, [r3, #20]
 800d08a:	492d      	ldr	r1, [pc, #180]	; (800d140 <RCCEx_PLL2_Config+0x15c>)
 800d08c:	4313      	orrs	r3, r2
 800d08e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d090:	4b2b      	ldr	r3, [pc, #172]	; (800d140 <RCCEx_PLL2_Config+0x15c>)
 800d092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d094:	f023 0220 	bic.w	r2, r3, #32
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	699b      	ldr	r3, [r3, #24]
 800d09c:	4928      	ldr	r1, [pc, #160]	; (800d140 <RCCEx_PLL2_Config+0x15c>)
 800d09e:	4313      	orrs	r3, r2
 800d0a0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d0a2:	4b27      	ldr	r3, [pc, #156]	; (800d140 <RCCEx_PLL2_Config+0x15c>)
 800d0a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0a6:	4a26      	ldr	r2, [pc, #152]	; (800d140 <RCCEx_PLL2_Config+0x15c>)
 800d0a8:	f023 0310 	bic.w	r3, r3, #16
 800d0ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d0ae:	4b24      	ldr	r3, [pc, #144]	; (800d140 <RCCEx_PLL2_Config+0x15c>)
 800d0b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d0b2:	4b24      	ldr	r3, [pc, #144]	; (800d144 <RCCEx_PLL2_Config+0x160>)
 800d0b4:	4013      	ands	r3, r2
 800d0b6:	687a      	ldr	r2, [r7, #4]
 800d0b8:	69d2      	ldr	r2, [r2, #28]
 800d0ba:	00d2      	lsls	r2, r2, #3
 800d0bc:	4920      	ldr	r1, [pc, #128]	; (800d140 <RCCEx_PLL2_Config+0x15c>)
 800d0be:	4313      	orrs	r3, r2
 800d0c0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d0c2:	4b1f      	ldr	r3, [pc, #124]	; (800d140 <RCCEx_PLL2_Config+0x15c>)
 800d0c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0c6:	4a1e      	ldr	r2, [pc, #120]	; (800d140 <RCCEx_PLL2_Config+0x15c>)
 800d0c8:	f043 0310 	orr.w	r3, r3, #16
 800d0cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d0ce:	683b      	ldr	r3, [r7, #0]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d106      	bne.n	800d0e2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d0d4:	4b1a      	ldr	r3, [pc, #104]	; (800d140 <RCCEx_PLL2_Config+0x15c>)
 800d0d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0d8:	4a19      	ldr	r2, [pc, #100]	; (800d140 <RCCEx_PLL2_Config+0x15c>)
 800d0da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d0de:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d0e0:	e00f      	b.n	800d102 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d0e2:	683b      	ldr	r3, [r7, #0]
 800d0e4:	2b01      	cmp	r3, #1
 800d0e6:	d106      	bne.n	800d0f6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d0e8:	4b15      	ldr	r3, [pc, #84]	; (800d140 <RCCEx_PLL2_Config+0x15c>)
 800d0ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0ec:	4a14      	ldr	r2, [pc, #80]	; (800d140 <RCCEx_PLL2_Config+0x15c>)
 800d0ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d0f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d0f4:	e005      	b.n	800d102 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d0f6:	4b12      	ldr	r3, [pc, #72]	; (800d140 <RCCEx_PLL2_Config+0x15c>)
 800d0f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0fa:	4a11      	ldr	r2, [pc, #68]	; (800d140 <RCCEx_PLL2_Config+0x15c>)
 800d0fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d100:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d102:	4b0f      	ldr	r3, [pc, #60]	; (800d140 <RCCEx_PLL2_Config+0x15c>)
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	4a0e      	ldr	r2, [pc, #56]	; (800d140 <RCCEx_PLL2_Config+0x15c>)
 800d108:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d10c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d10e:	f7f6 fc1b 	bl	8003948 <HAL_GetTick>
 800d112:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d114:	e008      	b.n	800d128 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d116:	f7f6 fc17 	bl	8003948 <HAL_GetTick>
 800d11a:	4602      	mov	r2, r0
 800d11c:	68bb      	ldr	r3, [r7, #8]
 800d11e:	1ad3      	subs	r3, r2, r3
 800d120:	2b02      	cmp	r3, #2
 800d122:	d901      	bls.n	800d128 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d124:	2303      	movs	r3, #3
 800d126:	e006      	b.n	800d136 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d128:	4b05      	ldr	r3, [pc, #20]	; (800d140 <RCCEx_PLL2_Config+0x15c>)
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d130:	2b00      	cmp	r3, #0
 800d132:	d0f0      	beq.n	800d116 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d134:	7bfb      	ldrb	r3, [r7, #15]
}
 800d136:	4618      	mov	r0, r3
 800d138:	3710      	adds	r7, #16
 800d13a:	46bd      	mov	sp, r7
 800d13c:	bd80      	pop	{r7, pc}
 800d13e:	bf00      	nop
 800d140:	58024400 	.word	0x58024400
 800d144:	ffff0007 	.word	0xffff0007

0800d148 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d148:	b580      	push	{r7, lr}
 800d14a:	b084      	sub	sp, #16
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	6078      	str	r0, [r7, #4]
 800d150:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d152:	2300      	movs	r3, #0
 800d154:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d156:	4b53      	ldr	r3, [pc, #332]	; (800d2a4 <RCCEx_PLL3_Config+0x15c>)
 800d158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d15a:	f003 0303 	and.w	r3, r3, #3
 800d15e:	2b03      	cmp	r3, #3
 800d160:	d101      	bne.n	800d166 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d162:	2301      	movs	r3, #1
 800d164:	e099      	b.n	800d29a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d166:	4b4f      	ldr	r3, [pc, #316]	; (800d2a4 <RCCEx_PLL3_Config+0x15c>)
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	4a4e      	ldr	r2, [pc, #312]	; (800d2a4 <RCCEx_PLL3_Config+0x15c>)
 800d16c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d170:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d172:	f7f6 fbe9 	bl	8003948 <HAL_GetTick>
 800d176:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d178:	e008      	b.n	800d18c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d17a:	f7f6 fbe5 	bl	8003948 <HAL_GetTick>
 800d17e:	4602      	mov	r2, r0
 800d180:	68bb      	ldr	r3, [r7, #8]
 800d182:	1ad3      	subs	r3, r2, r3
 800d184:	2b02      	cmp	r3, #2
 800d186:	d901      	bls.n	800d18c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d188:	2303      	movs	r3, #3
 800d18a:	e086      	b.n	800d29a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d18c:	4b45      	ldr	r3, [pc, #276]	; (800d2a4 <RCCEx_PLL3_Config+0x15c>)
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d194:	2b00      	cmp	r3, #0
 800d196:	d1f0      	bne.n	800d17a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d198:	4b42      	ldr	r3, [pc, #264]	; (800d2a4 <RCCEx_PLL3_Config+0x15c>)
 800d19a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d19c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	051b      	lsls	r3, r3, #20
 800d1a6:	493f      	ldr	r1, [pc, #252]	; (800d2a4 <RCCEx_PLL3_Config+0x15c>)
 800d1a8:	4313      	orrs	r3, r2
 800d1aa:	628b      	str	r3, [r1, #40]	; 0x28
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	685b      	ldr	r3, [r3, #4]
 800d1b0:	3b01      	subs	r3, #1
 800d1b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	689b      	ldr	r3, [r3, #8]
 800d1ba:	3b01      	subs	r3, #1
 800d1bc:	025b      	lsls	r3, r3, #9
 800d1be:	b29b      	uxth	r3, r3
 800d1c0:	431a      	orrs	r2, r3
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	68db      	ldr	r3, [r3, #12]
 800d1c6:	3b01      	subs	r3, #1
 800d1c8:	041b      	lsls	r3, r3, #16
 800d1ca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d1ce:	431a      	orrs	r2, r3
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	691b      	ldr	r3, [r3, #16]
 800d1d4:	3b01      	subs	r3, #1
 800d1d6:	061b      	lsls	r3, r3, #24
 800d1d8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d1dc:	4931      	ldr	r1, [pc, #196]	; (800d2a4 <RCCEx_PLL3_Config+0x15c>)
 800d1de:	4313      	orrs	r3, r2
 800d1e0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d1e2:	4b30      	ldr	r3, [pc, #192]	; (800d2a4 <RCCEx_PLL3_Config+0x15c>)
 800d1e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	695b      	ldr	r3, [r3, #20]
 800d1ee:	492d      	ldr	r1, [pc, #180]	; (800d2a4 <RCCEx_PLL3_Config+0x15c>)
 800d1f0:	4313      	orrs	r3, r2
 800d1f2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d1f4:	4b2b      	ldr	r3, [pc, #172]	; (800d2a4 <RCCEx_PLL3_Config+0x15c>)
 800d1f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1f8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	699b      	ldr	r3, [r3, #24]
 800d200:	4928      	ldr	r1, [pc, #160]	; (800d2a4 <RCCEx_PLL3_Config+0x15c>)
 800d202:	4313      	orrs	r3, r2
 800d204:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d206:	4b27      	ldr	r3, [pc, #156]	; (800d2a4 <RCCEx_PLL3_Config+0x15c>)
 800d208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d20a:	4a26      	ldr	r2, [pc, #152]	; (800d2a4 <RCCEx_PLL3_Config+0x15c>)
 800d20c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d210:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d212:	4b24      	ldr	r3, [pc, #144]	; (800d2a4 <RCCEx_PLL3_Config+0x15c>)
 800d214:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d216:	4b24      	ldr	r3, [pc, #144]	; (800d2a8 <RCCEx_PLL3_Config+0x160>)
 800d218:	4013      	ands	r3, r2
 800d21a:	687a      	ldr	r2, [r7, #4]
 800d21c:	69d2      	ldr	r2, [r2, #28]
 800d21e:	00d2      	lsls	r2, r2, #3
 800d220:	4920      	ldr	r1, [pc, #128]	; (800d2a4 <RCCEx_PLL3_Config+0x15c>)
 800d222:	4313      	orrs	r3, r2
 800d224:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d226:	4b1f      	ldr	r3, [pc, #124]	; (800d2a4 <RCCEx_PLL3_Config+0x15c>)
 800d228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d22a:	4a1e      	ldr	r2, [pc, #120]	; (800d2a4 <RCCEx_PLL3_Config+0x15c>)
 800d22c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d230:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d232:	683b      	ldr	r3, [r7, #0]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d106      	bne.n	800d246 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d238:	4b1a      	ldr	r3, [pc, #104]	; (800d2a4 <RCCEx_PLL3_Config+0x15c>)
 800d23a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d23c:	4a19      	ldr	r2, [pc, #100]	; (800d2a4 <RCCEx_PLL3_Config+0x15c>)
 800d23e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d242:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d244:	e00f      	b.n	800d266 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d246:	683b      	ldr	r3, [r7, #0]
 800d248:	2b01      	cmp	r3, #1
 800d24a:	d106      	bne.n	800d25a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d24c:	4b15      	ldr	r3, [pc, #84]	; (800d2a4 <RCCEx_PLL3_Config+0x15c>)
 800d24e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d250:	4a14      	ldr	r2, [pc, #80]	; (800d2a4 <RCCEx_PLL3_Config+0x15c>)
 800d252:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d256:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d258:	e005      	b.n	800d266 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d25a:	4b12      	ldr	r3, [pc, #72]	; (800d2a4 <RCCEx_PLL3_Config+0x15c>)
 800d25c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d25e:	4a11      	ldr	r2, [pc, #68]	; (800d2a4 <RCCEx_PLL3_Config+0x15c>)
 800d260:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d264:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d266:	4b0f      	ldr	r3, [pc, #60]	; (800d2a4 <RCCEx_PLL3_Config+0x15c>)
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	4a0e      	ldr	r2, [pc, #56]	; (800d2a4 <RCCEx_PLL3_Config+0x15c>)
 800d26c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d270:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d272:	f7f6 fb69 	bl	8003948 <HAL_GetTick>
 800d276:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d278:	e008      	b.n	800d28c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d27a:	f7f6 fb65 	bl	8003948 <HAL_GetTick>
 800d27e:	4602      	mov	r2, r0
 800d280:	68bb      	ldr	r3, [r7, #8]
 800d282:	1ad3      	subs	r3, r2, r3
 800d284:	2b02      	cmp	r3, #2
 800d286:	d901      	bls.n	800d28c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d288:	2303      	movs	r3, #3
 800d28a:	e006      	b.n	800d29a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d28c:	4b05      	ldr	r3, [pc, #20]	; (800d2a4 <RCCEx_PLL3_Config+0x15c>)
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d294:	2b00      	cmp	r3, #0
 800d296:	d0f0      	beq.n	800d27a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d298:	7bfb      	ldrb	r3, [r7, #15]
}
 800d29a:	4618      	mov	r0, r3
 800d29c:	3710      	adds	r7, #16
 800d29e:	46bd      	mov	sp, r7
 800d2a0:	bd80      	pop	{r7, pc}
 800d2a2:	bf00      	nop
 800d2a4:	58024400 	.word	0x58024400
 800d2a8:	ffff0007 	.word	0xffff0007

0800d2ac <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d2ac:	b580      	push	{r7, lr}
 800d2ae:	b084      	sub	sp, #16
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800d2b4:	2301      	movs	r3, #1
 800d2b6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d071      	beq.n	800d3a2 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800d2c4:	b2db      	uxtb	r3, r3
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d106      	bne.n	800d2d8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	2200      	movs	r2, #0
 800d2ce:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800d2d2:	6878      	ldr	r0, [r7, #4]
 800d2d4:	f7f5 fdd0 	bl	8002e78 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	2202      	movs	r2, #2
 800d2dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	68db      	ldr	r3, [r3, #12]
 800d2e6:	f003 0310 	and.w	r3, r3, #16
 800d2ea:	2b10      	cmp	r3, #16
 800d2ec:	d050      	beq.n	800d390 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	22ca      	movs	r2, #202	; 0xca
 800d2f4:	625a      	str	r2, [r3, #36]	; 0x24
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	2253      	movs	r2, #83	; 0x53
 800d2fc:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800d2fe:	6878      	ldr	r0, [r7, #4]
 800d300:	f000 fa4a 	bl	800d798 <RTC_EnterInitMode>
 800d304:	4603      	mov	r3, r0
 800d306:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800d308:	7bfb      	ldrb	r3, [r7, #15]
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d124      	bne.n	800d358 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	6899      	ldr	r1, [r3, #8]
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	681a      	ldr	r2, [r3, #0]
 800d318:	4b24      	ldr	r3, [pc, #144]	; (800d3ac <HAL_RTC_Init+0x100>)
 800d31a:	400b      	ands	r3, r1
 800d31c:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	6899      	ldr	r1, [r3, #8]
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	685a      	ldr	r2, [r3, #4]
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	691b      	ldr	r3, [r3, #16]
 800d32c:	431a      	orrs	r2, r3
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	699b      	ldr	r3, [r3, #24]
 800d332:	431a      	orrs	r2, r3
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	430a      	orrs	r2, r1
 800d33a:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	689b      	ldr	r3, [r3, #8]
 800d340:	0419      	lsls	r1, r3, #16
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	68da      	ldr	r2, [r3, #12]
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	430a      	orrs	r2, r1
 800d34c:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800d34e:	6878      	ldr	r0, [r7, #4]
 800d350:	f000 fa56 	bl	800d800 <RTC_ExitInitMode>
 800d354:	4603      	mov	r3, r0
 800d356:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800d358:	7bfb      	ldrb	r3, [r7, #15]
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d113      	bne.n	800d386 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	f022 0203 	bic.w	r2, r2, #3
 800d36c:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	69da      	ldr	r2, [r3, #28]
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	695b      	ldr	r3, [r3, #20]
 800d37c:	431a      	orrs	r2, r3
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	430a      	orrs	r2, r1
 800d384:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	22ff      	movs	r2, #255	; 0xff
 800d38c:	625a      	str	r2, [r3, #36]	; 0x24
 800d38e:	e001      	b.n	800d394 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800d390:	2300      	movs	r3, #0
 800d392:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800d394:	7bfb      	ldrb	r3, [r7, #15]
 800d396:	2b00      	cmp	r3, #0
 800d398:	d103      	bne.n	800d3a2 <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	2201      	movs	r2, #1
 800d39e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800d3a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	3710      	adds	r7, #16
 800d3a8:	46bd      	mov	sp, r7
 800d3aa:	bd80      	pop	{r7, pc}
 800d3ac:	ff8fffbf 	.word	0xff8fffbf

0800d3b0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d3b0:	b590      	push	{r4, r7, lr}
 800d3b2:	b087      	sub	sp, #28
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	60f8      	str	r0, [r7, #12]
 800d3b8:	60b9      	str	r1, [r7, #8]
 800d3ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d3c2:	2b01      	cmp	r3, #1
 800d3c4:	d101      	bne.n	800d3ca <HAL_RTC_SetTime+0x1a>
 800d3c6:	2302      	movs	r3, #2
 800d3c8:	e089      	b.n	800d4de <HAL_RTC_SetTime+0x12e>
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	2201      	movs	r2, #1
 800d3ce:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	2202      	movs	r2, #2
 800d3d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	22ca      	movs	r2, #202	; 0xca
 800d3e0:	625a      	str	r2, [r3, #36]	; 0x24
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	2253      	movs	r2, #83	; 0x53
 800d3e8:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800d3ea:	68f8      	ldr	r0, [r7, #12]
 800d3ec:	f000 f9d4 	bl	800d798 <RTC_EnterInitMode>
 800d3f0:	4603      	mov	r3, r0
 800d3f2:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800d3f4:	7cfb      	ldrb	r3, [r7, #19]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d161      	bne.n	800d4be <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d126      	bne.n	800d44e <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	689b      	ldr	r3, [r3, #8]
 800d406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d102      	bne.n	800d414 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800d40e:	68bb      	ldr	r3, [r7, #8]
 800d410:	2200      	movs	r2, #0
 800d412:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d414:	68bb      	ldr	r3, [r7, #8]
 800d416:	781b      	ldrb	r3, [r3, #0]
 800d418:	4618      	mov	r0, r3
 800d41a:	f000 fa2f 	bl	800d87c <RTC_ByteToBcd2>
 800d41e:	4603      	mov	r3, r0
 800d420:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d422:	68bb      	ldr	r3, [r7, #8]
 800d424:	785b      	ldrb	r3, [r3, #1]
 800d426:	4618      	mov	r0, r3
 800d428:	f000 fa28 	bl	800d87c <RTC_ByteToBcd2>
 800d42c:	4603      	mov	r3, r0
 800d42e:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d430:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800d432:	68bb      	ldr	r3, [r7, #8]
 800d434:	789b      	ldrb	r3, [r3, #2]
 800d436:	4618      	mov	r0, r3
 800d438:	f000 fa20 	bl	800d87c <RTC_ByteToBcd2>
 800d43c:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d43e:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800d442:	68bb      	ldr	r3, [r7, #8]
 800d444:	78db      	ldrb	r3, [r3, #3]
 800d446:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d448:	4313      	orrs	r3, r2
 800d44a:	617b      	str	r3, [r7, #20]
 800d44c:	e018      	b.n	800d480 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	689b      	ldr	r3, [r3, #8]
 800d454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d102      	bne.n	800d462 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800d45c:	68bb      	ldr	r3, [r7, #8]
 800d45e:	2200      	movs	r2, #0
 800d460:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d462:	68bb      	ldr	r3, [r7, #8]
 800d464:	781b      	ldrb	r3, [r3, #0]
 800d466:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d468:	68bb      	ldr	r3, [r7, #8]
 800d46a:	785b      	ldrb	r3, [r3, #1]
 800d46c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d46e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800d470:	68ba      	ldr	r2, [r7, #8]
 800d472:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d474:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800d476:	68bb      	ldr	r3, [r7, #8]
 800d478:	78db      	ldrb	r3, [r3, #3]
 800d47a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d47c:	4313      	orrs	r3, r2
 800d47e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	681a      	ldr	r2, [r3, #0]
 800d484:	6979      	ldr	r1, [r7, #20]
 800d486:	4b18      	ldr	r3, [pc, #96]	; (800d4e8 <HAL_RTC_SetTime+0x138>)
 800d488:	400b      	ands	r3, r1
 800d48a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	689a      	ldr	r2, [r3, #8]
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d49a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	6899      	ldr	r1, [r3, #8]
 800d4a2:	68bb      	ldr	r3, [r7, #8]
 800d4a4:	68da      	ldr	r2, [r3, #12]
 800d4a6:	68bb      	ldr	r3, [r7, #8]
 800d4a8:	691b      	ldr	r3, [r3, #16]
 800d4aa:	431a      	orrs	r2, r3
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	430a      	orrs	r2, r1
 800d4b2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800d4b4:	68f8      	ldr	r0, [r7, #12]
 800d4b6:	f000 f9a3 	bl	800d800 <RTC_ExitInitMode>
 800d4ba:	4603      	mov	r3, r0
 800d4bc:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	22ff      	movs	r2, #255	; 0xff
 800d4c4:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800d4c6:	7cfb      	ldrb	r3, [r7, #19]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d103      	bne.n	800d4d4 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	2201      	movs	r2, #1
 800d4d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	2200      	movs	r2, #0
 800d4d8:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800d4dc:	7cfb      	ldrb	r3, [r7, #19]
}
 800d4de:	4618      	mov	r0, r3
 800d4e0:	371c      	adds	r7, #28
 800d4e2:	46bd      	mov	sp, r7
 800d4e4:	bd90      	pop	{r4, r7, pc}
 800d4e6:	bf00      	nop
 800d4e8:	007f7f7f 	.word	0x007f7f7f

0800d4ec <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b086      	sub	sp, #24
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	60f8      	str	r0, [r7, #12]
 800d4f4:	60b9      	str	r1, [r7, #8]
 800d4f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d4fe:	68bb      	ldr	r3, [r7, #8]
 800d500:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	691b      	ldr	r3, [r3, #16]
 800d508:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800d50c:	68bb      	ldr	r3, [r7, #8]
 800d50e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	681a      	ldr	r2, [r3, #0]
 800d516:	4b22      	ldr	r3, [pc, #136]	; (800d5a0 <HAL_RTC_GetTime+0xb4>)
 800d518:	4013      	ands	r3, r2
 800d51a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800d51c:	697b      	ldr	r3, [r7, #20]
 800d51e:	0c1b      	lsrs	r3, r3, #16
 800d520:	b2db      	uxtb	r3, r3
 800d522:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d526:	b2da      	uxtb	r2, r3
 800d528:	68bb      	ldr	r3, [r7, #8]
 800d52a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800d52c:	697b      	ldr	r3, [r7, #20]
 800d52e:	0a1b      	lsrs	r3, r3, #8
 800d530:	b2db      	uxtb	r3, r3
 800d532:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d536:	b2da      	uxtb	r2, r3
 800d538:	68bb      	ldr	r3, [r7, #8]
 800d53a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800d53c:	697b      	ldr	r3, [r7, #20]
 800d53e:	b2db      	uxtb	r3, r3
 800d540:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d544:	b2da      	uxtb	r2, r3
 800d546:	68bb      	ldr	r3, [r7, #8]
 800d548:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800d54a:	697b      	ldr	r3, [r7, #20]
 800d54c:	0d9b      	lsrs	r3, r3, #22
 800d54e:	b2db      	uxtb	r3, r3
 800d550:	f003 0301 	and.w	r3, r3, #1
 800d554:	b2da      	uxtb	r2, r3
 800d556:	68bb      	ldr	r3, [r7, #8]
 800d558:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d11a      	bne.n	800d596 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800d560:	68bb      	ldr	r3, [r7, #8]
 800d562:	781b      	ldrb	r3, [r3, #0]
 800d564:	4618      	mov	r0, r3
 800d566:	f000 f9a9 	bl	800d8bc <RTC_Bcd2ToByte>
 800d56a:	4603      	mov	r3, r0
 800d56c:	461a      	mov	r2, r3
 800d56e:	68bb      	ldr	r3, [r7, #8]
 800d570:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800d572:	68bb      	ldr	r3, [r7, #8]
 800d574:	785b      	ldrb	r3, [r3, #1]
 800d576:	4618      	mov	r0, r3
 800d578:	f000 f9a0 	bl	800d8bc <RTC_Bcd2ToByte>
 800d57c:	4603      	mov	r3, r0
 800d57e:	461a      	mov	r2, r3
 800d580:	68bb      	ldr	r3, [r7, #8]
 800d582:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800d584:	68bb      	ldr	r3, [r7, #8]
 800d586:	789b      	ldrb	r3, [r3, #2]
 800d588:	4618      	mov	r0, r3
 800d58a:	f000 f997 	bl	800d8bc <RTC_Bcd2ToByte>
 800d58e:	4603      	mov	r3, r0
 800d590:	461a      	mov	r2, r3
 800d592:	68bb      	ldr	r3, [r7, #8]
 800d594:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800d596:	2300      	movs	r3, #0
}
 800d598:	4618      	mov	r0, r3
 800d59a:	3718      	adds	r7, #24
 800d59c:	46bd      	mov	sp, r7
 800d59e:	bd80      	pop	{r7, pc}
 800d5a0:	007f7f7f 	.word	0x007f7f7f

0800d5a4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800d5a4:	b590      	push	{r4, r7, lr}
 800d5a6:	b087      	sub	sp, #28
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	60f8      	str	r0, [r7, #12]
 800d5ac:	60b9      	str	r1, [r7, #8]
 800d5ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d5b6:	2b01      	cmp	r3, #1
 800d5b8:	d101      	bne.n	800d5be <HAL_RTC_SetDate+0x1a>
 800d5ba:	2302      	movs	r3, #2
 800d5bc:	e073      	b.n	800d6a6 <HAL_RTC_SetDate+0x102>
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	2201      	movs	r2, #1
 800d5c2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	2202      	movs	r2, #2
 800d5ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d10e      	bne.n	800d5f2 <HAL_RTC_SetDate+0x4e>
 800d5d4:	68bb      	ldr	r3, [r7, #8]
 800d5d6:	785b      	ldrb	r3, [r3, #1]
 800d5d8:	f003 0310 	and.w	r3, r3, #16
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d008      	beq.n	800d5f2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800d5e0:	68bb      	ldr	r3, [r7, #8]
 800d5e2:	785b      	ldrb	r3, [r3, #1]
 800d5e4:	f023 0310 	bic.w	r3, r3, #16
 800d5e8:	b2db      	uxtb	r3, r3
 800d5ea:	330a      	adds	r3, #10
 800d5ec:	b2da      	uxtb	r2, r3
 800d5ee:	68bb      	ldr	r3, [r7, #8]
 800d5f0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d11c      	bne.n	800d632 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800d5f8:	68bb      	ldr	r3, [r7, #8]
 800d5fa:	78db      	ldrb	r3, [r3, #3]
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	f000 f93d 	bl	800d87c <RTC_ByteToBcd2>
 800d602:	4603      	mov	r3, r0
 800d604:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800d606:	68bb      	ldr	r3, [r7, #8]
 800d608:	785b      	ldrb	r3, [r3, #1]
 800d60a:	4618      	mov	r0, r3
 800d60c:	f000 f936 	bl	800d87c <RTC_ByteToBcd2>
 800d610:	4603      	mov	r3, r0
 800d612:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800d614:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800d616:	68bb      	ldr	r3, [r7, #8]
 800d618:	789b      	ldrb	r3, [r3, #2]
 800d61a:	4618      	mov	r0, r3
 800d61c:	f000 f92e 	bl	800d87c <RTC_ByteToBcd2>
 800d620:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800d622:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800d626:	68bb      	ldr	r3, [r7, #8]
 800d628:	781b      	ldrb	r3, [r3, #0]
 800d62a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800d62c:	4313      	orrs	r3, r2
 800d62e:	617b      	str	r3, [r7, #20]
 800d630:	e00e      	b.n	800d650 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800d632:	68bb      	ldr	r3, [r7, #8]
 800d634:	78db      	ldrb	r3, [r3, #3]
 800d636:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800d638:	68bb      	ldr	r3, [r7, #8]
 800d63a:	785b      	ldrb	r3, [r3, #1]
 800d63c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800d63e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800d640:	68ba      	ldr	r2, [r7, #8]
 800d642:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800d644:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800d646:	68bb      	ldr	r3, [r7, #8]
 800d648:	781b      	ldrb	r3, [r3, #0]
 800d64a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800d64c:	4313      	orrs	r3, r2
 800d64e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	22ca      	movs	r2, #202	; 0xca
 800d656:	625a      	str	r2, [r3, #36]	; 0x24
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	2253      	movs	r2, #83	; 0x53
 800d65e:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800d660:	68f8      	ldr	r0, [r7, #12]
 800d662:	f000 f899 	bl	800d798 <RTC_EnterInitMode>
 800d666:	4603      	mov	r3, r0
 800d668:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800d66a:	7cfb      	ldrb	r3, [r7, #19]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d10a      	bne.n	800d686 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	681a      	ldr	r2, [r3, #0]
 800d674:	6979      	ldr	r1, [r7, #20]
 800d676:	4b0e      	ldr	r3, [pc, #56]	; (800d6b0 <HAL_RTC_SetDate+0x10c>)
 800d678:	400b      	ands	r3, r1
 800d67a:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800d67c:	68f8      	ldr	r0, [r7, #12]
 800d67e:	f000 f8bf 	bl	800d800 <RTC_ExitInitMode>
 800d682:	4603      	mov	r3, r0
 800d684:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	22ff      	movs	r2, #255	; 0xff
 800d68c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800d68e:	7cfb      	ldrb	r3, [r7, #19]
 800d690:	2b00      	cmp	r3, #0
 800d692:	d103      	bne.n	800d69c <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	2201      	movs	r2, #1
 800d698:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	2200      	movs	r2, #0
 800d6a0:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800d6a4:	7cfb      	ldrb	r3, [r7, #19]


}
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	371c      	adds	r7, #28
 800d6aa:	46bd      	mov	sp, r7
 800d6ac:	bd90      	pop	{r4, r7, pc}
 800d6ae:	bf00      	nop
 800d6b0:	00ffff3f 	.word	0x00ffff3f

0800d6b4 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800d6b4:	b580      	push	{r7, lr}
 800d6b6:	b086      	sub	sp, #24
 800d6b8:	af00      	add	r7, sp, #0
 800d6ba:	60f8      	str	r0, [r7, #12]
 800d6bc:	60b9      	str	r1, [r7, #8]
 800d6be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	685a      	ldr	r2, [r3, #4]
 800d6c6:	4b21      	ldr	r3, [pc, #132]	; (800d74c <HAL_RTC_GetDate+0x98>)
 800d6c8:	4013      	ands	r3, r2
 800d6ca:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800d6cc:	697b      	ldr	r3, [r7, #20]
 800d6ce:	0c1b      	lsrs	r3, r3, #16
 800d6d0:	b2da      	uxtb	r2, r3
 800d6d2:	68bb      	ldr	r3, [r7, #8]
 800d6d4:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800d6d6:	697b      	ldr	r3, [r7, #20]
 800d6d8:	0a1b      	lsrs	r3, r3, #8
 800d6da:	b2db      	uxtb	r3, r3
 800d6dc:	f003 031f 	and.w	r3, r3, #31
 800d6e0:	b2da      	uxtb	r2, r3
 800d6e2:	68bb      	ldr	r3, [r7, #8]
 800d6e4:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800d6e6:	697b      	ldr	r3, [r7, #20]
 800d6e8:	b2db      	uxtb	r3, r3
 800d6ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d6ee:	b2da      	uxtb	r2, r3
 800d6f0:	68bb      	ldr	r3, [r7, #8]
 800d6f2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800d6f4:	697b      	ldr	r3, [r7, #20]
 800d6f6:	0b5b      	lsrs	r3, r3, #13
 800d6f8:	b2db      	uxtb	r3, r3
 800d6fa:	f003 0307 	and.w	r3, r3, #7
 800d6fe:	b2da      	uxtb	r2, r3
 800d700:	68bb      	ldr	r3, [r7, #8]
 800d702:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d11a      	bne.n	800d740 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800d70a:	68bb      	ldr	r3, [r7, #8]
 800d70c:	78db      	ldrb	r3, [r3, #3]
 800d70e:	4618      	mov	r0, r3
 800d710:	f000 f8d4 	bl	800d8bc <RTC_Bcd2ToByte>
 800d714:	4603      	mov	r3, r0
 800d716:	461a      	mov	r2, r3
 800d718:	68bb      	ldr	r3, [r7, #8]
 800d71a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800d71c:	68bb      	ldr	r3, [r7, #8]
 800d71e:	785b      	ldrb	r3, [r3, #1]
 800d720:	4618      	mov	r0, r3
 800d722:	f000 f8cb 	bl	800d8bc <RTC_Bcd2ToByte>
 800d726:	4603      	mov	r3, r0
 800d728:	461a      	mov	r2, r3
 800d72a:	68bb      	ldr	r3, [r7, #8]
 800d72c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800d72e:	68bb      	ldr	r3, [r7, #8]
 800d730:	789b      	ldrb	r3, [r3, #2]
 800d732:	4618      	mov	r0, r3
 800d734:	f000 f8c2 	bl	800d8bc <RTC_Bcd2ToByte>
 800d738:	4603      	mov	r3, r0
 800d73a:	461a      	mov	r2, r3
 800d73c:	68bb      	ldr	r3, [r7, #8]
 800d73e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800d740:	2300      	movs	r3, #0
}
 800d742:	4618      	mov	r0, r3
 800d744:	3718      	adds	r7, #24
 800d746:	46bd      	mov	sp, r7
 800d748:	bd80      	pop	{r7, pc}
 800d74a:	bf00      	nop
 800d74c:	00ffff3f 	.word	0x00ffff3f

0800d750 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800d750:	b580      	push	{r7, lr}
 800d752:	b084      	sub	sp, #16
 800d754:	af00      	add	r7, sp, #0
 800d756:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	4a0d      	ldr	r2, [pc, #52]	; (800d794 <HAL_RTC_WaitForSynchro+0x44>)
 800d75e:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800d760:	f7f6 f8f2 	bl	8003948 <HAL_GetTick>
 800d764:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800d766:	e009      	b.n	800d77c <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800d768:	f7f6 f8ee 	bl	8003948 <HAL_GetTick>
 800d76c:	4602      	mov	r2, r0
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	1ad3      	subs	r3, r2, r3
 800d772:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d776:	d901      	bls.n	800d77c <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800d778:	2303      	movs	r3, #3
 800d77a:	e007      	b.n	800d78c <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	68db      	ldr	r3, [r3, #12]
 800d782:	f003 0320 	and.w	r3, r3, #32
 800d786:	2b00      	cmp	r3, #0
 800d788:	d0ee      	beq.n	800d768 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800d78a:	2300      	movs	r3, #0
}
 800d78c:	4618      	mov	r0, r3
 800d78e:	3710      	adds	r7, #16
 800d790:	46bd      	mov	sp, r7
 800d792:	bd80      	pop	{r7, pc}
 800d794:	0003ff5f 	.word	0x0003ff5f

0800d798 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800d798:	b580      	push	{r7, lr}
 800d79a:	b084      	sub	sp, #16
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d7a0:	2300      	movs	r3, #0
 800d7a2:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	68db      	ldr	r3, [r3, #12]
 800d7aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d120      	bne.n	800d7f4 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d7ba:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800d7bc:	f7f6 f8c4 	bl	8003948 <HAL_GetTick>
 800d7c0:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800d7c2:	e00d      	b.n	800d7e0 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800d7c4:	f7f6 f8c0 	bl	8003948 <HAL_GetTick>
 800d7c8:	4602      	mov	r2, r0
 800d7ca:	68bb      	ldr	r3, [r7, #8]
 800d7cc:	1ad3      	subs	r3, r2, r3
 800d7ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d7d2:	d905      	bls.n	800d7e0 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800d7d4:	2303      	movs	r3, #3
 800d7d6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	2203      	movs	r2, #3
 800d7dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	68db      	ldr	r3, [r3, #12]
 800d7e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d102      	bne.n	800d7f4 <RTC_EnterInitMode+0x5c>
 800d7ee:	7bfb      	ldrb	r3, [r7, #15]
 800d7f0:	2b03      	cmp	r3, #3
 800d7f2:	d1e7      	bne.n	800d7c4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800d7f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	3710      	adds	r7, #16
 800d7fa:	46bd      	mov	sp, r7
 800d7fc:	bd80      	pop	{r7, pc}
	...

0800d800 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800d800:	b580      	push	{r7, lr}
 800d802:	b084      	sub	sp, #16
 800d804:	af00      	add	r7, sp, #0
 800d806:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d808:	2300      	movs	r3, #0
 800d80a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800d80c:	4b1a      	ldr	r3, [pc, #104]	; (800d878 <RTC_ExitInitMode+0x78>)
 800d80e:	68db      	ldr	r3, [r3, #12]
 800d810:	4a19      	ldr	r2, [pc, #100]	; (800d878 <RTC_ExitInitMode+0x78>)
 800d812:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d816:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800d818:	4b17      	ldr	r3, [pc, #92]	; (800d878 <RTC_ExitInitMode+0x78>)
 800d81a:	689b      	ldr	r3, [r3, #8]
 800d81c:	f003 0320 	and.w	r3, r3, #32
 800d820:	2b00      	cmp	r3, #0
 800d822:	d10c      	bne.n	800d83e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d824:	6878      	ldr	r0, [r7, #4]
 800d826:	f7ff ff93 	bl	800d750 <HAL_RTC_WaitForSynchro>
 800d82a:	4603      	mov	r3, r0
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d01e      	beq.n	800d86e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	2203      	movs	r2, #3
 800d834:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800d838:	2303      	movs	r3, #3
 800d83a:	73fb      	strb	r3, [r7, #15]
 800d83c:	e017      	b.n	800d86e <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800d83e:	4b0e      	ldr	r3, [pc, #56]	; (800d878 <RTC_ExitInitMode+0x78>)
 800d840:	689b      	ldr	r3, [r3, #8]
 800d842:	4a0d      	ldr	r2, [pc, #52]	; (800d878 <RTC_ExitInitMode+0x78>)
 800d844:	f023 0320 	bic.w	r3, r3, #32
 800d848:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d84a:	6878      	ldr	r0, [r7, #4]
 800d84c:	f7ff ff80 	bl	800d750 <HAL_RTC_WaitForSynchro>
 800d850:	4603      	mov	r3, r0
 800d852:	2b00      	cmp	r3, #0
 800d854:	d005      	beq.n	800d862 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	2203      	movs	r2, #3
 800d85a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800d85e:	2303      	movs	r3, #3
 800d860:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800d862:	4b05      	ldr	r3, [pc, #20]	; (800d878 <RTC_ExitInitMode+0x78>)
 800d864:	689b      	ldr	r3, [r3, #8]
 800d866:	4a04      	ldr	r2, [pc, #16]	; (800d878 <RTC_ExitInitMode+0x78>)
 800d868:	f043 0320 	orr.w	r3, r3, #32
 800d86c:	6093      	str	r3, [r2, #8]
  }

  return status;
 800d86e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d870:	4618      	mov	r0, r3
 800d872:	3710      	adds	r7, #16
 800d874:	46bd      	mov	sp, r7
 800d876:	bd80      	pop	{r7, pc}
 800d878:	58004000 	.word	0x58004000

0800d87c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800d87c:	b480      	push	{r7}
 800d87e:	b085      	sub	sp, #20
 800d880:	af00      	add	r7, sp, #0
 800d882:	4603      	mov	r3, r0
 800d884:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800d886:	2300      	movs	r3, #0
 800d888:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800d88a:	79fb      	ldrb	r3, [r7, #7]
 800d88c:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800d88e:	e005      	b.n	800d89c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	3301      	adds	r3, #1
 800d894:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800d896:	7afb      	ldrb	r3, [r7, #11]
 800d898:	3b0a      	subs	r3, #10
 800d89a:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800d89c:	7afb      	ldrb	r3, [r7, #11]
 800d89e:	2b09      	cmp	r3, #9
 800d8a0:	d8f6      	bhi.n	800d890 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	b2db      	uxtb	r3, r3
 800d8a6:	011b      	lsls	r3, r3, #4
 800d8a8:	b2da      	uxtb	r2, r3
 800d8aa:	7afb      	ldrb	r3, [r7, #11]
 800d8ac:	4313      	orrs	r3, r2
 800d8ae:	b2db      	uxtb	r3, r3
}
 800d8b0:	4618      	mov	r0, r3
 800d8b2:	3714      	adds	r7, #20
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ba:	4770      	bx	lr

0800d8bc <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800d8bc:	b480      	push	{r7}
 800d8be:	b085      	sub	sp, #20
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	4603      	mov	r3, r0
 800d8c4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800d8c6:	79fb      	ldrb	r3, [r7, #7]
 800d8c8:	091b      	lsrs	r3, r3, #4
 800d8ca:	b2db      	uxtb	r3, r3
 800d8cc:	461a      	mov	r2, r3
 800d8ce:	0092      	lsls	r2, r2, #2
 800d8d0:	4413      	add	r3, r2
 800d8d2:	005b      	lsls	r3, r3, #1
 800d8d4:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800d8d6:	79fb      	ldrb	r3, [r7, #7]
 800d8d8:	f003 030f 	and.w	r3, r3, #15
 800d8dc:	b2da      	uxtb	r2, r3
 800d8de:	7bfb      	ldrb	r3, [r7, #15]
 800d8e0:	4413      	add	r3, r2
 800d8e2:	b2db      	uxtb	r3, r3
}
 800d8e4:	4618      	mov	r0, r3
 800d8e6:	3714      	adds	r7, #20
 800d8e8:	46bd      	mov	sp, r7
 800d8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ee:	4770      	bx	lr

0800d8f0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d8f0:	b580      	push	{r7, lr}
 800d8f2:	b084      	sub	sp, #16
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d101      	bne.n	800d902 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d8fe:	2301      	movs	r3, #1
 800d900:	e10f      	b.n	800db22 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	2200      	movs	r2, #0
 800d906:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	4a87      	ldr	r2, [pc, #540]	; (800db2c <HAL_SPI_Init+0x23c>)
 800d90e:	4293      	cmp	r3, r2
 800d910:	d00f      	beq.n	800d932 <HAL_SPI_Init+0x42>
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	4a86      	ldr	r2, [pc, #536]	; (800db30 <HAL_SPI_Init+0x240>)
 800d918:	4293      	cmp	r3, r2
 800d91a:	d00a      	beq.n	800d932 <HAL_SPI_Init+0x42>
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	4a84      	ldr	r2, [pc, #528]	; (800db34 <HAL_SPI_Init+0x244>)
 800d922:	4293      	cmp	r3, r2
 800d924:	d005      	beq.n	800d932 <HAL_SPI_Init+0x42>
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	68db      	ldr	r3, [r3, #12]
 800d92a:	2b0f      	cmp	r3, #15
 800d92c:	d901      	bls.n	800d932 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800d92e:	2301      	movs	r3, #1
 800d930:	e0f7      	b.n	800db22 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800d932:	6878      	ldr	r0, [r7, #4]
 800d934:	f000 fc12 	bl	800e15c <SPI_GetPacketSize>
 800d938:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	4a7b      	ldr	r2, [pc, #492]	; (800db2c <HAL_SPI_Init+0x23c>)
 800d940:	4293      	cmp	r3, r2
 800d942:	d00c      	beq.n	800d95e <HAL_SPI_Init+0x6e>
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	4a79      	ldr	r2, [pc, #484]	; (800db30 <HAL_SPI_Init+0x240>)
 800d94a:	4293      	cmp	r3, r2
 800d94c:	d007      	beq.n	800d95e <HAL_SPI_Init+0x6e>
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	4a78      	ldr	r2, [pc, #480]	; (800db34 <HAL_SPI_Init+0x244>)
 800d954:	4293      	cmp	r3, r2
 800d956:	d002      	beq.n	800d95e <HAL_SPI_Init+0x6e>
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	2b08      	cmp	r3, #8
 800d95c:	d811      	bhi.n	800d982 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800d962:	4a72      	ldr	r2, [pc, #456]	; (800db2c <HAL_SPI_Init+0x23c>)
 800d964:	4293      	cmp	r3, r2
 800d966:	d009      	beq.n	800d97c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	4a70      	ldr	r2, [pc, #448]	; (800db30 <HAL_SPI_Init+0x240>)
 800d96e:	4293      	cmp	r3, r2
 800d970:	d004      	beq.n	800d97c <HAL_SPI_Init+0x8c>
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	4a6f      	ldr	r2, [pc, #444]	; (800db34 <HAL_SPI_Init+0x244>)
 800d978:	4293      	cmp	r3, r2
 800d97a:	d104      	bne.n	800d986 <HAL_SPI_Init+0x96>
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	2b10      	cmp	r3, #16
 800d980:	d901      	bls.n	800d986 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800d982:	2301      	movs	r3, #1
 800d984:	e0cd      	b.n	800db22 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d98c:	b2db      	uxtb	r3, r3
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d106      	bne.n	800d9a0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	2200      	movs	r2, #0
 800d996:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d99a:	6878      	ldr	r0, [r7, #4]
 800d99c:	f7f5 faa0 	bl	8002ee0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	2202      	movs	r2, #2
 800d9a4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	681a      	ldr	r2, [r3, #0]
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	f022 0201 	bic.w	r2, r2, #1
 800d9b6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	689b      	ldr	r3, [r3, #8]
 800d9be:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800d9c2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	699b      	ldr	r3, [r3, #24]
 800d9c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d9cc:	d119      	bne.n	800da02 <HAL_SPI_Init+0x112>
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	685b      	ldr	r3, [r3, #4]
 800d9d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d9d6:	d103      	bne.n	800d9e0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d008      	beq.n	800d9f2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d10c      	bne.n	800da02 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800d9ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d9f0:	d107      	bne.n	800da02 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	681a      	ldr	r2, [r3, #0]
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800da00:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	685b      	ldr	r3, [r3, #4]
 800da06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d00f      	beq.n	800da2e <HAL_SPI_Init+0x13e>
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	68db      	ldr	r3, [r3, #12]
 800da12:	2b06      	cmp	r3, #6
 800da14:	d90b      	bls.n	800da2e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	430a      	orrs	r2, r1
 800da2a:	601a      	str	r2, [r3, #0]
 800da2c:	e007      	b.n	800da3e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	681a      	ldr	r2, [r3, #0]
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800da3c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	69da      	ldr	r2, [r3, #28]
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da46:	431a      	orrs	r2, r3
 800da48:	68bb      	ldr	r3, [r7, #8]
 800da4a:	431a      	orrs	r2, r3
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da50:	ea42 0103 	orr.w	r1, r2, r3
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	68da      	ldr	r2, [r3, #12]
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	430a      	orrs	r2, r1
 800da5e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da68:	431a      	orrs	r2, r3
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da6e:	431a      	orrs	r2, r3
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	699b      	ldr	r3, [r3, #24]
 800da74:	431a      	orrs	r2, r3
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	691b      	ldr	r3, [r3, #16]
 800da7a:	431a      	orrs	r2, r3
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	695b      	ldr	r3, [r3, #20]
 800da80:	431a      	orrs	r2, r3
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	6a1b      	ldr	r3, [r3, #32]
 800da86:	431a      	orrs	r2, r3
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	685b      	ldr	r3, [r3, #4]
 800da8c:	431a      	orrs	r2, r3
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800da92:	431a      	orrs	r2, r3
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	689b      	ldr	r3, [r3, #8]
 800da98:	431a      	orrs	r2, r3
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800da9e:	ea42 0103 	orr.w	r1, r2, r3
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	430a      	orrs	r2, r1
 800daac:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	685b      	ldr	r3, [r3, #4]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d113      	bne.n	800dade <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	689b      	ldr	r3, [r3, #8]
 800dabc:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dac8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	689b      	ldr	r3, [r3, #8]
 800dad0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800dadc:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	f022 0201 	bic.w	r2, r2, #1
 800daec:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	685b      	ldr	r3, [r3, #4]
 800daf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d00a      	beq.n	800db10 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	68db      	ldr	r3, [r3, #12]
 800db00:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	430a      	orrs	r2, r1
 800db0e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	2200      	movs	r2, #0
 800db14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	2201      	movs	r2, #1
 800db1c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800db20:	2300      	movs	r3, #0
}
 800db22:	4618      	mov	r0, r3
 800db24:	3710      	adds	r7, #16
 800db26:	46bd      	mov	sp, r7
 800db28:	bd80      	pop	{r7, pc}
 800db2a:	bf00      	nop
 800db2c:	40013000 	.word	0x40013000
 800db30:	40003800 	.word	0x40003800
 800db34:	40003c00 	.word	0x40003c00

0800db38 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800db38:	b580      	push	{r7, lr}
 800db3a:	b088      	sub	sp, #32
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	60f8      	str	r0, [r7, #12]
 800db40:	60b9      	str	r1, [r7, #8]
 800db42:	603b      	str	r3, [r7, #0]
 800db44:	4613      	mov	r3, r2
 800db46:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db4c:	095b      	lsrs	r3, r3, #5
 800db4e:	b29b      	uxth	r3, r3
 800db50:	3301      	adds	r3, #1
 800db52:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	3330      	adds	r3, #48	; 0x30
 800db5a:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800db5c:	f7f5 fef4 	bl	8003948 <HAL_GetTick>
 800db60:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800db68:	b2db      	uxtb	r3, r3
 800db6a:	2b01      	cmp	r3, #1
 800db6c:	d001      	beq.n	800db72 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800db6e:	2302      	movs	r3, #2
 800db70:	e250      	b.n	800e014 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800db72:	68bb      	ldr	r3, [r7, #8]
 800db74:	2b00      	cmp	r3, #0
 800db76:	d002      	beq.n	800db7e <HAL_SPI_Receive+0x46>
 800db78:	88fb      	ldrh	r3, [r7, #6]
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d101      	bne.n	800db82 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800db7e:	2301      	movs	r3, #1
 800db80:	e248      	b.n	800e014 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800db88:	2b01      	cmp	r3, #1
 800db8a:	d101      	bne.n	800db90 <HAL_SPI_Receive+0x58>
 800db8c:	2302      	movs	r3, #2
 800db8e:	e241      	b.n	800e014 <HAL_SPI_Receive+0x4dc>
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	2201      	movs	r2, #1
 800db94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	2204      	movs	r2, #4
 800db9c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	2200      	movs	r2, #0
 800dba4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	68ba      	ldr	r2, [r7, #8]
 800dbac:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	88fa      	ldrh	r2, [r7, #6]
 800dbb2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	88fa      	ldrh	r2, [r7, #6]
 800dbba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	2200      	movs	r2, #0
 800dbc2:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	2200      	movs	r2, #0
 800dbc8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	2200      	movs	r2, #0
 800dbd0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	2200      	movs	r2, #0
 800dbd8:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	2200      	movs	r2, #0
 800dbde:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	689b      	ldr	r3, [r3, #8]
 800dbe4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800dbe8:	d108      	bne.n	800dbfc <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	681a      	ldr	r2, [r3, #0]
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800dbf8:	601a      	str	r2, [r3, #0]
 800dbfa:	e009      	b.n	800dc10 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	68db      	ldr	r3, [r3, #12]
 800dc02:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800dc0e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	685a      	ldr	r2, [r3, #4]
 800dc16:	4b95      	ldr	r3, [pc, #596]	; (800de6c <HAL_SPI_Receive+0x334>)
 800dc18:	4013      	ands	r3, r2
 800dc1a:	88f9      	ldrh	r1, [r7, #6]
 800dc1c:	68fa      	ldr	r2, [r7, #12]
 800dc1e:	6812      	ldr	r2, [r2, #0]
 800dc20:	430b      	orrs	r3, r1
 800dc22:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	681a      	ldr	r2, [r3, #0]
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	f042 0201 	orr.w	r2, r2, #1
 800dc32:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	685b      	ldr	r3, [r3, #4]
 800dc38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dc3c:	d107      	bne.n	800dc4e <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	681a      	ldr	r2, [r3, #0]
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dc4c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	68db      	ldr	r3, [r3, #12]
 800dc52:	2b0f      	cmp	r3, #15
 800dc54:	d96c      	bls.n	800dd30 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800dc56:	e064      	b.n	800dd22 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	695b      	ldr	r3, [r3, #20]
 800dc5e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	695b      	ldr	r3, [r3, #20]
 800dc66:	f003 0301 	and.w	r3, r3, #1
 800dc6a:	2b01      	cmp	r3, #1
 800dc6c:	d114      	bne.n	800dc98 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	681a      	ldr	r2, [r3, #0]
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dc76:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800dc78:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dc7e:	1d1a      	adds	r2, r3, #4
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dc8a:	b29b      	uxth	r3, r3
 800dc8c:	3b01      	subs	r3, #1
 800dc8e:	b29a      	uxth	r2, r3
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800dc96:	e044      	b.n	800dd22 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dc9e:	b29b      	uxth	r3, r3
 800dca0:	8bfa      	ldrh	r2, [r7, #30]
 800dca2:	429a      	cmp	r2, r3
 800dca4:	d919      	bls.n	800dcda <HAL_SPI_Receive+0x1a2>
 800dca6:	693b      	ldr	r3, [r7, #16]
 800dca8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d014      	beq.n	800dcda <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	681a      	ldr	r2, [r3, #0]
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dcb8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800dcba:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dcc0:	1d1a      	adds	r2, r3, #4
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dccc:	b29b      	uxth	r3, r3
 800dcce:	3b01      	subs	r3, #1
 800dcd0:	b29a      	uxth	r2, r3
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800dcd8:	e023      	b.n	800dd22 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dcda:	f7f5 fe35 	bl	8003948 <HAL_GetTick>
 800dcde:	4602      	mov	r2, r0
 800dce0:	697b      	ldr	r3, [r7, #20]
 800dce2:	1ad3      	subs	r3, r2, r3
 800dce4:	683a      	ldr	r2, [r7, #0]
 800dce6:	429a      	cmp	r2, r3
 800dce8:	d803      	bhi.n	800dcf2 <HAL_SPI_Receive+0x1ba>
 800dcea:	683b      	ldr	r3, [r7, #0]
 800dcec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dcf0:	d102      	bne.n	800dcf8 <HAL_SPI_Receive+0x1c0>
 800dcf2:	683b      	ldr	r3, [r7, #0]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d114      	bne.n	800dd22 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800dcf8:	68f8      	ldr	r0, [r7, #12]
 800dcfa:	f000 f98f 	bl	800e01c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dd04:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	2201      	movs	r2, #1
 800dd12:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	2200      	movs	r2, #0
 800dd1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800dd1e:	2303      	movs	r3, #3
 800dd20:	e178      	b.n	800e014 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dd28:	b29b      	uxth	r3, r3
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d194      	bne.n	800dc58 <HAL_SPI_Receive+0x120>
 800dd2e:	e15e      	b.n	800dfee <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	68db      	ldr	r3, [r3, #12]
 800dd34:	2b07      	cmp	r3, #7
 800dd36:	f240 8153 	bls.w	800dfe0 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800dd3a:	e08f      	b.n	800de5c <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	695b      	ldr	r3, [r3, #20]
 800dd42:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	695b      	ldr	r3, [r3, #20]
 800dd4a:	f003 0301 	and.w	r3, r3, #1
 800dd4e:	2b01      	cmp	r3, #1
 800dd50:	d114      	bne.n	800dd7c <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dd56:	69ba      	ldr	r2, [r7, #24]
 800dd58:	8812      	ldrh	r2, [r2, #0]
 800dd5a:	b292      	uxth	r2, r2
 800dd5c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dd62:	1c9a      	adds	r2, r3, #2
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dd6e:	b29b      	uxth	r3, r3
 800dd70:	3b01      	subs	r3, #1
 800dd72:	b29a      	uxth	r2, r3
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800dd7a:	e06f      	b.n	800de5c <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dd82:	b29b      	uxth	r3, r3
 800dd84:	8bfa      	ldrh	r2, [r7, #30]
 800dd86:	429a      	cmp	r2, r3
 800dd88:	d924      	bls.n	800ddd4 <HAL_SPI_Receive+0x29c>
 800dd8a:	693b      	ldr	r3, [r7, #16]
 800dd8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d01f      	beq.n	800ddd4 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dd98:	69ba      	ldr	r2, [r7, #24]
 800dd9a:	8812      	ldrh	r2, [r2, #0]
 800dd9c:	b292      	uxth	r2, r2
 800dd9e:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dda4:	1c9a      	adds	r2, r3, #2
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	665a      	str	r2, [r3, #100]	; 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ddae:	69ba      	ldr	r2, [r7, #24]
 800ddb0:	8812      	ldrh	r2, [r2, #0]
 800ddb2:	b292      	uxth	r2, r2
 800ddb4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ddba:	1c9a      	adds	r2, r3, #2
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ddc6:	b29b      	uxth	r3, r3
 800ddc8:	3b02      	subs	r3, #2
 800ddca:	b29a      	uxth	r2, r3
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ddd2:	e043      	b.n	800de5c <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ddda:	b29b      	uxth	r3, r3
 800dddc:	2b01      	cmp	r3, #1
 800ddde:	d119      	bne.n	800de14 <HAL_SPI_Receive+0x2dc>
 800dde0:	693b      	ldr	r3, [r7, #16]
 800dde2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d014      	beq.n	800de14 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ddee:	69ba      	ldr	r2, [r7, #24]
 800ddf0:	8812      	ldrh	r2, [r2, #0]
 800ddf2:	b292      	uxth	r2, r2
 800ddf4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ddfa:	1c9a      	adds	r2, r3, #2
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800de06:	b29b      	uxth	r3, r3
 800de08:	3b01      	subs	r3, #1
 800de0a:	b29a      	uxth	r2, r3
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800de12:	e023      	b.n	800de5c <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800de14:	f7f5 fd98 	bl	8003948 <HAL_GetTick>
 800de18:	4602      	mov	r2, r0
 800de1a:	697b      	ldr	r3, [r7, #20]
 800de1c:	1ad3      	subs	r3, r2, r3
 800de1e:	683a      	ldr	r2, [r7, #0]
 800de20:	429a      	cmp	r2, r3
 800de22:	d803      	bhi.n	800de2c <HAL_SPI_Receive+0x2f4>
 800de24:	683b      	ldr	r3, [r7, #0]
 800de26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800de2a:	d102      	bne.n	800de32 <HAL_SPI_Receive+0x2fa>
 800de2c:	683b      	ldr	r3, [r7, #0]
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d114      	bne.n	800de5c <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800de32:	68f8      	ldr	r0, [r7, #12]
 800de34:	f000 f8f2 	bl	800e01c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800de3e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	2201      	movs	r2, #1
 800de4c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	2200      	movs	r2, #0
 800de54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800de58:	2303      	movs	r3, #3
 800de5a:	e0db      	b.n	800e014 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800de62:	b29b      	uxth	r3, r3
 800de64:	2b00      	cmp	r3, #0
 800de66:	f47f af69 	bne.w	800dd3c <HAL_SPI_Receive+0x204>
 800de6a:	e0c0      	b.n	800dfee <HAL_SPI_Receive+0x4b6>
 800de6c:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	695b      	ldr	r3, [r3, #20]
 800de76:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	695b      	ldr	r3, [r3, #20]
 800de7e:	f003 0301 	and.w	r3, r3, #1
 800de82:	2b01      	cmp	r3, #1
 800de84:	d117      	bne.n	800deb6 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de92:	7812      	ldrb	r2, [r2, #0]
 800de94:	b2d2      	uxtb	r2, r2
 800de96:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de9c:	1c5a      	adds	r2, r3, #1
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dea8:	b29b      	uxth	r3, r3
 800deaa:	3b01      	subs	r3, #1
 800deac:	b29a      	uxth	r2, r3
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800deb4:	e094      	b.n	800dfe0 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800debc:	b29b      	uxth	r3, r3
 800debe:	8bfa      	ldrh	r2, [r7, #30]
 800dec0:	429a      	cmp	r2, r3
 800dec2:	d946      	bls.n	800df52 <HAL_SPI_Receive+0x41a>
 800dec4:	693b      	ldr	r3, [r7, #16]
 800dec6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800deca:	2b00      	cmp	r3, #0
 800decc:	d041      	beq.n	800df52 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800deda:	7812      	ldrb	r2, [r2, #0]
 800dedc:	b2d2      	uxtb	r2, r2
 800dede:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dee4:	1c5a      	adds	r2, r3, #1
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800def6:	7812      	ldrb	r2, [r2, #0]
 800def8:	b2d2      	uxtb	r2, r2
 800defa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df00:	1c5a      	adds	r2, r3, #1
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df12:	7812      	ldrb	r2, [r2, #0]
 800df14:	b2d2      	uxtb	r2, r2
 800df16:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df1c:	1c5a      	adds	r2, r3, #1
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df2e:	7812      	ldrb	r2, [r2, #0]
 800df30:	b2d2      	uxtb	r2, r2
 800df32:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df38:	1c5a      	adds	r2, r3, #1
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800df44:	b29b      	uxth	r3, r3
 800df46:	3b04      	subs	r3, #4
 800df48:	b29a      	uxth	r2, r3
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800df50:	e046      	b.n	800dfe0 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800df58:	b29b      	uxth	r3, r3
 800df5a:	2b03      	cmp	r3, #3
 800df5c:	d81c      	bhi.n	800df98 <HAL_SPI_Receive+0x460>
 800df5e:	693b      	ldr	r3, [r7, #16]
 800df60:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800df64:	2b00      	cmp	r3, #0
 800df66:	d017      	beq.n	800df98 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df74:	7812      	ldrb	r2, [r2, #0]
 800df76:	b2d2      	uxtb	r2, r2
 800df78:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df7e:	1c5a      	adds	r2, r3, #1
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800df8a:	b29b      	uxth	r3, r3
 800df8c:	3b01      	subs	r3, #1
 800df8e:	b29a      	uxth	r2, r3
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800df96:	e023      	b.n	800dfe0 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800df98:	f7f5 fcd6 	bl	8003948 <HAL_GetTick>
 800df9c:	4602      	mov	r2, r0
 800df9e:	697b      	ldr	r3, [r7, #20]
 800dfa0:	1ad3      	subs	r3, r2, r3
 800dfa2:	683a      	ldr	r2, [r7, #0]
 800dfa4:	429a      	cmp	r2, r3
 800dfa6:	d803      	bhi.n	800dfb0 <HAL_SPI_Receive+0x478>
 800dfa8:	683b      	ldr	r3, [r7, #0]
 800dfaa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dfae:	d102      	bne.n	800dfb6 <HAL_SPI_Receive+0x47e>
 800dfb0:	683b      	ldr	r3, [r7, #0]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d114      	bne.n	800dfe0 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800dfb6:	68f8      	ldr	r0, [r7, #12]
 800dfb8:	f000 f830 	bl	800e01c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dfc2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	2201      	movs	r2, #1
 800dfd0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	2200      	movs	r2, #0
 800dfd8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800dfdc:	2303      	movs	r3, #3
 800dfde:	e019      	b.n	800e014 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dfe6:	b29b      	uxth	r3, r3
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	f47f af41 	bne.w	800de70 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800dfee:	68f8      	ldr	r0, [r7, #12]
 800dff0:	f000 f814 	bl	800e01c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	2201      	movs	r2, #1
 800dff8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	2200      	movs	r2, #0
 800e000:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d001      	beq.n	800e012 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800e00e:	2301      	movs	r3, #1
 800e010:	e000      	b.n	800e014 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800e012:	2300      	movs	r3, #0
  }
}
 800e014:	4618      	mov	r0, r3
 800e016:	3720      	adds	r7, #32
 800e018:	46bd      	mov	sp, r7
 800e01a:	bd80      	pop	{r7, pc}

0800e01c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800e01c:	b480      	push	{r7}
 800e01e:	b085      	sub	sp, #20
 800e020:	af00      	add	r7, sp, #0
 800e022:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	695b      	ldr	r3, [r3, #20]
 800e02a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	699a      	ldr	r2, [r3, #24]
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	f042 0208 	orr.w	r2, r2, #8
 800e03a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	699a      	ldr	r2, [r3, #24]
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	f042 0210 	orr.w	r2, r2, #16
 800e04a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	681a      	ldr	r2, [r3, #0]
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	f022 0201 	bic.w	r2, r2, #1
 800e05a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	6919      	ldr	r1, [r3, #16]
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	681a      	ldr	r2, [r3, #0]
 800e066:	4b3c      	ldr	r3, [pc, #240]	; (800e158 <SPI_CloseTransfer+0x13c>)
 800e068:	400b      	ands	r3, r1
 800e06a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	689a      	ldr	r2, [r3, #8]
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800e07a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e082:	b2db      	uxtb	r3, r3
 800e084:	2b04      	cmp	r3, #4
 800e086:	d014      	beq.n	800e0b2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	f003 0320 	and.w	r3, r3, #32
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d00f      	beq.n	800e0b2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e098:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	699a      	ldr	r2, [r3, #24]
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	f042 0220 	orr.w	r2, r2, #32
 800e0b0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e0b8:	b2db      	uxtb	r3, r3
 800e0ba:	2b03      	cmp	r3, #3
 800e0bc:	d014      	beq.n	800e0e8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d00f      	beq.n	800e0e8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e0ce:	f043 0204 	orr.w	r2, r3, #4
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	699a      	ldr	r2, [r3, #24]
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e0e6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d00f      	beq.n	800e112 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e0f8:	f043 0201 	orr.w	r2, r3, #1
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	699a      	ldr	r2, [r3, #24]
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e110:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d00f      	beq.n	800e13c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e122:	f043 0208 	orr.w	r2, r3, #8
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	699a      	ldr	r2, [r3, #24]
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e13a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	2200      	movs	r2, #0
 800e140:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	2200      	movs	r2, #0
 800e148:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800e14c:	bf00      	nop
 800e14e:	3714      	adds	r7, #20
 800e150:	46bd      	mov	sp, r7
 800e152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e156:	4770      	bx	lr
 800e158:	fffffc90 	.word	0xfffffc90

0800e15c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800e15c:	b480      	push	{r7}
 800e15e:	b085      	sub	sp, #20
 800e160:	af00      	add	r7, sp, #0
 800e162:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e168:	095b      	lsrs	r3, r3, #5
 800e16a:	3301      	adds	r3, #1
 800e16c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	68db      	ldr	r3, [r3, #12]
 800e172:	3301      	adds	r3, #1
 800e174:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800e176:	68bb      	ldr	r3, [r7, #8]
 800e178:	3307      	adds	r3, #7
 800e17a:	08db      	lsrs	r3, r3, #3
 800e17c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800e17e:	68bb      	ldr	r3, [r7, #8]
 800e180:	68fa      	ldr	r2, [r7, #12]
 800e182:	fb02 f303 	mul.w	r3, r2, r3
}
 800e186:	4618      	mov	r0, r3
 800e188:	3714      	adds	r7, #20
 800e18a:	46bd      	mov	sp, r7
 800e18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e190:	4770      	bx	lr

0800e192 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e192:	b580      	push	{r7, lr}
 800e194:	b082      	sub	sp, #8
 800e196:	af00      	add	r7, sp, #0
 800e198:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d101      	bne.n	800e1a4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e1a0:	2301      	movs	r3, #1
 800e1a2:	e049      	b.n	800e238 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e1aa:	b2db      	uxtb	r3, r3
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d106      	bne.n	800e1be <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	2200      	movs	r2, #0
 800e1b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e1b8:	6878      	ldr	r0, [r7, #4]
 800e1ba:	f7f4 ff47 	bl	800304c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	2202      	movs	r2, #2
 800e1c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	681a      	ldr	r2, [r3, #0]
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	3304      	adds	r3, #4
 800e1ce:	4619      	mov	r1, r3
 800e1d0:	4610      	mov	r0, r2
 800e1d2:	f000 fe7d 	bl	800eed0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	2201      	movs	r2, #1
 800e1da:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	2201      	movs	r2, #1
 800e1e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	2201      	movs	r2, #1
 800e1ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	2201      	movs	r2, #1
 800e1f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	2201      	movs	r2, #1
 800e1fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	2201      	movs	r2, #1
 800e202:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	2201      	movs	r2, #1
 800e20a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	2201      	movs	r2, #1
 800e212:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	2201      	movs	r2, #1
 800e21a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	2201      	movs	r2, #1
 800e222:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	2201      	movs	r2, #1
 800e22a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	2201      	movs	r2, #1
 800e232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e236:	2300      	movs	r3, #0
}
 800e238:	4618      	mov	r0, r3
 800e23a:	3708      	adds	r7, #8
 800e23c:	46bd      	mov	sp, r7
 800e23e:	bd80      	pop	{r7, pc}

0800e240 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e240:	b480      	push	{r7}
 800e242:	b085      	sub	sp, #20
 800e244:	af00      	add	r7, sp, #0
 800e246:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e24e:	b2db      	uxtb	r3, r3
 800e250:	2b01      	cmp	r3, #1
 800e252:	d001      	beq.n	800e258 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e254:	2301      	movs	r3, #1
 800e256:	e054      	b.n	800e302 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	2202      	movs	r2, #2
 800e25c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	68da      	ldr	r2, [r3, #12]
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	f042 0201 	orr.w	r2, r2, #1
 800e26e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	4a26      	ldr	r2, [pc, #152]	; (800e310 <HAL_TIM_Base_Start_IT+0xd0>)
 800e276:	4293      	cmp	r3, r2
 800e278:	d022      	beq.n	800e2c0 <HAL_TIM_Base_Start_IT+0x80>
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e282:	d01d      	beq.n	800e2c0 <HAL_TIM_Base_Start_IT+0x80>
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	4a22      	ldr	r2, [pc, #136]	; (800e314 <HAL_TIM_Base_Start_IT+0xd4>)
 800e28a:	4293      	cmp	r3, r2
 800e28c:	d018      	beq.n	800e2c0 <HAL_TIM_Base_Start_IT+0x80>
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	4a21      	ldr	r2, [pc, #132]	; (800e318 <HAL_TIM_Base_Start_IT+0xd8>)
 800e294:	4293      	cmp	r3, r2
 800e296:	d013      	beq.n	800e2c0 <HAL_TIM_Base_Start_IT+0x80>
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	4a1f      	ldr	r2, [pc, #124]	; (800e31c <HAL_TIM_Base_Start_IT+0xdc>)
 800e29e:	4293      	cmp	r3, r2
 800e2a0:	d00e      	beq.n	800e2c0 <HAL_TIM_Base_Start_IT+0x80>
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	4a1e      	ldr	r2, [pc, #120]	; (800e320 <HAL_TIM_Base_Start_IT+0xe0>)
 800e2a8:	4293      	cmp	r3, r2
 800e2aa:	d009      	beq.n	800e2c0 <HAL_TIM_Base_Start_IT+0x80>
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	4a1c      	ldr	r2, [pc, #112]	; (800e324 <HAL_TIM_Base_Start_IT+0xe4>)
 800e2b2:	4293      	cmp	r3, r2
 800e2b4:	d004      	beq.n	800e2c0 <HAL_TIM_Base_Start_IT+0x80>
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	4a1b      	ldr	r2, [pc, #108]	; (800e328 <HAL_TIM_Base_Start_IT+0xe8>)
 800e2bc:	4293      	cmp	r3, r2
 800e2be:	d115      	bne.n	800e2ec <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	689a      	ldr	r2, [r3, #8]
 800e2c6:	4b19      	ldr	r3, [pc, #100]	; (800e32c <HAL_TIM_Base_Start_IT+0xec>)
 800e2c8:	4013      	ands	r3, r2
 800e2ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	2b06      	cmp	r3, #6
 800e2d0:	d015      	beq.n	800e2fe <HAL_TIM_Base_Start_IT+0xbe>
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e2d8:	d011      	beq.n	800e2fe <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	681a      	ldr	r2, [r3, #0]
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	f042 0201 	orr.w	r2, r2, #1
 800e2e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e2ea:	e008      	b.n	800e2fe <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	681a      	ldr	r2, [r3, #0]
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	f042 0201 	orr.w	r2, r2, #1
 800e2fa:	601a      	str	r2, [r3, #0]
 800e2fc:	e000      	b.n	800e300 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e2fe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e300:	2300      	movs	r3, #0
}
 800e302:	4618      	mov	r0, r3
 800e304:	3714      	adds	r7, #20
 800e306:	46bd      	mov	sp, r7
 800e308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e30c:	4770      	bx	lr
 800e30e:	bf00      	nop
 800e310:	40010000 	.word	0x40010000
 800e314:	40000400 	.word	0x40000400
 800e318:	40000800 	.word	0x40000800
 800e31c:	40000c00 	.word	0x40000c00
 800e320:	40010400 	.word	0x40010400
 800e324:	40001800 	.word	0x40001800
 800e328:	40014000 	.word	0x40014000
 800e32c:	00010007 	.word	0x00010007

0800e330 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e330:	b580      	push	{r7, lr}
 800e332:	b084      	sub	sp, #16
 800e334:	af00      	add	r7, sp, #0
 800e336:	6078      	str	r0, [r7, #4]
 800e338:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e33a:	2300      	movs	r3, #0
 800e33c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e33e:	683b      	ldr	r3, [r7, #0]
 800e340:	2b00      	cmp	r3, #0
 800e342:	d109      	bne.n	800e358 <HAL_TIM_OC_Start_IT+0x28>
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e34a:	b2db      	uxtb	r3, r3
 800e34c:	2b01      	cmp	r3, #1
 800e34e:	bf14      	ite	ne
 800e350:	2301      	movne	r3, #1
 800e352:	2300      	moveq	r3, #0
 800e354:	b2db      	uxtb	r3, r3
 800e356:	e03c      	b.n	800e3d2 <HAL_TIM_OC_Start_IT+0xa2>
 800e358:	683b      	ldr	r3, [r7, #0]
 800e35a:	2b04      	cmp	r3, #4
 800e35c:	d109      	bne.n	800e372 <HAL_TIM_OC_Start_IT+0x42>
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800e364:	b2db      	uxtb	r3, r3
 800e366:	2b01      	cmp	r3, #1
 800e368:	bf14      	ite	ne
 800e36a:	2301      	movne	r3, #1
 800e36c:	2300      	moveq	r3, #0
 800e36e:	b2db      	uxtb	r3, r3
 800e370:	e02f      	b.n	800e3d2 <HAL_TIM_OC_Start_IT+0xa2>
 800e372:	683b      	ldr	r3, [r7, #0]
 800e374:	2b08      	cmp	r3, #8
 800e376:	d109      	bne.n	800e38c <HAL_TIM_OC_Start_IT+0x5c>
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e37e:	b2db      	uxtb	r3, r3
 800e380:	2b01      	cmp	r3, #1
 800e382:	bf14      	ite	ne
 800e384:	2301      	movne	r3, #1
 800e386:	2300      	moveq	r3, #0
 800e388:	b2db      	uxtb	r3, r3
 800e38a:	e022      	b.n	800e3d2 <HAL_TIM_OC_Start_IT+0xa2>
 800e38c:	683b      	ldr	r3, [r7, #0]
 800e38e:	2b0c      	cmp	r3, #12
 800e390:	d109      	bne.n	800e3a6 <HAL_TIM_OC_Start_IT+0x76>
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e398:	b2db      	uxtb	r3, r3
 800e39a:	2b01      	cmp	r3, #1
 800e39c:	bf14      	ite	ne
 800e39e:	2301      	movne	r3, #1
 800e3a0:	2300      	moveq	r3, #0
 800e3a2:	b2db      	uxtb	r3, r3
 800e3a4:	e015      	b.n	800e3d2 <HAL_TIM_OC_Start_IT+0xa2>
 800e3a6:	683b      	ldr	r3, [r7, #0]
 800e3a8:	2b10      	cmp	r3, #16
 800e3aa:	d109      	bne.n	800e3c0 <HAL_TIM_OC_Start_IT+0x90>
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e3b2:	b2db      	uxtb	r3, r3
 800e3b4:	2b01      	cmp	r3, #1
 800e3b6:	bf14      	ite	ne
 800e3b8:	2301      	movne	r3, #1
 800e3ba:	2300      	moveq	r3, #0
 800e3bc:	b2db      	uxtb	r3, r3
 800e3be:	e008      	b.n	800e3d2 <HAL_TIM_OC_Start_IT+0xa2>
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e3c6:	b2db      	uxtb	r3, r3
 800e3c8:	2b01      	cmp	r3, #1
 800e3ca:	bf14      	ite	ne
 800e3cc:	2301      	movne	r3, #1
 800e3ce:	2300      	moveq	r3, #0
 800e3d0:	b2db      	uxtb	r3, r3
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d001      	beq.n	800e3da <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800e3d6:	2301      	movs	r3, #1
 800e3d8:	e0ec      	b.n	800e5b4 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e3da:	683b      	ldr	r3, [r7, #0]
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d104      	bne.n	800e3ea <HAL_TIM_OC_Start_IT+0xba>
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	2202      	movs	r2, #2
 800e3e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e3e8:	e023      	b.n	800e432 <HAL_TIM_OC_Start_IT+0x102>
 800e3ea:	683b      	ldr	r3, [r7, #0]
 800e3ec:	2b04      	cmp	r3, #4
 800e3ee:	d104      	bne.n	800e3fa <HAL_TIM_OC_Start_IT+0xca>
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	2202      	movs	r2, #2
 800e3f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e3f8:	e01b      	b.n	800e432 <HAL_TIM_OC_Start_IT+0x102>
 800e3fa:	683b      	ldr	r3, [r7, #0]
 800e3fc:	2b08      	cmp	r3, #8
 800e3fe:	d104      	bne.n	800e40a <HAL_TIM_OC_Start_IT+0xda>
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	2202      	movs	r2, #2
 800e404:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e408:	e013      	b.n	800e432 <HAL_TIM_OC_Start_IT+0x102>
 800e40a:	683b      	ldr	r3, [r7, #0]
 800e40c:	2b0c      	cmp	r3, #12
 800e40e:	d104      	bne.n	800e41a <HAL_TIM_OC_Start_IT+0xea>
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	2202      	movs	r2, #2
 800e414:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e418:	e00b      	b.n	800e432 <HAL_TIM_OC_Start_IT+0x102>
 800e41a:	683b      	ldr	r3, [r7, #0]
 800e41c:	2b10      	cmp	r3, #16
 800e41e:	d104      	bne.n	800e42a <HAL_TIM_OC_Start_IT+0xfa>
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	2202      	movs	r2, #2
 800e424:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e428:	e003      	b.n	800e432 <HAL_TIM_OC_Start_IT+0x102>
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	2202      	movs	r2, #2
 800e42e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800e432:	683b      	ldr	r3, [r7, #0]
 800e434:	2b0c      	cmp	r3, #12
 800e436:	d841      	bhi.n	800e4bc <HAL_TIM_OC_Start_IT+0x18c>
 800e438:	a201      	add	r2, pc, #4	; (adr r2, 800e440 <HAL_TIM_OC_Start_IT+0x110>)
 800e43a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e43e:	bf00      	nop
 800e440:	0800e475 	.word	0x0800e475
 800e444:	0800e4bd 	.word	0x0800e4bd
 800e448:	0800e4bd 	.word	0x0800e4bd
 800e44c:	0800e4bd 	.word	0x0800e4bd
 800e450:	0800e487 	.word	0x0800e487
 800e454:	0800e4bd 	.word	0x0800e4bd
 800e458:	0800e4bd 	.word	0x0800e4bd
 800e45c:	0800e4bd 	.word	0x0800e4bd
 800e460:	0800e499 	.word	0x0800e499
 800e464:	0800e4bd 	.word	0x0800e4bd
 800e468:	0800e4bd 	.word	0x0800e4bd
 800e46c:	0800e4bd 	.word	0x0800e4bd
 800e470:	0800e4ab 	.word	0x0800e4ab
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	68da      	ldr	r2, [r3, #12]
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	f042 0202 	orr.w	r2, r2, #2
 800e482:	60da      	str	r2, [r3, #12]
      break;
 800e484:	e01d      	b.n	800e4c2 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	68da      	ldr	r2, [r3, #12]
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	f042 0204 	orr.w	r2, r2, #4
 800e494:	60da      	str	r2, [r3, #12]
      break;
 800e496:	e014      	b.n	800e4c2 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	68da      	ldr	r2, [r3, #12]
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	f042 0208 	orr.w	r2, r2, #8
 800e4a6:	60da      	str	r2, [r3, #12]
      break;
 800e4a8:	e00b      	b.n	800e4c2 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	68da      	ldr	r2, [r3, #12]
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	f042 0210 	orr.w	r2, r2, #16
 800e4b8:	60da      	str	r2, [r3, #12]
      break;
 800e4ba:	e002      	b.n	800e4c2 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800e4bc:	2301      	movs	r3, #1
 800e4be:	73fb      	strb	r3, [r7, #15]
      break;
 800e4c0:	bf00      	nop
  }

  if (status == HAL_OK)
 800e4c2:	7bfb      	ldrb	r3, [r7, #15]
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d174      	bne.n	800e5b2 <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	2201      	movs	r2, #1
 800e4ce:	6839      	ldr	r1, [r7, #0]
 800e4d0:	4618      	mov	r0, r3
 800e4d2:	f001 f917 	bl	800f704 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	4a38      	ldr	r2, [pc, #224]	; (800e5bc <HAL_TIM_OC_Start_IT+0x28c>)
 800e4dc:	4293      	cmp	r3, r2
 800e4de:	d013      	beq.n	800e508 <HAL_TIM_OC_Start_IT+0x1d8>
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	4a36      	ldr	r2, [pc, #216]	; (800e5c0 <HAL_TIM_OC_Start_IT+0x290>)
 800e4e6:	4293      	cmp	r3, r2
 800e4e8:	d00e      	beq.n	800e508 <HAL_TIM_OC_Start_IT+0x1d8>
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	4a35      	ldr	r2, [pc, #212]	; (800e5c4 <HAL_TIM_OC_Start_IT+0x294>)
 800e4f0:	4293      	cmp	r3, r2
 800e4f2:	d009      	beq.n	800e508 <HAL_TIM_OC_Start_IT+0x1d8>
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	4a33      	ldr	r2, [pc, #204]	; (800e5c8 <HAL_TIM_OC_Start_IT+0x298>)
 800e4fa:	4293      	cmp	r3, r2
 800e4fc:	d004      	beq.n	800e508 <HAL_TIM_OC_Start_IT+0x1d8>
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	4a32      	ldr	r2, [pc, #200]	; (800e5cc <HAL_TIM_OC_Start_IT+0x29c>)
 800e504:	4293      	cmp	r3, r2
 800e506:	d101      	bne.n	800e50c <HAL_TIM_OC_Start_IT+0x1dc>
 800e508:	2301      	movs	r3, #1
 800e50a:	e000      	b.n	800e50e <HAL_TIM_OC_Start_IT+0x1de>
 800e50c:	2300      	movs	r3, #0
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d007      	beq.n	800e522 <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e520:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	4a25      	ldr	r2, [pc, #148]	; (800e5bc <HAL_TIM_OC_Start_IT+0x28c>)
 800e528:	4293      	cmp	r3, r2
 800e52a:	d022      	beq.n	800e572 <HAL_TIM_OC_Start_IT+0x242>
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e534:	d01d      	beq.n	800e572 <HAL_TIM_OC_Start_IT+0x242>
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	4a25      	ldr	r2, [pc, #148]	; (800e5d0 <HAL_TIM_OC_Start_IT+0x2a0>)
 800e53c:	4293      	cmp	r3, r2
 800e53e:	d018      	beq.n	800e572 <HAL_TIM_OC_Start_IT+0x242>
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	4a23      	ldr	r2, [pc, #140]	; (800e5d4 <HAL_TIM_OC_Start_IT+0x2a4>)
 800e546:	4293      	cmp	r3, r2
 800e548:	d013      	beq.n	800e572 <HAL_TIM_OC_Start_IT+0x242>
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	4a22      	ldr	r2, [pc, #136]	; (800e5d8 <HAL_TIM_OC_Start_IT+0x2a8>)
 800e550:	4293      	cmp	r3, r2
 800e552:	d00e      	beq.n	800e572 <HAL_TIM_OC_Start_IT+0x242>
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	4a19      	ldr	r2, [pc, #100]	; (800e5c0 <HAL_TIM_OC_Start_IT+0x290>)
 800e55a:	4293      	cmp	r3, r2
 800e55c:	d009      	beq.n	800e572 <HAL_TIM_OC_Start_IT+0x242>
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	4a1e      	ldr	r2, [pc, #120]	; (800e5dc <HAL_TIM_OC_Start_IT+0x2ac>)
 800e564:	4293      	cmp	r3, r2
 800e566:	d004      	beq.n	800e572 <HAL_TIM_OC_Start_IT+0x242>
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	4a15      	ldr	r2, [pc, #84]	; (800e5c4 <HAL_TIM_OC_Start_IT+0x294>)
 800e56e:	4293      	cmp	r3, r2
 800e570:	d115      	bne.n	800e59e <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	689a      	ldr	r2, [r3, #8]
 800e578:	4b19      	ldr	r3, [pc, #100]	; (800e5e0 <HAL_TIM_OC_Start_IT+0x2b0>)
 800e57a:	4013      	ands	r3, r2
 800e57c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e57e:	68bb      	ldr	r3, [r7, #8]
 800e580:	2b06      	cmp	r3, #6
 800e582:	d015      	beq.n	800e5b0 <HAL_TIM_OC_Start_IT+0x280>
 800e584:	68bb      	ldr	r3, [r7, #8]
 800e586:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e58a:	d011      	beq.n	800e5b0 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	681a      	ldr	r2, [r3, #0]
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	f042 0201 	orr.w	r2, r2, #1
 800e59a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e59c:	e008      	b.n	800e5b0 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	681a      	ldr	r2, [r3, #0]
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	f042 0201 	orr.w	r2, r2, #1
 800e5ac:	601a      	str	r2, [r3, #0]
 800e5ae:	e000      	b.n	800e5b2 <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e5b0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800e5b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5b4:	4618      	mov	r0, r3
 800e5b6:	3710      	adds	r7, #16
 800e5b8:	46bd      	mov	sp, r7
 800e5ba:	bd80      	pop	{r7, pc}
 800e5bc:	40010000 	.word	0x40010000
 800e5c0:	40010400 	.word	0x40010400
 800e5c4:	40014000 	.word	0x40014000
 800e5c8:	40014400 	.word	0x40014400
 800e5cc:	40014800 	.word	0x40014800
 800e5d0:	40000400 	.word	0x40000400
 800e5d4:	40000800 	.word	0x40000800
 800e5d8:	40000c00 	.word	0x40000c00
 800e5dc:	40001800 	.word	0x40001800
 800e5e0:	00010007 	.word	0x00010007

0800e5e4 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e5e4:	b580      	push	{r7, lr}
 800e5e6:	b084      	sub	sp, #16
 800e5e8:	af00      	add	r7, sp, #0
 800e5ea:	6078      	str	r0, [r7, #4]
 800e5ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e5ee:	2300      	movs	r3, #0
 800e5f0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800e5f2:	683b      	ldr	r3, [r7, #0]
 800e5f4:	2b0c      	cmp	r3, #12
 800e5f6:	d841      	bhi.n	800e67c <HAL_TIM_OC_Stop_IT+0x98>
 800e5f8:	a201      	add	r2, pc, #4	; (adr r2, 800e600 <HAL_TIM_OC_Stop_IT+0x1c>)
 800e5fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5fe:	bf00      	nop
 800e600:	0800e635 	.word	0x0800e635
 800e604:	0800e67d 	.word	0x0800e67d
 800e608:	0800e67d 	.word	0x0800e67d
 800e60c:	0800e67d 	.word	0x0800e67d
 800e610:	0800e647 	.word	0x0800e647
 800e614:	0800e67d 	.word	0x0800e67d
 800e618:	0800e67d 	.word	0x0800e67d
 800e61c:	0800e67d 	.word	0x0800e67d
 800e620:	0800e659 	.word	0x0800e659
 800e624:	0800e67d 	.word	0x0800e67d
 800e628:	0800e67d 	.word	0x0800e67d
 800e62c:	0800e67d 	.word	0x0800e67d
 800e630:	0800e66b 	.word	0x0800e66b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	68da      	ldr	r2, [r3, #12]
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	f022 0202 	bic.w	r2, r2, #2
 800e642:	60da      	str	r2, [r3, #12]
      break;
 800e644:	e01d      	b.n	800e682 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	68da      	ldr	r2, [r3, #12]
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	f022 0204 	bic.w	r2, r2, #4
 800e654:	60da      	str	r2, [r3, #12]
      break;
 800e656:	e014      	b.n	800e682 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	68da      	ldr	r2, [r3, #12]
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	f022 0208 	bic.w	r2, r2, #8
 800e666:	60da      	str	r2, [r3, #12]
      break;
 800e668:	e00b      	b.n	800e682 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	68da      	ldr	r2, [r3, #12]
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	f022 0210 	bic.w	r2, r2, #16
 800e678:	60da      	str	r2, [r3, #12]
      break;
 800e67a:	e002      	b.n	800e682 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800e67c:	2301      	movs	r3, #1
 800e67e:	73fb      	strb	r3, [r7, #15]
      break;
 800e680:	bf00      	nop
  }

  if (status == HAL_OK)
 800e682:	7bfb      	ldrb	r3, [r7, #15]
 800e684:	2b00      	cmp	r3, #0
 800e686:	f040 8081 	bne.w	800e78c <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	2200      	movs	r2, #0
 800e690:	6839      	ldr	r1, [r7, #0]
 800e692:	4618      	mov	r0, r3
 800e694:	f001 f836 	bl	800f704 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	4a3e      	ldr	r2, [pc, #248]	; (800e798 <HAL_TIM_OC_Stop_IT+0x1b4>)
 800e69e:	4293      	cmp	r3, r2
 800e6a0:	d013      	beq.n	800e6ca <HAL_TIM_OC_Stop_IT+0xe6>
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	4a3d      	ldr	r2, [pc, #244]	; (800e79c <HAL_TIM_OC_Stop_IT+0x1b8>)
 800e6a8:	4293      	cmp	r3, r2
 800e6aa:	d00e      	beq.n	800e6ca <HAL_TIM_OC_Stop_IT+0xe6>
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	4a3b      	ldr	r2, [pc, #236]	; (800e7a0 <HAL_TIM_OC_Stop_IT+0x1bc>)
 800e6b2:	4293      	cmp	r3, r2
 800e6b4:	d009      	beq.n	800e6ca <HAL_TIM_OC_Stop_IT+0xe6>
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	4a3a      	ldr	r2, [pc, #232]	; (800e7a4 <HAL_TIM_OC_Stop_IT+0x1c0>)
 800e6bc:	4293      	cmp	r3, r2
 800e6be:	d004      	beq.n	800e6ca <HAL_TIM_OC_Stop_IT+0xe6>
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	4a38      	ldr	r2, [pc, #224]	; (800e7a8 <HAL_TIM_OC_Stop_IT+0x1c4>)
 800e6c6:	4293      	cmp	r3, r2
 800e6c8:	d101      	bne.n	800e6ce <HAL_TIM_OC_Stop_IT+0xea>
 800e6ca:	2301      	movs	r3, #1
 800e6cc:	e000      	b.n	800e6d0 <HAL_TIM_OC_Stop_IT+0xec>
 800e6ce:	2300      	movs	r3, #0
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d017      	beq.n	800e704 <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	6a1a      	ldr	r2, [r3, #32]
 800e6da:	f241 1311 	movw	r3, #4369	; 0x1111
 800e6de:	4013      	ands	r3, r2
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d10f      	bne.n	800e704 <HAL_TIM_OC_Stop_IT+0x120>
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	6a1a      	ldr	r2, [r3, #32]
 800e6ea:	f240 4344 	movw	r3, #1092	; 0x444
 800e6ee:	4013      	ands	r3, r2
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d107      	bne.n	800e704 <HAL_TIM_OC_Stop_IT+0x120>
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e702:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	6a1a      	ldr	r2, [r3, #32]
 800e70a:	f241 1311 	movw	r3, #4369	; 0x1111
 800e70e:	4013      	ands	r3, r2
 800e710:	2b00      	cmp	r3, #0
 800e712:	d10f      	bne.n	800e734 <HAL_TIM_OC_Stop_IT+0x150>
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	6a1a      	ldr	r2, [r3, #32]
 800e71a:	f240 4344 	movw	r3, #1092	; 0x444
 800e71e:	4013      	ands	r3, r2
 800e720:	2b00      	cmp	r3, #0
 800e722:	d107      	bne.n	800e734 <HAL_TIM_OC_Stop_IT+0x150>
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	681a      	ldr	r2, [r3, #0]
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	f022 0201 	bic.w	r2, r2, #1
 800e732:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800e734:	683b      	ldr	r3, [r7, #0]
 800e736:	2b00      	cmp	r3, #0
 800e738:	d104      	bne.n	800e744 <HAL_TIM_OC_Stop_IT+0x160>
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	2201      	movs	r2, #1
 800e73e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e742:	e023      	b.n	800e78c <HAL_TIM_OC_Stop_IT+0x1a8>
 800e744:	683b      	ldr	r3, [r7, #0]
 800e746:	2b04      	cmp	r3, #4
 800e748:	d104      	bne.n	800e754 <HAL_TIM_OC_Stop_IT+0x170>
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	2201      	movs	r2, #1
 800e74e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e752:	e01b      	b.n	800e78c <HAL_TIM_OC_Stop_IT+0x1a8>
 800e754:	683b      	ldr	r3, [r7, #0]
 800e756:	2b08      	cmp	r3, #8
 800e758:	d104      	bne.n	800e764 <HAL_TIM_OC_Stop_IT+0x180>
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	2201      	movs	r2, #1
 800e75e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e762:	e013      	b.n	800e78c <HAL_TIM_OC_Stop_IT+0x1a8>
 800e764:	683b      	ldr	r3, [r7, #0]
 800e766:	2b0c      	cmp	r3, #12
 800e768:	d104      	bne.n	800e774 <HAL_TIM_OC_Stop_IT+0x190>
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	2201      	movs	r2, #1
 800e76e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e772:	e00b      	b.n	800e78c <HAL_TIM_OC_Stop_IT+0x1a8>
 800e774:	683b      	ldr	r3, [r7, #0]
 800e776:	2b10      	cmp	r3, #16
 800e778:	d104      	bne.n	800e784 <HAL_TIM_OC_Stop_IT+0x1a0>
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	2201      	movs	r2, #1
 800e77e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e782:	e003      	b.n	800e78c <HAL_TIM_OC_Stop_IT+0x1a8>
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	2201      	movs	r2, #1
 800e788:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800e78c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e78e:	4618      	mov	r0, r3
 800e790:	3710      	adds	r7, #16
 800e792:	46bd      	mov	sp, r7
 800e794:	bd80      	pop	{r7, pc}
 800e796:	bf00      	nop
 800e798:	40010000 	.word	0x40010000
 800e79c:	40010400 	.word	0x40010400
 800e7a0:	40014000 	.word	0x40014000
 800e7a4:	40014400 	.word	0x40014400
 800e7a8:	40014800 	.word	0x40014800

0800e7ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e7ac:	b580      	push	{r7, lr}
 800e7ae:	b082      	sub	sp, #8
 800e7b0:	af00      	add	r7, sp, #0
 800e7b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d101      	bne.n	800e7be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e7ba:	2301      	movs	r3, #1
 800e7bc:	e049      	b.n	800e852 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e7c4:	b2db      	uxtb	r3, r3
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d106      	bne.n	800e7d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	2200      	movs	r2, #0
 800e7ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e7d2:	6878      	ldr	r0, [r7, #4]
 800e7d4:	f000 f841 	bl	800e85a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	2202      	movs	r2, #2
 800e7dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	681a      	ldr	r2, [r3, #0]
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	3304      	adds	r3, #4
 800e7e8:	4619      	mov	r1, r3
 800e7ea:	4610      	mov	r0, r2
 800e7ec:	f000 fb70 	bl	800eed0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	2201      	movs	r2, #1
 800e7f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	2201      	movs	r2, #1
 800e7fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	2201      	movs	r2, #1
 800e804:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	2201      	movs	r2, #1
 800e80c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	2201      	movs	r2, #1
 800e814:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	2201      	movs	r2, #1
 800e81c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	2201      	movs	r2, #1
 800e824:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	2201      	movs	r2, #1
 800e82c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	2201      	movs	r2, #1
 800e834:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	2201      	movs	r2, #1
 800e83c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	2201      	movs	r2, #1
 800e844:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	2201      	movs	r2, #1
 800e84c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e850:	2300      	movs	r3, #0
}
 800e852:	4618      	mov	r0, r3
 800e854:	3708      	adds	r7, #8
 800e856:	46bd      	mov	sp, r7
 800e858:	bd80      	pop	{r7, pc}

0800e85a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800e85a:	b480      	push	{r7}
 800e85c:	b083      	sub	sp, #12
 800e85e:	af00      	add	r7, sp, #0
 800e860:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800e862:	bf00      	nop
 800e864:	370c      	adds	r7, #12
 800e866:	46bd      	mov	sp, r7
 800e868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e86c:	4770      	bx	lr

0800e86e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e86e:	b580      	push	{r7, lr}
 800e870:	b084      	sub	sp, #16
 800e872:	af00      	add	r7, sp, #0
 800e874:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	68db      	ldr	r3, [r3, #12]
 800e87c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	691b      	ldr	r3, [r3, #16]
 800e884:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800e886:	68bb      	ldr	r3, [r7, #8]
 800e888:	f003 0302 	and.w	r3, r3, #2
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d020      	beq.n	800e8d2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	f003 0302 	and.w	r3, r3, #2
 800e896:	2b00      	cmp	r3, #0
 800e898:	d01b      	beq.n	800e8d2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	f06f 0202 	mvn.w	r2, #2
 800e8a2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	2201      	movs	r2, #1
 800e8a8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	699b      	ldr	r3, [r3, #24]
 800e8b0:	f003 0303 	and.w	r3, r3, #3
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d003      	beq.n	800e8c0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e8b8:	6878      	ldr	r0, [r7, #4]
 800e8ba:	f000 faeb 	bl	800ee94 <HAL_TIM_IC_CaptureCallback>
 800e8be:	e005      	b.n	800e8cc <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e8c0:	6878      	ldr	r0, [r7, #4]
 800e8c2:	f7f1 fe8f 	bl	80005e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e8c6:	6878      	ldr	r0, [r7, #4]
 800e8c8:	f000 faee 	bl	800eea8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	2200      	movs	r2, #0
 800e8d0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800e8d2:	68bb      	ldr	r3, [r7, #8]
 800e8d4:	f003 0304 	and.w	r3, r3, #4
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d020      	beq.n	800e91e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	f003 0304 	and.w	r3, r3, #4
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d01b      	beq.n	800e91e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	f06f 0204 	mvn.w	r2, #4
 800e8ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	2202      	movs	r2, #2
 800e8f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	699b      	ldr	r3, [r3, #24]
 800e8fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e900:	2b00      	cmp	r3, #0
 800e902:	d003      	beq.n	800e90c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e904:	6878      	ldr	r0, [r7, #4]
 800e906:	f000 fac5 	bl	800ee94 <HAL_TIM_IC_CaptureCallback>
 800e90a:	e005      	b.n	800e918 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e90c:	6878      	ldr	r0, [r7, #4]
 800e90e:	f7f1 fe69 	bl	80005e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e912:	6878      	ldr	r0, [r7, #4]
 800e914:	f000 fac8 	bl	800eea8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	2200      	movs	r2, #0
 800e91c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800e91e:	68bb      	ldr	r3, [r7, #8]
 800e920:	f003 0308 	and.w	r3, r3, #8
 800e924:	2b00      	cmp	r3, #0
 800e926:	d020      	beq.n	800e96a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	f003 0308 	and.w	r3, r3, #8
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d01b      	beq.n	800e96a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	f06f 0208 	mvn.w	r2, #8
 800e93a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	2204      	movs	r2, #4
 800e940:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	69db      	ldr	r3, [r3, #28]
 800e948:	f003 0303 	and.w	r3, r3, #3
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d003      	beq.n	800e958 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e950:	6878      	ldr	r0, [r7, #4]
 800e952:	f000 fa9f 	bl	800ee94 <HAL_TIM_IC_CaptureCallback>
 800e956:	e005      	b.n	800e964 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e958:	6878      	ldr	r0, [r7, #4]
 800e95a:	f7f1 fe43 	bl	80005e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e95e:	6878      	ldr	r0, [r7, #4]
 800e960:	f000 faa2 	bl	800eea8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	2200      	movs	r2, #0
 800e968:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800e96a:	68bb      	ldr	r3, [r7, #8]
 800e96c:	f003 0310 	and.w	r3, r3, #16
 800e970:	2b00      	cmp	r3, #0
 800e972:	d020      	beq.n	800e9b6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	f003 0310 	and.w	r3, r3, #16
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d01b      	beq.n	800e9b6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	f06f 0210 	mvn.w	r2, #16
 800e986:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	2208      	movs	r2, #8
 800e98c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	69db      	ldr	r3, [r3, #28]
 800e994:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d003      	beq.n	800e9a4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e99c:	6878      	ldr	r0, [r7, #4]
 800e99e:	f000 fa79 	bl	800ee94 <HAL_TIM_IC_CaptureCallback>
 800e9a2:	e005      	b.n	800e9b0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e9a4:	6878      	ldr	r0, [r7, #4]
 800e9a6:	f7f1 fe1d 	bl	80005e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e9aa:	6878      	ldr	r0, [r7, #4]
 800e9ac:	f000 fa7c 	bl	800eea8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	2200      	movs	r2, #0
 800e9b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800e9b6:	68bb      	ldr	r3, [r7, #8]
 800e9b8:	f003 0301 	and.w	r3, r3, #1
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d00c      	beq.n	800e9da <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	f003 0301 	and.w	r3, r3, #1
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d007      	beq.n	800e9da <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	f06f 0201 	mvn.w	r2, #1
 800e9d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e9d4:	6878      	ldr	r0, [r7, #4]
 800e9d6:	f7f4 f813 	bl	8002a00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e9da:	68bb      	ldr	r3, [r7, #8]
 800e9dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d104      	bne.n	800e9ee <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800e9e4:	68bb      	ldr	r3, [r7, #8]
 800e9e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d00c      	beq.n	800ea08 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d007      	beq.n	800ea08 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800ea00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ea02:	6878      	ldr	r0, [r7, #4]
 800ea04:	f000 ffba 	bl	800f97c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800ea08:	68bb      	ldr	r3, [r7, #8]
 800ea0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d00c      	beq.n	800ea2c <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d007      	beq.n	800ea2c <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ea24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ea26:	6878      	ldr	r0, [r7, #4]
 800ea28:	f000 ffb2 	bl	800f990 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ea2c:	68bb      	ldr	r3, [r7, #8]
 800ea2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d00c      	beq.n	800ea50 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d007      	beq.n	800ea50 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ea48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ea4a:	6878      	ldr	r0, [r7, #4]
 800ea4c:	f000 fa36 	bl	800eebc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800ea50:	68bb      	ldr	r3, [r7, #8]
 800ea52:	f003 0320 	and.w	r3, r3, #32
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d00c      	beq.n	800ea74 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	f003 0320 	and.w	r3, r3, #32
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d007      	beq.n	800ea74 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	f06f 0220 	mvn.w	r2, #32
 800ea6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ea6e:	6878      	ldr	r0, [r7, #4]
 800ea70:	f000 ff7a 	bl	800f968 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ea74:	bf00      	nop
 800ea76:	3710      	adds	r7, #16
 800ea78:	46bd      	mov	sp, r7
 800ea7a:	bd80      	pop	{r7, pc}

0800ea7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ea7c:	b580      	push	{r7, lr}
 800ea7e:	b086      	sub	sp, #24
 800ea80:	af00      	add	r7, sp, #0
 800ea82:	60f8      	str	r0, [r7, #12]
 800ea84:	60b9      	str	r1, [r7, #8]
 800ea86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ea88:	2300      	movs	r3, #0
 800ea8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ea92:	2b01      	cmp	r3, #1
 800ea94:	d101      	bne.n	800ea9a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ea96:	2302      	movs	r3, #2
 800ea98:	e0ff      	b.n	800ec9a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	2201      	movs	r2, #1
 800ea9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	2b14      	cmp	r3, #20
 800eaa6:	f200 80f0 	bhi.w	800ec8a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800eaaa:	a201      	add	r2, pc, #4	; (adr r2, 800eab0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800eaac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eab0:	0800eb05 	.word	0x0800eb05
 800eab4:	0800ec8b 	.word	0x0800ec8b
 800eab8:	0800ec8b 	.word	0x0800ec8b
 800eabc:	0800ec8b 	.word	0x0800ec8b
 800eac0:	0800eb45 	.word	0x0800eb45
 800eac4:	0800ec8b 	.word	0x0800ec8b
 800eac8:	0800ec8b 	.word	0x0800ec8b
 800eacc:	0800ec8b 	.word	0x0800ec8b
 800ead0:	0800eb87 	.word	0x0800eb87
 800ead4:	0800ec8b 	.word	0x0800ec8b
 800ead8:	0800ec8b 	.word	0x0800ec8b
 800eadc:	0800ec8b 	.word	0x0800ec8b
 800eae0:	0800ebc7 	.word	0x0800ebc7
 800eae4:	0800ec8b 	.word	0x0800ec8b
 800eae8:	0800ec8b 	.word	0x0800ec8b
 800eaec:	0800ec8b 	.word	0x0800ec8b
 800eaf0:	0800ec09 	.word	0x0800ec09
 800eaf4:	0800ec8b 	.word	0x0800ec8b
 800eaf8:	0800ec8b 	.word	0x0800ec8b
 800eafc:	0800ec8b 	.word	0x0800ec8b
 800eb00:	0800ec49 	.word	0x0800ec49
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	68b9      	ldr	r1, [r7, #8]
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	f000 fa86 	bl	800f01c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	699a      	ldr	r2, [r3, #24]
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	f042 0208 	orr.w	r2, r2, #8
 800eb1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	699a      	ldr	r2, [r3, #24]
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	f022 0204 	bic.w	r2, r2, #4
 800eb2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	6999      	ldr	r1, [r3, #24]
 800eb36:	68bb      	ldr	r3, [r7, #8]
 800eb38:	691a      	ldr	r2, [r3, #16]
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	430a      	orrs	r2, r1
 800eb40:	619a      	str	r2, [r3, #24]
      break;
 800eb42:	e0a5      	b.n	800ec90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	68b9      	ldr	r1, [r7, #8]
 800eb4a:	4618      	mov	r0, r3
 800eb4c:	f000 faf6 	bl	800f13c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	699a      	ldr	r2, [r3, #24]
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800eb5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	699a      	ldr	r2, [r3, #24]
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800eb6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	6999      	ldr	r1, [r3, #24]
 800eb76:	68bb      	ldr	r3, [r7, #8]
 800eb78:	691b      	ldr	r3, [r3, #16]
 800eb7a:	021a      	lsls	r2, r3, #8
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	430a      	orrs	r2, r1
 800eb82:	619a      	str	r2, [r3, #24]
      break;
 800eb84:	e084      	b.n	800ec90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	68b9      	ldr	r1, [r7, #8]
 800eb8c:	4618      	mov	r0, r3
 800eb8e:	f000 fb5f 	bl	800f250 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	69da      	ldr	r2, [r3, #28]
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	f042 0208 	orr.w	r2, r2, #8
 800eba0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	69da      	ldr	r2, [r3, #28]
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	f022 0204 	bic.w	r2, r2, #4
 800ebb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	69d9      	ldr	r1, [r3, #28]
 800ebb8:	68bb      	ldr	r3, [r7, #8]
 800ebba:	691a      	ldr	r2, [r3, #16]
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	430a      	orrs	r2, r1
 800ebc2:	61da      	str	r2, [r3, #28]
      break;
 800ebc4:	e064      	b.n	800ec90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	68b9      	ldr	r1, [r7, #8]
 800ebcc:	4618      	mov	r0, r3
 800ebce:	f000 fbc7 	bl	800f360 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	69da      	ldr	r2, [r3, #28]
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ebe0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	69da      	ldr	r2, [r3, #28]
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ebf0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	69d9      	ldr	r1, [r3, #28]
 800ebf8:	68bb      	ldr	r3, [r7, #8]
 800ebfa:	691b      	ldr	r3, [r3, #16]
 800ebfc:	021a      	lsls	r2, r3, #8
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	430a      	orrs	r2, r1
 800ec04:	61da      	str	r2, [r3, #28]
      break;
 800ec06:	e043      	b.n	800ec90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	68b9      	ldr	r1, [r7, #8]
 800ec0e:	4618      	mov	r0, r3
 800ec10:	f000 fc10 	bl	800f434 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	f042 0208 	orr.w	r2, r2, #8
 800ec22:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	f022 0204 	bic.w	r2, r2, #4
 800ec32:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ec3a:	68bb      	ldr	r3, [r7, #8]
 800ec3c:	691a      	ldr	r2, [r3, #16]
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	430a      	orrs	r2, r1
 800ec44:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ec46:	e023      	b.n	800ec90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	68b9      	ldr	r1, [r7, #8]
 800ec4e:	4618      	mov	r0, r3
 800ec50:	f000 fc54 	bl	800f4fc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ec62:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ec72:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ec7a:	68bb      	ldr	r3, [r7, #8]
 800ec7c:	691b      	ldr	r3, [r3, #16]
 800ec7e:	021a      	lsls	r2, r3, #8
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	430a      	orrs	r2, r1
 800ec86:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ec88:	e002      	b.n	800ec90 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ec8a:	2301      	movs	r3, #1
 800ec8c:	75fb      	strb	r3, [r7, #23]
      break;
 800ec8e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	2200      	movs	r2, #0
 800ec94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ec98:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec9a:	4618      	mov	r0, r3
 800ec9c:	3718      	adds	r7, #24
 800ec9e:	46bd      	mov	sp, r7
 800eca0:	bd80      	pop	{r7, pc}
 800eca2:	bf00      	nop

0800eca4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800eca4:	b580      	push	{r7, lr}
 800eca6:	b084      	sub	sp, #16
 800eca8:	af00      	add	r7, sp, #0
 800ecaa:	6078      	str	r0, [r7, #4]
 800ecac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ecae:	2300      	movs	r3, #0
 800ecb0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ecb8:	2b01      	cmp	r3, #1
 800ecba:	d101      	bne.n	800ecc0 <HAL_TIM_ConfigClockSource+0x1c>
 800ecbc:	2302      	movs	r3, #2
 800ecbe:	e0dc      	b.n	800ee7a <HAL_TIM_ConfigClockSource+0x1d6>
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	2201      	movs	r2, #1
 800ecc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	2202      	movs	r2, #2
 800eccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	689b      	ldr	r3, [r3, #8]
 800ecd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ecd8:	68ba      	ldr	r2, [r7, #8]
 800ecda:	4b6a      	ldr	r3, [pc, #424]	; (800ee84 <HAL_TIM_ConfigClockSource+0x1e0>)
 800ecdc:	4013      	ands	r3, r2
 800ecde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ece0:	68bb      	ldr	r3, [r7, #8]
 800ece2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ece6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	68ba      	ldr	r2, [r7, #8]
 800ecee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ecf0:	683b      	ldr	r3, [r7, #0]
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	4a64      	ldr	r2, [pc, #400]	; (800ee88 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ecf6:	4293      	cmp	r3, r2
 800ecf8:	f000 80a9 	beq.w	800ee4e <HAL_TIM_ConfigClockSource+0x1aa>
 800ecfc:	4a62      	ldr	r2, [pc, #392]	; (800ee88 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ecfe:	4293      	cmp	r3, r2
 800ed00:	f200 80ae 	bhi.w	800ee60 <HAL_TIM_ConfigClockSource+0x1bc>
 800ed04:	4a61      	ldr	r2, [pc, #388]	; (800ee8c <HAL_TIM_ConfigClockSource+0x1e8>)
 800ed06:	4293      	cmp	r3, r2
 800ed08:	f000 80a1 	beq.w	800ee4e <HAL_TIM_ConfigClockSource+0x1aa>
 800ed0c:	4a5f      	ldr	r2, [pc, #380]	; (800ee8c <HAL_TIM_ConfigClockSource+0x1e8>)
 800ed0e:	4293      	cmp	r3, r2
 800ed10:	f200 80a6 	bhi.w	800ee60 <HAL_TIM_ConfigClockSource+0x1bc>
 800ed14:	4a5e      	ldr	r2, [pc, #376]	; (800ee90 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ed16:	4293      	cmp	r3, r2
 800ed18:	f000 8099 	beq.w	800ee4e <HAL_TIM_ConfigClockSource+0x1aa>
 800ed1c:	4a5c      	ldr	r2, [pc, #368]	; (800ee90 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ed1e:	4293      	cmp	r3, r2
 800ed20:	f200 809e 	bhi.w	800ee60 <HAL_TIM_ConfigClockSource+0x1bc>
 800ed24:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ed28:	f000 8091 	beq.w	800ee4e <HAL_TIM_ConfigClockSource+0x1aa>
 800ed2c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ed30:	f200 8096 	bhi.w	800ee60 <HAL_TIM_ConfigClockSource+0x1bc>
 800ed34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ed38:	f000 8089 	beq.w	800ee4e <HAL_TIM_ConfigClockSource+0x1aa>
 800ed3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ed40:	f200 808e 	bhi.w	800ee60 <HAL_TIM_ConfigClockSource+0x1bc>
 800ed44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ed48:	d03e      	beq.n	800edc8 <HAL_TIM_ConfigClockSource+0x124>
 800ed4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ed4e:	f200 8087 	bhi.w	800ee60 <HAL_TIM_ConfigClockSource+0x1bc>
 800ed52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ed56:	f000 8086 	beq.w	800ee66 <HAL_TIM_ConfigClockSource+0x1c2>
 800ed5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ed5e:	d87f      	bhi.n	800ee60 <HAL_TIM_ConfigClockSource+0x1bc>
 800ed60:	2b70      	cmp	r3, #112	; 0x70
 800ed62:	d01a      	beq.n	800ed9a <HAL_TIM_ConfigClockSource+0xf6>
 800ed64:	2b70      	cmp	r3, #112	; 0x70
 800ed66:	d87b      	bhi.n	800ee60 <HAL_TIM_ConfigClockSource+0x1bc>
 800ed68:	2b60      	cmp	r3, #96	; 0x60
 800ed6a:	d050      	beq.n	800ee0e <HAL_TIM_ConfigClockSource+0x16a>
 800ed6c:	2b60      	cmp	r3, #96	; 0x60
 800ed6e:	d877      	bhi.n	800ee60 <HAL_TIM_ConfigClockSource+0x1bc>
 800ed70:	2b50      	cmp	r3, #80	; 0x50
 800ed72:	d03c      	beq.n	800edee <HAL_TIM_ConfigClockSource+0x14a>
 800ed74:	2b50      	cmp	r3, #80	; 0x50
 800ed76:	d873      	bhi.n	800ee60 <HAL_TIM_ConfigClockSource+0x1bc>
 800ed78:	2b40      	cmp	r3, #64	; 0x40
 800ed7a:	d058      	beq.n	800ee2e <HAL_TIM_ConfigClockSource+0x18a>
 800ed7c:	2b40      	cmp	r3, #64	; 0x40
 800ed7e:	d86f      	bhi.n	800ee60 <HAL_TIM_ConfigClockSource+0x1bc>
 800ed80:	2b30      	cmp	r3, #48	; 0x30
 800ed82:	d064      	beq.n	800ee4e <HAL_TIM_ConfigClockSource+0x1aa>
 800ed84:	2b30      	cmp	r3, #48	; 0x30
 800ed86:	d86b      	bhi.n	800ee60 <HAL_TIM_ConfigClockSource+0x1bc>
 800ed88:	2b20      	cmp	r3, #32
 800ed8a:	d060      	beq.n	800ee4e <HAL_TIM_ConfigClockSource+0x1aa>
 800ed8c:	2b20      	cmp	r3, #32
 800ed8e:	d867      	bhi.n	800ee60 <HAL_TIM_ConfigClockSource+0x1bc>
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d05c      	beq.n	800ee4e <HAL_TIM_ConfigClockSource+0x1aa>
 800ed94:	2b10      	cmp	r3, #16
 800ed96:	d05a      	beq.n	800ee4e <HAL_TIM_ConfigClockSource+0x1aa>
 800ed98:	e062      	b.n	800ee60 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	6818      	ldr	r0, [r3, #0]
 800ed9e:	683b      	ldr	r3, [r7, #0]
 800eda0:	6899      	ldr	r1, [r3, #8]
 800eda2:	683b      	ldr	r3, [r7, #0]
 800eda4:	685a      	ldr	r2, [r3, #4]
 800eda6:	683b      	ldr	r3, [r7, #0]
 800eda8:	68db      	ldr	r3, [r3, #12]
 800edaa:	f000 fc8b 	bl	800f6c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	689b      	ldr	r3, [r3, #8]
 800edb4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800edb6:	68bb      	ldr	r3, [r7, #8]
 800edb8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800edbc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	68ba      	ldr	r2, [r7, #8]
 800edc4:	609a      	str	r2, [r3, #8]
      break;
 800edc6:	e04f      	b.n	800ee68 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	6818      	ldr	r0, [r3, #0]
 800edcc:	683b      	ldr	r3, [r7, #0]
 800edce:	6899      	ldr	r1, [r3, #8]
 800edd0:	683b      	ldr	r3, [r7, #0]
 800edd2:	685a      	ldr	r2, [r3, #4]
 800edd4:	683b      	ldr	r3, [r7, #0]
 800edd6:	68db      	ldr	r3, [r3, #12]
 800edd8:	f000 fc74 	bl	800f6c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	689a      	ldr	r2, [r3, #8]
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800edea:	609a      	str	r2, [r3, #8]
      break;
 800edec:	e03c      	b.n	800ee68 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	6818      	ldr	r0, [r3, #0]
 800edf2:	683b      	ldr	r3, [r7, #0]
 800edf4:	6859      	ldr	r1, [r3, #4]
 800edf6:	683b      	ldr	r3, [r7, #0]
 800edf8:	68db      	ldr	r3, [r3, #12]
 800edfa:	461a      	mov	r2, r3
 800edfc:	f000 fbe4 	bl	800f5c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	2150      	movs	r1, #80	; 0x50
 800ee06:	4618      	mov	r0, r3
 800ee08:	f000 fc3e 	bl	800f688 <TIM_ITRx_SetConfig>
      break;
 800ee0c:	e02c      	b.n	800ee68 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	6818      	ldr	r0, [r3, #0]
 800ee12:	683b      	ldr	r3, [r7, #0]
 800ee14:	6859      	ldr	r1, [r3, #4]
 800ee16:	683b      	ldr	r3, [r7, #0]
 800ee18:	68db      	ldr	r3, [r3, #12]
 800ee1a:	461a      	mov	r2, r3
 800ee1c:	f000 fc03 	bl	800f626 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	2160      	movs	r1, #96	; 0x60
 800ee26:	4618      	mov	r0, r3
 800ee28:	f000 fc2e 	bl	800f688 <TIM_ITRx_SetConfig>
      break;
 800ee2c:	e01c      	b.n	800ee68 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	6818      	ldr	r0, [r3, #0]
 800ee32:	683b      	ldr	r3, [r7, #0]
 800ee34:	6859      	ldr	r1, [r3, #4]
 800ee36:	683b      	ldr	r3, [r7, #0]
 800ee38:	68db      	ldr	r3, [r3, #12]
 800ee3a:	461a      	mov	r2, r3
 800ee3c:	f000 fbc4 	bl	800f5c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	2140      	movs	r1, #64	; 0x40
 800ee46:	4618      	mov	r0, r3
 800ee48:	f000 fc1e 	bl	800f688 <TIM_ITRx_SetConfig>
      break;
 800ee4c:	e00c      	b.n	800ee68 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	681a      	ldr	r2, [r3, #0]
 800ee52:	683b      	ldr	r3, [r7, #0]
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	4619      	mov	r1, r3
 800ee58:	4610      	mov	r0, r2
 800ee5a:	f000 fc15 	bl	800f688 <TIM_ITRx_SetConfig>
      break;
 800ee5e:	e003      	b.n	800ee68 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800ee60:	2301      	movs	r3, #1
 800ee62:	73fb      	strb	r3, [r7, #15]
      break;
 800ee64:	e000      	b.n	800ee68 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800ee66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	2201      	movs	r2, #1
 800ee6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	2200      	movs	r2, #0
 800ee74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ee78:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee7a:	4618      	mov	r0, r3
 800ee7c:	3710      	adds	r7, #16
 800ee7e:	46bd      	mov	sp, r7
 800ee80:	bd80      	pop	{r7, pc}
 800ee82:	bf00      	nop
 800ee84:	ffceff88 	.word	0xffceff88
 800ee88:	00100040 	.word	0x00100040
 800ee8c:	00100030 	.word	0x00100030
 800ee90:	00100020 	.word	0x00100020

0800ee94 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ee94:	b480      	push	{r7}
 800ee96:	b083      	sub	sp, #12
 800ee98:	af00      	add	r7, sp, #0
 800ee9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ee9c:	bf00      	nop
 800ee9e:	370c      	adds	r7, #12
 800eea0:	46bd      	mov	sp, r7
 800eea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eea6:	4770      	bx	lr

0800eea8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800eea8:	b480      	push	{r7}
 800eeaa:	b083      	sub	sp, #12
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800eeb0:	bf00      	nop
 800eeb2:	370c      	adds	r7, #12
 800eeb4:	46bd      	mov	sp, r7
 800eeb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeba:	4770      	bx	lr

0800eebc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800eebc:	b480      	push	{r7}
 800eebe:	b083      	sub	sp, #12
 800eec0:	af00      	add	r7, sp, #0
 800eec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800eec4:	bf00      	nop
 800eec6:	370c      	adds	r7, #12
 800eec8:	46bd      	mov	sp, r7
 800eeca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eece:	4770      	bx	lr

0800eed0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800eed0:	b480      	push	{r7}
 800eed2:	b085      	sub	sp, #20
 800eed4:	af00      	add	r7, sp, #0
 800eed6:	6078      	str	r0, [r7, #4]
 800eed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	4a46      	ldr	r2, [pc, #280]	; (800effc <TIM_Base_SetConfig+0x12c>)
 800eee4:	4293      	cmp	r3, r2
 800eee6:	d013      	beq.n	800ef10 <TIM_Base_SetConfig+0x40>
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eeee:	d00f      	beq.n	800ef10 <TIM_Base_SetConfig+0x40>
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	4a43      	ldr	r2, [pc, #268]	; (800f000 <TIM_Base_SetConfig+0x130>)
 800eef4:	4293      	cmp	r3, r2
 800eef6:	d00b      	beq.n	800ef10 <TIM_Base_SetConfig+0x40>
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	4a42      	ldr	r2, [pc, #264]	; (800f004 <TIM_Base_SetConfig+0x134>)
 800eefc:	4293      	cmp	r3, r2
 800eefe:	d007      	beq.n	800ef10 <TIM_Base_SetConfig+0x40>
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	4a41      	ldr	r2, [pc, #260]	; (800f008 <TIM_Base_SetConfig+0x138>)
 800ef04:	4293      	cmp	r3, r2
 800ef06:	d003      	beq.n	800ef10 <TIM_Base_SetConfig+0x40>
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	4a40      	ldr	r2, [pc, #256]	; (800f00c <TIM_Base_SetConfig+0x13c>)
 800ef0c:	4293      	cmp	r3, r2
 800ef0e:	d108      	bne.n	800ef22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ef16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ef18:	683b      	ldr	r3, [r7, #0]
 800ef1a:	685b      	ldr	r3, [r3, #4]
 800ef1c:	68fa      	ldr	r2, [r7, #12]
 800ef1e:	4313      	orrs	r3, r2
 800ef20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	4a35      	ldr	r2, [pc, #212]	; (800effc <TIM_Base_SetConfig+0x12c>)
 800ef26:	4293      	cmp	r3, r2
 800ef28:	d01f      	beq.n	800ef6a <TIM_Base_SetConfig+0x9a>
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ef30:	d01b      	beq.n	800ef6a <TIM_Base_SetConfig+0x9a>
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	4a32      	ldr	r2, [pc, #200]	; (800f000 <TIM_Base_SetConfig+0x130>)
 800ef36:	4293      	cmp	r3, r2
 800ef38:	d017      	beq.n	800ef6a <TIM_Base_SetConfig+0x9a>
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	4a31      	ldr	r2, [pc, #196]	; (800f004 <TIM_Base_SetConfig+0x134>)
 800ef3e:	4293      	cmp	r3, r2
 800ef40:	d013      	beq.n	800ef6a <TIM_Base_SetConfig+0x9a>
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	4a30      	ldr	r2, [pc, #192]	; (800f008 <TIM_Base_SetConfig+0x138>)
 800ef46:	4293      	cmp	r3, r2
 800ef48:	d00f      	beq.n	800ef6a <TIM_Base_SetConfig+0x9a>
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	4a2f      	ldr	r2, [pc, #188]	; (800f00c <TIM_Base_SetConfig+0x13c>)
 800ef4e:	4293      	cmp	r3, r2
 800ef50:	d00b      	beq.n	800ef6a <TIM_Base_SetConfig+0x9a>
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	4a2e      	ldr	r2, [pc, #184]	; (800f010 <TIM_Base_SetConfig+0x140>)
 800ef56:	4293      	cmp	r3, r2
 800ef58:	d007      	beq.n	800ef6a <TIM_Base_SetConfig+0x9a>
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	4a2d      	ldr	r2, [pc, #180]	; (800f014 <TIM_Base_SetConfig+0x144>)
 800ef5e:	4293      	cmp	r3, r2
 800ef60:	d003      	beq.n	800ef6a <TIM_Base_SetConfig+0x9a>
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	4a2c      	ldr	r2, [pc, #176]	; (800f018 <TIM_Base_SetConfig+0x148>)
 800ef66:	4293      	cmp	r3, r2
 800ef68:	d108      	bne.n	800ef7c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ef70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ef72:	683b      	ldr	r3, [r7, #0]
 800ef74:	68db      	ldr	r3, [r3, #12]
 800ef76:	68fa      	ldr	r2, [r7, #12]
 800ef78:	4313      	orrs	r3, r2
 800ef7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ef82:	683b      	ldr	r3, [r7, #0]
 800ef84:	695b      	ldr	r3, [r3, #20]
 800ef86:	4313      	orrs	r3, r2
 800ef88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	68fa      	ldr	r2, [r7, #12]
 800ef8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ef90:	683b      	ldr	r3, [r7, #0]
 800ef92:	689a      	ldr	r2, [r3, #8]
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ef98:	683b      	ldr	r3, [r7, #0]
 800ef9a:	681a      	ldr	r2, [r3, #0]
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	4a16      	ldr	r2, [pc, #88]	; (800effc <TIM_Base_SetConfig+0x12c>)
 800efa4:	4293      	cmp	r3, r2
 800efa6:	d00f      	beq.n	800efc8 <TIM_Base_SetConfig+0xf8>
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	4a18      	ldr	r2, [pc, #96]	; (800f00c <TIM_Base_SetConfig+0x13c>)
 800efac:	4293      	cmp	r3, r2
 800efae:	d00b      	beq.n	800efc8 <TIM_Base_SetConfig+0xf8>
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	4a17      	ldr	r2, [pc, #92]	; (800f010 <TIM_Base_SetConfig+0x140>)
 800efb4:	4293      	cmp	r3, r2
 800efb6:	d007      	beq.n	800efc8 <TIM_Base_SetConfig+0xf8>
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	4a16      	ldr	r2, [pc, #88]	; (800f014 <TIM_Base_SetConfig+0x144>)
 800efbc:	4293      	cmp	r3, r2
 800efbe:	d003      	beq.n	800efc8 <TIM_Base_SetConfig+0xf8>
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	4a15      	ldr	r2, [pc, #84]	; (800f018 <TIM_Base_SetConfig+0x148>)
 800efc4:	4293      	cmp	r3, r2
 800efc6:	d103      	bne.n	800efd0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800efc8:	683b      	ldr	r3, [r7, #0]
 800efca:	691a      	ldr	r2, [r3, #16]
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	2201      	movs	r2, #1
 800efd4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	691b      	ldr	r3, [r3, #16]
 800efda:	f003 0301 	and.w	r3, r3, #1
 800efde:	2b01      	cmp	r3, #1
 800efe0:	d105      	bne.n	800efee <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	691b      	ldr	r3, [r3, #16]
 800efe6:	f023 0201 	bic.w	r2, r3, #1
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	611a      	str	r2, [r3, #16]
  }
}
 800efee:	bf00      	nop
 800eff0:	3714      	adds	r7, #20
 800eff2:	46bd      	mov	sp, r7
 800eff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff8:	4770      	bx	lr
 800effa:	bf00      	nop
 800effc:	40010000 	.word	0x40010000
 800f000:	40000400 	.word	0x40000400
 800f004:	40000800 	.word	0x40000800
 800f008:	40000c00 	.word	0x40000c00
 800f00c:	40010400 	.word	0x40010400
 800f010:	40014000 	.word	0x40014000
 800f014:	40014400 	.word	0x40014400
 800f018:	40014800 	.word	0x40014800

0800f01c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f01c:	b480      	push	{r7}
 800f01e:	b087      	sub	sp, #28
 800f020:	af00      	add	r7, sp, #0
 800f022:	6078      	str	r0, [r7, #4]
 800f024:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	6a1b      	ldr	r3, [r3, #32]
 800f02a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	6a1b      	ldr	r3, [r3, #32]
 800f030:	f023 0201 	bic.w	r2, r3, #1
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	685b      	ldr	r3, [r3, #4]
 800f03c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	699b      	ldr	r3, [r3, #24]
 800f042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f044:	68fa      	ldr	r2, [r7, #12]
 800f046:	4b37      	ldr	r3, [pc, #220]	; (800f124 <TIM_OC1_SetConfig+0x108>)
 800f048:	4013      	ands	r3, r2
 800f04a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	f023 0303 	bic.w	r3, r3, #3
 800f052:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f054:	683b      	ldr	r3, [r7, #0]
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	68fa      	ldr	r2, [r7, #12]
 800f05a:	4313      	orrs	r3, r2
 800f05c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f05e:	697b      	ldr	r3, [r7, #20]
 800f060:	f023 0302 	bic.w	r3, r3, #2
 800f064:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f066:	683b      	ldr	r3, [r7, #0]
 800f068:	689b      	ldr	r3, [r3, #8]
 800f06a:	697a      	ldr	r2, [r7, #20]
 800f06c:	4313      	orrs	r3, r2
 800f06e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	4a2d      	ldr	r2, [pc, #180]	; (800f128 <TIM_OC1_SetConfig+0x10c>)
 800f074:	4293      	cmp	r3, r2
 800f076:	d00f      	beq.n	800f098 <TIM_OC1_SetConfig+0x7c>
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	4a2c      	ldr	r2, [pc, #176]	; (800f12c <TIM_OC1_SetConfig+0x110>)
 800f07c:	4293      	cmp	r3, r2
 800f07e:	d00b      	beq.n	800f098 <TIM_OC1_SetConfig+0x7c>
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	4a2b      	ldr	r2, [pc, #172]	; (800f130 <TIM_OC1_SetConfig+0x114>)
 800f084:	4293      	cmp	r3, r2
 800f086:	d007      	beq.n	800f098 <TIM_OC1_SetConfig+0x7c>
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	4a2a      	ldr	r2, [pc, #168]	; (800f134 <TIM_OC1_SetConfig+0x118>)
 800f08c:	4293      	cmp	r3, r2
 800f08e:	d003      	beq.n	800f098 <TIM_OC1_SetConfig+0x7c>
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	4a29      	ldr	r2, [pc, #164]	; (800f138 <TIM_OC1_SetConfig+0x11c>)
 800f094:	4293      	cmp	r3, r2
 800f096:	d10c      	bne.n	800f0b2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f098:	697b      	ldr	r3, [r7, #20]
 800f09a:	f023 0308 	bic.w	r3, r3, #8
 800f09e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f0a0:	683b      	ldr	r3, [r7, #0]
 800f0a2:	68db      	ldr	r3, [r3, #12]
 800f0a4:	697a      	ldr	r2, [r7, #20]
 800f0a6:	4313      	orrs	r3, r2
 800f0a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f0aa:	697b      	ldr	r3, [r7, #20]
 800f0ac:	f023 0304 	bic.w	r3, r3, #4
 800f0b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	4a1c      	ldr	r2, [pc, #112]	; (800f128 <TIM_OC1_SetConfig+0x10c>)
 800f0b6:	4293      	cmp	r3, r2
 800f0b8:	d00f      	beq.n	800f0da <TIM_OC1_SetConfig+0xbe>
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	4a1b      	ldr	r2, [pc, #108]	; (800f12c <TIM_OC1_SetConfig+0x110>)
 800f0be:	4293      	cmp	r3, r2
 800f0c0:	d00b      	beq.n	800f0da <TIM_OC1_SetConfig+0xbe>
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	4a1a      	ldr	r2, [pc, #104]	; (800f130 <TIM_OC1_SetConfig+0x114>)
 800f0c6:	4293      	cmp	r3, r2
 800f0c8:	d007      	beq.n	800f0da <TIM_OC1_SetConfig+0xbe>
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	4a19      	ldr	r2, [pc, #100]	; (800f134 <TIM_OC1_SetConfig+0x118>)
 800f0ce:	4293      	cmp	r3, r2
 800f0d0:	d003      	beq.n	800f0da <TIM_OC1_SetConfig+0xbe>
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	4a18      	ldr	r2, [pc, #96]	; (800f138 <TIM_OC1_SetConfig+0x11c>)
 800f0d6:	4293      	cmp	r3, r2
 800f0d8:	d111      	bne.n	800f0fe <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f0da:	693b      	ldr	r3, [r7, #16]
 800f0dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f0e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f0e2:	693b      	ldr	r3, [r7, #16]
 800f0e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f0e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f0ea:	683b      	ldr	r3, [r7, #0]
 800f0ec:	695b      	ldr	r3, [r3, #20]
 800f0ee:	693a      	ldr	r2, [r7, #16]
 800f0f0:	4313      	orrs	r3, r2
 800f0f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f0f4:	683b      	ldr	r3, [r7, #0]
 800f0f6:	699b      	ldr	r3, [r3, #24]
 800f0f8:	693a      	ldr	r2, [r7, #16]
 800f0fa:	4313      	orrs	r3, r2
 800f0fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	693a      	ldr	r2, [r7, #16]
 800f102:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	68fa      	ldr	r2, [r7, #12]
 800f108:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f10a:	683b      	ldr	r3, [r7, #0]
 800f10c:	685a      	ldr	r2, [r3, #4]
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	697a      	ldr	r2, [r7, #20]
 800f116:	621a      	str	r2, [r3, #32]
}
 800f118:	bf00      	nop
 800f11a:	371c      	adds	r7, #28
 800f11c:	46bd      	mov	sp, r7
 800f11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f122:	4770      	bx	lr
 800f124:	fffeff8f 	.word	0xfffeff8f
 800f128:	40010000 	.word	0x40010000
 800f12c:	40010400 	.word	0x40010400
 800f130:	40014000 	.word	0x40014000
 800f134:	40014400 	.word	0x40014400
 800f138:	40014800 	.word	0x40014800

0800f13c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f13c:	b480      	push	{r7}
 800f13e:	b087      	sub	sp, #28
 800f140:	af00      	add	r7, sp, #0
 800f142:	6078      	str	r0, [r7, #4]
 800f144:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	6a1b      	ldr	r3, [r3, #32]
 800f14a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	6a1b      	ldr	r3, [r3, #32]
 800f150:	f023 0210 	bic.w	r2, r3, #16
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	685b      	ldr	r3, [r3, #4]
 800f15c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	699b      	ldr	r3, [r3, #24]
 800f162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f164:	68fa      	ldr	r2, [r7, #12]
 800f166:	4b34      	ldr	r3, [pc, #208]	; (800f238 <TIM_OC2_SetConfig+0xfc>)
 800f168:	4013      	ands	r3, r2
 800f16a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f172:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f174:	683b      	ldr	r3, [r7, #0]
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	021b      	lsls	r3, r3, #8
 800f17a:	68fa      	ldr	r2, [r7, #12]
 800f17c:	4313      	orrs	r3, r2
 800f17e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f180:	697b      	ldr	r3, [r7, #20]
 800f182:	f023 0320 	bic.w	r3, r3, #32
 800f186:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f188:	683b      	ldr	r3, [r7, #0]
 800f18a:	689b      	ldr	r3, [r3, #8]
 800f18c:	011b      	lsls	r3, r3, #4
 800f18e:	697a      	ldr	r2, [r7, #20]
 800f190:	4313      	orrs	r3, r2
 800f192:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	4a29      	ldr	r2, [pc, #164]	; (800f23c <TIM_OC2_SetConfig+0x100>)
 800f198:	4293      	cmp	r3, r2
 800f19a:	d003      	beq.n	800f1a4 <TIM_OC2_SetConfig+0x68>
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	4a28      	ldr	r2, [pc, #160]	; (800f240 <TIM_OC2_SetConfig+0x104>)
 800f1a0:	4293      	cmp	r3, r2
 800f1a2:	d10d      	bne.n	800f1c0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f1a4:	697b      	ldr	r3, [r7, #20]
 800f1a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f1aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f1ac:	683b      	ldr	r3, [r7, #0]
 800f1ae:	68db      	ldr	r3, [r3, #12]
 800f1b0:	011b      	lsls	r3, r3, #4
 800f1b2:	697a      	ldr	r2, [r7, #20]
 800f1b4:	4313      	orrs	r3, r2
 800f1b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f1b8:	697b      	ldr	r3, [r7, #20]
 800f1ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f1be:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	4a1e      	ldr	r2, [pc, #120]	; (800f23c <TIM_OC2_SetConfig+0x100>)
 800f1c4:	4293      	cmp	r3, r2
 800f1c6:	d00f      	beq.n	800f1e8 <TIM_OC2_SetConfig+0xac>
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	4a1d      	ldr	r2, [pc, #116]	; (800f240 <TIM_OC2_SetConfig+0x104>)
 800f1cc:	4293      	cmp	r3, r2
 800f1ce:	d00b      	beq.n	800f1e8 <TIM_OC2_SetConfig+0xac>
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	4a1c      	ldr	r2, [pc, #112]	; (800f244 <TIM_OC2_SetConfig+0x108>)
 800f1d4:	4293      	cmp	r3, r2
 800f1d6:	d007      	beq.n	800f1e8 <TIM_OC2_SetConfig+0xac>
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	4a1b      	ldr	r2, [pc, #108]	; (800f248 <TIM_OC2_SetConfig+0x10c>)
 800f1dc:	4293      	cmp	r3, r2
 800f1de:	d003      	beq.n	800f1e8 <TIM_OC2_SetConfig+0xac>
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	4a1a      	ldr	r2, [pc, #104]	; (800f24c <TIM_OC2_SetConfig+0x110>)
 800f1e4:	4293      	cmp	r3, r2
 800f1e6:	d113      	bne.n	800f210 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f1e8:	693b      	ldr	r3, [r7, #16]
 800f1ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f1ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f1f0:	693b      	ldr	r3, [r7, #16]
 800f1f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f1f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f1f8:	683b      	ldr	r3, [r7, #0]
 800f1fa:	695b      	ldr	r3, [r3, #20]
 800f1fc:	009b      	lsls	r3, r3, #2
 800f1fe:	693a      	ldr	r2, [r7, #16]
 800f200:	4313      	orrs	r3, r2
 800f202:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f204:	683b      	ldr	r3, [r7, #0]
 800f206:	699b      	ldr	r3, [r3, #24]
 800f208:	009b      	lsls	r3, r3, #2
 800f20a:	693a      	ldr	r2, [r7, #16]
 800f20c:	4313      	orrs	r3, r2
 800f20e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	693a      	ldr	r2, [r7, #16]
 800f214:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	68fa      	ldr	r2, [r7, #12]
 800f21a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f21c:	683b      	ldr	r3, [r7, #0]
 800f21e:	685a      	ldr	r2, [r3, #4]
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	697a      	ldr	r2, [r7, #20]
 800f228:	621a      	str	r2, [r3, #32]
}
 800f22a:	bf00      	nop
 800f22c:	371c      	adds	r7, #28
 800f22e:	46bd      	mov	sp, r7
 800f230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f234:	4770      	bx	lr
 800f236:	bf00      	nop
 800f238:	feff8fff 	.word	0xfeff8fff
 800f23c:	40010000 	.word	0x40010000
 800f240:	40010400 	.word	0x40010400
 800f244:	40014000 	.word	0x40014000
 800f248:	40014400 	.word	0x40014400
 800f24c:	40014800 	.word	0x40014800

0800f250 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f250:	b480      	push	{r7}
 800f252:	b087      	sub	sp, #28
 800f254:	af00      	add	r7, sp, #0
 800f256:	6078      	str	r0, [r7, #4]
 800f258:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	6a1b      	ldr	r3, [r3, #32]
 800f25e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	6a1b      	ldr	r3, [r3, #32]
 800f264:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	685b      	ldr	r3, [r3, #4]
 800f270:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	69db      	ldr	r3, [r3, #28]
 800f276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f278:	68fa      	ldr	r2, [r7, #12]
 800f27a:	4b33      	ldr	r3, [pc, #204]	; (800f348 <TIM_OC3_SetConfig+0xf8>)
 800f27c:	4013      	ands	r3, r2
 800f27e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	f023 0303 	bic.w	r3, r3, #3
 800f286:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f288:	683b      	ldr	r3, [r7, #0]
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	68fa      	ldr	r2, [r7, #12]
 800f28e:	4313      	orrs	r3, r2
 800f290:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f292:	697b      	ldr	r3, [r7, #20]
 800f294:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f298:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f29a:	683b      	ldr	r3, [r7, #0]
 800f29c:	689b      	ldr	r3, [r3, #8]
 800f29e:	021b      	lsls	r3, r3, #8
 800f2a0:	697a      	ldr	r2, [r7, #20]
 800f2a2:	4313      	orrs	r3, r2
 800f2a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	4a28      	ldr	r2, [pc, #160]	; (800f34c <TIM_OC3_SetConfig+0xfc>)
 800f2aa:	4293      	cmp	r3, r2
 800f2ac:	d003      	beq.n	800f2b6 <TIM_OC3_SetConfig+0x66>
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	4a27      	ldr	r2, [pc, #156]	; (800f350 <TIM_OC3_SetConfig+0x100>)
 800f2b2:	4293      	cmp	r3, r2
 800f2b4:	d10d      	bne.n	800f2d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f2b6:	697b      	ldr	r3, [r7, #20]
 800f2b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f2bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f2be:	683b      	ldr	r3, [r7, #0]
 800f2c0:	68db      	ldr	r3, [r3, #12]
 800f2c2:	021b      	lsls	r3, r3, #8
 800f2c4:	697a      	ldr	r2, [r7, #20]
 800f2c6:	4313      	orrs	r3, r2
 800f2c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f2ca:	697b      	ldr	r3, [r7, #20]
 800f2cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f2d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	4a1d      	ldr	r2, [pc, #116]	; (800f34c <TIM_OC3_SetConfig+0xfc>)
 800f2d6:	4293      	cmp	r3, r2
 800f2d8:	d00f      	beq.n	800f2fa <TIM_OC3_SetConfig+0xaa>
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	4a1c      	ldr	r2, [pc, #112]	; (800f350 <TIM_OC3_SetConfig+0x100>)
 800f2de:	4293      	cmp	r3, r2
 800f2e0:	d00b      	beq.n	800f2fa <TIM_OC3_SetConfig+0xaa>
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	4a1b      	ldr	r2, [pc, #108]	; (800f354 <TIM_OC3_SetConfig+0x104>)
 800f2e6:	4293      	cmp	r3, r2
 800f2e8:	d007      	beq.n	800f2fa <TIM_OC3_SetConfig+0xaa>
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	4a1a      	ldr	r2, [pc, #104]	; (800f358 <TIM_OC3_SetConfig+0x108>)
 800f2ee:	4293      	cmp	r3, r2
 800f2f0:	d003      	beq.n	800f2fa <TIM_OC3_SetConfig+0xaa>
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	4a19      	ldr	r2, [pc, #100]	; (800f35c <TIM_OC3_SetConfig+0x10c>)
 800f2f6:	4293      	cmp	r3, r2
 800f2f8:	d113      	bne.n	800f322 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f2fa:	693b      	ldr	r3, [r7, #16]
 800f2fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f300:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f302:	693b      	ldr	r3, [r7, #16]
 800f304:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f308:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f30a:	683b      	ldr	r3, [r7, #0]
 800f30c:	695b      	ldr	r3, [r3, #20]
 800f30e:	011b      	lsls	r3, r3, #4
 800f310:	693a      	ldr	r2, [r7, #16]
 800f312:	4313      	orrs	r3, r2
 800f314:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f316:	683b      	ldr	r3, [r7, #0]
 800f318:	699b      	ldr	r3, [r3, #24]
 800f31a:	011b      	lsls	r3, r3, #4
 800f31c:	693a      	ldr	r2, [r7, #16]
 800f31e:	4313      	orrs	r3, r2
 800f320:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	693a      	ldr	r2, [r7, #16]
 800f326:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	68fa      	ldr	r2, [r7, #12]
 800f32c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f32e:	683b      	ldr	r3, [r7, #0]
 800f330:	685a      	ldr	r2, [r3, #4]
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	697a      	ldr	r2, [r7, #20]
 800f33a:	621a      	str	r2, [r3, #32]
}
 800f33c:	bf00      	nop
 800f33e:	371c      	adds	r7, #28
 800f340:	46bd      	mov	sp, r7
 800f342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f346:	4770      	bx	lr
 800f348:	fffeff8f 	.word	0xfffeff8f
 800f34c:	40010000 	.word	0x40010000
 800f350:	40010400 	.word	0x40010400
 800f354:	40014000 	.word	0x40014000
 800f358:	40014400 	.word	0x40014400
 800f35c:	40014800 	.word	0x40014800

0800f360 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f360:	b480      	push	{r7}
 800f362:	b087      	sub	sp, #28
 800f364:	af00      	add	r7, sp, #0
 800f366:	6078      	str	r0, [r7, #4]
 800f368:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	6a1b      	ldr	r3, [r3, #32]
 800f36e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	6a1b      	ldr	r3, [r3, #32]
 800f374:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	685b      	ldr	r3, [r3, #4]
 800f380:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	69db      	ldr	r3, [r3, #28]
 800f386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f388:	68fa      	ldr	r2, [r7, #12]
 800f38a:	4b24      	ldr	r3, [pc, #144]	; (800f41c <TIM_OC4_SetConfig+0xbc>)
 800f38c:	4013      	ands	r3, r2
 800f38e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f396:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f398:	683b      	ldr	r3, [r7, #0]
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	021b      	lsls	r3, r3, #8
 800f39e:	68fa      	ldr	r2, [r7, #12]
 800f3a0:	4313      	orrs	r3, r2
 800f3a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f3a4:	693b      	ldr	r3, [r7, #16]
 800f3a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f3aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f3ac:	683b      	ldr	r3, [r7, #0]
 800f3ae:	689b      	ldr	r3, [r3, #8]
 800f3b0:	031b      	lsls	r3, r3, #12
 800f3b2:	693a      	ldr	r2, [r7, #16]
 800f3b4:	4313      	orrs	r3, r2
 800f3b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	4a19      	ldr	r2, [pc, #100]	; (800f420 <TIM_OC4_SetConfig+0xc0>)
 800f3bc:	4293      	cmp	r3, r2
 800f3be:	d00f      	beq.n	800f3e0 <TIM_OC4_SetConfig+0x80>
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	4a18      	ldr	r2, [pc, #96]	; (800f424 <TIM_OC4_SetConfig+0xc4>)
 800f3c4:	4293      	cmp	r3, r2
 800f3c6:	d00b      	beq.n	800f3e0 <TIM_OC4_SetConfig+0x80>
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	4a17      	ldr	r2, [pc, #92]	; (800f428 <TIM_OC4_SetConfig+0xc8>)
 800f3cc:	4293      	cmp	r3, r2
 800f3ce:	d007      	beq.n	800f3e0 <TIM_OC4_SetConfig+0x80>
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	4a16      	ldr	r2, [pc, #88]	; (800f42c <TIM_OC4_SetConfig+0xcc>)
 800f3d4:	4293      	cmp	r3, r2
 800f3d6:	d003      	beq.n	800f3e0 <TIM_OC4_SetConfig+0x80>
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	4a15      	ldr	r2, [pc, #84]	; (800f430 <TIM_OC4_SetConfig+0xd0>)
 800f3dc:	4293      	cmp	r3, r2
 800f3de:	d109      	bne.n	800f3f4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f3e0:	697b      	ldr	r3, [r7, #20]
 800f3e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f3e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f3e8:	683b      	ldr	r3, [r7, #0]
 800f3ea:	695b      	ldr	r3, [r3, #20]
 800f3ec:	019b      	lsls	r3, r3, #6
 800f3ee:	697a      	ldr	r2, [r7, #20]
 800f3f0:	4313      	orrs	r3, r2
 800f3f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	697a      	ldr	r2, [r7, #20]
 800f3f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	68fa      	ldr	r2, [r7, #12]
 800f3fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f400:	683b      	ldr	r3, [r7, #0]
 800f402:	685a      	ldr	r2, [r3, #4]
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	693a      	ldr	r2, [r7, #16]
 800f40c:	621a      	str	r2, [r3, #32]
}
 800f40e:	bf00      	nop
 800f410:	371c      	adds	r7, #28
 800f412:	46bd      	mov	sp, r7
 800f414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f418:	4770      	bx	lr
 800f41a:	bf00      	nop
 800f41c:	feff8fff 	.word	0xfeff8fff
 800f420:	40010000 	.word	0x40010000
 800f424:	40010400 	.word	0x40010400
 800f428:	40014000 	.word	0x40014000
 800f42c:	40014400 	.word	0x40014400
 800f430:	40014800 	.word	0x40014800

0800f434 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f434:	b480      	push	{r7}
 800f436:	b087      	sub	sp, #28
 800f438:	af00      	add	r7, sp, #0
 800f43a:	6078      	str	r0, [r7, #4]
 800f43c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	6a1b      	ldr	r3, [r3, #32]
 800f442:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	6a1b      	ldr	r3, [r3, #32]
 800f448:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	685b      	ldr	r3, [r3, #4]
 800f454:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f45a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f45c:	68fa      	ldr	r2, [r7, #12]
 800f45e:	4b21      	ldr	r3, [pc, #132]	; (800f4e4 <TIM_OC5_SetConfig+0xb0>)
 800f460:	4013      	ands	r3, r2
 800f462:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f464:	683b      	ldr	r3, [r7, #0]
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	68fa      	ldr	r2, [r7, #12]
 800f46a:	4313      	orrs	r3, r2
 800f46c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f46e:	693b      	ldr	r3, [r7, #16]
 800f470:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800f474:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f476:	683b      	ldr	r3, [r7, #0]
 800f478:	689b      	ldr	r3, [r3, #8]
 800f47a:	041b      	lsls	r3, r3, #16
 800f47c:	693a      	ldr	r2, [r7, #16]
 800f47e:	4313      	orrs	r3, r2
 800f480:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	4a18      	ldr	r2, [pc, #96]	; (800f4e8 <TIM_OC5_SetConfig+0xb4>)
 800f486:	4293      	cmp	r3, r2
 800f488:	d00f      	beq.n	800f4aa <TIM_OC5_SetConfig+0x76>
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	4a17      	ldr	r2, [pc, #92]	; (800f4ec <TIM_OC5_SetConfig+0xb8>)
 800f48e:	4293      	cmp	r3, r2
 800f490:	d00b      	beq.n	800f4aa <TIM_OC5_SetConfig+0x76>
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	4a16      	ldr	r2, [pc, #88]	; (800f4f0 <TIM_OC5_SetConfig+0xbc>)
 800f496:	4293      	cmp	r3, r2
 800f498:	d007      	beq.n	800f4aa <TIM_OC5_SetConfig+0x76>
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	4a15      	ldr	r2, [pc, #84]	; (800f4f4 <TIM_OC5_SetConfig+0xc0>)
 800f49e:	4293      	cmp	r3, r2
 800f4a0:	d003      	beq.n	800f4aa <TIM_OC5_SetConfig+0x76>
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	4a14      	ldr	r2, [pc, #80]	; (800f4f8 <TIM_OC5_SetConfig+0xc4>)
 800f4a6:	4293      	cmp	r3, r2
 800f4a8:	d109      	bne.n	800f4be <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f4aa:	697b      	ldr	r3, [r7, #20]
 800f4ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f4b0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f4b2:	683b      	ldr	r3, [r7, #0]
 800f4b4:	695b      	ldr	r3, [r3, #20]
 800f4b6:	021b      	lsls	r3, r3, #8
 800f4b8:	697a      	ldr	r2, [r7, #20]
 800f4ba:	4313      	orrs	r3, r2
 800f4bc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	697a      	ldr	r2, [r7, #20]
 800f4c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	68fa      	ldr	r2, [r7, #12]
 800f4c8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f4ca:	683b      	ldr	r3, [r7, #0]
 800f4cc:	685a      	ldr	r2, [r3, #4]
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	693a      	ldr	r2, [r7, #16]
 800f4d6:	621a      	str	r2, [r3, #32]
}
 800f4d8:	bf00      	nop
 800f4da:	371c      	adds	r7, #28
 800f4dc:	46bd      	mov	sp, r7
 800f4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4e2:	4770      	bx	lr
 800f4e4:	fffeff8f 	.word	0xfffeff8f
 800f4e8:	40010000 	.word	0x40010000
 800f4ec:	40010400 	.word	0x40010400
 800f4f0:	40014000 	.word	0x40014000
 800f4f4:	40014400 	.word	0x40014400
 800f4f8:	40014800 	.word	0x40014800

0800f4fc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f4fc:	b480      	push	{r7}
 800f4fe:	b087      	sub	sp, #28
 800f500:	af00      	add	r7, sp, #0
 800f502:	6078      	str	r0, [r7, #4]
 800f504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	6a1b      	ldr	r3, [r3, #32]
 800f50a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	6a1b      	ldr	r3, [r3, #32]
 800f510:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	685b      	ldr	r3, [r3, #4]
 800f51c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f524:	68fa      	ldr	r2, [r7, #12]
 800f526:	4b22      	ldr	r3, [pc, #136]	; (800f5b0 <TIM_OC6_SetConfig+0xb4>)
 800f528:	4013      	ands	r3, r2
 800f52a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f52c:	683b      	ldr	r3, [r7, #0]
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	021b      	lsls	r3, r3, #8
 800f532:	68fa      	ldr	r2, [r7, #12]
 800f534:	4313      	orrs	r3, r2
 800f536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f538:	693b      	ldr	r3, [r7, #16]
 800f53a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f53e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f540:	683b      	ldr	r3, [r7, #0]
 800f542:	689b      	ldr	r3, [r3, #8]
 800f544:	051b      	lsls	r3, r3, #20
 800f546:	693a      	ldr	r2, [r7, #16]
 800f548:	4313      	orrs	r3, r2
 800f54a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	4a19      	ldr	r2, [pc, #100]	; (800f5b4 <TIM_OC6_SetConfig+0xb8>)
 800f550:	4293      	cmp	r3, r2
 800f552:	d00f      	beq.n	800f574 <TIM_OC6_SetConfig+0x78>
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	4a18      	ldr	r2, [pc, #96]	; (800f5b8 <TIM_OC6_SetConfig+0xbc>)
 800f558:	4293      	cmp	r3, r2
 800f55a:	d00b      	beq.n	800f574 <TIM_OC6_SetConfig+0x78>
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	4a17      	ldr	r2, [pc, #92]	; (800f5bc <TIM_OC6_SetConfig+0xc0>)
 800f560:	4293      	cmp	r3, r2
 800f562:	d007      	beq.n	800f574 <TIM_OC6_SetConfig+0x78>
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	4a16      	ldr	r2, [pc, #88]	; (800f5c0 <TIM_OC6_SetConfig+0xc4>)
 800f568:	4293      	cmp	r3, r2
 800f56a:	d003      	beq.n	800f574 <TIM_OC6_SetConfig+0x78>
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	4a15      	ldr	r2, [pc, #84]	; (800f5c4 <TIM_OC6_SetConfig+0xc8>)
 800f570:	4293      	cmp	r3, r2
 800f572:	d109      	bne.n	800f588 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f574:	697b      	ldr	r3, [r7, #20]
 800f576:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f57a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f57c:	683b      	ldr	r3, [r7, #0]
 800f57e:	695b      	ldr	r3, [r3, #20]
 800f580:	029b      	lsls	r3, r3, #10
 800f582:	697a      	ldr	r2, [r7, #20]
 800f584:	4313      	orrs	r3, r2
 800f586:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	697a      	ldr	r2, [r7, #20]
 800f58c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	68fa      	ldr	r2, [r7, #12]
 800f592:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f594:	683b      	ldr	r3, [r7, #0]
 800f596:	685a      	ldr	r2, [r3, #4]
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	693a      	ldr	r2, [r7, #16]
 800f5a0:	621a      	str	r2, [r3, #32]
}
 800f5a2:	bf00      	nop
 800f5a4:	371c      	adds	r7, #28
 800f5a6:	46bd      	mov	sp, r7
 800f5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ac:	4770      	bx	lr
 800f5ae:	bf00      	nop
 800f5b0:	feff8fff 	.word	0xfeff8fff
 800f5b4:	40010000 	.word	0x40010000
 800f5b8:	40010400 	.word	0x40010400
 800f5bc:	40014000 	.word	0x40014000
 800f5c0:	40014400 	.word	0x40014400
 800f5c4:	40014800 	.word	0x40014800

0800f5c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f5c8:	b480      	push	{r7}
 800f5ca:	b087      	sub	sp, #28
 800f5cc:	af00      	add	r7, sp, #0
 800f5ce:	60f8      	str	r0, [r7, #12]
 800f5d0:	60b9      	str	r1, [r7, #8]
 800f5d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	6a1b      	ldr	r3, [r3, #32]
 800f5d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	6a1b      	ldr	r3, [r3, #32]
 800f5de:	f023 0201 	bic.w	r2, r3, #1
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	699b      	ldr	r3, [r3, #24]
 800f5ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f5ec:	693b      	ldr	r3, [r7, #16]
 800f5ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f5f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	011b      	lsls	r3, r3, #4
 800f5f8:	693a      	ldr	r2, [r7, #16]
 800f5fa:	4313      	orrs	r3, r2
 800f5fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f5fe:	697b      	ldr	r3, [r7, #20]
 800f600:	f023 030a 	bic.w	r3, r3, #10
 800f604:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f606:	697a      	ldr	r2, [r7, #20]
 800f608:	68bb      	ldr	r3, [r7, #8]
 800f60a:	4313      	orrs	r3, r2
 800f60c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	693a      	ldr	r2, [r7, #16]
 800f612:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	697a      	ldr	r2, [r7, #20]
 800f618:	621a      	str	r2, [r3, #32]
}
 800f61a:	bf00      	nop
 800f61c:	371c      	adds	r7, #28
 800f61e:	46bd      	mov	sp, r7
 800f620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f624:	4770      	bx	lr

0800f626 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f626:	b480      	push	{r7}
 800f628:	b087      	sub	sp, #28
 800f62a:	af00      	add	r7, sp, #0
 800f62c:	60f8      	str	r0, [r7, #12]
 800f62e:	60b9      	str	r1, [r7, #8]
 800f630:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	6a1b      	ldr	r3, [r3, #32]
 800f636:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	6a1b      	ldr	r3, [r3, #32]
 800f63c:	f023 0210 	bic.w	r2, r3, #16
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	699b      	ldr	r3, [r3, #24]
 800f648:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f64a:	693b      	ldr	r3, [r7, #16]
 800f64c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f650:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	031b      	lsls	r3, r3, #12
 800f656:	693a      	ldr	r2, [r7, #16]
 800f658:	4313      	orrs	r3, r2
 800f65a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f65c:	697b      	ldr	r3, [r7, #20]
 800f65e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800f662:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f664:	68bb      	ldr	r3, [r7, #8]
 800f666:	011b      	lsls	r3, r3, #4
 800f668:	697a      	ldr	r2, [r7, #20]
 800f66a:	4313      	orrs	r3, r2
 800f66c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	693a      	ldr	r2, [r7, #16]
 800f672:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	697a      	ldr	r2, [r7, #20]
 800f678:	621a      	str	r2, [r3, #32]
}
 800f67a:	bf00      	nop
 800f67c:	371c      	adds	r7, #28
 800f67e:	46bd      	mov	sp, r7
 800f680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f684:	4770      	bx	lr
	...

0800f688 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f688:	b480      	push	{r7}
 800f68a:	b085      	sub	sp, #20
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	6078      	str	r0, [r7, #4]
 800f690:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	689b      	ldr	r3, [r3, #8]
 800f696:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f698:	68fa      	ldr	r2, [r7, #12]
 800f69a:	4b09      	ldr	r3, [pc, #36]	; (800f6c0 <TIM_ITRx_SetConfig+0x38>)
 800f69c:	4013      	ands	r3, r2
 800f69e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f6a0:	683a      	ldr	r2, [r7, #0]
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	4313      	orrs	r3, r2
 800f6a6:	f043 0307 	orr.w	r3, r3, #7
 800f6aa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	68fa      	ldr	r2, [r7, #12]
 800f6b0:	609a      	str	r2, [r3, #8]
}
 800f6b2:	bf00      	nop
 800f6b4:	3714      	adds	r7, #20
 800f6b6:	46bd      	mov	sp, r7
 800f6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6bc:	4770      	bx	lr
 800f6be:	bf00      	nop
 800f6c0:	ffcfff8f 	.word	0xffcfff8f

0800f6c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f6c4:	b480      	push	{r7}
 800f6c6:	b087      	sub	sp, #28
 800f6c8:	af00      	add	r7, sp, #0
 800f6ca:	60f8      	str	r0, [r7, #12]
 800f6cc:	60b9      	str	r1, [r7, #8]
 800f6ce:	607a      	str	r2, [r7, #4]
 800f6d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	689b      	ldr	r3, [r3, #8]
 800f6d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f6d8:	697b      	ldr	r3, [r7, #20]
 800f6da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f6de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f6e0:	683b      	ldr	r3, [r7, #0]
 800f6e2:	021a      	lsls	r2, r3, #8
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	431a      	orrs	r2, r3
 800f6e8:	68bb      	ldr	r3, [r7, #8]
 800f6ea:	4313      	orrs	r3, r2
 800f6ec:	697a      	ldr	r2, [r7, #20]
 800f6ee:	4313      	orrs	r3, r2
 800f6f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	697a      	ldr	r2, [r7, #20]
 800f6f6:	609a      	str	r2, [r3, #8]
}
 800f6f8:	bf00      	nop
 800f6fa:	371c      	adds	r7, #28
 800f6fc:	46bd      	mov	sp, r7
 800f6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f702:	4770      	bx	lr

0800f704 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f704:	b480      	push	{r7}
 800f706:	b087      	sub	sp, #28
 800f708:	af00      	add	r7, sp, #0
 800f70a:	60f8      	str	r0, [r7, #12]
 800f70c:	60b9      	str	r1, [r7, #8]
 800f70e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f710:	68bb      	ldr	r3, [r7, #8]
 800f712:	f003 031f 	and.w	r3, r3, #31
 800f716:	2201      	movs	r2, #1
 800f718:	fa02 f303 	lsl.w	r3, r2, r3
 800f71c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	6a1a      	ldr	r2, [r3, #32]
 800f722:	697b      	ldr	r3, [r7, #20]
 800f724:	43db      	mvns	r3, r3
 800f726:	401a      	ands	r2, r3
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	6a1a      	ldr	r2, [r3, #32]
 800f730:	68bb      	ldr	r3, [r7, #8]
 800f732:	f003 031f 	and.w	r3, r3, #31
 800f736:	6879      	ldr	r1, [r7, #4]
 800f738:	fa01 f303 	lsl.w	r3, r1, r3
 800f73c:	431a      	orrs	r2, r3
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	621a      	str	r2, [r3, #32]
}
 800f742:	bf00      	nop
 800f744:	371c      	adds	r7, #28
 800f746:	46bd      	mov	sp, r7
 800f748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f74c:	4770      	bx	lr
	...

0800f750 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f750:	b480      	push	{r7}
 800f752:	b085      	sub	sp, #20
 800f754:	af00      	add	r7, sp, #0
 800f756:	6078      	str	r0, [r7, #4]
 800f758:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f760:	2b01      	cmp	r3, #1
 800f762:	d101      	bne.n	800f768 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f764:	2302      	movs	r3, #2
 800f766:	e06d      	b.n	800f844 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	2201      	movs	r2, #1
 800f76c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	2202      	movs	r2, #2
 800f774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	685b      	ldr	r3, [r3, #4]
 800f77e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	689b      	ldr	r3, [r3, #8]
 800f786:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	4a30      	ldr	r2, [pc, #192]	; (800f850 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f78e:	4293      	cmp	r3, r2
 800f790:	d004      	beq.n	800f79c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	4a2f      	ldr	r2, [pc, #188]	; (800f854 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f798:	4293      	cmp	r3, r2
 800f79a:	d108      	bne.n	800f7ae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800f7a2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f7a4:	683b      	ldr	r3, [r7, #0]
 800f7a6:	685b      	ldr	r3, [r3, #4]
 800f7a8:	68fa      	ldr	r2, [r7, #12]
 800f7aa:	4313      	orrs	r3, r2
 800f7ac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f7b4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f7b6:	683b      	ldr	r3, [r7, #0]
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	68fa      	ldr	r2, [r7, #12]
 800f7bc:	4313      	orrs	r3, r2
 800f7be:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	68fa      	ldr	r2, [r7, #12]
 800f7c6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	4a20      	ldr	r2, [pc, #128]	; (800f850 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f7ce:	4293      	cmp	r3, r2
 800f7d0:	d022      	beq.n	800f818 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f7da:	d01d      	beq.n	800f818 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	4a1d      	ldr	r2, [pc, #116]	; (800f858 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800f7e2:	4293      	cmp	r3, r2
 800f7e4:	d018      	beq.n	800f818 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	4a1c      	ldr	r2, [pc, #112]	; (800f85c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800f7ec:	4293      	cmp	r3, r2
 800f7ee:	d013      	beq.n	800f818 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	4a1a      	ldr	r2, [pc, #104]	; (800f860 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800f7f6:	4293      	cmp	r3, r2
 800f7f8:	d00e      	beq.n	800f818 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	4a15      	ldr	r2, [pc, #84]	; (800f854 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f800:	4293      	cmp	r3, r2
 800f802:	d009      	beq.n	800f818 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	681b      	ldr	r3, [r3, #0]
 800f808:	4a16      	ldr	r2, [pc, #88]	; (800f864 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f80a:	4293      	cmp	r3, r2
 800f80c:	d004      	beq.n	800f818 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	4a15      	ldr	r2, [pc, #84]	; (800f868 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f814:	4293      	cmp	r3, r2
 800f816:	d10c      	bne.n	800f832 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f818:	68bb      	ldr	r3, [r7, #8]
 800f81a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f81e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f820:	683b      	ldr	r3, [r7, #0]
 800f822:	689b      	ldr	r3, [r3, #8]
 800f824:	68ba      	ldr	r2, [r7, #8]
 800f826:	4313      	orrs	r3, r2
 800f828:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	68ba      	ldr	r2, [r7, #8]
 800f830:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	2201      	movs	r2, #1
 800f836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	2200      	movs	r2, #0
 800f83e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f842:	2300      	movs	r3, #0
}
 800f844:	4618      	mov	r0, r3
 800f846:	3714      	adds	r7, #20
 800f848:	46bd      	mov	sp, r7
 800f84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f84e:	4770      	bx	lr
 800f850:	40010000 	.word	0x40010000
 800f854:	40010400 	.word	0x40010400
 800f858:	40000400 	.word	0x40000400
 800f85c:	40000800 	.word	0x40000800
 800f860:	40000c00 	.word	0x40000c00
 800f864:	40001800 	.word	0x40001800
 800f868:	40014000 	.word	0x40014000

0800f86c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800f86c:	b480      	push	{r7}
 800f86e:	b085      	sub	sp, #20
 800f870:	af00      	add	r7, sp, #0
 800f872:	6078      	str	r0, [r7, #4]
 800f874:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800f876:	2300      	movs	r3, #0
 800f878:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f880:	2b01      	cmp	r3, #1
 800f882:	d101      	bne.n	800f888 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800f884:	2302      	movs	r3, #2
 800f886:	e065      	b.n	800f954 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	2201      	movs	r2, #1
 800f88c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800f896:	683b      	ldr	r3, [r7, #0]
 800f898:	68db      	ldr	r3, [r3, #12]
 800f89a:	4313      	orrs	r3, r2
 800f89c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800f8a4:	683b      	ldr	r3, [r7, #0]
 800f8a6:	689b      	ldr	r3, [r3, #8]
 800f8a8:	4313      	orrs	r3, r2
 800f8aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800f8b2:	683b      	ldr	r3, [r7, #0]
 800f8b4:	685b      	ldr	r3, [r3, #4]
 800f8b6:	4313      	orrs	r3, r2
 800f8b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800f8c0:	683b      	ldr	r3, [r7, #0]
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	4313      	orrs	r3, r2
 800f8c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f8ce:	683b      	ldr	r3, [r7, #0]
 800f8d0:	691b      	ldr	r3, [r3, #16]
 800f8d2:	4313      	orrs	r3, r2
 800f8d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800f8dc:	683b      	ldr	r3, [r7, #0]
 800f8de:	695b      	ldr	r3, [r3, #20]
 800f8e0:	4313      	orrs	r3, r2
 800f8e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800f8ea:	683b      	ldr	r3, [r7, #0]
 800f8ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f8ee:	4313      	orrs	r3, r2
 800f8f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800f8f8:	683b      	ldr	r3, [r7, #0]
 800f8fa:	699b      	ldr	r3, [r3, #24]
 800f8fc:	041b      	lsls	r3, r3, #16
 800f8fe:	4313      	orrs	r3, r2
 800f900:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	4a16      	ldr	r2, [pc, #88]	; (800f960 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800f908:	4293      	cmp	r3, r2
 800f90a:	d004      	beq.n	800f916 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	4a14      	ldr	r2, [pc, #80]	; (800f964 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800f912:	4293      	cmp	r3, r2
 800f914:	d115      	bne.n	800f942 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800f91c:	683b      	ldr	r3, [r7, #0]
 800f91e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f920:	051b      	lsls	r3, r3, #20
 800f922:	4313      	orrs	r3, r2
 800f924:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800f92c:	683b      	ldr	r3, [r7, #0]
 800f92e:	69db      	ldr	r3, [r3, #28]
 800f930:	4313      	orrs	r3, r2
 800f932:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800f93a:	683b      	ldr	r3, [r7, #0]
 800f93c:	6a1b      	ldr	r3, [r3, #32]
 800f93e:	4313      	orrs	r3, r2
 800f940:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	68fa      	ldr	r2, [r7, #12]
 800f948:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	2200      	movs	r2, #0
 800f94e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f952:	2300      	movs	r3, #0
}
 800f954:	4618      	mov	r0, r3
 800f956:	3714      	adds	r7, #20
 800f958:	46bd      	mov	sp, r7
 800f95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f95e:	4770      	bx	lr
 800f960:	40010000 	.word	0x40010000
 800f964:	40010400 	.word	0x40010400

0800f968 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f968:	b480      	push	{r7}
 800f96a:	b083      	sub	sp, #12
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f970:	bf00      	nop
 800f972:	370c      	adds	r7, #12
 800f974:	46bd      	mov	sp, r7
 800f976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f97a:	4770      	bx	lr

0800f97c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f97c:	b480      	push	{r7}
 800f97e:	b083      	sub	sp, #12
 800f980:	af00      	add	r7, sp, #0
 800f982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f984:	bf00      	nop
 800f986:	370c      	adds	r7, #12
 800f988:	46bd      	mov	sp, r7
 800f98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f98e:	4770      	bx	lr

0800f990 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f990:	b480      	push	{r7}
 800f992:	b083      	sub	sp, #12
 800f994:	af00      	add	r7, sp, #0
 800f996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f998:	bf00      	nop
 800f99a:	370c      	adds	r7, #12
 800f99c:	46bd      	mov	sp, r7
 800f99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9a2:	4770      	bx	lr

0800f9a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f9a4:	b580      	push	{r7, lr}
 800f9a6:	b082      	sub	sp, #8
 800f9a8:	af00      	add	r7, sp, #0
 800f9aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d101      	bne.n	800f9b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f9b2:	2301      	movs	r3, #1
 800f9b4:	e042      	b.n	800fa3c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d106      	bne.n	800f9ce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	2200      	movs	r2, #0
 800f9c4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f9c8:	6878      	ldr	r0, [r7, #4]
 800f9ca:	f7f3 fc3f 	bl	800324c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	2224      	movs	r2, #36	; 0x24
 800f9d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	681a      	ldr	r2, [r3, #0]
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	f022 0201 	bic.w	r2, r2, #1
 800f9e4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d002      	beq.n	800f9f4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800f9ee:	6878      	ldr	r0, [r7, #4]
 800f9f0:	f001 fa36 	bl	8010e60 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f9f4:	6878      	ldr	r0, [r7, #4]
 800f9f6:	f000 fccb 	bl	8010390 <UART_SetConfig>
 800f9fa:	4603      	mov	r3, r0
 800f9fc:	2b01      	cmp	r3, #1
 800f9fe:	d101      	bne.n	800fa04 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800fa00:	2301      	movs	r3, #1
 800fa02:	e01b      	b.n	800fa3c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	685a      	ldr	r2, [r3, #4]
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800fa12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	689a      	ldr	r2, [r3, #8]
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800fa22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	681a      	ldr	r2, [r3, #0]
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	f042 0201 	orr.w	r2, r2, #1
 800fa32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800fa34:	6878      	ldr	r0, [r7, #4]
 800fa36:	f001 fab5 	bl	8010fa4 <UART_CheckIdleState>
 800fa3a:	4603      	mov	r3, r0
}
 800fa3c:	4618      	mov	r0, r3
 800fa3e:	3708      	adds	r7, #8
 800fa40:	46bd      	mov	sp, r7
 800fa42:	bd80      	pop	{r7, pc}

0800fa44 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fa44:	b580      	push	{r7, lr}
 800fa46:	b08a      	sub	sp, #40	; 0x28
 800fa48:	af00      	add	r7, sp, #0
 800fa4a:	60f8      	str	r0, [r7, #12]
 800fa4c:	60b9      	str	r1, [r7, #8]
 800fa4e:	4613      	mov	r3, r2
 800fa50:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fa58:	2b20      	cmp	r3, #32
 800fa5a:	d137      	bne.n	800facc <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800fa5c:	68bb      	ldr	r3, [r7, #8]
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d002      	beq.n	800fa68 <HAL_UART_Receive_IT+0x24>
 800fa62:	88fb      	ldrh	r3, [r7, #6]
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d101      	bne.n	800fa6c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800fa68:	2301      	movs	r3, #1
 800fa6a:	e030      	b.n	800face <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	2200      	movs	r2, #0
 800fa70:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	4a18      	ldr	r2, [pc, #96]	; (800fad8 <HAL_UART_Receive_IT+0x94>)
 800fa78:	4293      	cmp	r3, r2
 800fa7a:	d01f      	beq.n	800fabc <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	685b      	ldr	r3, [r3, #4]
 800fa82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d018      	beq.n	800fabc <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa90:	697b      	ldr	r3, [r7, #20]
 800fa92:	e853 3f00 	ldrex	r3, [r3]
 800fa96:	613b      	str	r3, [r7, #16]
   return(result);
 800fa98:	693b      	ldr	r3, [r7, #16]
 800fa9a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800fa9e:	627b      	str	r3, [r7, #36]	; 0x24
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	461a      	mov	r2, r3
 800faa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faa8:	623b      	str	r3, [r7, #32]
 800faaa:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800faac:	69f9      	ldr	r1, [r7, #28]
 800faae:	6a3a      	ldr	r2, [r7, #32]
 800fab0:	e841 2300 	strex	r3, r2, [r1]
 800fab4:	61bb      	str	r3, [r7, #24]
   return(result);
 800fab6:	69bb      	ldr	r3, [r7, #24]
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d1e6      	bne.n	800fa8a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800fabc:	88fb      	ldrh	r3, [r7, #6]
 800fabe:	461a      	mov	r2, r3
 800fac0:	68b9      	ldr	r1, [r7, #8]
 800fac2:	68f8      	ldr	r0, [r7, #12]
 800fac4:	f001 fb86 	bl	80111d4 <UART_Start_Receive_IT>
 800fac8:	4603      	mov	r3, r0
 800faca:	e000      	b.n	800face <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800facc:	2302      	movs	r3, #2
  }
}
 800face:	4618      	mov	r0, r3
 800fad0:	3728      	adds	r7, #40	; 0x28
 800fad2:	46bd      	mov	sp, r7
 800fad4:	bd80      	pop	{r7, pc}
 800fad6:	bf00      	nop
 800fad8:	58000c00 	.word	0x58000c00

0800fadc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800fadc:	b580      	push	{r7, lr}
 800fade:	b08a      	sub	sp, #40	; 0x28
 800fae0:	af00      	add	r7, sp, #0
 800fae2:	60f8      	str	r0, [r7, #12]
 800fae4:	60b9      	str	r1, [r7, #8]
 800fae6:	4613      	mov	r3, r2
 800fae8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800faf0:	2b20      	cmp	r3, #32
 800faf2:	d167      	bne.n	800fbc4 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800faf4:	68bb      	ldr	r3, [r7, #8]
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d002      	beq.n	800fb00 <HAL_UART_Transmit_DMA+0x24>
 800fafa:	88fb      	ldrh	r3, [r7, #6]
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d101      	bne.n	800fb04 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800fb00:	2301      	movs	r3, #1
 800fb02:	e060      	b.n	800fbc6 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	68ba      	ldr	r2, [r7, #8]
 800fb08:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	88fa      	ldrh	r2, [r7, #6]
 800fb0e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	88fa      	ldrh	r2, [r7, #6]
 800fb16:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	2200      	movs	r2, #0
 800fb1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	2221      	movs	r2, #33	; 0x21
 800fb26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d028      	beq.n	800fb84 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fb36:	4a26      	ldr	r2, [pc, #152]	; (800fbd0 <HAL_UART_Transmit_DMA+0xf4>)
 800fb38:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fb3e:	4a25      	ldr	r2, [pc, #148]	; (800fbd4 <HAL_UART_Transmit_DMA+0xf8>)
 800fb40:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fb46:	4a24      	ldr	r2, [pc, #144]	; (800fbd8 <HAL_UART_Transmit_DMA+0xfc>)
 800fb48:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fb4e:	2200      	movs	r2, #0
 800fb50:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fb5a:	4619      	mov	r1, r3
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	3328      	adds	r3, #40	; 0x28
 800fb62:	461a      	mov	r2, r3
 800fb64:	88fb      	ldrh	r3, [r7, #6]
 800fb66:	f7f6 fb73 	bl	8006250 <HAL_DMA_Start_IT>
 800fb6a:	4603      	mov	r3, r0
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d009      	beq.n	800fb84 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	2210      	movs	r2, #16
 800fb74:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	2220      	movs	r2, #32
 800fb7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 800fb80:	2301      	movs	r3, #1
 800fb82:	e020      	b.n	800fbc6 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	2240      	movs	r2, #64	; 0x40
 800fb8a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800fb8c:	68fb      	ldr	r3, [r7, #12]
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	3308      	adds	r3, #8
 800fb92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb94:	697b      	ldr	r3, [r7, #20]
 800fb96:	e853 3f00 	ldrex	r3, [r3]
 800fb9a:	613b      	str	r3, [r7, #16]
   return(result);
 800fb9c:	693b      	ldr	r3, [r7, #16]
 800fb9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fba2:	627b      	str	r3, [r7, #36]	; 0x24
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	3308      	adds	r3, #8
 800fbaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fbac:	623a      	str	r2, [r7, #32]
 800fbae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbb0:	69f9      	ldr	r1, [r7, #28]
 800fbb2:	6a3a      	ldr	r2, [r7, #32]
 800fbb4:	e841 2300 	strex	r3, r2, [r1]
 800fbb8:	61bb      	str	r3, [r7, #24]
   return(result);
 800fbba:	69bb      	ldr	r3, [r7, #24]
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d1e5      	bne.n	800fb8c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800fbc0:	2300      	movs	r3, #0
 800fbc2:	e000      	b.n	800fbc6 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800fbc4:	2302      	movs	r3, #2
  }
}
 800fbc6:	4618      	mov	r0, r3
 800fbc8:	3728      	adds	r7, #40	; 0x28
 800fbca:	46bd      	mov	sp, r7
 800fbcc:	bd80      	pop	{r7, pc}
 800fbce:	bf00      	nop
 800fbd0:	08011569 	.word	0x08011569
 800fbd4:	080115ff 	.word	0x080115ff
 800fbd8:	0801161b 	.word	0x0801161b

0800fbdc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800fbdc:	b580      	push	{r7, lr}
 800fbde:	b0ba      	sub	sp, #232	; 0xe8
 800fbe0:	af00      	add	r7, sp, #0
 800fbe2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	69db      	ldr	r3, [r3, #28]
 800fbea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	689b      	ldr	r3, [r3, #8]
 800fbfe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800fc02:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800fc06:	f640 030f 	movw	r3, #2063	; 0x80f
 800fc0a:	4013      	ands	r3, r2
 800fc0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800fc10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d11b      	bne.n	800fc50 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800fc18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fc1c:	f003 0320 	and.w	r3, r3, #32
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d015      	beq.n	800fc50 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800fc24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fc28:	f003 0320 	and.w	r3, r3, #32
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d105      	bne.n	800fc3c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800fc30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fc34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d009      	beq.n	800fc50 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	f000 8377 	beq.w	8010334 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fc4a:	6878      	ldr	r0, [r7, #4]
 800fc4c:	4798      	blx	r3
      }
      return;
 800fc4e:	e371      	b.n	8010334 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800fc50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	f000 8123 	beq.w	800fea0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800fc5a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800fc5e:	4b8d      	ldr	r3, [pc, #564]	; (800fe94 <HAL_UART_IRQHandler+0x2b8>)
 800fc60:	4013      	ands	r3, r2
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d106      	bne.n	800fc74 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800fc66:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800fc6a:	4b8b      	ldr	r3, [pc, #556]	; (800fe98 <HAL_UART_IRQHandler+0x2bc>)
 800fc6c:	4013      	ands	r3, r2
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	f000 8116 	beq.w	800fea0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800fc74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fc78:	f003 0301 	and.w	r3, r3, #1
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d011      	beq.n	800fca4 <HAL_UART_IRQHandler+0xc8>
 800fc80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fc84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d00b      	beq.n	800fca4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	2201      	movs	r2, #1
 800fc92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fc9a:	f043 0201 	orr.w	r2, r3, #1
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fca4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fca8:	f003 0302 	and.w	r3, r3, #2
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d011      	beq.n	800fcd4 <HAL_UART_IRQHandler+0xf8>
 800fcb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fcb4:	f003 0301 	and.w	r3, r3, #1
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d00b      	beq.n	800fcd4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	2202      	movs	r2, #2
 800fcc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fcca:	f043 0204 	orr.w	r2, r3, #4
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fcd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fcd8:	f003 0304 	and.w	r3, r3, #4
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d011      	beq.n	800fd04 <HAL_UART_IRQHandler+0x128>
 800fce0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fce4:	f003 0301 	and.w	r3, r3, #1
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d00b      	beq.n	800fd04 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	2204      	movs	r2, #4
 800fcf2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fcfa:	f043 0202 	orr.w	r2, r3, #2
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800fd04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fd08:	f003 0308 	and.w	r3, r3, #8
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d017      	beq.n	800fd40 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800fd10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fd14:	f003 0320 	and.w	r3, r3, #32
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d105      	bne.n	800fd28 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800fd1c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800fd20:	4b5c      	ldr	r3, [pc, #368]	; (800fe94 <HAL_UART_IRQHandler+0x2b8>)
 800fd22:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d00b      	beq.n	800fd40 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	2208      	movs	r2, #8
 800fd2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fd36:	f043 0208 	orr.w	r2, r3, #8
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800fd40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fd44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d012      	beq.n	800fd72 <HAL_UART_IRQHandler+0x196>
 800fd4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fd50:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d00c      	beq.n	800fd72 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fd60:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fd68:	f043 0220 	orr.w	r2, r3, #32
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	f000 82dd 	beq.w	8010338 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800fd7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fd82:	f003 0320 	and.w	r3, r3, #32
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d013      	beq.n	800fdb2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800fd8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fd8e:	f003 0320 	and.w	r3, r3, #32
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d105      	bne.n	800fda2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800fd96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fd9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d007      	beq.n	800fdb2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d003      	beq.n	800fdb2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fdae:	6878      	ldr	r0, [r7, #4]
 800fdb0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fdb8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	689b      	ldr	r3, [r3, #8]
 800fdc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fdc6:	2b40      	cmp	r3, #64	; 0x40
 800fdc8:	d005      	beq.n	800fdd6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800fdca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800fdce:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d054      	beq.n	800fe80 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800fdd6:	6878      	ldr	r0, [r7, #4]
 800fdd8:	f001 fb60 	bl	801149c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	689b      	ldr	r3, [r3, #8]
 800fde2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fde6:	2b40      	cmp	r3, #64	; 0x40
 800fde8:	d146      	bne.n	800fe78 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	3308      	adds	r3, #8
 800fdf0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fdf4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800fdf8:	e853 3f00 	ldrex	r3, [r3]
 800fdfc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800fe00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800fe04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fe08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	3308      	adds	r3, #8
 800fe12:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800fe16:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800fe1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe1e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800fe22:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800fe26:	e841 2300 	strex	r3, r2, [r1]
 800fe2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800fe2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d1d9      	bne.n	800fdea <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d017      	beq.n	800fe70 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fe46:	4a15      	ldr	r2, [pc, #84]	; (800fe9c <HAL_UART_IRQHandler+0x2c0>)
 800fe48:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fe50:	4618      	mov	r0, r3
 800fe52:	f7f6 ff85 	bl	8006d60 <HAL_DMA_Abort_IT>
 800fe56:	4603      	mov	r3, r0
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d019      	beq.n	800fe90 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fe62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fe64:	687a      	ldr	r2, [r7, #4]
 800fe66:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800fe6a:	4610      	mov	r0, r2
 800fe6c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fe6e:	e00f      	b.n	800fe90 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800fe70:	6878      	ldr	r0, [r7, #4]
 800fe72:	f000 fa77 	bl	8010364 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fe76:	e00b      	b.n	800fe90 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800fe78:	6878      	ldr	r0, [r7, #4]
 800fe7a:	f000 fa73 	bl	8010364 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fe7e:	e007      	b.n	800fe90 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800fe80:	6878      	ldr	r0, [r7, #4]
 800fe82:	f000 fa6f 	bl	8010364 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	2200      	movs	r2, #0
 800fe8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800fe8e:	e253      	b.n	8010338 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fe90:	bf00      	nop
    return;
 800fe92:	e251      	b.n	8010338 <HAL_UART_IRQHandler+0x75c>
 800fe94:	10000001 	.word	0x10000001
 800fe98:	04000120 	.word	0x04000120
 800fe9c:	0801169b 	.word	0x0801169b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fea4:	2b01      	cmp	r3, #1
 800fea6:	f040 81e7 	bne.w	8010278 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800feaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800feae:	f003 0310 	and.w	r3, r3, #16
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	f000 81e0 	beq.w	8010278 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800feb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800febc:	f003 0310 	and.w	r3, r3, #16
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	f000 81d9 	beq.w	8010278 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	2210      	movs	r2, #16
 800fecc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	689b      	ldr	r3, [r3, #8]
 800fed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fed8:	2b40      	cmp	r3, #64	; 0x40
 800feda:	f040 8151 	bne.w	8010180 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	4a96      	ldr	r2, [pc, #600]	; (8010140 <HAL_UART_IRQHandler+0x564>)
 800fee8:	4293      	cmp	r3, r2
 800feea:	d068      	beq.n	800ffbe <HAL_UART_IRQHandler+0x3e2>
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	4a93      	ldr	r2, [pc, #588]	; (8010144 <HAL_UART_IRQHandler+0x568>)
 800fef6:	4293      	cmp	r3, r2
 800fef8:	d061      	beq.n	800ffbe <HAL_UART_IRQHandler+0x3e2>
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	4a91      	ldr	r2, [pc, #580]	; (8010148 <HAL_UART_IRQHandler+0x56c>)
 800ff04:	4293      	cmp	r3, r2
 800ff06:	d05a      	beq.n	800ffbe <HAL_UART_IRQHandler+0x3e2>
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ff0e:	681b      	ldr	r3, [r3, #0]
 800ff10:	4a8e      	ldr	r2, [pc, #568]	; (801014c <HAL_UART_IRQHandler+0x570>)
 800ff12:	4293      	cmp	r3, r2
 800ff14:	d053      	beq.n	800ffbe <HAL_UART_IRQHandler+0x3e2>
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ff1c:	681b      	ldr	r3, [r3, #0]
 800ff1e:	4a8c      	ldr	r2, [pc, #560]	; (8010150 <HAL_UART_IRQHandler+0x574>)
 800ff20:	4293      	cmp	r3, r2
 800ff22:	d04c      	beq.n	800ffbe <HAL_UART_IRQHandler+0x3e2>
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	4a89      	ldr	r2, [pc, #548]	; (8010154 <HAL_UART_IRQHandler+0x578>)
 800ff2e:	4293      	cmp	r3, r2
 800ff30:	d045      	beq.n	800ffbe <HAL_UART_IRQHandler+0x3e2>
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	4a87      	ldr	r2, [pc, #540]	; (8010158 <HAL_UART_IRQHandler+0x57c>)
 800ff3c:	4293      	cmp	r3, r2
 800ff3e:	d03e      	beq.n	800ffbe <HAL_UART_IRQHandler+0x3e2>
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	4a84      	ldr	r2, [pc, #528]	; (801015c <HAL_UART_IRQHandler+0x580>)
 800ff4a:	4293      	cmp	r3, r2
 800ff4c:	d037      	beq.n	800ffbe <HAL_UART_IRQHandler+0x3e2>
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	4a82      	ldr	r2, [pc, #520]	; (8010160 <HAL_UART_IRQHandler+0x584>)
 800ff58:	4293      	cmp	r3, r2
 800ff5a:	d030      	beq.n	800ffbe <HAL_UART_IRQHandler+0x3e2>
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	4a7f      	ldr	r2, [pc, #508]	; (8010164 <HAL_UART_IRQHandler+0x588>)
 800ff66:	4293      	cmp	r3, r2
 800ff68:	d029      	beq.n	800ffbe <HAL_UART_IRQHandler+0x3e2>
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	4a7d      	ldr	r2, [pc, #500]	; (8010168 <HAL_UART_IRQHandler+0x58c>)
 800ff74:	4293      	cmp	r3, r2
 800ff76:	d022      	beq.n	800ffbe <HAL_UART_IRQHandler+0x3e2>
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	4a7a      	ldr	r2, [pc, #488]	; (801016c <HAL_UART_IRQHandler+0x590>)
 800ff82:	4293      	cmp	r3, r2
 800ff84:	d01b      	beq.n	800ffbe <HAL_UART_IRQHandler+0x3e2>
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	4a78      	ldr	r2, [pc, #480]	; (8010170 <HAL_UART_IRQHandler+0x594>)
 800ff90:	4293      	cmp	r3, r2
 800ff92:	d014      	beq.n	800ffbe <HAL_UART_IRQHandler+0x3e2>
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	4a75      	ldr	r2, [pc, #468]	; (8010174 <HAL_UART_IRQHandler+0x598>)
 800ff9e:	4293      	cmp	r3, r2
 800ffa0:	d00d      	beq.n	800ffbe <HAL_UART_IRQHandler+0x3e2>
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	4a73      	ldr	r2, [pc, #460]	; (8010178 <HAL_UART_IRQHandler+0x59c>)
 800ffac:	4293      	cmp	r3, r2
 800ffae:	d006      	beq.n	800ffbe <HAL_UART_IRQHandler+0x3e2>
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	4a70      	ldr	r2, [pc, #448]	; (801017c <HAL_UART_IRQHandler+0x5a0>)
 800ffba:	4293      	cmp	r3, r2
 800ffbc:	d106      	bne.n	800ffcc <HAL_UART_IRQHandler+0x3f0>
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	685b      	ldr	r3, [r3, #4]
 800ffc8:	b29b      	uxth	r3, r3
 800ffca:	e005      	b.n	800ffd8 <HAL_UART_IRQHandler+0x3fc>
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	685b      	ldr	r3, [r3, #4]
 800ffd6:	b29b      	uxth	r3, r3
 800ffd8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ffdc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	f000 81ab 	beq.w	801033c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ffec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800fff0:	429a      	cmp	r2, r3
 800fff2:	f080 81a3 	bcs.w	801033c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800fffc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010006:	69db      	ldr	r3, [r3, #28]
 8010008:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801000c:	f000 8087 	beq.w	801011e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010018:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801001c:	e853 3f00 	ldrex	r3, [r3]
 8010020:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8010024:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010028:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801002c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	461a      	mov	r2, r3
 8010036:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801003a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801003e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010042:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8010046:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801004a:	e841 2300 	strex	r3, r2, [r1]
 801004e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8010052:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010056:	2b00      	cmp	r3, #0
 8010058:	d1da      	bne.n	8010010 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	3308      	adds	r3, #8
 8010060:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010062:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010064:	e853 3f00 	ldrex	r3, [r3]
 8010068:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801006a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801006c:	f023 0301 	bic.w	r3, r3, #1
 8010070:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	3308      	adds	r3, #8
 801007a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801007e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8010082:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010084:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8010086:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801008a:	e841 2300 	strex	r3, r2, [r1]
 801008e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8010090:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010092:	2b00      	cmp	r3, #0
 8010094:	d1e1      	bne.n	801005a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	3308      	adds	r3, #8
 801009c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801009e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80100a0:	e853 3f00 	ldrex	r3, [r3]
 80100a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80100a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80100a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80100ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	3308      	adds	r3, #8
 80100b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80100ba:	66fa      	str	r2, [r7, #108]	; 0x6c
 80100bc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100be:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80100c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80100c2:	e841 2300 	strex	r3, r2, [r1]
 80100c6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80100c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d1e3      	bne.n	8010096 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	2220      	movs	r2, #32
 80100d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	2200      	movs	r2, #0
 80100da:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80100e4:	e853 3f00 	ldrex	r3, [r3]
 80100e8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80100ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80100ec:	f023 0310 	bic.w	r3, r3, #16
 80100f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	461a      	mov	r2, r3
 80100fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80100fe:	65bb      	str	r3, [r7, #88]	; 0x58
 8010100:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010102:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010104:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010106:	e841 2300 	strex	r3, r2, [r1]
 801010a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801010c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801010e:	2b00      	cmp	r3, #0
 8010110:	d1e4      	bne.n	80100dc <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010118:	4618      	mov	r0, r3
 801011a:	f7f6 fb03 	bl	8006724 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	2202      	movs	r2, #2
 8010122:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010130:	b29b      	uxth	r3, r3
 8010132:	1ad3      	subs	r3, r2, r3
 8010134:	b29b      	uxth	r3, r3
 8010136:	4619      	mov	r1, r3
 8010138:	6878      	ldr	r0, [r7, #4]
 801013a:	f000 f91d 	bl	8010378 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801013e:	e0fd      	b.n	801033c <HAL_UART_IRQHandler+0x760>
 8010140:	40020010 	.word	0x40020010
 8010144:	40020028 	.word	0x40020028
 8010148:	40020040 	.word	0x40020040
 801014c:	40020058 	.word	0x40020058
 8010150:	40020070 	.word	0x40020070
 8010154:	40020088 	.word	0x40020088
 8010158:	400200a0 	.word	0x400200a0
 801015c:	400200b8 	.word	0x400200b8
 8010160:	40020410 	.word	0x40020410
 8010164:	40020428 	.word	0x40020428
 8010168:	40020440 	.word	0x40020440
 801016c:	40020458 	.word	0x40020458
 8010170:	40020470 	.word	0x40020470
 8010174:	40020488 	.word	0x40020488
 8010178:	400204a0 	.word	0x400204a0
 801017c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801018c:	b29b      	uxth	r3, r3
 801018e:	1ad3      	subs	r3, r2, r3
 8010190:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801019a:	b29b      	uxth	r3, r3
 801019c:	2b00      	cmp	r3, #0
 801019e:	f000 80cf 	beq.w	8010340 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 80101a2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	f000 80ca 	beq.w	8010340 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101b4:	e853 3f00 	ldrex	r3, [r3]
 80101b8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80101ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80101c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	461a      	mov	r2, r3
 80101ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80101ce:	647b      	str	r3, [r7, #68]	; 0x44
 80101d0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80101d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80101d6:	e841 2300 	strex	r3, r2, [r1]
 80101da:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80101dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80101de:	2b00      	cmp	r3, #0
 80101e0:	d1e4      	bne.n	80101ac <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	3308      	adds	r3, #8
 80101e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101ec:	e853 3f00 	ldrex	r3, [r3]
 80101f0:	623b      	str	r3, [r7, #32]
   return(result);
 80101f2:	6a3a      	ldr	r2, [r7, #32]
 80101f4:	4b55      	ldr	r3, [pc, #340]	; (801034c <HAL_UART_IRQHandler+0x770>)
 80101f6:	4013      	ands	r3, r2
 80101f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	3308      	adds	r3, #8
 8010202:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8010206:	633a      	str	r2, [r7, #48]	; 0x30
 8010208:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801020a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801020c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801020e:	e841 2300 	strex	r3, r2, [r1]
 8010212:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010216:	2b00      	cmp	r3, #0
 8010218:	d1e3      	bne.n	80101e2 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	2220      	movs	r2, #32
 801021e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	2200      	movs	r2, #0
 8010226:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	2200      	movs	r2, #0
 801022c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010234:	693b      	ldr	r3, [r7, #16]
 8010236:	e853 3f00 	ldrex	r3, [r3]
 801023a:	60fb      	str	r3, [r7, #12]
   return(result);
 801023c:	68fb      	ldr	r3, [r7, #12]
 801023e:	f023 0310 	bic.w	r3, r3, #16
 8010242:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	461a      	mov	r2, r3
 801024c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010250:	61fb      	str	r3, [r7, #28]
 8010252:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010254:	69b9      	ldr	r1, [r7, #24]
 8010256:	69fa      	ldr	r2, [r7, #28]
 8010258:	e841 2300 	strex	r3, r2, [r1]
 801025c:	617b      	str	r3, [r7, #20]
   return(result);
 801025e:	697b      	ldr	r3, [r7, #20]
 8010260:	2b00      	cmp	r3, #0
 8010262:	d1e4      	bne.n	801022e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	2202      	movs	r2, #2
 8010268:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801026a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801026e:	4619      	mov	r1, r3
 8010270:	6878      	ldr	r0, [r7, #4]
 8010272:	f000 f881 	bl	8010378 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010276:	e063      	b.n	8010340 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8010278:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801027c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010280:	2b00      	cmp	r3, #0
 8010282:	d00e      	beq.n	80102a2 <HAL_UART_IRQHandler+0x6c6>
 8010284:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010288:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801028c:	2b00      	cmp	r3, #0
 801028e:	d008      	beq.n	80102a2 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8010298:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 801029a:	6878      	ldr	r0, [r7, #4]
 801029c:	f001 ff5a 	bl	8012154 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80102a0:	e051      	b.n	8010346 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80102a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80102a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d014      	beq.n	80102d8 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80102ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80102b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d105      	bne.n	80102c6 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80102ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80102be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d008      	beq.n	80102d8 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d03a      	beq.n	8010344 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80102d2:	6878      	ldr	r0, [r7, #4]
 80102d4:	4798      	blx	r3
    }
    return;
 80102d6:	e035      	b.n	8010344 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80102d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80102dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d009      	beq.n	80102f8 <HAL_UART_IRQHandler+0x71c>
 80102e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80102e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d003      	beq.n	80102f8 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 80102f0:	6878      	ldr	r0, [r7, #4]
 80102f2:	f001 f9e8 	bl	80116c6 <UART_EndTransmit_IT>
    return;
 80102f6:	e026      	b.n	8010346 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80102f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80102fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010300:	2b00      	cmp	r3, #0
 8010302:	d009      	beq.n	8010318 <HAL_UART_IRQHandler+0x73c>
 8010304:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010308:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801030c:	2b00      	cmp	r3, #0
 801030e:	d003      	beq.n	8010318 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8010310:	6878      	ldr	r0, [r7, #4]
 8010312:	f001 ff33 	bl	801217c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010316:	e016      	b.n	8010346 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8010318:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801031c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010320:	2b00      	cmp	r3, #0
 8010322:	d010      	beq.n	8010346 <HAL_UART_IRQHandler+0x76a>
 8010324:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010328:	2b00      	cmp	r3, #0
 801032a:	da0c      	bge.n	8010346 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 801032c:	6878      	ldr	r0, [r7, #4]
 801032e:	f001 ff1b 	bl	8012168 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010332:	e008      	b.n	8010346 <HAL_UART_IRQHandler+0x76a>
      return;
 8010334:	bf00      	nop
 8010336:	e006      	b.n	8010346 <HAL_UART_IRQHandler+0x76a>
    return;
 8010338:	bf00      	nop
 801033a:	e004      	b.n	8010346 <HAL_UART_IRQHandler+0x76a>
      return;
 801033c:	bf00      	nop
 801033e:	e002      	b.n	8010346 <HAL_UART_IRQHandler+0x76a>
      return;
 8010340:	bf00      	nop
 8010342:	e000      	b.n	8010346 <HAL_UART_IRQHandler+0x76a>
    return;
 8010344:	bf00      	nop
  }
}
 8010346:	37e8      	adds	r7, #232	; 0xe8
 8010348:	46bd      	mov	sp, r7
 801034a:	bd80      	pop	{r7, pc}
 801034c:	effffffe 	.word	0xeffffffe

08010350 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010350:	b480      	push	{r7}
 8010352:	b083      	sub	sp, #12
 8010354:	af00      	add	r7, sp, #0
 8010356:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8010358:	bf00      	nop
 801035a:	370c      	adds	r7, #12
 801035c:	46bd      	mov	sp, r7
 801035e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010362:	4770      	bx	lr

08010364 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010364:	b480      	push	{r7}
 8010366:	b083      	sub	sp, #12
 8010368:	af00      	add	r7, sp, #0
 801036a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 801036c:	bf00      	nop
 801036e:	370c      	adds	r7, #12
 8010370:	46bd      	mov	sp, r7
 8010372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010376:	4770      	bx	lr

08010378 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010378:	b480      	push	{r7}
 801037a:	b083      	sub	sp, #12
 801037c:	af00      	add	r7, sp, #0
 801037e:	6078      	str	r0, [r7, #4]
 8010380:	460b      	mov	r3, r1
 8010382:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8010384:	bf00      	nop
 8010386:	370c      	adds	r7, #12
 8010388:	46bd      	mov	sp, r7
 801038a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801038e:	4770      	bx	lr

08010390 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010390:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010394:	b092      	sub	sp, #72	; 0x48
 8010396:	af00      	add	r7, sp, #0
 8010398:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801039a:	2300      	movs	r3, #0
 801039c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80103a0:	697b      	ldr	r3, [r7, #20]
 80103a2:	689a      	ldr	r2, [r3, #8]
 80103a4:	697b      	ldr	r3, [r7, #20]
 80103a6:	691b      	ldr	r3, [r3, #16]
 80103a8:	431a      	orrs	r2, r3
 80103aa:	697b      	ldr	r3, [r7, #20]
 80103ac:	695b      	ldr	r3, [r3, #20]
 80103ae:	431a      	orrs	r2, r3
 80103b0:	697b      	ldr	r3, [r7, #20]
 80103b2:	69db      	ldr	r3, [r3, #28]
 80103b4:	4313      	orrs	r3, r2
 80103b6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80103b8:	697b      	ldr	r3, [r7, #20]
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	681a      	ldr	r2, [r3, #0]
 80103be:	4bbe      	ldr	r3, [pc, #760]	; (80106b8 <UART_SetConfig+0x328>)
 80103c0:	4013      	ands	r3, r2
 80103c2:	697a      	ldr	r2, [r7, #20]
 80103c4:	6812      	ldr	r2, [r2, #0]
 80103c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80103c8:	430b      	orrs	r3, r1
 80103ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80103cc:	697b      	ldr	r3, [r7, #20]
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	685b      	ldr	r3, [r3, #4]
 80103d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80103d6:	697b      	ldr	r3, [r7, #20]
 80103d8:	68da      	ldr	r2, [r3, #12]
 80103da:	697b      	ldr	r3, [r7, #20]
 80103dc:	681b      	ldr	r3, [r3, #0]
 80103de:	430a      	orrs	r2, r1
 80103e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80103e2:	697b      	ldr	r3, [r7, #20]
 80103e4:	699b      	ldr	r3, [r3, #24]
 80103e6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80103e8:	697b      	ldr	r3, [r7, #20]
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	4ab3      	ldr	r2, [pc, #716]	; (80106bc <UART_SetConfig+0x32c>)
 80103ee:	4293      	cmp	r3, r2
 80103f0:	d004      	beq.n	80103fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80103f2:	697b      	ldr	r3, [r7, #20]
 80103f4:	6a1b      	ldr	r3, [r3, #32]
 80103f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80103f8:	4313      	orrs	r3, r2
 80103fa:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80103fc:	697b      	ldr	r3, [r7, #20]
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	689a      	ldr	r2, [r3, #8]
 8010402:	4baf      	ldr	r3, [pc, #700]	; (80106c0 <UART_SetConfig+0x330>)
 8010404:	4013      	ands	r3, r2
 8010406:	697a      	ldr	r2, [r7, #20]
 8010408:	6812      	ldr	r2, [r2, #0]
 801040a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801040c:	430b      	orrs	r3, r1
 801040e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010410:	697b      	ldr	r3, [r7, #20]
 8010412:	681b      	ldr	r3, [r3, #0]
 8010414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010416:	f023 010f 	bic.w	r1, r3, #15
 801041a:	697b      	ldr	r3, [r7, #20]
 801041c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801041e:	697b      	ldr	r3, [r7, #20]
 8010420:	681b      	ldr	r3, [r3, #0]
 8010422:	430a      	orrs	r2, r1
 8010424:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010426:	697b      	ldr	r3, [r7, #20]
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	4aa6      	ldr	r2, [pc, #664]	; (80106c4 <UART_SetConfig+0x334>)
 801042c:	4293      	cmp	r3, r2
 801042e:	d177      	bne.n	8010520 <UART_SetConfig+0x190>
 8010430:	4ba5      	ldr	r3, [pc, #660]	; (80106c8 <UART_SetConfig+0x338>)
 8010432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010434:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010438:	2b28      	cmp	r3, #40	; 0x28
 801043a:	d86d      	bhi.n	8010518 <UART_SetConfig+0x188>
 801043c:	a201      	add	r2, pc, #4	; (adr r2, 8010444 <UART_SetConfig+0xb4>)
 801043e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010442:	bf00      	nop
 8010444:	080104e9 	.word	0x080104e9
 8010448:	08010519 	.word	0x08010519
 801044c:	08010519 	.word	0x08010519
 8010450:	08010519 	.word	0x08010519
 8010454:	08010519 	.word	0x08010519
 8010458:	08010519 	.word	0x08010519
 801045c:	08010519 	.word	0x08010519
 8010460:	08010519 	.word	0x08010519
 8010464:	080104f1 	.word	0x080104f1
 8010468:	08010519 	.word	0x08010519
 801046c:	08010519 	.word	0x08010519
 8010470:	08010519 	.word	0x08010519
 8010474:	08010519 	.word	0x08010519
 8010478:	08010519 	.word	0x08010519
 801047c:	08010519 	.word	0x08010519
 8010480:	08010519 	.word	0x08010519
 8010484:	080104f9 	.word	0x080104f9
 8010488:	08010519 	.word	0x08010519
 801048c:	08010519 	.word	0x08010519
 8010490:	08010519 	.word	0x08010519
 8010494:	08010519 	.word	0x08010519
 8010498:	08010519 	.word	0x08010519
 801049c:	08010519 	.word	0x08010519
 80104a0:	08010519 	.word	0x08010519
 80104a4:	08010501 	.word	0x08010501
 80104a8:	08010519 	.word	0x08010519
 80104ac:	08010519 	.word	0x08010519
 80104b0:	08010519 	.word	0x08010519
 80104b4:	08010519 	.word	0x08010519
 80104b8:	08010519 	.word	0x08010519
 80104bc:	08010519 	.word	0x08010519
 80104c0:	08010519 	.word	0x08010519
 80104c4:	08010509 	.word	0x08010509
 80104c8:	08010519 	.word	0x08010519
 80104cc:	08010519 	.word	0x08010519
 80104d0:	08010519 	.word	0x08010519
 80104d4:	08010519 	.word	0x08010519
 80104d8:	08010519 	.word	0x08010519
 80104dc:	08010519 	.word	0x08010519
 80104e0:	08010519 	.word	0x08010519
 80104e4:	08010511 	.word	0x08010511
 80104e8:	2301      	movs	r3, #1
 80104ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80104ee:	e222      	b.n	8010936 <UART_SetConfig+0x5a6>
 80104f0:	2304      	movs	r3, #4
 80104f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80104f6:	e21e      	b.n	8010936 <UART_SetConfig+0x5a6>
 80104f8:	2308      	movs	r3, #8
 80104fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80104fe:	e21a      	b.n	8010936 <UART_SetConfig+0x5a6>
 8010500:	2310      	movs	r3, #16
 8010502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010506:	e216      	b.n	8010936 <UART_SetConfig+0x5a6>
 8010508:	2320      	movs	r3, #32
 801050a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801050e:	e212      	b.n	8010936 <UART_SetConfig+0x5a6>
 8010510:	2340      	movs	r3, #64	; 0x40
 8010512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010516:	e20e      	b.n	8010936 <UART_SetConfig+0x5a6>
 8010518:	2380      	movs	r3, #128	; 0x80
 801051a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801051e:	e20a      	b.n	8010936 <UART_SetConfig+0x5a6>
 8010520:	697b      	ldr	r3, [r7, #20]
 8010522:	681b      	ldr	r3, [r3, #0]
 8010524:	4a69      	ldr	r2, [pc, #420]	; (80106cc <UART_SetConfig+0x33c>)
 8010526:	4293      	cmp	r3, r2
 8010528:	d130      	bne.n	801058c <UART_SetConfig+0x1fc>
 801052a:	4b67      	ldr	r3, [pc, #412]	; (80106c8 <UART_SetConfig+0x338>)
 801052c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801052e:	f003 0307 	and.w	r3, r3, #7
 8010532:	2b05      	cmp	r3, #5
 8010534:	d826      	bhi.n	8010584 <UART_SetConfig+0x1f4>
 8010536:	a201      	add	r2, pc, #4	; (adr r2, 801053c <UART_SetConfig+0x1ac>)
 8010538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801053c:	08010555 	.word	0x08010555
 8010540:	0801055d 	.word	0x0801055d
 8010544:	08010565 	.word	0x08010565
 8010548:	0801056d 	.word	0x0801056d
 801054c:	08010575 	.word	0x08010575
 8010550:	0801057d 	.word	0x0801057d
 8010554:	2300      	movs	r3, #0
 8010556:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801055a:	e1ec      	b.n	8010936 <UART_SetConfig+0x5a6>
 801055c:	2304      	movs	r3, #4
 801055e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010562:	e1e8      	b.n	8010936 <UART_SetConfig+0x5a6>
 8010564:	2308      	movs	r3, #8
 8010566:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801056a:	e1e4      	b.n	8010936 <UART_SetConfig+0x5a6>
 801056c:	2310      	movs	r3, #16
 801056e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010572:	e1e0      	b.n	8010936 <UART_SetConfig+0x5a6>
 8010574:	2320      	movs	r3, #32
 8010576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801057a:	e1dc      	b.n	8010936 <UART_SetConfig+0x5a6>
 801057c:	2340      	movs	r3, #64	; 0x40
 801057e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010582:	e1d8      	b.n	8010936 <UART_SetConfig+0x5a6>
 8010584:	2380      	movs	r3, #128	; 0x80
 8010586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801058a:	e1d4      	b.n	8010936 <UART_SetConfig+0x5a6>
 801058c:	697b      	ldr	r3, [r7, #20]
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	4a4f      	ldr	r2, [pc, #316]	; (80106d0 <UART_SetConfig+0x340>)
 8010592:	4293      	cmp	r3, r2
 8010594:	d130      	bne.n	80105f8 <UART_SetConfig+0x268>
 8010596:	4b4c      	ldr	r3, [pc, #304]	; (80106c8 <UART_SetConfig+0x338>)
 8010598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801059a:	f003 0307 	and.w	r3, r3, #7
 801059e:	2b05      	cmp	r3, #5
 80105a0:	d826      	bhi.n	80105f0 <UART_SetConfig+0x260>
 80105a2:	a201      	add	r2, pc, #4	; (adr r2, 80105a8 <UART_SetConfig+0x218>)
 80105a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80105a8:	080105c1 	.word	0x080105c1
 80105ac:	080105c9 	.word	0x080105c9
 80105b0:	080105d1 	.word	0x080105d1
 80105b4:	080105d9 	.word	0x080105d9
 80105b8:	080105e1 	.word	0x080105e1
 80105bc:	080105e9 	.word	0x080105e9
 80105c0:	2300      	movs	r3, #0
 80105c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80105c6:	e1b6      	b.n	8010936 <UART_SetConfig+0x5a6>
 80105c8:	2304      	movs	r3, #4
 80105ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80105ce:	e1b2      	b.n	8010936 <UART_SetConfig+0x5a6>
 80105d0:	2308      	movs	r3, #8
 80105d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80105d6:	e1ae      	b.n	8010936 <UART_SetConfig+0x5a6>
 80105d8:	2310      	movs	r3, #16
 80105da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80105de:	e1aa      	b.n	8010936 <UART_SetConfig+0x5a6>
 80105e0:	2320      	movs	r3, #32
 80105e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80105e6:	e1a6      	b.n	8010936 <UART_SetConfig+0x5a6>
 80105e8:	2340      	movs	r3, #64	; 0x40
 80105ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80105ee:	e1a2      	b.n	8010936 <UART_SetConfig+0x5a6>
 80105f0:	2380      	movs	r3, #128	; 0x80
 80105f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80105f6:	e19e      	b.n	8010936 <UART_SetConfig+0x5a6>
 80105f8:	697b      	ldr	r3, [r7, #20]
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	4a35      	ldr	r2, [pc, #212]	; (80106d4 <UART_SetConfig+0x344>)
 80105fe:	4293      	cmp	r3, r2
 8010600:	d130      	bne.n	8010664 <UART_SetConfig+0x2d4>
 8010602:	4b31      	ldr	r3, [pc, #196]	; (80106c8 <UART_SetConfig+0x338>)
 8010604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010606:	f003 0307 	and.w	r3, r3, #7
 801060a:	2b05      	cmp	r3, #5
 801060c:	d826      	bhi.n	801065c <UART_SetConfig+0x2cc>
 801060e:	a201      	add	r2, pc, #4	; (adr r2, 8010614 <UART_SetConfig+0x284>)
 8010610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010614:	0801062d 	.word	0x0801062d
 8010618:	08010635 	.word	0x08010635
 801061c:	0801063d 	.word	0x0801063d
 8010620:	08010645 	.word	0x08010645
 8010624:	0801064d 	.word	0x0801064d
 8010628:	08010655 	.word	0x08010655
 801062c:	2300      	movs	r3, #0
 801062e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010632:	e180      	b.n	8010936 <UART_SetConfig+0x5a6>
 8010634:	2304      	movs	r3, #4
 8010636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801063a:	e17c      	b.n	8010936 <UART_SetConfig+0x5a6>
 801063c:	2308      	movs	r3, #8
 801063e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010642:	e178      	b.n	8010936 <UART_SetConfig+0x5a6>
 8010644:	2310      	movs	r3, #16
 8010646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801064a:	e174      	b.n	8010936 <UART_SetConfig+0x5a6>
 801064c:	2320      	movs	r3, #32
 801064e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010652:	e170      	b.n	8010936 <UART_SetConfig+0x5a6>
 8010654:	2340      	movs	r3, #64	; 0x40
 8010656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801065a:	e16c      	b.n	8010936 <UART_SetConfig+0x5a6>
 801065c:	2380      	movs	r3, #128	; 0x80
 801065e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010662:	e168      	b.n	8010936 <UART_SetConfig+0x5a6>
 8010664:	697b      	ldr	r3, [r7, #20]
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	4a1b      	ldr	r2, [pc, #108]	; (80106d8 <UART_SetConfig+0x348>)
 801066a:	4293      	cmp	r3, r2
 801066c:	d142      	bne.n	80106f4 <UART_SetConfig+0x364>
 801066e:	4b16      	ldr	r3, [pc, #88]	; (80106c8 <UART_SetConfig+0x338>)
 8010670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010672:	f003 0307 	and.w	r3, r3, #7
 8010676:	2b05      	cmp	r3, #5
 8010678:	d838      	bhi.n	80106ec <UART_SetConfig+0x35c>
 801067a:	a201      	add	r2, pc, #4	; (adr r2, 8010680 <UART_SetConfig+0x2f0>)
 801067c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010680:	08010699 	.word	0x08010699
 8010684:	080106a1 	.word	0x080106a1
 8010688:	080106a9 	.word	0x080106a9
 801068c:	080106b1 	.word	0x080106b1
 8010690:	080106dd 	.word	0x080106dd
 8010694:	080106e5 	.word	0x080106e5
 8010698:	2300      	movs	r3, #0
 801069a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801069e:	e14a      	b.n	8010936 <UART_SetConfig+0x5a6>
 80106a0:	2304      	movs	r3, #4
 80106a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80106a6:	e146      	b.n	8010936 <UART_SetConfig+0x5a6>
 80106a8:	2308      	movs	r3, #8
 80106aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80106ae:	e142      	b.n	8010936 <UART_SetConfig+0x5a6>
 80106b0:	2310      	movs	r3, #16
 80106b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80106b6:	e13e      	b.n	8010936 <UART_SetConfig+0x5a6>
 80106b8:	cfff69f3 	.word	0xcfff69f3
 80106bc:	58000c00 	.word	0x58000c00
 80106c0:	11fff4ff 	.word	0x11fff4ff
 80106c4:	40011000 	.word	0x40011000
 80106c8:	58024400 	.word	0x58024400
 80106cc:	40004400 	.word	0x40004400
 80106d0:	40004800 	.word	0x40004800
 80106d4:	40004c00 	.word	0x40004c00
 80106d8:	40005000 	.word	0x40005000
 80106dc:	2320      	movs	r3, #32
 80106de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80106e2:	e128      	b.n	8010936 <UART_SetConfig+0x5a6>
 80106e4:	2340      	movs	r3, #64	; 0x40
 80106e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80106ea:	e124      	b.n	8010936 <UART_SetConfig+0x5a6>
 80106ec:	2380      	movs	r3, #128	; 0x80
 80106ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80106f2:	e120      	b.n	8010936 <UART_SetConfig+0x5a6>
 80106f4:	697b      	ldr	r3, [r7, #20]
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	4acb      	ldr	r2, [pc, #812]	; (8010a28 <UART_SetConfig+0x698>)
 80106fa:	4293      	cmp	r3, r2
 80106fc:	d176      	bne.n	80107ec <UART_SetConfig+0x45c>
 80106fe:	4bcb      	ldr	r3, [pc, #812]	; (8010a2c <UART_SetConfig+0x69c>)
 8010700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010702:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010706:	2b28      	cmp	r3, #40	; 0x28
 8010708:	d86c      	bhi.n	80107e4 <UART_SetConfig+0x454>
 801070a:	a201      	add	r2, pc, #4	; (adr r2, 8010710 <UART_SetConfig+0x380>)
 801070c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010710:	080107b5 	.word	0x080107b5
 8010714:	080107e5 	.word	0x080107e5
 8010718:	080107e5 	.word	0x080107e5
 801071c:	080107e5 	.word	0x080107e5
 8010720:	080107e5 	.word	0x080107e5
 8010724:	080107e5 	.word	0x080107e5
 8010728:	080107e5 	.word	0x080107e5
 801072c:	080107e5 	.word	0x080107e5
 8010730:	080107bd 	.word	0x080107bd
 8010734:	080107e5 	.word	0x080107e5
 8010738:	080107e5 	.word	0x080107e5
 801073c:	080107e5 	.word	0x080107e5
 8010740:	080107e5 	.word	0x080107e5
 8010744:	080107e5 	.word	0x080107e5
 8010748:	080107e5 	.word	0x080107e5
 801074c:	080107e5 	.word	0x080107e5
 8010750:	080107c5 	.word	0x080107c5
 8010754:	080107e5 	.word	0x080107e5
 8010758:	080107e5 	.word	0x080107e5
 801075c:	080107e5 	.word	0x080107e5
 8010760:	080107e5 	.word	0x080107e5
 8010764:	080107e5 	.word	0x080107e5
 8010768:	080107e5 	.word	0x080107e5
 801076c:	080107e5 	.word	0x080107e5
 8010770:	080107cd 	.word	0x080107cd
 8010774:	080107e5 	.word	0x080107e5
 8010778:	080107e5 	.word	0x080107e5
 801077c:	080107e5 	.word	0x080107e5
 8010780:	080107e5 	.word	0x080107e5
 8010784:	080107e5 	.word	0x080107e5
 8010788:	080107e5 	.word	0x080107e5
 801078c:	080107e5 	.word	0x080107e5
 8010790:	080107d5 	.word	0x080107d5
 8010794:	080107e5 	.word	0x080107e5
 8010798:	080107e5 	.word	0x080107e5
 801079c:	080107e5 	.word	0x080107e5
 80107a0:	080107e5 	.word	0x080107e5
 80107a4:	080107e5 	.word	0x080107e5
 80107a8:	080107e5 	.word	0x080107e5
 80107ac:	080107e5 	.word	0x080107e5
 80107b0:	080107dd 	.word	0x080107dd
 80107b4:	2301      	movs	r3, #1
 80107b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80107ba:	e0bc      	b.n	8010936 <UART_SetConfig+0x5a6>
 80107bc:	2304      	movs	r3, #4
 80107be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80107c2:	e0b8      	b.n	8010936 <UART_SetConfig+0x5a6>
 80107c4:	2308      	movs	r3, #8
 80107c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80107ca:	e0b4      	b.n	8010936 <UART_SetConfig+0x5a6>
 80107cc:	2310      	movs	r3, #16
 80107ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80107d2:	e0b0      	b.n	8010936 <UART_SetConfig+0x5a6>
 80107d4:	2320      	movs	r3, #32
 80107d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80107da:	e0ac      	b.n	8010936 <UART_SetConfig+0x5a6>
 80107dc:	2340      	movs	r3, #64	; 0x40
 80107de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80107e2:	e0a8      	b.n	8010936 <UART_SetConfig+0x5a6>
 80107e4:	2380      	movs	r3, #128	; 0x80
 80107e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80107ea:	e0a4      	b.n	8010936 <UART_SetConfig+0x5a6>
 80107ec:	697b      	ldr	r3, [r7, #20]
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	4a8f      	ldr	r2, [pc, #572]	; (8010a30 <UART_SetConfig+0x6a0>)
 80107f2:	4293      	cmp	r3, r2
 80107f4:	d130      	bne.n	8010858 <UART_SetConfig+0x4c8>
 80107f6:	4b8d      	ldr	r3, [pc, #564]	; (8010a2c <UART_SetConfig+0x69c>)
 80107f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80107fa:	f003 0307 	and.w	r3, r3, #7
 80107fe:	2b05      	cmp	r3, #5
 8010800:	d826      	bhi.n	8010850 <UART_SetConfig+0x4c0>
 8010802:	a201      	add	r2, pc, #4	; (adr r2, 8010808 <UART_SetConfig+0x478>)
 8010804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010808:	08010821 	.word	0x08010821
 801080c:	08010829 	.word	0x08010829
 8010810:	08010831 	.word	0x08010831
 8010814:	08010839 	.word	0x08010839
 8010818:	08010841 	.word	0x08010841
 801081c:	08010849 	.word	0x08010849
 8010820:	2300      	movs	r3, #0
 8010822:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010826:	e086      	b.n	8010936 <UART_SetConfig+0x5a6>
 8010828:	2304      	movs	r3, #4
 801082a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801082e:	e082      	b.n	8010936 <UART_SetConfig+0x5a6>
 8010830:	2308      	movs	r3, #8
 8010832:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010836:	e07e      	b.n	8010936 <UART_SetConfig+0x5a6>
 8010838:	2310      	movs	r3, #16
 801083a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801083e:	e07a      	b.n	8010936 <UART_SetConfig+0x5a6>
 8010840:	2320      	movs	r3, #32
 8010842:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010846:	e076      	b.n	8010936 <UART_SetConfig+0x5a6>
 8010848:	2340      	movs	r3, #64	; 0x40
 801084a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801084e:	e072      	b.n	8010936 <UART_SetConfig+0x5a6>
 8010850:	2380      	movs	r3, #128	; 0x80
 8010852:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010856:	e06e      	b.n	8010936 <UART_SetConfig+0x5a6>
 8010858:	697b      	ldr	r3, [r7, #20]
 801085a:	681b      	ldr	r3, [r3, #0]
 801085c:	4a75      	ldr	r2, [pc, #468]	; (8010a34 <UART_SetConfig+0x6a4>)
 801085e:	4293      	cmp	r3, r2
 8010860:	d130      	bne.n	80108c4 <UART_SetConfig+0x534>
 8010862:	4b72      	ldr	r3, [pc, #456]	; (8010a2c <UART_SetConfig+0x69c>)
 8010864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010866:	f003 0307 	and.w	r3, r3, #7
 801086a:	2b05      	cmp	r3, #5
 801086c:	d826      	bhi.n	80108bc <UART_SetConfig+0x52c>
 801086e:	a201      	add	r2, pc, #4	; (adr r2, 8010874 <UART_SetConfig+0x4e4>)
 8010870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010874:	0801088d 	.word	0x0801088d
 8010878:	08010895 	.word	0x08010895
 801087c:	0801089d 	.word	0x0801089d
 8010880:	080108a5 	.word	0x080108a5
 8010884:	080108ad 	.word	0x080108ad
 8010888:	080108b5 	.word	0x080108b5
 801088c:	2300      	movs	r3, #0
 801088e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010892:	e050      	b.n	8010936 <UART_SetConfig+0x5a6>
 8010894:	2304      	movs	r3, #4
 8010896:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801089a:	e04c      	b.n	8010936 <UART_SetConfig+0x5a6>
 801089c:	2308      	movs	r3, #8
 801089e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80108a2:	e048      	b.n	8010936 <UART_SetConfig+0x5a6>
 80108a4:	2310      	movs	r3, #16
 80108a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80108aa:	e044      	b.n	8010936 <UART_SetConfig+0x5a6>
 80108ac:	2320      	movs	r3, #32
 80108ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80108b2:	e040      	b.n	8010936 <UART_SetConfig+0x5a6>
 80108b4:	2340      	movs	r3, #64	; 0x40
 80108b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80108ba:	e03c      	b.n	8010936 <UART_SetConfig+0x5a6>
 80108bc:	2380      	movs	r3, #128	; 0x80
 80108be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80108c2:	e038      	b.n	8010936 <UART_SetConfig+0x5a6>
 80108c4:	697b      	ldr	r3, [r7, #20]
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	4a5b      	ldr	r2, [pc, #364]	; (8010a38 <UART_SetConfig+0x6a8>)
 80108ca:	4293      	cmp	r3, r2
 80108cc:	d130      	bne.n	8010930 <UART_SetConfig+0x5a0>
 80108ce:	4b57      	ldr	r3, [pc, #348]	; (8010a2c <UART_SetConfig+0x69c>)
 80108d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80108d2:	f003 0307 	and.w	r3, r3, #7
 80108d6:	2b05      	cmp	r3, #5
 80108d8:	d826      	bhi.n	8010928 <UART_SetConfig+0x598>
 80108da:	a201      	add	r2, pc, #4	; (adr r2, 80108e0 <UART_SetConfig+0x550>)
 80108dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108e0:	080108f9 	.word	0x080108f9
 80108e4:	08010901 	.word	0x08010901
 80108e8:	08010909 	.word	0x08010909
 80108ec:	08010911 	.word	0x08010911
 80108f0:	08010919 	.word	0x08010919
 80108f4:	08010921 	.word	0x08010921
 80108f8:	2302      	movs	r3, #2
 80108fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80108fe:	e01a      	b.n	8010936 <UART_SetConfig+0x5a6>
 8010900:	2304      	movs	r3, #4
 8010902:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010906:	e016      	b.n	8010936 <UART_SetConfig+0x5a6>
 8010908:	2308      	movs	r3, #8
 801090a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801090e:	e012      	b.n	8010936 <UART_SetConfig+0x5a6>
 8010910:	2310      	movs	r3, #16
 8010912:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010916:	e00e      	b.n	8010936 <UART_SetConfig+0x5a6>
 8010918:	2320      	movs	r3, #32
 801091a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801091e:	e00a      	b.n	8010936 <UART_SetConfig+0x5a6>
 8010920:	2340      	movs	r3, #64	; 0x40
 8010922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010926:	e006      	b.n	8010936 <UART_SetConfig+0x5a6>
 8010928:	2380      	movs	r3, #128	; 0x80
 801092a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801092e:	e002      	b.n	8010936 <UART_SetConfig+0x5a6>
 8010930:	2380      	movs	r3, #128	; 0x80
 8010932:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010936:	697b      	ldr	r3, [r7, #20]
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	4a3f      	ldr	r2, [pc, #252]	; (8010a38 <UART_SetConfig+0x6a8>)
 801093c:	4293      	cmp	r3, r2
 801093e:	f040 80f8 	bne.w	8010b32 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010942:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010946:	2b20      	cmp	r3, #32
 8010948:	dc46      	bgt.n	80109d8 <UART_SetConfig+0x648>
 801094a:	2b02      	cmp	r3, #2
 801094c:	f2c0 8082 	blt.w	8010a54 <UART_SetConfig+0x6c4>
 8010950:	3b02      	subs	r3, #2
 8010952:	2b1e      	cmp	r3, #30
 8010954:	d87e      	bhi.n	8010a54 <UART_SetConfig+0x6c4>
 8010956:	a201      	add	r2, pc, #4	; (adr r2, 801095c <UART_SetConfig+0x5cc>)
 8010958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801095c:	080109df 	.word	0x080109df
 8010960:	08010a55 	.word	0x08010a55
 8010964:	080109e7 	.word	0x080109e7
 8010968:	08010a55 	.word	0x08010a55
 801096c:	08010a55 	.word	0x08010a55
 8010970:	08010a55 	.word	0x08010a55
 8010974:	080109f7 	.word	0x080109f7
 8010978:	08010a55 	.word	0x08010a55
 801097c:	08010a55 	.word	0x08010a55
 8010980:	08010a55 	.word	0x08010a55
 8010984:	08010a55 	.word	0x08010a55
 8010988:	08010a55 	.word	0x08010a55
 801098c:	08010a55 	.word	0x08010a55
 8010990:	08010a55 	.word	0x08010a55
 8010994:	08010a07 	.word	0x08010a07
 8010998:	08010a55 	.word	0x08010a55
 801099c:	08010a55 	.word	0x08010a55
 80109a0:	08010a55 	.word	0x08010a55
 80109a4:	08010a55 	.word	0x08010a55
 80109a8:	08010a55 	.word	0x08010a55
 80109ac:	08010a55 	.word	0x08010a55
 80109b0:	08010a55 	.word	0x08010a55
 80109b4:	08010a55 	.word	0x08010a55
 80109b8:	08010a55 	.word	0x08010a55
 80109bc:	08010a55 	.word	0x08010a55
 80109c0:	08010a55 	.word	0x08010a55
 80109c4:	08010a55 	.word	0x08010a55
 80109c8:	08010a55 	.word	0x08010a55
 80109cc:	08010a55 	.word	0x08010a55
 80109d0:	08010a55 	.word	0x08010a55
 80109d4:	08010a47 	.word	0x08010a47
 80109d8:	2b40      	cmp	r3, #64	; 0x40
 80109da:	d037      	beq.n	8010a4c <UART_SetConfig+0x6bc>
 80109dc:	e03a      	b.n	8010a54 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80109de:	f7fb fef1 	bl	800c7c4 <HAL_RCCEx_GetD3PCLK1Freq>
 80109e2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80109e4:	e03c      	b.n	8010a60 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80109e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80109ea:	4618      	mov	r0, r3
 80109ec:	f7fb ff00 	bl	800c7f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80109f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80109f4:	e034      	b.n	8010a60 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80109f6:	f107 0318 	add.w	r3, r7, #24
 80109fa:	4618      	mov	r0, r3
 80109fc:	f7fc f84c 	bl	800ca98 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010a00:	69fb      	ldr	r3, [r7, #28]
 8010a02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010a04:	e02c      	b.n	8010a60 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010a06:	4b09      	ldr	r3, [pc, #36]	; (8010a2c <UART_SetConfig+0x69c>)
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	f003 0320 	and.w	r3, r3, #32
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d016      	beq.n	8010a40 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010a12:	4b06      	ldr	r3, [pc, #24]	; (8010a2c <UART_SetConfig+0x69c>)
 8010a14:	681b      	ldr	r3, [r3, #0]
 8010a16:	08db      	lsrs	r3, r3, #3
 8010a18:	f003 0303 	and.w	r3, r3, #3
 8010a1c:	4a07      	ldr	r2, [pc, #28]	; (8010a3c <UART_SetConfig+0x6ac>)
 8010a1e:	fa22 f303 	lsr.w	r3, r2, r3
 8010a22:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010a24:	e01c      	b.n	8010a60 <UART_SetConfig+0x6d0>
 8010a26:	bf00      	nop
 8010a28:	40011400 	.word	0x40011400
 8010a2c:	58024400 	.word	0x58024400
 8010a30:	40007800 	.word	0x40007800
 8010a34:	40007c00 	.word	0x40007c00
 8010a38:	58000c00 	.word	0x58000c00
 8010a3c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8010a40:	4b9d      	ldr	r3, [pc, #628]	; (8010cb8 <UART_SetConfig+0x928>)
 8010a42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010a44:	e00c      	b.n	8010a60 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010a46:	4b9d      	ldr	r3, [pc, #628]	; (8010cbc <UART_SetConfig+0x92c>)
 8010a48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010a4a:	e009      	b.n	8010a60 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010a4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010a50:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010a52:	e005      	b.n	8010a60 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8010a54:	2300      	movs	r3, #0
 8010a56:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8010a58:	2301      	movs	r3, #1
 8010a5a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8010a5e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010a60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	f000 81de 	beq.w	8010e24 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010a68:	697b      	ldr	r3, [r7, #20]
 8010a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a6c:	4a94      	ldr	r2, [pc, #592]	; (8010cc0 <UART_SetConfig+0x930>)
 8010a6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010a72:	461a      	mov	r2, r3
 8010a74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a76:	fbb3 f3f2 	udiv	r3, r3, r2
 8010a7a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010a7c:	697b      	ldr	r3, [r7, #20]
 8010a7e:	685a      	ldr	r2, [r3, #4]
 8010a80:	4613      	mov	r3, r2
 8010a82:	005b      	lsls	r3, r3, #1
 8010a84:	4413      	add	r3, r2
 8010a86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010a88:	429a      	cmp	r2, r3
 8010a8a:	d305      	bcc.n	8010a98 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8010a8c:	697b      	ldr	r3, [r7, #20]
 8010a8e:	685b      	ldr	r3, [r3, #4]
 8010a90:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010a92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010a94:	429a      	cmp	r2, r3
 8010a96:	d903      	bls.n	8010aa0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8010a98:	2301      	movs	r3, #1
 8010a9a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8010a9e:	e1c1      	b.n	8010e24 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010aa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010aa2:	2200      	movs	r2, #0
 8010aa4:	60bb      	str	r3, [r7, #8]
 8010aa6:	60fa      	str	r2, [r7, #12]
 8010aa8:	697b      	ldr	r3, [r7, #20]
 8010aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010aac:	4a84      	ldr	r2, [pc, #528]	; (8010cc0 <UART_SetConfig+0x930>)
 8010aae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010ab2:	b29b      	uxth	r3, r3
 8010ab4:	2200      	movs	r2, #0
 8010ab6:	603b      	str	r3, [r7, #0]
 8010ab8:	607a      	str	r2, [r7, #4]
 8010aba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010abe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010ac2:	f7ef fc0d 	bl	80002e0 <__aeabi_uldivmod>
 8010ac6:	4602      	mov	r2, r0
 8010ac8:	460b      	mov	r3, r1
 8010aca:	4610      	mov	r0, r2
 8010acc:	4619      	mov	r1, r3
 8010ace:	f04f 0200 	mov.w	r2, #0
 8010ad2:	f04f 0300 	mov.w	r3, #0
 8010ad6:	020b      	lsls	r3, r1, #8
 8010ad8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010adc:	0202      	lsls	r2, r0, #8
 8010ade:	6979      	ldr	r1, [r7, #20]
 8010ae0:	6849      	ldr	r1, [r1, #4]
 8010ae2:	0849      	lsrs	r1, r1, #1
 8010ae4:	2000      	movs	r0, #0
 8010ae6:	460c      	mov	r4, r1
 8010ae8:	4605      	mov	r5, r0
 8010aea:	eb12 0804 	adds.w	r8, r2, r4
 8010aee:	eb43 0905 	adc.w	r9, r3, r5
 8010af2:	697b      	ldr	r3, [r7, #20]
 8010af4:	685b      	ldr	r3, [r3, #4]
 8010af6:	2200      	movs	r2, #0
 8010af8:	469a      	mov	sl, r3
 8010afa:	4693      	mov	fp, r2
 8010afc:	4652      	mov	r2, sl
 8010afe:	465b      	mov	r3, fp
 8010b00:	4640      	mov	r0, r8
 8010b02:	4649      	mov	r1, r9
 8010b04:	f7ef fbec 	bl	80002e0 <__aeabi_uldivmod>
 8010b08:	4602      	mov	r2, r0
 8010b0a:	460b      	mov	r3, r1
 8010b0c:	4613      	mov	r3, r2
 8010b0e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010b16:	d308      	bcc.n	8010b2a <UART_SetConfig+0x79a>
 8010b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010b1e:	d204      	bcs.n	8010b2a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8010b20:	697b      	ldr	r3, [r7, #20]
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010b26:	60da      	str	r2, [r3, #12]
 8010b28:	e17c      	b.n	8010e24 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8010b2a:	2301      	movs	r3, #1
 8010b2c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8010b30:	e178      	b.n	8010e24 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010b32:	697b      	ldr	r3, [r7, #20]
 8010b34:	69db      	ldr	r3, [r3, #28]
 8010b36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010b3a:	f040 80c5 	bne.w	8010cc8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8010b3e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010b42:	2b20      	cmp	r3, #32
 8010b44:	dc48      	bgt.n	8010bd8 <UART_SetConfig+0x848>
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	db7b      	blt.n	8010c42 <UART_SetConfig+0x8b2>
 8010b4a:	2b20      	cmp	r3, #32
 8010b4c:	d879      	bhi.n	8010c42 <UART_SetConfig+0x8b2>
 8010b4e:	a201      	add	r2, pc, #4	; (adr r2, 8010b54 <UART_SetConfig+0x7c4>)
 8010b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b54:	08010bdf 	.word	0x08010bdf
 8010b58:	08010be7 	.word	0x08010be7
 8010b5c:	08010c43 	.word	0x08010c43
 8010b60:	08010c43 	.word	0x08010c43
 8010b64:	08010bef 	.word	0x08010bef
 8010b68:	08010c43 	.word	0x08010c43
 8010b6c:	08010c43 	.word	0x08010c43
 8010b70:	08010c43 	.word	0x08010c43
 8010b74:	08010bff 	.word	0x08010bff
 8010b78:	08010c43 	.word	0x08010c43
 8010b7c:	08010c43 	.word	0x08010c43
 8010b80:	08010c43 	.word	0x08010c43
 8010b84:	08010c43 	.word	0x08010c43
 8010b88:	08010c43 	.word	0x08010c43
 8010b8c:	08010c43 	.word	0x08010c43
 8010b90:	08010c43 	.word	0x08010c43
 8010b94:	08010c0f 	.word	0x08010c0f
 8010b98:	08010c43 	.word	0x08010c43
 8010b9c:	08010c43 	.word	0x08010c43
 8010ba0:	08010c43 	.word	0x08010c43
 8010ba4:	08010c43 	.word	0x08010c43
 8010ba8:	08010c43 	.word	0x08010c43
 8010bac:	08010c43 	.word	0x08010c43
 8010bb0:	08010c43 	.word	0x08010c43
 8010bb4:	08010c43 	.word	0x08010c43
 8010bb8:	08010c43 	.word	0x08010c43
 8010bbc:	08010c43 	.word	0x08010c43
 8010bc0:	08010c43 	.word	0x08010c43
 8010bc4:	08010c43 	.word	0x08010c43
 8010bc8:	08010c43 	.word	0x08010c43
 8010bcc:	08010c43 	.word	0x08010c43
 8010bd0:	08010c43 	.word	0x08010c43
 8010bd4:	08010c35 	.word	0x08010c35
 8010bd8:	2b40      	cmp	r3, #64	; 0x40
 8010bda:	d02e      	beq.n	8010c3a <UART_SetConfig+0x8aa>
 8010bdc:	e031      	b.n	8010c42 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010bde:	f7f9 fdf9 	bl	800a7d4 <HAL_RCC_GetPCLK1Freq>
 8010be2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010be4:	e033      	b.n	8010c4e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010be6:	f7f9 fe0b 	bl	800a800 <HAL_RCC_GetPCLK2Freq>
 8010bea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010bec:	e02f      	b.n	8010c4e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010bee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010bf2:	4618      	mov	r0, r3
 8010bf4:	f7fb fdfc 	bl	800c7f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010bfc:	e027      	b.n	8010c4e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010bfe:	f107 0318 	add.w	r3, r7, #24
 8010c02:	4618      	mov	r0, r3
 8010c04:	f7fb ff48 	bl	800ca98 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010c08:	69fb      	ldr	r3, [r7, #28]
 8010c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010c0c:	e01f      	b.n	8010c4e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010c0e:	4b2d      	ldr	r3, [pc, #180]	; (8010cc4 <UART_SetConfig+0x934>)
 8010c10:	681b      	ldr	r3, [r3, #0]
 8010c12:	f003 0320 	and.w	r3, r3, #32
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d009      	beq.n	8010c2e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010c1a:	4b2a      	ldr	r3, [pc, #168]	; (8010cc4 <UART_SetConfig+0x934>)
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	08db      	lsrs	r3, r3, #3
 8010c20:	f003 0303 	and.w	r3, r3, #3
 8010c24:	4a24      	ldr	r2, [pc, #144]	; (8010cb8 <UART_SetConfig+0x928>)
 8010c26:	fa22 f303 	lsr.w	r3, r2, r3
 8010c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010c2c:	e00f      	b.n	8010c4e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8010c2e:	4b22      	ldr	r3, [pc, #136]	; (8010cb8 <UART_SetConfig+0x928>)
 8010c30:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010c32:	e00c      	b.n	8010c4e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010c34:	4b21      	ldr	r3, [pc, #132]	; (8010cbc <UART_SetConfig+0x92c>)
 8010c36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010c38:	e009      	b.n	8010c4e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010c3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010c40:	e005      	b.n	8010c4e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8010c42:	2300      	movs	r3, #0
 8010c44:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8010c46:	2301      	movs	r3, #1
 8010c48:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8010c4c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010c4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	f000 80e7 	beq.w	8010e24 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010c56:	697b      	ldr	r3, [r7, #20]
 8010c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c5a:	4a19      	ldr	r2, [pc, #100]	; (8010cc0 <UART_SetConfig+0x930>)
 8010c5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010c60:	461a      	mov	r2, r3
 8010c62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c64:	fbb3 f3f2 	udiv	r3, r3, r2
 8010c68:	005a      	lsls	r2, r3, #1
 8010c6a:	697b      	ldr	r3, [r7, #20]
 8010c6c:	685b      	ldr	r3, [r3, #4]
 8010c6e:	085b      	lsrs	r3, r3, #1
 8010c70:	441a      	add	r2, r3
 8010c72:	697b      	ldr	r3, [r7, #20]
 8010c74:	685b      	ldr	r3, [r3, #4]
 8010c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8010c7a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c7e:	2b0f      	cmp	r3, #15
 8010c80:	d916      	bls.n	8010cb0 <UART_SetConfig+0x920>
 8010c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010c88:	d212      	bcs.n	8010cb0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c8c:	b29b      	uxth	r3, r3
 8010c8e:	f023 030f 	bic.w	r3, r3, #15
 8010c92:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c96:	085b      	lsrs	r3, r3, #1
 8010c98:	b29b      	uxth	r3, r3
 8010c9a:	f003 0307 	and.w	r3, r3, #7
 8010c9e:	b29a      	uxth	r2, r3
 8010ca0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010ca2:	4313      	orrs	r3, r2
 8010ca4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8010ca6:	697b      	ldr	r3, [r7, #20]
 8010ca8:	681b      	ldr	r3, [r3, #0]
 8010caa:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8010cac:	60da      	str	r2, [r3, #12]
 8010cae:	e0b9      	b.n	8010e24 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8010cb0:	2301      	movs	r3, #1
 8010cb2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8010cb6:	e0b5      	b.n	8010e24 <UART_SetConfig+0xa94>
 8010cb8:	03d09000 	.word	0x03d09000
 8010cbc:	003d0900 	.word	0x003d0900
 8010cc0:	08016c0c 	.word	0x08016c0c
 8010cc4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8010cc8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010ccc:	2b20      	cmp	r3, #32
 8010cce:	dc49      	bgt.n	8010d64 <UART_SetConfig+0x9d4>
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	db7c      	blt.n	8010dce <UART_SetConfig+0xa3e>
 8010cd4:	2b20      	cmp	r3, #32
 8010cd6:	d87a      	bhi.n	8010dce <UART_SetConfig+0xa3e>
 8010cd8:	a201      	add	r2, pc, #4	; (adr r2, 8010ce0 <UART_SetConfig+0x950>)
 8010cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cde:	bf00      	nop
 8010ce0:	08010d6b 	.word	0x08010d6b
 8010ce4:	08010d73 	.word	0x08010d73
 8010ce8:	08010dcf 	.word	0x08010dcf
 8010cec:	08010dcf 	.word	0x08010dcf
 8010cf0:	08010d7b 	.word	0x08010d7b
 8010cf4:	08010dcf 	.word	0x08010dcf
 8010cf8:	08010dcf 	.word	0x08010dcf
 8010cfc:	08010dcf 	.word	0x08010dcf
 8010d00:	08010d8b 	.word	0x08010d8b
 8010d04:	08010dcf 	.word	0x08010dcf
 8010d08:	08010dcf 	.word	0x08010dcf
 8010d0c:	08010dcf 	.word	0x08010dcf
 8010d10:	08010dcf 	.word	0x08010dcf
 8010d14:	08010dcf 	.word	0x08010dcf
 8010d18:	08010dcf 	.word	0x08010dcf
 8010d1c:	08010dcf 	.word	0x08010dcf
 8010d20:	08010d9b 	.word	0x08010d9b
 8010d24:	08010dcf 	.word	0x08010dcf
 8010d28:	08010dcf 	.word	0x08010dcf
 8010d2c:	08010dcf 	.word	0x08010dcf
 8010d30:	08010dcf 	.word	0x08010dcf
 8010d34:	08010dcf 	.word	0x08010dcf
 8010d38:	08010dcf 	.word	0x08010dcf
 8010d3c:	08010dcf 	.word	0x08010dcf
 8010d40:	08010dcf 	.word	0x08010dcf
 8010d44:	08010dcf 	.word	0x08010dcf
 8010d48:	08010dcf 	.word	0x08010dcf
 8010d4c:	08010dcf 	.word	0x08010dcf
 8010d50:	08010dcf 	.word	0x08010dcf
 8010d54:	08010dcf 	.word	0x08010dcf
 8010d58:	08010dcf 	.word	0x08010dcf
 8010d5c:	08010dcf 	.word	0x08010dcf
 8010d60:	08010dc1 	.word	0x08010dc1
 8010d64:	2b40      	cmp	r3, #64	; 0x40
 8010d66:	d02e      	beq.n	8010dc6 <UART_SetConfig+0xa36>
 8010d68:	e031      	b.n	8010dce <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010d6a:	f7f9 fd33 	bl	800a7d4 <HAL_RCC_GetPCLK1Freq>
 8010d6e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010d70:	e033      	b.n	8010dda <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010d72:	f7f9 fd45 	bl	800a800 <HAL_RCC_GetPCLK2Freq>
 8010d76:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010d78:	e02f      	b.n	8010dda <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010d7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010d7e:	4618      	mov	r0, r3
 8010d80:	f7fb fd36 	bl	800c7f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010d88:	e027      	b.n	8010dda <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010d8a:	f107 0318 	add.w	r3, r7, #24
 8010d8e:	4618      	mov	r0, r3
 8010d90:	f7fb fe82 	bl	800ca98 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010d94:	69fb      	ldr	r3, [r7, #28]
 8010d96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010d98:	e01f      	b.n	8010dda <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010d9a:	4b2d      	ldr	r3, [pc, #180]	; (8010e50 <UART_SetConfig+0xac0>)
 8010d9c:	681b      	ldr	r3, [r3, #0]
 8010d9e:	f003 0320 	and.w	r3, r3, #32
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d009      	beq.n	8010dba <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010da6:	4b2a      	ldr	r3, [pc, #168]	; (8010e50 <UART_SetConfig+0xac0>)
 8010da8:	681b      	ldr	r3, [r3, #0]
 8010daa:	08db      	lsrs	r3, r3, #3
 8010dac:	f003 0303 	and.w	r3, r3, #3
 8010db0:	4a28      	ldr	r2, [pc, #160]	; (8010e54 <UART_SetConfig+0xac4>)
 8010db2:	fa22 f303 	lsr.w	r3, r2, r3
 8010db6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010db8:	e00f      	b.n	8010dda <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8010dba:	4b26      	ldr	r3, [pc, #152]	; (8010e54 <UART_SetConfig+0xac4>)
 8010dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010dbe:	e00c      	b.n	8010dda <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010dc0:	4b25      	ldr	r3, [pc, #148]	; (8010e58 <UART_SetConfig+0xac8>)
 8010dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010dc4:	e009      	b.n	8010dda <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010dc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010dca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010dcc:	e005      	b.n	8010dda <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8010dce:	2300      	movs	r3, #0
 8010dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8010dd2:	2301      	movs	r3, #1
 8010dd4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8010dd8:	bf00      	nop
    }

    if (pclk != 0U)
 8010dda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d021      	beq.n	8010e24 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010de0:	697b      	ldr	r3, [r7, #20]
 8010de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010de4:	4a1d      	ldr	r2, [pc, #116]	; (8010e5c <UART_SetConfig+0xacc>)
 8010de6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010dea:	461a      	mov	r2, r3
 8010dec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010dee:	fbb3 f2f2 	udiv	r2, r3, r2
 8010df2:	697b      	ldr	r3, [r7, #20]
 8010df4:	685b      	ldr	r3, [r3, #4]
 8010df6:	085b      	lsrs	r3, r3, #1
 8010df8:	441a      	add	r2, r3
 8010dfa:	697b      	ldr	r3, [r7, #20]
 8010dfc:	685b      	ldr	r3, [r3, #4]
 8010dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8010e02:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e06:	2b0f      	cmp	r3, #15
 8010e08:	d909      	bls.n	8010e1e <UART_SetConfig+0xa8e>
 8010e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010e10:	d205      	bcs.n	8010e1e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e14:	b29a      	uxth	r2, r3
 8010e16:	697b      	ldr	r3, [r7, #20]
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	60da      	str	r2, [r3, #12]
 8010e1c:	e002      	b.n	8010e24 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8010e1e:	2301      	movs	r3, #1
 8010e20:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8010e24:	697b      	ldr	r3, [r7, #20]
 8010e26:	2201      	movs	r2, #1
 8010e28:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8010e2c:	697b      	ldr	r3, [r7, #20]
 8010e2e:	2201      	movs	r2, #1
 8010e30:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010e34:	697b      	ldr	r3, [r7, #20]
 8010e36:	2200      	movs	r2, #0
 8010e38:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8010e3a:	697b      	ldr	r3, [r7, #20]
 8010e3c:	2200      	movs	r2, #0
 8010e3e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8010e40:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8010e44:	4618      	mov	r0, r3
 8010e46:	3748      	adds	r7, #72	; 0x48
 8010e48:	46bd      	mov	sp, r7
 8010e4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010e4e:	bf00      	nop
 8010e50:	58024400 	.word	0x58024400
 8010e54:	03d09000 	.word	0x03d09000
 8010e58:	003d0900 	.word	0x003d0900
 8010e5c:	08016c0c 	.word	0x08016c0c

08010e60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010e60:	b480      	push	{r7}
 8010e62:	b083      	sub	sp, #12
 8010e64:	af00      	add	r7, sp, #0
 8010e66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e6c:	f003 0308 	and.w	r3, r3, #8
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	d00a      	beq.n	8010e8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	681b      	ldr	r3, [r3, #0]
 8010e78:	685b      	ldr	r3, [r3, #4]
 8010e7a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	681b      	ldr	r3, [r3, #0]
 8010e86:	430a      	orrs	r2, r1
 8010e88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e8e:	f003 0301 	and.w	r3, r3, #1
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	d00a      	beq.n	8010eac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	681b      	ldr	r3, [r3, #0]
 8010e9a:	685b      	ldr	r3, [r3, #4]
 8010e9c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	681b      	ldr	r3, [r3, #0]
 8010ea8:	430a      	orrs	r2, r1
 8010eaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010eb0:	f003 0302 	and.w	r3, r3, #2
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d00a      	beq.n	8010ece <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	681b      	ldr	r3, [r3, #0]
 8010ebc:	685b      	ldr	r3, [r3, #4]
 8010ebe:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	681b      	ldr	r3, [r3, #0]
 8010eca:	430a      	orrs	r2, r1
 8010ecc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010ed2:	f003 0304 	and.w	r3, r3, #4
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d00a      	beq.n	8010ef0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	681b      	ldr	r3, [r3, #0]
 8010ede:	685b      	ldr	r3, [r3, #4]
 8010ee0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	681b      	ldr	r3, [r3, #0]
 8010eec:	430a      	orrs	r2, r1
 8010eee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010ef4:	f003 0310 	and.w	r3, r3, #16
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	d00a      	beq.n	8010f12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	689b      	ldr	r3, [r3, #8]
 8010f02:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	681b      	ldr	r3, [r3, #0]
 8010f0e:	430a      	orrs	r2, r1
 8010f10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010f16:	f003 0320 	and.w	r3, r3, #32
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d00a      	beq.n	8010f34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	689b      	ldr	r3, [r3, #8]
 8010f24:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	430a      	orrs	r2, r1
 8010f32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d01a      	beq.n	8010f76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	681b      	ldr	r3, [r3, #0]
 8010f44:	685b      	ldr	r3, [r3, #4]
 8010f46:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	681b      	ldr	r3, [r3, #0]
 8010f52:	430a      	orrs	r2, r1
 8010f54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010f5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010f5e:	d10a      	bne.n	8010f76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	681b      	ldr	r3, [r3, #0]
 8010f64:	685b      	ldr	r3, [r3, #4]
 8010f66:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	681b      	ldr	r3, [r3, #0]
 8010f72:	430a      	orrs	r2, r1
 8010f74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d00a      	beq.n	8010f98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	681b      	ldr	r3, [r3, #0]
 8010f86:	685b      	ldr	r3, [r3, #4]
 8010f88:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	430a      	orrs	r2, r1
 8010f96:	605a      	str	r2, [r3, #4]
  }
}
 8010f98:	bf00      	nop
 8010f9a:	370c      	adds	r7, #12
 8010f9c:	46bd      	mov	sp, r7
 8010f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fa2:	4770      	bx	lr

08010fa4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010fa4:	b580      	push	{r7, lr}
 8010fa6:	b098      	sub	sp, #96	; 0x60
 8010fa8:	af02      	add	r7, sp, #8
 8010faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	2200      	movs	r2, #0
 8010fb0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010fb4:	f7f2 fcc8 	bl	8003948 <HAL_GetTick>
 8010fb8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	681b      	ldr	r3, [r3, #0]
 8010fc0:	f003 0308 	and.w	r3, r3, #8
 8010fc4:	2b08      	cmp	r3, #8
 8010fc6:	d12f      	bne.n	8011028 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010fc8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010fcc:	9300      	str	r3, [sp, #0]
 8010fce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010fd0:	2200      	movs	r2, #0
 8010fd2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010fd6:	6878      	ldr	r0, [r7, #4]
 8010fd8:	f000 f88e 	bl	80110f8 <UART_WaitOnFlagUntilTimeout>
 8010fdc:	4603      	mov	r3, r0
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d022      	beq.n	8011028 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	681b      	ldr	r3, [r3, #0]
 8010fe6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fea:	e853 3f00 	ldrex	r3, [r3]
 8010fee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ff2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010ff6:	653b      	str	r3, [r7, #80]	; 0x50
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	461a      	mov	r2, r3
 8010ffe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011000:	647b      	str	r3, [r7, #68]	; 0x44
 8011002:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011004:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011006:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011008:	e841 2300 	strex	r3, r2, [r1]
 801100c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801100e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011010:	2b00      	cmp	r3, #0
 8011012:	d1e6      	bne.n	8010fe2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	2220      	movs	r2, #32
 8011018:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	2200      	movs	r2, #0
 8011020:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011024:	2303      	movs	r3, #3
 8011026:	e063      	b.n	80110f0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	681b      	ldr	r3, [r3, #0]
 801102c:	681b      	ldr	r3, [r3, #0]
 801102e:	f003 0304 	and.w	r3, r3, #4
 8011032:	2b04      	cmp	r3, #4
 8011034:	d149      	bne.n	80110ca <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011036:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801103a:	9300      	str	r3, [sp, #0]
 801103c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801103e:	2200      	movs	r2, #0
 8011040:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8011044:	6878      	ldr	r0, [r7, #4]
 8011046:	f000 f857 	bl	80110f8 <UART_WaitOnFlagUntilTimeout>
 801104a:	4603      	mov	r3, r0
 801104c:	2b00      	cmp	r3, #0
 801104e:	d03c      	beq.n	80110ca <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	681b      	ldr	r3, [r3, #0]
 8011054:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011058:	e853 3f00 	ldrex	r3, [r3]
 801105c:	623b      	str	r3, [r7, #32]
   return(result);
 801105e:	6a3b      	ldr	r3, [r7, #32]
 8011060:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011064:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	461a      	mov	r2, r3
 801106c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801106e:	633b      	str	r3, [r7, #48]	; 0x30
 8011070:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011072:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011074:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011076:	e841 2300 	strex	r3, r2, [r1]
 801107a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801107c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801107e:	2b00      	cmp	r3, #0
 8011080:	d1e6      	bne.n	8011050 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	681b      	ldr	r3, [r3, #0]
 8011086:	3308      	adds	r3, #8
 8011088:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801108a:	693b      	ldr	r3, [r7, #16]
 801108c:	e853 3f00 	ldrex	r3, [r3]
 8011090:	60fb      	str	r3, [r7, #12]
   return(result);
 8011092:	68fb      	ldr	r3, [r7, #12]
 8011094:	f023 0301 	bic.w	r3, r3, #1
 8011098:	64bb      	str	r3, [r7, #72]	; 0x48
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	681b      	ldr	r3, [r3, #0]
 801109e:	3308      	adds	r3, #8
 80110a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80110a2:	61fa      	str	r2, [r7, #28]
 80110a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80110a6:	69b9      	ldr	r1, [r7, #24]
 80110a8:	69fa      	ldr	r2, [r7, #28]
 80110aa:	e841 2300 	strex	r3, r2, [r1]
 80110ae:	617b      	str	r3, [r7, #20]
   return(result);
 80110b0:	697b      	ldr	r3, [r7, #20]
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d1e5      	bne.n	8011082 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	2220      	movs	r2, #32
 80110ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	2200      	movs	r2, #0
 80110c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80110c6:	2303      	movs	r3, #3
 80110c8:	e012      	b.n	80110f0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	2220      	movs	r2, #32
 80110ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	2220      	movs	r2, #32
 80110d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	2200      	movs	r2, #0
 80110de:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	2200      	movs	r2, #0
 80110e4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	2200      	movs	r2, #0
 80110ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80110ee:	2300      	movs	r3, #0
}
 80110f0:	4618      	mov	r0, r3
 80110f2:	3758      	adds	r7, #88	; 0x58
 80110f4:	46bd      	mov	sp, r7
 80110f6:	bd80      	pop	{r7, pc}

080110f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80110f8:	b580      	push	{r7, lr}
 80110fa:	b084      	sub	sp, #16
 80110fc:	af00      	add	r7, sp, #0
 80110fe:	60f8      	str	r0, [r7, #12]
 8011100:	60b9      	str	r1, [r7, #8]
 8011102:	603b      	str	r3, [r7, #0]
 8011104:	4613      	mov	r3, r2
 8011106:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011108:	e04f      	b.n	80111aa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801110a:	69bb      	ldr	r3, [r7, #24]
 801110c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011110:	d04b      	beq.n	80111aa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011112:	f7f2 fc19 	bl	8003948 <HAL_GetTick>
 8011116:	4602      	mov	r2, r0
 8011118:	683b      	ldr	r3, [r7, #0]
 801111a:	1ad3      	subs	r3, r2, r3
 801111c:	69ba      	ldr	r2, [r7, #24]
 801111e:	429a      	cmp	r2, r3
 8011120:	d302      	bcc.n	8011128 <UART_WaitOnFlagUntilTimeout+0x30>
 8011122:	69bb      	ldr	r3, [r7, #24]
 8011124:	2b00      	cmp	r3, #0
 8011126:	d101      	bne.n	801112c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011128:	2303      	movs	r3, #3
 801112a:	e04e      	b.n	80111ca <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	681b      	ldr	r3, [r3, #0]
 8011130:	681b      	ldr	r3, [r3, #0]
 8011132:	f003 0304 	and.w	r3, r3, #4
 8011136:	2b00      	cmp	r3, #0
 8011138:	d037      	beq.n	80111aa <UART_WaitOnFlagUntilTimeout+0xb2>
 801113a:	68bb      	ldr	r3, [r7, #8]
 801113c:	2b80      	cmp	r3, #128	; 0x80
 801113e:	d034      	beq.n	80111aa <UART_WaitOnFlagUntilTimeout+0xb2>
 8011140:	68bb      	ldr	r3, [r7, #8]
 8011142:	2b40      	cmp	r3, #64	; 0x40
 8011144:	d031      	beq.n	80111aa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8011146:	68fb      	ldr	r3, [r7, #12]
 8011148:	681b      	ldr	r3, [r3, #0]
 801114a:	69db      	ldr	r3, [r3, #28]
 801114c:	f003 0308 	and.w	r3, r3, #8
 8011150:	2b08      	cmp	r3, #8
 8011152:	d110      	bne.n	8011176 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011154:	68fb      	ldr	r3, [r7, #12]
 8011156:	681b      	ldr	r3, [r3, #0]
 8011158:	2208      	movs	r2, #8
 801115a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801115c:	68f8      	ldr	r0, [r7, #12]
 801115e:	f000 f99d 	bl	801149c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011162:	68fb      	ldr	r3, [r7, #12]
 8011164:	2208      	movs	r2, #8
 8011166:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801116a:	68fb      	ldr	r3, [r7, #12]
 801116c:	2200      	movs	r2, #0
 801116e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8011172:	2301      	movs	r3, #1
 8011174:	e029      	b.n	80111ca <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	681b      	ldr	r3, [r3, #0]
 801117a:	69db      	ldr	r3, [r3, #28]
 801117c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011180:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011184:	d111      	bne.n	80111aa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011186:	68fb      	ldr	r3, [r7, #12]
 8011188:	681b      	ldr	r3, [r3, #0]
 801118a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801118e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011190:	68f8      	ldr	r0, [r7, #12]
 8011192:	f000 f983 	bl	801149c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011196:	68fb      	ldr	r3, [r7, #12]
 8011198:	2220      	movs	r2, #32
 801119a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801119e:	68fb      	ldr	r3, [r7, #12]
 80111a0:	2200      	movs	r2, #0
 80111a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80111a6:	2303      	movs	r3, #3
 80111a8:	e00f      	b.n	80111ca <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80111aa:	68fb      	ldr	r3, [r7, #12]
 80111ac:	681b      	ldr	r3, [r3, #0]
 80111ae:	69da      	ldr	r2, [r3, #28]
 80111b0:	68bb      	ldr	r3, [r7, #8]
 80111b2:	4013      	ands	r3, r2
 80111b4:	68ba      	ldr	r2, [r7, #8]
 80111b6:	429a      	cmp	r2, r3
 80111b8:	bf0c      	ite	eq
 80111ba:	2301      	moveq	r3, #1
 80111bc:	2300      	movne	r3, #0
 80111be:	b2db      	uxtb	r3, r3
 80111c0:	461a      	mov	r2, r3
 80111c2:	79fb      	ldrb	r3, [r7, #7]
 80111c4:	429a      	cmp	r2, r3
 80111c6:	d0a0      	beq.n	801110a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80111c8:	2300      	movs	r3, #0
}
 80111ca:	4618      	mov	r0, r3
 80111cc:	3710      	adds	r7, #16
 80111ce:	46bd      	mov	sp, r7
 80111d0:	bd80      	pop	{r7, pc}
	...

080111d4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80111d4:	b480      	push	{r7}
 80111d6:	b0a3      	sub	sp, #140	; 0x8c
 80111d8:	af00      	add	r7, sp, #0
 80111da:	60f8      	str	r0, [r7, #12]
 80111dc:	60b9      	str	r1, [r7, #8]
 80111de:	4613      	mov	r3, r2
 80111e0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80111e2:	68fb      	ldr	r3, [r7, #12]
 80111e4:	68ba      	ldr	r2, [r7, #8]
 80111e6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80111e8:	68fb      	ldr	r3, [r7, #12]
 80111ea:	88fa      	ldrh	r2, [r7, #6]
 80111ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80111f0:	68fb      	ldr	r3, [r7, #12]
 80111f2:	88fa      	ldrh	r2, [r7, #6]
 80111f4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80111f8:	68fb      	ldr	r3, [r7, #12]
 80111fa:	2200      	movs	r2, #0
 80111fc:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	689b      	ldr	r3, [r3, #8]
 8011202:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011206:	d10e      	bne.n	8011226 <UART_Start_Receive_IT+0x52>
 8011208:	68fb      	ldr	r3, [r7, #12]
 801120a:	691b      	ldr	r3, [r3, #16]
 801120c:	2b00      	cmp	r3, #0
 801120e:	d105      	bne.n	801121c <UART_Start_Receive_IT+0x48>
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	f240 12ff 	movw	r2, #511	; 0x1ff
 8011216:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801121a:	e02d      	b.n	8011278 <UART_Start_Receive_IT+0xa4>
 801121c:	68fb      	ldr	r3, [r7, #12]
 801121e:	22ff      	movs	r2, #255	; 0xff
 8011220:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011224:	e028      	b.n	8011278 <UART_Start_Receive_IT+0xa4>
 8011226:	68fb      	ldr	r3, [r7, #12]
 8011228:	689b      	ldr	r3, [r3, #8]
 801122a:	2b00      	cmp	r3, #0
 801122c:	d10d      	bne.n	801124a <UART_Start_Receive_IT+0x76>
 801122e:	68fb      	ldr	r3, [r7, #12]
 8011230:	691b      	ldr	r3, [r3, #16]
 8011232:	2b00      	cmp	r3, #0
 8011234:	d104      	bne.n	8011240 <UART_Start_Receive_IT+0x6c>
 8011236:	68fb      	ldr	r3, [r7, #12]
 8011238:	22ff      	movs	r2, #255	; 0xff
 801123a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801123e:	e01b      	b.n	8011278 <UART_Start_Receive_IT+0xa4>
 8011240:	68fb      	ldr	r3, [r7, #12]
 8011242:	227f      	movs	r2, #127	; 0x7f
 8011244:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011248:	e016      	b.n	8011278 <UART_Start_Receive_IT+0xa4>
 801124a:	68fb      	ldr	r3, [r7, #12]
 801124c:	689b      	ldr	r3, [r3, #8]
 801124e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011252:	d10d      	bne.n	8011270 <UART_Start_Receive_IT+0x9c>
 8011254:	68fb      	ldr	r3, [r7, #12]
 8011256:	691b      	ldr	r3, [r3, #16]
 8011258:	2b00      	cmp	r3, #0
 801125a:	d104      	bne.n	8011266 <UART_Start_Receive_IT+0x92>
 801125c:	68fb      	ldr	r3, [r7, #12]
 801125e:	227f      	movs	r2, #127	; 0x7f
 8011260:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011264:	e008      	b.n	8011278 <UART_Start_Receive_IT+0xa4>
 8011266:	68fb      	ldr	r3, [r7, #12]
 8011268:	223f      	movs	r2, #63	; 0x3f
 801126a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801126e:	e003      	b.n	8011278 <UART_Start_Receive_IT+0xa4>
 8011270:	68fb      	ldr	r3, [r7, #12]
 8011272:	2200      	movs	r2, #0
 8011274:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011278:	68fb      	ldr	r3, [r7, #12]
 801127a:	2200      	movs	r2, #0
 801127c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011280:	68fb      	ldr	r3, [r7, #12]
 8011282:	2222      	movs	r2, #34	; 0x22
 8011284:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011288:	68fb      	ldr	r3, [r7, #12]
 801128a:	681b      	ldr	r3, [r3, #0]
 801128c:	3308      	adds	r3, #8
 801128e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011290:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011292:	e853 3f00 	ldrex	r3, [r3]
 8011296:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8011298:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801129a:	f043 0301 	orr.w	r3, r3, #1
 801129e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80112a2:	68fb      	ldr	r3, [r7, #12]
 80112a4:	681b      	ldr	r3, [r3, #0]
 80112a6:	3308      	adds	r3, #8
 80112a8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80112ac:	673a      	str	r2, [r7, #112]	; 0x70
 80112ae:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80112b0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80112b2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80112b4:	e841 2300 	strex	r3, r2, [r1]
 80112b8:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80112ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d1e3      	bne.n	8011288 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80112c0:	68fb      	ldr	r3, [r7, #12]
 80112c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80112c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80112c8:	d14f      	bne.n	801136a <UART_Start_Receive_IT+0x196>
 80112ca:	68fb      	ldr	r3, [r7, #12]
 80112cc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80112d0:	88fa      	ldrh	r2, [r7, #6]
 80112d2:	429a      	cmp	r2, r3
 80112d4:	d349      	bcc.n	801136a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	689b      	ldr	r3, [r3, #8]
 80112da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80112de:	d107      	bne.n	80112f0 <UART_Start_Receive_IT+0x11c>
 80112e0:	68fb      	ldr	r3, [r7, #12]
 80112e2:	691b      	ldr	r3, [r3, #16]
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d103      	bne.n	80112f0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80112e8:	68fb      	ldr	r3, [r7, #12]
 80112ea:	4a47      	ldr	r2, [pc, #284]	; (8011408 <UART_Start_Receive_IT+0x234>)
 80112ec:	675a      	str	r2, [r3, #116]	; 0x74
 80112ee:	e002      	b.n	80112f6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80112f0:	68fb      	ldr	r3, [r7, #12]
 80112f2:	4a46      	ldr	r2, [pc, #280]	; (801140c <UART_Start_Receive_IT+0x238>)
 80112f4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80112f6:	68fb      	ldr	r3, [r7, #12]
 80112f8:	691b      	ldr	r3, [r3, #16]
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d01a      	beq.n	8011334 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80112fe:	68fb      	ldr	r3, [r7, #12]
 8011300:	681b      	ldr	r3, [r3, #0]
 8011302:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011304:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011306:	e853 3f00 	ldrex	r3, [r3]
 801130a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801130c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801130e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011312:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011316:	68fb      	ldr	r3, [r7, #12]
 8011318:	681b      	ldr	r3, [r3, #0]
 801131a:	461a      	mov	r2, r3
 801131c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011320:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011322:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011324:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011326:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011328:	e841 2300 	strex	r3, r2, [r1]
 801132c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 801132e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011330:	2b00      	cmp	r3, #0
 8011332:	d1e4      	bne.n	80112fe <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8011334:	68fb      	ldr	r3, [r7, #12]
 8011336:	681b      	ldr	r3, [r3, #0]
 8011338:	3308      	adds	r3, #8
 801133a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801133c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801133e:	e853 3f00 	ldrex	r3, [r3]
 8011342:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011346:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801134a:	67fb      	str	r3, [r7, #124]	; 0x7c
 801134c:	68fb      	ldr	r3, [r7, #12]
 801134e:	681b      	ldr	r3, [r3, #0]
 8011350:	3308      	adds	r3, #8
 8011352:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8011354:	64ba      	str	r2, [r7, #72]	; 0x48
 8011356:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011358:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801135a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801135c:	e841 2300 	strex	r3, r2, [r1]
 8011360:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8011362:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011364:	2b00      	cmp	r3, #0
 8011366:	d1e5      	bne.n	8011334 <UART_Start_Receive_IT+0x160>
 8011368:	e046      	b.n	80113f8 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801136a:	68fb      	ldr	r3, [r7, #12]
 801136c:	689b      	ldr	r3, [r3, #8]
 801136e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011372:	d107      	bne.n	8011384 <UART_Start_Receive_IT+0x1b0>
 8011374:	68fb      	ldr	r3, [r7, #12]
 8011376:	691b      	ldr	r3, [r3, #16]
 8011378:	2b00      	cmp	r3, #0
 801137a:	d103      	bne.n	8011384 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 801137c:	68fb      	ldr	r3, [r7, #12]
 801137e:	4a24      	ldr	r2, [pc, #144]	; (8011410 <UART_Start_Receive_IT+0x23c>)
 8011380:	675a      	str	r2, [r3, #116]	; 0x74
 8011382:	e002      	b.n	801138a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8011384:	68fb      	ldr	r3, [r7, #12]
 8011386:	4a23      	ldr	r2, [pc, #140]	; (8011414 <UART_Start_Receive_IT+0x240>)
 8011388:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 801138a:	68fb      	ldr	r3, [r7, #12]
 801138c:	691b      	ldr	r3, [r3, #16]
 801138e:	2b00      	cmp	r3, #0
 8011390:	d019      	beq.n	80113c6 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8011392:	68fb      	ldr	r3, [r7, #12]
 8011394:	681b      	ldr	r3, [r3, #0]
 8011396:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801139a:	e853 3f00 	ldrex	r3, [r3]
 801139e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80113a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113a2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80113a6:	677b      	str	r3, [r7, #116]	; 0x74
 80113a8:	68fb      	ldr	r3, [r7, #12]
 80113aa:	681b      	ldr	r3, [r3, #0]
 80113ac:	461a      	mov	r2, r3
 80113ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80113b0:	637b      	str	r3, [r7, #52]	; 0x34
 80113b2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80113b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80113b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80113b8:	e841 2300 	strex	r3, r2, [r1]
 80113bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80113be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	d1e6      	bne.n	8011392 <UART_Start_Receive_IT+0x1be>
 80113c4:	e018      	b.n	80113f8 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80113c6:	68fb      	ldr	r3, [r7, #12]
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80113cc:	697b      	ldr	r3, [r7, #20]
 80113ce:	e853 3f00 	ldrex	r3, [r3]
 80113d2:	613b      	str	r3, [r7, #16]
   return(result);
 80113d4:	693b      	ldr	r3, [r7, #16]
 80113d6:	f043 0320 	orr.w	r3, r3, #32
 80113da:	67bb      	str	r3, [r7, #120]	; 0x78
 80113dc:	68fb      	ldr	r3, [r7, #12]
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	461a      	mov	r2, r3
 80113e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80113e4:	623b      	str	r3, [r7, #32]
 80113e6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80113e8:	69f9      	ldr	r1, [r7, #28]
 80113ea:	6a3a      	ldr	r2, [r7, #32]
 80113ec:	e841 2300 	strex	r3, r2, [r1]
 80113f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80113f2:	69bb      	ldr	r3, [r7, #24]
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	d1e6      	bne.n	80113c6 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80113f8:	2300      	movs	r3, #0
}
 80113fa:	4618      	mov	r0, r3
 80113fc:	378c      	adds	r7, #140	; 0x8c
 80113fe:	46bd      	mov	sp, r7
 8011400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011404:	4770      	bx	lr
 8011406:	bf00      	nop
 8011408:	08011ded 	.word	0x08011ded
 801140c:	08011a8d 	.word	0x08011a8d
 8011410:	080118d5 	.word	0x080118d5
 8011414:	0801171d 	.word	0x0801171d

08011418 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8011418:	b480      	push	{r7}
 801141a:	b08f      	sub	sp, #60	; 0x3c
 801141c:	af00      	add	r7, sp, #0
 801141e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	681b      	ldr	r3, [r3, #0]
 8011424:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011426:	6a3b      	ldr	r3, [r7, #32]
 8011428:	e853 3f00 	ldrex	r3, [r3]
 801142c:	61fb      	str	r3, [r7, #28]
   return(result);
 801142e:	69fb      	ldr	r3, [r7, #28]
 8011430:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8011434:	637b      	str	r3, [r7, #52]	; 0x34
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	681b      	ldr	r3, [r3, #0]
 801143a:	461a      	mov	r2, r3
 801143c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801143e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011440:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011442:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011444:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011446:	e841 2300 	strex	r3, r2, [r1]
 801144a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801144c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801144e:	2b00      	cmp	r3, #0
 8011450:	d1e6      	bne.n	8011420 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	681b      	ldr	r3, [r3, #0]
 8011456:	3308      	adds	r3, #8
 8011458:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801145a:	68fb      	ldr	r3, [r7, #12]
 801145c:	e853 3f00 	ldrex	r3, [r3]
 8011460:	60bb      	str	r3, [r7, #8]
   return(result);
 8011462:	68bb      	ldr	r3, [r7, #8]
 8011464:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8011468:	633b      	str	r3, [r7, #48]	; 0x30
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	3308      	adds	r3, #8
 8011470:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011472:	61ba      	str	r2, [r7, #24]
 8011474:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011476:	6979      	ldr	r1, [r7, #20]
 8011478:	69ba      	ldr	r2, [r7, #24]
 801147a:	e841 2300 	strex	r3, r2, [r1]
 801147e:	613b      	str	r3, [r7, #16]
   return(result);
 8011480:	693b      	ldr	r3, [r7, #16]
 8011482:	2b00      	cmp	r3, #0
 8011484:	d1e5      	bne.n	8011452 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	2220      	movs	r2, #32
 801148a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 801148e:	bf00      	nop
 8011490:	373c      	adds	r7, #60	; 0x3c
 8011492:	46bd      	mov	sp, r7
 8011494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011498:	4770      	bx	lr
	...

0801149c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801149c:	b480      	push	{r7}
 801149e:	b095      	sub	sp, #84	; 0x54
 80114a0:	af00      	add	r7, sp, #0
 80114a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	681b      	ldr	r3, [r3, #0]
 80114a8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80114aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114ac:	e853 3f00 	ldrex	r3, [r3]
 80114b0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80114b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80114b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	681b      	ldr	r3, [r3, #0]
 80114be:	461a      	mov	r2, r3
 80114c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80114c2:	643b      	str	r3, [r7, #64]	; 0x40
 80114c4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80114c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80114c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80114ca:	e841 2300 	strex	r3, r2, [r1]
 80114ce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80114d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d1e6      	bne.n	80114a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	3308      	adds	r3, #8
 80114dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80114de:	6a3b      	ldr	r3, [r7, #32]
 80114e0:	e853 3f00 	ldrex	r3, [r3]
 80114e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80114e6:	69fa      	ldr	r2, [r7, #28]
 80114e8:	4b1e      	ldr	r3, [pc, #120]	; (8011564 <UART_EndRxTransfer+0xc8>)
 80114ea:	4013      	ands	r3, r2
 80114ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	681b      	ldr	r3, [r3, #0]
 80114f2:	3308      	adds	r3, #8
 80114f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80114f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80114f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80114fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80114fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80114fe:	e841 2300 	strex	r3, r2, [r1]
 8011502:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011506:	2b00      	cmp	r3, #0
 8011508:	d1e5      	bne.n	80114d6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801150e:	2b01      	cmp	r3, #1
 8011510:	d118      	bne.n	8011544 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	681b      	ldr	r3, [r3, #0]
 8011516:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011518:	68fb      	ldr	r3, [r7, #12]
 801151a:	e853 3f00 	ldrex	r3, [r3]
 801151e:	60bb      	str	r3, [r7, #8]
   return(result);
 8011520:	68bb      	ldr	r3, [r7, #8]
 8011522:	f023 0310 	bic.w	r3, r3, #16
 8011526:	647b      	str	r3, [r7, #68]	; 0x44
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	681b      	ldr	r3, [r3, #0]
 801152c:	461a      	mov	r2, r3
 801152e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011530:	61bb      	str	r3, [r7, #24]
 8011532:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011534:	6979      	ldr	r1, [r7, #20]
 8011536:	69ba      	ldr	r2, [r7, #24]
 8011538:	e841 2300 	strex	r3, r2, [r1]
 801153c:	613b      	str	r3, [r7, #16]
   return(result);
 801153e:	693b      	ldr	r3, [r7, #16]
 8011540:	2b00      	cmp	r3, #0
 8011542:	d1e6      	bne.n	8011512 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	2220      	movs	r2, #32
 8011548:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	2200      	movs	r2, #0
 8011550:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	2200      	movs	r2, #0
 8011556:	675a      	str	r2, [r3, #116]	; 0x74
}
 8011558:	bf00      	nop
 801155a:	3754      	adds	r7, #84	; 0x54
 801155c:	46bd      	mov	sp, r7
 801155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011562:	4770      	bx	lr
 8011564:	effffffe 	.word	0xeffffffe

08011568 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8011568:	b580      	push	{r7, lr}
 801156a:	b090      	sub	sp, #64	; 0x40
 801156c:	af00      	add	r7, sp, #0
 801156e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011574:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	69db      	ldr	r3, [r3, #28]
 801157a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801157e:	d037      	beq.n	80115f0 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8011580:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011582:	2200      	movs	r2, #0
 8011584:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8011588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801158a:	681b      	ldr	r3, [r3, #0]
 801158c:	3308      	adds	r3, #8
 801158e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011592:	e853 3f00 	ldrex	r3, [r3]
 8011596:	623b      	str	r3, [r7, #32]
   return(result);
 8011598:	6a3b      	ldr	r3, [r7, #32]
 801159a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801159e:	63bb      	str	r3, [r7, #56]	; 0x38
 80115a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80115a2:	681b      	ldr	r3, [r3, #0]
 80115a4:	3308      	adds	r3, #8
 80115a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80115a8:	633a      	str	r2, [r7, #48]	; 0x30
 80115aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80115ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80115ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80115b0:	e841 2300 	strex	r3, r2, [r1]
 80115b4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80115b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d1e5      	bne.n	8011588 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80115bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80115be:	681b      	ldr	r3, [r3, #0]
 80115c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80115c2:	693b      	ldr	r3, [r7, #16]
 80115c4:	e853 3f00 	ldrex	r3, [r3]
 80115c8:	60fb      	str	r3, [r7, #12]
   return(result);
 80115ca:	68fb      	ldr	r3, [r7, #12]
 80115cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80115d0:	637b      	str	r3, [r7, #52]	; 0x34
 80115d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80115d4:	681b      	ldr	r3, [r3, #0]
 80115d6:	461a      	mov	r2, r3
 80115d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115da:	61fb      	str	r3, [r7, #28]
 80115dc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80115de:	69b9      	ldr	r1, [r7, #24]
 80115e0:	69fa      	ldr	r2, [r7, #28]
 80115e2:	e841 2300 	strex	r3, r2, [r1]
 80115e6:	617b      	str	r3, [r7, #20]
   return(result);
 80115e8:	697b      	ldr	r3, [r7, #20]
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	d1e6      	bne.n	80115bc <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80115ee:	e002      	b.n	80115f6 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 80115f0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80115f2:	f7f0 fc81 	bl	8001ef8 <HAL_UART_TxCpltCallback>
}
 80115f6:	bf00      	nop
 80115f8:	3740      	adds	r7, #64	; 0x40
 80115fa:	46bd      	mov	sp, r7
 80115fc:	bd80      	pop	{r7, pc}

080115fe <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80115fe:	b580      	push	{r7, lr}
 8011600:	b084      	sub	sp, #16
 8011602:	af00      	add	r7, sp, #0
 8011604:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801160a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 801160c:	68f8      	ldr	r0, [r7, #12]
 801160e:	f7fe fe9f 	bl	8010350 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011612:	bf00      	nop
 8011614:	3710      	adds	r7, #16
 8011616:	46bd      	mov	sp, r7
 8011618:	bd80      	pop	{r7, pc}

0801161a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801161a:	b580      	push	{r7, lr}
 801161c:	b086      	sub	sp, #24
 801161e:	af00      	add	r7, sp, #0
 8011620:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011626:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8011628:	697b      	ldr	r3, [r7, #20]
 801162a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801162e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8011630:	697b      	ldr	r3, [r7, #20]
 8011632:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011636:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8011638:	697b      	ldr	r3, [r7, #20]
 801163a:	681b      	ldr	r3, [r3, #0]
 801163c:	689b      	ldr	r3, [r3, #8]
 801163e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011642:	2b80      	cmp	r3, #128	; 0x80
 8011644:	d109      	bne.n	801165a <UART_DMAError+0x40>
 8011646:	693b      	ldr	r3, [r7, #16]
 8011648:	2b21      	cmp	r3, #33	; 0x21
 801164a:	d106      	bne.n	801165a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 801164c:	697b      	ldr	r3, [r7, #20]
 801164e:	2200      	movs	r2, #0
 8011650:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8011654:	6978      	ldr	r0, [r7, #20]
 8011656:	f7ff fedf 	bl	8011418 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801165a:	697b      	ldr	r3, [r7, #20]
 801165c:	681b      	ldr	r3, [r3, #0]
 801165e:	689b      	ldr	r3, [r3, #8]
 8011660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011664:	2b40      	cmp	r3, #64	; 0x40
 8011666:	d109      	bne.n	801167c <UART_DMAError+0x62>
 8011668:	68fb      	ldr	r3, [r7, #12]
 801166a:	2b22      	cmp	r3, #34	; 0x22
 801166c:	d106      	bne.n	801167c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 801166e:	697b      	ldr	r3, [r7, #20]
 8011670:	2200      	movs	r2, #0
 8011672:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8011676:	6978      	ldr	r0, [r7, #20]
 8011678:	f7ff ff10 	bl	801149c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801167c:	697b      	ldr	r3, [r7, #20]
 801167e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011682:	f043 0210 	orr.w	r2, r3, #16
 8011686:	697b      	ldr	r3, [r7, #20]
 8011688:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801168c:	6978      	ldr	r0, [r7, #20]
 801168e:	f7fe fe69 	bl	8010364 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011692:	bf00      	nop
 8011694:	3718      	adds	r7, #24
 8011696:	46bd      	mov	sp, r7
 8011698:	bd80      	pop	{r7, pc}

0801169a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801169a:	b580      	push	{r7, lr}
 801169c:	b084      	sub	sp, #16
 801169e:	af00      	add	r7, sp, #0
 80116a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80116a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80116a8:	68fb      	ldr	r3, [r7, #12]
 80116aa:	2200      	movs	r2, #0
 80116ac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80116b0:	68fb      	ldr	r3, [r7, #12]
 80116b2:	2200      	movs	r2, #0
 80116b4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80116b8:	68f8      	ldr	r0, [r7, #12]
 80116ba:	f7fe fe53 	bl	8010364 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80116be:	bf00      	nop
 80116c0:	3710      	adds	r7, #16
 80116c2:	46bd      	mov	sp, r7
 80116c4:	bd80      	pop	{r7, pc}

080116c6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80116c6:	b580      	push	{r7, lr}
 80116c8:	b088      	sub	sp, #32
 80116ca:	af00      	add	r7, sp, #0
 80116cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	681b      	ldr	r3, [r3, #0]
 80116d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80116d4:	68fb      	ldr	r3, [r7, #12]
 80116d6:	e853 3f00 	ldrex	r3, [r3]
 80116da:	60bb      	str	r3, [r7, #8]
   return(result);
 80116dc:	68bb      	ldr	r3, [r7, #8]
 80116de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80116e2:	61fb      	str	r3, [r7, #28]
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	681b      	ldr	r3, [r3, #0]
 80116e8:	461a      	mov	r2, r3
 80116ea:	69fb      	ldr	r3, [r7, #28]
 80116ec:	61bb      	str	r3, [r7, #24]
 80116ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80116f0:	6979      	ldr	r1, [r7, #20]
 80116f2:	69ba      	ldr	r2, [r7, #24]
 80116f4:	e841 2300 	strex	r3, r2, [r1]
 80116f8:	613b      	str	r3, [r7, #16]
   return(result);
 80116fa:	693b      	ldr	r3, [r7, #16]
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	d1e6      	bne.n	80116ce <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	2220      	movs	r2, #32
 8011704:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	2200      	movs	r2, #0
 801170c:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801170e:	6878      	ldr	r0, [r7, #4]
 8011710:	f7f0 fbf2 	bl	8001ef8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011714:	bf00      	nop
 8011716:	3720      	adds	r7, #32
 8011718:	46bd      	mov	sp, r7
 801171a:	bd80      	pop	{r7, pc}

0801171c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801171c:	b580      	push	{r7, lr}
 801171e:	b09c      	sub	sp, #112	; 0x70
 8011720:	af00      	add	r7, sp, #0
 8011722:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801172a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011734:	2b22      	cmp	r3, #34	; 0x22
 8011736:	f040 80be 	bne.w	80118b6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	681b      	ldr	r3, [r3, #0]
 801173e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011740:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8011744:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8011748:	b2d9      	uxtb	r1, r3
 801174a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 801174e:	b2da      	uxtb	r2, r3
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011754:	400a      	ands	r2, r1
 8011756:	b2d2      	uxtb	r2, r2
 8011758:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801175e:	1c5a      	adds	r2, r3, #1
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801176a:	b29b      	uxth	r3, r3
 801176c:	3b01      	subs	r3, #1
 801176e:	b29a      	uxth	r2, r3
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801177c:	b29b      	uxth	r3, r3
 801177e:	2b00      	cmp	r3, #0
 8011780:	f040 80a1 	bne.w	80118c6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	681b      	ldr	r3, [r3, #0]
 8011788:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801178a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801178c:	e853 3f00 	ldrex	r3, [r3]
 8011790:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8011792:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011794:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011798:	66bb      	str	r3, [r7, #104]	; 0x68
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	681b      	ldr	r3, [r3, #0]
 801179e:	461a      	mov	r2, r3
 80117a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80117a2:	65bb      	str	r3, [r7, #88]	; 0x58
 80117a4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80117a6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80117a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80117aa:	e841 2300 	strex	r3, r2, [r1]
 80117ae:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80117b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d1e6      	bne.n	8011784 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	681b      	ldr	r3, [r3, #0]
 80117ba:	3308      	adds	r3, #8
 80117bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80117be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117c0:	e853 3f00 	ldrex	r3, [r3]
 80117c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80117c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80117c8:	f023 0301 	bic.w	r3, r3, #1
 80117cc:	667b      	str	r3, [r7, #100]	; 0x64
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	681b      	ldr	r3, [r3, #0]
 80117d2:	3308      	adds	r3, #8
 80117d4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80117d6:	647a      	str	r2, [r7, #68]	; 0x44
 80117d8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80117da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80117dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80117de:	e841 2300 	strex	r3, r2, [r1]
 80117e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80117e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	d1e5      	bne.n	80117b6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	2220      	movs	r2, #32
 80117ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	2200      	movs	r2, #0
 80117f6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	2200      	movs	r2, #0
 80117fc:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	681b      	ldr	r3, [r3, #0]
 8011802:	4a33      	ldr	r2, [pc, #204]	; (80118d0 <UART_RxISR_8BIT+0x1b4>)
 8011804:	4293      	cmp	r3, r2
 8011806:	d01f      	beq.n	8011848 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	681b      	ldr	r3, [r3, #0]
 801180c:	685b      	ldr	r3, [r3, #4]
 801180e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011812:	2b00      	cmp	r3, #0
 8011814:	d018      	beq.n	8011848 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	681b      	ldr	r3, [r3, #0]
 801181a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801181c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801181e:	e853 3f00 	ldrex	r3, [r3]
 8011822:	623b      	str	r3, [r7, #32]
   return(result);
 8011824:	6a3b      	ldr	r3, [r7, #32]
 8011826:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801182a:	663b      	str	r3, [r7, #96]	; 0x60
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	681b      	ldr	r3, [r3, #0]
 8011830:	461a      	mov	r2, r3
 8011832:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011834:	633b      	str	r3, [r7, #48]	; 0x30
 8011836:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011838:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801183a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801183c:	e841 2300 	strex	r3, r2, [r1]
 8011840:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011844:	2b00      	cmp	r3, #0
 8011846:	d1e6      	bne.n	8011816 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801184c:	2b01      	cmp	r3, #1
 801184e:	d12e      	bne.n	80118ae <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	2200      	movs	r2, #0
 8011854:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	681b      	ldr	r3, [r3, #0]
 801185a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801185c:	693b      	ldr	r3, [r7, #16]
 801185e:	e853 3f00 	ldrex	r3, [r3]
 8011862:	60fb      	str	r3, [r7, #12]
   return(result);
 8011864:	68fb      	ldr	r3, [r7, #12]
 8011866:	f023 0310 	bic.w	r3, r3, #16
 801186a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	681b      	ldr	r3, [r3, #0]
 8011870:	461a      	mov	r2, r3
 8011872:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011874:	61fb      	str	r3, [r7, #28]
 8011876:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011878:	69b9      	ldr	r1, [r7, #24]
 801187a:	69fa      	ldr	r2, [r7, #28]
 801187c:	e841 2300 	strex	r3, r2, [r1]
 8011880:	617b      	str	r3, [r7, #20]
   return(result);
 8011882:	697b      	ldr	r3, [r7, #20]
 8011884:	2b00      	cmp	r3, #0
 8011886:	d1e6      	bne.n	8011856 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	681b      	ldr	r3, [r3, #0]
 801188c:	69db      	ldr	r3, [r3, #28]
 801188e:	f003 0310 	and.w	r3, r3, #16
 8011892:	2b10      	cmp	r3, #16
 8011894:	d103      	bne.n	801189e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	681b      	ldr	r3, [r3, #0]
 801189a:	2210      	movs	r2, #16
 801189c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80118a4:	4619      	mov	r1, r3
 80118a6:	6878      	ldr	r0, [r7, #4]
 80118a8:	f7fe fd66 	bl	8010378 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80118ac:	e00b      	b.n	80118c6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80118ae:	6878      	ldr	r0, [r7, #4]
 80118b0:	f7ee fedc 	bl	800066c <HAL_UART_RxCpltCallback>
}
 80118b4:	e007      	b.n	80118c6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	681b      	ldr	r3, [r3, #0]
 80118ba:	699a      	ldr	r2, [r3, #24]
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	681b      	ldr	r3, [r3, #0]
 80118c0:	f042 0208 	orr.w	r2, r2, #8
 80118c4:	619a      	str	r2, [r3, #24]
}
 80118c6:	bf00      	nop
 80118c8:	3770      	adds	r7, #112	; 0x70
 80118ca:	46bd      	mov	sp, r7
 80118cc:	bd80      	pop	{r7, pc}
 80118ce:	bf00      	nop
 80118d0:	58000c00 	.word	0x58000c00

080118d4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80118d4:	b580      	push	{r7, lr}
 80118d6:	b09c      	sub	sp, #112	; 0x70
 80118d8:	af00      	add	r7, sp, #0
 80118da:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80118e2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80118ec:	2b22      	cmp	r3, #34	; 0x22
 80118ee:	f040 80be 	bne.w	8011a6e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	681b      	ldr	r3, [r3, #0]
 80118f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118f8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011900:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8011902:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8011906:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 801190a:	4013      	ands	r3, r2
 801190c:	b29a      	uxth	r2, r3
 801190e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011910:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011916:	1c9a      	adds	r2, r3, #2
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011922:	b29b      	uxth	r3, r3
 8011924:	3b01      	subs	r3, #1
 8011926:	b29a      	uxth	r2, r3
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011934:	b29b      	uxth	r3, r3
 8011936:	2b00      	cmp	r3, #0
 8011938:	f040 80a1 	bne.w	8011a7e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	681b      	ldr	r3, [r3, #0]
 8011940:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011942:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011944:	e853 3f00 	ldrex	r3, [r3]
 8011948:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 801194a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801194c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011950:	667b      	str	r3, [r7, #100]	; 0x64
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	681b      	ldr	r3, [r3, #0]
 8011956:	461a      	mov	r2, r3
 8011958:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801195a:	657b      	str	r3, [r7, #84]	; 0x54
 801195c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801195e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011960:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011962:	e841 2300 	strex	r3, r2, [r1]
 8011966:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8011968:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801196a:	2b00      	cmp	r3, #0
 801196c:	d1e6      	bne.n	801193c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	681b      	ldr	r3, [r3, #0]
 8011972:	3308      	adds	r3, #8
 8011974:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011978:	e853 3f00 	ldrex	r3, [r3]
 801197c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801197e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011980:	f023 0301 	bic.w	r3, r3, #1
 8011984:	663b      	str	r3, [r7, #96]	; 0x60
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	681b      	ldr	r3, [r3, #0]
 801198a:	3308      	adds	r3, #8
 801198c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801198e:	643a      	str	r2, [r7, #64]	; 0x40
 8011990:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011992:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011994:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011996:	e841 2300 	strex	r3, r2, [r1]
 801199a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801199c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801199e:	2b00      	cmp	r3, #0
 80119a0:	d1e5      	bne.n	801196e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	2220      	movs	r2, #32
 80119a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	2200      	movs	r2, #0
 80119ae:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	2200      	movs	r2, #0
 80119b4:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	681b      	ldr	r3, [r3, #0]
 80119ba:	4a33      	ldr	r2, [pc, #204]	; (8011a88 <UART_RxISR_16BIT+0x1b4>)
 80119bc:	4293      	cmp	r3, r2
 80119be:	d01f      	beq.n	8011a00 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	681b      	ldr	r3, [r3, #0]
 80119c4:	685b      	ldr	r3, [r3, #4]
 80119c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d018      	beq.n	8011a00 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	681b      	ldr	r3, [r3, #0]
 80119d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80119d4:	6a3b      	ldr	r3, [r7, #32]
 80119d6:	e853 3f00 	ldrex	r3, [r3]
 80119da:	61fb      	str	r3, [r7, #28]
   return(result);
 80119dc:	69fb      	ldr	r3, [r7, #28]
 80119de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80119e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	681b      	ldr	r3, [r3, #0]
 80119e8:	461a      	mov	r2, r3
 80119ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80119ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80119ee:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80119f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80119f4:	e841 2300 	strex	r3, r2, [r1]
 80119f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80119fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	d1e6      	bne.n	80119ce <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a04:	2b01      	cmp	r3, #1
 8011a06:	d12e      	bne.n	8011a66 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	2200      	movs	r2, #0
 8011a0c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	681b      	ldr	r3, [r3, #0]
 8011a12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a14:	68fb      	ldr	r3, [r7, #12]
 8011a16:	e853 3f00 	ldrex	r3, [r3]
 8011a1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8011a1c:	68bb      	ldr	r3, [r7, #8]
 8011a1e:	f023 0310 	bic.w	r3, r3, #16
 8011a22:	65bb      	str	r3, [r7, #88]	; 0x58
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	681b      	ldr	r3, [r3, #0]
 8011a28:	461a      	mov	r2, r3
 8011a2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011a2c:	61bb      	str	r3, [r7, #24]
 8011a2e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a30:	6979      	ldr	r1, [r7, #20]
 8011a32:	69ba      	ldr	r2, [r7, #24]
 8011a34:	e841 2300 	strex	r3, r2, [r1]
 8011a38:	613b      	str	r3, [r7, #16]
   return(result);
 8011a3a:	693b      	ldr	r3, [r7, #16]
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d1e6      	bne.n	8011a0e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	681b      	ldr	r3, [r3, #0]
 8011a44:	69db      	ldr	r3, [r3, #28]
 8011a46:	f003 0310 	and.w	r3, r3, #16
 8011a4a:	2b10      	cmp	r3, #16
 8011a4c:	d103      	bne.n	8011a56 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	681b      	ldr	r3, [r3, #0]
 8011a52:	2210      	movs	r2, #16
 8011a54:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011a5c:	4619      	mov	r1, r3
 8011a5e:	6878      	ldr	r0, [r7, #4]
 8011a60:	f7fe fc8a 	bl	8010378 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011a64:	e00b      	b.n	8011a7e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8011a66:	6878      	ldr	r0, [r7, #4]
 8011a68:	f7ee fe00 	bl	800066c <HAL_UART_RxCpltCallback>
}
 8011a6c:	e007      	b.n	8011a7e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	681b      	ldr	r3, [r3, #0]
 8011a72:	699a      	ldr	r2, [r3, #24]
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	681b      	ldr	r3, [r3, #0]
 8011a78:	f042 0208 	orr.w	r2, r2, #8
 8011a7c:	619a      	str	r2, [r3, #24]
}
 8011a7e:	bf00      	nop
 8011a80:	3770      	adds	r7, #112	; 0x70
 8011a82:	46bd      	mov	sp, r7
 8011a84:	bd80      	pop	{r7, pc}
 8011a86:	bf00      	nop
 8011a88:	58000c00 	.word	0x58000c00

08011a8c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8011a8c:	b580      	push	{r7, lr}
 8011a8e:	b0ac      	sub	sp, #176	; 0xb0
 8011a90:	af00      	add	r7, sp, #0
 8011a92:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011a9a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	681b      	ldr	r3, [r3, #0]
 8011aa2:	69db      	ldr	r3, [r3, #28]
 8011aa4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	681b      	ldr	r3, [r3, #0]
 8011aac:	681b      	ldr	r3, [r3, #0]
 8011aae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	681b      	ldr	r3, [r3, #0]
 8011ab6:	689b      	ldr	r3, [r3, #8]
 8011ab8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011ac2:	2b22      	cmp	r3, #34	; 0x22
 8011ac4:	f040 8180 	bne.w	8011dc8 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011ace:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8011ad2:	e123      	b.n	8011d1c <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	681b      	ldr	r3, [r3, #0]
 8011ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ada:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8011ade:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8011ae2:	b2d9      	uxtb	r1, r3
 8011ae4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8011ae8:	b2da      	uxtb	r2, r3
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011aee:	400a      	ands	r2, r1
 8011af0:	b2d2      	uxtb	r2, r2
 8011af2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011af8:	1c5a      	adds	r2, r3, #1
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011b04:	b29b      	uxth	r3, r3
 8011b06:	3b01      	subs	r3, #1
 8011b08:	b29a      	uxth	r2, r3
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	681b      	ldr	r3, [r3, #0]
 8011b14:	69db      	ldr	r3, [r3, #28]
 8011b16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8011b1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011b1e:	f003 0307 	and.w	r3, r3, #7
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d053      	beq.n	8011bce <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8011b26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011b2a:	f003 0301 	and.w	r3, r3, #1
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d011      	beq.n	8011b56 <UART_RxISR_8BIT_FIFOEN+0xca>
 8011b32:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8011b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d00b      	beq.n	8011b56 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	681b      	ldr	r3, [r3, #0]
 8011b42:	2201      	movs	r2, #1
 8011b44:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011b4c:	f043 0201 	orr.w	r2, r3, #1
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011b56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011b5a:	f003 0302 	and.w	r3, r3, #2
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	d011      	beq.n	8011b86 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8011b62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011b66:	f003 0301 	and.w	r3, r3, #1
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d00b      	beq.n	8011b86 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	681b      	ldr	r3, [r3, #0]
 8011b72:	2202      	movs	r2, #2
 8011b74:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011b7c:	f043 0204 	orr.w	r2, r3, #4
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011b86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011b8a:	f003 0304 	and.w	r3, r3, #4
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d011      	beq.n	8011bb6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8011b92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011b96:	f003 0301 	and.w	r3, r3, #1
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d00b      	beq.n	8011bb6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	681b      	ldr	r3, [r3, #0]
 8011ba2:	2204      	movs	r2, #4
 8011ba4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011bac:	f043 0202 	orr.w	r2, r3, #2
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	d006      	beq.n	8011bce <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8011bc0:	6878      	ldr	r0, [r7, #4]
 8011bc2:	f7fe fbcf 	bl	8010364 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	2200      	movs	r2, #0
 8011bca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011bd4:	b29b      	uxth	r3, r3
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	f040 80a0 	bne.w	8011d1c <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	681b      	ldr	r3, [r3, #0]
 8011be0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011be2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011be4:	e853 3f00 	ldrex	r3, [r3]
 8011be8:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8011bea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011bec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011bf0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	681b      	ldr	r3, [r3, #0]
 8011bf8:	461a      	mov	r2, r3
 8011bfa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011bfe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011c00:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c02:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8011c04:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8011c06:	e841 2300 	strex	r3, r2, [r1]
 8011c0a:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8011c0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011c0e:	2b00      	cmp	r3, #0
 8011c10:	d1e4      	bne.n	8011bdc <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	681b      	ldr	r3, [r3, #0]
 8011c16:	3308      	adds	r3, #8
 8011c18:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011c1c:	e853 3f00 	ldrex	r3, [r3]
 8011c20:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8011c22:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011c24:	4b6e      	ldr	r3, [pc, #440]	; (8011de0 <UART_RxISR_8BIT_FIFOEN+0x354>)
 8011c26:	4013      	ands	r3, r2
 8011c28:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	681b      	ldr	r3, [r3, #0]
 8011c30:	3308      	adds	r3, #8
 8011c32:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8011c36:	66ba      	str	r2, [r7, #104]	; 0x68
 8011c38:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c3a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8011c3c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011c3e:	e841 2300 	strex	r3, r2, [r1]
 8011c42:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8011c44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011c46:	2b00      	cmp	r3, #0
 8011c48:	d1e3      	bne.n	8011c12 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	2220      	movs	r2, #32
 8011c4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	2200      	movs	r2, #0
 8011c56:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	2200      	movs	r2, #0
 8011c5c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	681b      	ldr	r3, [r3, #0]
 8011c62:	4a60      	ldr	r2, [pc, #384]	; (8011de4 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8011c64:	4293      	cmp	r3, r2
 8011c66:	d021      	beq.n	8011cac <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	681b      	ldr	r3, [r3, #0]
 8011c6c:	685b      	ldr	r3, [r3, #4]
 8011c6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d01a      	beq.n	8011cac <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	681b      	ldr	r3, [r3, #0]
 8011c7a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011c7e:	e853 3f00 	ldrex	r3, [r3]
 8011c82:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8011c84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011c86:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8011c8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	681b      	ldr	r3, [r3, #0]
 8011c92:	461a      	mov	r2, r3
 8011c94:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011c98:	657b      	str	r3, [r7, #84]	; 0x54
 8011c9a:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c9c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011c9e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011ca0:	e841 2300 	strex	r3, r2, [r1]
 8011ca4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8011ca6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	d1e4      	bne.n	8011c76 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011cb0:	2b01      	cmp	r3, #1
 8011cb2:	d130      	bne.n	8011d16 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	2200      	movs	r2, #0
 8011cb8:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	681b      	ldr	r3, [r3, #0]
 8011cbe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011cc2:	e853 3f00 	ldrex	r3, [r3]
 8011cc6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cca:	f023 0310 	bic.w	r3, r3, #16
 8011cce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	681b      	ldr	r3, [r3, #0]
 8011cd6:	461a      	mov	r2, r3
 8011cd8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011cdc:	643b      	str	r3, [r7, #64]	; 0x40
 8011cde:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ce0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011ce2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011ce4:	e841 2300 	strex	r3, r2, [r1]
 8011ce8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d1e4      	bne.n	8011cba <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	681b      	ldr	r3, [r3, #0]
 8011cf4:	69db      	ldr	r3, [r3, #28]
 8011cf6:	f003 0310 	and.w	r3, r3, #16
 8011cfa:	2b10      	cmp	r3, #16
 8011cfc:	d103      	bne.n	8011d06 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	681b      	ldr	r3, [r3, #0]
 8011d02:	2210      	movs	r2, #16
 8011d04:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011d0c:	4619      	mov	r1, r3
 8011d0e:	6878      	ldr	r0, [r7, #4]
 8011d10:	f7fe fb32 	bl	8010378 <HAL_UARTEx_RxEventCallback>
 8011d14:	e002      	b.n	8011d1c <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8011d16:	6878      	ldr	r0, [r7, #4]
 8011d18:	f7ee fca8 	bl	800066c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8011d1c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	d006      	beq.n	8011d32 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8011d24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011d28:	f003 0320 	and.w	r3, r3, #32
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	f47f aed1 	bne.w	8011ad4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011d38:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8011d3c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d049      	beq.n	8011dd8 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011d4a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8011d4e:	429a      	cmp	r2, r3
 8011d50:	d242      	bcs.n	8011dd8 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	681b      	ldr	r3, [r3, #0]
 8011d56:	3308      	adds	r3, #8
 8011d58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d5a:	6a3b      	ldr	r3, [r7, #32]
 8011d5c:	e853 3f00 	ldrex	r3, [r3]
 8011d60:	61fb      	str	r3, [r7, #28]
   return(result);
 8011d62:	69fb      	ldr	r3, [r7, #28]
 8011d64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011d68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	681b      	ldr	r3, [r3, #0]
 8011d70:	3308      	adds	r3, #8
 8011d72:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8011d76:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011d78:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011d7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011d7e:	e841 2300 	strex	r3, r2, [r1]
 8011d82:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	d1e3      	bne.n	8011d52 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	4a16      	ldr	r2, [pc, #88]	; (8011de8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8011d8e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	681b      	ldr	r3, [r3, #0]
 8011d94:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d96:	68fb      	ldr	r3, [r7, #12]
 8011d98:	e853 3f00 	ldrex	r3, [r3]
 8011d9c:	60bb      	str	r3, [r7, #8]
   return(result);
 8011d9e:	68bb      	ldr	r3, [r7, #8]
 8011da0:	f043 0320 	orr.w	r3, r3, #32
 8011da4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	681b      	ldr	r3, [r3, #0]
 8011dac:	461a      	mov	r2, r3
 8011dae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011db2:	61bb      	str	r3, [r7, #24]
 8011db4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011db6:	6979      	ldr	r1, [r7, #20]
 8011db8:	69ba      	ldr	r2, [r7, #24]
 8011dba:	e841 2300 	strex	r3, r2, [r1]
 8011dbe:	613b      	str	r3, [r7, #16]
   return(result);
 8011dc0:	693b      	ldr	r3, [r7, #16]
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	d1e4      	bne.n	8011d90 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011dc6:	e007      	b.n	8011dd8 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	681b      	ldr	r3, [r3, #0]
 8011dcc:	699a      	ldr	r2, [r3, #24]
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	681b      	ldr	r3, [r3, #0]
 8011dd2:	f042 0208 	orr.w	r2, r2, #8
 8011dd6:	619a      	str	r2, [r3, #24]
}
 8011dd8:	bf00      	nop
 8011dda:	37b0      	adds	r7, #176	; 0xb0
 8011ddc:	46bd      	mov	sp, r7
 8011dde:	bd80      	pop	{r7, pc}
 8011de0:	effffffe 	.word	0xeffffffe
 8011de4:	58000c00 	.word	0x58000c00
 8011de8:	0801171d 	.word	0x0801171d

08011dec <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8011dec:	b580      	push	{r7, lr}
 8011dee:	b0ae      	sub	sp, #184	; 0xb8
 8011df0:	af00      	add	r7, sp, #0
 8011df2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011dfa:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	681b      	ldr	r3, [r3, #0]
 8011e02:	69db      	ldr	r3, [r3, #28]
 8011e04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	681b      	ldr	r3, [r3, #0]
 8011e0c:	681b      	ldr	r3, [r3, #0]
 8011e0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	681b      	ldr	r3, [r3, #0]
 8011e16:	689b      	ldr	r3, [r3, #8]
 8011e18:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011e22:	2b22      	cmp	r3, #34	; 0x22
 8011e24:	f040 8184 	bne.w	8012130 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011e2e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8011e32:	e127      	b.n	8012084 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	681b      	ldr	r3, [r3, #0]
 8011e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e3a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011e42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8011e46:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8011e4a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8011e4e:	4013      	ands	r3, r2
 8011e50:	b29a      	uxth	r2, r3
 8011e52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011e56:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011e5c:	1c9a      	adds	r2, r3, #2
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011e68:	b29b      	uxth	r3, r3
 8011e6a:	3b01      	subs	r3, #1
 8011e6c:	b29a      	uxth	r2, r3
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	681b      	ldr	r3, [r3, #0]
 8011e78:	69db      	ldr	r3, [r3, #28]
 8011e7a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8011e7e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011e82:	f003 0307 	and.w	r3, r3, #7
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	d053      	beq.n	8011f32 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8011e8a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011e8e:	f003 0301 	and.w	r3, r3, #1
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	d011      	beq.n	8011eba <UART_RxISR_16BIT_FIFOEN+0xce>
 8011e96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	d00b      	beq.n	8011eba <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	681b      	ldr	r3, [r3, #0]
 8011ea6:	2201      	movs	r2, #1
 8011ea8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011eb0:	f043 0201 	orr.w	r2, r3, #1
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011eba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011ebe:	f003 0302 	and.w	r3, r3, #2
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	d011      	beq.n	8011eea <UART_RxISR_16BIT_FIFOEN+0xfe>
 8011ec6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011eca:	f003 0301 	and.w	r3, r3, #1
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d00b      	beq.n	8011eea <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	681b      	ldr	r3, [r3, #0]
 8011ed6:	2202      	movs	r2, #2
 8011ed8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011ee0:	f043 0204 	orr.w	r2, r3, #4
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011eea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011eee:	f003 0304 	and.w	r3, r3, #4
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	d011      	beq.n	8011f1a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8011ef6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011efa:	f003 0301 	and.w	r3, r3, #1
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	d00b      	beq.n	8011f1a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	681b      	ldr	r3, [r3, #0]
 8011f06:	2204      	movs	r2, #4
 8011f08:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011f10:	f043 0202 	orr.w	r2, r3, #2
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d006      	beq.n	8011f32 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8011f24:	6878      	ldr	r0, [r7, #4]
 8011f26:	f7fe fa1d 	bl	8010364 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	2200      	movs	r2, #0
 8011f2e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011f38:	b29b      	uxth	r3, r3
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	f040 80a2 	bne.w	8012084 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	681b      	ldr	r3, [r3, #0]
 8011f44:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011f48:	e853 3f00 	ldrex	r3, [r3]
 8011f4c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8011f4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011f50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011f54:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	681b      	ldr	r3, [r3, #0]
 8011f5c:	461a      	mov	r2, r3
 8011f5e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011f62:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011f66:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f68:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8011f6a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8011f6e:	e841 2300 	strex	r3, r2, [r1]
 8011f72:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8011f74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d1e2      	bne.n	8011f40 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	681b      	ldr	r3, [r3, #0]
 8011f7e:	3308      	adds	r3, #8
 8011f80:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011f84:	e853 3f00 	ldrex	r3, [r3]
 8011f88:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8011f8a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011f8c:	4b6e      	ldr	r3, [pc, #440]	; (8012148 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8011f8e:	4013      	ands	r3, r2
 8011f90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	681b      	ldr	r3, [r3, #0]
 8011f98:	3308      	adds	r3, #8
 8011f9a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8011f9e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8011fa0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011fa2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8011fa4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8011fa6:	e841 2300 	strex	r3, r2, [r1]
 8011faa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8011fac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d1e3      	bne.n	8011f7a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	2220      	movs	r2, #32
 8011fb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	2200      	movs	r2, #0
 8011fbe:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	2200      	movs	r2, #0
 8011fc4:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	681b      	ldr	r3, [r3, #0]
 8011fca:	4a60      	ldr	r2, [pc, #384]	; (801214c <UART_RxISR_16BIT_FIFOEN+0x360>)
 8011fcc:	4293      	cmp	r3, r2
 8011fce:	d021      	beq.n	8012014 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	681b      	ldr	r3, [r3, #0]
 8011fd4:	685b      	ldr	r3, [r3, #4]
 8011fd6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d01a      	beq.n	8012014 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	681b      	ldr	r3, [r3, #0]
 8011fe2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011fe4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011fe6:	e853 3f00 	ldrex	r3, [r3]
 8011fea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8011fec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011fee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8011ff2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	681b      	ldr	r3, [r3, #0]
 8011ffa:	461a      	mov	r2, r3
 8011ffc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012000:	65bb      	str	r3, [r7, #88]	; 0x58
 8012002:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012004:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012006:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012008:	e841 2300 	strex	r3, r2, [r1]
 801200c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801200e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012010:	2b00      	cmp	r3, #0
 8012012:	d1e4      	bne.n	8011fde <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012018:	2b01      	cmp	r3, #1
 801201a:	d130      	bne.n	801207e <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	2200      	movs	r2, #0
 8012020:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	681b      	ldr	r3, [r3, #0]
 8012026:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801202a:	e853 3f00 	ldrex	r3, [r3]
 801202e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8012030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012032:	f023 0310 	bic.w	r3, r3, #16
 8012036:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	681b      	ldr	r3, [r3, #0]
 801203e:	461a      	mov	r2, r3
 8012040:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012044:	647b      	str	r3, [r7, #68]	; 0x44
 8012046:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012048:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801204a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801204c:	e841 2300 	strex	r3, r2, [r1]
 8012050:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8012052:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012054:	2b00      	cmp	r3, #0
 8012056:	d1e4      	bne.n	8012022 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	681b      	ldr	r3, [r3, #0]
 801205c:	69db      	ldr	r3, [r3, #28]
 801205e:	f003 0310 	and.w	r3, r3, #16
 8012062:	2b10      	cmp	r3, #16
 8012064:	d103      	bne.n	801206e <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	681b      	ldr	r3, [r3, #0]
 801206a:	2210      	movs	r2, #16
 801206c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012074:	4619      	mov	r1, r3
 8012076:	6878      	ldr	r0, [r7, #4]
 8012078:	f7fe f97e 	bl	8010378 <HAL_UARTEx_RxEventCallback>
 801207c:	e002      	b.n	8012084 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 801207e:	6878      	ldr	r0, [r7, #4]
 8012080:	f7ee faf4 	bl	800066c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012084:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8012088:	2b00      	cmp	r3, #0
 801208a:	d006      	beq.n	801209a <UART_RxISR_16BIT_FIFOEN+0x2ae>
 801208c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012090:	f003 0320 	and.w	r3, r3, #32
 8012094:	2b00      	cmp	r3, #0
 8012096:	f47f aecd 	bne.w	8011e34 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80120a0:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80120a4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	d049      	beq.n	8012140 <UART_RxISR_16BIT_FIFOEN+0x354>
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80120b2:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 80120b6:	429a      	cmp	r2, r3
 80120b8:	d242      	bcs.n	8012140 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	681b      	ldr	r3, [r3, #0]
 80120be:	3308      	adds	r3, #8
 80120c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120c4:	e853 3f00 	ldrex	r3, [r3]
 80120c8:	623b      	str	r3, [r7, #32]
   return(result);
 80120ca:	6a3b      	ldr	r3, [r7, #32]
 80120cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80120d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	681b      	ldr	r3, [r3, #0]
 80120d8:	3308      	adds	r3, #8
 80120da:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80120de:	633a      	str	r2, [r7, #48]	; 0x30
 80120e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80120e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80120e6:	e841 2300 	strex	r3, r2, [r1]
 80120ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80120ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d1e3      	bne.n	80120ba <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	4a16      	ldr	r2, [pc, #88]	; (8012150 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80120f6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	681b      	ldr	r3, [r3, #0]
 80120fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120fe:	693b      	ldr	r3, [r7, #16]
 8012100:	e853 3f00 	ldrex	r3, [r3]
 8012104:	60fb      	str	r3, [r7, #12]
   return(result);
 8012106:	68fb      	ldr	r3, [r7, #12]
 8012108:	f043 0320 	orr.w	r3, r3, #32
 801210c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	681b      	ldr	r3, [r3, #0]
 8012114:	461a      	mov	r2, r3
 8012116:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801211a:	61fb      	str	r3, [r7, #28]
 801211c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801211e:	69b9      	ldr	r1, [r7, #24]
 8012120:	69fa      	ldr	r2, [r7, #28]
 8012122:	e841 2300 	strex	r3, r2, [r1]
 8012126:	617b      	str	r3, [r7, #20]
   return(result);
 8012128:	697b      	ldr	r3, [r7, #20]
 801212a:	2b00      	cmp	r3, #0
 801212c:	d1e4      	bne.n	80120f8 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801212e:	e007      	b.n	8012140 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	681b      	ldr	r3, [r3, #0]
 8012134:	699a      	ldr	r2, [r3, #24]
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	681b      	ldr	r3, [r3, #0]
 801213a:	f042 0208 	orr.w	r2, r2, #8
 801213e:	619a      	str	r2, [r3, #24]
}
 8012140:	bf00      	nop
 8012142:	37b8      	adds	r7, #184	; 0xb8
 8012144:	46bd      	mov	sp, r7
 8012146:	bd80      	pop	{r7, pc}
 8012148:	effffffe 	.word	0xeffffffe
 801214c:	58000c00 	.word	0x58000c00
 8012150:	080118d5 	.word	0x080118d5

08012154 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8012154:	b480      	push	{r7}
 8012156:	b083      	sub	sp, #12
 8012158:	af00      	add	r7, sp, #0
 801215a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801215c:	bf00      	nop
 801215e:	370c      	adds	r7, #12
 8012160:	46bd      	mov	sp, r7
 8012162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012166:	4770      	bx	lr

08012168 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8012168:	b480      	push	{r7}
 801216a:	b083      	sub	sp, #12
 801216c:	af00      	add	r7, sp, #0
 801216e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8012170:	bf00      	nop
 8012172:	370c      	adds	r7, #12
 8012174:	46bd      	mov	sp, r7
 8012176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801217a:	4770      	bx	lr

0801217c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801217c:	b480      	push	{r7}
 801217e:	b083      	sub	sp, #12
 8012180:	af00      	add	r7, sp, #0
 8012182:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8012184:	bf00      	nop
 8012186:	370c      	adds	r7, #12
 8012188:	46bd      	mov	sp, r7
 801218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801218e:	4770      	bx	lr

08012190 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8012190:	b480      	push	{r7}
 8012192:	b085      	sub	sp, #20
 8012194:	af00      	add	r7, sp, #0
 8012196:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801219e:	2b01      	cmp	r3, #1
 80121a0:	d101      	bne.n	80121a6 <HAL_UARTEx_DisableFifoMode+0x16>
 80121a2:	2302      	movs	r3, #2
 80121a4:	e027      	b.n	80121f6 <HAL_UARTEx_DisableFifoMode+0x66>
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	2201      	movs	r2, #1
 80121aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	2224      	movs	r2, #36	; 0x24
 80121b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	681b      	ldr	r3, [r3, #0]
 80121ba:	681b      	ldr	r3, [r3, #0]
 80121bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	681b      	ldr	r3, [r3, #0]
 80121c2:	681a      	ldr	r2, [r3, #0]
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	681b      	ldr	r3, [r3, #0]
 80121c8:	f022 0201 	bic.w	r2, r2, #1
 80121cc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80121ce:	68fb      	ldr	r3, [r7, #12]
 80121d0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80121d4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	2200      	movs	r2, #0
 80121da:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	681b      	ldr	r3, [r3, #0]
 80121e0:	68fa      	ldr	r2, [r7, #12]
 80121e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	2220      	movs	r2, #32
 80121e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	2200      	movs	r2, #0
 80121f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80121f4:	2300      	movs	r3, #0
}
 80121f6:	4618      	mov	r0, r3
 80121f8:	3714      	adds	r7, #20
 80121fa:	46bd      	mov	sp, r7
 80121fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012200:	4770      	bx	lr

08012202 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012202:	b580      	push	{r7, lr}
 8012204:	b084      	sub	sp, #16
 8012206:	af00      	add	r7, sp, #0
 8012208:	6078      	str	r0, [r7, #4]
 801220a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012212:	2b01      	cmp	r3, #1
 8012214:	d101      	bne.n	801221a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8012216:	2302      	movs	r3, #2
 8012218:	e02d      	b.n	8012276 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	2201      	movs	r2, #1
 801221e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	2224      	movs	r2, #36	; 0x24
 8012226:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	681b      	ldr	r3, [r3, #0]
 801222e:	681b      	ldr	r3, [r3, #0]
 8012230:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	681b      	ldr	r3, [r3, #0]
 8012236:	681a      	ldr	r2, [r3, #0]
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	681b      	ldr	r3, [r3, #0]
 801223c:	f022 0201 	bic.w	r2, r2, #1
 8012240:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	681b      	ldr	r3, [r3, #0]
 8012246:	689b      	ldr	r3, [r3, #8]
 8012248:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	681b      	ldr	r3, [r3, #0]
 8012250:	683a      	ldr	r2, [r7, #0]
 8012252:	430a      	orrs	r2, r1
 8012254:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012256:	6878      	ldr	r0, [r7, #4]
 8012258:	f000 f850 	bl	80122fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	681b      	ldr	r3, [r3, #0]
 8012260:	68fa      	ldr	r2, [r7, #12]
 8012262:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	2220      	movs	r2, #32
 8012268:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	2200      	movs	r2, #0
 8012270:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012274:	2300      	movs	r3, #0
}
 8012276:	4618      	mov	r0, r3
 8012278:	3710      	adds	r7, #16
 801227a:	46bd      	mov	sp, r7
 801227c:	bd80      	pop	{r7, pc}

0801227e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801227e:	b580      	push	{r7, lr}
 8012280:	b084      	sub	sp, #16
 8012282:	af00      	add	r7, sp, #0
 8012284:	6078      	str	r0, [r7, #4]
 8012286:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801228e:	2b01      	cmp	r3, #1
 8012290:	d101      	bne.n	8012296 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8012292:	2302      	movs	r3, #2
 8012294:	e02d      	b.n	80122f2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	2201      	movs	r2, #1
 801229a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	2224      	movs	r2, #36	; 0x24
 80122a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	681b      	ldr	r3, [r3, #0]
 80122aa:	681b      	ldr	r3, [r3, #0]
 80122ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	681b      	ldr	r3, [r3, #0]
 80122b2:	681a      	ldr	r2, [r3, #0]
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	681b      	ldr	r3, [r3, #0]
 80122b8:	f022 0201 	bic.w	r2, r2, #1
 80122bc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	681b      	ldr	r3, [r3, #0]
 80122c2:	689b      	ldr	r3, [r3, #8]
 80122c4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	681b      	ldr	r3, [r3, #0]
 80122cc:	683a      	ldr	r2, [r7, #0]
 80122ce:	430a      	orrs	r2, r1
 80122d0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80122d2:	6878      	ldr	r0, [r7, #4]
 80122d4:	f000 f812 	bl	80122fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	681b      	ldr	r3, [r3, #0]
 80122dc:	68fa      	ldr	r2, [r7, #12]
 80122de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	2220      	movs	r2, #32
 80122e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	2200      	movs	r2, #0
 80122ec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80122f0:	2300      	movs	r3, #0
}
 80122f2:	4618      	mov	r0, r3
 80122f4:	3710      	adds	r7, #16
 80122f6:	46bd      	mov	sp, r7
 80122f8:	bd80      	pop	{r7, pc}
	...

080122fc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80122fc:	b480      	push	{r7}
 80122fe:	b085      	sub	sp, #20
 8012300:	af00      	add	r7, sp, #0
 8012302:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012308:	2b00      	cmp	r3, #0
 801230a:	d108      	bne.n	801231e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	2201      	movs	r2, #1
 8012310:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	2201      	movs	r2, #1
 8012318:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801231c:	e031      	b.n	8012382 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801231e:	2310      	movs	r3, #16
 8012320:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8012322:	2310      	movs	r3, #16
 8012324:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	681b      	ldr	r3, [r3, #0]
 801232a:	689b      	ldr	r3, [r3, #8]
 801232c:	0e5b      	lsrs	r3, r3, #25
 801232e:	b2db      	uxtb	r3, r3
 8012330:	f003 0307 	and.w	r3, r3, #7
 8012334:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	681b      	ldr	r3, [r3, #0]
 801233a:	689b      	ldr	r3, [r3, #8]
 801233c:	0f5b      	lsrs	r3, r3, #29
 801233e:	b2db      	uxtb	r3, r3
 8012340:	f003 0307 	and.w	r3, r3, #7
 8012344:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012346:	7bbb      	ldrb	r3, [r7, #14]
 8012348:	7b3a      	ldrb	r2, [r7, #12]
 801234a:	4911      	ldr	r1, [pc, #68]	; (8012390 <UARTEx_SetNbDataToProcess+0x94>)
 801234c:	5c8a      	ldrb	r2, [r1, r2]
 801234e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8012352:	7b3a      	ldrb	r2, [r7, #12]
 8012354:	490f      	ldr	r1, [pc, #60]	; (8012394 <UARTEx_SetNbDataToProcess+0x98>)
 8012356:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012358:	fb93 f3f2 	sdiv	r3, r3, r2
 801235c:	b29a      	uxth	r2, r3
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012364:	7bfb      	ldrb	r3, [r7, #15]
 8012366:	7b7a      	ldrb	r2, [r7, #13]
 8012368:	4909      	ldr	r1, [pc, #36]	; (8012390 <UARTEx_SetNbDataToProcess+0x94>)
 801236a:	5c8a      	ldrb	r2, [r1, r2]
 801236c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8012370:	7b7a      	ldrb	r2, [r7, #13]
 8012372:	4908      	ldr	r1, [pc, #32]	; (8012394 <UARTEx_SetNbDataToProcess+0x98>)
 8012374:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012376:	fb93 f3f2 	sdiv	r3, r3, r2
 801237a:	b29a      	uxth	r2, r3
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8012382:	bf00      	nop
 8012384:	3714      	adds	r7, #20
 8012386:	46bd      	mov	sp, r7
 8012388:	f85d 7b04 	ldr.w	r7, [sp], #4
 801238c:	4770      	bx	lr
 801238e:	bf00      	nop
 8012390:	08016c24 	.word	0x08016c24
 8012394:	08016c2c 	.word	0x08016c2c

08012398 <__NVIC_SetPriority>:
{
 8012398:	b480      	push	{r7}
 801239a:	b083      	sub	sp, #12
 801239c:	af00      	add	r7, sp, #0
 801239e:	4603      	mov	r3, r0
 80123a0:	6039      	str	r1, [r7, #0]
 80123a2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80123a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	db0a      	blt.n	80123c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80123ac:	683b      	ldr	r3, [r7, #0]
 80123ae:	b2da      	uxtb	r2, r3
 80123b0:	490c      	ldr	r1, [pc, #48]	; (80123e4 <__NVIC_SetPriority+0x4c>)
 80123b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80123b6:	0112      	lsls	r2, r2, #4
 80123b8:	b2d2      	uxtb	r2, r2
 80123ba:	440b      	add	r3, r1
 80123bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80123c0:	e00a      	b.n	80123d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80123c2:	683b      	ldr	r3, [r7, #0]
 80123c4:	b2da      	uxtb	r2, r3
 80123c6:	4908      	ldr	r1, [pc, #32]	; (80123e8 <__NVIC_SetPriority+0x50>)
 80123c8:	88fb      	ldrh	r3, [r7, #6]
 80123ca:	f003 030f 	and.w	r3, r3, #15
 80123ce:	3b04      	subs	r3, #4
 80123d0:	0112      	lsls	r2, r2, #4
 80123d2:	b2d2      	uxtb	r2, r2
 80123d4:	440b      	add	r3, r1
 80123d6:	761a      	strb	r2, [r3, #24]
}
 80123d8:	bf00      	nop
 80123da:	370c      	adds	r7, #12
 80123dc:	46bd      	mov	sp, r7
 80123de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123e2:	4770      	bx	lr
 80123e4:	e000e100 	.word	0xe000e100
 80123e8:	e000ed00 	.word	0xe000ed00

080123ec <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80123ec:	b580      	push	{r7, lr}
 80123ee:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80123f0:	4b05      	ldr	r3, [pc, #20]	; (8012408 <SysTick_Handler+0x1c>)
 80123f2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80123f4:	f002 fc32 	bl	8014c5c <xTaskGetSchedulerState>
 80123f8:	4603      	mov	r3, r0
 80123fa:	2b01      	cmp	r3, #1
 80123fc:	d001      	beq.n	8012402 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80123fe:	f003 fa53 	bl	80158a8 <xPortSysTickHandler>
  }
}
 8012402:	bf00      	nop
 8012404:	bd80      	pop	{r7, pc}
 8012406:	bf00      	nop
 8012408:	e000e010 	.word	0xe000e010

0801240c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 801240c:	b580      	push	{r7, lr}
 801240e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8012410:	2100      	movs	r1, #0
 8012412:	f06f 0004 	mvn.w	r0, #4
 8012416:	f7ff ffbf 	bl	8012398 <__NVIC_SetPriority>
#endif
}
 801241a:	bf00      	nop
 801241c:	bd80      	pop	{r7, pc}
	...

08012420 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8012420:	b480      	push	{r7}
 8012422:	b083      	sub	sp, #12
 8012424:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012426:	f3ef 8305 	mrs	r3, IPSR
 801242a:	603b      	str	r3, [r7, #0]
  return(result);
 801242c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801242e:	2b00      	cmp	r3, #0
 8012430:	d003      	beq.n	801243a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8012432:	f06f 0305 	mvn.w	r3, #5
 8012436:	607b      	str	r3, [r7, #4]
 8012438:	e00c      	b.n	8012454 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 801243a:	4b0a      	ldr	r3, [pc, #40]	; (8012464 <osKernelInitialize+0x44>)
 801243c:	681b      	ldr	r3, [r3, #0]
 801243e:	2b00      	cmp	r3, #0
 8012440:	d105      	bne.n	801244e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8012442:	4b08      	ldr	r3, [pc, #32]	; (8012464 <osKernelInitialize+0x44>)
 8012444:	2201      	movs	r2, #1
 8012446:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8012448:	2300      	movs	r3, #0
 801244a:	607b      	str	r3, [r7, #4]
 801244c:	e002      	b.n	8012454 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 801244e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012452:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8012454:	687b      	ldr	r3, [r7, #4]
}
 8012456:	4618      	mov	r0, r3
 8012458:	370c      	adds	r7, #12
 801245a:	46bd      	mov	sp, r7
 801245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012460:	4770      	bx	lr
 8012462:	bf00      	nop
 8012464:	2400110c 	.word	0x2400110c

08012468 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8012468:	b580      	push	{r7, lr}
 801246a:	b082      	sub	sp, #8
 801246c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801246e:	f3ef 8305 	mrs	r3, IPSR
 8012472:	603b      	str	r3, [r7, #0]
  return(result);
 8012474:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012476:	2b00      	cmp	r3, #0
 8012478:	d003      	beq.n	8012482 <osKernelStart+0x1a>
    stat = osErrorISR;
 801247a:	f06f 0305 	mvn.w	r3, #5
 801247e:	607b      	str	r3, [r7, #4]
 8012480:	e010      	b.n	80124a4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8012482:	4b0b      	ldr	r3, [pc, #44]	; (80124b0 <osKernelStart+0x48>)
 8012484:	681b      	ldr	r3, [r3, #0]
 8012486:	2b01      	cmp	r3, #1
 8012488:	d109      	bne.n	801249e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 801248a:	f7ff ffbf 	bl	801240c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 801248e:	4b08      	ldr	r3, [pc, #32]	; (80124b0 <osKernelStart+0x48>)
 8012490:	2202      	movs	r2, #2
 8012492:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8012494:	f001 fefc 	bl	8014290 <vTaskStartScheduler>
      stat = osOK;
 8012498:	2300      	movs	r3, #0
 801249a:	607b      	str	r3, [r7, #4]
 801249c:	e002      	b.n	80124a4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 801249e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80124a2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80124a4:	687b      	ldr	r3, [r7, #4]
}
 80124a6:	4618      	mov	r0, r3
 80124a8:	3708      	adds	r7, #8
 80124aa:	46bd      	mov	sp, r7
 80124ac:	bd80      	pop	{r7, pc}
 80124ae:	bf00      	nop
 80124b0:	2400110c 	.word	0x2400110c

080124b4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80124b4:	b580      	push	{r7, lr}
 80124b6:	b08e      	sub	sp, #56	; 0x38
 80124b8:	af04      	add	r7, sp, #16
 80124ba:	60f8      	str	r0, [r7, #12]
 80124bc:	60b9      	str	r1, [r7, #8]
 80124be:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80124c0:	2300      	movs	r3, #0
 80124c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80124c4:	f3ef 8305 	mrs	r3, IPSR
 80124c8:	617b      	str	r3, [r7, #20]
  return(result);
 80124ca:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	d17e      	bne.n	80125ce <osThreadNew+0x11a>
 80124d0:	68fb      	ldr	r3, [r7, #12]
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	d07b      	beq.n	80125ce <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80124d6:	2380      	movs	r3, #128	; 0x80
 80124d8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80124da:	2318      	movs	r3, #24
 80124dc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80124de:	2300      	movs	r3, #0
 80124e0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80124e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80124e6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	2b00      	cmp	r3, #0
 80124ec:	d045      	beq.n	801257a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	681b      	ldr	r3, [r3, #0]
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d002      	beq.n	80124fc <osThreadNew+0x48>
        name = attr->name;
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	681b      	ldr	r3, [r3, #0]
 80124fa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	699b      	ldr	r3, [r3, #24]
 8012500:	2b00      	cmp	r3, #0
 8012502:	d002      	beq.n	801250a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	699b      	ldr	r3, [r3, #24]
 8012508:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 801250a:	69fb      	ldr	r3, [r7, #28]
 801250c:	2b00      	cmp	r3, #0
 801250e:	d008      	beq.n	8012522 <osThreadNew+0x6e>
 8012510:	69fb      	ldr	r3, [r7, #28]
 8012512:	2b38      	cmp	r3, #56	; 0x38
 8012514:	d805      	bhi.n	8012522 <osThreadNew+0x6e>
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	685b      	ldr	r3, [r3, #4]
 801251a:	f003 0301 	and.w	r3, r3, #1
 801251e:	2b00      	cmp	r3, #0
 8012520:	d001      	beq.n	8012526 <osThreadNew+0x72>
        return (NULL);
 8012522:	2300      	movs	r3, #0
 8012524:	e054      	b.n	80125d0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	695b      	ldr	r3, [r3, #20]
 801252a:	2b00      	cmp	r3, #0
 801252c:	d003      	beq.n	8012536 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	695b      	ldr	r3, [r3, #20]
 8012532:	089b      	lsrs	r3, r3, #2
 8012534:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	689b      	ldr	r3, [r3, #8]
 801253a:	2b00      	cmp	r3, #0
 801253c:	d00e      	beq.n	801255c <osThreadNew+0xa8>
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	68db      	ldr	r3, [r3, #12]
 8012542:	2b5b      	cmp	r3, #91	; 0x5b
 8012544:	d90a      	bls.n	801255c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801254a:	2b00      	cmp	r3, #0
 801254c:	d006      	beq.n	801255c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	695b      	ldr	r3, [r3, #20]
 8012552:	2b00      	cmp	r3, #0
 8012554:	d002      	beq.n	801255c <osThreadNew+0xa8>
        mem = 1;
 8012556:	2301      	movs	r3, #1
 8012558:	61bb      	str	r3, [r7, #24]
 801255a:	e010      	b.n	801257e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	689b      	ldr	r3, [r3, #8]
 8012560:	2b00      	cmp	r3, #0
 8012562:	d10c      	bne.n	801257e <osThreadNew+0xca>
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	68db      	ldr	r3, [r3, #12]
 8012568:	2b00      	cmp	r3, #0
 801256a:	d108      	bne.n	801257e <osThreadNew+0xca>
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	691b      	ldr	r3, [r3, #16]
 8012570:	2b00      	cmp	r3, #0
 8012572:	d104      	bne.n	801257e <osThreadNew+0xca>
          mem = 0;
 8012574:	2300      	movs	r3, #0
 8012576:	61bb      	str	r3, [r7, #24]
 8012578:	e001      	b.n	801257e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 801257a:	2300      	movs	r3, #0
 801257c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 801257e:	69bb      	ldr	r3, [r7, #24]
 8012580:	2b01      	cmp	r3, #1
 8012582:	d110      	bne.n	80125a6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8012588:	687a      	ldr	r2, [r7, #4]
 801258a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801258c:	9202      	str	r2, [sp, #8]
 801258e:	9301      	str	r3, [sp, #4]
 8012590:	69fb      	ldr	r3, [r7, #28]
 8012592:	9300      	str	r3, [sp, #0]
 8012594:	68bb      	ldr	r3, [r7, #8]
 8012596:	6a3a      	ldr	r2, [r7, #32]
 8012598:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801259a:	68f8      	ldr	r0, [r7, #12]
 801259c:	f001 fb16 	bl	8013bcc <xTaskCreateStatic>
 80125a0:	4603      	mov	r3, r0
 80125a2:	613b      	str	r3, [r7, #16]
 80125a4:	e013      	b.n	80125ce <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80125a6:	69bb      	ldr	r3, [r7, #24]
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d110      	bne.n	80125ce <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80125ac:	6a3b      	ldr	r3, [r7, #32]
 80125ae:	b29a      	uxth	r2, r3
 80125b0:	f107 0310 	add.w	r3, r7, #16
 80125b4:	9301      	str	r3, [sp, #4]
 80125b6:	69fb      	ldr	r3, [r7, #28]
 80125b8:	9300      	str	r3, [sp, #0]
 80125ba:	68bb      	ldr	r3, [r7, #8]
 80125bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80125be:	68f8      	ldr	r0, [r7, #12]
 80125c0:	f001 fb61 	bl	8013c86 <xTaskCreate>
 80125c4:	4603      	mov	r3, r0
 80125c6:	2b01      	cmp	r3, #1
 80125c8:	d001      	beq.n	80125ce <osThreadNew+0x11a>
            hTask = NULL;
 80125ca:	2300      	movs	r3, #0
 80125cc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80125ce:	693b      	ldr	r3, [r7, #16]
}
 80125d0:	4618      	mov	r0, r3
 80125d2:	3728      	adds	r7, #40	; 0x28
 80125d4:	46bd      	mov	sp, r7
 80125d6:	bd80      	pop	{r7, pc}

080125d8 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 80125d8:	b480      	push	{r7}
 80125da:	b083      	sub	sp, #12
 80125dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80125de:	f3ef 8305 	mrs	r3, IPSR
 80125e2:	603b      	str	r3, [r7, #0]
  return(result);
 80125e4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	d003      	beq.n	80125f2 <osThreadYield+0x1a>
    stat = osErrorISR;
 80125ea:	f06f 0305 	mvn.w	r3, #5
 80125ee:	607b      	str	r3, [r7, #4]
 80125f0:	e009      	b.n	8012606 <osThreadYield+0x2e>
  } else {
    stat = osOK;
 80125f2:	2300      	movs	r3, #0
 80125f4:	607b      	str	r3, [r7, #4]
    taskYIELD();
 80125f6:	4b07      	ldr	r3, [pc, #28]	; (8012614 <osThreadYield+0x3c>)
 80125f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80125fc:	601a      	str	r2, [r3, #0]
 80125fe:	f3bf 8f4f 	dsb	sy
 8012602:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8012606:	687b      	ldr	r3, [r7, #4]
}
 8012608:	4618      	mov	r0, r3
 801260a:	370c      	adds	r7, #12
 801260c:	46bd      	mov	sp, r7
 801260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012612:	4770      	bx	lr
 8012614:	e000ed04 	.word	0xe000ed04

08012618 <osThreadSuspend>:

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8012618:	b580      	push	{r7, lr}
 801261a:	b086      	sub	sp, #24
 801261c:	af00      	add	r7, sp, #0
 801261e:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012624:	f3ef 8305 	mrs	r3, IPSR
 8012628:	60fb      	str	r3, [r7, #12]
  return(result);
 801262a:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 801262c:	2b00      	cmp	r3, #0
 801262e:	d003      	beq.n	8012638 <osThreadSuspend+0x20>
    stat = osErrorISR;
 8012630:	f06f 0305 	mvn.w	r3, #5
 8012634:	617b      	str	r3, [r7, #20]
 8012636:	e00b      	b.n	8012650 <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 8012638:	693b      	ldr	r3, [r7, #16]
 801263a:	2b00      	cmp	r3, #0
 801263c:	d103      	bne.n	8012646 <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 801263e:	f06f 0303 	mvn.w	r3, #3
 8012642:	617b      	str	r3, [r7, #20]
 8012644:	e004      	b.n	8012650 <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 8012646:	2300      	movs	r3, #0
 8012648:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 801264a:	6938      	ldr	r0, [r7, #16]
 801264c:	f001 fd06 	bl	801405c <vTaskSuspend>
  }

  return (stat);
 8012650:	697b      	ldr	r3, [r7, #20]
}
 8012652:	4618      	mov	r0, r3
 8012654:	3718      	adds	r7, #24
 8012656:	46bd      	mov	sp, r7
 8012658:	bd80      	pop	{r7, pc}

0801265a <osThreadExit>:

  return (stat);
}
#endif /* (configUSE_OS2_THREAD_SUSPEND_RESUME == 1) */

__NO_RETURN void osThreadExit (void) {
 801265a:	b580      	push	{r7, lr}
 801265c:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 801265e:	2000      	movs	r0, #0
 8012660:	f001 fc56 	bl	8013f10 <vTaskDelete>
#endif
  for (;;);
 8012664:	e7fe      	b.n	8012664 <osThreadExit+0xa>

08012666 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8012666:	b580      	push	{r7, lr}
 8012668:	b084      	sub	sp, #16
 801266a:	af00      	add	r7, sp, #0
 801266c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801266e:	f3ef 8305 	mrs	r3, IPSR
 8012672:	60bb      	str	r3, [r7, #8]
  return(result);
 8012674:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012676:	2b00      	cmp	r3, #0
 8012678:	d003      	beq.n	8012682 <osDelay+0x1c>
    stat = osErrorISR;
 801267a:	f06f 0305 	mvn.w	r3, #5
 801267e:	60fb      	str	r3, [r7, #12]
 8012680:	e007      	b.n	8012692 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8012682:	2300      	movs	r3, #0
 8012684:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	2b00      	cmp	r3, #0
 801268a:	d002      	beq.n	8012692 <osDelay+0x2c>
      vTaskDelay(ticks);
 801268c:	6878      	ldr	r0, [r7, #4]
 801268e:	f001 fcb1 	bl	8013ff4 <vTaskDelay>
    }
  }

  return (stat);
 8012692:	68fb      	ldr	r3, [r7, #12]
}
 8012694:	4618      	mov	r0, r3
 8012696:	3710      	adds	r7, #16
 8012698:	46bd      	mov	sp, r7
 801269a:	bd80      	pop	{r7, pc}

0801269c <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 801269c:	b580      	push	{r7, lr}
 801269e:	b086      	sub	sp, #24
 80126a0:	af00      	add	r7, sp, #0
 80126a2:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 80126a4:	2300      	movs	r3, #0
 80126a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80126a8:	f3ef 8305 	mrs	r3, IPSR
 80126ac:	60fb      	str	r3, [r7, #12]
  return(result);
 80126ae:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	d12d      	bne.n	8012710 <osEventFlagsNew+0x74>
    mem = -1;
 80126b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80126b8:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	2b00      	cmp	r3, #0
 80126be:	d015      	beq.n	80126ec <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	689b      	ldr	r3, [r3, #8]
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	d006      	beq.n	80126d6 <osEventFlagsNew+0x3a>
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	68db      	ldr	r3, [r3, #12]
 80126cc:	2b1f      	cmp	r3, #31
 80126ce:	d902      	bls.n	80126d6 <osEventFlagsNew+0x3a>
        mem = 1;
 80126d0:	2301      	movs	r3, #1
 80126d2:	613b      	str	r3, [r7, #16]
 80126d4:	e00c      	b.n	80126f0 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	689b      	ldr	r3, [r3, #8]
 80126da:	2b00      	cmp	r3, #0
 80126dc:	d108      	bne.n	80126f0 <osEventFlagsNew+0x54>
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	68db      	ldr	r3, [r3, #12]
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d104      	bne.n	80126f0 <osEventFlagsNew+0x54>
          mem = 0;
 80126e6:	2300      	movs	r3, #0
 80126e8:	613b      	str	r3, [r7, #16]
 80126ea:	e001      	b.n	80126f0 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 80126ec:	2300      	movs	r3, #0
 80126ee:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 80126f0:	693b      	ldr	r3, [r7, #16]
 80126f2:	2b01      	cmp	r3, #1
 80126f4:	d106      	bne.n	8012704 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	689b      	ldr	r3, [r3, #8]
 80126fa:	4618      	mov	r0, r3
 80126fc:	f000 fa1e 	bl	8012b3c <xEventGroupCreateStatic>
 8012700:	6178      	str	r0, [r7, #20]
 8012702:	e005      	b.n	8012710 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8012704:	693b      	ldr	r3, [r7, #16]
 8012706:	2b00      	cmp	r3, #0
 8012708:	d102      	bne.n	8012710 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 801270a:	f000 fa4e 	bl	8012baa <xEventGroupCreate>
 801270e:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8012710:	697b      	ldr	r3, [r7, #20]
}
 8012712:	4618      	mov	r0, r3
 8012714:	3718      	adds	r7, #24
 8012716:	46bd      	mov	sp, r7
 8012718:	bd80      	pop	{r7, pc}
	...

0801271c <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 801271c:	b580      	push	{r7, lr}
 801271e:	b086      	sub	sp, #24
 8012720:	af00      	add	r7, sp, #0
 8012722:	6078      	str	r0, [r7, #4]
 8012724:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 801272a:	693b      	ldr	r3, [r7, #16]
 801272c:	2b00      	cmp	r3, #0
 801272e:	d004      	beq.n	801273a <osEventFlagsSet+0x1e>
 8012730:	683b      	ldr	r3, [r7, #0]
 8012732:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8012736:	2b00      	cmp	r3, #0
 8012738:	d003      	beq.n	8012742 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 801273a:	f06f 0303 	mvn.w	r3, #3
 801273e:	617b      	str	r3, [r7, #20]
 8012740:	e028      	b.n	8012794 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012742:	f3ef 8305 	mrs	r3, IPSR
 8012746:	60fb      	str	r3, [r7, #12]
  return(result);
 8012748:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 801274a:	2b00      	cmp	r3, #0
 801274c:	d01d      	beq.n	801278a <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 801274e:	2300      	movs	r3, #0
 8012750:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8012752:	f107 0308 	add.w	r3, r7, #8
 8012756:	461a      	mov	r2, r3
 8012758:	6839      	ldr	r1, [r7, #0]
 801275a:	6938      	ldr	r0, [r7, #16]
 801275c:	f000 fbc8 	bl	8012ef0 <xEventGroupSetBitsFromISR>
 8012760:	4603      	mov	r3, r0
 8012762:	2b00      	cmp	r3, #0
 8012764:	d103      	bne.n	801276e <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8012766:	f06f 0302 	mvn.w	r3, #2
 801276a:	617b      	str	r3, [r7, #20]
 801276c:	e012      	b.n	8012794 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 801276e:	683b      	ldr	r3, [r7, #0]
 8012770:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8012772:	68bb      	ldr	r3, [r7, #8]
 8012774:	2b00      	cmp	r3, #0
 8012776:	d00d      	beq.n	8012794 <osEventFlagsSet+0x78>
 8012778:	4b09      	ldr	r3, [pc, #36]	; (80127a0 <osEventFlagsSet+0x84>)
 801277a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801277e:	601a      	str	r2, [r3, #0]
 8012780:	f3bf 8f4f 	dsb	sy
 8012784:	f3bf 8f6f 	isb	sy
 8012788:	e004      	b.n	8012794 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 801278a:	6839      	ldr	r1, [r7, #0]
 801278c:	6938      	ldr	r0, [r7, #16]
 801278e:	f000 faf5 	bl	8012d7c <xEventGroupSetBits>
 8012792:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8012794:	697b      	ldr	r3, [r7, #20]
}
 8012796:	4618      	mov	r0, r3
 8012798:	3718      	adds	r7, #24
 801279a:	46bd      	mov	sp, r7
 801279c:	bd80      	pop	{r7, pc}
 801279e:	bf00      	nop
 80127a0:	e000ed04 	.word	0xe000ed04

080127a4 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 80127a4:	b580      	push	{r7, lr}
 80127a6:	b08c      	sub	sp, #48	; 0x30
 80127a8:	af02      	add	r7, sp, #8
 80127aa:	60f8      	str	r0, [r7, #12]
 80127ac:	60b9      	str	r1, [r7, #8]
 80127ae:	607a      	str	r2, [r7, #4]
 80127b0:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80127b2:	68fb      	ldr	r3, [r7, #12]
 80127b4:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80127b6:	69bb      	ldr	r3, [r7, #24]
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	d004      	beq.n	80127c6 <osEventFlagsWait+0x22>
 80127bc:	68bb      	ldr	r3, [r7, #8]
 80127be:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80127c2:	2b00      	cmp	r3, #0
 80127c4:	d003      	beq.n	80127ce <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 80127c6:	f06f 0303 	mvn.w	r3, #3
 80127ca:	61fb      	str	r3, [r7, #28]
 80127cc:	e04b      	b.n	8012866 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80127ce:	f3ef 8305 	mrs	r3, IPSR
 80127d2:	617b      	str	r3, [r7, #20]
  return(result);
 80127d4:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d003      	beq.n	80127e2 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 80127da:	f06f 0305 	mvn.w	r3, #5
 80127de:	61fb      	str	r3, [r7, #28]
 80127e0:	e041      	b.n	8012866 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	f003 0301 	and.w	r3, r3, #1
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d002      	beq.n	80127f2 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 80127ec:	2301      	movs	r3, #1
 80127ee:	627b      	str	r3, [r7, #36]	; 0x24
 80127f0:	e001      	b.n	80127f6 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 80127f2:	2300      	movs	r3, #0
 80127f4:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	f003 0302 	and.w	r3, r3, #2
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	d002      	beq.n	8012806 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8012800:	2300      	movs	r3, #0
 8012802:	623b      	str	r3, [r7, #32]
 8012804:	e001      	b.n	801280a <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8012806:	2301      	movs	r3, #1
 8012808:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 801280a:	683b      	ldr	r3, [r7, #0]
 801280c:	9300      	str	r3, [sp, #0]
 801280e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012810:	6a3a      	ldr	r2, [r7, #32]
 8012812:	68b9      	ldr	r1, [r7, #8]
 8012814:	69b8      	ldr	r0, [r7, #24]
 8012816:	f000 f9e3 	bl	8012be0 <xEventGroupWaitBits>
 801281a:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	f003 0301 	and.w	r3, r3, #1
 8012822:	2b00      	cmp	r3, #0
 8012824:	d010      	beq.n	8012848 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8012826:	68ba      	ldr	r2, [r7, #8]
 8012828:	69fb      	ldr	r3, [r7, #28]
 801282a:	4013      	ands	r3, r2
 801282c:	68ba      	ldr	r2, [r7, #8]
 801282e:	429a      	cmp	r2, r3
 8012830:	d019      	beq.n	8012866 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8012832:	683b      	ldr	r3, [r7, #0]
 8012834:	2b00      	cmp	r3, #0
 8012836:	d003      	beq.n	8012840 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8012838:	f06f 0301 	mvn.w	r3, #1
 801283c:	61fb      	str	r3, [r7, #28]
 801283e:	e012      	b.n	8012866 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8012840:	f06f 0302 	mvn.w	r3, #2
 8012844:	61fb      	str	r3, [r7, #28]
 8012846:	e00e      	b.n	8012866 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8012848:	68ba      	ldr	r2, [r7, #8]
 801284a:	69fb      	ldr	r3, [r7, #28]
 801284c:	4013      	ands	r3, r2
 801284e:	2b00      	cmp	r3, #0
 8012850:	d109      	bne.n	8012866 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8012852:	683b      	ldr	r3, [r7, #0]
 8012854:	2b00      	cmp	r3, #0
 8012856:	d003      	beq.n	8012860 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8012858:	f06f 0301 	mvn.w	r3, #1
 801285c:	61fb      	str	r3, [r7, #28]
 801285e:	e002      	b.n	8012866 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8012860:	f06f 0302 	mvn.w	r3, #2
 8012864:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8012866:	69fb      	ldr	r3, [r7, #28]
}
 8012868:	4618      	mov	r0, r3
 801286a:	3728      	adds	r7, #40	; 0x28
 801286c:	46bd      	mov	sp, r7
 801286e:	bd80      	pop	{r7, pc}

08012870 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8012870:	b580      	push	{r7, lr}
 8012872:	b08a      	sub	sp, #40	; 0x28
 8012874:	af02      	add	r7, sp, #8
 8012876:	60f8      	str	r0, [r7, #12]
 8012878:	60b9      	str	r1, [r7, #8]
 801287a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 801287c:	2300      	movs	r3, #0
 801287e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012880:	f3ef 8305 	mrs	r3, IPSR
 8012884:	613b      	str	r3, [r7, #16]
  return(result);
 8012886:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8012888:	2b00      	cmp	r3, #0
 801288a:	d15f      	bne.n	801294c <osMessageQueueNew+0xdc>
 801288c:	68fb      	ldr	r3, [r7, #12]
 801288e:	2b00      	cmp	r3, #0
 8012890:	d05c      	beq.n	801294c <osMessageQueueNew+0xdc>
 8012892:	68bb      	ldr	r3, [r7, #8]
 8012894:	2b00      	cmp	r3, #0
 8012896:	d059      	beq.n	801294c <osMessageQueueNew+0xdc>
    mem = -1;
 8012898:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801289c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d029      	beq.n	80128f8 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	689b      	ldr	r3, [r3, #8]
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	d012      	beq.n	80128d2 <osMessageQueueNew+0x62>
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	68db      	ldr	r3, [r3, #12]
 80128b0:	2b4f      	cmp	r3, #79	; 0x4f
 80128b2:	d90e      	bls.n	80128d2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d00a      	beq.n	80128d2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	695a      	ldr	r2, [r3, #20]
 80128c0:	68fb      	ldr	r3, [r7, #12]
 80128c2:	68b9      	ldr	r1, [r7, #8]
 80128c4:	fb01 f303 	mul.w	r3, r1, r3
 80128c8:	429a      	cmp	r2, r3
 80128ca:	d302      	bcc.n	80128d2 <osMessageQueueNew+0x62>
        mem = 1;
 80128cc:	2301      	movs	r3, #1
 80128ce:	61bb      	str	r3, [r7, #24]
 80128d0:	e014      	b.n	80128fc <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	689b      	ldr	r3, [r3, #8]
 80128d6:	2b00      	cmp	r3, #0
 80128d8:	d110      	bne.n	80128fc <osMessageQueueNew+0x8c>
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	68db      	ldr	r3, [r3, #12]
 80128de:	2b00      	cmp	r3, #0
 80128e0:	d10c      	bne.n	80128fc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	d108      	bne.n	80128fc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	695b      	ldr	r3, [r3, #20]
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d104      	bne.n	80128fc <osMessageQueueNew+0x8c>
          mem = 0;
 80128f2:	2300      	movs	r3, #0
 80128f4:	61bb      	str	r3, [r7, #24]
 80128f6:	e001      	b.n	80128fc <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80128f8:	2300      	movs	r3, #0
 80128fa:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80128fc:	69bb      	ldr	r3, [r7, #24]
 80128fe:	2b01      	cmp	r3, #1
 8012900:	d10b      	bne.n	801291a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	691a      	ldr	r2, [r3, #16]
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	689b      	ldr	r3, [r3, #8]
 801290a:	2100      	movs	r1, #0
 801290c:	9100      	str	r1, [sp, #0]
 801290e:	68b9      	ldr	r1, [r7, #8]
 8012910:	68f8      	ldr	r0, [r7, #12]
 8012912:	f000 fc1d 	bl	8013150 <xQueueGenericCreateStatic>
 8012916:	61f8      	str	r0, [r7, #28]
 8012918:	e008      	b.n	801292c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 801291a:	69bb      	ldr	r3, [r7, #24]
 801291c:	2b00      	cmp	r3, #0
 801291e:	d105      	bne.n	801292c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8012920:	2200      	movs	r2, #0
 8012922:	68b9      	ldr	r1, [r7, #8]
 8012924:	68f8      	ldr	r0, [r7, #12]
 8012926:	f000 fc8b 	bl	8013240 <xQueueGenericCreate>
 801292a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 801292c:	69fb      	ldr	r3, [r7, #28]
 801292e:	2b00      	cmp	r3, #0
 8012930:	d00c      	beq.n	801294c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	2b00      	cmp	r3, #0
 8012936:	d003      	beq.n	8012940 <osMessageQueueNew+0xd0>
        name = attr->name;
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	681b      	ldr	r3, [r3, #0]
 801293c:	617b      	str	r3, [r7, #20]
 801293e:	e001      	b.n	8012944 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8012940:	2300      	movs	r3, #0
 8012942:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8012944:	6979      	ldr	r1, [r7, #20]
 8012946:	69f8      	ldr	r0, [r7, #28]
 8012948:	f001 f8e2 	bl	8013b10 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 801294c:	69fb      	ldr	r3, [r7, #28]
}
 801294e:	4618      	mov	r0, r3
 8012950:	3720      	adds	r7, #32
 8012952:	46bd      	mov	sp, r7
 8012954:	bd80      	pop	{r7, pc}
	...

08012958 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8012958:	b580      	push	{r7, lr}
 801295a:	b088      	sub	sp, #32
 801295c:	af00      	add	r7, sp, #0
 801295e:	60f8      	str	r0, [r7, #12]
 8012960:	60b9      	str	r1, [r7, #8]
 8012962:	603b      	str	r3, [r7, #0]
 8012964:	4613      	mov	r3, r2
 8012966:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8012968:	68fb      	ldr	r3, [r7, #12]
 801296a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 801296c:	2300      	movs	r3, #0
 801296e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012970:	f3ef 8305 	mrs	r3, IPSR
 8012974:	617b      	str	r3, [r7, #20]
  return(result);
 8012976:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8012978:	2b00      	cmp	r3, #0
 801297a:	d028      	beq.n	80129ce <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801297c:	69bb      	ldr	r3, [r7, #24]
 801297e:	2b00      	cmp	r3, #0
 8012980:	d005      	beq.n	801298e <osMessageQueuePut+0x36>
 8012982:	68bb      	ldr	r3, [r7, #8]
 8012984:	2b00      	cmp	r3, #0
 8012986:	d002      	beq.n	801298e <osMessageQueuePut+0x36>
 8012988:	683b      	ldr	r3, [r7, #0]
 801298a:	2b00      	cmp	r3, #0
 801298c:	d003      	beq.n	8012996 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 801298e:	f06f 0303 	mvn.w	r3, #3
 8012992:	61fb      	str	r3, [r7, #28]
 8012994:	e038      	b.n	8012a08 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8012996:	2300      	movs	r3, #0
 8012998:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 801299a:	f107 0210 	add.w	r2, r7, #16
 801299e:	2300      	movs	r3, #0
 80129a0:	68b9      	ldr	r1, [r7, #8]
 80129a2:	69b8      	ldr	r0, [r7, #24]
 80129a4:	f000 fda8 	bl	80134f8 <xQueueGenericSendFromISR>
 80129a8:	4603      	mov	r3, r0
 80129aa:	2b01      	cmp	r3, #1
 80129ac:	d003      	beq.n	80129b6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80129ae:	f06f 0302 	mvn.w	r3, #2
 80129b2:	61fb      	str	r3, [r7, #28]
 80129b4:	e028      	b.n	8012a08 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80129b6:	693b      	ldr	r3, [r7, #16]
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	d025      	beq.n	8012a08 <osMessageQueuePut+0xb0>
 80129bc:	4b15      	ldr	r3, [pc, #84]	; (8012a14 <osMessageQueuePut+0xbc>)
 80129be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80129c2:	601a      	str	r2, [r3, #0]
 80129c4:	f3bf 8f4f 	dsb	sy
 80129c8:	f3bf 8f6f 	isb	sy
 80129cc:	e01c      	b.n	8012a08 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80129ce:	69bb      	ldr	r3, [r7, #24]
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	d002      	beq.n	80129da <osMessageQueuePut+0x82>
 80129d4:	68bb      	ldr	r3, [r7, #8]
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	d103      	bne.n	80129e2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80129da:	f06f 0303 	mvn.w	r3, #3
 80129de:	61fb      	str	r3, [r7, #28]
 80129e0:	e012      	b.n	8012a08 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80129e2:	2300      	movs	r3, #0
 80129e4:	683a      	ldr	r2, [r7, #0]
 80129e6:	68b9      	ldr	r1, [r7, #8]
 80129e8:	69b8      	ldr	r0, [r7, #24]
 80129ea:	f000 fc87 	bl	80132fc <xQueueGenericSend>
 80129ee:	4603      	mov	r3, r0
 80129f0:	2b01      	cmp	r3, #1
 80129f2:	d009      	beq.n	8012a08 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80129f4:	683b      	ldr	r3, [r7, #0]
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	d003      	beq.n	8012a02 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80129fa:	f06f 0301 	mvn.w	r3, #1
 80129fe:	61fb      	str	r3, [r7, #28]
 8012a00:	e002      	b.n	8012a08 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8012a02:	f06f 0302 	mvn.w	r3, #2
 8012a06:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8012a08:	69fb      	ldr	r3, [r7, #28]
}
 8012a0a:	4618      	mov	r0, r3
 8012a0c:	3720      	adds	r7, #32
 8012a0e:	46bd      	mov	sp, r7
 8012a10:	bd80      	pop	{r7, pc}
 8012a12:	bf00      	nop
 8012a14:	e000ed04 	.word	0xe000ed04

08012a18 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8012a18:	b580      	push	{r7, lr}
 8012a1a:	b088      	sub	sp, #32
 8012a1c:	af00      	add	r7, sp, #0
 8012a1e:	60f8      	str	r0, [r7, #12]
 8012a20:	60b9      	str	r1, [r7, #8]
 8012a22:	607a      	str	r2, [r7, #4]
 8012a24:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8012a26:	68fb      	ldr	r3, [r7, #12]
 8012a28:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8012a2a:	2300      	movs	r3, #0
 8012a2c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012a2e:	f3ef 8305 	mrs	r3, IPSR
 8012a32:	617b      	str	r3, [r7, #20]
  return(result);
 8012a34:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d028      	beq.n	8012a8c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012a3a:	69bb      	ldr	r3, [r7, #24]
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	d005      	beq.n	8012a4c <osMessageQueueGet+0x34>
 8012a40:	68bb      	ldr	r3, [r7, #8]
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	d002      	beq.n	8012a4c <osMessageQueueGet+0x34>
 8012a46:	683b      	ldr	r3, [r7, #0]
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d003      	beq.n	8012a54 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8012a4c:	f06f 0303 	mvn.w	r3, #3
 8012a50:	61fb      	str	r3, [r7, #28]
 8012a52:	e037      	b.n	8012ac4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8012a54:	2300      	movs	r3, #0
 8012a56:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8012a58:	f107 0310 	add.w	r3, r7, #16
 8012a5c:	461a      	mov	r2, r3
 8012a5e:	68b9      	ldr	r1, [r7, #8]
 8012a60:	69b8      	ldr	r0, [r7, #24]
 8012a62:	f000 fec5 	bl	80137f0 <xQueueReceiveFromISR>
 8012a66:	4603      	mov	r3, r0
 8012a68:	2b01      	cmp	r3, #1
 8012a6a:	d003      	beq.n	8012a74 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8012a6c:	f06f 0302 	mvn.w	r3, #2
 8012a70:	61fb      	str	r3, [r7, #28]
 8012a72:	e027      	b.n	8012ac4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8012a74:	693b      	ldr	r3, [r7, #16]
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	d024      	beq.n	8012ac4 <osMessageQueueGet+0xac>
 8012a7a:	4b15      	ldr	r3, [pc, #84]	; (8012ad0 <osMessageQueueGet+0xb8>)
 8012a7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012a80:	601a      	str	r2, [r3, #0]
 8012a82:	f3bf 8f4f 	dsb	sy
 8012a86:	f3bf 8f6f 	isb	sy
 8012a8a:	e01b      	b.n	8012ac4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8012a8c:	69bb      	ldr	r3, [r7, #24]
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d002      	beq.n	8012a98 <osMessageQueueGet+0x80>
 8012a92:	68bb      	ldr	r3, [r7, #8]
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	d103      	bne.n	8012aa0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8012a98:	f06f 0303 	mvn.w	r3, #3
 8012a9c:	61fb      	str	r3, [r7, #28]
 8012a9e:	e011      	b.n	8012ac4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8012aa0:	683a      	ldr	r2, [r7, #0]
 8012aa2:	68b9      	ldr	r1, [r7, #8]
 8012aa4:	69b8      	ldr	r0, [r7, #24]
 8012aa6:	f000 fdc3 	bl	8013630 <xQueueReceive>
 8012aaa:	4603      	mov	r3, r0
 8012aac:	2b01      	cmp	r3, #1
 8012aae:	d009      	beq.n	8012ac4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8012ab0:	683b      	ldr	r3, [r7, #0]
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	d003      	beq.n	8012abe <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8012ab6:	f06f 0301 	mvn.w	r3, #1
 8012aba:	61fb      	str	r3, [r7, #28]
 8012abc:	e002      	b.n	8012ac4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8012abe:	f06f 0302 	mvn.w	r3, #2
 8012ac2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8012ac4:	69fb      	ldr	r3, [r7, #28]
}
 8012ac6:	4618      	mov	r0, r3
 8012ac8:	3720      	adds	r7, #32
 8012aca:	46bd      	mov	sp, r7
 8012acc:	bd80      	pop	{r7, pc}
 8012ace:	bf00      	nop
 8012ad0:	e000ed04 	.word	0xe000ed04

08012ad4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8012ad4:	b480      	push	{r7}
 8012ad6:	b085      	sub	sp, #20
 8012ad8:	af00      	add	r7, sp, #0
 8012ada:	60f8      	str	r0, [r7, #12]
 8012adc:	60b9      	str	r1, [r7, #8]
 8012ade:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8012ae0:	68fb      	ldr	r3, [r7, #12]
 8012ae2:	4a07      	ldr	r2, [pc, #28]	; (8012b00 <vApplicationGetIdleTaskMemory+0x2c>)
 8012ae4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8012ae6:	68bb      	ldr	r3, [r7, #8]
 8012ae8:	4a06      	ldr	r2, [pc, #24]	; (8012b04 <vApplicationGetIdleTaskMemory+0x30>)
 8012aea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	2280      	movs	r2, #128	; 0x80
 8012af0:	601a      	str	r2, [r3, #0]
}
 8012af2:	bf00      	nop
 8012af4:	3714      	adds	r7, #20
 8012af6:	46bd      	mov	sp, r7
 8012af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012afc:	4770      	bx	lr
 8012afe:	bf00      	nop
 8012b00:	24001110 	.word	0x24001110
 8012b04:	2400116c 	.word	0x2400116c

08012b08 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8012b08:	b480      	push	{r7}
 8012b0a:	b085      	sub	sp, #20
 8012b0c:	af00      	add	r7, sp, #0
 8012b0e:	60f8      	str	r0, [r7, #12]
 8012b10:	60b9      	str	r1, [r7, #8]
 8012b12:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8012b14:	68fb      	ldr	r3, [r7, #12]
 8012b16:	4a07      	ldr	r2, [pc, #28]	; (8012b34 <vApplicationGetTimerTaskMemory+0x2c>)
 8012b18:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8012b1a:	68bb      	ldr	r3, [r7, #8]
 8012b1c:	4a06      	ldr	r2, [pc, #24]	; (8012b38 <vApplicationGetTimerTaskMemory+0x30>)
 8012b1e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012b26:	601a      	str	r2, [r3, #0]
}
 8012b28:	bf00      	nop
 8012b2a:	3714      	adds	r7, #20
 8012b2c:	46bd      	mov	sp, r7
 8012b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b32:	4770      	bx	lr
 8012b34:	2400136c 	.word	0x2400136c
 8012b38:	240013c8 	.word	0x240013c8

08012b3c <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8012b3c:	b580      	push	{r7, lr}
 8012b3e:	b086      	sub	sp, #24
 8012b40:	af00      	add	r7, sp, #0
 8012b42:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d10a      	bne.n	8012b60 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8012b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b4e:	f383 8811 	msr	BASEPRI, r3
 8012b52:	f3bf 8f6f 	isb	sy
 8012b56:	f3bf 8f4f 	dsb	sy
 8012b5a:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8012b5c:	bf00      	nop
 8012b5e:	e7fe      	b.n	8012b5e <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8012b60:	2320      	movs	r3, #32
 8012b62:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8012b64:	68bb      	ldr	r3, [r7, #8]
 8012b66:	2b20      	cmp	r3, #32
 8012b68:	d00a      	beq.n	8012b80 <xEventGroupCreateStatic+0x44>
	__asm volatile
 8012b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b6e:	f383 8811 	msr	BASEPRI, r3
 8012b72:	f3bf 8f6f 	isb	sy
 8012b76:	f3bf 8f4f 	dsb	sy
 8012b7a:	60fb      	str	r3, [r7, #12]
}
 8012b7c:	bf00      	nop
 8012b7e:	e7fe      	b.n	8012b7e <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8012b84:	697b      	ldr	r3, [r7, #20]
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	d00a      	beq.n	8012ba0 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8012b8a:	697b      	ldr	r3, [r7, #20]
 8012b8c:	2200      	movs	r2, #0
 8012b8e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8012b90:	697b      	ldr	r3, [r7, #20]
 8012b92:	3304      	adds	r3, #4
 8012b94:	4618      	mov	r0, r3
 8012b96:	f000 f9bf 	bl	8012f18 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8012b9a:	697b      	ldr	r3, [r7, #20]
 8012b9c:	2201      	movs	r2, #1
 8012b9e:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8012ba0:	697b      	ldr	r3, [r7, #20]
	}
 8012ba2:	4618      	mov	r0, r3
 8012ba4:	3718      	adds	r7, #24
 8012ba6:	46bd      	mov	sp, r7
 8012ba8:	bd80      	pop	{r7, pc}

08012baa <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8012baa:	b580      	push	{r7, lr}
 8012bac:	b082      	sub	sp, #8
 8012bae:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8012bb0:	2020      	movs	r0, #32
 8012bb2:	f002 ff09 	bl	80159c8 <pvPortMalloc>
 8012bb6:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	d00a      	beq.n	8012bd4 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	2200      	movs	r2, #0
 8012bc2:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	3304      	adds	r3, #4
 8012bc8:	4618      	mov	r0, r3
 8012bca:	f000 f9a5 	bl	8012f18 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	2200      	movs	r2, #0
 8012bd2:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8012bd4:	687b      	ldr	r3, [r7, #4]
	}
 8012bd6:	4618      	mov	r0, r3
 8012bd8:	3708      	adds	r7, #8
 8012bda:	46bd      	mov	sp, r7
 8012bdc:	bd80      	pop	{r7, pc}
	...

08012be0 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8012be0:	b580      	push	{r7, lr}
 8012be2:	b090      	sub	sp, #64	; 0x40
 8012be4:	af00      	add	r7, sp, #0
 8012be6:	60f8      	str	r0, [r7, #12]
 8012be8:	60b9      	str	r1, [r7, #8]
 8012bea:	607a      	str	r2, [r7, #4]
 8012bec:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8012bee:	68fb      	ldr	r3, [r7, #12]
 8012bf0:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8012bf2:	2300      	movs	r3, #0
 8012bf4:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8012bf6:	2300      	movs	r3, #0
 8012bf8:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8012bfa:	68fb      	ldr	r3, [r7, #12]
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	d10a      	bne.n	8012c16 <xEventGroupWaitBits+0x36>
	__asm volatile
 8012c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c04:	f383 8811 	msr	BASEPRI, r3
 8012c08:	f3bf 8f6f 	isb	sy
 8012c0c:	f3bf 8f4f 	dsb	sy
 8012c10:	623b      	str	r3, [r7, #32]
}
 8012c12:	bf00      	nop
 8012c14:	e7fe      	b.n	8012c14 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8012c16:	68bb      	ldr	r3, [r7, #8]
 8012c18:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8012c1c:	2b00      	cmp	r3, #0
 8012c1e:	d00a      	beq.n	8012c36 <xEventGroupWaitBits+0x56>
	__asm volatile
 8012c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c24:	f383 8811 	msr	BASEPRI, r3
 8012c28:	f3bf 8f6f 	isb	sy
 8012c2c:	f3bf 8f4f 	dsb	sy
 8012c30:	61fb      	str	r3, [r7, #28]
}
 8012c32:	bf00      	nop
 8012c34:	e7fe      	b.n	8012c34 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8012c36:	68bb      	ldr	r3, [r7, #8]
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	d10a      	bne.n	8012c52 <xEventGroupWaitBits+0x72>
	__asm volatile
 8012c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c40:	f383 8811 	msr	BASEPRI, r3
 8012c44:	f3bf 8f6f 	isb	sy
 8012c48:	f3bf 8f4f 	dsb	sy
 8012c4c:	61bb      	str	r3, [r7, #24]
}
 8012c4e:	bf00      	nop
 8012c50:	e7fe      	b.n	8012c50 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012c52:	f002 f803 	bl	8014c5c <xTaskGetSchedulerState>
 8012c56:	4603      	mov	r3, r0
 8012c58:	2b00      	cmp	r3, #0
 8012c5a:	d102      	bne.n	8012c62 <xEventGroupWaitBits+0x82>
 8012c5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	d101      	bne.n	8012c66 <xEventGroupWaitBits+0x86>
 8012c62:	2301      	movs	r3, #1
 8012c64:	e000      	b.n	8012c68 <xEventGroupWaitBits+0x88>
 8012c66:	2300      	movs	r3, #0
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	d10a      	bne.n	8012c82 <xEventGroupWaitBits+0xa2>
	__asm volatile
 8012c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c70:	f383 8811 	msr	BASEPRI, r3
 8012c74:	f3bf 8f6f 	isb	sy
 8012c78:	f3bf 8f4f 	dsb	sy
 8012c7c:	617b      	str	r3, [r7, #20]
}
 8012c7e:	bf00      	nop
 8012c80:	e7fe      	b.n	8012c80 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8012c82:	f001 fb6b 	bl	801435c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8012c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c88:	681b      	ldr	r3, [r3, #0]
 8012c8a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8012c8c:	683a      	ldr	r2, [r7, #0]
 8012c8e:	68b9      	ldr	r1, [r7, #8]
 8012c90:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012c92:	f000 f90b 	bl	8012eac <prvTestWaitCondition>
 8012c96:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8012c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c9a:	2b00      	cmp	r3, #0
 8012c9c:	d00e      	beq.n	8012cbc <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8012c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8012ca2:	2300      	movs	r3, #0
 8012ca4:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	d028      	beq.n	8012cfe <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8012cac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012cae:	681a      	ldr	r2, [r3, #0]
 8012cb0:	68bb      	ldr	r3, [r7, #8]
 8012cb2:	43db      	mvns	r3, r3
 8012cb4:	401a      	ands	r2, r3
 8012cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012cb8:	601a      	str	r2, [r3, #0]
 8012cba:	e020      	b.n	8012cfe <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8012cbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	d104      	bne.n	8012ccc <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8012cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8012cc6:	2301      	movs	r3, #1
 8012cc8:	633b      	str	r3, [r7, #48]	; 0x30
 8012cca:	e018      	b.n	8012cfe <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	2b00      	cmp	r3, #0
 8012cd0:	d003      	beq.n	8012cda <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8012cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cd4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8012cd8:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8012cda:	683b      	ldr	r3, [r7, #0]
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d003      	beq.n	8012ce8 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8012ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ce2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8012ce6:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8012ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012cea:	1d18      	adds	r0, r3, #4
 8012cec:	68ba      	ldr	r2, [r7, #8]
 8012cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cf0:	4313      	orrs	r3, r2
 8012cf2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012cf4:	4619      	mov	r1, r3
 8012cf6:	f001 fd29 	bl	801474c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8012cfa:	2300      	movs	r3, #0
 8012cfc:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8012cfe:	f001 fb3b 	bl	8014378 <xTaskResumeAll>
 8012d02:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8012d04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	d031      	beq.n	8012d6e <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8012d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d0c:	2b00      	cmp	r3, #0
 8012d0e:	d107      	bne.n	8012d20 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8012d10:	4b19      	ldr	r3, [pc, #100]	; (8012d78 <xEventGroupWaitBits+0x198>)
 8012d12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012d16:	601a      	str	r2, [r3, #0]
 8012d18:	f3bf 8f4f 	dsb	sy
 8012d1c:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8012d20:	f002 f828 	bl	8014d74 <uxTaskResetEventItemValue>
 8012d24:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8012d26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012d28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012d2c:	2b00      	cmp	r3, #0
 8012d2e:	d11a      	bne.n	8012d66 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8012d30:	f002 fd28 	bl	8015784 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8012d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d36:	681b      	ldr	r3, [r3, #0]
 8012d38:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8012d3a:	683a      	ldr	r2, [r7, #0]
 8012d3c:	68b9      	ldr	r1, [r7, #8]
 8012d3e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012d40:	f000 f8b4 	bl	8012eac <prvTestWaitCondition>
 8012d44:	4603      	mov	r3, r0
 8012d46:	2b00      	cmp	r3, #0
 8012d48:	d009      	beq.n	8012d5e <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d006      	beq.n	8012d5e <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8012d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d52:	681a      	ldr	r2, [r3, #0]
 8012d54:	68bb      	ldr	r3, [r7, #8]
 8012d56:	43db      	mvns	r3, r3
 8012d58:	401a      	ands	r2, r3
 8012d5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d5c:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8012d5e:	2301      	movs	r3, #1
 8012d60:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8012d62:	f002 fd3f 	bl	80157e4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8012d66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012d68:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8012d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8012d6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8012d70:	4618      	mov	r0, r3
 8012d72:	3740      	adds	r7, #64	; 0x40
 8012d74:	46bd      	mov	sp, r7
 8012d76:	bd80      	pop	{r7, pc}
 8012d78:	e000ed04 	.word	0xe000ed04

08012d7c <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8012d7c:	b580      	push	{r7, lr}
 8012d7e:	b08e      	sub	sp, #56	; 0x38
 8012d80:	af00      	add	r7, sp, #0
 8012d82:	6078      	str	r0, [r7, #4]
 8012d84:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8012d86:	2300      	movs	r3, #0
 8012d88:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8012d8e:	2300      	movs	r3, #0
 8012d90:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	d10a      	bne.n	8012dae <xEventGroupSetBits+0x32>
	__asm volatile
 8012d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d9c:	f383 8811 	msr	BASEPRI, r3
 8012da0:	f3bf 8f6f 	isb	sy
 8012da4:	f3bf 8f4f 	dsb	sy
 8012da8:	613b      	str	r3, [r7, #16]
}
 8012daa:	bf00      	nop
 8012dac:	e7fe      	b.n	8012dac <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8012dae:	683b      	ldr	r3, [r7, #0]
 8012db0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	d00a      	beq.n	8012dce <xEventGroupSetBits+0x52>
	__asm volatile
 8012db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012dbc:	f383 8811 	msr	BASEPRI, r3
 8012dc0:	f3bf 8f6f 	isb	sy
 8012dc4:	f3bf 8f4f 	dsb	sy
 8012dc8:	60fb      	str	r3, [r7, #12]
}
 8012dca:	bf00      	nop
 8012dcc:	e7fe      	b.n	8012dcc <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8012dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012dd0:	3304      	adds	r3, #4
 8012dd2:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dd6:	3308      	adds	r3, #8
 8012dd8:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8012dda:	f001 fabf 	bl	801435c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8012dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012de0:	68db      	ldr	r3, [r3, #12]
 8012de2:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8012de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012de6:	681a      	ldr	r2, [r3, #0]
 8012de8:	683b      	ldr	r3, [r7, #0]
 8012dea:	431a      	orrs	r2, r3
 8012dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012dee:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8012df0:	e03c      	b.n	8012e6c <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8012df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012df4:	685b      	ldr	r3, [r3, #4]
 8012df6:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8012df8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012dfa:	681b      	ldr	r3, [r3, #0]
 8012dfc:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8012dfe:	2300      	movs	r3, #0
 8012e00:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8012e02:	69bb      	ldr	r3, [r7, #24]
 8012e04:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8012e08:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8012e0a:	69bb      	ldr	r3, [r7, #24]
 8012e0c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8012e10:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8012e12:	697b      	ldr	r3, [r7, #20]
 8012e14:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8012e18:	2b00      	cmp	r3, #0
 8012e1a:	d108      	bne.n	8012e2e <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8012e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e1e:	681a      	ldr	r2, [r3, #0]
 8012e20:	69bb      	ldr	r3, [r7, #24]
 8012e22:	4013      	ands	r3, r2
 8012e24:	2b00      	cmp	r3, #0
 8012e26:	d00b      	beq.n	8012e40 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8012e28:	2301      	movs	r3, #1
 8012e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012e2c:	e008      	b.n	8012e40 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8012e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e30:	681a      	ldr	r2, [r3, #0]
 8012e32:	69bb      	ldr	r3, [r7, #24]
 8012e34:	4013      	ands	r3, r2
 8012e36:	69ba      	ldr	r2, [r7, #24]
 8012e38:	429a      	cmp	r2, r3
 8012e3a:	d101      	bne.n	8012e40 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8012e3c:	2301      	movs	r3, #1
 8012e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8012e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	d010      	beq.n	8012e68 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8012e46:	697b      	ldr	r3, [r7, #20]
 8012e48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012e4c:	2b00      	cmp	r3, #0
 8012e4e:	d003      	beq.n	8012e58 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8012e50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012e52:	69bb      	ldr	r3, [r7, #24]
 8012e54:	4313      	orrs	r3, r2
 8012e56:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8012e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e5a:	681b      	ldr	r3, [r3, #0]
 8012e5c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8012e60:	4619      	mov	r1, r3
 8012e62:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8012e64:	f001 fd3e 	bl	80148e4 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8012e68:	69fb      	ldr	r3, [r7, #28]
 8012e6a:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8012e6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012e6e:	6a3b      	ldr	r3, [r7, #32]
 8012e70:	429a      	cmp	r2, r3
 8012e72:	d1be      	bne.n	8012df2 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8012e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e76:	681a      	ldr	r2, [r3, #0]
 8012e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e7a:	43db      	mvns	r3, r3
 8012e7c:	401a      	ands	r2, r3
 8012e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e80:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8012e82:	f001 fa79 	bl	8014378 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8012e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e88:	681b      	ldr	r3, [r3, #0]
}
 8012e8a:	4618      	mov	r0, r3
 8012e8c:	3738      	adds	r7, #56	; 0x38
 8012e8e:	46bd      	mov	sp, r7
 8012e90:	bd80      	pop	{r7, pc}

08012e92 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8012e92:	b580      	push	{r7, lr}
 8012e94:	b082      	sub	sp, #8
 8012e96:	af00      	add	r7, sp, #0
 8012e98:	6078      	str	r0, [r7, #4]
 8012e9a:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8012e9c:	6839      	ldr	r1, [r7, #0]
 8012e9e:	6878      	ldr	r0, [r7, #4]
 8012ea0:	f7ff ff6c 	bl	8012d7c <xEventGroupSetBits>
}
 8012ea4:	bf00      	nop
 8012ea6:	3708      	adds	r7, #8
 8012ea8:	46bd      	mov	sp, r7
 8012eaa:	bd80      	pop	{r7, pc}

08012eac <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8012eac:	b480      	push	{r7}
 8012eae:	b087      	sub	sp, #28
 8012eb0:	af00      	add	r7, sp, #0
 8012eb2:	60f8      	str	r0, [r7, #12]
 8012eb4:	60b9      	str	r1, [r7, #8]
 8012eb6:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8012eb8:	2300      	movs	r3, #0
 8012eba:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	2b00      	cmp	r3, #0
 8012ec0:	d107      	bne.n	8012ed2 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8012ec2:	68fa      	ldr	r2, [r7, #12]
 8012ec4:	68bb      	ldr	r3, [r7, #8]
 8012ec6:	4013      	ands	r3, r2
 8012ec8:	2b00      	cmp	r3, #0
 8012eca:	d00a      	beq.n	8012ee2 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8012ecc:	2301      	movs	r3, #1
 8012ece:	617b      	str	r3, [r7, #20]
 8012ed0:	e007      	b.n	8012ee2 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8012ed2:	68fa      	ldr	r2, [r7, #12]
 8012ed4:	68bb      	ldr	r3, [r7, #8]
 8012ed6:	4013      	ands	r3, r2
 8012ed8:	68ba      	ldr	r2, [r7, #8]
 8012eda:	429a      	cmp	r2, r3
 8012edc:	d101      	bne.n	8012ee2 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8012ede:	2301      	movs	r3, #1
 8012ee0:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8012ee2:	697b      	ldr	r3, [r7, #20]
}
 8012ee4:	4618      	mov	r0, r3
 8012ee6:	371c      	adds	r7, #28
 8012ee8:	46bd      	mov	sp, r7
 8012eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eee:	4770      	bx	lr

08012ef0 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8012ef0:	b580      	push	{r7, lr}
 8012ef2:	b086      	sub	sp, #24
 8012ef4:	af00      	add	r7, sp, #0
 8012ef6:	60f8      	str	r0, [r7, #12]
 8012ef8:	60b9      	str	r1, [r7, #8]
 8012efa:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	68ba      	ldr	r2, [r7, #8]
 8012f00:	68f9      	ldr	r1, [r7, #12]
 8012f02:	4804      	ldr	r0, [pc, #16]	; (8012f14 <xEventGroupSetBitsFromISR+0x24>)
 8012f04:	f002 faf0 	bl	80154e8 <xTimerPendFunctionCallFromISR>
 8012f08:	6178      	str	r0, [r7, #20]

		return xReturn;
 8012f0a:	697b      	ldr	r3, [r7, #20]
	}
 8012f0c:	4618      	mov	r0, r3
 8012f0e:	3718      	adds	r7, #24
 8012f10:	46bd      	mov	sp, r7
 8012f12:	bd80      	pop	{r7, pc}
 8012f14:	08012e93 	.word	0x08012e93

08012f18 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8012f18:	b480      	push	{r7}
 8012f1a:	b083      	sub	sp, #12
 8012f1c:	af00      	add	r7, sp, #0
 8012f1e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	f103 0208 	add.w	r2, r3, #8
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012f30:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	f103 0208 	add.w	r2, r3, #8
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	f103 0208 	add.w	r2, r3, #8
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	2200      	movs	r2, #0
 8012f4a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8012f4c:	bf00      	nop
 8012f4e:	370c      	adds	r7, #12
 8012f50:	46bd      	mov	sp, r7
 8012f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f56:	4770      	bx	lr

08012f58 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8012f58:	b480      	push	{r7}
 8012f5a:	b083      	sub	sp, #12
 8012f5c:	af00      	add	r7, sp, #0
 8012f5e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	2200      	movs	r2, #0
 8012f64:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8012f66:	bf00      	nop
 8012f68:	370c      	adds	r7, #12
 8012f6a:	46bd      	mov	sp, r7
 8012f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f70:	4770      	bx	lr

08012f72 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012f72:	b480      	push	{r7}
 8012f74:	b085      	sub	sp, #20
 8012f76:	af00      	add	r7, sp, #0
 8012f78:	6078      	str	r0, [r7, #4]
 8012f7a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	685b      	ldr	r3, [r3, #4]
 8012f80:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8012f82:	683b      	ldr	r3, [r7, #0]
 8012f84:	68fa      	ldr	r2, [r7, #12]
 8012f86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012f88:	68fb      	ldr	r3, [r7, #12]
 8012f8a:	689a      	ldr	r2, [r3, #8]
 8012f8c:	683b      	ldr	r3, [r7, #0]
 8012f8e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012f90:	68fb      	ldr	r3, [r7, #12]
 8012f92:	689b      	ldr	r3, [r3, #8]
 8012f94:	683a      	ldr	r2, [r7, #0]
 8012f96:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8012f98:	68fb      	ldr	r3, [r7, #12]
 8012f9a:	683a      	ldr	r2, [r7, #0]
 8012f9c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8012f9e:	683b      	ldr	r3, [r7, #0]
 8012fa0:	687a      	ldr	r2, [r7, #4]
 8012fa2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	681b      	ldr	r3, [r3, #0]
 8012fa8:	1c5a      	adds	r2, r3, #1
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	601a      	str	r2, [r3, #0]
}
 8012fae:	bf00      	nop
 8012fb0:	3714      	adds	r7, #20
 8012fb2:	46bd      	mov	sp, r7
 8012fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fb8:	4770      	bx	lr

08012fba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012fba:	b480      	push	{r7}
 8012fbc:	b085      	sub	sp, #20
 8012fbe:	af00      	add	r7, sp, #0
 8012fc0:	6078      	str	r0, [r7, #4]
 8012fc2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8012fc4:	683b      	ldr	r3, [r7, #0]
 8012fc6:	681b      	ldr	r3, [r3, #0]
 8012fc8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8012fca:	68bb      	ldr	r3, [r7, #8]
 8012fcc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012fd0:	d103      	bne.n	8012fda <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	691b      	ldr	r3, [r3, #16]
 8012fd6:	60fb      	str	r3, [r7, #12]
 8012fd8:	e00c      	b.n	8012ff4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	3308      	adds	r3, #8
 8012fde:	60fb      	str	r3, [r7, #12]
 8012fe0:	e002      	b.n	8012fe8 <vListInsert+0x2e>
 8012fe2:	68fb      	ldr	r3, [r7, #12]
 8012fe4:	685b      	ldr	r3, [r3, #4]
 8012fe6:	60fb      	str	r3, [r7, #12]
 8012fe8:	68fb      	ldr	r3, [r7, #12]
 8012fea:	685b      	ldr	r3, [r3, #4]
 8012fec:	681b      	ldr	r3, [r3, #0]
 8012fee:	68ba      	ldr	r2, [r7, #8]
 8012ff0:	429a      	cmp	r2, r3
 8012ff2:	d2f6      	bcs.n	8012fe2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8012ff4:	68fb      	ldr	r3, [r7, #12]
 8012ff6:	685a      	ldr	r2, [r3, #4]
 8012ff8:	683b      	ldr	r3, [r7, #0]
 8012ffa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012ffc:	683b      	ldr	r3, [r7, #0]
 8012ffe:	685b      	ldr	r3, [r3, #4]
 8013000:	683a      	ldr	r2, [r7, #0]
 8013002:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8013004:	683b      	ldr	r3, [r7, #0]
 8013006:	68fa      	ldr	r2, [r7, #12]
 8013008:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801300a:	68fb      	ldr	r3, [r7, #12]
 801300c:	683a      	ldr	r2, [r7, #0]
 801300e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8013010:	683b      	ldr	r3, [r7, #0]
 8013012:	687a      	ldr	r2, [r7, #4]
 8013014:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	681b      	ldr	r3, [r3, #0]
 801301a:	1c5a      	adds	r2, r3, #1
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	601a      	str	r2, [r3, #0]
}
 8013020:	bf00      	nop
 8013022:	3714      	adds	r7, #20
 8013024:	46bd      	mov	sp, r7
 8013026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801302a:	4770      	bx	lr

0801302c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801302c:	b480      	push	{r7}
 801302e:	b085      	sub	sp, #20
 8013030:	af00      	add	r7, sp, #0
 8013032:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	691b      	ldr	r3, [r3, #16]
 8013038:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	685b      	ldr	r3, [r3, #4]
 801303e:	687a      	ldr	r2, [r7, #4]
 8013040:	6892      	ldr	r2, [r2, #8]
 8013042:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	689b      	ldr	r3, [r3, #8]
 8013048:	687a      	ldr	r2, [r7, #4]
 801304a:	6852      	ldr	r2, [r2, #4]
 801304c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801304e:	68fb      	ldr	r3, [r7, #12]
 8013050:	685b      	ldr	r3, [r3, #4]
 8013052:	687a      	ldr	r2, [r7, #4]
 8013054:	429a      	cmp	r2, r3
 8013056:	d103      	bne.n	8013060 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	689a      	ldr	r2, [r3, #8]
 801305c:	68fb      	ldr	r3, [r7, #12]
 801305e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	2200      	movs	r2, #0
 8013064:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8013066:	68fb      	ldr	r3, [r7, #12]
 8013068:	681b      	ldr	r3, [r3, #0]
 801306a:	1e5a      	subs	r2, r3, #1
 801306c:	68fb      	ldr	r3, [r7, #12]
 801306e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8013070:	68fb      	ldr	r3, [r7, #12]
 8013072:	681b      	ldr	r3, [r3, #0]
}
 8013074:	4618      	mov	r0, r3
 8013076:	3714      	adds	r7, #20
 8013078:	46bd      	mov	sp, r7
 801307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801307e:	4770      	bx	lr

08013080 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8013080:	b580      	push	{r7, lr}
 8013082:	b084      	sub	sp, #16
 8013084:	af00      	add	r7, sp, #0
 8013086:	6078      	str	r0, [r7, #4]
 8013088:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801308e:	68fb      	ldr	r3, [r7, #12]
 8013090:	2b00      	cmp	r3, #0
 8013092:	d10a      	bne.n	80130aa <xQueueGenericReset+0x2a>
	__asm volatile
 8013094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013098:	f383 8811 	msr	BASEPRI, r3
 801309c:	f3bf 8f6f 	isb	sy
 80130a0:	f3bf 8f4f 	dsb	sy
 80130a4:	60bb      	str	r3, [r7, #8]
}
 80130a6:	bf00      	nop
 80130a8:	e7fe      	b.n	80130a8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80130aa:	f002 fb6b 	bl	8015784 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80130ae:	68fb      	ldr	r3, [r7, #12]
 80130b0:	681a      	ldr	r2, [r3, #0]
 80130b2:	68fb      	ldr	r3, [r7, #12]
 80130b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80130b6:	68f9      	ldr	r1, [r7, #12]
 80130b8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80130ba:	fb01 f303 	mul.w	r3, r1, r3
 80130be:	441a      	add	r2, r3
 80130c0:	68fb      	ldr	r3, [r7, #12]
 80130c2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80130c4:	68fb      	ldr	r3, [r7, #12]
 80130c6:	2200      	movs	r2, #0
 80130c8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80130ca:	68fb      	ldr	r3, [r7, #12]
 80130cc:	681a      	ldr	r2, [r3, #0]
 80130ce:	68fb      	ldr	r3, [r7, #12]
 80130d0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80130d2:	68fb      	ldr	r3, [r7, #12]
 80130d4:	681a      	ldr	r2, [r3, #0]
 80130d6:	68fb      	ldr	r3, [r7, #12]
 80130d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80130da:	3b01      	subs	r3, #1
 80130dc:	68f9      	ldr	r1, [r7, #12]
 80130de:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80130e0:	fb01 f303 	mul.w	r3, r1, r3
 80130e4:	441a      	add	r2, r3
 80130e6:	68fb      	ldr	r3, [r7, #12]
 80130e8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80130ea:	68fb      	ldr	r3, [r7, #12]
 80130ec:	22ff      	movs	r2, #255	; 0xff
 80130ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80130f2:	68fb      	ldr	r3, [r7, #12]
 80130f4:	22ff      	movs	r2, #255	; 0xff
 80130f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80130fa:	683b      	ldr	r3, [r7, #0]
 80130fc:	2b00      	cmp	r3, #0
 80130fe:	d114      	bne.n	801312a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013100:	68fb      	ldr	r3, [r7, #12]
 8013102:	691b      	ldr	r3, [r3, #16]
 8013104:	2b00      	cmp	r3, #0
 8013106:	d01a      	beq.n	801313e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013108:	68fb      	ldr	r3, [r7, #12]
 801310a:	3310      	adds	r3, #16
 801310c:	4618      	mov	r0, r3
 801310e:	f001 fb85 	bl	801481c <xTaskRemoveFromEventList>
 8013112:	4603      	mov	r3, r0
 8013114:	2b00      	cmp	r3, #0
 8013116:	d012      	beq.n	801313e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8013118:	4b0c      	ldr	r3, [pc, #48]	; (801314c <xQueueGenericReset+0xcc>)
 801311a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801311e:	601a      	str	r2, [r3, #0]
 8013120:	f3bf 8f4f 	dsb	sy
 8013124:	f3bf 8f6f 	isb	sy
 8013128:	e009      	b.n	801313e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801312a:	68fb      	ldr	r3, [r7, #12]
 801312c:	3310      	adds	r3, #16
 801312e:	4618      	mov	r0, r3
 8013130:	f7ff fef2 	bl	8012f18 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8013134:	68fb      	ldr	r3, [r7, #12]
 8013136:	3324      	adds	r3, #36	; 0x24
 8013138:	4618      	mov	r0, r3
 801313a:	f7ff feed 	bl	8012f18 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801313e:	f002 fb51 	bl	80157e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8013142:	2301      	movs	r3, #1
}
 8013144:	4618      	mov	r0, r3
 8013146:	3710      	adds	r7, #16
 8013148:	46bd      	mov	sp, r7
 801314a:	bd80      	pop	{r7, pc}
 801314c:	e000ed04 	.word	0xe000ed04

08013150 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8013150:	b580      	push	{r7, lr}
 8013152:	b08e      	sub	sp, #56	; 0x38
 8013154:	af02      	add	r7, sp, #8
 8013156:	60f8      	str	r0, [r7, #12]
 8013158:	60b9      	str	r1, [r7, #8]
 801315a:	607a      	str	r2, [r7, #4]
 801315c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801315e:	68fb      	ldr	r3, [r7, #12]
 8013160:	2b00      	cmp	r3, #0
 8013162:	d10a      	bne.n	801317a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8013164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013168:	f383 8811 	msr	BASEPRI, r3
 801316c:	f3bf 8f6f 	isb	sy
 8013170:	f3bf 8f4f 	dsb	sy
 8013174:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8013176:	bf00      	nop
 8013178:	e7fe      	b.n	8013178 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801317a:	683b      	ldr	r3, [r7, #0]
 801317c:	2b00      	cmp	r3, #0
 801317e:	d10a      	bne.n	8013196 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8013180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013184:	f383 8811 	msr	BASEPRI, r3
 8013188:	f3bf 8f6f 	isb	sy
 801318c:	f3bf 8f4f 	dsb	sy
 8013190:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013192:	bf00      	nop
 8013194:	e7fe      	b.n	8013194 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	2b00      	cmp	r3, #0
 801319a:	d002      	beq.n	80131a2 <xQueueGenericCreateStatic+0x52>
 801319c:	68bb      	ldr	r3, [r7, #8]
 801319e:	2b00      	cmp	r3, #0
 80131a0:	d001      	beq.n	80131a6 <xQueueGenericCreateStatic+0x56>
 80131a2:	2301      	movs	r3, #1
 80131a4:	e000      	b.n	80131a8 <xQueueGenericCreateStatic+0x58>
 80131a6:	2300      	movs	r3, #0
 80131a8:	2b00      	cmp	r3, #0
 80131aa:	d10a      	bne.n	80131c2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80131ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131b0:	f383 8811 	msr	BASEPRI, r3
 80131b4:	f3bf 8f6f 	isb	sy
 80131b8:	f3bf 8f4f 	dsb	sy
 80131bc:	623b      	str	r3, [r7, #32]
}
 80131be:	bf00      	nop
 80131c0:	e7fe      	b.n	80131c0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d102      	bne.n	80131ce <xQueueGenericCreateStatic+0x7e>
 80131c8:	68bb      	ldr	r3, [r7, #8]
 80131ca:	2b00      	cmp	r3, #0
 80131cc:	d101      	bne.n	80131d2 <xQueueGenericCreateStatic+0x82>
 80131ce:	2301      	movs	r3, #1
 80131d0:	e000      	b.n	80131d4 <xQueueGenericCreateStatic+0x84>
 80131d2:	2300      	movs	r3, #0
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d10a      	bne.n	80131ee <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80131d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131dc:	f383 8811 	msr	BASEPRI, r3
 80131e0:	f3bf 8f6f 	isb	sy
 80131e4:	f3bf 8f4f 	dsb	sy
 80131e8:	61fb      	str	r3, [r7, #28]
}
 80131ea:	bf00      	nop
 80131ec:	e7fe      	b.n	80131ec <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80131ee:	2350      	movs	r3, #80	; 0x50
 80131f0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80131f2:	697b      	ldr	r3, [r7, #20]
 80131f4:	2b50      	cmp	r3, #80	; 0x50
 80131f6:	d00a      	beq.n	801320e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80131f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131fc:	f383 8811 	msr	BASEPRI, r3
 8013200:	f3bf 8f6f 	isb	sy
 8013204:	f3bf 8f4f 	dsb	sy
 8013208:	61bb      	str	r3, [r7, #24]
}
 801320a:	bf00      	nop
 801320c:	e7fe      	b.n	801320c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801320e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013210:	683b      	ldr	r3, [r7, #0]
 8013212:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8013214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013216:	2b00      	cmp	r3, #0
 8013218:	d00d      	beq.n	8013236 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801321a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801321c:	2201      	movs	r2, #1
 801321e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013222:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8013226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013228:	9300      	str	r3, [sp, #0]
 801322a:	4613      	mov	r3, r2
 801322c:	687a      	ldr	r2, [r7, #4]
 801322e:	68b9      	ldr	r1, [r7, #8]
 8013230:	68f8      	ldr	r0, [r7, #12]
 8013232:	f000 f83f 	bl	80132b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8013236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8013238:	4618      	mov	r0, r3
 801323a:	3730      	adds	r7, #48	; 0x30
 801323c:	46bd      	mov	sp, r7
 801323e:	bd80      	pop	{r7, pc}

08013240 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8013240:	b580      	push	{r7, lr}
 8013242:	b08a      	sub	sp, #40	; 0x28
 8013244:	af02      	add	r7, sp, #8
 8013246:	60f8      	str	r0, [r7, #12]
 8013248:	60b9      	str	r1, [r7, #8]
 801324a:	4613      	mov	r3, r2
 801324c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801324e:	68fb      	ldr	r3, [r7, #12]
 8013250:	2b00      	cmp	r3, #0
 8013252:	d10a      	bne.n	801326a <xQueueGenericCreate+0x2a>
	__asm volatile
 8013254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013258:	f383 8811 	msr	BASEPRI, r3
 801325c:	f3bf 8f6f 	isb	sy
 8013260:	f3bf 8f4f 	dsb	sy
 8013264:	613b      	str	r3, [r7, #16]
}
 8013266:	bf00      	nop
 8013268:	e7fe      	b.n	8013268 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801326a:	68fb      	ldr	r3, [r7, #12]
 801326c:	68ba      	ldr	r2, [r7, #8]
 801326e:	fb02 f303 	mul.w	r3, r2, r3
 8013272:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8013274:	69fb      	ldr	r3, [r7, #28]
 8013276:	3350      	adds	r3, #80	; 0x50
 8013278:	4618      	mov	r0, r3
 801327a:	f002 fba5 	bl	80159c8 <pvPortMalloc>
 801327e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8013280:	69bb      	ldr	r3, [r7, #24]
 8013282:	2b00      	cmp	r3, #0
 8013284:	d011      	beq.n	80132aa <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8013286:	69bb      	ldr	r3, [r7, #24]
 8013288:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801328a:	697b      	ldr	r3, [r7, #20]
 801328c:	3350      	adds	r3, #80	; 0x50
 801328e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8013290:	69bb      	ldr	r3, [r7, #24]
 8013292:	2200      	movs	r2, #0
 8013294:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013298:	79fa      	ldrb	r2, [r7, #7]
 801329a:	69bb      	ldr	r3, [r7, #24]
 801329c:	9300      	str	r3, [sp, #0]
 801329e:	4613      	mov	r3, r2
 80132a0:	697a      	ldr	r2, [r7, #20]
 80132a2:	68b9      	ldr	r1, [r7, #8]
 80132a4:	68f8      	ldr	r0, [r7, #12]
 80132a6:	f000 f805 	bl	80132b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80132aa:	69bb      	ldr	r3, [r7, #24]
	}
 80132ac:	4618      	mov	r0, r3
 80132ae:	3720      	adds	r7, #32
 80132b0:	46bd      	mov	sp, r7
 80132b2:	bd80      	pop	{r7, pc}

080132b4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80132b4:	b580      	push	{r7, lr}
 80132b6:	b084      	sub	sp, #16
 80132b8:	af00      	add	r7, sp, #0
 80132ba:	60f8      	str	r0, [r7, #12]
 80132bc:	60b9      	str	r1, [r7, #8]
 80132be:	607a      	str	r2, [r7, #4]
 80132c0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80132c2:	68bb      	ldr	r3, [r7, #8]
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d103      	bne.n	80132d0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80132c8:	69bb      	ldr	r3, [r7, #24]
 80132ca:	69ba      	ldr	r2, [r7, #24]
 80132cc:	601a      	str	r2, [r3, #0]
 80132ce:	e002      	b.n	80132d6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80132d0:	69bb      	ldr	r3, [r7, #24]
 80132d2:	687a      	ldr	r2, [r7, #4]
 80132d4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80132d6:	69bb      	ldr	r3, [r7, #24]
 80132d8:	68fa      	ldr	r2, [r7, #12]
 80132da:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80132dc:	69bb      	ldr	r3, [r7, #24]
 80132de:	68ba      	ldr	r2, [r7, #8]
 80132e0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80132e2:	2101      	movs	r1, #1
 80132e4:	69b8      	ldr	r0, [r7, #24]
 80132e6:	f7ff fecb 	bl	8013080 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80132ea:	69bb      	ldr	r3, [r7, #24]
 80132ec:	78fa      	ldrb	r2, [r7, #3]
 80132ee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80132f2:	bf00      	nop
 80132f4:	3710      	adds	r7, #16
 80132f6:	46bd      	mov	sp, r7
 80132f8:	bd80      	pop	{r7, pc}
	...

080132fc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80132fc:	b580      	push	{r7, lr}
 80132fe:	b08e      	sub	sp, #56	; 0x38
 8013300:	af00      	add	r7, sp, #0
 8013302:	60f8      	str	r0, [r7, #12]
 8013304:	60b9      	str	r1, [r7, #8]
 8013306:	607a      	str	r2, [r7, #4]
 8013308:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801330a:	2300      	movs	r3, #0
 801330c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801330e:	68fb      	ldr	r3, [r7, #12]
 8013310:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013314:	2b00      	cmp	r3, #0
 8013316:	d10a      	bne.n	801332e <xQueueGenericSend+0x32>
	__asm volatile
 8013318:	f04f 0350 	mov.w	r3, #80	; 0x50
 801331c:	f383 8811 	msr	BASEPRI, r3
 8013320:	f3bf 8f6f 	isb	sy
 8013324:	f3bf 8f4f 	dsb	sy
 8013328:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801332a:	bf00      	nop
 801332c:	e7fe      	b.n	801332c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801332e:	68bb      	ldr	r3, [r7, #8]
 8013330:	2b00      	cmp	r3, #0
 8013332:	d103      	bne.n	801333c <xQueueGenericSend+0x40>
 8013334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013338:	2b00      	cmp	r3, #0
 801333a:	d101      	bne.n	8013340 <xQueueGenericSend+0x44>
 801333c:	2301      	movs	r3, #1
 801333e:	e000      	b.n	8013342 <xQueueGenericSend+0x46>
 8013340:	2300      	movs	r3, #0
 8013342:	2b00      	cmp	r3, #0
 8013344:	d10a      	bne.n	801335c <xQueueGenericSend+0x60>
	__asm volatile
 8013346:	f04f 0350 	mov.w	r3, #80	; 0x50
 801334a:	f383 8811 	msr	BASEPRI, r3
 801334e:	f3bf 8f6f 	isb	sy
 8013352:	f3bf 8f4f 	dsb	sy
 8013356:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013358:	bf00      	nop
 801335a:	e7fe      	b.n	801335a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801335c:	683b      	ldr	r3, [r7, #0]
 801335e:	2b02      	cmp	r3, #2
 8013360:	d103      	bne.n	801336a <xQueueGenericSend+0x6e>
 8013362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013366:	2b01      	cmp	r3, #1
 8013368:	d101      	bne.n	801336e <xQueueGenericSend+0x72>
 801336a:	2301      	movs	r3, #1
 801336c:	e000      	b.n	8013370 <xQueueGenericSend+0x74>
 801336e:	2300      	movs	r3, #0
 8013370:	2b00      	cmp	r3, #0
 8013372:	d10a      	bne.n	801338a <xQueueGenericSend+0x8e>
	__asm volatile
 8013374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013378:	f383 8811 	msr	BASEPRI, r3
 801337c:	f3bf 8f6f 	isb	sy
 8013380:	f3bf 8f4f 	dsb	sy
 8013384:	623b      	str	r3, [r7, #32]
}
 8013386:	bf00      	nop
 8013388:	e7fe      	b.n	8013388 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801338a:	f001 fc67 	bl	8014c5c <xTaskGetSchedulerState>
 801338e:	4603      	mov	r3, r0
 8013390:	2b00      	cmp	r3, #0
 8013392:	d102      	bne.n	801339a <xQueueGenericSend+0x9e>
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	2b00      	cmp	r3, #0
 8013398:	d101      	bne.n	801339e <xQueueGenericSend+0xa2>
 801339a:	2301      	movs	r3, #1
 801339c:	e000      	b.n	80133a0 <xQueueGenericSend+0xa4>
 801339e:	2300      	movs	r3, #0
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d10a      	bne.n	80133ba <xQueueGenericSend+0xbe>
	__asm volatile
 80133a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133a8:	f383 8811 	msr	BASEPRI, r3
 80133ac:	f3bf 8f6f 	isb	sy
 80133b0:	f3bf 8f4f 	dsb	sy
 80133b4:	61fb      	str	r3, [r7, #28]
}
 80133b6:	bf00      	nop
 80133b8:	e7fe      	b.n	80133b8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80133ba:	f002 f9e3 	bl	8015784 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80133be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80133c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80133c6:	429a      	cmp	r2, r3
 80133c8:	d302      	bcc.n	80133d0 <xQueueGenericSend+0xd4>
 80133ca:	683b      	ldr	r3, [r7, #0]
 80133cc:	2b02      	cmp	r3, #2
 80133ce:	d129      	bne.n	8013424 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80133d0:	683a      	ldr	r2, [r7, #0]
 80133d2:	68b9      	ldr	r1, [r7, #8]
 80133d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80133d6:	f000 fa8b 	bl	80138f0 <prvCopyDataToQueue>
 80133da:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80133dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	d010      	beq.n	8013406 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80133e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133e6:	3324      	adds	r3, #36	; 0x24
 80133e8:	4618      	mov	r0, r3
 80133ea:	f001 fa17 	bl	801481c <xTaskRemoveFromEventList>
 80133ee:	4603      	mov	r3, r0
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	d013      	beq.n	801341c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80133f4:	4b3f      	ldr	r3, [pc, #252]	; (80134f4 <xQueueGenericSend+0x1f8>)
 80133f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80133fa:	601a      	str	r2, [r3, #0]
 80133fc:	f3bf 8f4f 	dsb	sy
 8013400:	f3bf 8f6f 	isb	sy
 8013404:	e00a      	b.n	801341c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8013406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013408:	2b00      	cmp	r3, #0
 801340a:	d007      	beq.n	801341c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801340c:	4b39      	ldr	r3, [pc, #228]	; (80134f4 <xQueueGenericSend+0x1f8>)
 801340e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013412:	601a      	str	r2, [r3, #0]
 8013414:	f3bf 8f4f 	dsb	sy
 8013418:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801341c:	f002 f9e2 	bl	80157e4 <vPortExitCritical>
				return pdPASS;
 8013420:	2301      	movs	r3, #1
 8013422:	e063      	b.n	80134ec <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	2b00      	cmp	r3, #0
 8013428:	d103      	bne.n	8013432 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801342a:	f002 f9db 	bl	80157e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801342e:	2300      	movs	r3, #0
 8013430:	e05c      	b.n	80134ec <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013434:	2b00      	cmp	r3, #0
 8013436:	d106      	bne.n	8013446 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013438:	f107 0314 	add.w	r3, r7, #20
 801343c:	4618      	mov	r0, r3
 801343e:	f001 fab3 	bl	80149a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013442:	2301      	movs	r3, #1
 8013444:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013446:	f002 f9cd 	bl	80157e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801344a:	f000 ff87 	bl	801435c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801344e:	f002 f999 	bl	8015784 <vPortEnterCritical>
 8013452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013454:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013458:	b25b      	sxtb	r3, r3
 801345a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801345e:	d103      	bne.n	8013468 <xQueueGenericSend+0x16c>
 8013460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013462:	2200      	movs	r2, #0
 8013464:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801346a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801346e:	b25b      	sxtb	r3, r3
 8013470:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013474:	d103      	bne.n	801347e <xQueueGenericSend+0x182>
 8013476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013478:	2200      	movs	r2, #0
 801347a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801347e:	f002 f9b1 	bl	80157e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013482:	1d3a      	adds	r2, r7, #4
 8013484:	f107 0314 	add.w	r3, r7, #20
 8013488:	4611      	mov	r1, r2
 801348a:	4618      	mov	r0, r3
 801348c:	f001 faa2 	bl	80149d4 <xTaskCheckForTimeOut>
 8013490:	4603      	mov	r3, r0
 8013492:	2b00      	cmp	r3, #0
 8013494:	d124      	bne.n	80134e0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8013496:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013498:	f000 fb22 	bl	8013ae0 <prvIsQueueFull>
 801349c:	4603      	mov	r3, r0
 801349e:	2b00      	cmp	r3, #0
 80134a0:	d018      	beq.n	80134d4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80134a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134a4:	3310      	adds	r3, #16
 80134a6:	687a      	ldr	r2, [r7, #4]
 80134a8:	4611      	mov	r1, r2
 80134aa:	4618      	mov	r0, r3
 80134ac:	f001 f92a 	bl	8014704 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80134b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80134b2:	f000 faad 	bl	8013a10 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80134b6:	f000 ff5f 	bl	8014378 <xTaskResumeAll>
 80134ba:	4603      	mov	r3, r0
 80134bc:	2b00      	cmp	r3, #0
 80134be:	f47f af7c 	bne.w	80133ba <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80134c2:	4b0c      	ldr	r3, [pc, #48]	; (80134f4 <xQueueGenericSend+0x1f8>)
 80134c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80134c8:	601a      	str	r2, [r3, #0]
 80134ca:	f3bf 8f4f 	dsb	sy
 80134ce:	f3bf 8f6f 	isb	sy
 80134d2:	e772      	b.n	80133ba <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80134d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80134d6:	f000 fa9b 	bl	8013a10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80134da:	f000 ff4d 	bl	8014378 <xTaskResumeAll>
 80134de:	e76c      	b.n	80133ba <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80134e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80134e2:	f000 fa95 	bl	8013a10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80134e6:	f000 ff47 	bl	8014378 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80134ea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80134ec:	4618      	mov	r0, r3
 80134ee:	3738      	adds	r7, #56	; 0x38
 80134f0:	46bd      	mov	sp, r7
 80134f2:	bd80      	pop	{r7, pc}
 80134f4:	e000ed04 	.word	0xe000ed04

080134f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80134f8:	b580      	push	{r7, lr}
 80134fa:	b090      	sub	sp, #64	; 0x40
 80134fc:	af00      	add	r7, sp, #0
 80134fe:	60f8      	str	r0, [r7, #12]
 8013500:	60b9      	str	r1, [r7, #8]
 8013502:	607a      	str	r2, [r7, #4]
 8013504:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013506:	68fb      	ldr	r3, [r7, #12]
 8013508:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 801350a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801350c:	2b00      	cmp	r3, #0
 801350e:	d10a      	bne.n	8013526 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8013510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013514:	f383 8811 	msr	BASEPRI, r3
 8013518:	f3bf 8f6f 	isb	sy
 801351c:	f3bf 8f4f 	dsb	sy
 8013520:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8013522:	bf00      	nop
 8013524:	e7fe      	b.n	8013524 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013526:	68bb      	ldr	r3, [r7, #8]
 8013528:	2b00      	cmp	r3, #0
 801352a:	d103      	bne.n	8013534 <xQueueGenericSendFromISR+0x3c>
 801352c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801352e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013530:	2b00      	cmp	r3, #0
 8013532:	d101      	bne.n	8013538 <xQueueGenericSendFromISR+0x40>
 8013534:	2301      	movs	r3, #1
 8013536:	e000      	b.n	801353a <xQueueGenericSendFromISR+0x42>
 8013538:	2300      	movs	r3, #0
 801353a:	2b00      	cmp	r3, #0
 801353c:	d10a      	bne.n	8013554 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 801353e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013542:	f383 8811 	msr	BASEPRI, r3
 8013546:	f3bf 8f6f 	isb	sy
 801354a:	f3bf 8f4f 	dsb	sy
 801354e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013550:	bf00      	nop
 8013552:	e7fe      	b.n	8013552 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013554:	683b      	ldr	r3, [r7, #0]
 8013556:	2b02      	cmp	r3, #2
 8013558:	d103      	bne.n	8013562 <xQueueGenericSendFromISR+0x6a>
 801355a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801355c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801355e:	2b01      	cmp	r3, #1
 8013560:	d101      	bne.n	8013566 <xQueueGenericSendFromISR+0x6e>
 8013562:	2301      	movs	r3, #1
 8013564:	e000      	b.n	8013568 <xQueueGenericSendFromISR+0x70>
 8013566:	2300      	movs	r3, #0
 8013568:	2b00      	cmp	r3, #0
 801356a:	d10a      	bne.n	8013582 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 801356c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013570:	f383 8811 	msr	BASEPRI, r3
 8013574:	f3bf 8f6f 	isb	sy
 8013578:	f3bf 8f4f 	dsb	sy
 801357c:	623b      	str	r3, [r7, #32]
}
 801357e:	bf00      	nop
 8013580:	e7fe      	b.n	8013580 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013582:	f002 f9e1 	bl	8015948 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8013586:	f3ef 8211 	mrs	r2, BASEPRI
 801358a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801358e:	f383 8811 	msr	BASEPRI, r3
 8013592:	f3bf 8f6f 	isb	sy
 8013596:	f3bf 8f4f 	dsb	sy
 801359a:	61fa      	str	r2, [r7, #28]
 801359c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801359e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80135a0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80135a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80135a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80135aa:	429a      	cmp	r2, r3
 80135ac:	d302      	bcc.n	80135b4 <xQueueGenericSendFromISR+0xbc>
 80135ae:	683b      	ldr	r3, [r7, #0]
 80135b0:	2b02      	cmp	r3, #2
 80135b2:	d12f      	bne.n	8013614 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80135b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80135ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80135be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80135c2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80135c4:	683a      	ldr	r2, [r7, #0]
 80135c6:	68b9      	ldr	r1, [r7, #8]
 80135c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80135ca:	f000 f991 	bl	80138f0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80135ce:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80135d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80135d6:	d112      	bne.n	80135fe <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80135d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135dc:	2b00      	cmp	r3, #0
 80135de:	d016      	beq.n	801360e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80135e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135e2:	3324      	adds	r3, #36	; 0x24
 80135e4:	4618      	mov	r0, r3
 80135e6:	f001 f919 	bl	801481c <xTaskRemoveFromEventList>
 80135ea:	4603      	mov	r3, r0
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d00e      	beq.n	801360e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	2b00      	cmp	r3, #0
 80135f4:	d00b      	beq.n	801360e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	2201      	movs	r2, #1
 80135fa:	601a      	str	r2, [r3, #0]
 80135fc:	e007      	b.n	801360e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80135fe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013602:	3301      	adds	r3, #1
 8013604:	b2db      	uxtb	r3, r3
 8013606:	b25a      	sxtb	r2, r3
 8013608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801360a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801360e:	2301      	movs	r3, #1
 8013610:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8013612:	e001      	b.n	8013618 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8013614:	2300      	movs	r3, #0
 8013616:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801361a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801361c:	697b      	ldr	r3, [r7, #20]
 801361e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8013622:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8013626:	4618      	mov	r0, r3
 8013628:	3740      	adds	r7, #64	; 0x40
 801362a:	46bd      	mov	sp, r7
 801362c:	bd80      	pop	{r7, pc}
	...

08013630 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8013630:	b580      	push	{r7, lr}
 8013632:	b08c      	sub	sp, #48	; 0x30
 8013634:	af00      	add	r7, sp, #0
 8013636:	60f8      	str	r0, [r7, #12]
 8013638:	60b9      	str	r1, [r7, #8]
 801363a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801363c:	2300      	movs	r3, #0
 801363e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013640:	68fb      	ldr	r3, [r7, #12]
 8013642:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013646:	2b00      	cmp	r3, #0
 8013648:	d10a      	bne.n	8013660 <xQueueReceive+0x30>
	__asm volatile
 801364a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801364e:	f383 8811 	msr	BASEPRI, r3
 8013652:	f3bf 8f6f 	isb	sy
 8013656:	f3bf 8f4f 	dsb	sy
 801365a:	623b      	str	r3, [r7, #32]
}
 801365c:	bf00      	nop
 801365e:	e7fe      	b.n	801365e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013660:	68bb      	ldr	r3, [r7, #8]
 8013662:	2b00      	cmp	r3, #0
 8013664:	d103      	bne.n	801366e <xQueueReceive+0x3e>
 8013666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801366a:	2b00      	cmp	r3, #0
 801366c:	d101      	bne.n	8013672 <xQueueReceive+0x42>
 801366e:	2301      	movs	r3, #1
 8013670:	e000      	b.n	8013674 <xQueueReceive+0x44>
 8013672:	2300      	movs	r3, #0
 8013674:	2b00      	cmp	r3, #0
 8013676:	d10a      	bne.n	801368e <xQueueReceive+0x5e>
	__asm volatile
 8013678:	f04f 0350 	mov.w	r3, #80	; 0x50
 801367c:	f383 8811 	msr	BASEPRI, r3
 8013680:	f3bf 8f6f 	isb	sy
 8013684:	f3bf 8f4f 	dsb	sy
 8013688:	61fb      	str	r3, [r7, #28]
}
 801368a:	bf00      	nop
 801368c:	e7fe      	b.n	801368c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801368e:	f001 fae5 	bl	8014c5c <xTaskGetSchedulerState>
 8013692:	4603      	mov	r3, r0
 8013694:	2b00      	cmp	r3, #0
 8013696:	d102      	bne.n	801369e <xQueueReceive+0x6e>
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	2b00      	cmp	r3, #0
 801369c:	d101      	bne.n	80136a2 <xQueueReceive+0x72>
 801369e:	2301      	movs	r3, #1
 80136a0:	e000      	b.n	80136a4 <xQueueReceive+0x74>
 80136a2:	2300      	movs	r3, #0
 80136a4:	2b00      	cmp	r3, #0
 80136a6:	d10a      	bne.n	80136be <xQueueReceive+0x8e>
	__asm volatile
 80136a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136ac:	f383 8811 	msr	BASEPRI, r3
 80136b0:	f3bf 8f6f 	isb	sy
 80136b4:	f3bf 8f4f 	dsb	sy
 80136b8:	61bb      	str	r3, [r7, #24]
}
 80136ba:	bf00      	nop
 80136bc:	e7fe      	b.n	80136bc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80136be:	f002 f861 	bl	8015784 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80136c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80136c6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80136c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136ca:	2b00      	cmp	r3, #0
 80136cc:	d01f      	beq.n	801370e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80136ce:	68b9      	ldr	r1, [r7, #8]
 80136d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80136d2:	f000 f977 	bl	80139c4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80136d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136d8:	1e5a      	subs	r2, r3, #1
 80136da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136dc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80136de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136e0:	691b      	ldr	r3, [r3, #16]
 80136e2:	2b00      	cmp	r3, #0
 80136e4:	d00f      	beq.n	8013706 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80136e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136e8:	3310      	adds	r3, #16
 80136ea:	4618      	mov	r0, r3
 80136ec:	f001 f896 	bl	801481c <xTaskRemoveFromEventList>
 80136f0:	4603      	mov	r3, r0
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	d007      	beq.n	8013706 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80136f6:	4b3d      	ldr	r3, [pc, #244]	; (80137ec <xQueueReceive+0x1bc>)
 80136f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80136fc:	601a      	str	r2, [r3, #0]
 80136fe:	f3bf 8f4f 	dsb	sy
 8013702:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013706:	f002 f86d 	bl	80157e4 <vPortExitCritical>
				return pdPASS;
 801370a:	2301      	movs	r3, #1
 801370c:	e069      	b.n	80137e2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	2b00      	cmp	r3, #0
 8013712:	d103      	bne.n	801371c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013714:	f002 f866 	bl	80157e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013718:	2300      	movs	r3, #0
 801371a:	e062      	b.n	80137e2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 801371c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801371e:	2b00      	cmp	r3, #0
 8013720:	d106      	bne.n	8013730 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013722:	f107 0310 	add.w	r3, r7, #16
 8013726:	4618      	mov	r0, r3
 8013728:	f001 f93e 	bl	80149a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801372c:	2301      	movs	r3, #1
 801372e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013730:	f002 f858 	bl	80157e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013734:	f000 fe12 	bl	801435c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013738:	f002 f824 	bl	8015784 <vPortEnterCritical>
 801373c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801373e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013742:	b25b      	sxtb	r3, r3
 8013744:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013748:	d103      	bne.n	8013752 <xQueueReceive+0x122>
 801374a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801374c:	2200      	movs	r2, #0
 801374e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013754:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013758:	b25b      	sxtb	r3, r3
 801375a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801375e:	d103      	bne.n	8013768 <xQueueReceive+0x138>
 8013760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013762:	2200      	movs	r2, #0
 8013764:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013768:	f002 f83c 	bl	80157e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801376c:	1d3a      	adds	r2, r7, #4
 801376e:	f107 0310 	add.w	r3, r7, #16
 8013772:	4611      	mov	r1, r2
 8013774:	4618      	mov	r0, r3
 8013776:	f001 f92d 	bl	80149d4 <xTaskCheckForTimeOut>
 801377a:	4603      	mov	r3, r0
 801377c:	2b00      	cmp	r3, #0
 801377e:	d123      	bne.n	80137c8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013780:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013782:	f000 f997 	bl	8013ab4 <prvIsQueueEmpty>
 8013786:	4603      	mov	r3, r0
 8013788:	2b00      	cmp	r3, #0
 801378a:	d017      	beq.n	80137bc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801378c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801378e:	3324      	adds	r3, #36	; 0x24
 8013790:	687a      	ldr	r2, [r7, #4]
 8013792:	4611      	mov	r1, r2
 8013794:	4618      	mov	r0, r3
 8013796:	f000 ffb5 	bl	8014704 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801379a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801379c:	f000 f938 	bl	8013a10 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80137a0:	f000 fdea 	bl	8014378 <xTaskResumeAll>
 80137a4:	4603      	mov	r3, r0
 80137a6:	2b00      	cmp	r3, #0
 80137a8:	d189      	bne.n	80136be <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80137aa:	4b10      	ldr	r3, [pc, #64]	; (80137ec <xQueueReceive+0x1bc>)
 80137ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80137b0:	601a      	str	r2, [r3, #0]
 80137b2:	f3bf 8f4f 	dsb	sy
 80137b6:	f3bf 8f6f 	isb	sy
 80137ba:	e780      	b.n	80136be <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80137bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80137be:	f000 f927 	bl	8013a10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80137c2:	f000 fdd9 	bl	8014378 <xTaskResumeAll>
 80137c6:	e77a      	b.n	80136be <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80137c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80137ca:	f000 f921 	bl	8013a10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80137ce:	f000 fdd3 	bl	8014378 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80137d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80137d4:	f000 f96e 	bl	8013ab4 <prvIsQueueEmpty>
 80137d8:	4603      	mov	r3, r0
 80137da:	2b00      	cmp	r3, #0
 80137dc:	f43f af6f 	beq.w	80136be <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80137e0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80137e2:	4618      	mov	r0, r3
 80137e4:	3730      	adds	r7, #48	; 0x30
 80137e6:	46bd      	mov	sp, r7
 80137e8:	bd80      	pop	{r7, pc}
 80137ea:	bf00      	nop
 80137ec:	e000ed04 	.word	0xe000ed04

080137f0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80137f0:	b580      	push	{r7, lr}
 80137f2:	b08e      	sub	sp, #56	; 0x38
 80137f4:	af00      	add	r7, sp, #0
 80137f6:	60f8      	str	r0, [r7, #12]
 80137f8:	60b9      	str	r1, [r7, #8]
 80137fa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80137fc:	68fb      	ldr	r3, [r7, #12]
 80137fe:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013802:	2b00      	cmp	r3, #0
 8013804:	d10a      	bne.n	801381c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8013806:	f04f 0350 	mov.w	r3, #80	; 0x50
 801380a:	f383 8811 	msr	BASEPRI, r3
 801380e:	f3bf 8f6f 	isb	sy
 8013812:	f3bf 8f4f 	dsb	sy
 8013816:	623b      	str	r3, [r7, #32]
}
 8013818:	bf00      	nop
 801381a:	e7fe      	b.n	801381a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801381c:	68bb      	ldr	r3, [r7, #8]
 801381e:	2b00      	cmp	r3, #0
 8013820:	d103      	bne.n	801382a <xQueueReceiveFromISR+0x3a>
 8013822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013826:	2b00      	cmp	r3, #0
 8013828:	d101      	bne.n	801382e <xQueueReceiveFromISR+0x3e>
 801382a:	2301      	movs	r3, #1
 801382c:	e000      	b.n	8013830 <xQueueReceiveFromISR+0x40>
 801382e:	2300      	movs	r3, #0
 8013830:	2b00      	cmp	r3, #0
 8013832:	d10a      	bne.n	801384a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8013834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013838:	f383 8811 	msr	BASEPRI, r3
 801383c:	f3bf 8f6f 	isb	sy
 8013840:	f3bf 8f4f 	dsb	sy
 8013844:	61fb      	str	r3, [r7, #28]
}
 8013846:	bf00      	nop
 8013848:	e7fe      	b.n	8013848 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801384a:	f002 f87d 	bl	8015948 <vPortValidateInterruptPriority>
	__asm volatile
 801384e:	f3ef 8211 	mrs	r2, BASEPRI
 8013852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013856:	f383 8811 	msr	BASEPRI, r3
 801385a:	f3bf 8f6f 	isb	sy
 801385e:	f3bf 8f4f 	dsb	sy
 8013862:	61ba      	str	r2, [r7, #24]
 8013864:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8013866:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013868:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801386a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801386c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801386e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013872:	2b00      	cmp	r3, #0
 8013874:	d02f      	beq.n	80138d6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8013876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013878:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801387c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013880:	68b9      	ldr	r1, [r7, #8]
 8013882:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013884:	f000 f89e 	bl	80139c4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801388a:	1e5a      	subs	r2, r3, #1
 801388c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801388e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8013890:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8013894:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013898:	d112      	bne.n	80138c0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801389a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801389c:	691b      	ldr	r3, [r3, #16]
 801389e:	2b00      	cmp	r3, #0
 80138a0:	d016      	beq.n	80138d0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80138a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138a4:	3310      	adds	r3, #16
 80138a6:	4618      	mov	r0, r3
 80138a8:	f000 ffb8 	bl	801481c <xTaskRemoveFromEventList>
 80138ac:	4603      	mov	r3, r0
 80138ae:	2b00      	cmp	r3, #0
 80138b0:	d00e      	beq.n	80138d0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	2b00      	cmp	r3, #0
 80138b6:	d00b      	beq.n	80138d0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	2201      	movs	r2, #1
 80138bc:	601a      	str	r2, [r3, #0]
 80138be:	e007      	b.n	80138d0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80138c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80138c4:	3301      	adds	r3, #1
 80138c6:	b2db      	uxtb	r3, r3
 80138c8:	b25a      	sxtb	r2, r3
 80138ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80138d0:	2301      	movs	r3, #1
 80138d2:	637b      	str	r3, [r7, #52]	; 0x34
 80138d4:	e001      	b.n	80138da <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80138d6:	2300      	movs	r3, #0
 80138d8:	637b      	str	r3, [r7, #52]	; 0x34
 80138da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138dc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80138de:	693b      	ldr	r3, [r7, #16]
 80138e0:	f383 8811 	msr	BASEPRI, r3
}
 80138e4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80138e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80138e8:	4618      	mov	r0, r3
 80138ea:	3738      	adds	r7, #56	; 0x38
 80138ec:	46bd      	mov	sp, r7
 80138ee:	bd80      	pop	{r7, pc}

080138f0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80138f0:	b580      	push	{r7, lr}
 80138f2:	b086      	sub	sp, #24
 80138f4:	af00      	add	r7, sp, #0
 80138f6:	60f8      	str	r0, [r7, #12]
 80138f8:	60b9      	str	r1, [r7, #8]
 80138fa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80138fc:	2300      	movs	r3, #0
 80138fe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013900:	68fb      	ldr	r3, [r7, #12]
 8013902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013904:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8013906:	68fb      	ldr	r3, [r7, #12]
 8013908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801390a:	2b00      	cmp	r3, #0
 801390c:	d10d      	bne.n	801392a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801390e:	68fb      	ldr	r3, [r7, #12]
 8013910:	681b      	ldr	r3, [r3, #0]
 8013912:	2b00      	cmp	r3, #0
 8013914:	d14d      	bne.n	80139b2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013916:	68fb      	ldr	r3, [r7, #12]
 8013918:	689b      	ldr	r3, [r3, #8]
 801391a:	4618      	mov	r0, r3
 801391c:	f001 f9bc 	bl	8014c98 <xTaskPriorityDisinherit>
 8013920:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8013922:	68fb      	ldr	r3, [r7, #12]
 8013924:	2200      	movs	r2, #0
 8013926:	609a      	str	r2, [r3, #8]
 8013928:	e043      	b.n	80139b2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	2b00      	cmp	r3, #0
 801392e:	d119      	bne.n	8013964 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013930:	68fb      	ldr	r3, [r7, #12]
 8013932:	6858      	ldr	r0, [r3, #4]
 8013934:	68fb      	ldr	r3, [r7, #12]
 8013936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013938:	461a      	mov	r2, r3
 801393a:	68b9      	ldr	r1, [r7, #8]
 801393c:	f002 fa68 	bl	8015e10 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013940:	68fb      	ldr	r3, [r7, #12]
 8013942:	685a      	ldr	r2, [r3, #4]
 8013944:	68fb      	ldr	r3, [r7, #12]
 8013946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013948:	441a      	add	r2, r3
 801394a:	68fb      	ldr	r3, [r7, #12]
 801394c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801394e:	68fb      	ldr	r3, [r7, #12]
 8013950:	685a      	ldr	r2, [r3, #4]
 8013952:	68fb      	ldr	r3, [r7, #12]
 8013954:	689b      	ldr	r3, [r3, #8]
 8013956:	429a      	cmp	r2, r3
 8013958:	d32b      	bcc.n	80139b2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801395a:	68fb      	ldr	r3, [r7, #12]
 801395c:	681a      	ldr	r2, [r3, #0]
 801395e:	68fb      	ldr	r3, [r7, #12]
 8013960:	605a      	str	r2, [r3, #4]
 8013962:	e026      	b.n	80139b2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8013964:	68fb      	ldr	r3, [r7, #12]
 8013966:	68d8      	ldr	r0, [r3, #12]
 8013968:	68fb      	ldr	r3, [r7, #12]
 801396a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801396c:	461a      	mov	r2, r3
 801396e:	68b9      	ldr	r1, [r7, #8]
 8013970:	f002 fa4e 	bl	8015e10 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8013974:	68fb      	ldr	r3, [r7, #12]
 8013976:	68da      	ldr	r2, [r3, #12]
 8013978:	68fb      	ldr	r3, [r7, #12]
 801397a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801397c:	425b      	negs	r3, r3
 801397e:	441a      	add	r2, r3
 8013980:	68fb      	ldr	r3, [r7, #12]
 8013982:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013984:	68fb      	ldr	r3, [r7, #12]
 8013986:	68da      	ldr	r2, [r3, #12]
 8013988:	68fb      	ldr	r3, [r7, #12]
 801398a:	681b      	ldr	r3, [r3, #0]
 801398c:	429a      	cmp	r2, r3
 801398e:	d207      	bcs.n	80139a0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8013990:	68fb      	ldr	r3, [r7, #12]
 8013992:	689a      	ldr	r2, [r3, #8]
 8013994:	68fb      	ldr	r3, [r7, #12]
 8013996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013998:	425b      	negs	r3, r3
 801399a:	441a      	add	r2, r3
 801399c:	68fb      	ldr	r3, [r7, #12]
 801399e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	2b02      	cmp	r3, #2
 80139a4:	d105      	bne.n	80139b2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80139a6:	693b      	ldr	r3, [r7, #16]
 80139a8:	2b00      	cmp	r3, #0
 80139aa:	d002      	beq.n	80139b2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80139ac:	693b      	ldr	r3, [r7, #16]
 80139ae:	3b01      	subs	r3, #1
 80139b0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80139b2:	693b      	ldr	r3, [r7, #16]
 80139b4:	1c5a      	adds	r2, r3, #1
 80139b6:	68fb      	ldr	r3, [r7, #12]
 80139b8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80139ba:	697b      	ldr	r3, [r7, #20]
}
 80139bc:	4618      	mov	r0, r3
 80139be:	3718      	adds	r7, #24
 80139c0:	46bd      	mov	sp, r7
 80139c2:	bd80      	pop	{r7, pc}

080139c4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80139c4:	b580      	push	{r7, lr}
 80139c6:	b082      	sub	sp, #8
 80139c8:	af00      	add	r7, sp, #0
 80139ca:	6078      	str	r0, [r7, #4]
 80139cc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80139d2:	2b00      	cmp	r3, #0
 80139d4:	d018      	beq.n	8013a08 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	68da      	ldr	r2, [r3, #12]
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80139de:	441a      	add	r2, r3
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	68da      	ldr	r2, [r3, #12]
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	689b      	ldr	r3, [r3, #8]
 80139ec:	429a      	cmp	r2, r3
 80139ee:	d303      	bcc.n	80139f8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	681a      	ldr	r2, [r3, #0]
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	68d9      	ldr	r1, [r3, #12]
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013a00:	461a      	mov	r2, r3
 8013a02:	6838      	ldr	r0, [r7, #0]
 8013a04:	f002 fa04 	bl	8015e10 <memcpy>
	}
}
 8013a08:	bf00      	nop
 8013a0a:	3708      	adds	r7, #8
 8013a0c:	46bd      	mov	sp, r7
 8013a0e:	bd80      	pop	{r7, pc}

08013a10 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8013a10:	b580      	push	{r7, lr}
 8013a12:	b084      	sub	sp, #16
 8013a14:	af00      	add	r7, sp, #0
 8013a16:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8013a18:	f001 feb4 	bl	8015784 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8013a1c:	687b      	ldr	r3, [r7, #4]
 8013a1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013a22:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013a24:	e011      	b.n	8013a4a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a2a:	2b00      	cmp	r3, #0
 8013a2c:	d012      	beq.n	8013a54 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	3324      	adds	r3, #36	; 0x24
 8013a32:	4618      	mov	r0, r3
 8013a34:	f000 fef2 	bl	801481c <xTaskRemoveFromEventList>
 8013a38:	4603      	mov	r3, r0
 8013a3a:	2b00      	cmp	r3, #0
 8013a3c:	d001      	beq.n	8013a42 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8013a3e:	f001 f82b 	bl	8014a98 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8013a42:	7bfb      	ldrb	r3, [r7, #15]
 8013a44:	3b01      	subs	r3, #1
 8013a46:	b2db      	uxtb	r3, r3
 8013a48:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013a4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	dce9      	bgt.n	8013a26 <prvUnlockQueue+0x16>
 8013a52:	e000      	b.n	8013a56 <prvUnlockQueue+0x46>
					break;
 8013a54:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	22ff      	movs	r2, #255	; 0xff
 8013a5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8013a5e:	f001 fec1 	bl	80157e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8013a62:	f001 fe8f 	bl	8015784 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013a6c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013a6e:	e011      	b.n	8013a94 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	691b      	ldr	r3, [r3, #16]
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	d012      	beq.n	8013a9e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	3310      	adds	r3, #16
 8013a7c:	4618      	mov	r0, r3
 8013a7e:	f000 fecd 	bl	801481c <xTaskRemoveFromEventList>
 8013a82:	4603      	mov	r3, r0
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	d001      	beq.n	8013a8c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8013a88:	f001 f806 	bl	8014a98 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8013a8c:	7bbb      	ldrb	r3, [r7, #14]
 8013a8e:	3b01      	subs	r3, #1
 8013a90:	b2db      	uxtb	r3, r3
 8013a92:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013a94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013a98:	2b00      	cmp	r3, #0
 8013a9a:	dce9      	bgt.n	8013a70 <prvUnlockQueue+0x60>
 8013a9c:	e000      	b.n	8013aa0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8013a9e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	22ff      	movs	r2, #255	; 0xff
 8013aa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8013aa8:	f001 fe9c 	bl	80157e4 <vPortExitCritical>
}
 8013aac:	bf00      	nop
 8013aae:	3710      	adds	r7, #16
 8013ab0:	46bd      	mov	sp, r7
 8013ab2:	bd80      	pop	{r7, pc}

08013ab4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8013ab4:	b580      	push	{r7, lr}
 8013ab6:	b084      	sub	sp, #16
 8013ab8:	af00      	add	r7, sp, #0
 8013aba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013abc:	f001 fe62 	bl	8015784 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013ac4:	2b00      	cmp	r3, #0
 8013ac6:	d102      	bne.n	8013ace <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8013ac8:	2301      	movs	r3, #1
 8013aca:	60fb      	str	r3, [r7, #12]
 8013acc:	e001      	b.n	8013ad2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8013ace:	2300      	movs	r3, #0
 8013ad0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013ad2:	f001 fe87 	bl	80157e4 <vPortExitCritical>

	return xReturn;
 8013ad6:	68fb      	ldr	r3, [r7, #12]
}
 8013ad8:	4618      	mov	r0, r3
 8013ada:	3710      	adds	r7, #16
 8013adc:	46bd      	mov	sp, r7
 8013ade:	bd80      	pop	{r7, pc}

08013ae0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8013ae0:	b580      	push	{r7, lr}
 8013ae2:	b084      	sub	sp, #16
 8013ae4:	af00      	add	r7, sp, #0
 8013ae6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013ae8:	f001 fe4c 	bl	8015784 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013af4:	429a      	cmp	r2, r3
 8013af6:	d102      	bne.n	8013afe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8013af8:	2301      	movs	r3, #1
 8013afa:	60fb      	str	r3, [r7, #12]
 8013afc:	e001      	b.n	8013b02 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8013afe:	2300      	movs	r3, #0
 8013b00:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013b02:	f001 fe6f 	bl	80157e4 <vPortExitCritical>

	return xReturn;
 8013b06:	68fb      	ldr	r3, [r7, #12]
}
 8013b08:	4618      	mov	r0, r3
 8013b0a:	3710      	adds	r7, #16
 8013b0c:	46bd      	mov	sp, r7
 8013b0e:	bd80      	pop	{r7, pc}

08013b10 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8013b10:	b480      	push	{r7}
 8013b12:	b085      	sub	sp, #20
 8013b14:	af00      	add	r7, sp, #0
 8013b16:	6078      	str	r0, [r7, #4]
 8013b18:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013b1a:	2300      	movs	r3, #0
 8013b1c:	60fb      	str	r3, [r7, #12]
 8013b1e:	e014      	b.n	8013b4a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8013b20:	4a0f      	ldr	r2, [pc, #60]	; (8013b60 <vQueueAddToRegistry+0x50>)
 8013b22:	68fb      	ldr	r3, [r7, #12]
 8013b24:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8013b28:	2b00      	cmp	r3, #0
 8013b2a:	d10b      	bne.n	8013b44 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8013b2c:	490c      	ldr	r1, [pc, #48]	; (8013b60 <vQueueAddToRegistry+0x50>)
 8013b2e:	68fb      	ldr	r3, [r7, #12]
 8013b30:	683a      	ldr	r2, [r7, #0]
 8013b32:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8013b36:	4a0a      	ldr	r2, [pc, #40]	; (8013b60 <vQueueAddToRegistry+0x50>)
 8013b38:	68fb      	ldr	r3, [r7, #12]
 8013b3a:	00db      	lsls	r3, r3, #3
 8013b3c:	4413      	add	r3, r2
 8013b3e:	687a      	ldr	r2, [r7, #4]
 8013b40:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8013b42:	e006      	b.n	8013b52 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013b44:	68fb      	ldr	r3, [r7, #12]
 8013b46:	3301      	adds	r3, #1
 8013b48:	60fb      	str	r3, [r7, #12]
 8013b4a:	68fb      	ldr	r3, [r7, #12]
 8013b4c:	2b07      	cmp	r3, #7
 8013b4e:	d9e7      	bls.n	8013b20 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8013b50:	bf00      	nop
 8013b52:	bf00      	nop
 8013b54:	3714      	adds	r7, #20
 8013b56:	46bd      	mov	sp, r7
 8013b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b5c:	4770      	bx	lr
 8013b5e:	bf00      	nop
 8013b60:	240017c8 	.word	0x240017c8

08013b64 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8013b64:	b580      	push	{r7, lr}
 8013b66:	b086      	sub	sp, #24
 8013b68:	af00      	add	r7, sp, #0
 8013b6a:	60f8      	str	r0, [r7, #12]
 8013b6c:	60b9      	str	r1, [r7, #8]
 8013b6e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8013b70:	68fb      	ldr	r3, [r7, #12]
 8013b72:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8013b74:	f001 fe06 	bl	8015784 <vPortEnterCritical>
 8013b78:	697b      	ldr	r3, [r7, #20]
 8013b7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013b7e:	b25b      	sxtb	r3, r3
 8013b80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013b84:	d103      	bne.n	8013b8e <vQueueWaitForMessageRestricted+0x2a>
 8013b86:	697b      	ldr	r3, [r7, #20]
 8013b88:	2200      	movs	r2, #0
 8013b8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013b8e:	697b      	ldr	r3, [r7, #20]
 8013b90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013b94:	b25b      	sxtb	r3, r3
 8013b96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013b9a:	d103      	bne.n	8013ba4 <vQueueWaitForMessageRestricted+0x40>
 8013b9c:	697b      	ldr	r3, [r7, #20]
 8013b9e:	2200      	movs	r2, #0
 8013ba0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013ba4:	f001 fe1e 	bl	80157e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8013ba8:	697b      	ldr	r3, [r7, #20]
 8013baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013bac:	2b00      	cmp	r3, #0
 8013bae:	d106      	bne.n	8013bbe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8013bb0:	697b      	ldr	r3, [r7, #20]
 8013bb2:	3324      	adds	r3, #36	; 0x24
 8013bb4:	687a      	ldr	r2, [r7, #4]
 8013bb6:	68b9      	ldr	r1, [r7, #8]
 8013bb8:	4618      	mov	r0, r3
 8013bba:	f000 fe03 	bl	80147c4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8013bbe:	6978      	ldr	r0, [r7, #20]
 8013bc0:	f7ff ff26 	bl	8013a10 <prvUnlockQueue>
	}
 8013bc4:	bf00      	nop
 8013bc6:	3718      	adds	r7, #24
 8013bc8:	46bd      	mov	sp, r7
 8013bca:	bd80      	pop	{r7, pc}

08013bcc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8013bcc:	b580      	push	{r7, lr}
 8013bce:	b08e      	sub	sp, #56	; 0x38
 8013bd0:	af04      	add	r7, sp, #16
 8013bd2:	60f8      	str	r0, [r7, #12]
 8013bd4:	60b9      	str	r1, [r7, #8]
 8013bd6:	607a      	str	r2, [r7, #4]
 8013bd8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8013bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	d10a      	bne.n	8013bf6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8013be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013be4:	f383 8811 	msr	BASEPRI, r3
 8013be8:	f3bf 8f6f 	isb	sy
 8013bec:	f3bf 8f4f 	dsb	sy
 8013bf0:	623b      	str	r3, [r7, #32]
}
 8013bf2:	bf00      	nop
 8013bf4:	e7fe      	b.n	8013bf4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8013bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bf8:	2b00      	cmp	r3, #0
 8013bfa:	d10a      	bne.n	8013c12 <xTaskCreateStatic+0x46>
	__asm volatile
 8013bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c00:	f383 8811 	msr	BASEPRI, r3
 8013c04:	f3bf 8f6f 	isb	sy
 8013c08:	f3bf 8f4f 	dsb	sy
 8013c0c:	61fb      	str	r3, [r7, #28]
}
 8013c0e:	bf00      	nop
 8013c10:	e7fe      	b.n	8013c10 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8013c12:	235c      	movs	r3, #92	; 0x5c
 8013c14:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8013c16:	693b      	ldr	r3, [r7, #16]
 8013c18:	2b5c      	cmp	r3, #92	; 0x5c
 8013c1a:	d00a      	beq.n	8013c32 <xTaskCreateStatic+0x66>
	__asm volatile
 8013c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c20:	f383 8811 	msr	BASEPRI, r3
 8013c24:	f3bf 8f6f 	isb	sy
 8013c28:	f3bf 8f4f 	dsb	sy
 8013c2c:	61bb      	str	r3, [r7, #24]
}
 8013c2e:	bf00      	nop
 8013c30:	e7fe      	b.n	8013c30 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8013c32:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8013c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c36:	2b00      	cmp	r3, #0
 8013c38:	d01e      	beq.n	8013c78 <xTaskCreateStatic+0xac>
 8013c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c3c:	2b00      	cmp	r3, #0
 8013c3e:	d01b      	beq.n	8013c78 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c42:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8013c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013c48:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8013c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c4c:	2202      	movs	r2, #2
 8013c4e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8013c52:	2300      	movs	r3, #0
 8013c54:	9303      	str	r3, [sp, #12]
 8013c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c58:	9302      	str	r3, [sp, #8]
 8013c5a:	f107 0314 	add.w	r3, r7, #20
 8013c5e:	9301      	str	r3, [sp, #4]
 8013c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c62:	9300      	str	r3, [sp, #0]
 8013c64:	683b      	ldr	r3, [r7, #0]
 8013c66:	687a      	ldr	r2, [r7, #4]
 8013c68:	68b9      	ldr	r1, [r7, #8]
 8013c6a:	68f8      	ldr	r0, [r7, #12]
 8013c6c:	f000 f850 	bl	8013d10 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013c70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013c72:	f000 f8dd 	bl	8013e30 <prvAddNewTaskToReadyList>
 8013c76:	e001      	b.n	8013c7c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8013c78:	2300      	movs	r3, #0
 8013c7a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8013c7c:	697b      	ldr	r3, [r7, #20]
	}
 8013c7e:	4618      	mov	r0, r3
 8013c80:	3728      	adds	r7, #40	; 0x28
 8013c82:	46bd      	mov	sp, r7
 8013c84:	bd80      	pop	{r7, pc}

08013c86 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8013c86:	b580      	push	{r7, lr}
 8013c88:	b08c      	sub	sp, #48	; 0x30
 8013c8a:	af04      	add	r7, sp, #16
 8013c8c:	60f8      	str	r0, [r7, #12]
 8013c8e:	60b9      	str	r1, [r7, #8]
 8013c90:	603b      	str	r3, [r7, #0]
 8013c92:	4613      	mov	r3, r2
 8013c94:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8013c96:	88fb      	ldrh	r3, [r7, #6]
 8013c98:	009b      	lsls	r3, r3, #2
 8013c9a:	4618      	mov	r0, r3
 8013c9c:	f001 fe94 	bl	80159c8 <pvPortMalloc>
 8013ca0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8013ca2:	697b      	ldr	r3, [r7, #20]
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	d00e      	beq.n	8013cc6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8013ca8:	205c      	movs	r0, #92	; 0x5c
 8013caa:	f001 fe8d 	bl	80159c8 <pvPortMalloc>
 8013cae:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8013cb0:	69fb      	ldr	r3, [r7, #28]
 8013cb2:	2b00      	cmp	r3, #0
 8013cb4:	d003      	beq.n	8013cbe <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8013cb6:	69fb      	ldr	r3, [r7, #28]
 8013cb8:	697a      	ldr	r2, [r7, #20]
 8013cba:	631a      	str	r2, [r3, #48]	; 0x30
 8013cbc:	e005      	b.n	8013cca <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8013cbe:	6978      	ldr	r0, [r7, #20]
 8013cc0:	f001 ff4e 	bl	8015b60 <vPortFree>
 8013cc4:	e001      	b.n	8013cca <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8013cc6:	2300      	movs	r3, #0
 8013cc8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8013cca:	69fb      	ldr	r3, [r7, #28]
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	d017      	beq.n	8013d00 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8013cd0:	69fb      	ldr	r3, [r7, #28]
 8013cd2:	2200      	movs	r2, #0
 8013cd4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8013cd8:	88fa      	ldrh	r2, [r7, #6]
 8013cda:	2300      	movs	r3, #0
 8013cdc:	9303      	str	r3, [sp, #12]
 8013cde:	69fb      	ldr	r3, [r7, #28]
 8013ce0:	9302      	str	r3, [sp, #8]
 8013ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ce4:	9301      	str	r3, [sp, #4]
 8013ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ce8:	9300      	str	r3, [sp, #0]
 8013cea:	683b      	ldr	r3, [r7, #0]
 8013cec:	68b9      	ldr	r1, [r7, #8]
 8013cee:	68f8      	ldr	r0, [r7, #12]
 8013cf0:	f000 f80e 	bl	8013d10 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013cf4:	69f8      	ldr	r0, [r7, #28]
 8013cf6:	f000 f89b 	bl	8013e30 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8013cfa:	2301      	movs	r3, #1
 8013cfc:	61bb      	str	r3, [r7, #24]
 8013cfe:	e002      	b.n	8013d06 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8013d00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013d04:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8013d06:	69bb      	ldr	r3, [r7, #24]
	}
 8013d08:	4618      	mov	r0, r3
 8013d0a:	3720      	adds	r7, #32
 8013d0c:	46bd      	mov	sp, r7
 8013d0e:	bd80      	pop	{r7, pc}

08013d10 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8013d10:	b580      	push	{r7, lr}
 8013d12:	b088      	sub	sp, #32
 8013d14:	af00      	add	r7, sp, #0
 8013d16:	60f8      	str	r0, [r7, #12]
 8013d18:	60b9      	str	r1, [r7, #8]
 8013d1a:	607a      	str	r2, [r7, #4]
 8013d1c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8013d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d20:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	009b      	lsls	r3, r3, #2
 8013d26:	461a      	mov	r2, r3
 8013d28:	21a5      	movs	r1, #165	; 0xa5
 8013d2a:	f002 f87f 	bl	8015e2c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8013d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013d32:	6879      	ldr	r1, [r7, #4]
 8013d34:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8013d38:	440b      	add	r3, r1
 8013d3a:	009b      	lsls	r3, r3, #2
 8013d3c:	4413      	add	r3, r2
 8013d3e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8013d40:	69bb      	ldr	r3, [r7, #24]
 8013d42:	f023 0307 	bic.w	r3, r3, #7
 8013d46:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8013d48:	69bb      	ldr	r3, [r7, #24]
 8013d4a:	f003 0307 	and.w	r3, r3, #7
 8013d4e:	2b00      	cmp	r3, #0
 8013d50:	d00a      	beq.n	8013d68 <prvInitialiseNewTask+0x58>
	__asm volatile
 8013d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d56:	f383 8811 	msr	BASEPRI, r3
 8013d5a:	f3bf 8f6f 	isb	sy
 8013d5e:	f3bf 8f4f 	dsb	sy
 8013d62:	617b      	str	r3, [r7, #20]
}
 8013d64:	bf00      	nop
 8013d66:	e7fe      	b.n	8013d66 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8013d68:	68bb      	ldr	r3, [r7, #8]
 8013d6a:	2b00      	cmp	r3, #0
 8013d6c:	d01f      	beq.n	8013dae <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013d6e:	2300      	movs	r3, #0
 8013d70:	61fb      	str	r3, [r7, #28]
 8013d72:	e012      	b.n	8013d9a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013d74:	68ba      	ldr	r2, [r7, #8]
 8013d76:	69fb      	ldr	r3, [r7, #28]
 8013d78:	4413      	add	r3, r2
 8013d7a:	7819      	ldrb	r1, [r3, #0]
 8013d7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013d7e:	69fb      	ldr	r3, [r7, #28]
 8013d80:	4413      	add	r3, r2
 8013d82:	3334      	adds	r3, #52	; 0x34
 8013d84:	460a      	mov	r2, r1
 8013d86:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8013d88:	68ba      	ldr	r2, [r7, #8]
 8013d8a:	69fb      	ldr	r3, [r7, #28]
 8013d8c:	4413      	add	r3, r2
 8013d8e:	781b      	ldrb	r3, [r3, #0]
 8013d90:	2b00      	cmp	r3, #0
 8013d92:	d006      	beq.n	8013da2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013d94:	69fb      	ldr	r3, [r7, #28]
 8013d96:	3301      	adds	r3, #1
 8013d98:	61fb      	str	r3, [r7, #28]
 8013d9a:	69fb      	ldr	r3, [r7, #28]
 8013d9c:	2b0f      	cmp	r3, #15
 8013d9e:	d9e9      	bls.n	8013d74 <prvInitialiseNewTask+0x64>
 8013da0:	e000      	b.n	8013da4 <prvInitialiseNewTask+0x94>
			{
				break;
 8013da2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8013da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013da6:	2200      	movs	r2, #0
 8013da8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8013dac:	e003      	b.n	8013db6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8013dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013db0:	2200      	movs	r2, #0
 8013db2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8013db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013db8:	2b37      	cmp	r3, #55	; 0x37
 8013dba:	d901      	bls.n	8013dc0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8013dbc:	2337      	movs	r3, #55	; 0x37
 8013dbe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8013dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013dc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013dc4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8013dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013dc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013dca:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8013dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013dce:	2200      	movs	r2, #0
 8013dd0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8013dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013dd4:	3304      	adds	r3, #4
 8013dd6:	4618      	mov	r0, r3
 8013dd8:	f7ff f8be 	bl	8012f58 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8013ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013dde:	3318      	adds	r3, #24
 8013de0:	4618      	mov	r0, r3
 8013de2:	f7ff f8b9 	bl	8012f58 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8013de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013de8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013dea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013dee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013df4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8013df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013df8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013dfa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8013dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013dfe:	2200      	movs	r2, #0
 8013e00:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e04:	2200      	movs	r2, #0
 8013e06:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8013e0a:	683a      	ldr	r2, [r7, #0]
 8013e0c:	68f9      	ldr	r1, [r7, #12]
 8013e0e:	69b8      	ldr	r0, [r7, #24]
 8013e10:	f001 fb8a 	bl	8015528 <pxPortInitialiseStack>
 8013e14:	4602      	mov	r2, r0
 8013e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e18:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8013e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e1c:	2b00      	cmp	r3, #0
 8013e1e:	d002      	beq.n	8013e26 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8013e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013e24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013e26:	bf00      	nop
 8013e28:	3720      	adds	r7, #32
 8013e2a:	46bd      	mov	sp, r7
 8013e2c:	bd80      	pop	{r7, pc}
	...

08013e30 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8013e30:	b580      	push	{r7, lr}
 8013e32:	b082      	sub	sp, #8
 8013e34:	af00      	add	r7, sp, #0
 8013e36:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8013e38:	f001 fca4 	bl	8015784 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8013e3c:	4b2d      	ldr	r3, [pc, #180]	; (8013ef4 <prvAddNewTaskToReadyList+0xc4>)
 8013e3e:	681b      	ldr	r3, [r3, #0]
 8013e40:	3301      	adds	r3, #1
 8013e42:	4a2c      	ldr	r2, [pc, #176]	; (8013ef4 <prvAddNewTaskToReadyList+0xc4>)
 8013e44:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8013e46:	4b2c      	ldr	r3, [pc, #176]	; (8013ef8 <prvAddNewTaskToReadyList+0xc8>)
 8013e48:	681b      	ldr	r3, [r3, #0]
 8013e4a:	2b00      	cmp	r3, #0
 8013e4c:	d109      	bne.n	8013e62 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8013e4e:	4a2a      	ldr	r2, [pc, #168]	; (8013ef8 <prvAddNewTaskToReadyList+0xc8>)
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8013e54:	4b27      	ldr	r3, [pc, #156]	; (8013ef4 <prvAddNewTaskToReadyList+0xc4>)
 8013e56:	681b      	ldr	r3, [r3, #0]
 8013e58:	2b01      	cmp	r3, #1
 8013e5a:	d110      	bne.n	8013e7e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8013e5c:	f000 fe40 	bl	8014ae0 <prvInitialiseTaskLists>
 8013e60:	e00d      	b.n	8013e7e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8013e62:	4b26      	ldr	r3, [pc, #152]	; (8013efc <prvAddNewTaskToReadyList+0xcc>)
 8013e64:	681b      	ldr	r3, [r3, #0]
 8013e66:	2b00      	cmp	r3, #0
 8013e68:	d109      	bne.n	8013e7e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8013e6a:	4b23      	ldr	r3, [pc, #140]	; (8013ef8 <prvAddNewTaskToReadyList+0xc8>)
 8013e6c:	681b      	ldr	r3, [r3, #0]
 8013e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e74:	429a      	cmp	r2, r3
 8013e76:	d802      	bhi.n	8013e7e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8013e78:	4a1f      	ldr	r2, [pc, #124]	; (8013ef8 <prvAddNewTaskToReadyList+0xc8>)
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8013e7e:	4b20      	ldr	r3, [pc, #128]	; (8013f00 <prvAddNewTaskToReadyList+0xd0>)
 8013e80:	681b      	ldr	r3, [r3, #0]
 8013e82:	3301      	adds	r3, #1
 8013e84:	4a1e      	ldr	r2, [pc, #120]	; (8013f00 <prvAddNewTaskToReadyList+0xd0>)
 8013e86:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8013e88:	4b1d      	ldr	r3, [pc, #116]	; (8013f00 <prvAddNewTaskToReadyList+0xd0>)
 8013e8a:	681a      	ldr	r2, [r3, #0]
 8013e8c:	687b      	ldr	r3, [r7, #4]
 8013e8e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013e94:	4b1b      	ldr	r3, [pc, #108]	; (8013f04 <prvAddNewTaskToReadyList+0xd4>)
 8013e96:	681b      	ldr	r3, [r3, #0]
 8013e98:	429a      	cmp	r2, r3
 8013e9a:	d903      	bls.n	8013ea4 <prvAddNewTaskToReadyList+0x74>
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ea0:	4a18      	ldr	r2, [pc, #96]	; (8013f04 <prvAddNewTaskToReadyList+0xd4>)
 8013ea2:	6013      	str	r3, [r2, #0]
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ea8:	4613      	mov	r3, r2
 8013eaa:	009b      	lsls	r3, r3, #2
 8013eac:	4413      	add	r3, r2
 8013eae:	009b      	lsls	r3, r3, #2
 8013eb0:	4a15      	ldr	r2, [pc, #84]	; (8013f08 <prvAddNewTaskToReadyList+0xd8>)
 8013eb2:	441a      	add	r2, r3
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	3304      	adds	r3, #4
 8013eb8:	4619      	mov	r1, r3
 8013eba:	4610      	mov	r0, r2
 8013ebc:	f7ff f859 	bl	8012f72 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8013ec0:	f001 fc90 	bl	80157e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8013ec4:	4b0d      	ldr	r3, [pc, #52]	; (8013efc <prvAddNewTaskToReadyList+0xcc>)
 8013ec6:	681b      	ldr	r3, [r3, #0]
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	d00e      	beq.n	8013eea <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8013ecc:	4b0a      	ldr	r3, [pc, #40]	; (8013ef8 <prvAddNewTaskToReadyList+0xc8>)
 8013ece:	681b      	ldr	r3, [r3, #0]
 8013ed0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ed6:	429a      	cmp	r2, r3
 8013ed8:	d207      	bcs.n	8013eea <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8013eda:	4b0c      	ldr	r3, [pc, #48]	; (8013f0c <prvAddNewTaskToReadyList+0xdc>)
 8013edc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013ee0:	601a      	str	r2, [r3, #0]
 8013ee2:	f3bf 8f4f 	dsb	sy
 8013ee6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013eea:	bf00      	nop
 8013eec:	3708      	adds	r7, #8
 8013eee:	46bd      	mov	sp, r7
 8013ef0:	bd80      	pop	{r7, pc}
 8013ef2:	bf00      	nop
 8013ef4:	24001cdc 	.word	0x24001cdc
 8013ef8:	24001808 	.word	0x24001808
 8013efc:	24001ce8 	.word	0x24001ce8
 8013f00:	24001cf8 	.word	0x24001cf8
 8013f04:	24001ce4 	.word	0x24001ce4
 8013f08:	2400180c 	.word	0x2400180c
 8013f0c:	e000ed04 	.word	0xe000ed04

08013f10 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8013f10:	b580      	push	{r7, lr}
 8013f12:	b084      	sub	sp, #16
 8013f14:	af00      	add	r7, sp, #0
 8013f16:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8013f18:	f001 fc34 	bl	8015784 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	d102      	bne.n	8013f28 <vTaskDelete+0x18>
 8013f22:	4b2c      	ldr	r3, [pc, #176]	; (8013fd4 <vTaskDelete+0xc4>)
 8013f24:	681b      	ldr	r3, [r3, #0]
 8013f26:	e000      	b.n	8013f2a <vTaskDelete+0x1a>
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013f2c:	68fb      	ldr	r3, [r7, #12]
 8013f2e:	3304      	adds	r3, #4
 8013f30:	4618      	mov	r0, r3
 8013f32:	f7ff f87b 	bl	801302c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013f36:	68fb      	ldr	r3, [r7, #12]
 8013f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013f3a:	2b00      	cmp	r3, #0
 8013f3c:	d004      	beq.n	8013f48 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013f3e:	68fb      	ldr	r3, [r7, #12]
 8013f40:	3318      	adds	r3, #24
 8013f42:	4618      	mov	r0, r3
 8013f44:	f7ff f872 	bl	801302c <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8013f48:	4b23      	ldr	r3, [pc, #140]	; (8013fd8 <vTaskDelete+0xc8>)
 8013f4a:	681b      	ldr	r3, [r3, #0]
 8013f4c:	3301      	adds	r3, #1
 8013f4e:	4a22      	ldr	r2, [pc, #136]	; (8013fd8 <vTaskDelete+0xc8>)
 8013f50:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8013f52:	4b20      	ldr	r3, [pc, #128]	; (8013fd4 <vTaskDelete+0xc4>)
 8013f54:	681b      	ldr	r3, [r3, #0]
 8013f56:	68fa      	ldr	r2, [r7, #12]
 8013f58:	429a      	cmp	r2, r3
 8013f5a:	d10b      	bne.n	8013f74 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8013f5c:	68fb      	ldr	r3, [r7, #12]
 8013f5e:	3304      	adds	r3, #4
 8013f60:	4619      	mov	r1, r3
 8013f62:	481e      	ldr	r0, [pc, #120]	; (8013fdc <vTaskDelete+0xcc>)
 8013f64:	f7ff f805 	bl	8012f72 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8013f68:	4b1d      	ldr	r3, [pc, #116]	; (8013fe0 <vTaskDelete+0xd0>)
 8013f6a:	681b      	ldr	r3, [r3, #0]
 8013f6c:	3301      	adds	r3, #1
 8013f6e:	4a1c      	ldr	r2, [pc, #112]	; (8013fe0 <vTaskDelete+0xd0>)
 8013f70:	6013      	str	r3, [r2, #0]
 8013f72:	e009      	b.n	8013f88 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8013f74:	4b1b      	ldr	r3, [pc, #108]	; (8013fe4 <vTaskDelete+0xd4>)
 8013f76:	681b      	ldr	r3, [r3, #0]
 8013f78:	3b01      	subs	r3, #1
 8013f7a:	4a1a      	ldr	r2, [pc, #104]	; (8013fe4 <vTaskDelete+0xd4>)
 8013f7c:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8013f7e:	68f8      	ldr	r0, [r7, #12]
 8013f80:	f000 fe1c 	bl	8014bbc <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8013f84:	f000 fe4a 	bl	8014c1c <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8013f88:	f001 fc2c 	bl	80157e4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8013f8c:	4b16      	ldr	r3, [pc, #88]	; (8013fe8 <vTaskDelete+0xd8>)
 8013f8e:	681b      	ldr	r3, [r3, #0]
 8013f90:	2b00      	cmp	r3, #0
 8013f92:	d01b      	beq.n	8013fcc <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8013f94:	4b0f      	ldr	r3, [pc, #60]	; (8013fd4 <vTaskDelete+0xc4>)
 8013f96:	681b      	ldr	r3, [r3, #0]
 8013f98:	68fa      	ldr	r2, [r7, #12]
 8013f9a:	429a      	cmp	r2, r3
 8013f9c:	d116      	bne.n	8013fcc <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8013f9e:	4b13      	ldr	r3, [pc, #76]	; (8013fec <vTaskDelete+0xdc>)
 8013fa0:	681b      	ldr	r3, [r3, #0]
 8013fa2:	2b00      	cmp	r3, #0
 8013fa4:	d00a      	beq.n	8013fbc <vTaskDelete+0xac>
	__asm volatile
 8013fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013faa:	f383 8811 	msr	BASEPRI, r3
 8013fae:	f3bf 8f6f 	isb	sy
 8013fb2:	f3bf 8f4f 	dsb	sy
 8013fb6:	60bb      	str	r3, [r7, #8]
}
 8013fb8:	bf00      	nop
 8013fba:	e7fe      	b.n	8013fba <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8013fbc:	4b0c      	ldr	r3, [pc, #48]	; (8013ff0 <vTaskDelete+0xe0>)
 8013fbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013fc2:	601a      	str	r2, [r3, #0]
 8013fc4:	f3bf 8f4f 	dsb	sy
 8013fc8:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8013fcc:	bf00      	nop
 8013fce:	3710      	adds	r7, #16
 8013fd0:	46bd      	mov	sp, r7
 8013fd2:	bd80      	pop	{r7, pc}
 8013fd4:	24001808 	.word	0x24001808
 8013fd8:	24001cf8 	.word	0x24001cf8
 8013fdc:	24001cb0 	.word	0x24001cb0
 8013fe0:	24001cc4 	.word	0x24001cc4
 8013fe4:	24001cdc 	.word	0x24001cdc
 8013fe8:	24001ce8 	.word	0x24001ce8
 8013fec:	24001d04 	.word	0x24001d04
 8013ff0:	e000ed04 	.word	0xe000ed04

08013ff4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8013ff4:	b580      	push	{r7, lr}
 8013ff6:	b084      	sub	sp, #16
 8013ff8:	af00      	add	r7, sp, #0
 8013ffa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8013ffc:	2300      	movs	r3, #0
 8013ffe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8014000:	687b      	ldr	r3, [r7, #4]
 8014002:	2b00      	cmp	r3, #0
 8014004:	d017      	beq.n	8014036 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8014006:	4b13      	ldr	r3, [pc, #76]	; (8014054 <vTaskDelay+0x60>)
 8014008:	681b      	ldr	r3, [r3, #0]
 801400a:	2b00      	cmp	r3, #0
 801400c:	d00a      	beq.n	8014024 <vTaskDelay+0x30>
	__asm volatile
 801400e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014012:	f383 8811 	msr	BASEPRI, r3
 8014016:	f3bf 8f6f 	isb	sy
 801401a:	f3bf 8f4f 	dsb	sy
 801401e:	60bb      	str	r3, [r7, #8]
}
 8014020:	bf00      	nop
 8014022:	e7fe      	b.n	8014022 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8014024:	f000 f99a 	bl	801435c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8014028:	2100      	movs	r1, #0
 801402a:	6878      	ldr	r0, [r7, #4]
 801402c:	f000 feba 	bl	8014da4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8014030:	f000 f9a2 	bl	8014378 <xTaskResumeAll>
 8014034:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8014036:	68fb      	ldr	r3, [r7, #12]
 8014038:	2b00      	cmp	r3, #0
 801403a:	d107      	bne.n	801404c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 801403c:	4b06      	ldr	r3, [pc, #24]	; (8014058 <vTaskDelay+0x64>)
 801403e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014042:	601a      	str	r2, [r3, #0]
 8014044:	f3bf 8f4f 	dsb	sy
 8014048:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801404c:	bf00      	nop
 801404e:	3710      	adds	r7, #16
 8014050:	46bd      	mov	sp, r7
 8014052:	bd80      	pop	{r7, pc}
 8014054:	24001d04 	.word	0x24001d04
 8014058:	e000ed04 	.word	0xe000ed04

0801405c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 801405c:	b580      	push	{r7, lr}
 801405e:	b084      	sub	sp, #16
 8014060:	af00      	add	r7, sp, #0
 8014062:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8014064:	f001 fb8e 	bl	8015784 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8014068:	687b      	ldr	r3, [r7, #4]
 801406a:	2b00      	cmp	r3, #0
 801406c:	d102      	bne.n	8014074 <vTaskSuspend+0x18>
 801406e:	4b30      	ldr	r3, [pc, #192]	; (8014130 <vTaskSuspend+0xd4>)
 8014070:	681b      	ldr	r3, [r3, #0]
 8014072:	e000      	b.n	8014076 <vTaskSuspend+0x1a>
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014078:	68fb      	ldr	r3, [r7, #12]
 801407a:	3304      	adds	r3, #4
 801407c:	4618      	mov	r0, r3
 801407e:	f7fe ffd5 	bl	801302c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014082:	68fb      	ldr	r3, [r7, #12]
 8014084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014086:	2b00      	cmp	r3, #0
 8014088:	d004      	beq.n	8014094 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801408a:	68fb      	ldr	r3, [r7, #12]
 801408c:	3318      	adds	r3, #24
 801408e:	4618      	mov	r0, r3
 8014090:	f7fe ffcc 	bl	801302c <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8014094:	68fb      	ldr	r3, [r7, #12]
 8014096:	3304      	adds	r3, #4
 8014098:	4619      	mov	r1, r3
 801409a:	4826      	ldr	r0, [pc, #152]	; (8014134 <vTaskSuspend+0xd8>)
 801409c:	f7fe ff69 	bl	8012f72 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80140a0:	68fb      	ldr	r3, [r7, #12]
 80140a2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80140a6:	b2db      	uxtb	r3, r3
 80140a8:	2b01      	cmp	r3, #1
 80140aa:	d103      	bne.n	80140b4 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80140ac:	68fb      	ldr	r3, [r7, #12]
 80140ae:	2200      	movs	r2, #0
 80140b0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80140b4:	f001 fb96 	bl	80157e4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80140b8:	4b1f      	ldr	r3, [pc, #124]	; (8014138 <vTaskSuspend+0xdc>)
 80140ba:	681b      	ldr	r3, [r3, #0]
 80140bc:	2b00      	cmp	r3, #0
 80140be:	d005      	beq.n	80140cc <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80140c0:	f001 fb60 	bl	8015784 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80140c4:	f000 fdaa 	bl	8014c1c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80140c8:	f001 fb8c 	bl	80157e4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80140cc:	4b18      	ldr	r3, [pc, #96]	; (8014130 <vTaskSuspend+0xd4>)
 80140ce:	681b      	ldr	r3, [r3, #0]
 80140d0:	68fa      	ldr	r2, [r7, #12]
 80140d2:	429a      	cmp	r2, r3
 80140d4:	d127      	bne.n	8014126 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 80140d6:	4b18      	ldr	r3, [pc, #96]	; (8014138 <vTaskSuspend+0xdc>)
 80140d8:	681b      	ldr	r3, [r3, #0]
 80140da:	2b00      	cmp	r3, #0
 80140dc:	d017      	beq.n	801410e <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80140de:	4b17      	ldr	r3, [pc, #92]	; (801413c <vTaskSuspend+0xe0>)
 80140e0:	681b      	ldr	r3, [r3, #0]
 80140e2:	2b00      	cmp	r3, #0
 80140e4:	d00a      	beq.n	80140fc <vTaskSuspend+0xa0>
	__asm volatile
 80140e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140ea:	f383 8811 	msr	BASEPRI, r3
 80140ee:	f3bf 8f6f 	isb	sy
 80140f2:	f3bf 8f4f 	dsb	sy
 80140f6:	60bb      	str	r3, [r7, #8]
}
 80140f8:	bf00      	nop
 80140fa:	e7fe      	b.n	80140fa <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 80140fc:	4b10      	ldr	r3, [pc, #64]	; (8014140 <vTaskSuspend+0xe4>)
 80140fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014102:	601a      	str	r2, [r3, #0]
 8014104:	f3bf 8f4f 	dsb	sy
 8014108:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801410c:	e00b      	b.n	8014126 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 801410e:	4b09      	ldr	r3, [pc, #36]	; (8014134 <vTaskSuspend+0xd8>)
 8014110:	681a      	ldr	r2, [r3, #0]
 8014112:	4b0c      	ldr	r3, [pc, #48]	; (8014144 <vTaskSuspend+0xe8>)
 8014114:	681b      	ldr	r3, [r3, #0]
 8014116:	429a      	cmp	r2, r3
 8014118:	d103      	bne.n	8014122 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 801411a:	4b05      	ldr	r3, [pc, #20]	; (8014130 <vTaskSuspend+0xd4>)
 801411c:	2200      	movs	r2, #0
 801411e:	601a      	str	r2, [r3, #0]
	}
 8014120:	e001      	b.n	8014126 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 8014122:	f000 fa91 	bl	8014648 <vTaskSwitchContext>
	}
 8014126:	bf00      	nop
 8014128:	3710      	adds	r7, #16
 801412a:	46bd      	mov	sp, r7
 801412c:	bd80      	pop	{r7, pc}
 801412e:	bf00      	nop
 8014130:	24001808 	.word	0x24001808
 8014134:	24001cc8 	.word	0x24001cc8
 8014138:	24001ce8 	.word	0x24001ce8
 801413c:	24001d04 	.word	0x24001d04
 8014140:	e000ed04 	.word	0xe000ed04
 8014144:	24001cdc 	.word	0x24001cdc

08014148 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8014148:	b480      	push	{r7}
 801414a:	b087      	sub	sp, #28
 801414c:	af00      	add	r7, sp, #0
 801414e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8014150:	2300      	movs	r3, #0
 8014152:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	2b00      	cmp	r3, #0
 801415c:	d10a      	bne.n	8014174 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 801415e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014162:	f383 8811 	msr	BASEPRI, r3
 8014166:	f3bf 8f6f 	isb	sy
 801416a:	f3bf 8f4f 	dsb	sy
 801416e:	60fb      	str	r3, [r7, #12]
}
 8014170:	bf00      	nop
 8014172:	e7fe      	b.n	8014172 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8014174:	693b      	ldr	r3, [r7, #16]
 8014176:	695b      	ldr	r3, [r3, #20]
 8014178:	4a0a      	ldr	r2, [pc, #40]	; (80141a4 <prvTaskIsTaskSuspended+0x5c>)
 801417a:	4293      	cmp	r3, r2
 801417c:	d10a      	bne.n	8014194 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 801417e:	693b      	ldr	r3, [r7, #16]
 8014180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014182:	4a09      	ldr	r2, [pc, #36]	; (80141a8 <prvTaskIsTaskSuspended+0x60>)
 8014184:	4293      	cmp	r3, r2
 8014186:	d005      	beq.n	8014194 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8014188:	693b      	ldr	r3, [r7, #16]
 801418a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801418c:	2b00      	cmp	r3, #0
 801418e:	d101      	bne.n	8014194 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8014190:	2301      	movs	r3, #1
 8014192:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014194:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8014196:	4618      	mov	r0, r3
 8014198:	371c      	adds	r7, #28
 801419a:	46bd      	mov	sp, r7
 801419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141a0:	4770      	bx	lr
 80141a2:	bf00      	nop
 80141a4:	24001cc8 	.word	0x24001cc8
 80141a8:	24001c9c 	.word	0x24001c9c

080141ac <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 80141ac:	b580      	push	{r7, lr}
 80141ae:	b08a      	sub	sp, #40	; 0x28
 80141b0:	af00      	add	r7, sp, #0
 80141b2:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 80141b4:	2300      	movs	r3, #0
 80141b6:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 80141b8:	687b      	ldr	r3, [r7, #4]
 80141ba:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 80141bc:	687b      	ldr	r3, [r7, #4]
 80141be:	2b00      	cmp	r3, #0
 80141c0:	d10a      	bne.n	80141d8 <xTaskResumeFromISR+0x2c>
	__asm volatile
 80141c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141c6:	f383 8811 	msr	BASEPRI, r3
 80141ca:	f3bf 8f6f 	isb	sy
 80141ce:	f3bf 8f4f 	dsb	sy
 80141d2:	61bb      	str	r3, [r7, #24]
}
 80141d4:	bf00      	nop
 80141d6:	e7fe      	b.n	80141d6 <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80141d8:	f001 fbb6 	bl	8015948 <vPortValidateInterruptPriority>
	__asm volatile
 80141dc:	f3ef 8211 	mrs	r2, BASEPRI
 80141e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141e4:	f383 8811 	msr	BASEPRI, r3
 80141e8:	f3bf 8f6f 	isb	sy
 80141ec:	f3bf 8f4f 	dsb	sy
 80141f0:	617a      	str	r2, [r7, #20]
 80141f2:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80141f4:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80141f6:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80141f8:	6a38      	ldr	r0, [r7, #32]
 80141fa:	f7ff ffa5 	bl	8014148 <prvTaskIsTaskSuspended>
 80141fe:	4603      	mov	r3, r0
 8014200:	2b00      	cmp	r3, #0
 8014202:	d030      	beq.n	8014266 <xTaskResumeFromISR+0xba>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014204:	4b1d      	ldr	r3, [pc, #116]	; (801427c <xTaskResumeFromISR+0xd0>)
 8014206:	681b      	ldr	r3, [r3, #0]
 8014208:	2b00      	cmp	r3, #0
 801420a:	d126      	bne.n	801425a <xTaskResumeFromISR+0xae>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801420c:	6a3b      	ldr	r3, [r7, #32]
 801420e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014210:	4b1b      	ldr	r3, [pc, #108]	; (8014280 <xTaskResumeFromISR+0xd4>)
 8014212:	681b      	ldr	r3, [r3, #0]
 8014214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014216:	429a      	cmp	r2, r3
 8014218:	d301      	bcc.n	801421e <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 801421a:	2301      	movs	r3, #1
 801421c:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801421e:	6a3b      	ldr	r3, [r7, #32]
 8014220:	3304      	adds	r3, #4
 8014222:	4618      	mov	r0, r3
 8014224:	f7fe ff02 	bl	801302c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014228:	6a3b      	ldr	r3, [r7, #32]
 801422a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801422c:	4b15      	ldr	r3, [pc, #84]	; (8014284 <xTaskResumeFromISR+0xd8>)
 801422e:	681b      	ldr	r3, [r3, #0]
 8014230:	429a      	cmp	r2, r3
 8014232:	d903      	bls.n	801423c <xTaskResumeFromISR+0x90>
 8014234:	6a3b      	ldr	r3, [r7, #32]
 8014236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014238:	4a12      	ldr	r2, [pc, #72]	; (8014284 <xTaskResumeFromISR+0xd8>)
 801423a:	6013      	str	r3, [r2, #0]
 801423c:	6a3b      	ldr	r3, [r7, #32]
 801423e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014240:	4613      	mov	r3, r2
 8014242:	009b      	lsls	r3, r3, #2
 8014244:	4413      	add	r3, r2
 8014246:	009b      	lsls	r3, r3, #2
 8014248:	4a0f      	ldr	r2, [pc, #60]	; (8014288 <xTaskResumeFromISR+0xdc>)
 801424a:	441a      	add	r2, r3
 801424c:	6a3b      	ldr	r3, [r7, #32]
 801424e:	3304      	adds	r3, #4
 8014250:	4619      	mov	r1, r3
 8014252:	4610      	mov	r0, r2
 8014254:	f7fe fe8d 	bl	8012f72 <vListInsertEnd>
 8014258:	e005      	b.n	8014266 <xTaskResumeFromISR+0xba>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 801425a:	6a3b      	ldr	r3, [r7, #32]
 801425c:	3318      	adds	r3, #24
 801425e:	4619      	mov	r1, r3
 8014260:	480a      	ldr	r0, [pc, #40]	; (801428c <xTaskResumeFromISR+0xe0>)
 8014262:	f7fe fe86 	bl	8012f72 <vListInsertEnd>
 8014266:	69fb      	ldr	r3, [r7, #28]
 8014268:	60fb      	str	r3, [r7, #12]
	__asm volatile
 801426a:	68fb      	ldr	r3, [r7, #12]
 801426c:	f383 8811 	msr	BASEPRI, r3
}
 8014270:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8014272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8014274:	4618      	mov	r0, r3
 8014276:	3728      	adds	r7, #40	; 0x28
 8014278:	46bd      	mov	sp, r7
 801427a:	bd80      	pop	{r7, pc}
 801427c:	24001d04 	.word	0x24001d04
 8014280:	24001808 	.word	0x24001808
 8014284:	24001ce4 	.word	0x24001ce4
 8014288:	2400180c 	.word	0x2400180c
 801428c:	24001c9c 	.word	0x24001c9c

08014290 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8014290:	b580      	push	{r7, lr}
 8014292:	b08a      	sub	sp, #40	; 0x28
 8014294:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8014296:	2300      	movs	r3, #0
 8014298:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801429a:	2300      	movs	r3, #0
 801429c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801429e:	463a      	mov	r2, r7
 80142a0:	1d39      	adds	r1, r7, #4
 80142a2:	f107 0308 	add.w	r3, r7, #8
 80142a6:	4618      	mov	r0, r3
 80142a8:	f7fe fc14 	bl	8012ad4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80142ac:	6839      	ldr	r1, [r7, #0]
 80142ae:	687b      	ldr	r3, [r7, #4]
 80142b0:	68ba      	ldr	r2, [r7, #8]
 80142b2:	9202      	str	r2, [sp, #8]
 80142b4:	9301      	str	r3, [sp, #4]
 80142b6:	2300      	movs	r3, #0
 80142b8:	9300      	str	r3, [sp, #0]
 80142ba:	2300      	movs	r3, #0
 80142bc:	460a      	mov	r2, r1
 80142be:	4921      	ldr	r1, [pc, #132]	; (8014344 <vTaskStartScheduler+0xb4>)
 80142c0:	4821      	ldr	r0, [pc, #132]	; (8014348 <vTaskStartScheduler+0xb8>)
 80142c2:	f7ff fc83 	bl	8013bcc <xTaskCreateStatic>
 80142c6:	4603      	mov	r3, r0
 80142c8:	4a20      	ldr	r2, [pc, #128]	; (801434c <vTaskStartScheduler+0xbc>)
 80142ca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80142cc:	4b1f      	ldr	r3, [pc, #124]	; (801434c <vTaskStartScheduler+0xbc>)
 80142ce:	681b      	ldr	r3, [r3, #0]
 80142d0:	2b00      	cmp	r3, #0
 80142d2:	d002      	beq.n	80142da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80142d4:	2301      	movs	r3, #1
 80142d6:	617b      	str	r3, [r7, #20]
 80142d8:	e001      	b.n	80142de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80142da:	2300      	movs	r3, #0
 80142dc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80142de:	697b      	ldr	r3, [r7, #20]
 80142e0:	2b01      	cmp	r3, #1
 80142e2:	d102      	bne.n	80142ea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80142e4:	f000 fdb2 	bl	8014e4c <xTimerCreateTimerTask>
 80142e8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80142ea:	697b      	ldr	r3, [r7, #20]
 80142ec:	2b01      	cmp	r3, #1
 80142ee:	d116      	bne.n	801431e <vTaskStartScheduler+0x8e>
	__asm volatile
 80142f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142f4:	f383 8811 	msr	BASEPRI, r3
 80142f8:	f3bf 8f6f 	isb	sy
 80142fc:	f3bf 8f4f 	dsb	sy
 8014300:	613b      	str	r3, [r7, #16]
}
 8014302:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8014304:	4b12      	ldr	r3, [pc, #72]	; (8014350 <vTaskStartScheduler+0xc0>)
 8014306:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801430a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801430c:	4b11      	ldr	r3, [pc, #68]	; (8014354 <vTaskStartScheduler+0xc4>)
 801430e:	2201      	movs	r2, #1
 8014310:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8014312:	4b11      	ldr	r3, [pc, #68]	; (8014358 <vTaskStartScheduler+0xc8>)
 8014314:	2200      	movs	r2, #0
 8014316:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8014318:	f001 f992 	bl	8015640 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801431c:	e00e      	b.n	801433c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801431e:	697b      	ldr	r3, [r7, #20]
 8014320:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014324:	d10a      	bne.n	801433c <vTaskStartScheduler+0xac>
	__asm volatile
 8014326:	f04f 0350 	mov.w	r3, #80	; 0x50
 801432a:	f383 8811 	msr	BASEPRI, r3
 801432e:	f3bf 8f6f 	isb	sy
 8014332:	f3bf 8f4f 	dsb	sy
 8014336:	60fb      	str	r3, [r7, #12]
}
 8014338:	bf00      	nop
 801433a:	e7fe      	b.n	801433a <vTaskStartScheduler+0xaa>
}
 801433c:	bf00      	nop
 801433e:	3718      	adds	r7, #24
 8014340:	46bd      	mov	sp, r7
 8014342:	bd80      	pop	{r7, pc}
 8014344:	08016abc 	.word	0x08016abc
 8014348:	08014ab1 	.word	0x08014ab1
 801434c:	24001d00 	.word	0x24001d00
 8014350:	24001cfc 	.word	0x24001cfc
 8014354:	24001ce8 	.word	0x24001ce8
 8014358:	24001ce0 	.word	0x24001ce0

0801435c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801435c:	b480      	push	{r7}
 801435e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8014360:	4b04      	ldr	r3, [pc, #16]	; (8014374 <vTaskSuspendAll+0x18>)
 8014362:	681b      	ldr	r3, [r3, #0]
 8014364:	3301      	adds	r3, #1
 8014366:	4a03      	ldr	r2, [pc, #12]	; (8014374 <vTaskSuspendAll+0x18>)
 8014368:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801436a:	bf00      	nop
 801436c:	46bd      	mov	sp, r7
 801436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014372:	4770      	bx	lr
 8014374:	24001d04 	.word	0x24001d04

08014378 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8014378:	b580      	push	{r7, lr}
 801437a:	b084      	sub	sp, #16
 801437c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801437e:	2300      	movs	r3, #0
 8014380:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8014382:	2300      	movs	r3, #0
 8014384:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8014386:	4b42      	ldr	r3, [pc, #264]	; (8014490 <xTaskResumeAll+0x118>)
 8014388:	681b      	ldr	r3, [r3, #0]
 801438a:	2b00      	cmp	r3, #0
 801438c:	d10a      	bne.n	80143a4 <xTaskResumeAll+0x2c>
	__asm volatile
 801438e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014392:	f383 8811 	msr	BASEPRI, r3
 8014396:	f3bf 8f6f 	isb	sy
 801439a:	f3bf 8f4f 	dsb	sy
 801439e:	603b      	str	r3, [r7, #0]
}
 80143a0:	bf00      	nop
 80143a2:	e7fe      	b.n	80143a2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80143a4:	f001 f9ee 	bl	8015784 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80143a8:	4b39      	ldr	r3, [pc, #228]	; (8014490 <xTaskResumeAll+0x118>)
 80143aa:	681b      	ldr	r3, [r3, #0]
 80143ac:	3b01      	subs	r3, #1
 80143ae:	4a38      	ldr	r2, [pc, #224]	; (8014490 <xTaskResumeAll+0x118>)
 80143b0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80143b2:	4b37      	ldr	r3, [pc, #220]	; (8014490 <xTaskResumeAll+0x118>)
 80143b4:	681b      	ldr	r3, [r3, #0]
 80143b6:	2b00      	cmp	r3, #0
 80143b8:	d162      	bne.n	8014480 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80143ba:	4b36      	ldr	r3, [pc, #216]	; (8014494 <xTaskResumeAll+0x11c>)
 80143bc:	681b      	ldr	r3, [r3, #0]
 80143be:	2b00      	cmp	r3, #0
 80143c0:	d05e      	beq.n	8014480 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80143c2:	e02f      	b.n	8014424 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80143c4:	4b34      	ldr	r3, [pc, #208]	; (8014498 <xTaskResumeAll+0x120>)
 80143c6:	68db      	ldr	r3, [r3, #12]
 80143c8:	68db      	ldr	r3, [r3, #12]
 80143ca:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80143cc:	68fb      	ldr	r3, [r7, #12]
 80143ce:	3318      	adds	r3, #24
 80143d0:	4618      	mov	r0, r3
 80143d2:	f7fe fe2b 	bl	801302c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80143d6:	68fb      	ldr	r3, [r7, #12]
 80143d8:	3304      	adds	r3, #4
 80143da:	4618      	mov	r0, r3
 80143dc:	f7fe fe26 	bl	801302c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80143e0:	68fb      	ldr	r3, [r7, #12]
 80143e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80143e4:	4b2d      	ldr	r3, [pc, #180]	; (801449c <xTaskResumeAll+0x124>)
 80143e6:	681b      	ldr	r3, [r3, #0]
 80143e8:	429a      	cmp	r2, r3
 80143ea:	d903      	bls.n	80143f4 <xTaskResumeAll+0x7c>
 80143ec:	68fb      	ldr	r3, [r7, #12]
 80143ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80143f0:	4a2a      	ldr	r2, [pc, #168]	; (801449c <xTaskResumeAll+0x124>)
 80143f2:	6013      	str	r3, [r2, #0]
 80143f4:	68fb      	ldr	r3, [r7, #12]
 80143f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80143f8:	4613      	mov	r3, r2
 80143fa:	009b      	lsls	r3, r3, #2
 80143fc:	4413      	add	r3, r2
 80143fe:	009b      	lsls	r3, r3, #2
 8014400:	4a27      	ldr	r2, [pc, #156]	; (80144a0 <xTaskResumeAll+0x128>)
 8014402:	441a      	add	r2, r3
 8014404:	68fb      	ldr	r3, [r7, #12]
 8014406:	3304      	adds	r3, #4
 8014408:	4619      	mov	r1, r3
 801440a:	4610      	mov	r0, r2
 801440c:	f7fe fdb1 	bl	8012f72 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014410:	68fb      	ldr	r3, [r7, #12]
 8014412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014414:	4b23      	ldr	r3, [pc, #140]	; (80144a4 <xTaskResumeAll+0x12c>)
 8014416:	681b      	ldr	r3, [r3, #0]
 8014418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801441a:	429a      	cmp	r2, r3
 801441c:	d302      	bcc.n	8014424 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801441e:	4b22      	ldr	r3, [pc, #136]	; (80144a8 <xTaskResumeAll+0x130>)
 8014420:	2201      	movs	r2, #1
 8014422:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014424:	4b1c      	ldr	r3, [pc, #112]	; (8014498 <xTaskResumeAll+0x120>)
 8014426:	681b      	ldr	r3, [r3, #0]
 8014428:	2b00      	cmp	r3, #0
 801442a:	d1cb      	bne.n	80143c4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801442c:	68fb      	ldr	r3, [r7, #12]
 801442e:	2b00      	cmp	r3, #0
 8014430:	d001      	beq.n	8014436 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8014432:	f000 fbf3 	bl	8014c1c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8014436:	4b1d      	ldr	r3, [pc, #116]	; (80144ac <xTaskResumeAll+0x134>)
 8014438:	681b      	ldr	r3, [r3, #0]
 801443a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	2b00      	cmp	r3, #0
 8014440:	d010      	beq.n	8014464 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8014442:	f000 f847 	bl	80144d4 <xTaskIncrementTick>
 8014446:	4603      	mov	r3, r0
 8014448:	2b00      	cmp	r3, #0
 801444a:	d002      	beq.n	8014452 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 801444c:	4b16      	ldr	r3, [pc, #88]	; (80144a8 <xTaskResumeAll+0x130>)
 801444e:	2201      	movs	r2, #1
 8014450:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8014452:	687b      	ldr	r3, [r7, #4]
 8014454:	3b01      	subs	r3, #1
 8014456:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8014458:	687b      	ldr	r3, [r7, #4]
 801445a:	2b00      	cmp	r3, #0
 801445c:	d1f1      	bne.n	8014442 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801445e:	4b13      	ldr	r3, [pc, #76]	; (80144ac <xTaskResumeAll+0x134>)
 8014460:	2200      	movs	r2, #0
 8014462:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8014464:	4b10      	ldr	r3, [pc, #64]	; (80144a8 <xTaskResumeAll+0x130>)
 8014466:	681b      	ldr	r3, [r3, #0]
 8014468:	2b00      	cmp	r3, #0
 801446a:	d009      	beq.n	8014480 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801446c:	2301      	movs	r3, #1
 801446e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8014470:	4b0f      	ldr	r3, [pc, #60]	; (80144b0 <xTaskResumeAll+0x138>)
 8014472:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014476:	601a      	str	r2, [r3, #0]
 8014478:	f3bf 8f4f 	dsb	sy
 801447c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014480:	f001 f9b0 	bl	80157e4 <vPortExitCritical>

	return xAlreadyYielded;
 8014484:	68bb      	ldr	r3, [r7, #8]
}
 8014486:	4618      	mov	r0, r3
 8014488:	3710      	adds	r7, #16
 801448a:	46bd      	mov	sp, r7
 801448c:	bd80      	pop	{r7, pc}
 801448e:	bf00      	nop
 8014490:	24001d04 	.word	0x24001d04
 8014494:	24001cdc 	.word	0x24001cdc
 8014498:	24001c9c 	.word	0x24001c9c
 801449c:	24001ce4 	.word	0x24001ce4
 80144a0:	2400180c 	.word	0x2400180c
 80144a4:	24001808 	.word	0x24001808
 80144a8:	24001cf0 	.word	0x24001cf0
 80144ac:	24001cec 	.word	0x24001cec
 80144b0:	e000ed04 	.word	0xe000ed04

080144b4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80144b4:	b480      	push	{r7}
 80144b6:	b083      	sub	sp, #12
 80144b8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80144ba:	4b05      	ldr	r3, [pc, #20]	; (80144d0 <xTaskGetTickCount+0x1c>)
 80144bc:	681b      	ldr	r3, [r3, #0]
 80144be:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80144c0:	687b      	ldr	r3, [r7, #4]
}
 80144c2:	4618      	mov	r0, r3
 80144c4:	370c      	adds	r7, #12
 80144c6:	46bd      	mov	sp, r7
 80144c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144cc:	4770      	bx	lr
 80144ce:	bf00      	nop
 80144d0:	24001ce0 	.word	0x24001ce0

080144d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80144d4:	b580      	push	{r7, lr}
 80144d6:	b086      	sub	sp, #24
 80144d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80144da:	2300      	movs	r3, #0
 80144dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80144de:	4b4f      	ldr	r3, [pc, #316]	; (801461c <xTaskIncrementTick+0x148>)
 80144e0:	681b      	ldr	r3, [r3, #0]
 80144e2:	2b00      	cmp	r3, #0
 80144e4:	f040 808f 	bne.w	8014606 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80144e8:	4b4d      	ldr	r3, [pc, #308]	; (8014620 <xTaskIncrementTick+0x14c>)
 80144ea:	681b      	ldr	r3, [r3, #0]
 80144ec:	3301      	adds	r3, #1
 80144ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80144f0:	4a4b      	ldr	r2, [pc, #300]	; (8014620 <xTaskIncrementTick+0x14c>)
 80144f2:	693b      	ldr	r3, [r7, #16]
 80144f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80144f6:	693b      	ldr	r3, [r7, #16]
 80144f8:	2b00      	cmp	r3, #0
 80144fa:	d120      	bne.n	801453e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80144fc:	4b49      	ldr	r3, [pc, #292]	; (8014624 <xTaskIncrementTick+0x150>)
 80144fe:	681b      	ldr	r3, [r3, #0]
 8014500:	681b      	ldr	r3, [r3, #0]
 8014502:	2b00      	cmp	r3, #0
 8014504:	d00a      	beq.n	801451c <xTaskIncrementTick+0x48>
	__asm volatile
 8014506:	f04f 0350 	mov.w	r3, #80	; 0x50
 801450a:	f383 8811 	msr	BASEPRI, r3
 801450e:	f3bf 8f6f 	isb	sy
 8014512:	f3bf 8f4f 	dsb	sy
 8014516:	603b      	str	r3, [r7, #0]
}
 8014518:	bf00      	nop
 801451a:	e7fe      	b.n	801451a <xTaskIncrementTick+0x46>
 801451c:	4b41      	ldr	r3, [pc, #260]	; (8014624 <xTaskIncrementTick+0x150>)
 801451e:	681b      	ldr	r3, [r3, #0]
 8014520:	60fb      	str	r3, [r7, #12]
 8014522:	4b41      	ldr	r3, [pc, #260]	; (8014628 <xTaskIncrementTick+0x154>)
 8014524:	681b      	ldr	r3, [r3, #0]
 8014526:	4a3f      	ldr	r2, [pc, #252]	; (8014624 <xTaskIncrementTick+0x150>)
 8014528:	6013      	str	r3, [r2, #0]
 801452a:	4a3f      	ldr	r2, [pc, #252]	; (8014628 <xTaskIncrementTick+0x154>)
 801452c:	68fb      	ldr	r3, [r7, #12]
 801452e:	6013      	str	r3, [r2, #0]
 8014530:	4b3e      	ldr	r3, [pc, #248]	; (801462c <xTaskIncrementTick+0x158>)
 8014532:	681b      	ldr	r3, [r3, #0]
 8014534:	3301      	adds	r3, #1
 8014536:	4a3d      	ldr	r2, [pc, #244]	; (801462c <xTaskIncrementTick+0x158>)
 8014538:	6013      	str	r3, [r2, #0]
 801453a:	f000 fb6f 	bl	8014c1c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801453e:	4b3c      	ldr	r3, [pc, #240]	; (8014630 <xTaskIncrementTick+0x15c>)
 8014540:	681b      	ldr	r3, [r3, #0]
 8014542:	693a      	ldr	r2, [r7, #16]
 8014544:	429a      	cmp	r2, r3
 8014546:	d349      	bcc.n	80145dc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014548:	4b36      	ldr	r3, [pc, #216]	; (8014624 <xTaskIncrementTick+0x150>)
 801454a:	681b      	ldr	r3, [r3, #0]
 801454c:	681b      	ldr	r3, [r3, #0]
 801454e:	2b00      	cmp	r3, #0
 8014550:	d104      	bne.n	801455c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014552:	4b37      	ldr	r3, [pc, #220]	; (8014630 <xTaskIncrementTick+0x15c>)
 8014554:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014558:	601a      	str	r2, [r3, #0]
					break;
 801455a:	e03f      	b.n	80145dc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801455c:	4b31      	ldr	r3, [pc, #196]	; (8014624 <xTaskIncrementTick+0x150>)
 801455e:	681b      	ldr	r3, [r3, #0]
 8014560:	68db      	ldr	r3, [r3, #12]
 8014562:	68db      	ldr	r3, [r3, #12]
 8014564:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8014566:	68bb      	ldr	r3, [r7, #8]
 8014568:	685b      	ldr	r3, [r3, #4]
 801456a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801456c:	693a      	ldr	r2, [r7, #16]
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	429a      	cmp	r2, r3
 8014572:	d203      	bcs.n	801457c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8014574:	4a2e      	ldr	r2, [pc, #184]	; (8014630 <xTaskIncrementTick+0x15c>)
 8014576:	687b      	ldr	r3, [r7, #4]
 8014578:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801457a:	e02f      	b.n	80145dc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801457c:	68bb      	ldr	r3, [r7, #8]
 801457e:	3304      	adds	r3, #4
 8014580:	4618      	mov	r0, r3
 8014582:	f7fe fd53 	bl	801302c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014586:	68bb      	ldr	r3, [r7, #8]
 8014588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801458a:	2b00      	cmp	r3, #0
 801458c:	d004      	beq.n	8014598 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801458e:	68bb      	ldr	r3, [r7, #8]
 8014590:	3318      	adds	r3, #24
 8014592:	4618      	mov	r0, r3
 8014594:	f7fe fd4a 	bl	801302c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8014598:	68bb      	ldr	r3, [r7, #8]
 801459a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801459c:	4b25      	ldr	r3, [pc, #148]	; (8014634 <xTaskIncrementTick+0x160>)
 801459e:	681b      	ldr	r3, [r3, #0]
 80145a0:	429a      	cmp	r2, r3
 80145a2:	d903      	bls.n	80145ac <xTaskIncrementTick+0xd8>
 80145a4:	68bb      	ldr	r3, [r7, #8]
 80145a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80145a8:	4a22      	ldr	r2, [pc, #136]	; (8014634 <xTaskIncrementTick+0x160>)
 80145aa:	6013      	str	r3, [r2, #0]
 80145ac:	68bb      	ldr	r3, [r7, #8]
 80145ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80145b0:	4613      	mov	r3, r2
 80145b2:	009b      	lsls	r3, r3, #2
 80145b4:	4413      	add	r3, r2
 80145b6:	009b      	lsls	r3, r3, #2
 80145b8:	4a1f      	ldr	r2, [pc, #124]	; (8014638 <xTaskIncrementTick+0x164>)
 80145ba:	441a      	add	r2, r3
 80145bc:	68bb      	ldr	r3, [r7, #8]
 80145be:	3304      	adds	r3, #4
 80145c0:	4619      	mov	r1, r3
 80145c2:	4610      	mov	r0, r2
 80145c4:	f7fe fcd5 	bl	8012f72 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80145c8:	68bb      	ldr	r3, [r7, #8]
 80145ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80145cc:	4b1b      	ldr	r3, [pc, #108]	; (801463c <xTaskIncrementTick+0x168>)
 80145ce:	681b      	ldr	r3, [r3, #0]
 80145d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80145d2:	429a      	cmp	r2, r3
 80145d4:	d3b8      	bcc.n	8014548 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80145d6:	2301      	movs	r3, #1
 80145d8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80145da:	e7b5      	b.n	8014548 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80145dc:	4b17      	ldr	r3, [pc, #92]	; (801463c <xTaskIncrementTick+0x168>)
 80145de:	681b      	ldr	r3, [r3, #0]
 80145e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80145e2:	4915      	ldr	r1, [pc, #84]	; (8014638 <xTaskIncrementTick+0x164>)
 80145e4:	4613      	mov	r3, r2
 80145e6:	009b      	lsls	r3, r3, #2
 80145e8:	4413      	add	r3, r2
 80145ea:	009b      	lsls	r3, r3, #2
 80145ec:	440b      	add	r3, r1
 80145ee:	681b      	ldr	r3, [r3, #0]
 80145f0:	2b01      	cmp	r3, #1
 80145f2:	d901      	bls.n	80145f8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80145f4:	2301      	movs	r3, #1
 80145f6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80145f8:	4b11      	ldr	r3, [pc, #68]	; (8014640 <xTaskIncrementTick+0x16c>)
 80145fa:	681b      	ldr	r3, [r3, #0]
 80145fc:	2b00      	cmp	r3, #0
 80145fe:	d007      	beq.n	8014610 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8014600:	2301      	movs	r3, #1
 8014602:	617b      	str	r3, [r7, #20]
 8014604:	e004      	b.n	8014610 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8014606:	4b0f      	ldr	r3, [pc, #60]	; (8014644 <xTaskIncrementTick+0x170>)
 8014608:	681b      	ldr	r3, [r3, #0]
 801460a:	3301      	adds	r3, #1
 801460c:	4a0d      	ldr	r2, [pc, #52]	; (8014644 <xTaskIncrementTick+0x170>)
 801460e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8014610:	697b      	ldr	r3, [r7, #20]
}
 8014612:	4618      	mov	r0, r3
 8014614:	3718      	adds	r7, #24
 8014616:	46bd      	mov	sp, r7
 8014618:	bd80      	pop	{r7, pc}
 801461a:	bf00      	nop
 801461c:	24001d04 	.word	0x24001d04
 8014620:	24001ce0 	.word	0x24001ce0
 8014624:	24001c94 	.word	0x24001c94
 8014628:	24001c98 	.word	0x24001c98
 801462c:	24001cf4 	.word	0x24001cf4
 8014630:	24001cfc 	.word	0x24001cfc
 8014634:	24001ce4 	.word	0x24001ce4
 8014638:	2400180c 	.word	0x2400180c
 801463c:	24001808 	.word	0x24001808
 8014640:	24001cf0 	.word	0x24001cf0
 8014644:	24001cec 	.word	0x24001cec

08014648 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8014648:	b480      	push	{r7}
 801464a:	b085      	sub	sp, #20
 801464c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801464e:	4b28      	ldr	r3, [pc, #160]	; (80146f0 <vTaskSwitchContext+0xa8>)
 8014650:	681b      	ldr	r3, [r3, #0]
 8014652:	2b00      	cmp	r3, #0
 8014654:	d003      	beq.n	801465e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8014656:	4b27      	ldr	r3, [pc, #156]	; (80146f4 <vTaskSwitchContext+0xac>)
 8014658:	2201      	movs	r2, #1
 801465a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801465c:	e041      	b.n	80146e2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 801465e:	4b25      	ldr	r3, [pc, #148]	; (80146f4 <vTaskSwitchContext+0xac>)
 8014660:	2200      	movs	r2, #0
 8014662:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014664:	4b24      	ldr	r3, [pc, #144]	; (80146f8 <vTaskSwitchContext+0xb0>)
 8014666:	681b      	ldr	r3, [r3, #0]
 8014668:	60fb      	str	r3, [r7, #12]
 801466a:	e010      	b.n	801468e <vTaskSwitchContext+0x46>
 801466c:	68fb      	ldr	r3, [r7, #12]
 801466e:	2b00      	cmp	r3, #0
 8014670:	d10a      	bne.n	8014688 <vTaskSwitchContext+0x40>
	__asm volatile
 8014672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014676:	f383 8811 	msr	BASEPRI, r3
 801467a:	f3bf 8f6f 	isb	sy
 801467e:	f3bf 8f4f 	dsb	sy
 8014682:	607b      	str	r3, [r7, #4]
}
 8014684:	bf00      	nop
 8014686:	e7fe      	b.n	8014686 <vTaskSwitchContext+0x3e>
 8014688:	68fb      	ldr	r3, [r7, #12]
 801468a:	3b01      	subs	r3, #1
 801468c:	60fb      	str	r3, [r7, #12]
 801468e:	491b      	ldr	r1, [pc, #108]	; (80146fc <vTaskSwitchContext+0xb4>)
 8014690:	68fa      	ldr	r2, [r7, #12]
 8014692:	4613      	mov	r3, r2
 8014694:	009b      	lsls	r3, r3, #2
 8014696:	4413      	add	r3, r2
 8014698:	009b      	lsls	r3, r3, #2
 801469a:	440b      	add	r3, r1
 801469c:	681b      	ldr	r3, [r3, #0]
 801469e:	2b00      	cmp	r3, #0
 80146a0:	d0e4      	beq.n	801466c <vTaskSwitchContext+0x24>
 80146a2:	68fa      	ldr	r2, [r7, #12]
 80146a4:	4613      	mov	r3, r2
 80146a6:	009b      	lsls	r3, r3, #2
 80146a8:	4413      	add	r3, r2
 80146aa:	009b      	lsls	r3, r3, #2
 80146ac:	4a13      	ldr	r2, [pc, #76]	; (80146fc <vTaskSwitchContext+0xb4>)
 80146ae:	4413      	add	r3, r2
 80146b0:	60bb      	str	r3, [r7, #8]
 80146b2:	68bb      	ldr	r3, [r7, #8]
 80146b4:	685b      	ldr	r3, [r3, #4]
 80146b6:	685a      	ldr	r2, [r3, #4]
 80146b8:	68bb      	ldr	r3, [r7, #8]
 80146ba:	605a      	str	r2, [r3, #4]
 80146bc:	68bb      	ldr	r3, [r7, #8]
 80146be:	685a      	ldr	r2, [r3, #4]
 80146c0:	68bb      	ldr	r3, [r7, #8]
 80146c2:	3308      	adds	r3, #8
 80146c4:	429a      	cmp	r2, r3
 80146c6:	d104      	bne.n	80146d2 <vTaskSwitchContext+0x8a>
 80146c8:	68bb      	ldr	r3, [r7, #8]
 80146ca:	685b      	ldr	r3, [r3, #4]
 80146cc:	685a      	ldr	r2, [r3, #4]
 80146ce:	68bb      	ldr	r3, [r7, #8]
 80146d0:	605a      	str	r2, [r3, #4]
 80146d2:	68bb      	ldr	r3, [r7, #8]
 80146d4:	685b      	ldr	r3, [r3, #4]
 80146d6:	68db      	ldr	r3, [r3, #12]
 80146d8:	4a09      	ldr	r2, [pc, #36]	; (8014700 <vTaskSwitchContext+0xb8>)
 80146da:	6013      	str	r3, [r2, #0]
 80146dc:	4a06      	ldr	r2, [pc, #24]	; (80146f8 <vTaskSwitchContext+0xb0>)
 80146de:	68fb      	ldr	r3, [r7, #12]
 80146e0:	6013      	str	r3, [r2, #0]
}
 80146e2:	bf00      	nop
 80146e4:	3714      	adds	r7, #20
 80146e6:	46bd      	mov	sp, r7
 80146e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146ec:	4770      	bx	lr
 80146ee:	bf00      	nop
 80146f0:	24001d04 	.word	0x24001d04
 80146f4:	24001cf0 	.word	0x24001cf0
 80146f8:	24001ce4 	.word	0x24001ce4
 80146fc:	2400180c 	.word	0x2400180c
 8014700:	24001808 	.word	0x24001808

08014704 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8014704:	b580      	push	{r7, lr}
 8014706:	b084      	sub	sp, #16
 8014708:	af00      	add	r7, sp, #0
 801470a:	6078      	str	r0, [r7, #4]
 801470c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	2b00      	cmp	r3, #0
 8014712:	d10a      	bne.n	801472a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8014714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014718:	f383 8811 	msr	BASEPRI, r3
 801471c:	f3bf 8f6f 	isb	sy
 8014720:	f3bf 8f4f 	dsb	sy
 8014724:	60fb      	str	r3, [r7, #12]
}
 8014726:	bf00      	nop
 8014728:	e7fe      	b.n	8014728 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801472a:	4b07      	ldr	r3, [pc, #28]	; (8014748 <vTaskPlaceOnEventList+0x44>)
 801472c:	681b      	ldr	r3, [r3, #0]
 801472e:	3318      	adds	r3, #24
 8014730:	4619      	mov	r1, r3
 8014732:	6878      	ldr	r0, [r7, #4]
 8014734:	f7fe fc41 	bl	8012fba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014738:	2101      	movs	r1, #1
 801473a:	6838      	ldr	r0, [r7, #0]
 801473c:	f000 fb32 	bl	8014da4 <prvAddCurrentTaskToDelayedList>
}
 8014740:	bf00      	nop
 8014742:	3710      	adds	r7, #16
 8014744:	46bd      	mov	sp, r7
 8014746:	bd80      	pop	{r7, pc}
 8014748:	24001808 	.word	0x24001808

0801474c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 801474c:	b580      	push	{r7, lr}
 801474e:	b086      	sub	sp, #24
 8014750:	af00      	add	r7, sp, #0
 8014752:	60f8      	str	r0, [r7, #12]
 8014754:	60b9      	str	r1, [r7, #8]
 8014756:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8014758:	68fb      	ldr	r3, [r7, #12]
 801475a:	2b00      	cmp	r3, #0
 801475c:	d10a      	bne.n	8014774 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 801475e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014762:	f383 8811 	msr	BASEPRI, r3
 8014766:	f3bf 8f6f 	isb	sy
 801476a:	f3bf 8f4f 	dsb	sy
 801476e:	617b      	str	r3, [r7, #20]
}
 8014770:	bf00      	nop
 8014772:	e7fe      	b.n	8014772 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8014774:	4b11      	ldr	r3, [pc, #68]	; (80147bc <vTaskPlaceOnUnorderedEventList+0x70>)
 8014776:	681b      	ldr	r3, [r3, #0]
 8014778:	2b00      	cmp	r3, #0
 801477a:	d10a      	bne.n	8014792 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 801477c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014780:	f383 8811 	msr	BASEPRI, r3
 8014784:	f3bf 8f6f 	isb	sy
 8014788:	f3bf 8f4f 	dsb	sy
 801478c:	613b      	str	r3, [r7, #16]
}
 801478e:	bf00      	nop
 8014790:	e7fe      	b.n	8014790 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8014792:	4b0b      	ldr	r3, [pc, #44]	; (80147c0 <vTaskPlaceOnUnorderedEventList+0x74>)
 8014794:	681b      	ldr	r3, [r3, #0]
 8014796:	68ba      	ldr	r2, [r7, #8]
 8014798:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 801479c:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801479e:	4b08      	ldr	r3, [pc, #32]	; (80147c0 <vTaskPlaceOnUnorderedEventList+0x74>)
 80147a0:	681b      	ldr	r3, [r3, #0]
 80147a2:	3318      	adds	r3, #24
 80147a4:	4619      	mov	r1, r3
 80147a6:	68f8      	ldr	r0, [r7, #12]
 80147a8:	f7fe fbe3 	bl	8012f72 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80147ac:	2101      	movs	r1, #1
 80147ae:	6878      	ldr	r0, [r7, #4]
 80147b0:	f000 faf8 	bl	8014da4 <prvAddCurrentTaskToDelayedList>
}
 80147b4:	bf00      	nop
 80147b6:	3718      	adds	r7, #24
 80147b8:	46bd      	mov	sp, r7
 80147ba:	bd80      	pop	{r7, pc}
 80147bc:	24001d04 	.word	0x24001d04
 80147c0:	24001808 	.word	0x24001808

080147c4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80147c4:	b580      	push	{r7, lr}
 80147c6:	b086      	sub	sp, #24
 80147c8:	af00      	add	r7, sp, #0
 80147ca:	60f8      	str	r0, [r7, #12]
 80147cc:	60b9      	str	r1, [r7, #8]
 80147ce:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80147d0:	68fb      	ldr	r3, [r7, #12]
 80147d2:	2b00      	cmp	r3, #0
 80147d4:	d10a      	bne.n	80147ec <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80147d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147da:	f383 8811 	msr	BASEPRI, r3
 80147de:	f3bf 8f6f 	isb	sy
 80147e2:	f3bf 8f4f 	dsb	sy
 80147e6:	617b      	str	r3, [r7, #20]
}
 80147e8:	bf00      	nop
 80147ea:	e7fe      	b.n	80147ea <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80147ec:	4b0a      	ldr	r3, [pc, #40]	; (8014818 <vTaskPlaceOnEventListRestricted+0x54>)
 80147ee:	681b      	ldr	r3, [r3, #0]
 80147f0:	3318      	adds	r3, #24
 80147f2:	4619      	mov	r1, r3
 80147f4:	68f8      	ldr	r0, [r7, #12]
 80147f6:	f7fe fbbc 	bl	8012f72 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80147fa:	687b      	ldr	r3, [r7, #4]
 80147fc:	2b00      	cmp	r3, #0
 80147fe:	d002      	beq.n	8014806 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8014800:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014804:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8014806:	6879      	ldr	r1, [r7, #4]
 8014808:	68b8      	ldr	r0, [r7, #8]
 801480a:	f000 facb 	bl	8014da4 <prvAddCurrentTaskToDelayedList>
	}
 801480e:	bf00      	nop
 8014810:	3718      	adds	r7, #24
 8014812:	46bd      	mov	sp, r7
 8014814:	bd80      	pop	{r7, pc}
 8014816:	bf00      	nop
 8014818:	24001808 	.word	0x24001808

0801481c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801481c:	b580      	push	{r7, lr}
 801481e:	b086      	sub	sp, #24
 8014820:	af00      	add	r7, sp, #0
 8014822:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014824:	687b      	ldr	r3, [r7, #4]
 8014826:	68db      	ldr	r3, [r3, #12]
 8014828:	68db      	ldr	r3, [r3, #12]
 801482a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801482c:	693b      	ldr	r3, [r7, #16]
 801482e:	2b00      	cmp	r3, #0
 8014830:	d10a      	bne.n	8014848 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8014832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014836:	f383 8811 	msr	BASEPRI, r3
 801483a:	f3bf 8f6f 	isb	sy
 801483e:	f3bf 8f4f 	dsb	sy
 8014842:	60fb      	str	r3, [r7, #12]
}
 8014844:	bf00      	nop
 8014846:	e7fe      	b.n	8014846 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8014848:	693b      	ldr	r3, [r7, #16]
 801484a:	3318      	adds	r3, #24
 801484c:	4618      	mov	r0, r3
 801484e:	f7fe fbed 	bl	801302c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014852:	4b1e      	ldr	r3, [pc, #120]	; (80148cc <xTaskRemoveFromEventList+0xb0>)
 8014854:	681b      	ldr	r3, [r3, #0]
 8014856:	2b00      	cmp	r3, #0
 8014858:	d11d      	bne.n	8014896 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801485a:	693b      	ldr	r3, [r7, #16]
 801485c:	3304      	adds	r3, #4
 801485e:	4618      	mov	r0, r3
 8014860:	f7fe fbe4 	bl	801302c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8014864:	693b      	ldr	r3, [r7, #16]
 8014866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014868:	4b19      	ldr	r3, [pc, #100]	; (80148d0 <xTaskRemoveFromEventList+0xb4>)
 801486a:	681b      	ldr	r3, [r3, #0]
 801486c:	429a      	cmp	r2, r3
 801486e:	d903      	bls.n	8014878 <xTaskRemoveFromEventList+0x5c>
 8014870:	693b      	ldr	r3, [r7, #16]
 8014872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014874:	4a16      	ldr	r2, [pc, #88]	; (80148d0 <xTaskRemoveFromEventList+0xb4>)
 8014876:	6013      	str	r3, [r2, #0]
 8014878:	693b      	ldr	r3, [r7, #16]
 801487a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801487c:	4613      	mov	r3, r2
 801487e:	009b      	lsls	r3, r3, #2
 8014880:	4413      	add	r3, r2
 8014882:	009b      	lsls	r3, r3, #2
 8014884:	4a13      	ldr	r2, [pc, #76]	; (80148d4 <xTaskRemoveFromEventList+0xb8>)
 8014886:	441a      	add	r2, r3
 8014888:	693b      	ldr	r3, [r7, #16]
 801488a:	3304      	adds	r3, #4
 801488c:	4619      	mov	r1, r3
 801488e:	4610      	mov	r0, r2
 8014890:	f7fe fb6f 	bl	8012f72 <vListInsertEnd>
 8014894:	e005      	b.n	80148a2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8014896:	693b      	ldr	r3, [r7, #16]
 8014898:	3318      	adds	r3, #24
 801489a:	4619      	mov	r1, r3
 801489c:	480e      	ldr	r0, [pc, #56]	; (80148d8 <xTaskRemoveFromEventList+0xbc>)
 801489e:	f7fe fb68 	bl	8012f72 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80148a2:	693b      	ldr	r3, [r7, #16]
 80148a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80148a6:	4b0d      	ldr	r3, [pc, #52]	; (80148dc <xTaskRemoveFromEventList+0xc0>)
 80148a8:	681b      	ldr	r3, [r3, #0]
 80148aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80148ac:	429a      	cmp	r2, r3
 80148ae:	d905      	bls.n	80148bc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80148b0:	2301      	movs	r3, #1
 80148b2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80148b4:	4b0a      	ldr	r3, [pc, #40]	; (80148e0 <xTaskRemoveFromEventList+0xc4>)
 80148b6:	2201      	movs	r2, #1
 80148b8:	601a      	str	r2, [r3, #0]
 80148ba:	e001      	b.n	80148c0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80148bc:	2300      	movs	r3, #0
 80148be:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80148c0:	697b      	ldr	r3, [r7, #20]
}
 80148c2:	4618      	mov	r0, r3
 80148c4:	3718      	adds	r7, #24
 80148c6:	46bd      	mov	sp, r7
 80148c8:	bd80      	pop	{r7, pc}
 80148ca:	bf00      	nop
 80148cc:	24001d04 	.word	0x24001d04
 80148d0:	24001ce4 	.word	0x24001ce4
 80148d4:	2400180c 	.word	0x2400180c
 80148d8:	24001c9c 	.word	0x24001c9c
 80148dc:	24001808 	.word	0x24001808
 80148e0:	24001cf0 	.word	0x24001cf0

080148e4 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80148e4:	b580      	push	{r7, lr}
 80148e6:	b086      	sub	sp, #24
 80148e8:	af00      	add	r7, sp, #0
 80148ea:	6078      	str	r0, [r7, #4]
 80148ec:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80148ee:	4b29      	ldr	r3, [pc, #164]	; (8014994 <vTaskRemoveFromUnorderedEventList+0xb0>)
 80148f0:	681b      	ldr	r3, [r3, #0]
 80148f2:	2b00      	cmp	r3, #0
 80148f4:	d10a      	bne.n	801490c <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 80148f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80148fa:	f383 8811 	msr	BASEPRI, r3
 80148fe:	f3bf 8f6f 	isb	sy
 8014902:	f3bf 8f4f 	dsb	sy
 8014906:	613b      	str	r3, [r7, #16]
}
 8014908:	bf00      	nop
 801490a:	e7fe      	b.n	801490a <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 801490c:	683b      	ldr	r3, [r7, #0]
 801490e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014916:	687b      	ldr	r3, [r7, #4]
 8014918:	68db      	ldr	r3, [r3, #12]
 801491a:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 801491c:	697b      	ldr	r3, [r7, #20]
 801491e:	2b00      	cmp	r3, #0
 8014920:	d10a      	bne.n	8014938 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8014922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014926:	f383 8811 	msr	BASEPRI, r3
 801492a:	f3bf 8f6f 	isb	sy
 801492e:	f3bf 8f4f 	dsb	sy
 8014932:	60fb      	str	r3, [r7, #12]
}
 8014934:	bf00      	nop
 8014936:	e7fe      	b.n	8014936 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8014938:	6878      	ldr	r0, [r7, #4]
 801493a:	f7fe fb77 	bl	801302c <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801493e:	697b      	ldr	r3, [r7, #20]
 8014940:	3304      	adds	r3, #4
 8014942:	4618      	mov	r0, r3
 8014944:	f7fe fb72 	bl	801302c <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8014948:	697b      	ldr	r3, [r7, #20]
 801494a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801494c:	4b12      	ldr	r3, [pc, #72]	; (8014998 <vTaskRemoveFromUnorderedEventList+0xb4>)
 801494e:	681b      	ldr	r3, [r3, #0]
 8014950:	429a      	cmp	r2, r3
 8014952:	d903      	bls.n	801495c <vTaskRemoveFromUnorderedEventList+0x78>
 8014954:	697b      	ldr	r3, [r7, #20]
 8014956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014958:	4a0f      	ldr	r2, [pc, #60]	; (8014998 <vTaskRemoveFromUnorderedEventList+0xb4>)
 801495a:	6013      	str	r3, [r2, #0]
 801495c:	697b      	ldr	r3, [r7, #20]
 801495e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014960:	4613      	mov	r3, r2
 8014962:	009b      	lsls	r3, r3, #2
 8014964:	4413      	add	r3, r2
 8014966:	009b      	lsls	r3, r3, #2
 8014968:	4a0c      	ldr	r2, [pc, #48]	; (801499c <vTaskRemoveFromUnorderedEventList+0xb8>)
 801496a:	441a      	add	r2, r3
 801496c:	697b      	ldr	r3, [r7, #20]
 801496e:	3304      	adds	r3, #4
 8014970:	4619      	mov	r1, r3
 8014972:	4610      	mov	r0, r2
 8014974:	f7fe fafd 	bl	8012f72 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014978:	697b      	ldr	r3, [r7, #20]
 801497a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801497c:	4b08      	ldr	r3, [pc, #32]	; (80149a0 <vTaskRemoveFromUnorderedEventList+0xbc>)
 801497e:	681b      	ldr	r3, [r3, #0]
 8014980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014982:	429a      	cmp	r2, r3
 8014984:	d902      	bls.n	801498c <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8014986:	4b07      	ldr	r3, [pc, #28]	; (80149a4 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8014988:	2201      	movs	r2, #1
 801498a:	601a      	str	r2, [r3, #0]
	}
}
 801498c:	bf00      	nop
 801498e:	3718      	adds	r7, #24
 8014990:	46bd      	mov	sp, r7
 8014992:	bd80      	pop	{r7, pc}
 8014994:	24001d04 	.word	0x24001d04
 8014998:	24001ce4 	.word	0x24001ce4
 801499c:	2400180c 	.word	0x2400180c
 80149a0:	24001808 	.word	0x24001808
 80149a4:	24001cf0 	.word	0x24001cf0

080149a8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80149a8:	b480      	push	{r7}
 80149aa:	b083      	sub	sp, #12
 80149ac:	af00      	add	r7, sp, #0
 80149ae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80149b0:	4b06      	ldr	r3, [pc, #24]	; (80149cc <vTaskInternalSetTimeOutState+0x24>)
 80149b2:	681a      	ldr	r2, [r3, #0]
 80149b4:	687b      	ldr	r3, [r7, #4]
 80149b6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80149b8:	4b05      	ldr	r3, [pc, #20]	; (80149d0 <vTaskInternalSetTimeOutState+0x28>)
 80149ba:	681a      	ldr	r2, [r3, #0]
 80149bc:	687b      	ldr	r3, [r7, #4]
 80149be:	605a      	str	r2, [r3, #4]
}
 80149c0:	bf00      	nop
 80149c2:	370c      	adds	r7, #12
 80149c4:	46bd      	mov	sp, r7
 80149c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149ca:	4770      	bx	lr
 80149cc:	24001cf4 	.word	0x24001cf4
 80149d0:	24001ce0 	.word	0x24001ce0

080149d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80149d4:	b580      	push	{r7, lr}
 80149d6:	b088      	sub	sp, #32
 80149d8:	af00      	add	r7, sp, #0
 80149da:	6078      	str	r0, [r7, #4]
 80149dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80149de:	687b      	ldr	r3, [r7, #4]
 80149e0:	2b00      	cmp	r3, #0
 80149e2:	d10a      	bne.n	80149fa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80149e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149e8:	f383 8811 	msr	BASEPRI, r3
 80149ec:	f3bf 8f6f 	isb	sy
 80149f0:	f3bf 8f4f 	dsb	sy
 80149f4:	613b      	str	r3, [r7, #16]
}
 80149f6:	bf00      	nop
 80149f8:	e7fe      	b.n	80149f8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80149fa:	683b      	ldr	r3, [r7, #0]
 80149fc:	2b00      	cmp	r3, #0
 80149fe:	d10a      	bne.n	8014a16 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8014a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a04:	f383 8811 	msr	BASEPRI, r3
 8014a08:	f3bf 8f6f 	isb	sy
 8014a0c:	f3bf 8f4f 	dsb	sy
 8014a10:	60fb      	str	r3, [r7, #12]
}
 8014a12:	bf00      	nop
 8014a14:	e7fe      	b.n	8014a14 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8014a16:	f000 feb5 	bl	8015784 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8014a1a:	4b1d      	ldr	r3, [pc, #116]	; (8014a90 <xTaskCheckForTimeOut+0xbc>)
 8014a1c:	681b      	ldr	r3, [r3, #0]
 8014a1e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	685b      	ldr	r3, [r3, #4]
 8014a24:	69ba      	ldr	r2, [r7, #24]
 8014a26:	1ad3      	subs	r3, r2, r3
 8014a28:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8014a2a:	683b      	ldr	r3, [r7, #0]
 8014a2c:	681b      	ldr	r3, [r3, #0]
 8014a2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014a32:	d102      	bne.n	8014a3a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8014a34:	2300      	movs	r3, #0
 8014a36:	61fb      	str	r3, [r7, #28]
 8014a38:	e023      	b.n	8014a82 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8014a3a:	687b      	ldr	r3, [r7, #4]
 8014a3c:	681a      	ldr	r2, [r3, #0]
 8014a3e:	4b15      	ldr	r3, [pc, #84]	; (8014a94 <xTaskCheckForTimeOut+0xc0>)
 8014a40:	681b      	ldr	r3, [r3, #0]
 8014a42:	429a      	cmp	r2, r3
 8014a44:	d007      	beq.n	8014a56 <xTaskCheckForTimeOut+0x82>
 8014a46:	687b      	ldr	r3, [r7, #4]
 8014a48:	685b      	ldr	r3, [r3, #4]
 8014a4a:	69ba      	ldr	r2, [r7, #24]
 8014a4c:	429a      	cmp	r2, r3
 8014a4e:	d302      	bcc.n	8014a56 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8014a50:	2301      	movs	r3, #1
 8014a52:	61fb      	str	r3, [r7, #28]
 8014a54:	e015      	b.n	8014a82 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8014a56:	683b      	ldr	r3, [r7, #0]
 8014a58:	681b      	ldr	r3, [r3, #0]
 8014a5a:	697a      	ldr	r2, [r7, #20]
 8014a5c:	429a      	cmp	r2, r3
 8014a5e:	d20b      	bcs.n	8014a78 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8014a60:	683b      	ldr	r3, [r7, #0]
 8014a62:	681a      	ldr	r2, [r3, #0]
 8014a64:	697b      	ldr	r3, [r7, #20]
 8014a66:	1ad2      	subs	r2, r2, r3
 8014a68:	683b      	ldr	r3, [r7, #0]
 8014a6a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8014a6c:	6878      	ldr	r0, [r7, #4]
 8014a6e:	f7ff ff9b 	bl	80149a8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8014a72:	2300      	movs	r3, #0
 8014a74:	61fb      	str	r3, [r7, #28]
 8014a76:	e004      	b.n	8014a82 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8014a78:	683b      	ldr	r3, [r7, #0]
 8014a7a:	2200      	movs	r2, #0
 8014a7c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8014a7e:	2301      	movs	r3, #1
 8014a80:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8014a82:	f000 feaf 	bl	80157e4 <vPortExitCritical>

	return xReturn;
 8014a86:	69fb      	ldr	r3, [r7, #28]
}
 8014a88:	4618      	mov	r0, r3
 8014a8a:	3720      	adds	r7, #32
 8014a8c:	46bd      	mov	sp, r7
 8014a8e:	bd80      	pop	{r7, pc}
 8014a90:	24001ce0 	.word	0x24001ce0
 8014a94:	24001cf4 	.word	0x24001cf4

08014a98 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8014a98:	b480      	push	{r7}
 8014a9a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8014a9c:	4b03      	ldr	r3, [pc, #12]	; (8014aac <vTaskMissedYield+0x14>)
 8014a9e:	2201      	movs	r2, #1
 8014aa0:	601a      	str	r2, [r3, #0]
}
 8014aa2:	bf00      	nop
 8014aa4:	46bd      	mov	sp, r7
 8014aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014aaa:	4770      	bx	lr
 8014aac:	24001cf0 	.word	0x24001cf0

08014ab0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8014ab0:	b580      	push	{r7, lr}
 8014ab2:	b082      	sub	sp, #8
 8014ab4:	af00      	add	r7, sp, #0
 8014ab6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8014ab8:	f000 f852 	bl	8014b60 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8014abc:	4b06      	ldr	r3, [pc, #24]	; (8014ad8 <prvIdleTask+0x28>)
 8014abe:	681b      	ldr	r3, [r3, #0]
 8014ac0:	2b01      	cmp	r3, #1
 8014ac2:	d9f9      	bls.n	8014ab8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8014ac4:	4b05      	ldr	r3, [pc, #20]	; (8014adc <prvIdleTask+0x2c>)
 8014ac6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014aca:	601a      	str	r2, [r3, #0]
 8014acc:	f3bf 8f4f 	dsb	sy
 8014ad0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8014ad4:	e7f0      	b.n	8014ab8 <prvIdleTask+0x8>
 8014ad6:	bf00      	nop
 8014ad8:	2400180c 	.word	0x2400180c
 8014adc:	e000ed04 	.word	0xe000ed04

08014ae0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8014ae0:	b580      	push	{r7, lr}
 8014ae2:	b082      	sub	sp, #8
 8014ae4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014ae6:	2300      	movs	r3, #0
 8014ae8:	607b      	str	r3, [r7, #4]
 8014aea:	e00c      	b.n	8014b06 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8014aec:	687a      	ldr	r2, [r7, #4]
 8014aee:	4613      	mov	r3, r2
 8014af0:	009b      	lsls	r3, r3, #2
 8014af2:	4413      	add	r3, r2
 8014af4:	009b      	lsls	r3, r3, #2
 8014af6:	4a12      	ldr	r2, [pc, #72]	; (8014b40 <prvInitialiseTaskLists+0x60>)
 8014af8:	4413      	add	r3, r2
 8014afa:	4618      	mov	r0, r3
 8014afc:	f7fe fa0c 	bl	8012f18 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	3301      	adds	r3, #1
 8014b04:	607b      	str	r3, [r7, #4]
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	2b37      	cmp	r3, #55	; 0x37
 8014b0a:	d9ef      	bls.n	8014aec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8014b0c:	480d      	ldr	r0, [pc, #52]	; (8014b44 <prvInitialiseTaskLists+0x64>)
 8014b0e:	f7fe fa03 	bl	8012f18 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8014b12:	480d      	ldr	r0, [pc, #52]	; (8014b48 <prvInitialiseTaskLists+0x68>)
 8014b14:	f7fe fa00 	bl	8012f18 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014b18:	480c      	ldr	r0, [pc, #48]	; (8014b4c <prvInitialiseTaskLists+0x6c>)
 8014b1a:	f7fe f9fd 	bl	8012f18 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8014b1e:	480c      	ldr	r0, [pc, #48]	; (8014b50 <prvInitialiseTaskLists+0x70>)
 8014b20:	f7fe f9fa 	bl	8012f18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8014b24:	480b      	ldr	r0, [pc, #44]	; (8014b54 <prvInitialiseTaskLists+0x74>)
 8014b26:	f7fe f9f7 	bl	8012f18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8014b2a:	4b0b      	ldr	r3, [pc, #44]	; (8014b58 <prvInitialiseTaskLists+0x78>)
 8014b2c:	4a05      	ldr	r2, [pc, #20]	; (8014b44 <prvInitialiseTaskLists+0x64>)
 8014b2e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8014b30:	4b0a      	ldr	r3, [pc, #40]	; (8014b5c <prvInitialiseTaskLists+0x7c>)
 8014b32:	4a05      	ldr	r2, [pc, #20]	; (8014b48 <prvInitialiseTaskLists+0x68>)
 8014b34:	601a      	str	r2, [r3, #0]
}
 8014b36:	bf00      	nop
 8014b38:	3708      	adds	r7, #8
 8014b3a:	46bd      	mov	sp, r7
 8014b3c:	bd80      	pop	{r7, pc}
 8014b3e:	bf00      	nop
 8014b40:	2400180c 	.word	0x2400180c
 8014b44:	24001c6c 	.word	0x24001c6c
 8014b48:	24001c80 	.word	0x24001c80
 8014b4c:	24001c9c 	.word	0x24001c9c
 8014b50:	24001cb0 	.word	0x24001cb0
 8014b54:	24001cc8 	.word	0x24001cc8
 8014b58:	24001c94 	.word	0x24001c94
 8014b5c:	24001c98 	.word	0x24001c98

08014b60 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8014b60:	b580      	push	{r7, lr}
 8014b62:	b082      	sub	sp, #8
 8014b64:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014b66:	e019      	b.n	8014b9c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8014b68:	f000 fe0c 	bl	8015784 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014b6c:	4b10      	ldr	r3, [pc, #64]	; (8014bb0 <prvCheckTasksWaitingTermination+0x50>)
 8014b6e:	68db      	ldr	r3, [r3, #12]
 8014b70:	68db      	ldr	r3, [r3, #12]
 8014b72:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014b74:	687b      	ldr	r3, [r7, #4]
 8014b76:	3304      	adds	r3, #4
 8014b78:	4618      	mov	r0, r3
 8014b7a:	f7fe fa57 	bl	801302c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8014b7e:	4b0d      	ldr	r3, [pc, #52]	; (8014bb4 <prvCheckTasksWaitingTermination+0x54>)
 8014b80:	681b      	ldr	r3, [r3, #0]
 8014b82:	3b01      	subs	r3, #1
 8014b84:	4a0b      	ldr	r2, [pc, #44]	; (8014bb4 <prvCheckTasksWaitingTermination+0x54>)
 8014b86:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8014b88:	4b0b      	ldr	r3, [pc, #44]	; (8014bb8 <prvCheckTasksWaitingTermination+0x58>)
 8014b8a:	681b      	ldr	r3, [r3, #0]
 8014b8c:	3b01      	subs	r3, #1
 8014b8e:	4a0a      	ldr	r2, [pc, #40]	; (8014bb8 <prvCheckTasksWaitingTermination+0x58>)
 8014b90:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8014b92:	f000 fe27 	bl	80157e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8014b96:	6878      	ldr	r0, [r7, #4]
 8014b98:	f000 f810 	bl	8014bbc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014b9c:	4b06      	ldr	r3, [pc, #24]	; (8014bb8 <prvCheckTasksWaitingTermination+0x58>)
 8014b9e:	681b      	ldr	r3, [r3, #0]
 8014ba0:	2b00      	cmp	r3, #0
 8014ba2:	d1e1      	bne.n	8014b68 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8014ba4:	bf00      	nop
 8014ba6:	bf00      	nop
 8014ba8:	3708      	adds	r7, #8
 8014baa:	46bd      	mov	sp, r7
 8014bac:	bd80      	pop	{r7, pc}
 8014bae:	bf00      	nop
 8014bb0:	24001cb0 	.word	0x24001cb0
 8014bb4:	24001cdc 	.word	0x24001cdc
 8014bb8:	24001cc4 	.word	0x24001cc4

08014bbc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8014bbc:	b580      	push	{r7, lr}
 8014bbe:	b084      	sub	sp, #16
 8014bc0:	af00      	add	r7, sp, #0
 8014bc2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8014bc4:	687b      	ldr	r3, [r7, #4]
 8014bc6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8014bca:	2b00      	cmp	r3, #0
 8014bcc:	d108      	bne.n	8014be0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8014bce:	687b      	ldr	r3, [r7, #4]
 8014bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014bd2:	4618      	mov	r0, r3
 8014bd4:	f000 ffc4 	bl	8015b60 <vPortFree>
				vPortFree( pxTCB );
 8014bd8:	6878      	ldr	r0, [r7, #4]
 8014bda:	f000 ffc1 	bl	8015b60 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8014bde:	e018      	b.n	8014c12 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8014be0:	687b      	ldr	r3, [r7, #4]
 8014be2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8014be6:	2b01      	cmp	r3, #1
 8014be8:	d103      	bne.n	8014bf2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8014bea:	6878      	ldr	r0, [r7, #4]
 8014bec:	f000 ffb8 	bl	8015b60 <vPortFree>
	}
 8014bf0:	e00f      	b.n	8014c12 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8014bf2:	687b      	ldr	r3, [r7, #4]
 8014bf4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8014bf8:	2b02      	cmp	r3, #2
 8014bfa:	d00a      	beq.n	8014c12 <prvDeleteTCB+0x56>
	__asm volatile
 8014bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c00:	f383 8811 	msr	BASEPRI, r3
 8014c04:	f3bf 8f6f 	isb	sy
 8014c08:	f3bf 8f4f 	dsb	sy
 8014c0c:	60fb      	str	r3, [r7, #12]
}
 8014c0e:	bf00      	nop
 8014c10:	e7fe      	b.n	8014c10 <prvDeleteTCB+0x54>
	}
 8014c12:	bf00      	nop
 8014c14:	3710      	adds	r7, #16
 8014c16:	46bd      	mov	sp, r7
 8014c18:	bd80      	pop	{r7, pc}
	...

08014c1c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8014c1c:	b480      	push	{r7}
 8014c1e:	b083      	sub	sp, #12
 8014c20:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014c22:	4b0c      	ldr	r3, [pc, #48]	; (8014c54 <prvResetNextTaskUnblockTime+0x38>)
 8014c24:	681b      	ldr	r3, [r3, #0]
 8014c26:	681b      	ldr	r3, [r3, #0]
 8014c28:	2b00      	cmp	r3, #0
 8014c2a:	d104      	bne.n	8014c36 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8014c2c:	4b0a      	ldr	r3, [pc, #40]	; (8014c58 <prvResetNextTaskUnblockTime+0x3c>)
 8014c2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014c32:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8014c34:	e008      	b.n	8014c48 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014c36:	4b07      	ldr	r3, [pc, #28]	; (8014c54 <prvResetNextTaskUnblockTime+0x38>)
 8014c38:	681b      	ldr	r3, [r3, #0]
 8014c3a:	68db      	ldr	r3, [r3, #12]
 8014c3c:	68db      	ldr	r3, [r3, #12]
 8014c3e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8014c40:	687b      	ldr	r3, [r7, #4]
 8014c42:	685b      	ldr	r3, [r3, #4]
 8014c44:	4a04      	ldr	r2, [pc, #16]	; (8014c58 <prvResetNextTaskUnblockTime+0x3c>)
 8014c46:	6013      	str	r3, [r2, #0]
}
 8014c48:	bf00      	nop
 8014c4a:	370c      	adds	r7, #12
 8014c4c:	46bd      	mov	sp, r7
 8014c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c52:	4770      	bx	lr
 8014c54:	24001c94 	.word	0x24001c94
 8014c58:	24001cfc 	.word	0x24001cfc

08014c5c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8014c5c:	b480      	push	{r7}
 8014c5e:	b083      	sub	sp, #12
 8014c60:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8014c62:	4b0b      	ldr	r3, [pc, #44]	; (8014c90 <xTaskGetSchedulerState+0x34>)
 8014c64:	681b      	ldr	r3, [r3, #0]
 8014c66:	2b00      	cmp	r3, #0
 8014c68:	d102      	bne.n	8014c70 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8014c6a:	2301      	movs	r3, #1
 8014c6c:	607b      	str	r3, [r7, #4]
 8014c6e:	e008      	b.n	8014c82 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014c70:	4b08      	ldr	r3, [pc, #32]	; (8014c94 <xTaskGetSchedulerState+0x38>)
 8014c72:	681b      	ldr	r3, [r3, #0]
 8014c74:	2b00      	cmp	r3, #0
 8014c76:	d102      	bne.n	8014c7e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8014c78:	2302      	movs	r3, #2
 8014c7a:	607b      	str	r3, [r7, #4]
 8014c7c:	e001      	b.n	8014c82 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8014c7e:	2300      	movs	r3, #0
 8014c80:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8014c82:	687b      	ldr	r3, [r7, #4]
	}
 8014c84:	4618      	mov	r0, r3
 8014c86:	370c      	adds	r7, #12
 8014c88:	46bd      	mov	sp, r7
 8014c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c8e:	4770      	bx	lr
 8014c90:	24001ce8 	.word	0x24001ce8
 8014c94:	24001d04 	.word	0x24001d04

08014c98 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8014c98:	b580      	push	{r7, lr}
 8014c9a:	b086      	sub	sp, #24
 8014c9c:	af00      	add	r7, sp, #0
 8014c9e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8014ca4:	2300      	movs	r3, #0
 8014ca6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	2b00      	cmp	r3, #0
 8014cac:	d056      	beq.n	8014d5c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8014cae:	4b2e      	ldr	r3, [pc, #184]	; (8014d68 <xTaskPriorityDisinherit+0xd0>)
 8014cb0:	681b      	ldr	r3, [r3, #0]
 8014cb2:	693a      	ldr	r2, [r7, #16]
 8014cb4:	429a      	cmp	r2, r3
 8014cb6:	d00a      	beq.n	8014cce <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8014cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014cbc:	f383 8811 	msr	BASEPRI, r3
 8014cc0:	f3bf 8f6f 	isb	sy
 8014cc4:	f3bf 8f4f 	dsb	sy
 8014cc8:	60fb      	str	r3, [r7, #12]
}
 8014cca:	bf00      	nop
 8014ccc:	e7fe      	b.n	8014ccc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8014cce:	693b      	ldr	r3, [r7, #16]
 8014cd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014cd2:	2b00      	cmp	r3, #0
 8014cd4:	d10a      	bne.n	8014cec <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8014cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014cda:	f383 8811 	msr	BASEPRI, r3
 8014cde:	f3bf 8f6f 	isb	sy
 8014ce2:	f3bf 8f4f 	dsb	sy
 8014ce6:	60bb      	str	r3, [r7, #8]
}
 8014ce8:	bf00      	nop
 8014cea:	e7fe      	b.n	8014cea <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8014cec:	693b      	ldr	r3, [r7, #16]
 8014cee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014cf0:	1e5a      	subs	r2, r3, #1
 8014cf2:	693b      	ldr	r3, [r7, #16]
 8014cf4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8014cf6:	693b      	ldr	r3, [r7, #16]
 8014cf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014cfa:	693b      	ldr	r3, [r7, #16]
 8014cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014cfe:	429a      	cmp	r2, r3
 8014d00:	d02c      	beq.n	8014d5c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8014d02:	693b      	ldr	r3, [r7, #16]
 8014d04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014d06:	2b00      	cmp	r3, #0
 8014d08:	d128      	bne.n	8014d5c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014d0a:	693b      	ldr	r3, [r7, #16]
 8014d0c:	3304      	adds	r3, #4
 8014d0e:	4618      	mov	r0, r3
 8014d10:	f7fe f98c 	bl	801302c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8014d14:	693b      	ldr	r3, [r7, #16]
 8014d16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014d18:	693b      	ldr	r3, [r7, #16]
 8014d1a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014d1c:	693b      	ldr	r3, [r7, #16]
 8014d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d20:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014d24:	693b      	ldr	r3, [r7, #16]
 8014d26:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8014d28:	693b      	ldr	r3, [r7, #16]
 8014d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d2c:	4b0f      	ldr	r3, [pc, #60]	; (8014d6c <xTaskPriorityDisinherit+0xd4>)
 8014d2e:	681b      	ldr	r3, [r3, #0]
 8014d30:	429a      	cmp	r2, r3
 8014d32:	d903      	bls.n	8014d3c <xTaskPriorityDisinherit+0xa4>
 8014d34:	693b      	ldr	r3, [r7, #16]
 8014d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d38:	4a0c      	ldr	r2, [pc, #48]	; (8014d6c <xTaskPriorityDisinherit+0xd4>)
 8014d3a:	6013      	str	r3, [r2, #0]
 8014d3c:	693b      	ldr	r3, [r7, #16]
 8014d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d40:	4613      	mov	r3, r2
 8014d42:	009b      	lsls	r3, r3, #2
 8014d44:	4413      	add	r3, r2
 8014d46:	009b      	lsls	r3, r3, #2
 8014d48:	4a09      	ldr	r2, [pc, #36]	; (8014d70 <xTaskPriorityDisinherit+0xd8>)
 8014d4a:	441a      	add	r2, r3
 8014d4c:	693b      	ldr	r3, [r7, #16]
 8014d4e:	3304      	adds	r3, #4
 8014d50:	4619      	mov	r1, r3
 8014d52:	4610      	mov	r0, r2
 8014d54:	f7fe f90d 	bl	8012f72 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8014d58:	2301      	movs	r3, #1
 8014d5a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014d5c:	697b      	ldr	r3, [r7, #20]
	}
 8014d5e:	4618      	mov	r0, r3
 8014d60:	3718      	adds	r7, #24
 8014d62:	46bd      	mov	sp, r7
 8014d64:	bd80      	pop	{r7, pc}
 8014d66:	bf00      	nop
 8014d68:	24001808 	.word	0x24001808
 8014d6c:	24001ce4 	.word	0x24001ce4
 8014d70:	2400180c 	.word	0x2400180c

08014d74 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8014d74:	b480      	push	{r7}
 8014d76:	b083      	sub	sp, #12
 8014d78:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8014d7a:	4b09      	ldr	r3, [pc, #36]	; (8014da0 <uxTaskResetEventItemValue+0x2c>)
 8014d7c:	681b      	ldr	r3, [r3, #0]
 8014d7e:	699b      	ldr	r3, [r3, #24]
 8014d80:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014d82:	4b07      	ldr	r3, [pc, #28]	; (8014da0 <uxTaskResetEventItemValue+0x2c>)
 8014d84:	681b      	ldr	r3, [r3, #0]
 8014d86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d88:	4b05      	ldr	r3, [pc, #20]	; (8014da0 <uxTaskResetEventItemValue+0x2c>)
 8014d8a:	681b      	ldr	r3, [r3, #0]
 8014d8c:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8014d90:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8014d92:	687b      	ldr	r3, [r7, #4]
}
 8014d94:	4618      	mov	r0, r3
 8014d96:	370c      	adds	r7, #12
 8014d98:	46bd      	mov	sp, r7
 8014d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d9e:	4770      	bx	lr
 8014da0:	24001808 	.word	0x24001808

08014da4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8014da4:	b580      	push	{r7, lr}
 8014da6:	b084      	sub	sp, #16
 8014da8:	af00      	add	r7, sp, #0
 8014daa:	6078      	str	r0, [r7, #4]
 8014dac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8014dae:	4b21      	ldr	r3, [pc, #132]	; (8014e34 <prvAddCurrentTaskToDelayedList+0x90>)
 8014db0:	681b      	ldr	r3, [r3, #0]
 8014db2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014db4:	4b20      	ldr	r3, [pc, #128]	; (8014e38 <prvAddCurrentTaskToDelayedList+0x94>)
 8014db6:	681b      	ldr	r3, [r3, #0]
 8014db8:	3304      	adds	r3, #4
 8014dba:	4618      	mov	r0, r3
 8014dbc:	f7fe f936 	bl	801302c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014dc6:	d10a      	bne.n	8014dde <prvAddCurrentTaskToDelayedList+0x3a>
 8014dc8:	683b      	ldr	r3, [r7, #0]
 8014dca:	2b00      	cmp	r3, #0
 8014dcc:	d007      	beq.n	8014dde <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014dce:	4b1a      	ldr	r3, [pc, #104]	; (8014e38 <prvAddCurrentTaskToDelayedList+0x94>)
 8014dd0:	681b      	ldr	r3, [r3, #0]
 8014dd2:	3304      	adds	r3, #4
 8014dd4:	4619      	mov	r1, r3
 8014dd6:	4819      	ldr	r0, [pc, #100]	; (8014e3c <prvAddCurrentTaskToDelayedList+0x98>)
 8014dd8:	f7fe f8cb 	bl	8012f72 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8014ddc:	e026      	b.n	8014e2c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8014dde:	68fa      	ldr	r2, [r7, #12]
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	4413      	add	r3, r2
 8014de4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8014de6:	4b14      	ldr	r3, [pc, #80]	; (8014e38 <prvAddCurrentTaskToDelayedList+0x94>)
 8014de8:	681b      	ldr	r3, [r3, #0]
 8014dea:	68ba      	ldr	r2, [r7, #8]
 8014dec:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8014dee:	68ba      	ldr	r2, [r7, #8]
 8014df0:	68fb      	ldr	r3, [r7, #12]
 8014df2:	429a      	cmp	r2, r3
 8014df4:	d209      	bcs.n	8014e0a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014df6:	4b12      	ldr	r3, [pc, #72]	; (8014e40 <prvAddCurrentTaskToDelayedList+0x9c>)
 8014df8:	681a      	ldr	r2, [r3, #0]
 8014dfa:	4b0f      	ldr	r3, [pc, #60]	; (8014e38 <prvAddCurrentTaskToDelayedList+0x94>)
 8014dfc:	681b      	ldr	r3, [r3, #0]
 8014dfe:	3304      	adds	r3, #4
 8014e00:	4619      	mov	r1, r3
 8014e02:	4610      	mov	r0, r2
 8014e04:	f7fe f8d9 	bl	8012fba <vListInsert>
}
 8014e08:	e010      	b.n	8014e2c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014e0a:	4b0e      	ldr	r3, [pc, #56]	; (8014e44 <prvAddCurrentTaskToDelayedList+0xa0>)
 8014e0c:	681a      	ldr	r2, [r3, #0]
 8014e0e:	4b0a      	ldr	r3, [pc, #40]	; (8014e38 <prvAddCurrentTaskToDelayedList+0x94>)
 8014e10:	681b      	ldr	r3, [r3, #0]
 8014e12:	3304      	adds	r3, #4
 8014e14:	4619      	mov	r1, r3
 8014e16:	4610      	mov	r0, r2
 8014e18:	f7fe f8cf 	bl	8012fba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8014e1c:	4b0a      	ldr	r3, [pc, #40]	; (8014e48 <prvAddCurrentTaskToDelayedList+0xa4>)
 8014e1e:	681b      	ldr	r3, [r3, #0]
 8014e20:	68ba      	ldr	r2, [r7, #8]
 8014e22:	429a      	cmp	r2, r3
 8014e24:	d202      	bcs.n	8014e2c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8014e26:	4a08      	ldr	r2, [pc, #32]	; (8014e48 <prvAddCurrentTaskToDelayedList+0xa4>)
 8014e28:	68bb      	ldr	r3, [r7, #8]
 8014e2a:	6013      	str	r3, [r2, #0]
}
 8014e2c:	bf00      	nop
 8014e2e:	3710      	adds	r7, #16
 8014e30:	46bd      	mov	sp, r7
 8014e32:	bd80      	pop	{r7, pc}
 8014e34:	24001ce0 	.word	0x24001ce0
 8014e38:	24001808 	.word	0x24001808
 8014e3c:	24001cc8 	.word	0x24001cc8
 8014e40:	24001c98 	.word	0x24001c98
 8014e44:	24001c94 	.word	0x24001c94
 8014e48:	24001cfc 	.word	0x24001cfc

08014e4c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8014e4c:	b580      	push	{r7, lr}
 8014e4e:	b08a      	sub	sp, #40	; 0x28
 8014e50:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8014e52:	2300      	movs	r3, #0
 8014e54:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8014e56:	f000 fb07 	bl	8015468 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8014e5a:	4b1c      	ldr	r3, [pc, #112]	; (8014ecc <xTimerCreateTimerTask+0x80>)
 8014e5c:	681b      	ldr	r3, [r3, #0]
 8014e5e:	2b00      	cmp	r3, #0
 8014e60:	d021      	beq.n	8014ea6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8014e62:	2300      	movs	r3, #0
 8014e64:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8014e66:	2300      	movs	r3, #0
 8014e68:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8014e6a:	1d3a      	adds	r2, r7, #4
 8014e6c:	f107 0108 	add.w	r1, r7, #8
 8014e70:	f107 030c 	add.w	r3, r7, #12
 8014e74:	4618      	mov	r0, r3
 8014e76:	f7fd fe47 	bl	8012b08 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8014e7a:	6879      	ldr	r1, [r7, #4]
 8014e7c:	68bb      	ldr	r3, [r7, #8]
 8014e7e:	68fa      	ldr	r2, [r7, #12]
 8014e80:	9202      	str	r2, [sp, #8]
 8014e82:	9301      	str	r3, [sp, #4]
 8014e84:	2302      	movs	r3, #2
 8014e86:	9300      	str	r3, [sp, #0]
 8014e88:	2300      	movs	r3, #0
 8014e8a:	460a      	mov	r2, r1
 8014e8c:	4910      	ldr	r1, [pc, #64]	; (8014ed0 <xTimerCreateTimerTask+0x84>)
 8014e8e:	4811      	ldr	r0, [pc, #68]	; (8014ed4 <xTimerCreateTimerTask+0x88>)
 8014e90:	f7fe fe9c 	bl	8013bcc <xTaskCreateStatic>
 8014e94:	4603      	mov	r3, r0
 8014e96:	4a10      	ldr	r2, [pc, #64]	; (8014ed8 <xTimerCreateTimerTask+0x8c>)
 8014e98:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8014e9a:	4b0f      	ldr	r3, [pc, #60]	; (8014ed8 <xTimerCreateTimerTask+0x8c>)
 8014e9c:	681b      	ldr	r3, [r3, #0]
 8014e9e:	2b00      	cmp	r3, #0
 8014ea0:	d001      	beq.n	8014ea6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8014ea2:	2301      	movs	r3, #1
 8014ea4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8014ea6:	697b      	ldr	r3, [r7, #20]
 8014ea8:	2b00      	cmp	r3, #0
 8014eaa:	d10a      	bne.n	8014ec2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8014eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014eb0:	f383 8811 	msr	BASEPRI, r3
 8014eb4:	f3bf 8f6f 	isb	sy
 8014eb8:	f3bf 8f4f 	dsb	sy
 8014ebc:	613b      	str	r3, [r7, #16]
}
 8014ebe:	bf00      	nop
 8014ec0:	e7fe      	b.n	8014ec0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8014ec2:	697b      	ldr	r3, [r7, #20]
}
 8014ec4:	4618      	mov	r0, r3
 8014ec6:	3718      	adds	r7, #24
 8014ec8:	46bd      	mov	sp, r7
 8014eca:	bd80      	pop	{r7, pc}
 8014ecc:	24001d38 	.word	0x24001d38
 8014ed0:	08016ac4 	.word	0x08016ac4
 8014ed4:	08015011 	.word	0x08015011
 8014ed8:	24001d3c 	.word	0x24001d3c

08014edc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8014edc:	b580      	push	{r7, lr}
 8014ede:	b08a      	sub	sp, #40	; 0x28
 8014ee0:	af00      	add	r7, sp, #0
 8014ee2:	60f8      	str	r0, [r7, #12]
 8014ee4:	60b9      	str	r1, [r7, #8]
 8014ee6:	607a      	str	r2, [r7, #4]
 8014ee8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8014eea:	2300      	movs	r3, #0
 8014eec:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8014eee:	68fb      	ldr	r3, [r7, #12]
 8014ef0:	2b00      	cmp	r3, #0
 8014ef2:	d10a      	bne.n	8014f0a <xTimerGenericCommand+0x2e>
	__asm volatile
 8014ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ef8:	f383 8811 	msr	BASEPRI, r3
 8014efc:	f3bf 8f6f 	isb	sy
 8014f00:	f3bf 8f4f 	dsb	sy
 8014f04:	623b      	str	r3, [r7, #32]
}
 8014f06:	bf00      	nop
 8014f08:	e7fe      	b.n	8014f08 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8014f0a:	4b1a      	ldr	r3, [pc, #104]	; (8014f74 <xTimerGenericCommand+0x98>)
 8014f0c:	681b      	ldr	r3, [r3, #0]
 8014f0e:	2b00      	cmp	r3, #0
 8014f10:	d02a      	beq.n	8014f68 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8014f12:	68bb      	ldr	r3, [r7, #8]
 8014f14:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8014f16:	687b      	ldr	r3, [r7, #4]
 8014f18:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8014f1a:	68fb      	ldr	r3, [r7, #12]
 8014f1c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8014f1e:	68bb      	ldr	r3, [r7, #8]
 8014f20:	2b05      	cmp	r3, #5
 8014f22:	dc18      	bgt.n	8014f56 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8014f24:	f7ff fe9a 	bl	8014c5c <xTaskGetSchedulerState>
 8014f28:	4603      	mov	r3, r0
 8014f2a:	2b02      	cmp	r3, #2
 8014f2c:	d109      	bne.n	8014f42 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8014f2e:	4b11      	ldr	r3, [pc, #68]	; (8014f74 <xTimerGenericCommand+0x98>)
 8014f30:	6818      	ldr	r0, [r3, #0]
 8014f32:	f107 0110 	add.w	r1, r7, #16
 8014f36:	2300      	movs	r3, #0
 8014f38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014f3a:	f7fe f9df 	bl	80132fc <xQueueGenericSend>
 8014f3e:	6278      	str	r0, [r7, #36]	; 0x24
 8014f40:	e012      	b.n	8014f68 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8014f42:	4b0c      	ldr	r3, [pc, #48]	; (8014f74 <xTimerGenericCommand+0x98>)
 8014f44:	6818      	ldr	r0, [r3, #0]
 8014f46:	f107 0110 	add.w	r1, r7, #16
 8014f4a:	2300      	movs	r3, #0
 8014f4c:	2200      	movs	r2, #0
 8014f4e:	f7fe f9d5 	bl	80132fc <xQueueGenericSend>
 8014f52:	6278      	str	r0, [r7, #36]	; 0x24
 8014f54:	e008      	b.n	8014f68 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8014f56:	4b07      	ldr	r3, [pc, #28]	; (8014f74 <xTimerGenericCommand+0x98>)
 8014f58:	6818      	ldr	r0, [r3, #0]
 8014f5a:	f107 0110 	add.w	r1, r7, #16
 8014f5e:	2300      	movs	r3, #0
 8014f60:	683a      	ldr	r2, [r7, #0]
 8014f62:	f7fe fac9 	bl	80134f8 <xQueueGenericSendFromISR>
 8014f66:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8014f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014f6a:	4618      	mov	r0, r3
 8014f6c:	3728      	adds	r7, #40	; 0x28
 8014f6e:	46bd      	mov	sp, r7
 8014f70:	bd80      	pop	{r7, pc}
 8014f72:	bf00      	nop
 8014f74:	24001d38 	.word	0x24001d38

08014f78 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8014f78:	b580      	push	{r7, lr}
 8014f7a:	b088      	sub	sp, #32
 8014f7c:	af02      	add	r7, sp, #8
 8014f7e:	6078      	str	r0, [r7, #4]
 8014f80:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014f82:	4b22      	ldr	r3, [pc, #136]	; (801500c <prvProcessExpiredTimer+0x94>)
 8014f84:	681b      	ldr	r3, [r3, #0]
 8014f86:	68db      	ldr	r3, [r3, #12]
 8014f88:	68db      	ldr	r3, [r3, #12]
 8014f8a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014f8c:	697b      	ldr	r3, [r7, #20]
 8014f8e:	3304      	adds	r3, #4
 8014f90:	4618      	mov	r0, r3
 8014f92:	f7fe f84b 	bl	801302c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8014f96:	697b      	ldr	r3, [r7, #20]
 8014f98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014f9c:	f003 0304 	and.w	r3, r3, #4
 8014fa0:	2b00      	cmp	r3, #0
 8014fa2:	d022      	beq.n	8014fea <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8014fa4:	697b      	ldr	r3, [r7, #20]
 8014fa6:	699a      	ldr	r2, [r3, #24]
 8014fa8:	687b      	ldr	r3, [r7, #4]
 8014faa:	18d1      	adds	r1, r2, r3
 8014fac:	687b      	ldr	r3, [r7, #4]
 8014fae:	683a      	ldr	r2, [r7, #0]
 8014fb0:	6978      	ldr	r0, [r7, #20]
 8014fb2:	f000 f8d1 	bl	8015158 <prvInsertTimerInActiveList>
 8014fb6:	4603      	mov	r3, r0
 8014fb8:	2b00      	cmp	r3, #0
 8014fba:	d01f      	beq.n	8014ffc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8014fbc:	2300      	movs	r3, #0
 8014fbe:	9300      	str	r3, [sp, #0]
 8014fc0:	2300      	movs	r3, #0
 8014fc2:	687a      	ldr	r2, [r7, #4]
 8014fc4:	2100      	movs	r1, #0
 8014fc6:	6978      	ldr	r0, [r7, #20]
 8014fc8:	f7ff ff88 	bl	8014edc <xTimerGenericCommand>
 8014fcc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8014fce:	693b      	ldr	r3, [r7, #16]
 8014fd0:	2b00      	cmp	r3, #0
 8014fd2:	d113      	bne.n	8014ffc <prvProcessExpiredTimer+0x84>
	__asm volatile
 8014fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014fd8:	f383 8811 	msr	BASEPRI, r3
 8014fdc:	f3bf 8f6f 	isb	sy
 8014fe0:	f3bf 8f4f 	dsb	sy
 8014fe4:	60fb      	str	r3, [r7, #12]
}
 8014fe6:	bf00      	nop
 8014fe8:	e7fe      	b.n	8014fe8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014fea:	697b      	ldr	r3, [r7, #20]
 8014fec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014ff0:	f023 0301 	bic.w	r3, r3, #1
 8014ff4:	b2da      	uxtb	r2, r3
 8014ff6:	697b      	ldr	r3, [r7, #20]
 8014ff8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014ffc:	697b      	ldr	r3, [r7, #20]
 8014ffe:	6a1b      	ldr	r3, [r3, #32]
 8015000:	6978      	ldr	r0, [r7, #20]
 8015002:	4798      	blx	r3
}
 8015004:	bf00      	nop
 8015006:	3718      	adds	r7, #24
 8015008:	46bd      	mov	sp, r7
 801500a:	bd80      	pop	{r7, pc}
 801500c:	24001d30 	.word	0x24001d30

08015010 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8015010:	b580      	push	{r7, lr}
 8015012:	b084      	sub	sp, #16
 8015014:	af00      	add	r7, sp, #0
 8015016:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8015018:	f107 0308 	add.w	r3, r7, #8
 801501c:	4618      	mov	r0, r3
 801501e:	f000 f857 	bl	80150d0 <prvGetNextExpireTime>
 8015022:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8015024:	68bb      	ldr	r3, [r7, #8]
 8015026:	4619      	mov	r1, r3
 8015028:	68f8      	ldr	r0, [r7, #12]
 801502a:	f000 f803 	bl	8015034 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801502e:	f000 f8d5 	bl	80151dc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8015032:	e7f1      	b.n	8015018 <prvTimerTask+0x8>

08015034 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8015034:	b580      	push	{r7, lr}
 8015036:	b084      	sub	sp, #16
 8015038:	af00      	add	r7, sp, #0
 801503a:	6078      	str	r0, [r7, #4]
 801503c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801503e:	f7ff f98d 	bl	801435c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8015042:	f107 0308 	add.w	r3, r7, #8
 8015046:	4618      	mov	r0, r3
 8015048:	f000 f866 	bl	8015118 <prvSampleTimeNow>
 801504c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801504e:	68bb      	ldr	r3, [r7, #8]
 8015050:	2b00      	cmp	r3, #0
 8015052:	d130      	bne.n	80150b6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8015054:	683b      	ldr	r3, [r7, #0]
 8015056:	2b00      	cmp	r3, #0
 8015058:	d10a      	bne.n	8015070 <prvProcessTimerOrBlockTask+0x3c>
 801505a:	687a      	ldr	r2, [r7, #4]
 801505c:	68fb      	ldr	r3, [r7, #12]
 801505e:	429a      	cmp	r2, r3
 8015060:	d806      	bhi.n	8015070 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8015062:	f7ff f989 	bl	8014378 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8015066:	68f9      	ldr	r1, [r7, #12]
 8015068:	6878      	ldr	r0, [r7, #4]
 801506a:	f7ff ff85 	bl	8014f78 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801506e:	e024      	b.n	80150ba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8015070:	683b      	ldr	r3, [r7, #0]
 8015072:	2b00      	cmp	r3, #0
 8015074:	d008      	beq.n	8015088 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8015076:	4b13      	ldr	r3, [pc, #76]	; (80150c4 <prvProcessTimerOrBlockTask+0x90>)
 8015078:	681b      	ldr	r3, [r3, #0]
 801507a:	681b      	ldr	r3, [r3, #0]
 801507c:	2b00      	cmp	r3, #0
 801507e:	d101      	bne.n	8015084 <prvProcessTimerOrBlockTask+0x50>
 8015080:	2301      	movs	r3, #1
 8015082:	e000      	b.n	8015086 <prvProcessTimerOrBlockTask+0x52>
 8015084:	2300      	movs	r3, #0
 8015086:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8015088:	4b0f      	ldr	r3, [pc, #60]	; (80150c8 <prvProcessTimerOrBlockTask+0x94>)
 801508a:	6818      	ldr	r0, [r3, #0]
 801508c:	687a      	ldr	r2, [r7, #4]
 801508e:	68fb      	ldr	r3, [r7, #12]
 8015090:	1ad3      	subs	r3, r2, r3
 8015092:	683a      	ldr	r2, [r7, #0]
 8015094:	4619      	mov	r1, r3
 8015096:	f7fe fd65 	bl	8013b64 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801509a:	f7ff f96d 	bl	8014378 <xTaskResumeAll>
 801509e:	4603      	mov	r3, r0
 80150a0:	2b00      	cmp	r3, #0
 80150a2:	d10a      	bne.n	80150ba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80150a4:	4b09      	ldr	r3, [pc, #36]	; (80150cc <prvProcessTimerOrBlockTask+0x98>)
 80150a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80150aa:	601a      	str	r2, [r3, #0]
 80150ac:	f3bf 8f4f 	dsb	sy
 80150b0:	f3bf 8f6f 	isb	sy
}
 80150b4:	e001      	b.n	80150ba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80150b6:	f7ff f95f 	bl	8014378 <xTaskResumeAll>
}
 80150ba:	bf00      	nop
 80150bc:	3710      	adds	r7, #16
 80150be:	46bd      	mov	sp, r7
 80150c0:	bd80      	pop	{r7, pc}
 80150c2:	bf00      	nop
 80150c4:	24001d34 	.word	0x24001d34
 80150c8:	24001d38 	.word	0x24001d38
 80150cc:	e000ed04 	.word	0xe000ed04

080150d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80150d0:	b480      	push	{r7}
 80150d2:	b085      	sub	sp, #20
 80150d4:	af00      	add	r7, sp, #0
 80150d6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80150d8:	4b0e      	ldr	r3, [pc, #56]	; (8015114 <prvGetNextExpireTime+0x44>)
 80150da:	681b      	ldr	r3, [r3, #0]
 80150dc:	681b      	ldr	r3, [r3, #0]
 80150de:	2b00      	cmp	r3, #0
 80150e0:	d101      	bne.n	80150e6 <prvGetNextExpireTime+0x16>
 80150e2:	2201      	movs	r2, #1
 80150e4:	e000      	b.n	80150e8 <prvGetNextExpireTime+0x18>
 80150e6:	2200      	movs	r2, #0
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80150ec:	687b      	ldr	r3, [r7, #4]
 80150ee:	681b      	ldr	r3, [r3, #0]
 80150f0:	2b00      	cmp	r3, #0
 80150f2:	d105      	bne.n	8015100 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80150f4:	4b07      	ldr	r3, [pc, #28]	; (8015114 <prvGetNextExpireTime+0x44>)
 80150f6:	681b      	ldr	r3, [r3, #0]
 80150f8:	68db      	ldr	r3, [r3, #12]
 80150fa:	681b      	ldr	r3, [r3, #0]
 80150fc:	60fb      	str	r3, [r7, #12]
 80150fe:	e001      	b.n	8015104 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8015100:	2300      	movs	r3, #0
 8015102:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8015104:	68fb      	ldr	r3, [r7, #12]
}
 8015106:	4618      	mov	r0, r3
 8015108:	3714      	adds	r7, #20
 801510a:	46bd      	mov	sp, r7
 801510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015110:	4770      	bx	lr
 8015112:	bf00      	nop
 8015114:	24001d30 	.word	0x24001d30

08015118 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8015118:	b580      	push	{r7, lr}
 801511a:	b084      	sub	sp, #16
 801511c:	af00      	add	r7, sp, #0
 801511e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8015120:	f7ff f9c8 	bl	80144b4 <xTaskGetTickCount>
 8015124:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8015126:	4b0b      	ldr	r3, [pc, #44]	; (8015154 <prvSampleTimeNow+0x3c>)
 8015128:	681b      	ldr	r3, [r3, #0]
 801512a:	68fa      	ldr	r2, [r7, #12]
 801512c:	429a      	cmp	r2, r3
 801512e:	d205      	bcs.n	801513c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8015130:	f000 f936 	bl	80153a0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8015134:	687b      	ldr	r3, [r7, #4]
 8015136:	2201      	movs	r2, #1
 8015138:	601a      	str	r2, [r3, #0]
 801513a:	e002      	b.n	8015142 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	2200      	movs	r2, #0
 8015140:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8015142:	4a04      	ldr	r2, [pc, #16]	; (8015154 <prvSampleTimeNow+0x3c>)
 8015144:	68fb      	ldr	r3, [r7, #12]
 8015146:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8015148:	68fb      	ldr	r3, [r7, #12]
}
 801514a:	4618      	mov	r0, r3
 801514c:	3710      	adds	r7, #16
 801514e:	46bd      	mov	sp, r7
 8015150:	bd80      	pop	{r7, pc}
 8015152:	bf00      	nop
 8015154:	24001d40 	.word	0x24001d40

08015158 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8015158:	b580      	push	{r7, lr}
 801515a:	b086      	sub	sp, #24
 801515c:	af00      	add	r7, sp, #0
 801515e:	60f8      	str	r0, [r7, #12]
 8015160:	60b9      	str	r1, [r7, #8]
 8015162:	607a      	str	r2, [r7, #4]
 8015164:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8015166:	2300      	movs	r3, #0
 8015168:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801516a:	68fb      	ldr	r3, [r7, #12]
 801516c:	68ba      	ldr	r2, [r7, #8]
 801516e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8015170:	68fb      	ldr	r3, [r7, #12]
 8015172:	68fa      	ldr	r2, [r7, #12]
 8015174:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8015176:	68ba      	ldr	r2, [r7, #8]
 8015178:	687b      	ldr	r3, [r7, #4]
 801517a:	429a      	cmp	r2, r3
 801517c:	d812      	bhi.n	80151a4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801517e:	687a      	ldr	r2, [r7, #4]
 8015180:	683b      	ldr	r3, [r7, #0]
 8015182:	1ad2      	subs	r2, r2, r3
 8015184:	68fb      	ldr	r3, [r7, #12]
 8015186:	699b      	ldr	r3, [r3, #24]
 8015188:	429a      	cmp	r2, r3
 801518a:	d302      	bcc.n	8015192 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801518c:	2301      	movs	r3, #1
 801518e:	617b      	str	r3, [r7, #20]
 8015190:	e01b      	b.n	80151ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8015192:	4b10      	ldr	r3, [pc, #64]	; (80151d4 <prvInsertTimerInActiveList+0x7c>)
 8015194:	681a      	ldr	r2, [r3, #0]
 8015196:	68fb      	ldr	r3, [r7, #12]
 8015198:	3304      	adds	r3, #4
 801519a:	4619      	mov	r1, r3
 801519c:	4610      	mov	r0, r2
 801519e:	f7fd ff0c 	bl	8012fba <vListInsert>
 80151a2:	e012      	b.n	80151ca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80151a4:	687a      	ldr	r2, [r7, #4]
 80151a6:	683b      	ldr	r3, [r7, #0]
 80151a8:	429a      	cmp	r2, r3
 80151aa:	d206      	bcs.n	80151ba <prvInsertTimerInActiveList+0x62>
 80151ac:	68ba      	ldr	r2, [r7, #8]
 80151ae:	683b      	ldr	r3, [r7, #0]
 80151b0:	429a      	cmp	r2, r3
 80151b2:	d302      	bcc.n	80151ba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80151b4:	2301      	movs	r3, #1
 80151b6:	617b      	str	r3, [r7, #20]
 80151b8:	e007      	b.n	80151ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80151ba:	4b07      	ldr	r3, [pc, #28]	; (80151d8 <prvInsertTimerInActiveList+0x80>)
 80151bc:	681a      	ldr	r2, [r3, #0]
 80151be:	68fb      	ldr	r3, [r7, #12]
 80151c0:	3304      	adds	r3, #4
 80151c2:	4619      	mov	r1, r3
 80151c4:	4610      	mov	r0, r2
 80151c6:	f7fd fef8 	bl	8012fba <vListInsert>
		}
	}

	return xProcessTimerNow;
 80151ca:	697b      	ldr	r3, [r7, #20]
}
 80151cc:	4618      	mov	r0, r3
 80151ce:	3718      	adds	r7, #24
 80151d0:	46bd      	mov	sp, r7
 80151d2:	bd80      	pop	{r7, pc}
 80151d4:	24001d34 	.word	0x24001d34
 80151d8:	24001d30 	.word	0x24001d30

080151dc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80151dc:	b580      	push	{r7, lr}
 80151de:	b08e      	sub	sp, #56	; 0x38
 80151e0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80151e2:	e0ca      	b.n	801537a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80151e4:	687b      	ldr	r3, [r7, #4]
 80151e6:	2b00      	cmp	r3, #0
 80151e8:	da18      	bge.n	801521c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80151ea:	1d3b      	adds	r3, r7, #4
 80151ec:	3304      	adds	r3, #4
 80151ee:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80151f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80151f2:	2b00      	cmp	r3, #0
 80151f4:	d10a      	bne.n	801520c <prvProcessReceivedCommands+0x30>
	__asm volatile
 80151f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151fa:	f383 8811 	msr	BASEPRI, r3
 80151fe:	f3bf 8f6f 	isb	sy
 8015202:	f3bf 8f4f 	dsb	sy
 8015206:	61fb      	str	r3, [r7, #28]
}
 8015208:	bf00      	nop
 801520a:	e7fe      	b.n	801520a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801520c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801520e:	681b      	ldr	r3, [r3, #0]
 8015210:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015212:	6850      	ldr	r0, [r2, #4]
 8015214:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015216:	6892      	ldr	r2, [r2, #8]
 8015218:	4611      	mov	r1, r2
 801521a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801521c:	687b      	ldr	r3, [r7, #4]
 801521e:	2b00      	cmp	r3, #0
 8015220:	f2c0 80aa 	blt.w	8015378 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8015224:	68fb      	ldr	r3, [r7, #12]
 8015226:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8015228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801522a:	695b      	ldr	r3, [r3, #20]
 801522c:	2b00      	cmp	r3, #0
 801522e:	d004      	beq.n	801523a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015232:	3304      	adds	r3, #4
 8015234:	4618      	mov	r0, r3
 8015236:	f7fd fef9 	bl	801302c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801523a:	463b      	mov	r3, r7
 801523c:	4618      	mov	r0, r3
 801523e:	f7ff ff6b 	bl	8015118 <prvSampleTimeNow>
 8015242:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	2b09      	cmp	r3, #9
 8015248:	f200 8097 	bhi.w	801537a <prvProcessReceivedCommands+0x19e>
 801524c:	a201      	add	r2, pc, #4	; (adr r2, 8015254 <prvProcessReceivedCommands+0x78>)
 801524e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015252:	bf00      	nop
 8015254:	0801527d 	.word	0x0801527d
 8015258:	0801527d 	.word	0x0801527d
 801525c:	0801527d 	.word	0x0801527d
 8015260:	080152f1 	.word	0x080152f1
 8015264:	08015305 	.word	0x08015305
 8015268:	0801534f 	.word	0x0801534f
 801526c:	0801527d 	.word	0x0801527d
 8015270:	0801527d 	.word	0x0801527d
 8015274:	080152f1 	.word	0x080152f1
 8015278:	08015305 	.word	0x08015305
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801527c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801527e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015282:	f043 0301 	orr.w	r3, r3, #1
 8015286:	b2da      	uxtb	r2, r3
 8015288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801528a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801528e:	68ba      	ldr	r2, [r7, #8]
 8015290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015292:	699b      	ldr	r3, [r3, #24]
 8015294:	18d1      	adds	r1, r2, r3
 8015296:	68bb      	ldr	r3, [r7, #8]
 8015298:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801529a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801529c:	f7ff ff5c 	bl	8015158 <prvInsertTimerInActiveList>
 80152a0:	4603      	mov	r3, r0
 80152a2:	2b00      	cmp	r3, #0
 80152a4:	d069      	beq.n	801537a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80152a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152a8:	6a1b      	ldr	r3, [r3, #32]
 80152aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80152ac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80152ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80152b4:	f003 0304 	and.w	r3, r3, #4
 80152b8:	2b00      	cmp	r3, #0
 80152ba:	d05e      	beq.n	801537a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80152bc:	68ba      	ldr	r2, [r7, #8]
 80152be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152c0:	699b      	ldr	r3, [r3, #24]
 80152c2:	441a      	add	r2, r3
 80152c4:	2300      	movs	r3, #0
 80152c6:	9300      	str	r3, [sp, #0]
 80152c8:	2300      	movs	r3, #0
 80152ca:	2100      	movs	r1, #0
 80152cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80152ce:	f7ff fe05 	bl	8014edc <xTimerGenericCommand>
 80152d2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80152d4:	6a3b      	ldr	r3, [r7, #32]
 80152d6:	2b00      	cmp	r3, #0
 80152d8:	d14f      	bne.n	801537a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80152da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152de:	f383 8811 	msr	BASEPRI, r3
 80152e2:	f3bf 8f6f 	isb	sy
 80152e6:	f3bf 8f4f 	dsb	sy
 80152ea:	61bb      	str	r3, [r7, #24]
}
 80152ec:	bf00      	nop
 80152ee:	e7fe      	b.n	80152ee <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80152f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80152f6:	f023 0301 	bic.w	r3, r3, #1
 80152fa:	b2da      	uxtb	r2, r3
 80152fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8015302:	e03a      	b.n	801537a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8015304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015306:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801530a:	f043 0301 	orr.w	r3, r3, #1
 801530e:	b2da      	uxtb	r2, r3
 8015310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015312:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8015316:	68ba      	ldr	r2, [r7, #8]
 8015318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801531a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801531c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801531e:	699b      	ldr	r3, [r3, #24]
 8015320:	2b00      	cmp	r3, #0
 8015322:	d10a      	bne.n	801533a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8015324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015328:	f383 8811 	msr	BASEPRI, r3
 801532c:	f3bf 8f6f 	isb	sy
 8015330:	f3bf 8f4f 	dsb	sy
 8015334:	617b      	str	r3, [r7, #20]
}
 8015336:	bf00      	nop
 8015338:	e7fe      	b.n	8015338 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801533a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801533c:	699a      	ldr	r2, [r3, #24]
 801533e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015340:	18d1      	adds	r1, r2, r3
 8015342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015344:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015346:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015348:	f7ff ff06 	bl	8015158 <prvInsertTimerInActiveList>
					break;
 801534c:	e015      	b.n	801537a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801534e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015350:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015354:	f003 0302 	and.w	r3, r3, #2
 8015358:	2b00      	cmp	r3, #0
 801535a:	d103      	bne.n	8015364 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 801535c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801535e:	f000 fbff 	bl	8015b60 <vPortFree>
 8015362:	e00a      	b.n	801537a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015366:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801536a:	f023 0301 	bic.w	r3, r3, #1
 801536e:	b2da      	uxtb	r2, r3
 8015370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015372:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8015376:	e000      	b.n	801537a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8015378:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801537a:	4b08      	ldr	r3, [pc, #32]	; (801539c <prvProcessReceivedCommands+0x1c0>)
 801537c:	681b      	ldr	r3, [r3, #0]
 801537e:	1d39      	adds	r1, r7, #4
 8015380:	2200      	movs	r2, #0
 8015382:	4618      	mov	r0, r3
 8015384:	f7fe f954 	bl	8013630 <xQueueReceive>
 8015388:	4603      	mov	r3, r0
 801538a:	2b00      	cmp	r3, #0
 801538c:	f47f af2a 	bne.w	80151e4 <prvProcessReceivedCommands+0x8>
	}
}
 8015390:	bf00      	nop
 8015392:	bf00      	nop
 8015394:	3730      	adds	r7, #48	; 0x30
 8015396:	46bd      	mov	sp, r7
 8015398:	bd80      	pop	{r7, pc}
 801539a:	bf00      	nop
 801539c:	24001d38 	.word	0x24001d38

080153a0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80153a0:	b580      	push	{r7, lr}
 80153a2:	b088      	sub	sp, #32
 80153a4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80153a6:	e048      	b.n	801543a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80153a8:	4b2d      	ldr	r3, [pc, #180]	; (8015460 <prvSwitchTimerLists+0xc0>)
 80153aa:	681b      	ldr	r3, [r3, #0]
 80153ac:	68db      	ldr	r3, [r3, #12]
 80153ae:	681b      	ldr	r3, [r3, #0]
 80153b0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80153b2:	4b2b      	ldr	r3, [pc, #172]	; (8015460 <prvSwitchTimerLists+0xc0>)
 80153b4:	681b      	ldr	r3, [r3, #0]
 80153b6:	68db      	ldr	r3, [r3, #12]
 80153b8:	68db      	ldr	r3, [r3, #12]
 80153ba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80153bc:	68fb      	ldr	r3, [r7, #12]
 80153be:	3304      	adds	r3, #4
 80153c0:	4618      	mov	r0, r3
 80153c2:	f7fd fe33 	bl	801302c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80153c6:	68fb      	ldr	r3, [r7, #12]
 80153c8:	6a1b      	ldr	r3, [r3, #32]
 80153ca:	68f8      	ldr	r0, [r7, #12]
 80153cc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80153ce:	68fb      	ldr	r3, [r7, #12]
 80153d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80153d4:	f003 0304 	and.w	r3, r3, #4
 80153d8:	2b00      	cmp	r3, #0
 80153da:	d02e      	beq.n	801543a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80153dc:	68fb      	ldr	r3, [r7, #12]
 80153de:	699b      	ldr	r3, [r3, #24]
 80153e0:	693a      	ldr	r2, [r7, #16]
 80153e2:	4413      	add	r3, r2
 80153e4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80153e6:	68ba      	ldr	r2, [r7, #8]
 80153e8:	693b      	ldr	r3, [r7, #16]
 80153ea:	429a      	cmp	r2, r3
 80153ec:	d90e      	bls.n	801540c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80153ee:	68fb      	ldr	r3, [r7, #12]
 80153f0:	68ba      	ldr	r2, [r7, #8]
 80153f2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80153f4:	68fb      	ldr	r3, [r7, #12]
 80153f6:	68fa      	ldr	r2, [r7, #12]
 80153f8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80153fa:	4b19      	ldr	r3, [pc, #100]	; (8015460 <prvSwitchTimerLists+0xc0>)
 80153fc:	681a      	ldr	r2, [r3, #0]
 80153fe:	68fb      	ldr	r3, [r7, #12]
 8015400:	3304      	adds	r3, #4
 8015402:	4619      	mov	r1, r3
 8015404:	4610      	mov	r0, r2
 8015406:	f7fd fdd8 	bl	8012fba <vListInsert>
 801540a:	e016      	b.n	801543a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801540c:	2300      	movs	r3, #0
 801540e:	9300      	str	r3, [sp, #0]
 8015410:	2300      	movs	r3, #0
 8015412:	693a      	ldr	r2, [r7, #16]
 8015414:	2100      	movs	r1, #0
 8015416:	68f8      	ldr	r0, [r7, #12]
 8015418:	f7ff fd60 	bl	8014edc <xTimerGenericCommand>
 801541c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801541e:	687b      	ldr	r3, [r7, #4]
 8015420:	2b00      	cmp	r3, #0
 8015422:	d10a      	bne.n	801543a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8015424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015428:	f383 8811 	msr	BASEPRI, r3
 801542c:	f3bf 8f6f 	isb	sy
 8015430:	f3bf 8f4f 	dsb	sy
 8015434:	603b      	str	r3, [r7, #0]
}
 8015436:	bf00      	nop
 8015438:	e7fe      	b.n	8015438 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801543a:	4b09      	ldr	r3, [pc, #36]	; (8015460 <prvSwitchTimerLists+0xc0>)
 801543c:	681b      	ldr	r3, [r3, #0]
 801543e:	681b      	ldr	r3, [r3, #0]
 8015440:	2b00      	cmp	r3, #0
 8015442:	d1b1      	bne.n	80153a8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8015444:	4b06      	ldr	r3, [pc, #24]	; (8015460 <prvSwitchTimerLists+0xc0>)
 8015446:	681b      	ldr	r3, [r3, #0]
 8015448:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801544a:	4b06      	ldr	r3, [pc, #24]	; (8015464 <prvSwitchTimerLists+0xc4>)
 801544c:	681b      	ldr	r3, [r3, #0]
 801544e:	4a04      	ldr	r2, [pc, #16]	; (8015460 <prvSwitchTimerLists+0xc0>)
 8015450:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8015452:	4a04      	ldr	r2, [pc, #16]	; (8015464 <prvSwitchTimerLists+0xc4>)
 8015454:	697b      	ldr	r3, [r7, #20]
 8015456:	6013      	str	r3, [r2, #0]
}
 8015458:	bf00      	nop
 801545a:	3718      	adds	r7, #24
 801545c:	46bd      	mov	sp, r7
 801545e:	bd80      	pop	{r7, pc}
 8015460:	24001d30 	.word	0x24001d30
 8015464:	24001d34 	.word	0x24001d34

08015468 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8015468:	b580      	push	{r7, lr}
 801546a:	b082      	sub	sp, #8
 801546c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801546e:	f000 f989 	bl	8015784 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8015472:	4b15      	ldr	r3, [pc, #84]	; (80154c8 <prvCheckForValidListAndQueue+0x60>)
 8015474:	681b      	ldr	r3, [r3, #0]
 8015476:	2b00      	cmp	r3, #0
 8015478:	d120      	bne.n	80154bc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801547a:	4814      	ldr	r0, [pc, #80]	; (80154cc <prvCheckForValidListAndQueue+0x64>)
 801547c:	f7fd fd4c 	bl	8012f18 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8015480:	4813      	ldr	r0, [pc, #76]	; (80154d0 <prvCheckForValidListAndQueue+0x68>)
 8015482:	f7fd fd49 	bl	8012f18 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8015486:	4b13      	ldr	r3, [pc, #76]	; (80154d4 <prvCheckForValidListAndQueue+0x6c>)
 8015488:	4a10      	ldr	r2, [pc, #64]	; (80154cc <prvCheckForValidListAndQueue+0x64>)
 801548a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801548c:	4b12      	ldr	r3, [pc, #72]	; (80154d8 <prvCheckForValidListAndQueue+0x70>)
 801548e:	4a10      	ldr	r2, [pc, #64]	; (80154d0 <prvCheckForValidListAndQueue+0x68>)
 8015490:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8015492:	2300      	movs	r3, #0
 8015494:	9300      	str	r3, [sp, #0]
 8015496:	4b11      	ldr	r3, [pc, #68]	; (80154dc <prvCheckForValidListAndQueue+0x74>)
 8015498:	4a11      	ldr	r2, [pc, #68]	; (80154e0 <prvCheckForValidListAndQueue+0x78>)
 801549a:	2110      	movs	r1, #16
 801549c:	200a      	movs	r0, #10
 801549e:	f7fd fe57 	bl	8013150 <xQueueGenericCreateStatic>
 80154a2:	4603      	mov	r3, r0
 80154a4:	4a08      	ldr	r2, [pc, #32]	; (80154c8 <prvCheckForValidListAndQueue+0x60>)
 80154a6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80154a8:	4b07      	ldr	r3, [pc, #28]	; (80154c8 <prvCheckForValidListAndQueue+0x60>)
 80154aa:	681b      	ldr	r3, [r3, #0]
 80154ac:	2b00      	cmp	r3, #0
 80154ae:	d005      	beq.n	80154bc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80154b0:	4b05      	ldr	r3, [pc, #20]	; (80154c8 <prvCheckForValidListAndQueue+0x60>)
 80154b2:	681b      	ldr	r3, [r3, #0]
 80154b4:	490b      	ldr	r1, [pc, #44]	; (80154e4 <prvCheckForValidListAndQueue+0x7c>)
 80154b6:	4618      	mov	r0, r3
 80154b8:	f7fe fb2a 	bl	8013b10 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80154bc:	f000 f992 	bl	80157e4 <vPortExitCritical>
}
 80154c0:	bf00      	nop
 80154c2:	46bd      	mov	sp, r7
 80154c4:	bd80      	pop	{r7, pc}
 80154c6:	bf00      	nop
 80154c8:	24001d38 	.word	0x24001d38
 80154cc:	24001d08 	.word	0x24001d08
 80154d0:	24001d1c 	.word	0x24001d1c
 80154d4:	24001d30 	.word	0x24001d30
 80154d8:	24001d34 	.word	0x24001d34
 80154dc:	24001de4 	.word	0x24001de4
 80154e0:	24001d44 	.word	0x24001d44
 80154e4:	08016acc 	.word	0x08016acc

080154e8 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80154e8:	b580      	push	{r7, lr}
 80154ea:	b08a      	sub	sp, #40	; 0x28
 80154ec:	af00      	add	r7, sp, #0
 80154ee:	60f8      	str	r0, [r7, #12]
 80154f0:	60b9      	str	r1, [r7, #8]
 80154f2:	607a      	str	r2, [r7, #4]
 80154f4:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 80154f6:	f06f 0301 	mvn.w	r3, #1
 80154fa:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 80154fc:	68fb      	ldr	r3, [r7, #12]
 80154fe:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8015500:	68bb      	ldr	r3, [r7, #8]
 8015502:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8015504:	687b      	ldr	r3, [r7, #4]
 8015506:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8015508:	4b06      	ldr	r3, [pc, #24]	; (8015524 <xTimerPendFunctionCallFromISR+0x3c>)
 801550a:	6818      	ldr	r0, [r3, #0]
 801550c:	f107 0114 	add.w	r1, r7, #20
 8015510:	2300      	movs	r3, #0
 8015512:	683a      	ldr	r2, [r7, #0]
 8015514:	f7fd fff0 	bl	80134f8 <xQueueGenericSendFromISR>
 8015518:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 801551a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 801551c:	4618      	mov	r0, r3
 801551e:	3728      	adds	r7, #40	; 0x28
 8015520:	46bd      	mov	sp, r7
 8015522:	bd80      	pop	{r7, pc}
 8015524:	24001d38 	.word	0x24001d38

08015528 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8015528:	b480      	push	{r7}
 801552a:	b085      	sub	sp, #20
 801552c:	af00      	add	r7, sp, #0
 801552e:	60f8      	str	r0, [r7, #12]
 8015530:	60b9      	str	r1, [r7, #8]
 8015532:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8015534:	68fb      	ldr	r3, [r7, #12]
 8015536:	3b04      	subs	r3, #4
 8015538:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801553a:	68fb      	ldr	r3, [r7, #12]
 801553c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8015540:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015542:	68fb      	ldr	r3, [r7, #12]
 8015544:	3b04      	subs	r3, #4
 8015546:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8015548:	68bb      	ldr	r3, [r7, #8]
 801554a:	f023 0201 	bic.w	r2, r3, #1
 801554e:	68fb      	ldr	r3, [r7, #12]
 8015550:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015552:	68fb      	ldr	r3, [r7, #12]
 8015554:	3b04      	subs	r3, #4
 8015556:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8015558:	4a0c      	ldr	r2, [pc, #48]	; (801558c <pxPortInitialiseStack+0x64>)
 801555a:	68fb      	ldr	r3, [r7, #12]
 801555c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801555e:	68fb      	ldr	r3, [r7, #12]
 8015560:	3b14      	subs	r3, #20
 8015562:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8015564:	687a      	ldr	r2, [r7, #4]
 8015566:	68fb      	ldr	r3, [r7, #12]
 8015568:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801556a:	68fb      	ldr	r3, [r7, #12]
 801556c:	3b04      	subs	r3, #4
 801556e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8015570:	68fb      	ldr	r3, [r7, #12]
 8015572:	f06f 0202 	mvn.w	r2, #2
 8015576:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8015578:	68fb      	ldr	r3, [r7, #12]
 801557a:	3b20      	subs	r3, #32
 801557c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801557e:	68fb      	ldr	r3, [r7, #12]
}
 8015580:	4618      	mov	r0, r3
 8015582:	3714      	adds	r7, #20
 8015584:	46bd      	mov	sp, r7
 8015586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801558a:	4770      	bx	lr
 801558c:	08015591 	.word	0x08015591

08015590 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8015590:	b480      	push	{r7}
 8015592:	b085      	sub	sp, #20
 8015594:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8015596:	2300      	movs	r3, #0
 8015598:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801559a:	4b12      	ldr	r3, [pc, #72]	; (80155e4 <prvTaskExitError+0x54>)
 801559c:	681b      	ldr	r3, [r3, #0]
 801559e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80155a2:	d00a      	beq.n	80155ba <prvTaskExitError+0x2a>
	__asm volatile
 80155a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80155a8:	f383 8811 	msr	BASEPRI, r3
 80155ac:	f3bf 8f6f 	isb	sy
 80155b0:	f3bf 8f4f 	dsb	sy
 80155b4:	60fb      	str	r3, [r7, #12]
}
 80155b6:	bf00      	nop
 80155b8:	e7fe      	b.n	80155b8 <prvTaskExitError+0x28>
	__asm volatile
 80155ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80155be:	f383 8811 	msr	BASEPRI, r3
 80155c2:	f3bf 8f6f 	isb	sy
 80155c6:	f3bf 8f4f 	dsb	sy
 80155ca:	60bb      	str	r3, [r7, #8]
}
 80155cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80155ce:	bf00      	nop
 80155d0:	687b      	ldr	r3, [r7, #4]
 80155d2:	2b00      	cmp	r3, #0
 80155d4:	d0fc      	beq.n	80155d0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80155d6:	bf00      	nop
 80155d8:	bf00      	nop
 80155da:	3714      	adds	r7, #20
 80155dc:	46bd      	mov	sp, r7
 80155de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155e2:	4770      	bx	lr
 80155e4:	240000a0 	.word	0x240000a0
	...

080155f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80155f0:	4b07      	ldr	r3, [pc, #28]	; (8015610 <pxCurrentTCBConst2>)
 80155f2:	6819      	ldr	r1, [r3, #0]
 80155f4:	6808      	ldr	r0, [r1, #0]
 80155f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80155fa:	f380 8809 	msr	PSP, r0
 80155fe:	f3bf 8f6f 	isb	sy
 8015602:	f04f 0000 	mov.w	r0, #0
 8015606:	f380 8811 	msr	BASEPRI, r0
 801560a:	4770      	bx	lr
 801560c:	f3af 8000 	nop.w

08015610 <pxCurrentTCBConst2>:
 8015610:	24001808 	.word	0x24001808
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8015614:	bf00      	nop
 8015616:	bf00      	nop

08015618 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8015618:	4808      	ldr	r0, [pc, #32]	; (801563c <prvPortStartFirstTask+0x24>)
 801561a:	6800      	ldr	r0, [r0, #0]
 801561c:	6800      	ldr	r0, [r0, #0]
 801561e:	f380 8808 	msr	MSP, r0
 8015622:	f04f 0000 	mov.w	r0, #0
 8015626:	f380 8814 	msr	CONTROL, r0
 801562a:	b662      	cpsie	i
 801562c:	b661      	cpsie	f
 801562e:	f3bf 8f4f 	dsb	sy
 8015632:	f3bf 8f6f 	isb	sy
 8015636:	df00      	svc	0
 8015638:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801563a:	bf00      	nop
 801563c:	e000ed08 	.word	0xe000ed08

08015640 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8015640:	b580      	push	{r7, lr}
 8015642:	b086      	sub	sp, #24
 8015644:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8015646:	4b46      	ldr	r3, [pc, #280]	; (8015760 <xPortStartScheduler+0x120>)
 8015648:	681b      	ldr	r3, [r3, #0]
 801564a:	4a46      	ldr	r2, [pc, #280]	; (8015764 <xPortStartScheduler+0x124>)
 801564c:	4293      	cmp	r3, r2
 801564e:	d10a      	bne.n	8015666 <xPortStartScheduler+0x26>
	__asm volatile
 8015650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015654:	f383 8811 	msr	BASEPRI, r3
 8015658:	f3bf 8f6f 	isb	sy
 801565c:	f3bf 8f4f 	dsb	sy
 8015660:	613b      	str	r3, [r7, #16]
}
 8015662:	bf00      	nop
 8015664:	e7fe      	b.n	8015664 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8015666:	4b3e      	ldr	r3, [pc, #248]	; (8015760 <xPortStartScheduler+0x120>)
 8015668:	681b      	ldr	r3, [r3, #0]
 801566a:	4a3f      	ldr	r2, [pc, #252]	; (8015768 <xPortStartScheduler+0x128>)
 801566c:	4293      	cmp	r3, r2
 801566e:	d10a      	bne.n	8015686 <xPortStartScheduler+0x46>
	__asm volatile
 8015670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015674:	f383 8811 	msr	BASEPRI, r3
 8015678:	f3bf 8f6f 	isb	sy
 801567c:	f3bf 8f4f 	dsb	sy
 8015680:	60fb      	str	r3, [r7, #12]
}
 8015682:	bf00      	nop
 8015684:	e7fe      	b.n	8015684 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8015686:	4b39      	ldr	r3, [pc, #228]	; (801576c <xPortStartScheduler+0x12c>)
 8015688:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801568a:	697b      	ldr	r3, [r7, #20]
 801568c:	781b      	ldrb	r3, [r3, #0]
 801568e:	b2db      	uxtb	r3, r3
 8015690:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8015692:	697b      	ldr	r3, [r7, #20]
 8015694:	22ff      	movs	r2, #255	; 0xff
 8015696:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8015698:	697b      	ldr	r3, [r7, #20]
 801569a:	781b      	ldrb	r3, [r3, #0]
 801569c:	b2db      	uxtb	r3, r3
 801569e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80156a0:	78fb      	ldrb	r3, [r7, #3]
 80156a2:	b2db      	uxtb	r3, r3
 80156a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80156a8:	b2da      	uxtb	r2, r3
 80156aa:	4b31      	ldr	r3, [pc, #196]	; (8015770 <xPortStartScheduler+0x130>)
 80156ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80156ae:	4b31      	ldr	r3, [pc, #196]	; (8015774 <xPortStartScheduler+0x134>)
 80156b0:	2207      	movs	r2, #7
 80156b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80156b4:	e009      	b.n	80156ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80156b6:	4b2f      	ldr	r3, [pc, #188]	; (8015774 <xPortStartScheduler+0x134>)
 80156b8:	681b      	ldr	r3, [r3, #0]
 80156ba:	3b01      	subs	r3, #1
 80156bc:	4a2d      	ldr	r2, [pc, #180]	; (8015774 <xPortStartScheduler+0x134>)
 80156be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80156c0:	78fb      	ldrb	r3, [r7, #3]
 80156c2:	b2db      	uxtb	r3, r3
 80156c4:	005b      	lsls	r3, r3, #1
 80156c6:	b2db      	uxtb	r3, r3
 80156c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80156ca:	78fb      	ldrb	r3, [r7, #3]
 80156cc:	b2db      	uxtb	r3, r3
 80156ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80156d2:	2b80      	cmp	r3, #128	; 0x80
 80156d4:	d0ef      	beq.n	80156b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80156d6:	4b27      	ldr	r3, [pc, #156]	; (8015774 <xPortStartScheduler+0x134>)
 80156d8:	681b      	ldr	r3, [r3, #0]
 80156da:	f1c3 0307 	rsb	r3, r3, #7
 80156de:	2b04      	cmp	r3, #4
 80156e0:	d00a      	beq.n	80156f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80156e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80156e6:	f383 8811 	msr	BASEPRI, r3
 80156ea:	f3bf 8f6f 	isb	sy
 80156ee:	f3bf 8f4f 	dsb	sy
 80156f2:	60bb      	str	r3, [r7, #8]
}
 80156f4:	bf00      	nop
 80156f6:	e7fe      	b.n	80156f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80156f8:	4b1e      	ldr	r3, [pc, #120]	; (8015774 <xPortStartScheduler+0x134>)
 80156fa:	681b      	ldr	r3, [r3, #0]
 80156fc:	021b      	lsls	r3, r3, #8
 80156fe:	4a1d      	ldr	r2, [pc, #116]	; (8015774 <xPortStartScheduler+0x134>)
 8015700:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8015702:	4b1c      	ldr	r3, [pc, #112]	; (8015774 <xPortStartScheduler+0x134>)
 8015704:	681b      	ldr	r3, [r3, #0]
 8015706:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801570a:	4a1a      	ldr	r2, [pc, #104]	; (8015774 <xPortStartScheduler+0x134>)
 801570c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801570e:	687b      	ldr	r3, [r7, #4]
 8015710:	b2da      	uxtb	r2, r3
 8015712:	697b      	ldr	r3, [r7, #20]
 8015714:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8015716:	4b18      	ldr	r3, [pc, #96]	; (8015778 <xPortStartScheduler+0x138>)
 8015718:	681b      	ldr	r3, [r3, #0]
 801571a:	4a17      	ldr	r2, [pc, #92]	; (8015778 <xPortStartScheduler+0x138>)
 801571c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8015720:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8015722:	4b15      	ldr	r3, [pc, #84]	; (8015778 <xPortStartScheduler+0x138>)
 8015724:	681b      	ldr	r3, [r3, #0]
 8015726:	4a14      	ldr	r2, [pc, #80]	; (8015778 <xPortStartScheduler+0x138>)
 8015728:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801572c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801572e:	f000 f8dd 	bl	80158ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8015732:	4b12      	ldr	r3, [pc, #72]	; (801577c <xPortStartScheduler+0x13c>)
 8015734:	2200      	movs	r2, #0
 8015736:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8015738:	f000 f8fc 	bl	8015934 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801573c:	4b10      	ldr	r3, [pc, #64]	; (8015780 <xPortStartScheduler+0x140>)
 801573e:	681b      	ldr	r3, [r3, #0]
 8015740:	4a0f      	ldr	r2, [pc, #60]	; (8015780 <xPortStartScheduler+0x140>)
 8015742:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8015746:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8015748:	f7ff ff66 	bl	8015618 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801574c:	f7fe ff7c 	bl	8014648 <vTaskSwitchContext>
	prvTaskExitError();
 8015750:	f7ff ff1e 	bl	8015590 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8015754:	2300      	movs	r3, #0
}
 8015756:	4618      	mov	r0, r3
 8015758:	3718      	adds	r7, #24
 801575a:	46bd      	mov	sp, r7
 801575c:	bd80      	pop	{r7, pc}
 801575e:	bf00      	nop
 8015760:	e000ed00 	.word	0xe000ed00
 8015764:	410fc271 	.word	0x410fc271
 8015768:	410fc270 	.word	0x410fc270
 801576c:	e000e400 	.word	0xe000e400
 8015770:	24001e34 	.word	0x24001e34
 8015774:	24001e38 	.word	0x24001e38
 8015778:	e000ed20 	.word	0xe000ed20
 801577c:	240000a0 	.word	0x240000a0
 8015780:	e000ef34 	.word	0xe000ef34

08015784 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8015784:	b480      	push	{r7}
 8015786:	b083      	sub	sp, #12
 8015788:	af00      	add	r7, sp, #0
	__asm volatile
 801578a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801578e:	f383 8811 	msr	BASEPRI, r3
 8015792:	f3bf 8f6f 	isb	sy
 8015796:	f3bf 8f4f 	dsb	sy
 801579a:	607b      	str	r3, [r7, #4]
}
 801579c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801579e:	4b0f      	ldr	r3, [pc, #60]	; (80157dc <vPortEnterCritical+0x58>)
 80157a0:	681b      	ldr	r3, [r3, #0]
 80157a2:	3301      	adds	r3, #1
 80157a4:	4a0d      	ldr	r2, [pc, #52]	; (80157dc <vPortEnterCritical+0x58>)
 80157a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80157a8:	4b0c      	ldr	r3, [pc, #48]	; (80157dc <vPortEnterCritical+0x58>)
 80157aa:	681b      	ldr	r3, [r3, #0]
 80157ac:	2b01      	cmp	r3, #1
 80157ae:	d10f      	bne.n	80157d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80157b0:	4b0b      	ldr	r3, [pc, #44]	; (80157e0 <vPortEnterCritical+0x5c>)
 80157b2:	681b      	ldr	r3, [r3, #0]
 80157b4:	b2db      	uxtb	r3, r3
 80157b6:	2b00      	cmp	r3, #0
 80157b8:	d00a      	beq.n	80157d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80157ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80157be:	f383 8811 	msr	BASEPRI, r3
 80157c2:	f3bf 8f6f 	isb	sy
 80157c6:	f3bf 8f4f 	dsb	sy
 80157ca:	603b      	str	r3, [r7, #0]
}
 80157cc:	bf00      	nop
 80157ce:	e7fe      	b.n	80157ce <vPortEnterCritical+0x4a>
	}
}
 80157d0:	bf00      	nop
 80157d2:	370c      	adds	r7, #12
 80157d4:	46bd      	mov	sp, r7
 80157d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157da:	4770      	bx	lr
 80157dc:	240000a0 	.word	0x240000a0
 80157e0:	e000ed04 	.word	0xe000ed04

080157e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80157e4:	b480      	push	{r7}
 80157e6:	b083      	sub	sp, #12
 80157e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80157ea:	4b12      	ldr	r3, [pc, #72]	; (8015834 <vPortExitCritical+0x50>)
 80157ec:	681b      	ldr	r3, [r3, #0]
 80157ee:	2b00      	cmp	r3, #0
 80157f0:	d10a      	bne.n	8015808 <vPortExitCritical+0x24>
	__asm volatile
 80157f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80157f6:	f383 8811 	msr	BASEPRI, r3
 80157fa:	f3bf 8f6f 	isb	sy
 80157fe:	f3bf 8f4f 	dsb	sy
 8015802:	607b      	str	r3, [r7, #4]
}
 8015804:	bf00      	nop
 8015806:	e7fe      	b.n	8015806 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8015808:	4b0a      	ldr	r3, [pc, #40]	; (8015834 <vPortExitCritical+0x50>)
 801580a:	681b      	ldr	r3, [r3, #0]
 801580c:	3b01      	subs	r3, #1
 801580e:	4a09      	ldr	r2, [pc, #36]	; (8015834 <vPortExitCritical+0x50>)
 8015810:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8015812:	4b08      	ldr	r3, [pc, #32]	; (8015834 <vPortExitCritical+0x50>)
 8015814:	681b      	ldr	r3, [r3, #0]
 8015816:	2b00      	cmp	r3, #0
 8015818:	d105      	bne.n	8015826 <vPortExitCritical+0x42>
 801581a:	2300      	movs	r3, #0
 801581c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801581e:	683b      	ldr	r3, [r7, #0]
 8015820:	f383 8811 	msr	BASEPRI, r3
}
 8015824:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8015826:	bf00      	nop
 8015828:	370c      	adds	r7, #12
 801582a:	46bd      	mov	sp, r7
 801582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015830:	4770      	bx	lr
 8015832:	bf00      	nop
 8015834:	240000a0 	.word	0x240000a0
	...

08015840 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8015840:	f3ef 8009 	mrs	r0, PSP
 8015844:	f3bf 8f6f 	isb	sy
 8015848:	4b15      	ldr	r3, [pc, #84]	; (80158a0 <pxCurrentTCBConst>)
 801584a:	681a      	ldr	r2, [r3, #0]
 801584c:	f01e 0f10 	tst.w	lr, #16
 8015850:	bf08      	it	eq
 8015852:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8015856:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801585a:	6010      	str	r0, [r2, #0]
 801585c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8015860:	f04f 0050 	mov.w	r0, #80	; 0x50
 8015864:	f380 8811 	msr	BASEPRI, r0
 8015868:	f3bf 8f4f 	dsb	sy
 801586c:	f3bf 8f6f 	isb	sy
 8015870:	f7fe feea 	bl	8014648 <vTaskSwitchContext>
 8015874:	f04f 0000 	mov.w	r0, #0
 8015878:	f380 8811 	msr	BASEPRI, r0
 801587c:	bc09      	pop	{r0, r3}
 801587e:	6819      	ldr	r1, [r3, #0]
 8015880:	6808      	ldr	r0, [r1, #0]
 8015882:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015886:	f01e 0f10 	tst.w	lr, #16
 801588a:	bf08      	it	eq
 801588c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8015890:	f380 8809 	msr	PSP, r0
 8015894:	f3bf 8f6f 	isb	sy
 8015898:	4770      	bx	lr
 801589a:	bf00      	nop
 801589c:	f3af 8000 	nop.w

080158a0 <pxCurrentTCBConst>:
 80158a0:	24001808 	.word	0x24001808
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80158a4:	bf00      	nop
 80158a6:	bf00      	nop

080158a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80158a8:	b580      	push	{r7, lr}
 80158aa:	b082      	sub	sp, #8
 80158ac:	af00      	add	r7, sp, #0
	__asm volatile
 80158ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80158b2:	f383 8811 	msr	BASEPRI, r3
 80158b6:	f3bf 8f6f 	isb	sy
 80158ba:	f3bf 8f4f 	dsb	sy
 80158be:	607b      	str	r3, [r7, #4]
}
 80158c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80158c2:	f7fe fe07 	bl	80144d4 <xTaskIncrementTick>
 80158c6:	4603      	mov	r3, r0
 80158c8:	2b00      	cmp	r3, #0
 80158ca:	d003      	beq.n	80158d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80158cc:	4b06      	ldr	r3, [pc, #24]	; (80158e8 <xPortSysTickHandler+0x40>)
 80158ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80158d2:	601a      	str	r2, [r3, #0]
 80158d4:	2300      	movs	r3, #0
 80158d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80158d8:	683b      	ldr	r3, [r7, #0]
 80158da:	f383 8811 	msr	BASEPRI, r3
}
 80158de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80158e0:	bf00      	nop
 80158e2:	3708      	adds	r7, #8
 80158e4:	46bd      	mov	sp, r7
 80158e6:	bd80      	pop	{r7, pc}
 80158e8:	e000ed04 	.word	0xe000ed04

080158ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80158ec:	b480      	push	{r7}
 80158ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80158f0:	4b0b      	ldr	r3, [pc, #44]	; (8015920 <vPortSetupTimerInterrupt+0x34>)
 80158f2:	2200      	movs	r2, #0
 80158f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80158f6:	4b0b      	ldr	r3, [pc, #44]	; (8015924 <vPortSetupTimerInterrupt+0x38>)
 80158f8:	2200      	movs	r2, #0
 80158fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80158fc:	4b0a      	ldr	r3, [pc, #40]	; (8015928 <vPortSetupTimerInterrupt+0x3c>)
 80158fe:	681b      	ldr	r3, [r3, #0]
 8015900:	4a0a      	ldr	r2, [pc, #40]	; (801592c <vPortSetupTimerInterrupt+0x40>)
 8015902:	fba2 2303 	umull	r2, r3, r2, r3
 8015906:	099b      	lsrs	r3, r3, #6
 8015908:	4a09      	ldr	r2, [pc, #36]	; (8015930 <vPortSetupTimerInterrupt+0x44>)
 801590a:	3b01      	subs	r3, #1
 801590c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801590e:	4b04      	ldr	r3, [pc, #16]	; (8015920 <vPortSetupTimerInterrupt+0x34>)
 8015910:	2207      	movs	r2, #7
 8015912:	601a      	str	r2, [r3, #0]
}
 8015914:	bf00      	nop
 8015916:	46bd      	mov	sp, r7
 8015918:	f85d 7b04 	ldr.w	r7, [sp], #4
 801591c:	4770      	bx	lr
 801591e:	bf00      	nop
 8015920:	e000e010 	.word	0xe000e010
 8015924:	e000e018 	.word	0xe000e018
 8015928:	24000090 	.word	0x24000090
 801592c:	10624dd3 	.word	0x10624dd3
 8015930:	e000e014 	.word	0xe000e014

08015934 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8015934:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8015944 <vPortEnableVFP+0x10>
 8015938:	6801      	ldr	r1, [r0, #0]
 801593a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801593e:	6001      	str	r1, [r0, #0]
 8015940:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8015942:	bf00      	nop
 8015944:	e000ed88 	.word	0xe000ed88

08015948 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8015948:	b480      	push	{r7}
 801594a:	b085      	sub	sp, #20
 801594c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801594e:	f3ef 8305 	mrs	r3, IPSR
 8015952:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8015954:	68fb      	ldr	r3, [r7, #12]
 8015956:	2b0f      	cmp	r3, #15
 8015958:	d914      	bls.n	8015984 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801595a:	4a17      	ldr	r2, [pc, #92]	; (80159b8 <vPortValidateInterruptPriority+0x70>)
 801595c:	68fb      	ldr	r3, [r7, #12]
 801595e:	4413      	add	r3, r2
 8015960:	781b      	ldrb	r3, [r3, #0]
 8015962:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8015964:	4b15      	ldr	r3, [pc, #84]	; (80159bc <vPortValidateInterruptPriority+0x74>)
 8015966:	781b      	ldrb	r3, [r3, #0]
 8015968:	7afa      	ldrb	r2, [r7, #11]
 801596a:	429a      	cmp	r2, r3
 801596c:	d20a      	bcs.n	8015984 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801596e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015972:	f383 8811 	msr	BASEPRI, r3
 8015976:	f3bf 8f6f 	isb	sy
 801597a:	f3bf 8f4f 	dsb	sy
 801597e:	607b      	str	r3, [r7, #4]
}
 8015980:	bf00      	nop
 8015982:	e7fe      	b.n	8015982 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8015984:	4b0e      	ldr	r3, [pc, #56]	; (80159c0 <vPortValidateInterruptPriority+0x78>)
 8015986:	681b      	ldr	r3, [r3, #0]
 8015988:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801598c:	4b0d      	ldr	r3, [pc, #52]	; (80159c4 <vPortValidateInterruptPriority+0x7c>)
 801598e:	681b      	ldr	r3, [r3, #0]
 8015990:	429a      	cmp	r2, r3
 8015992:	d90a      	bls.n	80159aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8015994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015998:	f383 8811 	msr	BASEPRI, r3
 801599c:	f3bf 8f6f 	isb	sy
 80159a0:	f3bf 8f4f 	dsb	sy
 80159a4:	603b      	str	r3, [r7, #0]
}
 80159a6:	bf00      	nop
 80159a8:	e7fe      	b.n	80159a8 <vPortValidateInterruptPriority+0x60>
	}
 80159aa:	bf00      	nop
 80159ac:	3714      	adds	r7, #20
 80159ae:	46bd      	mov	sp, r7
 80159b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159b4:	4770      	bx	lr
 80159b6:	bf00      	nop
 80159b8:	e000e3f0 	.word	0xe000e3f0
 80159bc:	24001e34 	.word	0x24001e34
 80159c0:	e000ed0c 	.word	0xe000ed0c
 80159c4:	24001e38 	.word	0x24001e38

080159c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80159c8:	b580      	push	{r7, lr}
 80159ca:	b08a      	sub	sp, #40	; 0x28
 80159cc:	af00      	add	r7, sp, #0
 80159ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80159d0:	2300      	movs	r3, #0
 80159d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80159d4:	f7fe fcc2 	bl	801435c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80159d8:	4b5b      	ldr	r3, [pc, #364]	; (8015b48 <pvPortMalloc+0x180>)
 80159da:	681b      	ldr	r3, [r3, #0]
 80159dc:	2b00      	cmp	r3, #0
 80159de:	d101      	bne.n	80159e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80159e0:	f000 f920 	bl	8015c24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80159e4:	4b59      	ldr	r3, [pc, #356]	; (8015b4c <pvPortMalloc+0x184>)
 80159e6:	681a      	ldr	r2, [r3, #0]
 80159e8:	687b      	ldr	r3, [r7, #4]
 80159ea:	4013      	ands	r3, r2
 80159ec:	2b00      	cmp	r3, #0
 80159ee:	f040 8093 	bne.w	8015b18 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80159f2:	687b      	ldr	r3, [r7, #4]
 80159f4:	2b00      	cmp	r3, #0
 80159f6:	d01d      	beq.n	8015a34 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80159f8:	2208      	movs	r2, #8
 80159fa:	687b      	ldr	r3, [r7, #4]
 80159fc:	4413      	add	r3, r2
 80159fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8015a00:	687b      	ldr	r3, [r7, #4]
 8015a02:	f003 0307 	and.w	r3, r3, #7
 8015a06:	2b00      	cmp	r3, #0
 8015a08:	d014      	beq.n	8015a34 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8015a0a:	687b      	ldr	r3, [r7, #4]
 8015a0c:	f023 0307 	bic.w	r3, r3, #7
 8015a10:	3308      	adds	r3, #8
 8015a12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015a14:	687b      	ldr	r3, [r7, #4]
 8015a16:	f003 0307 	and.w	r3, r3, #7
 8015a1a:	2b00      	cmp	r3, #0
 8015a1c:	d00a      	beq.n	8015a34 <pvPortMalloc+0x6c>
	__asm volatile
 8015a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a22:	f383 8811 	msr	BASEPRI, r3
 8015a26:	f3bf 8f6f 	isb	sy
 8015a2a:	f3bf 8f4f 	dsb	sy
 8015a2e:	617b      	str	r3, [r7, #20]
}
 8015a30:	bf00      	nop
 8015a32:	e7fe      	b.n	8015a32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8015a34:	687b      	ldr	r3, [r7, #4]
 8015a36:	2b00      	cmp	r3, #0
 8015a38:	d06e      	beq.n	8015b18 <pvPortMalloc+0x150>
 8015a3a:	4b45      	ldr	r3, [pc, #276]	; (8015b50 <pvPortMalloc+0x188>)
 8015a3c:	681b      	ldr	r3, [r3, #0]
 8015a3e:	687a      	ldr	r2, [r7, #4]
 8015a40:	429a      	cmp	r2, r3
 8015a42:	d869      	bhi.n	8015b18 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8015a44:	4b43      	ldr	r3, [pc, #268]	; (8015b54 <pvPortMalloc+0x18c>)
 8015a46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8015a48:	4b42      	ldr	r3, [pc, #264]	; (8015b54 <pvPortMalloc+0x18c>)
 8015a4a:	681b      	ldr	r3, [r3, #0]
 8015a4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015a4e:	e004      	b.n	8015a5a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8015a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8015a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a56:	681b      	ldr	r3, [r3, #0]
 8015a58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a5c:	685b      	ldr	r3, [r3, #4]
 8015a5e:	687a      	ldr	r2, [r7, #4]
 8015a60:	429a      	cmp	r2, r3
 8015a62:	d903      	bls.n	8015a6c <pvPortMalloc+0xa4>
 8015a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a66:	681b      	ldr	r3, [r3, #0]
 8015a68:	2b00      	cmp	r3, #0
 8015a6a:	d1f1      	bne.n	8015a50 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8015a6c:	4b36      	ldr	r3, [pc, #216]	; (8015b48 <pvPortMalloc+0x180>)
 8015a6e:	681b      	ldr	r3, [r3, #0]
 8015a70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015a72:	429a      	cmp	r2, r3
 8015a74:	d050      	beq.n	8015b18 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8015a76:	6a3b      	ldr	r3, [r7, #32]
 8015a78:	681b      	ldr	r3, [r3, #0]
 8015a7a:	2208      	movs	r2, #8
 8015a7c:	4413      	add	r3, r2
 8015a7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8015a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a82:	681a      	ldr	r2, [r3, #0]
 8015a84:	6a3b      	ldr	r3, [r7, #32]
 8015a86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8015a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a8a:	685a      	ldr	r2, [r3, #4]
 8015a8c:	687b      	ldr	r3, [r7, #4]
 8015a8e:	1ad2      	subs	r2, r2, r3
 8015a90:	2308      	movs	r3, #8
 8015a92:	005b      	lsls	r3, r3, #1
 8015a94:	429a      	cmp	r2, r3
 8015a96:	d91f      	bls.n	8015ad8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8015a98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015a9a:	687b      	ldr	r3, [r7, #4]
 8015a9c:	4413      	add	r3, r2
 8015a9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015aa0:	69bb      	ldr	r3, [r7, #24]
 8015aa2:	f003 0307 	and.w	r3, r3, #7
 8015aa6:	2b00      	cmp	r3, #0
 8015aa8:	d00a      	beq.n	8015ac0 <pvPortMalloc+0xf8>
	__asm volatile
 8015aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015aae:	f383 8811 	msr	BASEPRI, r3
 8015ab2:	f3bf 8f6f 	isb	sy
 8015ab6:	f3bf 8f4f 	dsb	sy
 8015aba:	613b      	str	r3, [r7, #16]
}
 8015abc:	bf00      	nop
 8015abe:	e7fe      	b.n	8015abe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8015ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ac2:	685a      	ldr	r2, [r3, #4]
 8015ac4:	687b      	ldr	r3, [r7, #4]
 8015ac6:	1ad2      	subs	r2, r2, r3
 8015ac8:	69bb      	ldr	r3, [r7, #24]
 8015aca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8015acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ace:	687a      	ldr	r2, [r7, #4]
 8015ad0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8015ad2:	69b8      	ldr	r0, [r7, #24]
 8015ad4:	f000 f908 	bl	8015ce8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8015ad8:	4b1d      	ldr	r3, [pc, #116]	; (8015b50 <pvPortMalloc+0x188>)
 8015ada:	681a      	ldr	r2, [r3, #0]
 8015adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ade:	685b      	ldr	r3, [r3, #4]
 8015ae0:	1ad3      	subs	r3, r2, r3
 8015ae2:	4a1b      	ldr	r2, [pc, #108]	; (8015b50 <pvPortMalloc+0x188>)
 8015ae4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8015ae6:	4b1a      	ldr	r3, [pc, #104]	; (8015b50 <pvPortMalloc+0x188>)
 8015ae8:	681a      	ldr	r2, [r3, #0]
 8015aea:	4b1b      	ldr	r3, [pc, #108]	; (8015b58 <pvPortMalloc+0x190>)
 8015aec:	681b      	ldr	r3, [r3, #0]
 8015aee:	429a      	cmp	r2, r3
 8015af0:	d203      	bcs.n	8015afa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8015af2:	4b17      	ldr	r3, [pc, #92]	; (8015b50 <pvPortMalloc+0x188>)
 8015af4:	681b      	ldr	r3, [r3, #0]
 8015af6:	4a18      	ldr	r2, [pc, #96]	; (8015b58 <pvPortMalloc+0x190>)
 8015af8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8015afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015afc:	685a      	ldr	r2, [r3, #4]
 8015afe:	4b13      	ldr	r3, [pc, #76]	; (8015b4c <pvPortMalloc+0x184>)
 8015b00:	681b      	ldr	r3, [r3, #0]
 8015b02:	431a      	orrs	r2, r3
 8015b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b06:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8015b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b0a:	2200      	movs	r2, #0
 8015b0c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8015b0e:	4b13      	ldr	r3, [pc, #76]	; (8015b5c <pvPortMalloc+0x194>)
 8015b10:	681b      	ldr	r3, [r3, #0]
 8015b12:	3301      	adds	r3, #1
 8015b14:	4a11      	ldr	r2, [pc, #68]	; (8015b5c <pvPortMalloc+0x194>)
 8015b16:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8015b18:	f7fe fc2e 	bl	8014378 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8015b1c:	69fb      	ldr	r3, [r7, #28]
 8015b1e:	f003 0307 	and.w	r3, r3, #7
 8015b22:	2b00      	cmp	r3, #0
 8015b24:	d00a      	beq.n	8015b3c <pvPortMalloc+0x174>
	__asm volatile
 8015b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b2a:	f383 8811 	msr	BASEPRI, r3
 8015b2e:	f3bf 8f6f 	isb	sy
 8015b32:	f3bf 8f4f 	dsb	sy
 8015b36:	60fb      	str	r3, [r7, #12]
}
 8015b38:	bf00      	nop
 8015b3a:	e7fe      	b.n	8015b3a <pvPortMalloc+0x172>
	return pvReturn;
 8015b3c:	69fb      	ldr	r3, [r7, #28]
}
 8015b3e:	4618      	mov	r0, r3
 8015b40:	3728      	adds	r7, #40	; 0x28
 8015b42:	46bd      	mov	sp, r7
 8015b44:	bd80      	pop	{r7, pc}
 8015b46:	bf00      	nop
 8015b48:	24005a44 	.word	0x24005a44
 8015b4c:	24005a58 	.word	0x24005a58
 8015b50:	24005a48 	.word	0x24005a48
 8015b54:	24005a3c 	.word	0x24005a3c
 8015b58:	24005a4c 	.word	0x24005a4c
 8015b5c:	24005a50 	.word	0x24005a50

08015b60 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8015b60:	b580      	push	{r7, lr}
 8015b62:	b086      	sub	sp, #24
 8015b64:	af00      	add	r7, sp, #0
 8015b66:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8015b68:	687b      	ldr	r3, [r7, #4]
 8015b6a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8015b6c:	687b      	ldr	r3, [r7, #4]
 8015b6e:	2b00      	cmp	r3, #0
 8015b70:	d04d      	beq.n	8015c0e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8015b72:	2308      	movs	r3, #8
 8015b74:	425b      	negs	r3, r3
 8015b76:	697a      	ldr	r2, [r7, #20]
 8015b78:	4413      	add	r3, r2
 8015b7a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8015b7c:	697b      	ldr	r3, [r7, #20]
 8015b7e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8015b80:	693b      	ldr	r3, [r7, #16]
 8015b82:	685a      	ldr	r2, [r3, #4]
 8015b84:	4b24      	ldr	r3, [pc, #144]	; (8015c18 <vPortFree+0xb8>)
 8015b86:	681b      	ldr	r3, [r3, #0]
 8015b88:	4013      	ands	r3, r2
 8015b8a:	2b00      	cmp	r3, #0
 8015b8c:	d10a      	bne.n	8015ba4 <vPortFree+0x44>
	__asm volatile
 8015b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b92:	f383 8811 	msr	BASEPRI, r3
 8015b96:	f3bf 8f6f 	isb	sy
 8015b9a:	f3bf 8f4f 	dsb	sy
 8015b9e:	60fb      	str	r3, [r7, #12]
}
 8015ba0:	bf00      	nop
 8015ba2:	e7fe      	b.n	8015ba2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8015ba4:	693b      	ldr	r3, [r7, #16]
 8015ba6:	681b      	ldr	r3, [r3, #0]
 8015ba8:	2b00      	cmp	r3, #0
 8015baa:	d00a      	beq.n	8015bc2 <vPortFree+0x62>
	__asm volatile
 8015bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015bb0:	f383 8811 	msr	BASEPRI, r3
 8015bb4:	f3bf 8f6f 	isb	sy
 8015bb8:	f3bf 8f4f 	dsb	sy
 8015bbc:	60bb      	str	r3, [r7, #8]
}
 8015bbe:	bf00      	nop
 8015bc0:	e7fe      	b.n	8015bc0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8015bc2:	693b      	ldr	r3, [r7, #16]
 8015bc4:	685a      	ldr	r2, [r3, #4]
 8015bc6:	4b14      	ldr	r3, [pc, #80]	; (8015c18 <vPortFree+0xb8>)
 8015bc8:	681b      	ldr	r3, [r3, #0]
 8015bca:	4013      	ands	r3, r2
 8015bcc:	2b00      	cmp	r3, #0
 8015bce:	d01e      	beq.n	8015c0e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8015bd0:	693b      	ldr	r3, [r7, #16]
 8015bd2:	681b      	ldr	r3, [r3, #0]
 8015bd4:	2b00      	cmp	r3, #0
 8015bd6:	d11a      	bne.n	8015c0e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8015bd8:	693b      	ldr	r3, [r7, #16]
 8015bda:	685a      	ldr	r2, [r3, #4]
 8015bdc:	4b0e      	ldr	r3, [pc, #56]	; (8015c18 <vPortFree+0xb8>)
 8015bde:	681b      	ldr	r3, [r3, #0]
 8015be0:	43db      	mvns	r3, r3
 8015be2:	401a      	ands	r2, r3
 8015be4:	693b      	ldr	r3, [r7, #16]
 8015be6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8015be8:	f7fe fbb8 	bl	801435c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8015bec:	693b      	ldr	r3, [r7, #16]
 8015bee:	685a      	ldr	r2, [r3, #4]
 8015bf0:	4b0a      	ldr	r3, [pc, #40]	; (8015c1c <vPortFree+0xbc>)
 8015bf2:	681b      	ldr	r3, [r3, #0]
 8015bf4:	4413      	add	r3, r2
 8015bf6:	4a09      	ldr	r2, [pc, #36]	; (8015c1c <vPortFree+0xbc>)
 8015bf8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8015bfa:	6938      	ldr	r0, [r7, #16]
 8015bfc:	f000 f874 	bl	8015ce8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8015c00:	4b07      	ldr	r3, [pc, #28]	; (8015c20 <vPortFree+0xc0>)
 8015c02:	681b      	ldr	r3, [r3, #0]
 8015c04:	3301      	adds	r3, #1
 8015c06:	4a06      	ldr	r2, [pc, #24]	; (8015c20 <vPortFree+0xc0>)
 8015c08:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8015c0a:	f7fe fbb5 	bl	8014378 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8015c0e:	bf00      	nop
 8015c10:	3718      	adds	r7, #24
 8015c12:	46bd      	mov	sp, r7
 8015c14:	bd80      	pop	{r7, pc}
 8015c16:	bf00      	nop
 8015c18:	24005a58 	.word	0x24005a58
 8015c1c:	24005a48 	.word	0x24005a48
 8015c20:	24005a54 	.word	0x24005a54

08015c24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8015c24:	b480      	push	{r7}
 8015c26:	b085      	sub	sp, #20
 8015c28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8015c2a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8015c2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8015c30:	4b27      	ldr	r3, [pc, #156]	; (8015cd0 <prvHeapInit+0xac>)
 8015c32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8015c34:	68fb      	ldr	r3, [r7, #12]
 8015c36:	f003 0307 	and.w	r3, r3, #7
 8015c3a:	2b00      	cmp	r3, #0
 8015c3c:	d00c      	beq.n	8015c58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8015c3e:	68fb      	ldr	r3, [r7, #12]
 8015c40:	3307      	adds	r3, #7
 8015c42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015c44:	68fb      	ldr	r3, [r7, #12]
 8015c46:	f023 0307 	bic.w	r3, r3, #7
 8015c4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8015c4c:	68ba      	ldr	r2, [r7, #8]
 8015c4e:	68fb      	ldr	r3, [r7, #12]
 8015c50:	1ad3      	subs	r3, r2, r3
 8015c52:	4a1f      	ldr	r2, [pc, #124]	; (8015cd0 <prvHeapInit+0xac>)
 8015c54:	4413      	add	r3, r2
 8015c56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8015c58:	68fb      	ldr	r3, [r7, #12]
 8015c5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8015c5c:	4a1d      	ldr	r2, [pc, #116]	; (8015cd4 <prvHeapInit+0xb0>)
 8015c5e:	687b      	ldr	r3, [r7, #4]
 8015c60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8015c62:	4b1c      	ldr	r3, [pc, #112]	; (8015cd4 <prvHeapInit+0xb0>)
 8015c64:	2200      	movs	r2, #0
 8015c66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8015c68:	687b      	ldr	r3, [r7, #4]
 8015c6a:	68ba      	ldr	r2, [r7, #8]
 8015c6c:	4413      	add	r3, r2
 8015c6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8015c70:	2208      	movs	r2, #8
 8015c72:	68fb      	ldr	r3, [r7, #12]
 8015c74:	1a9b      	subs	r3, r3, r2
 8015c76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015c78:	68fb      	ldr	r3, [r7, #12]
 8015c7a:	f023 0307 	bic.w	r3, r3, #7
 8015c7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8015c80:	68fb      	ldr	r3, [r7, #12]
 8015c82:	4a15      	ldr	r2, [pc, #84]	; (8015cd8 <prvHeapInit+0xb4>)
 8015c84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8015c86:	4b14      	ldr	r3, [pc, #80]	; (8015cd8 <prvHeapInit+0xb4>)
 8015c88:	681b      	ldr	r3, [r3, #0]
 8015c8a:	2200      	movs	r2, #0
 8015c8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8015c8e:	4b12      	ldr	r3, [pc, #72]	; (8015cd8 <prvHeapInit+0xb4>)
 8015c90:	681b      	ldr	r3, [r3, #0]
 8015c92:	2200      	movs	r2, #0
 8015c94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8015c96:	687b      	ldr	r3, [r7, #4]
 8015c98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8015c9a:	683b      	ldr	r3, [r7, #0]
 8015c9c:	68fa      	ldr	r2, [r7, #12]
 8015c9e:	1ad2      	subs	r2, r2, r3
 8015ca0:	683b      	ldr	r3, [r7, #0]
 8015ca2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8015ca4:	4b0c      	ldr	r3, [pc, #48]	; (8015cd8 <prvHeapInit+0xb4>)
 8015ca6:	681a      	ldr	r2, [r3, #0]
 8015ca8:	683b      	ldr	r3, [r7, #0]
 8015caa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015cac:	683b      	ldr	r3, [r7, #0]
 8015cae:	685b      	ldr	r3, [r3, #4]
 8015cb0:	4a0a      	ldr	r2, [pc, #40]	; (8015cdc <prvHeapInit+0xb8>)
 8015cb2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015cb4:	683b      	ldr	r3, [r7, #0]
 8015cb6:	685b      	ldr	r3, [r3, #4]
 8015cb8:	4a09      	ldr	r2, [pc, #36]	; (8015ce0 <prvHeapInit+0xbc>)
 8015cba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8015cbc:	4b09      	ldr	r3, [pc, #36]	; (8015ce4 <prvHeapInit+0xc0>)
 8015cbe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8015cc2:	601a      	str	r2, [r3, #0]
}
 8015cc4:	bf00      	nop
 8015cc6:	3714      	adds	r7, #20
 8015cc8:	46bd      	mov	sp, r7
 8015cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cce:	4770      	bx	lr
 8015cd0:	24001e3c 	.word	0x24001e3c
 8015cd4:	24005a3c 	.word	0x24005a3c
 8015cd8:	24005a44 	.word	0x24005a44
 8015cdc:	24005a4c 	.word	0x24005a4c
 8015ce0:	24005a48 	.word	0x24005a48
 8015ce4:	24005a58 	.word	0x24005a58

08015ce8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8015ce8:	b480      	push	{r7}
 8015cea:	b085      	sub	sp, #20
 8015cec:	af00      	add	r7, sp, #0
 8015cee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8015cf0:	4b28      	ldr	r3, [pc, #160]	; (8015d94 <prvInsertBlockIntoFreeList+0xac>)
 8015cf2:	60fb      	str	r3, [r7, #12]
 8015cf4:	e002      	b.n	8015cfc <prvInsertBlockIntoFreeList+0x14>
 8015cf6:	68fb      	ldr	r3, [r7, #12]
 8015cf8:	681b      	ldr	r3, [r3, #0]
 8015cfa:	60fb      	str	r3, [r7, #12]
 8015cfc:	68fb      	ldr	r3, [r7, #12]
 8015cfe:	681b      	ldr	r3, [r3, #0]
 8015d00:	687a      	ldr	r2, [r7, #4]
 8015d02:	429a      	cmp	r2, r3
 8015d04:	d8f7      	bhi.n	8015cf6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8015d06:	68fb      	ldr	r3, [r7, #12]
 8015d08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8015d0a:	68fb      	ldr	r3, [r7, #12]
 8015d0c:	685b      	ldr	r3, [r3, #4]
 8015d0e:	68ba      	ldr	r2, [r7, #8]
 8015d10:	4413      	add	r3, r2
 8015d12:	687a      	ldr	r2, [r7, #4]
 8015d14:	429a      	cmp	r2, r3
 8015d16:	d108      	bne.n	8015d2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8015d18:	68fb      	ldr	r3, [r7, #12]
 8015d1a:	685a      	ldr	r2, [r3, #4]
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	685b      	ldr	r3, [r3, #4]
 8015d20:	441a      	add	r2, r3
 8015d22:	68fb      	ldr	r3, [r7, #12]
 8015d24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8015d26:	68fb      	ldr	r3, [r7, #12]
 8015d28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8015d2a:	687b      	ldr	r3, [r7, #4]
 8015d2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8015d2e:	687b      	ldr	r3, [r7, #4]
 8015d30:	685b      	ldr	r3, [r3, #4]
 8015d32:	68ba      	ldr	r2, [r7, #8]
 8015d34:	441a      	add	r2, r3
 8015d36:	68fb      	ldr	r3, [r7, #12]
 8015d38:	681b      	ldr	r3, [r3, #0]
 8015d3a:	429a      	cmp	r2, r3
 8015d3c:	d118      	bne.n	8015d70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8015d3e:	68fb      	ldr	r3, [r7, #12]
 8015d40:	681a      	ldr	r2, [r3, #0]
 8015d42:	4b15      	ldr	r3, [pc, #84]	; (8015d98 <prvInsertBlockIntoFreeList+0xb0>)
 8015d44:	681b      	ldr	r3, [r3, #0]
 8015d46:	429a      	cmp	r2, r3
 8015d48:	d00d      	beq.n	8015d66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8015d4a:	687b      	ldr	r3, [r7, #4]
 8015d4c:	685a      	ldr	r2, [r3, #4]
 8015d4e:	68fb      	ldr	r3, [r7, #12]
 8015d50:	681b      	ldr	r3, [r3, #0]
 8015d52:	685b      	ldr	r3, [r3, #4]
 8015d54:	441a      	add	r2, r3
 8015d56:	687b      	ldr	r3, [r7, #4]
 8015d58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8015d5a:	68fb      	ldr	r3, [r7, #12]
 8015d5c:	681b      	ldr	r3, [r3, #0]
 8015d5e:	681a      	ldr	r2, [r3, #0]
 8015d60:	687b      	ldr	r3, [r7, #4]
 8015d62:	601a      	str	r2, [r3, #0]
 8015d64:	e008      	b.n	8015d78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8015d66:	4b0c      	ldr	r3, [pc, #48]	; (8015d98 <prvInsertBlockIntoFreeList+0xb0>)
 8015d68:	681a      	ldr	r2, [r3, #0]
 8015d6a:	687b      	ldr	r3, [r7, #4]
 8015d6c:	601a      	str	r2, [r3, #0]
 8015d6e:	e003      	b.n	8015d78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8015d70:	68fb      	ldr	r3, [r7, #12]
 8015d72:	681a      	ldr	r2, [r3, #0]
 8015d74:	687b      	ldr	r3, [r7, #4]
 8015d76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8015d78:	68fa      	ldr	r2, [r7, #12]
 8015d7a:	687b      	ldr	r3, [r7, #4]
 8015d7c:	429a      	cmp	r2, r3
 8015d7e:	d002      	beq.n	8015d86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8015d80:	68fb      	ldr	r3, [r7, #12]
 8015d82:	687a      	ldr	r2, [r7, #4]
 8015d84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015d86:	bf00      	nop
 8015d88:	3714      	adds	r7, #20
 8015d8a:	46bd      	mov	sp, r7
 8015d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d90:	4770      	bx	lr
 8015d92:	bf00      	nop
 8015d94:	24005a3c 	.word	0x24005a3c
 8015d98:	24005a44 	.word	0x24005a44

08015d9c <__errno>:
 8015d9c:	4b01      	ldr	r3, [pc, #4]	; (8015da4 <__errno+0x8>)
 8015d9e:	6818      	ldr	r0, [r3, #0]
 8015da0:	4770      	bx	lr
 8015da2:	bf00      	nop
 8015da4:	240000a4 	.word	0x240000a4

08015da8 <__libc_init_array>:
 8015da8:	b570      	push	{r4, r5, r6, lr}
 8015daa:	4d0d      	ldr	r5, [pc, #52]	; (8015de0 <__libc_init_array+0x38>)
 8015dac:	4c0d      	ldr	r4, [pc, #52]	; (8015de4 <__libc_init_array+0x3c>)
 8015dae:	1b64      	subs	r4, r4, r5
 8015db0:	10a4      	asrs	r4, r4, #2
 8015db2:	2600      	movs	r6, #0
 8015db4:	42a6      	cmp	r6, r4
 8015db6:	d109      	bne.n	8015dcc <__libc_init_array+0x24>
 8015db8:	4d0b      	ldr	r5, [pc, #44]	; (8015de8 <__libc_init_array+0x40>)
 8015dba:	4c0c      	ldr	r4, [pc, #48]	; (8015dec <__libc_init_array+0x44>)
 8015dbc:	f000 fd3c 	bl	8016838 <_init>
 8015dc0:	1b64      	subs	r4, r4, r5
 8015dc2:	10a4      	asrs	r4, r4, #2
 8015dc4:	2600      	movs	r6, #0
 8015dc6:	42a6      	cmp	r6, r4
 8015dc8:	d105      	bne.n	8015dd6 <__libc_init_array+0x2e>
 8015dca:	bd70      	pop	{r4, r5, r6, pc}
 8015dcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8015dd0:	4798      	blx	r3
 8015dd2:	3601      	adds	r6, #1
 8015dd4:	e7ee      	b.n	8015db4 <__libc_init_array+0xc>
 8015dd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8015dda:	4798      	blx	r3
 8015ddc:	3601      	adds	r6, #1
 8015dde:	e7f2      	b.n	8015dc6 <__libc_init_array+0x1e>
 8015de0:	08016ca0 	.word	0x08016ca0
 8015de4:	08016ca0 	.word	0x08016ca0
 8015de8:	08016ca0 	.word	0x08016ca0
 8015dec:	08016ca4 	.word	0x08016ca4

08015df0 <malloc>:
 8015df0:	4b02      	ldr	r3, [pc, #8]	; (8015dfc <malloc+0xc>)
 8015df2:	4601      	mov	r1, r0
 8015df4:	6818      	ldr	r0, [r3, #0]
 8015df6:	f000 b88d 	b.w	8015f14 <_malloc_r>
 8015dfa:	bf00      	nop
 8015dfc:	240000a4 	.word	0x240000a4

08015e00 <free>:
 8015e00:	4b02      	ldr	r3, [pc, #8]	; (8015e0c <free+0xc>)
 8015e02:	4601      	mov	r1, r0
 8015e04:	6818      	ldr	r0, [r3, #0]
 8015e06:	f000 b819 	b.w	8015e3c <_free_r>
 8015e0a:	bf00      	nop
 8015e0c:	240000a4 	.word	0x240000a4

08015e10 <memcpy>:
 8015e10:	440a      	add	r2, r1
 8015e12:	4291      	cmp	r1, r2
 8015e14:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8015e18:	d100      	bne.n	8015e1c <memcpy+0xc>
 8015e1a:	4770      	bx	lr
 8015e1c:	b510      	push	{r4, lr}
 8015e1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015e22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015e26:	4291      	cmp	r1, r2
 8015e28:	d1f9      	bne.n	8015e1e <memcpy+0xe>
 8015e2a:	bd10      	pop	{r4, pc}

08015e2c <memset>:
 8015e2c:	4402      	add	r2, r0
 8015e2e:	4603      	mov	r3, r0
 8015e30:	4293      	cmp	r3, r2
 8015e32:	d100      	bne.n	8015e36 <memset+0xa>
 8015e34:	4770      	bx	lr
 8015e36:	f803 1b01 	strb.w	r1, [r3], #1
 8015e3a:	e7f9      	b.n	8015e30 <memset+0x4>

08015e3c <_free_r>:
 8015e3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015e3e:	2900      	cmp	r1, #0
 8015e40:	d044      	beq.n	8015ecc <_free_r+0x90>
 8015e42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015e46:	9001      	str	r0, [sp, #4]
 8015e48:	2b00      	cmp	r3, #0
 8015e4a:	f1a1 0404 	sub.w	r4, r1, #4
 8015e4e:	bfb8      	it	lt
 8015e50:	18e4      	addlt	r4, r4, r3
 8015e52:	f000 fc39 	bl	80166c8 <__malloc_lock>
 8015e56:	4a1e      	ldr	r2, [pc, #120]	; (8015ed0 <_free_r+0x94>)
 8015e58:	9801      	ldr	r0, [sp, #4]
 8015e5a:	6813      	ldr	r3, [r2, #0]
 8015e5c:	b933      	cbnz	r3, 8015e6c <_free_r+0x30>
 8015e5e:	6063      	str	r3, [r4, #4]
 8015e60:	6014      	str	r4, [r2, #0]
 8015e62:	b003      	add	sp, #12
 8015e64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015e68:	f000 bc34 	b.w	80166d4 <__malloc_unlock>
 8015e6c:	42a3      	cmp	r3, r4
 8015e6e:	d908      	bls.n	8015e82 <_free_r+0x46>
 8015e70:	6825      	ldr	r5, [r4, #0]
 8015e72:	1961      	adds	r1, r4, r5
 8015e74:	428b      	cmp	r3, r1
 8015e76:	bf01      	itttt	eq
 8015e78:	6819      	ldreq	r1, [r3, #0]
 8015e7a:	685b      	ldreq	r3, [r3, #4]
 8015e7c:	1949      	addeq	r1, r1, r5
 8015e7e:	6021      	streq	r1, [r4, #0]
 8015e80:	e7ed      	b.n	8015e5e <_free_r+0x22>
 8015e82:	461a      	mov	r2, r3
 8015e84:	685b      	ldr	r3, [r3, #4]
 8015e86:	b10b      	cbz	r3, 8015e8c <_free_r+0x50>
 8015e88:	42a3      	cmp	r3, r4
 8015e8a:	d9fa      	bls.n	8015e82 <_free_r+0x46>
 8015e8c:	6811      	ldr	r1, [r2, #0]
 8015e8e:	1855      	adds	r5, r2, r1
 8015e90:	42a5      	cmp	r5, r4
 8015e92:	d10b      	bne.n	8015eac <_free_r+0x70>
 8015e94:	6824      	ldr	r4, [r4, #0]
 8015e96:	4421      	add	r1, r4
 8015e98:	1854      	adds	r4, r2, r1
 8015e9a:	42a3      	cmp	r3, r4
 8015e9c:	6011      	str	r1, [r2, #0]
 8015e9e:	d1e0      	bne.n	8015e62 <_free_r+0x26>
 8015ea0:	681c      	ldr	r4, [r3, #0]
 8015ea2:	685b      	ldr	r3, [r3, #4]
 8015ea4:	6053      	str	r3, [r2, #4]
 8015ea6:	4421      	add	r1, r4
 8015ea8:	6011      	str	r1, [r2, #0]
 8015eaa:	e7da      	b.n	8015e62 <_free_r+0x26>
 8015eac:	d902      	bls.n	8015eb4 <_free_r+0x78>
 8015eae:	230c      	movs	r3, #12
 8015eb0:	6003      	str	r3, [r0, #0]
 8015eb2:	e7d6      	b.n	8015e62 <_free_r+0x26>
 8015eb4:	6825      	ldr	r5, [r4, #0]
 8015eb6:	1961      	adds	r1, r4, r5
 8015eb8:	428b      	cmp	r3, r1
 8015eba:	bf04      	itt	eq
 8015ebc:	6819      	ldreq	r1, [r3, #0]
 8015ebe:	685b      	ldreq	r3, [r3, #4]
 8015ec0:	6063      	str	r3, [r4, #4]
 8015ec2:	bf04      	itt	eq
 8015ec4:	1949      	addeq	r1, r1, r5
 8015ec6:	6021      	streq	r1, [r4, #0]
 8015ec8:	6054      	str	r4, [r2, #4]
 8015eca:	e7ca      	b.n	8015e62 <_free_r+0x26>
 8015ecc:	b003      	add	sp, #12
 8015ece:	bd30      	pop	{r4, r5, pc}
 8015ed0:	24005a5c 	.word	0x24005a5c

08015ed4 <sbrk_aligned>:
 8015ed4:	b570      	push	{r4, r5, r6, lr}
 8015ed6:	4e0e      	ldr	r6, [pc, #56]	; (8015f10 <sbrk_aligned+0x3c>)
 8015ed8:	460c      	mov	r4, r1
 8015eda:	6831      	ldr	r1, [r6, #0]
 8015edc:	4605      	mov	r5, r0
 8015ede:	b911      	cbnz	r1, 8015ee6 <sbrk_aligned+0x12>
 8015ee0:	f000 f902 	bl	80160e8 <_sbrk_r>
 8015ee4:	6030      	str	r0, [r6, #0]
 8015ee6:	4621      	mov	r1, r4
 8015ee8:	4628      	mov	r0, r5
 8015eea:	f000 f8fd 	bl	80160e8 <_sbrk_r>
 8015eee:	1c43      	adds	r3, r0, #1
 8015ef0:	d00a      	beq.n	8015f08 <sbrk_aligned+0x34>
 8015ef2:	1cc4      	adds	r4, r0, #3
 8015ef4:	f024 0403 	bic.w	r4, r4, #3
 8015ef8:	42a0      	cmp	r0, r4
 8015efa:	d007      	beq.n	8015f0c <sbrk_aligned+0x38>
 8015efc:	1a21      	subs	r1, r4, r0
 8015efe:	4628      	mov	r0, r5
 8015f00:	f000 f8f2 	bl	80160e8 <_sbrk_r>
 8015f04:	3001      	adds	r0, #1
 8015f06:	d101      	bne.n	8015f0c <sbrk_aligned+0x38>
 8015f08:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8015f0c:	4620      	mov	r0, r4
 8015f0e:	bd70      	pop	{r4, r5, r6, pc}
 8015f10:	24005a60 	.word	0x24005a60

08015f14 <_malloc_r>:
 8015f14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f18:	1ccd      	adds	r5, r1, #3
 8015f1a:	f025 0503 	bic.w	r5, r5, #3
 8015f1e:	3508      	adds	r5, #8
 8015f20:	2d0c      	cmp	r5, #12
 8015f22:	bf38      	it	cc
 8015f24:	250c      	movcc	r5, #12
 8015f26:	2d00      	cmp	r5, #0
 8015f28:	4607      	mov	r7, r0
 8015f2a:	db01      	blt.n	8015f30 <_malloc_r+0x1c>
 8015f2c:	42a9      	cmp	r1, r5
 8015f2e:	d905      	bls.n	8015f3c <_malloc_r+0x28>
 8015f30:	230c      	movs	r3, #12
 8015f32:	603b      	str	r3, [r7, #0]
 8015f34:	2600      	movs	r6, #0
 8015f36:	4630      	mov	r0, r6
 8015f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f3c:	4e2e      	ldr	r6, [pc, #184]	; (8015ff8 <_malloc_r+0xe4>)
 8015f3e:	f000 fbc3 	bl	80166c8 <__malloc_lock>
 8015f42:	6833      	ldr	r3, [r6, #0]
 8015f44:	461c      	mov	r4, r3
 8015f46:	bb34      	cbnz	r4, 8015f96 <_malloc_r+0x82>
 8015f48:	4629      	mov	r1, r5
 8015f4a:	4638      	mov	r0, r7
 8015f4c:	f7ff ffc2 	bl	8015ed4 <sbrk_aligned>
 8015f50:	1c43      	adds	r3, r0, #1
 8015f52:	4604      	mov	r4, r0
 8015f54:	d14d      	bne.n	8015ff2 <_malloc_r+0xde>
 8015f56:	6834      	ldr	r4, [r6, #0]
 8015f58:	4626      	mov	r6, r4
 8015f5a:	2e00      	cmp	r6, #0
 8015f5c:	d140      	bne.n	8015fe0 <_malloc_r+0xcc>
 8015f5e:	6823      	ldr	r3, [r4, #0]
 8015f60:	4631      	mov	r1, r6
 8015f62:	4638      	mov	r0, r7
 8015f64:	eb04 0803 	add.w	r8, r4, r3
 8015f68:	f000 f8be 	bl	80160e8 <_sbrk_r>
 8015f6c:	4580      	cmp	r8, r0
 8015f6e:	d13a      	bne.n	8015fe6 <_malloc_r+0xd2>
 8015f70:	6821      	ldr	r1, [r4, #0]
 8015f72:	3503      	adds	r5, #3
 8015f74:	1a6d      	subs	r5, r5, r1
 8015f76:	f025 0503 	bic.w	r5, r5, #3
 8015f7a:	3508      	adds	r5, #8
 8015f7c:	2d0c      	cmp	r5, #12
 8015f7e:	bf38      	it	cc
 8015f80:	250c      	movcc	r5, #12
 8015f82:	4629      	mov	r1, r5
 8015f84:	4638      	mov	r0, r7
 8015f86:	f7ff ffa5 	bl	8015ed4 <sbrk_aligned>
 8015f8a:	3001      	adds	r0, #1
 8015f8c:	d02b      	beq.n	8015fe6 <_malloc_r+0xd2>
 8015f8e:	6823      	ldr	r3, [r4, #0]
 8015f90:	442b      	add	r3, r5
 8015f92:	6023      	str	r3, [r4, #0]
 8015f94:	e00e      	b.n	8015fb4 <_malloc_r+0xa0>
 8015f96:	6822      	ldr	r2, [r4, #0]
 8015f98:	1b52      	subs	r2, r2, r5
 8015f9a:	d41e      	bmi.n	8015fda <_malloc_r+0xc6>
 8015f9c:	2a0b      	cmp	r2, #11
 8015f9e:	d916      	bls.n	8015fce <_malloc_r+0xba>
 8015fa0:	1961      	adds	r1, r4, r5
 8015fa2:	42a3      	cmp	r3, r4
 8015fa4:	6025      	str	r5, [r4, #0]
 8015fa6:	bf18      	it	ne
 8015fa8:	6059      	strne	r1, [r3, #4]
 8015faa:	6863      	ldr	r3, [r4, #4]
 8015fac:	bf08      	it	eq
 8015fae:	6031      	streq	r1, [r6, #0]
 8015fb0:	5162      	str	r2, [r4, r5]
 8015fb2:	604b      	str	r3, [r1, #4]
 8015fb4:	4638      	mov	r0, r7
 8015fb6:	f104 060b 	add.w	r6, r4, #11
 8015fba:	f000 fb8b 	bl	80166d4 <__malloc_unlock>
 8015fbe:	f026 0607 	bic.w	r6, r6, #7
 8015fc2:	1d23      	adds	r3, r4, #4
 8015fc4:	1af2      	subs	r2, r6, r3
 8015fc6:	d0b6      	beq.n	8015f36 <_malloc_r+0x22>
 8015fc8:	1b9b      	subs	r3, r3, r6
 8015fca:	50a3      	str	r3, [r4, r2]
 8015fcc:	e7b3      	b.n	8015f36 <_malloc_r+0x22>
 8015fce:	6862      	ldr	r2, [r4, #4]
 8015fd0:	42a3      	cmp	r3, r4
 8015fd2:	bf0c      	ite	eq
 8015fd4:	6032      	streq	r2, [r6, #0]
 8015fd6:	605a      	strne	r2, [r3, #4]
 8015fd8:	e7ec      	b.n	8015fb4 <_malloc_r+0xa0>
 8015fda:	4623      	mov	r3, r4
 8015fdc:	6864      	ldr	r4, [r4, #4]
 8015fde:	e7b2      	b.n	8015f46 <_malloc_r+0x32>
 8015fe0:	4634      	mov	r4, r6
 8015fe2:	6876      	ldr	r6, [r6, #4]
 8015fe4:	e7b9      	b.n	8015f5a <_malloc_r+0x46>
 8015fe6:	230c      	movs	r3, #12
 8015fe8:	603b      	str	r3, [r7, #0]
 8015fea:	4638      	mov	r0, r7
 8015fec:	f000 fb72 	bl	80166d4 <__malloc_unlock>
 8015ff0:	e7a1      	b.n	8015f36 <_malloc_r+0x22>
 8015ff2:	6025      	str	r5, [r4, #0]
 8015ff4:	e7de      	b.n	8015fb4 <_malloc_r+0xa0>
 8015ff6:	bf00      	nop
 8015ff8:	24005a5c 	.word	0x24005a5c

08015ffc <_puts_r>:
 8015ffc:	b570      	push	{r4, r5, r6, lr}
 8015ffe:	460e      	mov	r6, r1
 8016000:	4605      	mov	r5, r0
 8016002:	b118      	cbz	r0, 801600c <_puts_r+0x10>
 8016004:	6983      	ldr	r3, [r0, #24]
 8016006:	b90b      	cbnz	r3, 801600c <_puts_r+0x10>
 8016008:	f000 fa58 	bl	80164bc <__sinit>
 801600c:	69ab      	ldr	r3, [r5, #24]
 801600e:	68ac      	ldr	r4, [r5, #8]
 8016010:	b913      	cbnz	r3, 8016018 <_puts_r+0x1c>
 8016012:	4628      	mov	r0, r5
 8016014:	f000 fa52 	bl	80164bc <__sinit>
 8016018:	4b2c      	ldr	r3, [pc, #176]	; (80160cc <_puts_r+0xd0>)
 801601a:	429c      	cmp	r4, r3
 801601c:	d120      	bne.n	8016060 <_puts_r+0x64>
 801601e:	686c      	ldr	r4, [r5, #4]
 8016020:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016022:	07db      	lsls	r3, r3, #31
 8016024:	d405      	bmi.n	8016032 <_puts_r+0x36>
 8016026:	89a3      	ldrh	r3, [r4, #12]
 8016028:	0598      	lsls	r0, r3, #22
 801602a:	d402      	bmi.n	8016032 <_puts_r+0x36>
 801602c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801602e:	f000 fae3 	bl	80165f8 <__retarget_lock_acquire_recursive>
 8016032:	89a3      	ldrh	r3, [r4, #12]
 8016034:	0719      	lsls	r1, r3, #28
 8016036:	d51d      	bpl.n	8016074 <_puts_r+0x78>
 8016038:	6923      	ldr	r3, [r4, #16]
 801603a:	b1db      	cbz	r3, 8016074 <_puts_r+0x78>
 801603c:	3e01      	subs	r6, #1
 801603e:	68a3      	ldr	r3, [r4, #8]
 8016040:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8016044:	3b01      	subs	r3, #1
 8016046:	60a3      	str	r3, [r4, #8]
 8016048:	bb39      	cbnz	r1, 801609a <_puts_r+0x9e>
 801604a:	2b00      	cmp	r3, #0
 801604c:	da38      	bge.n	80160c0 <_puts_r+0xc4>
 801604e:	4622      	mov	r2, r4
 8016050:	210a      	movs	r1, #10
 8016052:	4628      	mov	r0, r5
 8016054:	f000 f858 	bl	8016108 <__swbuf_r>
 8016058:	3001      	adds	r0, #1
 801605a:	d011      	beq.n	8016080 <_puts_r+0x84>
 801605c:	250a      	movs	r5, #10
 801605e:	e011      	b.n	8016084 <_puts_r+0x88>
 8016060:	4b1b      	ldr	r3, [pc, #108]	; (80160d0 <_puts_r+0xd4>)
 8016062:	429c      	cmp	r4, r3
 8016064:	d101      	bne.n	801606a <_puts_r+0x6e>
 8016066:	68ac      	ldr	r4, [r5, #8]
 8016068:	e7da      	b.n	8016020 <_puts_r+0x24>
 801606a:	4b1a      	ldr	r3, [pc, #104]	; (80160d4 <_puts_r+0xd8>)
 801606c:	429c      	cmp	r4, r3
 801606e:	bf08      	it	eq
 8016070:	68ec      	ldreq	r4, [r5, #12]
 8016072:	e7d5      	b.n	8016020 <_puts_r+0x24>
 8016074:	4621      	mov	r1, r4
 8016076:	4628      	mov	r0, r5
 8016078:	f000 f898 	bl	80161ac <__swsetup_r>
 801607c:	2800      	cmp	r0, #0
 801607e:	d0dd      	beq.n	801603c <_puts_r+0x40>
 8016080:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8016084:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016086:	07da      	lsls	r2, r3, #31
 8016088:	d405      	bmi.n	8016096 <_puts_r+0x9a>
 801608a:	89a3      	ldrh	r3, [r4, #12]
 801608c:	059b      	lsls	r3, r3, #22
 801608e:	d402      	bmi.n	8016096 <_puts_r+0x9a>
 8016090:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016092:	f000 fab2 	bl	80165fa <__retarget_lock_release_recursive>
 8016096:	4628      	mov	r0, r5
 8016098:	bd70      	pop	{r4, r5, r6, pc}
 801609a:	2b00      	cmp	r3, #0
 801609c:	da04      	bge.n	80160a8 <_puts_r+0xac>
 801609e:	69a2      	ldr	r2, [r4, #24]
 80160a0:	429a      	cmp	r2, r3
 80160a2:	dc06      	bgt.n	80160b2 <_puts_r+0xb6>
 80160a4:	290a      	cmp	r1, #10
 80160a6:	d004      	beq.n	80160b2 <_puts_r+0xb6>
 80160a8:	6823      	ldr	r3, [r4, #0]
 80160aa:	1c5a      	adds	r2, r3, #1
 80160ac:	6022      	str	r2, [r4, #0]
 80160ae:	7019      	strb	r1, [r3, #0]
 80160b0:	e7c5      	b.n	801603e <_puts_r+0x42>
 80160b2:	4622      	mov	r2, r4
 80160b4:	4628      	mov	r0, r5
 80160b6:	f000 f827 	bl	8016108 <__swbuf_r>
 80160ba:	3001      	adds	r0, #1
 80160bc:	d1bf      	bne.n	801603e <_puts_r+0x42>
 80160be:	e7df      	b.n	8016080 <_puts_r+0x84>
 80160c0:	6823      	ldr	r3, [r4, #0]
 80160c2:	250a      	movs	r5, #10
 80160c4:	1c5a      	adds	r2, r3, #1
 80160c6:	6022      	str	r2, [r4, #0]
 80160c8:	701d      	strb	r5, [r3, #0]
 80160ca:	e7db      	b.n	8016084 <_puts_r+0x88>
 80160cc:	08016c58 	.word	0x08016c58
 80160d0:	08016c78 	.word	0x08016c78
 80160d4:	08016c38 	.word	0x08016c38

080160d8 <puts>:
 80160d8:	4b02      	ldr	r3, [pc, #8]	; (80160e4 <puts+0xc>)
 80160da:	4601      	mov	r1, r0
 80160dc:	6818      	ldr	r0, [r3, #0]
 80160de:	f7ff bf8d 	b.w	8015ffc <_puts_r>
 80160e2:	bf00      	nop
 80160e4:	240000a4 	.word	0x240000a4

080160e8 <_sbrk_r>:
 80160e8:	b538      	push	{r3, r4, r5, lr}
 80160ea:	4d06      	ldr	r5, [pc, #24]	; (8016104 <_sbrk_r+0x1c>)
 80160ec:	2300      	movs	r3, #0
 80160ee:	4604      	mov	r4, r0
 80160f0:	4608      	mov	r0, r1
 80160f2:	602b      	str	r3, [r5, #0]
 80160f4:	f7ed faf0 	bl	80036d8 <_sbrk>
 80160f8:	1c43      	adds	r3, r0, #1
 80160fa:	d102      	bne.n	8016102 <_sbrk_r+0x1a>
 80160fc:	682b      	ldr	r3, [r5, #0]
 80160fe:	b103      	cbz	r3, 8016102 <_sbrk_r+0x1a>
 8016100:	6023      	str	r3, [r4, #0]
 8016102:	bd38      	pop	{r3, r4, r5, pc}
 8016104:	24005a68 	.word	0x24005a68

08016108 <__swbuf_r>:
 8016108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801610a:	460e      	mov	r6, r1
 801610c:	4614      	mov	r4, r2
 801610e:	4605      	mov	r5, r0
 8016110:	b118      	cbz	r0, 801611a <__swbuf_r+0x12>
 8016112:	6983      	ldr	r3, [r0, #24]
 8016114:	b90b      	cbnz	r3, 801611a <__swbuf_r+0x12>
 8016116:	f000 f9d1 	bl	80164bc <__sinit>
 801611a:	4b21      	ldr	r3, [pc, #132]	; (80161a0 <__swbuf_r+0x98>)
 801611c:	429c      	cmp	r4, r3
 801611e:	d12b      	bne.n	8016178 <__swbuf_r+0x70>
 8016120:	686c      	ldr	r4, [r5, #4]
 8016122:	69a3      	ldr	r3, [r4, #24]
 8016124:	60a3      	str	r3, [r4, #8]
 8016126:	89a3      	ldrh	r3, [r4, #12]
 8016128:	071a      	lsls	r2, r3, #28
 801612a:	d52f      	bpl.n	801618c <__swbuf_r+0x84>
 801612c:	6923      	ldr	r3, [r4, #16]
 801612e:	b36b      	cbz	r3, 801618c <__swbuf_r+0x84>
 8016130:	6923      	ldr	r3, [r4, #16]
 8016132:	6820      	ldr	r0, [r4, #0]
 8016134:	1ac0      	subs	r0, r0, r3
 8016136:	6963      	ldr	r3, [r4, #20]
 8016138:	b2f6      	uxtb	r6, r6
 801613a:	4283      	cmp	r3, r0
 801613c:	4637      	mov	r7, r6
 801613e:	dc04      	bgt.n	801614a <__swbuf_r+0x42>
 8016140:	4621      	mov	r1, r4
 8016142:	4628      	mov	r0, r5
 8016144:	f000 f926 	bl	8016394 <_fflush_r>
 8016148:	bb30      	cbnz	r0, 8016198 <__swbuf_r+0x90>
 801614a:	68a3      	ldr	r3, [r4, #8]
 801614c:	3b01      	subs	r3, #1
 801614e:	60a3      	str	r3, [r4, #8]
 8016150:	6823      	ldr	r3, [r4, #0]
 8016152:	1c5a      	adds	r2, r3, #1
 8016154:	6022      	str	r2, [r4, #0]
 8016156:	701e      	strb	r6, [r3, #0]
 8016158:	6963      	ldr	r3, [r4, #20]
 801615a:	3001      	adds	r0, #1
 801615c:	4283      	cmp	r3, r0
 801615e:	d004      	beq.n	801616a <__swbuf_r+0x62>
 8016160:	89a3      	ldrh	r3, [r4, #12]
 8016162:	07db      	lsls	r3, r3, #31
 8016164:	d506      	bpl.n	8016174 <__swbuf_r+0x6c>
 8016166:	2e0a      	cmp	r6, #10
 8016168:	d104      	bne.n	8016174 <__swbuf_r+0x6c>
 801616a:	4621      	mov	r1, r4
 801616c:	4628      	mov	r0, r5
 801616e:	f000 f911 	bl	8016394 <_fflush_r>
 8016172:	b988      	cbnz	r0, 8016198 <__swbuf_r+0x90>
 8016174:	4638      	mov	r0, r7
 8016176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016178:	4b0a      	ldr	r3, [pc, #40]	; (80161a4 <__swbuf_r+0x9c>)
 801617a:	429c      	cmp	r4, r3
 801617c:	d101      	bne.n	8016182 <__swbuf_r+0x7a>
 801617e:	68ac      	ldr	r4, [r5, #8]
 8016180:	e7cf      	b.n	8016122 <__swbuf_r+0x1a>
 8016182:	4b09      	ldr	r3, [pc, #36]	; (80161a8 <__swbuf_r+0xa0>)
 8016184:	429c      	cmp	r4, r3
 8016186:	bf08      	it	eq
 8016188:	68ec      	ldreq	r4, [r5, #12]
 801618a:	e7ca      	b.n	8016122 <__swbuf_r+0x1a>
 801618c:	4621      	mov	r1, r4
 801618e:	4628      	mov	r0, r5
 8016190:	f000 f80c 	bl	80161ac <__swsetup_r>
 8016194:	2800      	cmp	r0, #0
 8016196:	d0cb      	beq.n	8016130 <__swbuf_r+0x28>
 8016198:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801619c:	e7ea      	b.n	8016174 <__swbuf_r+0x6c>
 801619e:	bf00      	nop
 80161a0:	08016c58 	.word	0x08016c58
 80161a4:	08016c78 	.word	0x08016c78
 80161a8:	08016c38 	.word	0x08016c38

080161ac <__swsetup_r>:
 80161ac:	4b32      	ldr	r3, [pc, #200]	; (8016278 <__swsetup_r+0xcc>)
 80161ae:	b570      	push	{r4, r5, r6, lr}
 80161b0:	681d      	ldr	r5, [r3, #0]
 80161b2:	4606      	mov	r6, r0
 80161b4:	460c      	mov	r4, r1
 80161b6:	b125      	cbz	r5, 80161c2 <__swsetup_r+0x16>
 80161b8:	69ab      	ldr	r3, [r5, #24]
 80161ba:	b913      	cbnz	r3, 80161c2 <__swsetup_r+0x16>
 80161bc:	4628      	mov	r0, r5
 80161be:	f000 f97d 	bl	80164bc <__sinit>
 80161c2:	4b2e      	ldr	r3, [pc, #184]	; (801627c <__swsetup_r+0xd0>)
 80161c4:	429c      	cmp	r4, r3
 80161c6:	d10f      	bne.n	80161e8 <__swsetup_r+0x3c>
 80161c8:	686c      	ldr	r4, [r5, #4]
 80161ca:	89a3      	ldrh	r3, [r4, #12]
 80161cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80161d0:	0719      	lsls	r1, r3, #28
 80161d2:	d42c      	bmi.n	801622e <__swsetup_r+0x82>
 80161d4:	06dd      	lsls	r5, r3, #27
 80161d6:	d411      	bmi.n	80161fc <__swsetup_r+0x50>
 80161d8:	2309      	movs	r3, #9
 80161da:	6033      	str	r3, [r6, #0]
 80161dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80161e0:	81a3      	strh	r3, [r4, #12]
 80161e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80161e6:	e03e      	b.n	8016266 <__swsetup_r+0xba>
 80161e8:	4b25      	ldr	r3, [pc, #148]	; (8016280 <__swsetup_r+0xd4>)
 80161ea:	429c      	cmp	r4, r3
 80161ec:	d101      	bne.n	80161f2 <__swsetup_r+0x46>
 80161ee:	68ac      	ldr	r4, [r5, #8]
 80161f0:	e7eb      	b.n	80161ca <__swsetup_r+0x1e>
 80161f2:	4b24      	ldr	r3, [pc, #144]	; (8016284 <__swsetup_r+0xd8>)
 80161f4:	429c      	cmp	r4, r3
 80161f6:	bf08      	it	eq
 80161f8:	68ec      	ldreq	r4, [r5, #12]
 80161fa:	e7e6      	b.n	80161ca <__swsetup_r+0x1e>
 80161fc:	0758      	lsls	r0, r3, #29
 80161fe:	d512      	bpl.n	8016226 <__swsetup_r+0x7a>
 8016200:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016202:	b141      	cbz	r1, 8016216 <__swsetup_r+0x6a>
 8016204:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016208:	4299      	cmp	r1, r3
 801620a:	d002      	beq.n	8016212 <__swsetup_r+0x66>
 801620c:	4630      	mov	r0, r6
 801620e:	f7ff fe15 	bl	8015e3c <_free_r>
 8016212:	2300      	movs	r3, #0
 8016214:	6363      	str	r3, [r4, #52]	; 0x34
 8016216:	89a3      	ldrh	r3, [r4, #12]
 8016218:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801621c:	81a3      	strh	r3, [r4, #12]
 801621e:	2300      	movs	r3, #0
 8016220:	6063      	str	r3, [r4, #4]
 8016222:	6923      	ldr	r3, [r4, #16]
 8016224:	6023      	str	r3, [r4, #0]
 8016226:	89a3      	ldrh	r3, [r4, #12]
 8016228:	f043 0308 	orr.w	r3, r3, #8
 801622c:	81a3      	strh	r3, [r4, #12]
 801622e:	6923      	ldr	r3, [r4, #16]
 8016230:	b94b      	cbnz	r3, 8016246 <__swsetup_r+0x9a>
 8016232:	89a3      	ldrh	r3, [r4, #12]
 8016234:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016238:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801623c:	d003      	beq.n	8016246 <__swsetup_r+0x9a>
 801623e:	4621      	mov	r1, r4
 8016240:	4630      	mov	r0, r6
 8016242:	f000 fa01 	bl	8016648 <__smakebuf_r>
 8016246:	89a0      	ldrh	r0, [r4, #12]
 8016248:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801624c:	f010 0301 	ands.w	r3, r0, #1
 8016250:	d00a      	beq.n	8016268 <__swsetup_r+0xbc>
 8016252:	2300      	movs	r3, #0
 8016254:	60a3      	str	r3, [r4, #8]
 8016256:	6963      	ldr	r3, [r4, #20]
 8016258:	425b      	negs	r3, r3
 801625a:	61a3      	str	r3, [r4, #24]
 801625c:	6923      	ldr	r3, [r4, #16]
 801625e:	b943      	cbnz	r3, 8016272 <__swsetup_r+0xc6>
 8016260:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016264:	d1ba      	bne.n	80161dc <__swsetup_r+0x30>
 8016266:	bd70      	pop	{r4, r5, r6, pc}
 8016268:	0781      	lsls	r1, r0, #30
 801626a:	bf58      	it	pl
 801626c:	6963      	ldrpl	r3, [r4, #20]
 801626e:	60a3      	str	r3, [r4, #8]
 8016270:	e7f4      	b.n	801625c <__swsetup_r+0xb0>
 8016272:	2000      	movs	r0, #0
 8016274:	e7f7      	b.n	8016266 <__swsetup_r+0xba>
 8016276:	bf00      	nop
 8016278:	240000a4 	.word	0x240000a4
 801627c:	08016c58 	.word	0x08016c58
 8016280:	08016c78 	.word	0x08016c78
 8016284:	08016c38 	.word	0x08016c38

08016288 <__sflush_r>:
 8016288:	898a      	ldrh	r2, [r1, #12]
 801628a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801628e:	4605      	mov	r5, r0
 8016290:	0710      	lsls	r0, r2, #28
 8016292:	460c      	mov	r4, r1
 8016294:	d458      	bmi.n	8016348 <__sflush_r+0xc0>
 8016296:	684b      	ldr	r3, [r1, #4]
 8016298:	2b00      	cmp	r3, #0
 801629a:	dc05      	bgt.n	80162a8 <__sflush_r+0x20>
 801629c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801629e:	2b00      	cmp	r3, #0
 80162a0:	dc02      	bgt.n	80162a8 <__sflush_r+0x20>
 80162a2:	2000      	movs	r0, #0
 80162a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80162a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80162aa:	2e00      	cmp	r6, #0
 80162ac:	d0f9      	beq.n	80162a2 <__sflush_r+0x1a>
 80162ae:	2300      	movs	r3, #0
 80162b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80162b4:	682f      	ldr	r7, [r5, #0]
 80162b6:	602b      	str	r3, [r5, #0]
 80162b8:	d032      	beq.n	8016320 <__sflush_r+0x98>
 80162ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80162bc:	89a3      	ldrh	r3, [r4, #12]
 80162be:	075a      	lsls	r2, r3, #29
 80162c0:	d505      	bpl.n	80162ce <__sflush_r+0x46>
 80162c2:	6863      	ldr	r3, [r4, #4]
 80162c4:	1ac0      	subs	r0, r0, r3
 80162c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80162c8:	b10b      	cbz	r3, 80162ce <__sflush_r+0x46>
 80162ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80162cc:	1ac0      	subs	r0, r0, r3
 80162ce:	2300      	movs	r3, #0
 80162d0:	4602      	mov	r2, r0
 80162d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80162d4:	6a21      	ldr	r1, [r4, #32]
 80162d6:	4628      	mov	r0, r5
 80162d8:	47b0      	blx	r6
 80162da:	1c43      	adds	r3, r0, #1
 80162dc:	89a3      	ldrh	r3, [r4, #12]
 80162de:	d106      	bne.n	80162ee <__sflush_r+0x66>
 80162e0:	6829      	ldr	r1, [r5, #0]
 80162e2:	291d      	cmp	r1, #29
 80162e4:	d82c      	bhi.n	8016340 <__sflush_r+0xb8>
 80162e6:	4a2a      	ldr	r2, [pc, #168]	; (8016390 <__sflush_r+0x108>)
 80162e8:	40ca      	lsrs	r2, r1
 80162ea:	07d6      	lsls	r6, r2, #31
 80162ec:	d528      	bpl.n	8016340 <__sflush_r+0xb8>
 80162ee:	2200      	movs	r2, #0
 80162f0:	6062      	str	r2, [r4, #4]
 80162f2:	04d9      	lsls	r1, r3, #19
 80162f4:	6922      	ldr	r2, [r4, #16]
 80162f6:	6022      	str	r2, [r4, #0]
 80162f8:	d504      	bpl.n	8016304 <__sflush_r+0x7c>
 80162fa:	1c42      	adds	r2, r0, #1
 80162fc:	d101      	bne.n	8016302 <__sflush_r+0x7a>
 80162fe:	682b      	ldr	r3, [r5, #0]
 8016300:	b903      	cbnz	r3, 8016304 <__sflush_r+0x7c>
 8016302:	6560      	str	r0, [r4, #84]	; 0x54
 8016304:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016306:	602f      	str	r7, [r5, #0]
 8016308:	2900      	cmp	r1, #0
 801630a:	d0ca      	beq.n	80162a2 <__sflush_r+0x1a>
 801630c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016310:	4299      	cmp	r1, r3
 8016312:	d002      	beq.n	801631a <__sflush_r+0x92>
 8016314:	4628      	mov	r0, r5
 8016316:	f7ff fd91 	bl	8015e3c <_free_r>
 801631a:	2000      	movs	r0, #0
 801631c:	6360      	str	r0, [r4, #52]	; 0x34
 801631e:	e7c1      	b.n	80162a4 <__sflush_r+0x1c>
 8016320:	6a21      	ldr	r1, [r4, #32]
 8016322:	2301      	movs	r3, #1
 8016324:	4628      	mov	r0, r5
 8016326:	47b0      	blx	r6
 8016328:	1c41      	adds	r1, r0, #1
 801632a:	d1c7      	bne.n	80162bc <__sflush_r+0x34>
 801632c:	682b      	ldr	r3, [r5, #0]
 801632e:	2b00      	cmp	r3, #0
 8016330:	d0c4      	beq.n	80162bc <__sflush_r+0x34>
 8016332:	2b1d      	cmp	r3, #29
 8016334:	d001      	beq.n	801633a <__sflush_r+0xb2>
 8016336:	2b16      	cmp	r3, #22
 8016338:	d101      	bne.n	801633e <__sflush_r+0xb6>
 801633a:	602f      	str	r7, [r5, #0]
 801633c:	e7b1      	b.n	80162a2 <__sflush_r+0x1a>
 801633e:	89a3      	ldrh	r3, [r4, #12]
 8016340:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016344:	81a3      	strh	r3, [r4, #12]
 8016346:	e7ad      	b.n	80162a4 <__sflush_r+0x1c>
 8016348:	690f      	ldr	r7, [r1, #16]
 801634a:	2f00      	cmp	r7, #0
 801634c:	d0a9      	beq.n	80162a2 <__sflush_r+0x1a>
 801634e:	0793      	lsls	r3, r2, #30
 8016350:	680e      	ldr	r6, [r1, #0]
 8016352:	bf08      	it	eq
 8016354:	694b      	ldreq	r3, [r1, #20]
 8016356:	600f      	str	r7, [r1, #0]
 8016358:	bf18      	it	ne
 801635a:	2300      	movne	r3, #0
 801635c:	eba6 0807 	sub.w	r8, r6, r7
 8016360:	608b      	str	r3, [r1, #8]
 8016362:	f1b8 0f00 	cmp.w	r8, #0
 8016366:	dd9c      	ble.n	80162a2 <__sflush_r+0x1a>
 8016368:	6a21      	ldr	r1, [r4, #32]
 801636a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801636c:	4643      	mov	r3, r8
 801636e:	463a      	mov	r2, r7
 8016370:	4628      	mov	r0, r5
 8016372:	47b0      	blx	r6
 8016374:	2800      	cmp	r0, #0
 8016376:	dc06      	bgt.n	8016386 <__sflush_r+0xfe>
 8016378:	89a3      	ldrh	r3, [r4, #12]
 801637a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801637e:	81a3      	strh	r3, [r4, #12]
 8016380:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016384:	e78e      	b.n	80162a4 <__sflush_r+0x1c>
 8016386:	4407      	add	r7, r0
 8016388:	eba8 0800 	sub.w	r8, r8, r0
 801638c:	e7e9      	b.n	8016362 <__sflush_r+0xda>
 801638e:	bf00      	nop
 8016390:	20400001 	.word	0x20400001

08016394 <_fflush_r>:
 8016394:	b538      	push	{r3, r4, r5, lr}
 8016396:	690b      	ldr	r3, [r1, #16]
 8016398:	4605      	mov	r5, r0
 801639a:	460c      	mov	r4, r1
 801639c:	b913      	cbnz	r3, 80163a4 <_fflush_r+0x10>
 801639e:	2500      	movs	r5, #0
 80163a0:	4628      	mov	r0, r5
 80163a2:	bd38      	pop	{r3, r4, r5, pc}
 80163a4:	b118      	cbz	r0, 80163ae <_fflush_r+0x1a>
 80163a6:	6983      	ldr	r3, [r0, #24]
 80163a8:	b90b      	cbnz	r3, 80163ae <_fflush_r+0x1a>
 80163aa:	f000 f887 	bl	80164bc <__sinit>
 80163ae:	4b14      	ldr	r3, [pc, #80]	; (8016400 <_fflush_r+0x6c>)
 80163b0:	429c      	cmp	r4, r3
 80163b2:	d11b      	bne.n	80163ec <_fflush_r+0x58>
 80163b4:	686c      	ldr	r4, [r5, #4]
 80163b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80163ba:	2b00      	cmp	r3, #0
 80163bc:	d0ef      	beq.n	801639e <_fflush_r+0xa>
 80163be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80163c0:	07d0      	lsls	r0, r2, #31
 80163c2:	d404      	bmi.n	80163ce <_fflush_r+0x3a>
 80163c4:	0599      	lsls	r1, r3, #22
 80163c6:	d402      	bmi.n	80163ce <_fflush_r+0x3a>
 80163c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80163ca:	f000 f915 	bl	80165f8 <__retarget_lock_acquire_recursive>
 80163ce:	4628      	mov	r0, r5
 80163d0:	4621      	mov	r1, r4
 80163d2:	f7ff ff59 	bl	8016288 <__sflush_r>
 80163d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80163d8:	07da      	lsls	r2, r3, #31
 80163da:	4605      	mov	r5, r0
 80163dc:	d4e0      	bmi.n	80163a0 <_fflush_r+0xc>
 80163de:	89a3      	ldrh	r3, [r4, #12]
 80163e0:	059b      	lsls	r3, r3, #22
 80163e2:	d4dd      	bmi.n	80163a0 <_fflush_r+0xc>
 80163e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80163e6:	f000 f908 	bl	80165fa <__retarget_lock_release_recursive>
 80163ea:	e7d9      	b.n	80163a0 <_fflush_r+0xc>
 80163ec:	4b05      	ldr	r3, [pc, #20]	; (8016404 <_fflush_r+0x70>)
 80163ee:	429c      	cmp	r4, r3
 80163f0:	d101      	bne.n	80163f6 <_fflush_r+0x62>
 80163f2:	68ac      	ldr	r4, [r5, #8]
 80163f4:	e7df      	b.n	80163b6 <_fflush_r+0x22>
 80163f6:	4b04      	ldr	r3, [pc, #16]	; (8016408 <_fflush_r+0x74>)
 80163f8:	429c      	cmp	r4, r3
 80163fa:	bf08      	it	eq
 80163fc:	68ec      	ldreq	r4, [r5, #12]
 80163fe:	e7da      	b.n	80163b6 <_fflush_r+0x22>
 8016400:	08016c58 	.word	0x08016c58
 8016404:	08016c78 	.word	0x08016c78
 8016408:	08016c38 	.word	0x08016c38

0801640c <std>:
 801640c:	2300      	movs	r3, #0
 801640e:	b510      	push	{r4, lr}
 8016410:	4604      	mov	r4, r0
 8016412:	e9c0 3300 	strd	r3, r3, [r0]
 8016416:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801641a:	6083      	str	r3, [r0, #8]
 801641c:	8181      	strh	r1, [r0, #12]
 801641e:	6643      	str	r3, [r0, #100]	; 0x64
 8016420:	81c2      	strh	r2, [r0, #14]
 8016422:	6183      	str	r3, [r0, #24]
 8016424:	4619      	mov	r1, r3
 8016426:	2208      	movs	r2, #8
 8016428:	305c      	adds	r0, #92	; 0x5c
 801642a:	f7ff fcff 	bl	8015e2c <memset>
 801642e:	4b05      	ldr	r3, [pc, #20]	; (8016444 <std+0x38>)
 8016430:	6263      	str	r3, [r4, #36]	; 0x24
 8016432:	4b05      	ldr	r3, [pc, #20]	; (8016448 <std+0x3c>)
 8016434:	62a3      	str	r3, [r4, #40]	; 0x28
 8016436:	4b05      	ldr	r3, [pc, #20]	; (801644c <std+0x40>)
 8016438:	62e3      	str	r3, [r4, #44]	; 0x2c
 801643a:	4b05      	ldr	r3, [pc, #20]	; (8016450 <std+0x44>)
 801643c:	6224      	str	r4, [r4, #32]
 801643e:	6323      	str	r3, [r4, #48]	; 0x30
 8016440:	bd10      	pop	{r4, pc}
 8016442:	bf00      	nop
 8016444:	080166e1 	.word	0x080166e1
 8016448:	08016703 	.word	0x08016703
 801644c:	0801673b 	.word	0x0801673b
 8016450:	0801675f 	.word	0x0801675f

08016454 <_cleanup_r>:
 8016454:	4901      	ldr	r1, [pc, #4]	; (801645c <_cleanup_r+0x8>)
 8016456:	f000 b8af 	b.w	80165b8 <_fwalk_reent>
 801645a:	bf00      	nop
 801645c:	08016395 	.word	0x08016395

08016460 <__sfmoreglue>:
 8016460:	b570      	push	{r4, r5, r6, lr}
 8016462:	2268      	movs	r2, #104	; 0x68
 8016464:	1e4d      	subs	r5, r1, #1
 8016466:	4355      	muls	r5, r2
 8016468:	460e      	mov	r6, r1
 801646a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801646e:	f7ff fd51 	bl	8015f14 <_malloc_r>
 8016472:	4604      	mov	r4, r0
 8016474:	b140      	cbz	r0, 8016488 <__sfmoreglue+0x28>
 8016476:	2100      	movs	r1, #0
 8016478:	e9c0 1600 	strd	r1, r6, [r0]
 801647c:	300c      	adds	r0, #12
 801647e:	60a0      	str	r0, [r4, #8]
 8016480:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016484:	f7ff fcd2 	bl	8015e2c <memset>
 8016488:	4620      	mov	r0, r4
 801648a:	bd70      	pop	{r4, r5, r6, pc}

0801648c <__sfp_lock_acquire>:
 801648c:	4801      	ldr	r0, [pc, #4]	; (8016494 <__sfp_lock_acquire+0x8>)
 801648e:	f000 b8b3 	b.w	80165f8 <__retarget_lock_acquire_recursive>
 8016492:	bf00      	nop
 8016494:	24005a65 	.word	0x24005a65

08016498 <__sfp_lock_release>:
 8016498:	4801      	ldr	r0, [pc, #4]	; (80164a0 <__sfp_lock_release+0x8>)
 801649a:	f000 b8ae 	b.w	80165fa <__retarget_lock_release_recursive>
 801649e:	bf00      	nop
 80164a0:	24005a65 	.word	0x24005a65

080164a4 <__sinit_lock_acquire>:
 80164a4:	4801      	ldr	r0, [pc, #4]	; (80164ac <__sinit_lock_acquire+0x8>)
 80164a6:	f000 b8a7 	b.w	80165f8 <__retarget_lock_acquire_recursive>
 80164aa:	bf00      	nop
 80164ac:	24005a66 	.word	0x24005a66

080164b0 <__sinit_lock_release>:
 80164b0:	4801      	ldr	r0, [pc, #4]	; (80164b8 <__sinit_lock_release+0x8>)
 80164b2:	f000 b8a2 	b.w	80165fa <__retarget_lock_release_recursive>
 80164b6:	bf00      	nop
 80164b8:	24005a66 	.word	0x24005a66

080164bc <__sinit>:
 80164bc:	b510      	push	{r4, lr}
 80164be:	4604      	mov	r4, r0
 80164c0:	f7ff fff0 	bl	80164a4 <__sinit_lock_acquire>
 80164c4:	69a3      	ldr	r3, [r4, #24]
 80164c6:	b11b      	cbz	r3, 80164d0 <__sinit+0x14>
 80164c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80164cc:	f7ff bff0 	b.w	80164b0 <__sinit_lock_release>
 80164d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80164d4:	6523      	str	r3, [r4, #80]	; 0x50
 80164d6:	4b13      	ldr	r3, [pc, #76]	; (8016524 <__sinit+0x68>)
 80164d8:	4a13      	ldr	r2, [pc, #76]	; (8016528 <__sinit+0x6c>)
 80164da:	681b      	ldr	r3, [r3, #0]
 80164dc:	62a2      	str	r2, [r4, #40]	; 0x28
 80164de:	42a3      	cmp	r3, r4
 80164e0:	bf04      	itt	eq
 80164e2:	2301      	moveq	r3, #1
 80164e4:	61a3      	streq	r3, [r4, #24]
 80164e6:	4620      	mov	r0, r4
 80164e8:	f000 f820 	bl	801652c <__sfp>
 80164ec:	6060      	str	r0, [r4, #4]
 80164ee:	4620      	mov	r0, r4
 80164f0:	f000 f81c 	bl	801652c <__sfp>
 80164f4:	60a0      	str	r0, [r4, #8]
 80164f6:	4620      	mov	r0, r4
 80164f8:	f000 f818 	bl	801652c <__sfp>
 80164fc:	2200      	movs	r2, #0
 80164fe:	60e0      	str	r0, [r4, #12]
 8016500:	2104      	movs	r1, #4
 8016502:	6860      	ldr	r0, [r4, #4]
 8016504:	f7ff ff82 	bl	801640c <std>
 8016508:	68a0      	ldr	r0, [r4, #8]
 801650a:	2201      	movs	r2, #1
 801650c:	2109      	movs	r1, #9
 801650e:	f7ff ff7d 	bl	801640c <std>
 8016512:	68e0      	ldr	r0, [r4, #12]
 8016514:	2202      	movs	r2, #2
 8016516:	2112      	movs	r1, #18
 8016518:	f7ff ff78 	bl	801640c <std>
 801651c:	2301      	movs	r3, #1
 801651e:	61a3      	str	r3, [r4, #24]
 8016520:	e7d2      	b.n	80164c8 <__sinit+0xc>
 8016522:	bf00      	nop
 8016524:	08016c34 	.word	0x08016c34
 8016528:	08016455 	.word	0x08016455

0801652c <__sfp>:
 801652c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801652e:	4607      	mov	r7, r0
 8016530:	f7ff ffac 	bl	801648c <__sfp_lock_acquire>
 8016534:	4b1e      	ldr	r3, [pc, #120]	; (80165b0 <__sfp+0x84>)
 8016536:	681e      	ldr	r6, [r3, #0]
 8016538:	69b3      	ldr	r3, [r6, #24]
 801653a:	b913      	cbnz	r3, 8016542 <__sfp+0x16>
 801653c:	4630      	mov	r0, r6
 801653e:	f7ff ffbd 	bl	80164bc <__sinit>
 8016542:	3648      	adds	r6, #72	; 0x48
 8016544:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016548:	3b01      	subs	r3, #1
 801654a:	d503      	bpl.n	8016554 <__sfp+0x28>
 801654c:	6833      	ldr	r3, [r6, #0]
 801654e:	b30b      	cbz	r3, 8016594 <__sfp+0x68>
 8016550:	6836      	ldr	r6, [r6, #0]
 8016552:	e7f7      	b.n	8016544 <__sfp+0x18>
 8016554:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016558:	b9d5      	cbnz	r5, 8016590 <__sfp+0x64>
 801655a:	4b16      	ldr	r3, [pc, #88]	; (80165b4 <__sfp+0x88>)
 801655c:	60e3      	str	r3, [r4, #12]
 801655e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016562:	6665      	str	r5, [r4, #100]	; 0x64
 8016564:	f000 f847 	bl	80165f6 <__retarget_lock_init_recursive>
 8016568:	f7ff ff96 	bl	8016498 <__sfp_lock_release>
 801656c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8016570:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8016574:	6025      	str	r5, [r4, #0]
 8016576:	61a5      	str	r5, [r4, #24]
 8016578:	2208      	movs	r2, #8
 801657a:	4629      	mov	r1, r5
 801657c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016580:	f7ff fc54 	bl	8015e2c <memset>
 8016584:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016588:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801658c:	4620      	mov	r0, r4
 801658e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016590:	3468      	adds	r4, #104	; 0x68
 8016592:	e7d9      	b.n	8016548 <__sfp+0x1c>
 8016594:	2104      	movs	r1, #4
 8016596:	4638      	mov	r0, r7
 8016598:	f7ff ff62 	bl	8016460 <__sfmoreglue>
 801659c:	4604      	mov	r4, r0
 801659e:	6030      	str	r0, [r6, #0]
 80165a0:	2800      	cmp	r0, #0
 80165a2:	d1d5      	bne.n	8016550 <__sfp+0x24>
 80165a4:	f7ff ff78 	bl	8016498 <__sfp_lock_release>
 80165a8:	230c      	movs	r3, #12
 80165aa:	603b      	str	r3, [r7, #0]
 80165ac:	e7ee      	b.n	801658c <__sfp+0x60>
 80165ae:	bf00      	nop
 80165b0:	08016c34 	.word	0x08016c34
 80165b4:	ffff0001 	.word	0xffff0001

080165b8 <_fwalk_reent>:
 80165b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80165bc:	4606      	mov	r6, r0
 80165be:	4688      	mov	r8, r1
 80165c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80165c4:	2700      	movs	r7, #0
 80165c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80165ca:	f1b9 0901 	subs.w	r9, r9, #1
 80165ce:	d505      	bpl.n	80165dc <_fwalk_reent+0x24>
 80165d0:	6824      	ldr	r4, [r4, #0]
 80165d2:	2c00      	cmp	r4, #0
 80165d4:	d1f7      	bne.n	80165c6 <_fwalk_reent+0xe>
 80165d6:	4638      	mov	r0, r7
 80165d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80165dc:	89ab      	ldrh	r3, [r5, #12]
 80165de:	2b01      	cmp	r3, #1
 80165e0:	d907      	bls.n	80165f2 <_fwalk_reent+0x3a>
 80165e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80165e6:	3301      	adds	r3, #1
 80165e8:	d003      	beq.n	80165f2 <_fwalk_reent+0x3a>
 80165ea:	4629      	mov	r1, r5
 80165ec:	4630      	mov	r0, r6
 80165ee:	47c0      	blx	r8
 80165f0:	4307      	orrs	r7, r0
 80165f2:	3568      	adds	r5, #104	; 0x68
 80165f4:	e7e9      	b.n	80165ca <_fwalk_reent+0x12>

080165f6 <__retarget_lock_init_recursive>:
 80165f6:	4770      	bx	lr

080165f8 <__retarget_lock_acquire_recursive>:
 80165f8:	4770      	bx	lr

080165fa <__retarget_lock_release_recursive>:
 80165fa:	4770      	bx	lr

080165fc <__swhatbuf_r>:
 80165fc:	b570      	push	{r4, r5, r6, lr}
 80165fe:	460e      	mov	r6, r1
 8016600:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016604:	2900      	cmp	r1, #0
 8016606:	b096      	sub	sp, #88	; 0x58
 8016608:	4614      	mov	r4, r2
 801660a:	461d      	mov	r5, r3
 801660c:	da08      	bge.n	8016620 <__swhatbuf_r+0x24>
 801660e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8016612:	2200      	movs	r2, #0
 8016614:	602a      	str	r2, [r5, #0]
 8016616:	061a      	lsls	r2, r3, #24
 8016618:	d410      	bmi.n	801663c <__swhatbuf_r+0x40>
 801661a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801661e:	e00e      	b.n	801663e <__swhatbuf_r+0x42>
 8016620:	466a      	mov	r2, sp
 8016622:	f000 f8c3 	bl	80167ac <_fstat_r>
 8016626:	2800      	cmp	r0, #0
 8016628:	dbf1      	blt.n	801660e <__swhatbuf_r+0x12>
 801662a:	9a01      	ldr	r2, [sp, #4]
 801662c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016630:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016634:	425a      	negs	r2, r3
 8016636:	415a      	adcs	r2, r3
 8016638:	602a      	str	r2, [r5, #0]
 801663a:	e7ee      	b.n	801661a <__swhatbuf_r+0x1e>
 801663c:	2340      	movs	r3, #64	; 0x40
 801663e:	2000      	movs	r0, #0
 8016640:	6023      	str	r3, [r4, #0]
 8016642:	b016      	add	sp, #88	; 0x58
 8016644:	bd70      	pop	{r4, r5, r6, pc}
	...

08016648 <__smakebuf_r>:
 8016648:	898b      	ldrh	r3, [r1, #12]
 801664a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801664c:	079d      	lsls	r5, r3, #30
 801664e:	4606      	mov	r6, r0
 8016650:	460c      	mov	r4, r1
 8016652:	d507      	bpl.n	8016664 <__smakebuf_r+0x1c>
 8016654:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016658:	6023      	str	r3, [r4, #0]
 801665a:	6123      	str	r3, [r4, #16]
 801665c:	2301      	movs	r3, #1
 801665e:	6163      	str	r3, [r4, #20]
 8016660:	b002      	add	sp, #8
 8016662:	bd70      	pop	{r4, r5, r6, pc}
 8016664:	ab01      	add	r3, sp, #4
 8016666:	466a      	mov	r2, sp
 8016668:	f7ff ffc8 	bl	80165fc <__swhatbuf_r>
 801666c:	9900      	ldr	r1, [sp, #0]
 801666e:	4605      	mov	r5, r0
 8016670:	4630      	mov	r0, r6
 8016672:	f7ff fc4f 	bl	8015f14 <_malloc_r>
 8016676:	b948      	cbnz	r0, 801668c <__smakebuf_r+0x44>
 8016678:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801667c:	059a      	lsls	r2, r3, #22
 801667e:	d4ef      	bmi.n	8016660 <__smakebuf_r+0x18>
 8016680:	f023 0303 	bic.w	r3, r3, #3
 8016684:	f043 0302 	orr.w	r3, r3, #2
 8016688:	81a3      	strh	r3, [r4, #12]
 801668a:	e7e3      	b.n	8016654 <__smakebuf_r+0xc>
 801668c:	4b0d      	ldr	r3, [pc, #52]	; (80166c4 <__smakebuf_r+0x7c>)
 801668e:	62b3      	str	r3, [r6, #40]	; 0x28
 8016690:	89a3      	ldrh	r3, [r4, #12]
 8016692:	6020      	str	r0, [r4, #0]
 8016694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016698:	81a3      	strh	r3, [r4, #12]
 801669a:	9b00      	ldr	r3, [sp, #0]
 801669c:	6163      	str	r3, [r4, #20]
 801669e:	9b01      	ldr	r3, [sp, #4]
 80166a0:	6120      	str	r0, [r4, #16]
 80166a2:	b15b      	cbz	r3, 80166bc <__smakebuf_r+0x74>
 80166a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80166a8:	4630      	mov	r0, r6
 80166aa:	f000 f891 	bl	80167d0 <_isatty_r>
 80166ae:	b128      	cbz	r0, 80166bc <__smakebuf_r+0x74>
 80166b0:	89a3      	ldrh	r3, [r4, #12]
 80166b2:	f023 0303 	bic.w	r3, r3, #3
 80166b6:	f043 0301 	orr.w	r3, r3, #1
 80166ba:	81a3      	strh	r3, [r4, #12]
 80166bc:	89a0      	ldrh	r0, [r4, #12]
 80166be:	4305      	orrs	r5, r0
 80166c0:	81a5      	strh	r5, [r4, #12]
 80166c2:	e7cd      	b.n	8016660 <__smakebuf_r+0x18>
 80166c4:	08016455 	.word	0x08016455

080166c8 <__malloc_lock>:
 80166c8:	4801      	ldr	r0, [pc, #4]	; (80166d0 <__malloc_lock+0x8>)
 80166ca:	f7ff bf95 	b.w	80165f8 <__retarget_lock_acquire_recursive>
 80166ce:	bf00      	nop
 80166d0:	24005a64 	.word	0x24005a64

080166d4 <__malloc_unlock>:
 80166d4:	4801      	ldr	r0, [pc, #4]	; (80166dc <__malloc_unlock+0x8>)
 80166d6:	f7ff bf90 	b.w	80165fa <__retarget_lock_release_recursive>
 80166da:	bf00      	nop
 80166dc:	24005a64 	.word	0x24005a64

080166e0 <__sread>:
 80166e0:	b510      	push	{r4, lr}
 80166e2:	460c      	mov	r4, r1
 80166e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80166e8:	f000 f894 	bl	8016814 <_read_r>
 80166ec:	2800      	cmp	r0, #0
 80166ee:	bfab      	itete	ge
 80166f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80166f2:	89a3      	ldrhlt	r3, [r4, #12]
 80166f4:	181b      	addge	r3, r3, r0
 80166f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80166fa:	bfac      	ite	ge
 80166fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80166fe:	81a3      	strhlt	r3, [r4, #12]
 8016700:	bd10      	pop	{r4, pc}

08016702 <__swrite>:
 8016702:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016706:	461f      	mov	r7, r3
 8016708:	898b      	ldrh	r3, [r1, #12]
 801670a:	05db      	lsls	r3, r3, #23
 801670c:	4605      	mov	r5, r0
 801670e:	460c      	mov	r4, r1
 8016710:	4616      	mov	r6, r2
 8016712:	d505      	bpl.n	8016720 <__swrite+0x1e>
 8016714:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016718:	2302      	movs	r3, #2
 801671a:	2200      	movs	r2, #0
 801671c:	f000 f868 	bl	80167f0 <_lseek_r>
 8016720:	89a3      	ldrh	r3, [r4, #12]
 8016722:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016726:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801672a:	81a3      	strh	r3, [r4, #12]
 801672c:	4632      	mov	r2, r6
 801672e:	463b      	mov	r3, r7
 8016730:	4628      	mov	r0, r5
 8016732:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016736:	f000 b817 	b.w	8016768 <_write_r>

0801673a <__sseek>:
 801673a:	b510      	push	{r4, lr}
 801673c:	460c      	mov	r4, r1
 801673e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016742:	f000 f855 	bl	80167f0 <_lseek_r>
 8016746:	1c43      	adds	r3, r0, #1
 8016748:	89a3      	ldrh	r3, [r4, #12]
 801674a:	bf15      	itete	ne
 801674c:	6560      	strne	r0, [r4, #84]	; 0x54
 801674e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016752:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016756:	81a3      	strheq	r3, [r4, #12]
 8016758:	bf18      	it	ne
 801675a:	81a3      	strhne	r3, [r4, #12]
 801675c:	bd10      	pop	{r4, pc}

0801675e <__sclose>:
 801675e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016762:	f000 b813 	b.w	801678c <_close_r>
	...

08016768 <_write_r>:
 8016768:	b538      	push	{r3, r4, r5, lr}
 801676a:	4d07      	ldr	r5, [pc, #28]	; (8016788 <_write_r+0x20>)
 801676c:	4604      	mov	r4, r0
 801676e:	4608      	mov	r0, r1
 8016770:	4611      	mov	r1, r2
 8016772:	2200      	movs	r2, #0
 8016774:	602a      	str	r2, [r5, #0]
 8016776:	461a      	mov	r2, r3
 8016778:	f7ec ff5d 	bl	8003636 <_write>
 801677c:	1c43      	adds	r3, r0, #1
 801677e:	d102      	bne.n	8016786 <_write_r+0x1e>
 8016780:	682b      	ldr	r3, [r5, #0]
 8016782:	b103      	cbz	r3, 8016786 <_write_r+0x1e>
 8016784:	6023      	str	r3, [r4, #0]
 8016786:	bd38      	pop	{r3, r4, r5, pc}
 8016788:	24005a68 	.word	0x24005a68

0801678c <_close_r>:
 801678c:	b538      	push	{r3, r4, r5, lr}
 801678e:	4d06      	ldr	r5, [pc, #24]	; (80167a8 <_close_r+0x1c>)
 8016790:	2300      	movs	r3, #0
 8016792:	4604      	mov	r4, r0
 8016794:	4608      	mov	r0, r1
 8016796:	602b      	str	r3, [r5, #0]
 8016798:	f7ec ff69 	bl	800366e <_close>
 801679c:	1c43      	adds	r3, r0, #1
 801679e:	d102      	bne.n	80167a6 <_close_r+0x1a>
 80167a0:	682b      	ldr	r3, [r5, #0]
 80167a2:	b103      	cbz	r3, 80167a6 <_close_r+0x1a>
 80167a4:	6023      	str	r3, [r4, #0]
 80167a6:	bd38      	pop	{r3, r4, r5, pc}
 80167a8:	24005a68 	.word	0x24005a68

080167ac <_fstat_r>:
 80167ac:	b538      	push	{r3, r4, r5, lr}
 80167ae:	4d07      	ldr	r5, [pc, #28]	; (80167cc <_fstat_r+0x20>)
 80167b0:	2300      	movs	r3, #0
 80167b2:	4604      	mov	r4, r0
 80167b4:	4608      	mov	r0, r1
 80167b6:	4611      	mov	r1, r2
 80167b8:	602b      	str	r3, [r5, #0]
 80167ba:	f7ec ff64 	bl	8003686 <_fstat>
 80167be:	1c43      	adds	r3, r0, #1
 80167c0:	d102      	bne.n	80167c8 <_fstat_r+0x1c>
 80167c2:	682b      	ldr	r3, [r5, #0]
 80167c4:	b103      	cbz	r3, 80167c8 <_fstat_r+0x1c>
 80167c6:	6023      	str	r3, [r4, #0]
 80167c8:	bd38      	pop	{r3, r4, r5, pc}
 80167ca:	bf00      	nop
 80167cc:	24005a68 	.word	0x24005a68

080167d0 <_isatty_r>:
 80167d0:	b538      	push	{r3, r4, r5, lr}
 80167d2:	4d06      	ldr	r5, [pc, #24]	; (80167ec <_isatty_r+0x1c>)
 80167d4:	2300      	movs	r3, #0
 80167d6:	4604      	mov	r4, r0
 80167d8:	4608      	mov	r0, r1
 80167da:	602b      	str	r3, [r5, #0]
 80167dc:	f7ec ff63 	bl	80036a6 <_isatty>
 80167e0:	1c43      	adds	r3, r0, #1
 80167e2:	d102      	bne.n	80167ea <_isatty_r+0x1a>
 80167e4:	682b      	ldr	r3, [r5, #0]
 80167e6:	b103      	cbz	r3, 80167ea <_isatty_r+0x1a>
 80167e8:	6023      	str	r3, [r4, #0]
 80167ea:	bd38      	pop	{r3, r4, r5, pc}
 80167ec:	24005a68 	.word	0x24005a68

080167f0 <_lseek_r>:
 80167f0:	b538      	push	{r3, r4, r5, lr}
 80167f2:	4d07      	ldr	r5, [pc, #28]	; (8016810 <_lseek_r+0x20>)
 80167f4:	4604      	mov	r4, r0
 80167f6:	4608      	mov	r0, r1
 80167f8:	4611      	mov	r1, r2
 80167fa:	2200      	movs	r2, #0
 80167fc:	602a      	str	r2, [r5, #0]
 80167fe:	461a      	mov	r2, r3
 8016800:	f7ec ff5c 	bl	80036bc <_lseek>
 8016804:	1c43      	adds	r3, r0, #1
 8016806:	d102      	bne.n	801680e <_lseek_r+0x1e>
 8016808:	682b      	ldr	r3, [r5, #0]
 801680a:	b103      	cbz	r3, 801680e <_lseek_r+0x1e>
 801680c:	6023      	str	r3, [r4, #0]
 801680e:	bd38      	pop	{r3, r4, r5, pc}
 8016810:	24005a68 	.word	0x24005a68

08016814 <_read_r>:
 8016814:	b538      	push	{r3, r4, r5, lr}
 8016816:	4d07      	ldr	r5, [pc, #28]	; (8016834 <_read_r+0x20>)
 8016818:	4604      	mov	r4, r0
 801681a:	4608      	mov	r0, r1
 801681c:	4611      	mov	r1, r2
 801681e:	2200      	movs	r2, #0
 8016820:	602a      	str	r2, [r5, #0]
 8016822:	461a      	mov	r2, r3
 8016824:	f7ec feea 	bl	80035fc <_read>
 8016828:	1c43      	adds	r3, r0, #1
 801682a:	d102      	bne.n	8016832 <_read_r+0x1e>
 801682c:	682b      	ldr	r3, [r5, #0]
 801682e:	b103      	cbz	r3, 8016832 <_read_r+0x1e>
 8016830:	6023      	str	r3, [r4, #0]
 8016832:	bd38      	pop	{r3, r4, r5, pc}
 8016834:	24005a68 	.word	0x24005a68

08016838 <_init>:
 8016838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801683a:	bf00      	nop
 801683c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801683e:	bc08      	pop	{r3}
 8016840:	469e      	mov	lr, r3
 8016842:	4770      	bx	lr

08016844 <_fini>:
 8016844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016846:	bf00      	nop
 8016848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801684a:	bc08      	pop	{r3}
 801684c:	469e      	mov	lr, r3
 801684e:	4770      	bx	lr
