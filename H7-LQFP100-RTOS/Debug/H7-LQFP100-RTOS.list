
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013dbc  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b0  0801405c  0801405c  0002405c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801440c  0801440c  0002440c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08014414  08014414  00024414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08014418  08014418  00024418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  0801441c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004f1c  24000080  08014494  00030080  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  24004f9c  08014494  00034f9c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 10 .debug_info   00030a12  00000000  00000000  000300a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000527a  00000000  00000000  00060ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002530  00000000  00000000  00065d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002348  00000000  00000000  00068268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000748b  00000000  00000000  0006a5b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002edb8  00000000  00000000  00071a3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0018d52a  00000000  00000000  000a07f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0022dd1d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000a948  00000000  00000000  0022dd70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000080 	.word	0x24000080
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08014044 	.word	0x08014044

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000084 	.word	0x24000084
 80002dc:	08014044 	.word	0x08014044

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000390:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <HAL_TIM_OC_DelayElapsedCallback>:
 *
 * @param htim Pointer to the timer handle structure.
 *             Supported timer instances are htim1, htim2, and htim3.
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  if (htim == &htim1)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	4a13      	ldr	r2, [pc, #76]	; (80006dc <HAL_TIM_OC_DelayElapsedCallback+0x58>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d106      	bne.n	80006a2 <HAL_TIM_OC_DelayElapsedCallback+0x1e>
  {
	  osEventFlagsSet(event_flags, PMT_FLAG_ID);
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2101      	movs	r1, #1
 800069a:	4618      	mov	r0, r3
 800069c:	f00f fa70 	bl	800fb80 <osEventFlagsSet>
  }
  else
  {
	  printf("Unknown Timer Interrupt\n");
  }
}
 80006a0:	e018      	b.n	80006d4 <HAL_TIM_OC_DelayElapsedCallback+0x50>
  else if (htim == &htim2)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	4a0f      	ldr	r2, [pc, #60]	; (80006e4 <HAL_TIM_OC_DelayElapsedCallback+0x60>)
 80006a6:	4293      	cmp	r3, r2
 80006a8:	d106      	bne.n	80006b8 <HAL_TIM_OC_DelayElapsedCallback+0x34>
	  osEventFlagsSet(event_flags, ERPA_FLAG_ID);
 80006aa:	4b0d      	ldr	r3, [pc, #52]	; (80006e0 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	2102      	movs	r1, #2
 80006b0:	4618      	mov	r0, r3
 80006b2:	f00f fa65 	bl	800fb80 <osEventFlagsSet>
}
 80006b6:	e00d      	b.n	80006d4 <HAL_TIM_OC_DelayElapsedCallback+0x50>
  else if (htim == &htim3)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	4a0b      	ldr	r2, [pc, #44]	; (80006e8 <HAL_TIM_OC_DelayElapsedCallback+0x64>)
 80006bc:	4293      	cmp	r3, r2
 80006be:	d106      	bne.n	80006ce <HAL_TIM_OC_DelayElapsedCallback+0x4a>
	  osEventFlagsSet(event_flags, HK_FLAG_ID);
 80006c0:	4b07      	ldr	r3, [pc, #28]	; (80006e0 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	2104      	movs	r1, #4
 80006c6:	4618      	mov	r0, r3
 80006c8:	f00f fa5a 	bl	800fb80 <osEventFlagsSet>
}
 80006cc:	e002      	b.n	80006d4 <HAL_TIM_OC_DelayElapsedCallback+0x50>
	  printf("Unknown Timer Interrupt\n");
 80006ce:	4807      	ldr	r0, [pc, #28]	; (80006ec <HAL_TIM_OC_DelayElapsedCallback+0x68>)
 80006d0:	f012 fe1a 	bl	8013308 <puts>
}
 80006d4:	bf00      	nop
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	240003bc 	.word	0x240003bc
 80006e0:	24000554 	.word	0x24000554
 80006e4:	24000408 	.word	0x24000408
 80006e8:	24000454 	.word	0x24000454
 80006ec:	0801409c 	.word	0x0801409c

080006f0 <HAL_UART_RxCpltCallback>:
 * toggling GPIO pins, starting or stopping timers, and other operations.
 *
 * @param huart Pointer to a UART_HandleTypeDef structure that contains
 *              the configuration information for the specified UART module.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80006f8:	2201      	movs	r2, #1
 80006fa:	4974      	ldr	r1, [pc, #464]	; (80008cc <HAL_UART_RxCpltCallback+0x1dc>)
 80006fc:	4874      	ldr	r0, [pc, #464]	; (80008d0 <HAL_UART_RxCpltCallback+0x1e0>)
 80006fe:	f00c fd55 	bl	800d1ac <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 8000702:	4b72      	ldr	r3, [pc, #456]	; (80008cc <HAL_UART_RxCpltCallback+0x1dc>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 8000708:	7bfb      	ldrb	r3, [r7, #15]
 800070a:	2b25      	cmp	r3, #37	; 0x25
 800070c:	f200 80da 	bhi.w	80008c4 <HAL_UART_RxCpltCallback+0x1d4>
 8000710:	a201      	add	r2, pc, #4	; (adr r2, 8000718 <HAL_UART_RxCpltCallback+0x28>)
 8000712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000716:	bf00      	nop
 8000718:	080007e9 	.word	0x080007e9
 800071c:	080007f9 	.word	0x080007f9
 8000720:	08000809 	.word	0x08000809
 8000724:	08000819 	.word	0x08000819
 8000728:	08000829 	.word	0x08000829
 800072c:	08000839 	.word	0x08000839
 8000730:	08000849 	.word	0x08000849
 8000734:	08000859 	.word	0x08000859
 8000738:	080008c5 	.word	0x080008c5
 800073c:	080008c5 	.word	0x080008c5
 8000740:	080007b9 	.word	0x080007b9
 8000744:	080007b1 	.word	0x080007b1
 8000748:	08000869 	.word	0x08000869
 800074c:	08000871 	.word	0x08000871
 8000750:	0800088d 	.word	0x0800088d
 8000754:	080008a9 	.word	0x080008a9
 8000758:	0800087f 	.word	0x0800087f
 800075c:	0800089b 	.word	0x0800089b
 8000760:	080008b7 	.word	0x080008b7
 8000764:	080007f1 	.word	0x080007f1
 8000768:	08000801 	.word	0x08000801
 800076c:	08000811 	.word	0x08000811
 8000770:	08000821 	.word	0x08000821
 8000774:	08000831 	.word	0x08000831
 8000778:	08000841 	.word	0x08000841
 800077c:	08000851 	.word	0x08000851
 8000780:	08000861 	.word	0x08000861
 8000784:	080007c1 	.word	0x080007c1
 8000788:	080007c9 	.word	0x080007c9
 800078c:	080007d1 	.word	0x080007d1
 8000790:	080008c5 	.word	0x080008c5
 8000794:	080008c5 	.word	0x080008c5
 8000798:	080008c5 	.word	0x080008c5
 800079c:	080008c5 	.word	0x080008c5
 80007a0:	080008c5 	.word	0x080008c5
 80007a4:	080008c5 	.word	0x080008c5
 80007a8:	080007d9 	.word	0x080007d9
 80007ac:	080007e1 	.word	0x080007e1
	case 0x0B: {
		printf("SDN1 ON\n");
 80007b0:	4848      	ldr	r0, [pc, #288]	; (80008d4 <HAL_UART_RxCpltCallback+0x1e4>)
 80007b2:	f012 fda9 	bl	8013308 <puts>
//		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
		break;
 80007b6:	e085      	b.n	80008c4 <HAL_UART_RxCpltCallback+0x1d4>
	}
	case 0x0A: {
		printf("SDN1 OFF\n");
 80007b8:	4847      	ldr	r0, [pc, #284]	; (80008d8 <HAL_UART_RxCpltCallback+0x1e8>)
 80007ba:	f012 fda5 	bl	8013308 <puts>
//		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
		break;
 80007be:	e081      	b.n	80008c4 <HAL_UART_RxCpltCallback+0x1d4>
	}
	case 0x1B: {
		printf("Step Up\n");
 80007c0:	4846      	ldr	r0, [pc, #280]	; (80008dc <HAL_UART_RxCpltCallback+0x1ec>)
 80007c2:	f012 fda1 	bl	8013308 <puts>
//		if (step < 17) {
//			step+=2;
//		}
		break;
 80007c6:	e07d      	b.n	80008c4 <HAL_UART_RxCpltCallback+0x1d4>
	}
	case 0x1C: {
		printf("Step Down\n");
 80007c8:	4845      	ldr	r0, [pc, #276]	; (80008e0 <HAL_UART_RxCpltCallback+0x1f0>)
 80007ca:	f012 fd9d 	bl	8013308 <puts>
//		if (step > 3) {
//			step-=2;
//		}
		break;
 80007ce:	e079      	b.n	80008c4 <HAL_UART_RxCpltCallback+0x1d4>
	}
	case 0x1D: {
		printf("Toggle AutoSweep\n");
 80007d0:	4844      	ldr	r0, [pc, #272]	; (80008e4 <HAL_UART_RxCpltCallback+0x1f4>)
 80007d2:	f012 fd99 	bl	8013308 <puts>
//			auto_sweep = 0;
//			HAL_TIM_Base_Stop(&htim2);
//
//			HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
//		}
		break;
 80007d6:	e075      	b.n	80008c4 <HAL_UART_RxCpltCallback+0x1d4>
	}
	case 0x24: {
		printf("Factor Up\n");
 80007d8:	4843      	ldr	r0, [pc, #268]	; (80008e8 <HAL_UART_RxCpltCallback+0x1f8>)
 80007da:	f012 fd95 	bl	8013308 <puts>
//		if (cadence <= 50000){
//			cadence *= 2;
//			TIM2->ARR = cadence;
//		}
		break;
 80007de:	e071      	b.n	80008c4 <HAL_UART_RxCpltCallback+0x1d4>
	}
	case 0x25: {
		printf("Factor Down\n");
 80007e0:	4842      	ldr	r0, [pc, #264]	; (80008ec <HAL_UART_RxCpltCallback+0x1fc>)
 80007e2:	f012 fd91 	bl	8013308 <puts>
//		if (cadence >= 6250){
//			cadence /= 2;
//			TIM2->ARR = cadence;
//		}
		break;
 80007e6:	e06d      	b.n	80008c4 <HAL_UART_RxCpltCallback+0x1d4>
	}
	case 0x00: {
		printf("SYS ON PB5\n");
 80007e8:	4841      	ldr	r0, [pc, #260]	; (80008f0 <HAL_UART_RxCpltCallback+0x200>)
 80007ea:	f012 fd8d 	bl	8013308 <puts>
//		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
		break;
 80007ee:	e069      	b.n	80008c4 <HAL_UART_RxCpltCallback+0x1d4>
	}
	case 0x13: {
		printf("SYS OFF PB5\n");
 80007f0:	4840      	ldr	r0, [pc, #256]	; (80008f4 <HAL_UART_RxCpltCallback+0x204>)
 80007f2:	f012 fd89 	bl	8013308 <puts>
//		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
		break;
 80007f6:	e065      	b.n	80008c4 <HAL_UART_RxCpltCallback+0x1d4>
	}
	case 0x01: {

		printf("800v ON PB6\n");
 80007f8:	483f      	ldr	r0, [pc, #252]	; (80008f8 <HAL_UART_RxCpltCallback+0x208>)
 80007fa:	f012 fd85 	bl	8013308 <puts>
//		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
		break;
 80007fe:	e061      	b.n	80008c4 <HAL_UART_RxCpltCallback+0x1d4>
	}
	case 0x14: {
		printf("800v OFF PB6\n");
 8000800:	483e      	ldr	r0, [pc, #248]	; (80008fc <HAL_UART_RxCpltCallback+0x20c>)
 8000802:	f012 fd81 	bl	8013308 <puts>
//		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
		break;
 8000806:	e05d      	b.n	80008c4 <HAL_UART_RxCpltCallback+0x1d4>
	}
	case 0x02: {
		printf("5v ON PC2\n");
 8000808:	483d      	ldr	r0, [pc, #244]	; (8000900 <HAL_UART_RxCpltCallback+0x210>)
 800080a:	f012 fd7d 	bl	8013308 <puts>
//		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
		break;
 800080e:	e059      	b.n	80008c4 <HAL_UART_RxCpltCallback+0x1d4>
	}
	case 0x15: {
		printf("5v OFF PC2\n");
 8000810:	483c      	ldr	r0, [pc, #240]	; (8000904 <HAL_UART_RxCpltCallback+0x214>)
 8000812:	f012 fd79 	bl	8013308 <puts>
//		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
		break;
 8000816:	e055      	b.n	80008c4 <HAL_UART_RxCpltCallback+0x1d4>
	}
	case 0x03: {
		printf("n200v ON PC13\n");
 8000818:	483b      	ldr	r0, [pc, #236]	; (8000908 <HAL_UART_RxCpltCallback+0x218>)
 800081a:	f012 fd75 	bl	8013308 <puts>
//		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
		break;
 800081e:	e051      	b.n	80008c4 <HAL_UART_RxCpltCallback+0x1d4>
	}
	case 0x16: {
		printf("n200v OFF PC13\n");
 8000820:	483a      	ldr	r0, [pc, #232]	; (800090c <HAL_UART_RxCpltCallback+0x21c>)
 8000822:	f012 fd71 	bl	8013308 <puts>
//		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
		break;
 8000826:	e04d      	b.n	80008c4 <HAL_UART_RxCpltCallback+0x1d4>
	}
	case 0x04: {
		printf("3v3 ON PC7\n");
 8000828:	4839      	ldr	r0, [pc, #228]	; (8000910 <HAL_UART_RxCpltCallback+0x220>)
 800082a:	f012 fd6d 	bl	8013308 <puts>
//		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
		break;
 800082e:	e049      	b.n	80008c4 <HAL_UART_RxCpltCallback+0x1d4>
	}
	case 0x17: {
		printf("3v3 OFF PC7\n");
 8000830:	4838      	ldr	r0, [pc, #224]	; (8000914 <HAL_UART_RxCpltCallback+0x224>)
 8000832:	f012 fd69 	bl	8013308 <puts>
//		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
		break;
 8000836:	e045      	b.n	80008c4 <HAL_UART_RxCpltCallback+0x1d4>
	}
	case 0x05: {
		printf("n5v ON PC8\n");
 8000838:	4837      	ldr	r0, [pc, #220]	; (8000918 <HAL_UART_RxCpltCallback+0x228>)
 800083a:	f012 fd65 	bl	8013308 <puts>
//		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
		break;
 800083e:	e041      	b.n	80008c4 <HAL_UART_RxCpltCallback+0x1d4>
	}
	case 0x18: {
		printf("n5v OFF PC8\n");
 8000840:	4836      	ldr	r0, [pc, #216]	; (800091c <HAL_UART_RxCpltCallback+0x22c>)
 8000842:	f012 fd61 	bl	8013308 <puts>
//		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
		break;
 8000846:	e03d      	b.n	80008c4 <HAL_UART_RxCpltCallback+0x1d4>
	}
	case 0x06: {
		printf("15v ON PC9\n");
 8000848:	4835      	ldr	r0, [pc, #212]	; (8000920 <HAL_UART_RxCpltCallback+0x230>)
 800084a:	f012 fd5d 	bl	8013308 <puts>
//		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
		break;
 800084e:	e039      	b.n	80008c4 <HAL_UART_RxCpltCallback+0x1d4>
	}
	case 0x19: {
		printf("15v OFF PC9\n");
 8000850:	4834      	ldr	r0, [pc, #208]	; (8000924 <HAL_UART_RxCpltCallback+0x234>)
 8000852:	f012 fd59 	bl	8013308 <puts>
//		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
		break;
 8000856:	e035      	b.n	80008c4 <HAL_UART_RxCpltCallback+0x1d4>
	}
	case 0x07: {
		printf("n3v3 ON PC6\n");
 8000858:	4833      	ldr	r0, [pc, #204]	; (8000928 <HAL_UART_RxCpltCallback+0x238>)
 800085a:	f012 fd55 	bl	8013308 <puts>
//		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
		break;
 800085e:	e031      	b.n	80008c4 <HAL_UART_RxCpltCallback+0x1d4>
	}
	case 0x1A: {
		printf("n3v3 OFF PC6\n");
 8000860:	4832      	ldr	r0, [pc, #200]	; (800092c <HAL_UART_RxCpltCallback+0x23c>)
 8000862:	f012 fd51 	bl	8013308 <puts>
//		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
		break;
 8000866:	e02d      	b.n	80008c4 <HAL_UART_RxCpltCallback+0x1d4>
	}
	case 0x0C: {
		printf("Enter STOP mode\n");
 8000868:	4831      	ldr	r0, [pc, #196]	; (8000930 <HAL_UART_RxCpltCallback+0x240>)
 800086a:	f012 fd4d 	bl	8013308 <puts>
//		HAL_SuspendTick();
//		HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
//		NVIC_SystemReset();
		break;
 800086e:	e029      	b.n	80008c4 <HAL_UART_RxCpltCallback+0x1d4>
	}
	case 0x0D: {
		printf("PMT ON\n");
 8000870:	4830      	ldr	r0, [pc, #192]	; (8000934 <HAL_UART_RxCpltCallback+0x244>)
 8000872:	f012 fd49 	bl	8013308 <puts>
		PMT_ON = 1;
 8000876:	4b30      	ldr	r3, [pc, #192]	; (8000938 <HAL_UART_RxCpltCallback+0x248>)
 8000878:	2201      	movs	r2, #1
 800087a:	701a      	strb	r2, [r3, #0]
		break;
 800087c:	e022      	b.n	80008c4 <HAL_UART_RxCpltCallback+0x1d4>
	}
	case 0x10: {
		printf("PMT OFF\n");
 800087e:	482f      	ldr	r0, [pc, #188]	; (800093c <HAL_UART_RxCpltCallback+0x24c>)
 8000880:	f012 fd42 	bl	8013308 <puts>
		PMT_ON = 0;
 8000884:	4b2c      	ldr	r3, [pc, #176]	; (8000938 <HAL_UART_RxCpltCallback+0x248>)
 8000886:	2200      	movs	r2, #0
 8000888:	701a      	strb	r2, [r3, #0]
		break;
 800088a:	e01b      	b.n	80008c4 <HAL_UART_RxCpltCallback+0x1d4>
	}
	case 0x0E: {
		printf("ERPA ON\n");
 800088c:	482c      	ldr	r0, [pc, #176]	; (8000940 <HAL_UART_RxCpltCallback+0x250>)
 800088e:	f012 fd3b 	bl	8013308 <puts>
		ERPA_ON = 1;
 8000892:	4b2c      	ldr	r3, [pc, #176]	; (8000944 <HAL_UART_RxCpltCallback+0x254>)
 8000894:	2201      	movs	r2, #1
 8000896:	701a      	strb	r2, [r3, #0]
		break;
 8000898:	e014      	b.n	80008c4 <HAL_UART_RxCpltCallback+0x1d4>
	}
	case 0x11: {
		printf("ERPA OFF\n");
 800089a:	482b      	ldr	r0, [pc, #172]	; (8000948 <HAL_UART_RxCpltCallback+0x258>)
 800089c:	f012 fd34 	bl	8013308 <puts>
		ERPA_ON = 0;
 80008a0:	4b28      	ldr	r3, [pc, #160]	; (8000944 <HAL_UART_RxCpltCallback+0x254>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	701a      	strb	r2, [r3, #0]
		break;
 80008a6:	e00d      	b.n	80008c4 <HAL_UART_RxCpltCallback+0x1d4>
	}
	case 0x0F: {
		printf("HK ON \n");
 80008a8:	4828      	ldr	r0, [pc, #160]	; (800094c <HAL_UART_RxCpltCallback+0x25c>)
 80008aa:	f012 fd2d 	bl	8013308 <puts>
		HK_ON = 1;
 80008ae:	4b28      	ldr	r3, [pc, #160]	; (8000950 <HAL_UART_RxCpltCallback+0x260>)
 80008b0:	2201      	movs	r2, #1
 80008b2:	701a      	strb	r2, [r3, #0]
		break;
 80008b4:	e006      	b.n	80008c4 <HAL_UART_RxCpltCallback+0x1d4>
	}
	case 0x12: {
		printf("HK OFF\n");
 80008b6:	4827      	ldr	r0, [pc, #156]	; (8000954 <HAL_UART_RxCpltCallback+0x264>)
 80008b8:	f012 fd26 	bl	8013308 <puts>
		HK_ON = 0;
 80008bc:	4b24      	ldr	r3, [pc, #144]	; (8000950 <HAL_UART_RxCpltCallback+0x260>)
 80008be:	2200      	movs	r2, #0
 80008c0:	701a      	strb	r2, [r3, #0]
		break;
 80008c2:	bf00      	nop
	}
	}
}
 80008c4:	bf00      	nop
 80008c6:	3710      	adds	r7, #16
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	24000558 	.word	0x24000558
 80008d0:	240004a0 	.word	0x240004a0
 80008d4:	080140b4 	.word	0x080140b4
 80008d8:	080140bc 	.word	0x080140bc
 80008dc:	080140c8 	.word	0x080140c8
 80008e0:	080140d0 	.word	0x080140d0
 80008e4:	080140dc 	.word	0x080140dc
 80008e8:	080140f0 	.word	0x080140f0
 80008ec:	080140fc 	.word	0x080140fc
 80008f0:	08014108 	.word	0x08014108
 80008f4:	08014114 	.word	0x08014114
 80008f8:	08014120 	.word	0x08014120
 80008fc:	0801412c 	.word	0x0801412c
 8000900:	0801413c 	.word	0x0801413c
 8000904:	08014148 	.word	0x08014148
 8000908:	08014154 	.word	0x08014154
 800090c:	08014164 	.word	0x08014164
 8000910:	08014174 	.word	0x08014174
 8000914:	08014180 	.word	0x08014180
 8000918:	0801418c 	.word	0x0801418c
 800091c:	08014198 	.word	0x08014198
 8000920:	080141a4 	.word	0x080141a4
 8000924:	080141b0 	.word	0x080141b0
 8000928:	080141bc 	.word	0x080141bc
 800092c:	080141c8 	.word	0x080141c8
 8000930:	080141d8 	.word	0x080141d8
 8000934:	080141e8 	.word	0x080141e8
 8000938:	2400054f 	.word	0x2400054f
 800093c:	080141f0 	.word	0x080141f0
 8000940:	080141f8 	.word	0x080141f8
 8000944:	24000550 	.word	0x24000550
 8000948:	08014200 	.word	0x08014200
 800094c:	0801420c 	.word	0x0801420c
 8000950:	24000551 	.word	0x24000551
 8000954:	08014214 	.word	0x08014214

08000958 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800095c:	f001 fffa 	bl	8002954 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000960:	f000 f88e 	bl	8000a80 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000964:	f000 f90a 	bl	8000b7c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000968:	f000 fda8 	bl	80014bc <MX_GPIO_Init>
  MX_DMA_Init();
 800096c:	f000 fd76 	bl	800145c <MX_DMA_Init>
  MX_TIM3_Init();
 8000970:	f000 fcda 	bl	8001328 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000974:	f000 fd26 	bl	80013c4 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000978:	f000 fb1a 	bl	8000fb0 <MX_I2C1_Init>
  MX_SPI2_Init();
 800097c:	f000 fb58 	bl	8001030 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000980:	f000 fc5c 	bl	800123c <MX_TIM2_Init>
  MX_TIM1_Init();
 8000984:	f000 fbac 	bl	80010e0 <MX_TIM1_Init>
  MX_ADC3_Init();
 8000988:	f000 fa4e 	bl	8000e28 <MX_ADC3_Init>
  MX_ADC1_Init();
 800098c:	f000 f926 	bl	8000bdc <MX_ADC1_Init>
  MX_DAC1_Init();
 8000990:	f000 fadc 	bl	8000f4c <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000994:	2100      	movs	r1, #0
 8000996:	4825      	ldr	r0, [pc, #148]	; (8000a2c <main+0xd4>)
 8000998:	f00a ffc4 	bl	800b924 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
 800099c:	2100      	movs	r1, #0
 800099e:	4824      	ldr	r0, [pc, #144]	; (8000a30 <main+0xd8>)
 80009a0:	f00a ffc0 	bl	800b924 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 80009a4:	2100      	movs	r1, #0
 80009a6:	4823      	ldr	r0, [pc, #140]	; (8000a34 <main+0xdc>)
 80009a8:	f00a ffbc 	bl	800b924 <HAL_TIM_OC_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80009ac:	f00e ff92 	bl	800f8d4 <osKernelInitialize>
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
  mid_MsgQueue = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(packet_t), NULL);
 80009b0:	2200      	movs	r2, #0
 80009b2:	2108      	movs	r1, #8
 80009b4:	2010      	movs	r0, #16
 80009b6:	f00f f98d 	bl	800fcd4 <osMessageQueueNew>
 80009ba:	4603      	mov	r3, r0
 80009bc:	4a1e      	ldr	r2, [pc, #120]	; (8000a38 <main+0xe0>)
 80009be:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 80009c0:	4a1e      	ldr	r2, [pc, #120]	; (8000a3c <main+0xe4>)
 80009c2:	2100      	movs	r1, #0
 80009c4:	481e      	ldr	r0, [pc, #120]	; (8000a40 <main+0xe8>)
 80009c6:	f00e ffcf 	bl	800f968 <osThreadNew>
 80009ca:	4603      	mov	r3, r0
 80009cc:	4a1d      	ldr	r2, [pc, #116]	; (8000a44 <main+0xec>)
 80009ce:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 80009d0:	4a1d      	ldr	r2, [pc, #116]	; (8000a48 <main+0xf0>)
 80009d2:	2100      	movs	r1, #0
 80009d4:	481d      	ldr	r0, [pc, #116]	; (8000a4c <main+0xf4>)
 80009d6:	f00e ffc7 	bl	800f968 <osThreadNew>
 80009da:	4603      	mov	r3, r0
 80009dc:	4a1c      	ldr	r2, [pc, #112]	; (8000a50 <main+0xf8>)
 80009de:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 80009e0:	4a1c      	ldr	r2, [pc, #112]	; (8000a54 <main+0xfc>)
 80009e2:	2100      	movs	r1, #0
 80009e4:	481c      	ldr	r0, [pc, #112]	; (8000a58 <main+0x100>)
 80009e6:	f00e ffbf 	bl	800f968 <osThreadNew>
 80009ea:	4603      	mov	r3, r0
 80009ec:	4a1b      	ldr	r2, [pc, #108]	; (8000a5c <main+0x104>)
 80009ee:	6013      	str	r3, [r2, #0]

  /* creation of UART_RX_task */
  UART_RX_taskHandle = osThreadNew(UART_RX_init, NULL, &UART_RX_task_attributes);
 80009f0:	4a1b      	ldr	r2, [pc, #108]	; (8000a60 <main+0x108>)
 80009f2:	2100      	movs	r1, #0
 80009f4:	481b      	ldr	r0, [pc, #108]	; (8000a64 <main+0x10c>)
 80009f6:	f00e ffb7 	bl	800f968 <osThreadNew>
 80009fa:	4603      	mov	r3, r0
 80009fc:	4a1a      	ldr	r2, [pc, #104]	; (8000a68 <main+0x110>)
 80009fe:	6013      	str	r3, [r2, #0]

  /* creation of UART_TX_task */
  UART_TX_taskHandle = osThreadNew(UART_TX_init, NULL, &UART_TX_task_attributes);
 8000a00:	4a1a      	ldr	r2, [pc, #104]	; (8000a6c <main+0x114>)
 8000a02:	2100      	movs	r1, #0
 8000a04:	481a      	ldr	r0, [pc, #104]	; (8000a70 <main+0x118>)
 8000a06:	f00e ffaf 	bl	800f968 <osThreadNew>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	4a19      	ldr	r2, [pc, #100]	; (8000a74 <main+0x11c>)
 8000a0e:	6013      	str	r3, [r2, #0]
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  event_flags = osEventFlagsNew(NULL);
 8000a10:	2000      	movs	r0, #0
 8000a12:	f00f f876 	bl	800fb02 <osEventFlagsNew>
 8000a16:	4603      	mov	r3, r0
 8000a18:	4a17      	ldr	r2, [pc, #92]	; (8000a78 <main+0x120>)
 8000a1a:	6013      	str	r3, [r2, #0]
  system_setup();
 8000a1c:	f000 fdb8 	bl	8001590 <system_setup>
  printf("Starting kernal...\n");
 8000a20:	4816      	ldr	r0, [pc, #88]	; (8000a7c <main+0x124>)
 8000a22:	f012 fc71 	bl	8013308 <puts>
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000a26:	f00e ff79 	bl	800f91c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000a2a:	e7fe      	b.n	8000a2a <main+0xd2>
 8000a2c:	240003bc 	.word	0x240003bc
 8000a30:	24000408 	.word	0x24000408
 8000a34:	24000454 	.word	0x24000454
 8000a38:	24000548 	.word	0x24000548
 8000a3c:	08014280 	.word	0x08014280
 8000a40:	08001b2d 	.word	0x08001b2d
 8000a44:	24000534 	.word	0x24000534
 8000a48:	080142a4 	.word	0x080142a4
 8000a4c:	08001b71 	.word	0x08001b71
 8000a50:	24000538 	.word	0x24000538
 8000a54:	080142c8 	.word	0x080142c8
 8000a58:	08001bb5 	.word	0x08001bb5
 8000a5c:	2400053c 	.word	0x2400053c
 8000a60:	080142ec 	.word	0x080142ec
 8000a64:	08001bf9 	.word	0x08001bf9
 8000a68:	24000540 	.word	0x24000540
 8000a6c:	08014310 	.word	0x08014310
 8000a70:	08001c1d 	.word	0x08001c1d
 8000a74:	24000544 	.word	0x24000544
 8000a78:	24000554 	.word	0x24000554
 8000a7c:	0801421c 	.word	0x0801421c

08000a80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b09c      	sub	sp, #112	; 0x70
 8000a84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a8a:	224c      	movs	r2, #76	; 0x4c
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f012 facc 	bl	801302c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a94:	1d3b      	adds	r3, r7, #4
 8000a96:	2220      	movs	r2, #32
 8000a98:	2100      	movs	r1, #0
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f012 fac6 	bl	801302c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000aa0:	2002      	movs	r0, #2
 8000aa2:	f006 ffd1 	bl	8007a48 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	603b      	str	r3, [r7, #0]
 8000aaa:	4b32      	ldr	r3, [pc, #200]	; (8000b74 <SystemClock_Config+0xf4>)
 8000aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aae:	4a31      	ldr	r2, [pc, #196]	; (8000b74 <SystemClock_Config+0xf4>)
 8000ab0:	f023 0301 	bic.w	r3, r3, #1
 8000ab4:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000ab6:	4b2f      	ldr	r3, [pc, #188]	; (8000b74 <SystemClock_Config+0xf4>)
 8000ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	603b      	str	r3, [r7, #0]
 8000ac0:	4b2d      	ldr	r3, [pc, #180]	; (8000b78 <SystemClock_Config+0xf8>)
 8000ac2:	699b      	ldr	r3, [r3, #24]
 8000ac4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ac8:	4a2b      	ldr	r2, [pc, #172]	; (8000b78 <SystemClock_Config+0xf8>)
 8000aca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ace:	6193      	str	r3, [r2, #24]
 8000ad0:	4b29      	ldr	r3, [pc, #164]	; (8000b78 <SystemClock_Config+0xf8>)
 8000ad2:	699b      	ldr	r3, [r3, #24]
 8000ad4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ad8:	603b      	str	r3, [r7, #0]
 8000ada:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000adc:	bf00      	nop
 8000ade:	4b26      	ldr	r3, [pc, #152]	; (8000b78 <SystemClock_Config+0xf8>)
 8000ae0:	699b      	ldr	r3, [r3, #24]
 8000ae2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ae6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000aea:	d1f8      	bne.n	8000ade <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000aec:	2302      	movs	r3, #2
 8000aee:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000af0:	2301      	movs	r3, #1
 8000af2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000af4:	2340      	movs	r3, #64	; 0x40
 8000af6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000af8:	2302      	movs	r3, #2
 8000afa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000afc:	2300      	movs	r3, #0
 8000afe:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b00:	2304      	movs	r3, #4
 8000b02:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 9;
 8000b04:	2309      	movs	r3, #9
 8000b06:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b10:	2302      	movs	r3, #2
 8000b12:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b14:	230c      	movs	r3, #12
 8000b16:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 8000b1c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000b20:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b26:	4618      	mov	r0, r3
 8000b28:	f006 ffc8 	bl	8007abc <HAL_RCC_OscConfig>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000b32:	f001 f8b3 	bl	8001c9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b36:	233f      	movs	r3, #63	; 0x3f
 8000b38:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000b42:	2300      	movs	r3, #0
 8000b44:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000b46:	2300      	movs	r3, #0
 8000b48:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b4a:	2340      	movs	r3, #64	; 0x40
 8000b4c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b52:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000b54:	2300      	movs	r3, #0
 8000b56:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b58:	1d3b      	adds	r3, r7, #4
 8000b5a:	2101      	movs	r1, #1
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f007 fc07 	bl	8008370 <HAL_RCC_ClockConfig>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <SystemClock_Config+0xec>
  {
    Error_Handler();
 8000b68:	f001 f898 	bl	8001c9c <Error_Handler>
  }
}
 8000b6c:	bf00      	nop
 8000b6e:	3770      	adds	r7, #112	; 0x70
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	58000400 	.word	0x58000400
 8000b78:	58024800 	.word	0x58024800

08000b7c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b0b0      	sub	sp, #192	; 0xc0
 8000b80:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b82:	463b      	mov	r3, r7
 8000b84:	22c0      	movs	r2, #192	; 0xc0
 8000b86:	2100      	movs	r1, #0
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f012 fa4f 	bl	801302c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b8e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000b92:	f04f 0300 	mov.w	r3, #0
 8000b96:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000b9a:	2304      	movs	r3, #4
 8000b9c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 8000b9e:	2309      	movs	r3, #9
 8000ba0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8000ba2:	2304      	movs	r3, #4
 8000ba4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000baa:	2302      	movs	r3, #2
 8000bac:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000bae:	23c0      	movs	r3, #192	; 0xc0
 8000bb0:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000bb2:	2320      	movs	r3, #32
 8000bb4:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 8000bb6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000bba:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bc2:	463b      	mov	r3, r7
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f007 ffa1 	bl	8008b0c <HAL_RCCEx_PeriphCLKConfig>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 8000bd0:	f001 f864 	bl	8001c9c <Error_Handler>
  }
}
 8000bd4:	bf00      	nop
 8000bd6:	37c0      	adds	r7, #192	; 0xc0
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08a      	sub	sp, #40	; 0x28
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000be2:	f107 031c 	add.w	r3, r7, #28
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	605a      	str	r2, [r3, #4]
 8000bec:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000bee:	463b      	mov	r3, r7
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
 8000bfc:	615a      	str	r2, [r3, #20]
 8000bfe:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c00:	4b7c      	ldr	r3, [pc, #496]	; (8000df4 <MX_ADC1_Init+0x218>)
 8000c02:	4a7d      	ldr	r2, [pc, #500]	; (8000df8 <MX_ADC1_Init+0x21c>)
 8000c04:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000c06:	4b7b      	ldr	r3, [pc, #492]	; (8000df4 <MX_ADC1_Init+0x218>)
 8000c08:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000c0c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c0e:	4b79      	ldr	r3, [pc, #484]	; (8000df4 <MX_ADC1_Init+0x218>)
 8000c10:	2208      	movs	r2, #8
 8000c12:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000c14:	4b77      	ldr	r3, [pc, #476]	; (8000df4 <MX_ADC1_Init+0x218>)
 8000c16:	2201      	movs	r2, #1
 8000c18:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c1a:	4b76      	ldr	r3, [pc, #472]	; (8000df4 <MX_ADC1_Init+0x218>)
 8000c1c:	2204      	movs	r2, #4
 8000c1e:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c20:	4b74      	ldr	r3, [pc, #464]	; (8000df4 <MX_ADC1_Init+0x218>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000c26:	4b73      	ldr	r3, [pc, #460]	; (8000df4 <MX_ADC1_Init+0x218>)
 8000c28:	2201      	movs	r2, #1
 8000c2a:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 8000c2c:	4b71      	ldr	r3, [pc, #452]	; (8000df4 <MX_ADC1_Init+0x218>)
 8000c2e:	220b      	movs	r2, #11
 8000c30:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c32:	4b70      	ldr	r3, [pc, #448]	; (8000df4 <MX_ADC1_Init+0x218>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c38:	4b6e      	ldr	r3, [pc, #440]	; (8000df4 <MX_ADC1_Init+0x218>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c3e:	4b6d      	ldr	r3, [pc, #436]	; (8000df4 <MX_ADC1_Init+0x218>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000c44:	4b6b      	ldr	r3, [pc, #428]	; (8000df4 <MX_ADC1_Init+0x218>)
 8000c46:	2203      	movs	r2, #3
 8000c48:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000c4a:	4b6a      	ldr	r3, [pc, #424]	; (8000df4 <MX_ADC1_Init+0x218>)
 8000c4c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c50:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000c52:	4b68      	ldr	r3, [pc, #416]	; (8000df4 <MX_ADC1_Init+0x218>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000c58:	4b66      	ldr	r3, [pc, #408]	; (8000df4 <MX_ADC1_Init+0x218>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c60:	4864      	ldr	r0, [pc, #400]	; (8000df4 <MX_ADC1_Init+0x218>)
 8000c62:	f002 f903 	bl	8002e6c <HAL_ADC_Init>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000c6c:	f001 f816 	bl	8001c9c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000c70:	2300      	movs	r3, #0
 8000c72:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000c74:	f107 031c 	add.w	r3, r7, #28
 8000c78:	4619      	mov	r1, r3
 8000c7a:	485e      	ldr	r0, [pc, #376]	; (8000df4 <MX_ADC1_Init+0x218>)
 8000c7c:	f003 fa1e 	bl	80040bc <HAL_ADCEx_MultiModeConfigChannel>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000c86:	f001 f809 	bl	8001c9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000c8a:	4b5c      	ldr	r3, [pc, #368]	; (8000dfc <MX_ADC1_Init+0x220>)
 8000c8c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c8e:	2306      	movs	r3, #6
 8000c90:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8000c92:	2307      	movs	r3, #7
 8000c94:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c96:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000c9a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c9c:	2304      	movs	r3, #4
 8000c9e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ca8:	463b      	mov	r3, r7
 8000caa:	4619      	mov	r1, r3
 8000cac:	4851      	ldr	r0, [pc, #324]	; (8000df4 <MX_ADC1_Init+0x218>)
 8000cae:	f002 fb61 	bl	8003374 <HAL_ADC_ConfigChannel>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8000cb8:	f000 fff0 	bl	8001c9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000cbc:	4b50      	ldr	r3, [pc, #320]	; (8000e00 <MX_ADC1_Init+0x224>)
 8000cbe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000cc0:	230c      	movs	r3, #12
 8000cc2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cc4:	463b      	mov	r3, r7
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	484a      	ldr	r0, [pc, #296]	; (8000df4 <MX_ADC1_Init+0x218>)
 8000cca:	f002 fb53 	bl	8003374 <HAL_ADC_ConfigChannel>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8000cd4:	f000 ffe2 	bl	8001c9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000cd8:	4b4a      	ldr	r3, [pc, #296]	; (8000e04 <MX_ADC1_Init+0x228>)
 8000cda:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000cdc:	2312      	movs	r3, #18
 8000cde:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ce0:	463b      	mov	r3, r7
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4843      	ldr	r0, [pc, #268]	; (8000df4 <MX_ADC1_Init+0x218>)
 8000ce6:	f002 fb45 	bl	8003374 <HAL_ADC_ConfigChannel>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 8000cf0:	f000 ffd4 	bl	8001c9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000cf4:	4b44      	ldr	r3, [pc, #272]	; (8000e08 <MX_ADC1_Init+0x22c>)
 8000cf6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000cf8:	2318      	movs	r3, #24
 8000cfa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cfc:	463b      	mov	r3, r7
 8000cfe:	4619      	mov	r1, r3
 8000d00:	483c      	ldr	r0, [pc, #240]	; (8000df4 <MX_ADC1_Init+0x218>)
 8000d02:	f002 fb37 	bl	8003374 <HAL_ADC_ConfigChannel>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8000d0c:	f000 ffc6 	bl	8001c9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000d10:	4b3e      	ldr	r3, [pc, #248]	; (8000e0c <MX_ADC1_Init+0x230>)
 8000d12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000d14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d18:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d1a:	463b      	mov	r3, r7
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4835      	ldr	r0, [pc, #212]	; (8000df4 <MX_ADC1_Init+0x218>)
 8000d20:	f002 fb28 	bl	8003374 <HAL_ADC_ConfigChannel>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8000d2a:	f000 ffb7 	bl	8001c9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000d2e:	4b38      	ldr	r3, [pc, #224]	; (8000e10 <MX_ADC1_Init+0x234>)
 8000d30:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000d32:	f44f 7383 	mov.w	r3, #262	; 0x106
 8000d36:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d38:	463b      	mov	r3, r7
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	482d      	ldr	r0, [pc, #180]	; (8000df4 <MX_ADC1_Init+0x218>)
 8000d3e:	f002 fb19 	bl	8003374 <HAL_ADC_ConfigChannel>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8000d48:	f000 ffa8 	bl	8001c9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000d4c:	4b31      	ldr	r3, [pc, #196]	; (8000e14 <MX_ADC1_Init+0x238>)
 8000d4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000d50:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8000d54:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d56:	463b      	mov	r3, r7
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4826      	ldr	r0, [pc, #152]	; (8000df4 <MX_ADC1_Init+0x218>)
 8000d5c:	f002 fb0a 	bl	8003374 <HAL_ADC_ConfigChannel>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 8000d66:	f000 ff99 	bl	8001c9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000d6a:	4b2b      	ldr	r3, [pc, #172]	; (8000e18 <MX_ADC1_Init+0x23c>)
 8000d6c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000d6e:	f44f 7389 	mov.w	r3, #274	; 0x112
 8000d72:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d74:	463b      	mov	r3, r7
 8000d76:	4619      	mov	r1, r3
 8000d78:	481e      	ldr	r0, [pc, #120]	; (8000df4 <MX_ADC1_Init+0x218>)
 8000d7a:	f002 fafb 	bl	8003374 <HAL_ADC_ConfigChannel>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 8000d84:	f000 ff8a 	bl	8001c9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000d88:	4b24      	ldr	r3, [pc, #144]	; (8000e1c <MX_ADC1_Init+0x240>)
 8000d8a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000d8c:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000d90:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d92:	463b      	mov	r3, r7
 8000d94:	4619      	mov	r1, r3
 8000d96:	4817      	ldr	r0, [pc, #92]	; (8000df4 <MX_ADC1_Init+0x218>)
 8000d98:	f002 faec 	bl	8003374 <HAL_ADC_ConfigChannel>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 8000da2:	f000 ff7b 	bl	8001c9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000da6:	4b1e      	ldr	r3, [pc, #120]	; (8000e20 <MX_ADC1_Init+0x244>)
 8000da8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000daa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000db0:	2300      	movs	r3, #0
 8000db2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000db4:	463b      	mov	r3, r7
 8000db6:	4619      	mov	r1, r3
 8000db8:	480e      	ldr	r0, [pc, #56]	; (8000df4 <MX_ADC1_Init+0x218>)
 8000dba:	f002 fadb 	bl	8003374 <HAL_ADC_ConfigChannel>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_ADC1_Init+0x1ec>
  {
    Error_Handler();
 8000dc4:	f000 ff6a 	bl	8001c9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8000dc8:	4b16      	ldr	r3, [pc, #88]	; (8000e24 <MX_ADC1_Init+0x248>)
 8000dca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8000dcc:	f240 2306 	movw	r3, #518	; 0x206
 8000dd0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8000dd2:	2307      	movs	r3, #7
 8000dd4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dd6:	463b      	mov	r3, r7
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4806      	ldr	r0, [pc, #24]	; (8000df4 <MX_ADC1_Init+0x218>)
 8000ddc:	f002 faca 	bl	8003374 <HAL_ADC_ConfigChannel>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_ADC1_Init+0x20e>
  {
    Error_Handler();
 8000de6:	f000 ff59 	bl	8001c9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000dea:	bf00      	nop
 8000dec:	3728      	adds	r7, #40	; 0x28
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	2400009c 	.word	0x2400009c
 8000df8:	40022000 	.word	0x40022000
 8000dfc:	0c900008 	.word	0x0c900008
 8000e00:	10c00010 	.word	0x10c00010
 8000e04:	14f00020 	.word	0x14f00020
 8000e08:	1d500080 	.word	0x1d500080
 8000e0c:	21800100 	.word	0x21800100
 8000e10:	25b00200 	.word	0x25b00200
 8000e14:	2a000400 	.word	0x2a000400
 8000e18:	2e300800 	.word	0x2e300800
 8000e1c:	3ac04000 	.word	0x3ac04000
 8000e20:	3ef08000 	.word	0x3ef08000
 8000e24:	47520000 	.word	0x47520000

08000e28 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b088      	sub	sp, #32
 8000e2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e2e:	1d3b      	adds	r3, r7, #4
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
 8000e36:	609a      	str	r2, [r3, #8]
 8000e38:	60da      	str	r2, [r3, #12]
 8000e3a:	611a      	str	r2, [r3, #16]
 8000e3c:	615a      	str	r2, [r3, #20]
 8000e3e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000e40:	4b3d      	ldr	r3, [pc, #244]	; (8000f38 <MX_ADC3_Init+0x110>)
 8000e42:	4a3e      	ldr	r2, [pc, #248]	; (8000f3c <MX_ADC3_Init+0x114>)
 8000e44:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000e46:	4b3c      	ldr	r3, [pc, #240]	; (8000f38 <MX_ADC3_Init+0x110>)
 8000e48:	2208      	movs	r2, #8
 8000e4a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000e4c:	4b3a      	ldr	r3, [pc, #232]	; (8000f38 <MX_ADC3_Init+0x110>)
 8000e4e:	2201      	movs	r2, #1
 8000e50:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e52:	4b39      	ldr	r3, [pc, #228]	; (8000f38 <MX_ADC3_Init+0x110>)
 8000e54:	2204      	movs	r2, #4
 8000e56:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000e58:	4b37      	ldr	r3, [pc, #220]	; (8000f38 <MX_ADC3_Init+0x110>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000e5e:	4b36      	ldr	r3, [pc, #216]	; (8000f38 <MX_ADC3_Init+0x110>)
 8000e60:	2201      	movs	r2, #1
 8000e62:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 8000e64:	4b34      	ldr	r3, [pc, #208]	; (8000f38 <MX_ADC3_Init+0x110>)
 8000e66:	2204      	movs	r2, #4
 8000e68:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000e6a:	4b33      	ldr	r3, [pc, #204]	; (8000f38 <MX_ADC3_Init+0x110>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e70:	4b31      	ldr	r3, [pc, #196]	; (8000f38 <MX_ADC3_Init+0x110>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e76:	4b30      	ldr	r3, [pc, #192]	; (8000f38 <MX_ADC3_Init+0x110>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000e7c:	4b2e      	ldr	r3, [pc, #184]	; (8000f38 <MX_ADC3_Init+0x110>)
 8000e7e:	2203      	movs	r2, #3
 8000e80:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000e82:	4b2d      	ldr	r3, [pc, #180]	; (8000f38 <MX_ADC3_Init+0x110>)
 8000e84:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e88:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000e8a:	4b2b      	ldr	r3, [pc, #172]	; (8000f38 <MX_ADC3_Init+0x110>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000e90:	4b29      	ldr	r3, [pc, #164]	; (8000f38 <MX_ADC3_Init+0x110>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000e98:	4827      	ldr	r0, [pc, #156]	; (8000f38 <MX_ADC3_Init+0x110>)
 8000e9a:	f001 ffe7 	bl	8002e6c <HAL_ADC_Init>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 8000ea4:	f000 fefa 	bl	8001c9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000ea8:	4b25      	ldr	r3, [pc, #148]	; (8000f40 <MX_ADC3_Init+0x118>)
 8000eaa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000eac:	2306      	movs	r3, #6
 8000eae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8000eb0:	2307      	movs	r3, #7
 8000eb2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000eb4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000eb8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000eba:	2304      	movs	r3, #4
 8000ebc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000ec6:	1d3b      	adds	r3, r7, #4
 8000ec8:	4619      	mov	r1, r3
 8000eca:	481b      	ldr	r0, [pc, #108]	; (8000f38 <MX_ADC3_Init+0x110>)
 8000ecc:	f002 fa52 	bl	8003374 <HAL_ADC_ConfigChannel>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 8000ed6:	f000 fee1 	bl	8001c9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000eda:	4b1a      	ldr	r3, [pc, #104]	; (8000f44 <MX_ADC3_Init+0x11c>)
 8000edc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000ede:	230c      	movs	r3, #12
 8000ee0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000ee2:	1d3b      	adds	r3, r7, #4
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4814      	ldr	r0, [pc, #80]	; (8000f38 <MX_ADC3_Init+0x110>)
 8000ee8:	f002 fa44 	bl	8003374 <HAL_ADC_ConfigChannel>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 8000ef2:	f000 fed3 	bl	8001c9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000efa:	2312      	movs	r3, #18
 8000efc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000efe:	1d3b      	adds	r3, r7, #4
 8000f00:	4619      	mov	r1, r3
 8000f02:	480d      	ldr	r0, [pc, #52]	; (8000f38 <MX_ADC3_Init+0x110>)
 8000f04:	f002 fa36 	bl	8003374 <HAL_ADC_ConfigChannel>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 8000f0e:	f000 fec5 	bl	8001c9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f12:	4b0d      	ldr	r3, [pc, #52]	; (8000f48 <MX_ADC3_Init+0x120>)
 8000f14:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000f16:	2318      	movs	r3, #24
 8000f18:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000f1a:	1d3b      	adds	r3, r7, #4
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4806      	ldr	r0, [pc, #24]	; (8000f38 <MX_ADC3_Init+0x110>)
 8000f20:	f002 fa28 	bl	8003374 <HAL_ADC_ConfigChannel>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 8000f2a:	f000 feb7 	bl	8001c9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000f2e:	bf00      	nop
 8000f30:	3720      	adds	r7, #32
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	24000100 	.word	0x24000100
 8000f3c:	58026000 	.word	0x58026000
 8000f40:	cb840000 	.word	0xcb840000
 8000f44:	cfb80000 	.word	0xcfb80000
 8000f48:	04300002 	.word	0x04300002

08000f4c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b08a      	sub	sp, #40	; 0x28
 8000f50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000f52:	1d3b      	adds	r3, r7, #4
 8000f54:	2224      	movs	r2, #36	; 0x24
 8000f56:	2100      	movs	r1, #0
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f012 f867 	bl	801302c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000f5e:	4b12      	ldr	r3, [pc, #72]	; (8000fa8 <MX_DAC1_Init+0x5c>)
 8000f60:	4a12      	ldr	r2, [pc, #72]	; (8000fac <MX_DAC1_Init+0x60>)
 8000f62:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000f64:	4810      	ldr	r0, [pc, #64]	; (8000fa8 <MX_DAC1_Init+0x5c>)
 8000f66:	f003 fa67 	bl	8004438 <HAL_DAC_Init>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000f70:	f000 fe94 	bl	8001c9c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000f74:	2300      	movs	r3, #0
 8000f76:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000f78:	230a      	movs	r3, #10
 8000f7a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000f80:	2301      	movs	r3, #1
 8000f82:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000f84:	2300      	movs	r3, #0
 8000f86:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000f88:	1d3b      	adds	r3, r7, #4
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4806      	ldr	r0, [pc, #24]	; (8000fa8 <MX_DAC1_Init+0x5c>)
 8000f90:	f003 fad4 	bl	800453c <HAL_DAC_ConfigChannel>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000f9a:	f000 fe7f 	bl	8001c9c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000f9e:	bf00      	nop
 8000fa0:	3728      	adds	r7, #40	; 0x28
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	24000254 	.word	0x24000254
 8000fac:	40007400 	.word	0x40007400

08000fb0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fb4:	4b1b      	ldr	r3, [pc, #108]	; (8001024 <MX_I2C1_Init+0x74>)
 8000fb6:	4a1c      	ldr	r2, [pc, #112]	; (8001028 <MX_I2C1_Init+0x78>)
 8000fb8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000fba:	4b1a      	ldr	r3, [pc, #104]	; (8001024 <MX_I2C1_Init+0x74>)
 8000fbc:	4a1b      	ldr	r2, [pc, #108]	; (800102c <MX_I2C1_Init+0x7c>)
 8000fbe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000fc0:	4b18      	ldr	r3, [pc, #96]	; (8001024 <MX_I2C1_Init+0x74>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fc6:	4b17      	ldr	r3, [pc, #92]	; (8001024 <MX_I2C1_Init+0x74>)
 8000fc8:	2201      	movs	r2, #1
 8000fca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fcc:	4b15      	ldr	r3, [pc, #84]	; (8001024 <MX_I2C1_Init+0x74>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000fd2:	4b14      	ldr	r3, [pc, #80]	; (8001024 <MX_I2C1_Init+0x74>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fd8:	4b12      	ldr	r3, [pc, #72]	; (8001024 <MX_I2C1_Init+0x74>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fde:	4b11      	ldr	r3, [pc, #68]	; (8001024 <MX_I2C1_Init+0x74>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fe4:	4b0f      	ldr	r3, [pc, #60]	; (8001024 <MX_I2C1_Init+0x74>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fea:	480e      	ldr	r0, [pc, #56]	; (8001024 <MX_I2C1_Init+0x74>)
 8000fec:	f006 fbf8 	bl	80077e0 <HAL_I2C_Init>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ff6:	f000 fe51 	bl	8001c9c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	4809      	ldr	r0, [pc, #36]	; (8001024 <MX_I2C1_Init+0x74>)
 8000ffe:	f006 fc8b 	bl	8007918 <HAL_I2CEx_ConfigAnalogFilter>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001008:	f000 fe48 	bl	8001c9c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800100c:	2100      	movs	r1, #0
 800100e:	4805      	ldr	r0, [pc, #20]	; (8001024 <MX_I2C1_Init+0x74>)
 8001010:	f006 fccd 	bl	80079ae <HAL_I2CEx_ConfigDigitalFilter>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800101a:	f000 fe3f 	bl	8001c9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	240002e0 	.word	0x240002e0
 8001028:	40005400 	.word	0x40005400
 800102c:	00707cbb 	.word	0x00707cbb

08001030 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001034:	4b28      	ldr	r3, [pc, #160]	; (80010d8 <MX_SPI2_Init+0xa8>)
 8001036:	4a29      	ldr	r2, [pc, #164]	; (80010dc <MX_SPI2_Init+0xac>)
 8001038:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800103a:	4b27      	ldr	r3, [pc, #156]	; (80010d8 <MX_SPI2_Init+0xa8>)
 800103c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001040:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001042:	4b25      	ldr	r3, [pc, #148]	; (80010d8 <MX_SPI2_Init+0xa8>)
 8001044:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001048:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800104a:	4b23      	ldr	r3, [pc, #140]	; (80010d8 <MX_SPI2_Init+0xa8>)
 800104c:	220f      	movs	r2, #15
 800104e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001050:	4b21      	ldr	r3, [pc, #132]	; (80010d8 <MX_SPI2_Init+0xa8>)
 8001052:	2200      	movs	r2, #0
 8001054:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001056:	4b20      	ldr	r3, [pc, #128]	; (80010d8 <MX_SPI2_Init+0xa8>)
 8001058:	2200      	movs	r2, #0
 800105a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800105c:	4b1e      	ldr	r3, [pc, #120]	; (80010d8 <MX_SPI2_Init+0xa8>)
 800105e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001062:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001064:	4b1c      	ldr	r3, [pc, #112]	; (80010d8 <MX_SPI2_Init+0xa8>)
 8001066:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800106a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800106c:	4b1a      	ldr	r3, [pc, #104]	; (80010d8 <MX_SPI2_Init+0xa8>)
 800106e:	2200      	movs	r2, #0
 8001070:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001072:	4b19      	ldr	r3, [pc, #100]	; (80010d8 <MX_SPI2_Init+0xa8>)
 8001074:	2200      	movs	r2, #0
 8001076:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001078:	4b17      	ldr	r3, [pc, #92]	; (80010d8 <MX_SPI2_Init+0xa8>)
 800107a:	2200      	movs	r2, #0
 800107c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800107e:	4b16      	ldr	r3, [pc, #88]	; (80010d8 <MX_SPI2_Init+0xa8>)
 8001080:	2200      	movs	r2, #0
 8001082:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001084:	4b14      	ldr	r3, [pc, #80]	; (80010d8 <MX_SPI2_Init+0xa8>)
 8001086:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800108a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800108c:	4b12      	ldr	r3, [pc, #72]	; (80010d8 <MX_SPI2_Init+0xa8>)
 800108e:	2200      	movs	r2, #0
 8001090:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001092:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <MX_SPI2_Init+0xa8>)
 8001094:	2200      	movs	r2, #0
 8001096:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001098:	4b0f      	ldr	r3, [pc, #60]	; (80010d8 <MX_SPI2_Init+0xa8>)
 800109a:	2200      	movs	r2, #0
 800109c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800109e:	4b0e      	ldr	r3, [pc, #56]	; (80010d8 <MX_SPI2_Init+0xa8>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80010a4:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <MX_SPI2_Init+0xa8>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80010aa:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <MX_SPI2_Init+0xa8>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80010b0:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <MX_SPI2_Init+0xa8>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80010b6:	4b08      	ldr	r3, [pc, #32]	; (80010d8 <MX_SPI2_Init+0xa8>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80010bc:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <MX_SPI2_Init+0xa8>)
 80010be:	2200      	movs	r2, #0
 80010c0:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80010c2:	4805      	ldr	r0, [pc, #20]	; (80010d8 <MX_SPI2_Init+0xa8>)
 80010c4:	f00a fa20 	bl	800b508 <HAL_SPI_Init>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 80010ce:	f000 fde5 	bl	8001c9c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	24000334 	.word	0x24000334
 80010dc:	40003800 	.word	0x40003800

080010e0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b09a      	sub	sp, #104	; 0x68
 80010e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010e6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	605a      	str	r2, [r3, #4]
 80010f0:	609a      	str	r2, [r3, #8]
 80010f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010f4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001100:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]
 8001110:	615a      	str	r2, [r3, #20]
 8001112:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001114:	1d3b      	adds	r3, r7, #4
 8001116:	222c      	movs	r2, #44	; 0x2c
 8001118:	2100      	movs	r1, #0
 800111a:	4618      	mov	r0, r3
 800111c:	f011 ff86 	bl	801302c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001120:	4b44      	ldr	r3, [pc, #272]	; (8001234 <MX_TIM1_Init+0x154>)
 8001122:	4a45      	ldr	r2, [pc, #276]	; (8001238 <MX_TIM1_Init+0x158>)
 8001124:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 128-1;
 8001126:	4b43      	ldr	r3, [pc, #268]	; (8001234 <MX_TIM1_Init+0x154>)
 8001128:	227f      	movs	r2, #127	; 0x7f
 800112a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800112c:	4b41      	ldr	r3, [pc, #260]	; (8001234 <MX_TIM1_Init+0x154>)
 800112e:	2200      	movs	r2, #0
 8001130:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 8001132:	4b40      	ldr	r3, [pc, #256]	; (8001234 <MX_TIM1_Init+0x154>)
 8001134:	f24f 4223 	movw	r2, #62499	; 0xf423
 8001138:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800113a:	4b3e      	ldr	r3, [pc, #248]	; (8001234 <MX_TIM1_Init+0x154>)
 800113c:	2200      	movs	r2, #0
 800113e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001140:	4b3c      	ldr	r3, [pc, #240]	; (8001234 <MX_TIM1_Init+0x154>)
 8001142:	2200      	movs	r2, #0
 8001144:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001146:	4b3b      	ldr	r3, [pc, #236]	; (8001234 <MX_TIM1_Init+0x154>)
 8001148:	2200      	movs	r2, #0
 800114a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800114c:	4839      	ldr	r0, [pc, #228]	; (8001234 <MX_TIM1_Init+0x154>)
 800114e:	f00a fb1a 	bl	800b786 <HAL_TIM_Base_Init>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001158:	f000 fda0 	bl	8001c9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800115c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001160:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001162:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001166:	4619      	mov	r1, r3
 8001168:	4832      	ldr	r0, [pc, #200]	; (8001234 <MX_TIM1_Init+0x154>)
 800116a:	f00b f8c1 	bl	800c2f0 <HAL_TIM_ConfigClockSource>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001174:	f000 fd92 	bl	8001c9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001178:	482e      	ldr	r0, [pc, #184]	; (8001234 <MX_TIM1_Init+0x154>)
 800117a:	f00a fd2d 	bl	800bbd8 <HAL_TIM_PWM_Init>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001184:	f000 fd8a 	bl	8001c9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001188:	2300      	movs	r3, #0
 800118a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800118c:	2300      	movs	r3, #0
 800118e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001190:	2300      	movs	r3, #0
 8001192:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001194:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001198:	4619      	mov	r1, r3
 800119a:	4826      	ldr	r0, [pc, #152]	; (8001234 <MX_TIM1_Init+0x154>)
 800119c:	f00b fdfe 	bl	800cd9c <HAL_TIMEx_MasterConfigSynchronization>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80011a6:	f000 fd79 	bl	8001c9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011aa:	2360      	movs	r3, #96	; 0x60
 80011ac:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 80011ae:	f240 13df 	movw	r3, #479	; 0x1df
 80011b2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011b4:	2300      	movs	r3, #0
 80011b6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011b8:	2300      	movs	r3, #0
 80011ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011bc:	2300      	movs	r3, #0
 80011be:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011c0:	2300      	movs	r3, #0
 80011c2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011c4:	2300      	movs	r3, #0
 80011c6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011cc:	2200      	movs	r2, #0
 80011ce:	4619      	mov	r1, r3
 80011d0:	4818      	ldr	r0, [pc, #96]	; (8001234 <MX_TIM1_Init+0x154>)
 80011d2:	f00a ff79 	bl	800c0c8 <HAL_TIM_PWM_ConfigChannel>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80011dc:	f000 fd5e 	bl	8001c9c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011e0:	2300      	movs	r3, #0
 80011e2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011e4:	2300      	movs	r3, #0
 80011e6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011e8:	2300      	movs	r3, #0
 80011ea:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80011ec:	2300      	movs	r3, #0
 80011ee:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011f8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80011fa:	2300      	movs	r3, #0
 80011fc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80011fe:	2300      	movs	r3, #0
 8001200:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001202:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001206:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001208:	2300      	movs	r3, #0
 800120a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800120c:	2300      	movs	r3, #0
 800120e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001210:	1d3b      	adds	r3, r7, #4
 8001212:	4619      	mov	r1, r3
 8001214:	4807      	ldr	r0, [pc, #28]	; (8001234 <MX_TIM1_Init+0x154>)
 8001216:	f00b fe4f 	bl	800ceb8 <HAL_TIMEx_ConfigBreakDeadTime>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8001220:	f000 fd3c 	bl	8001c9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001224:	4803      	ldr	r0, [pc, #12]	; (8001234 <MX_TIM1_Init+0x154>)
 8001226:	f001 f847 	bl	80022b8 <HAL_TIM_MspPostInit>

}
 800122a:	bf00      	nop
 800122c:	3768      	adds	r7, #104	; 0x68
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	240003bc 	.word	0x240003bc
 8001238:	40010000 	.word	0x40010000

0800123c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b08e      	sub	sp, #56	; 0x38
 8001240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001242:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	605a      	str	r2, [r3, #4]
 800124c:	609a      	str	r2, [r3, #8]
 800124e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001250:	f107 031c 	add.w	r3, r7, #28
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800125c:	463b      	mov	r3, r7
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	605a      	str	r2, [r3, #4]
 8001264:	609a      	str	r2, [r3, #8]
 8001266:	60da      	str	r2, [r3, #12]
 8001268:	611a      	str	r2, [r3, #16]
 800126a:	615a      	str	r2, [r3, #20]
 800126c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800126e:	4b2d      	ldr	r3, [pc, #180]	; (8001324 <MX_TIM2_Init+0xe8>)
 8001270:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001274:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64-1;
 8001276:	4b2b      	ldr	r3, [pc, #172]	; (8001324 <MX_TIM2_Init+0xe8>)
 8001278:	223f      	movs	r2, #63	; 0x3f
 800127a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800127c:	4b29      	ldr	r3, [pc, #164]	; (8001324 <MX_TIM2_Init+0xe8>)
 800127e:	2200      	movs	r2, #0
 8001280:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 8001282:	4b28      	ldr	r3, [pc, #160]	; (8001324 <MX_TIM2_Init+0xe8>)
 8001284:	f640 4234 	movw	r2, #3124	; 0xc34
 8001288:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800128a:	4b26      	ldr	r3, [pc, #152]	; (8001324 <MX_TIM2_Init+0xe8>)
 800128c:	2200      	movs	r2, #0
 800128e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001290:	4b24      	ldr	r3, [pc, #144]	; (8001324 <MX_TIM2_Init+0xe8>)
 8001292:	2280      	movs	r2, #128	; 0x80
 8001294:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001296:	4823      	ldr	r0, [pc, #140]	; (8001324 <MX_TIM2_Init+0xe8>)
 8001298:	f00a fa75 	bl	800b786 <HAL_TIM_Base_Init>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80012a2:	f000 fcfb 	bl	8001c9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012aa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012b0:	4619      	mov	r1, r3
 80012b2:	481c      	ldr	r0, [pc, #112]	; (8001324 <MX_TIM2_Init+0xe8>)
 80012b4:	f00b f81c 	bl	800c2f0 <HAL_TIM_ConfigClockSource>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80012be:	f000 fced 	bl	8001c9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80012c2:	4818      	ldr	r0, [pc, #96]	; (8001324 <MX_TIM2_Init+0xe8>)
 80012c4:	f00a fc88 	bl	800bbd8 <HAL_TIM_PWM_Init>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80012ce:	f000 fce5 	bl	8001c9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80012d2:	2320      	movs	r3, #32
 80012d4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012d6:	2300      	movs	r3, #0
 80012d8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012da:	f107 031c 	add.w	r3, r7, #28
 80012de:	4619      	mov	r1, r3
 80012e0:	4810      	ldr	r0, [pc, #64]	; (8001324 <MX_TIM2_Init+0xe8>)
 80012e2:	f00b fd5b 	bl	800cd9c <HAL_TIMEx_MasterConfigSynchronization>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80012ec:	f000 fcd6 	bl	8001c9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012f0:	2360      	movs	r3, #96	; 0x60
 80012f2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80012f4:	2300      	movs	r3, #0
 80012f6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012f8:	2300      	movs	r3, #0
 80012fa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012fc:	2300      	movs	r3, #0
 80012fe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001300:	463b      	mov	r3, r7
 8001302:	220c      	movs	r2, #12
 8001304:	4619      	mov	r1, r3
 8001306:	4807      	ldr	r0, [pc, #28]	; (8001324 <MX_TIM2_Init+0xe8>)
 8001308:	f00a fede 	bl	800c0c8 <HAL_TIM_PWM_ConfigChannel>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001312:	f000 fcc3 	bl	8001c9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001316:	4803      	ldr	r0, [pc, #12]	; (8001324 <MX_TIM2_Init+0xe8>)
 8001318:	f000 ffce 	bl	80022b8 <HAL_TIM_MspPostInit>

}
 800131c:	bf00      	nop
 800131e:	3738      	adds	r7, #56	; 0x38
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	24000408 	.word	0x24000408

08001328 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b088      	sub	sp, #32
 800132c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800132e:	f107 0310 	add.w	r3, r7, #16
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	605a      	str	r2, [r3, #4]
 8001338:	609a      	str	r2, [r3, #8]
 800133a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800133c:	1d3b      	adds	r3, r7, #4
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	605a      	str	r2, [r3, #4]
 8001344:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001346:	4b1d      	ldr	r3, [pc, #116]	; (80013bc <MX_TIM3_Init+0x94>)
 8001348:	4a1d      	ldr	r2, [pc, #116]	; (80013c0 <MX_TIM3_Init+0x98>)
 800134a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 800134c:	4b1b      	ldr	r3, [pc, #108]	; (80013bc <MX_TIM3_Init+0x94>)
 800134e:	223f      	movs	r2, #63	; 0x3f
 8001350:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001352:	4b1a      	ldr	r3, [pc, #104]	; (80013bc <MX_TIM3_Init+0x94>)
 8001354:	2200      	movs	r2, #0
 8001356:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001358:	4b18      	ldr	r3, [pc, #96]	; (80013bc <MX_TIM3_Init+0x94>)
 800135a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800135e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001360:	4b16      	ldr	r3, [pc, #88]	; (80013bc <MX_TIM3_Init+0x94>)
 8001362:	2200      	movs	r2, #0
 8001364:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001366:	4b15      	ldr	r3, [pc, #84]	; (80013bc <MX_TIM3_Init+0x94>)
 8001368:	2200      	movs	r2, #0
 800136a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800136c:	4813      	ldr	r0, [pc, #76]	; (80013bc <MX_TIM3_Init+0x94>)
 800136e:	f00a fa0a 	bl	800b786 <HAL_TIM_Base_Init>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001378:	f000 fc90 	bl	8001c9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800137c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001380:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001382:	f107 0310 	add.w	r3, r7, #16
 8001386:	4619      	mov	r1, r3
 8001388:	480c      	ldr	r0, [pc, #48]	; (80013bc <MX_TIM3_Init+0x94>)
 800138a:	f00a ffb1 	bl	800c2f0 <HAL_TIM_ConfigClockSource>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001394:	f000 fc82 	bl	8001c9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001398:	2300      	movs	r3, #0
 800139a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800139c:	2300      	movs	r3, #0
 800139e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013a0:	1d3b      	adds	r3, r7, #4
 80013a2:	4619      	mov	r1, r3
 80013a4:	4805      	ldr	r0, [pc, #20]	; (80013bc <MX_TIM3_Init+0x94>)
 80013a6:	f00b fcf9 	bl	800cd9c <HAL_TIMEx_MasterConfigSynchronization>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80013b0:	f000 fc74 	bl	8001c9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80013b4:	bf00      	nop
 80013b6:	3720      	adds	r7, #32
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	24000454 	.word	0x24000454
 80013c0:	40000400 	.word	0x40000400

080013c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013c8:	4b22      	ldr	r3, [pc, #136]	; (8001454 <MX_USART1_UART_Init+0x90>)
 80013ca:	4a23      	ldr	r2, [pc, #140]	; (8001458 <MX_USART1_UART_Init+0x94>)
 80013cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 80013ce:	4b21      	ldr	r3, [pc, #132]	; (8001454 <MX_USART1_UART_Init+0x90>)
 80013d0:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 80013d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013d6:	4b1f      	ldr	r3, [pc, #124]	; (8001454 <MX_USART1_UART_Init+0x90>)
 80013d8:	2200      	movs	r2, #0
 80013da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013dc:	4b1d      	ldr	r3, [pc, #116]	; (8001454 <MX_USART1_UART_Init+0x90>)
 80013de:	2200      	movs	r2, #0
 80013e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013e2:	4b1c      	ldr	r3, [pc, #112]	; (8001454 <MX_USART1_UART_Init+0x90>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013e8:	4b1a      	ldr	r3, [pc, #104]	; (8001454 <MX_USART1_UART_Init+0x90>)
 80013ea:	220c      	movs	r2, #12
 80013ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ee:	4b19      	ldr	r3, [pc, #100]	; (8001454 <MX_USART1_UART_Init+0x90>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013f4:	4b17      	ldr	r3, [pc, #92]	; (8001454 <MX_USART1_UART_Init+0x90>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013fa:	4b16      	ldr	r3, [pc, #88]	; (8001454 <MX_USART1_UART_Init+0x90>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001400:	4b14      	ldr	r3, [pc, #80]	; (8001454 <MX_USART1_UART_Init+0x90>)
 8001402:	2200      	movs	r2, #0
 8001404:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001406:	4b13      	ldr	r3, [pc, #76]	; (8001454 <MX_USART1_UART_Init+0x90>)
 8001408:	2200      	movs	r2, #0
 800140a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800140c:	4811      	ldr	r0, [pc, #68]	; (8001454 <MX_USART1_UART_Init+0x90>)
 800140e:	f00b fdef 	bl	800cff0 <HAL_UART_Init>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001418:	f000 fc40 	bl	8001c9c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800141c:	2100      	movs	r1, #0
 800141e:	480d      	ldr	r0, [pc, #52]	; (8001454 <MX_USART1_UART_Init+0x90>)
 8001420:	f00e f949 	bl	800f6b6 <HAL_UARTEx_SetTxFifoThreshold>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800142a:	f000 fc37 	bl	8001c9c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800142e:	2100      	movs	r1, #0
 8001430:	4808      	ldr	r0, [pc, #32]	; (8001454 <MX_USART1_UART_Init+0x90>)
 8001432:	f00e f97e 	bl	800f732 <HAL_UARTEx_SetRxFifoThreshold>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800143c:	f000 fc2e 	bl	8001c9c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001440:	4804      	ldr	r0, [pc, #16]	; (8001454 <MX_USART1_UART_Init+0x90>)
 8001442:	f00e f8ff 	bl	800f644 <HAL_UARTEx_DisableFifoMode>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800144c:	f000 fc26 	bl	8001c9c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001450:	bf00      	nop
 8001452:	bd80      	pop	{r7, pc}
 8001454:	240004a0 	.word	0x240004a0
 8001458:	40011000 	.word	0x40011000

0800145c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001462:	4b15      	ldr	r3, [pc, #84]	; (80014b8 <MX_DMA_Init+0x5c>)
 8001464:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001468:	4a13      	ldr	r2, [pc, #76]	; (80014b8 <MX_DMA_Init+0x5c>)
 800146a:	f043 0301 	orr.w	r3, r3, #1
 800146e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001472:	4b11      	ldr	r3, [pc, #68]	; (80014b8 <MX_DMA_Init+0x5c>)
 8001474:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001478:	f003 0301 	and.w	r3, r3, #1
 800147c:	607b      	str	r3, [r7, #4]
 800147e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001480:	2200      	movs	r2, #0
 8001482:	2105      	movs	r1, #5
 8001484:	200b      	movs	r0, #11
 8001486:	f002 ffaf 	bl	80043e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800148a:	200b      	movs	r0, #11
 800148c:	f002 ffc6 	bl	800441c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001490:	2200      	movs	r2, #0
 8001492:	2105      	movs	r1, #5
 8001494:	200c      	movs	r0, #12
 8001496:	f002 ffa7 	bl	80043e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800149a:	200c      	movs	r0, #12
 800149c:	f002 ffbe 	bl	800441c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80014a0:	2200      	movs	r2, #0
 80014a2:	2105      	movs	r1, #5
 80014a4:	2010      	movs	r0, #16
 80014a6:	f002 ff9f 	bl	80043e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80014aa:	2010      	movs	r0, #16
 80014ac:	f002 ffb6 	bl	800441c <HAL_NVIC_EnableIRQ>

}
 80014b0:	bf00      	nop
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	58024400 	.word	0x58024400

080014bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b088      	sub	sp, #32
 80014c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c2:	f107 030c 	add.w	r3, r7, #12
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	605a      	str	r2, [r3, #4]
 80014cc:	609a      	str	r2, [r3, #8]
 80014ce:	60da      	str	r2, [r3, #12]
 80014d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014d2:	4b2c      	ldr	r3, [pc, #176]	; (8001584 <MX_GPIO_Init+0xc8>)
 80014d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014d8:	4a2a      	ldr	r2, [pc, #168]	; (8001584 <MX_GPIO_Init+0xc8>)
 80014da:	f043 0304 	orr.w	r3, r3, #4
 80014de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014e2:	4b28      	ldr	r3, [pc, #160]	; (8001584 <MX_GPIO_Init+0xc8>)
 80014e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014e8:	f003 0304 	and.w	r3, r3, #4
 80014ec:	60bb      	str	r3, [r7, #8]
 80014ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f0:	4b24      	ldr	r3, [pc, #144]	; (8001584 <MX_GPIO_Init+0xc8>)
 80014f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014f6:	4a23      	ldr	r2, [pc, #140]	; (8001584 <MX_GPIO_Init+0xc8>)
 80014f8:	f043 0301 	orr.w	r3, r3, #1
 80014fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001500:	4b20      	ldr	r3, [pc, #128]	; (8001584 <MX_GPIO_Init+0xc8>)
 8001502:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	607b      	str	r3, [r7, #4]
 800150c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800150e:	4b1d      	ldr	r3, [pc, #116]	; (8001584 <MX_GPIO_Init+0xc8>)
 8001510:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001514:	4a1b      	ldr	r2, [pc, #108]	; (8001584 <MX_GPIO_Init+0xc8>)
 8001516:	f043 0302 	orr.w	r3, r3, #2
 800151a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800151e:	4b19      	ldr	r3, [pc, #100]	; (8001584 <MX_GPIO_Init+0xc8>)
 8001520:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001524:	f003 0302 	and.w	r3, r3, #2
 8001528:	603b      	str	r3, [r7, #0]
 800152a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 800152c:	2200      	movs	r2, #0
 800152e:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8001532:	4815      	ldr	r0, [pc, #84]	; (8001588 <MX_GPIO_Init+0xcc>)
 8001534:	f006 f93a 	bl	80077ac <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001538:	2200      	movs	r2, #0
 800153a:	2164      	movs	r1, #100	; 0x64
 800153c:	4813      	ldr	r0, [pc, #76]	; (800158c <MX_GPIO_Init+0xd0>)
 800153e:	f006 f935 	bl	80077ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001542:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8001546:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001548:	2301      	movs	r3, #1
 800154a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154c:	2300      	movs	r3, #0
 800154e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001550:	2300      	movs	r3, #0
 8001552:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001554:	f107 030c 	add.w	r3, r7, #12
 8001558:	4619      	mov	r1, r3
 800155a:	480b      	ldr	r0, [pc, #44]	; (8001588 <MX_GPIO_Init+0xcc>)
 800155c:	f005 ff76 	bl	800744c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001560:	2364      	movs	r3, #100	; 0x64
 8001562:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001564:	2301      	movs	r3, #1
 8001566:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156c:	2300      	movs	r3, #0
 800156e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001570:	f107 030c 	add.w	r3, r7, #12
 8001574:	4619      	mov	r1, r3
 8001576:	4805      	ldr	r0, [pc, #20]	; (800158c <MX_GPIO_Init+0xd0>)
 8001578:	f005 ff68 	bl	800744c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800157c:	bf00      	nop
 800157e:	3720      	adds	r7, #32
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	58024400 	.word	0x58024400
 8001588:	58020800 	.word	0x58020800
 800158c:	58020400 	.word	0x58020400

08001590 <system_setup>:
 * This function initializes various system components including timers, ADC calibration, and DMA for ADC data acquisition.
 * It starts PWM for TIM2, performs ADC calibration for ADC1 and ADC3, and starts DMA for ADC data acquisition.
 * Any errors encountered during these initialization steps are handled by the Error_Handler function.
 */
void system_setup()
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0

	  TIM2->CCR4 = 312;
 8001594:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001598:	f44f 729c 	mov.w	r2, #312	; 0x138
 800159c:	641a      	str	r2, [r3, #64]	; 0x40
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800159e:	210c      	movs	r1, #12
 80015a0:	4818      	ldr	r0, [pc, #96]	; (8001604 <system_setup+0x74>)
 80015a2:	f00a fb7b 	bl	800bc9c <HAL_TIM_PWM_Start>

	  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 80015a6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80015aa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80015ae:	4816      	ldr	r0, [pc, #88]	; (8001608 <system_setup+0x78>)
 80015b0:	f002 fd20 	bl	8003ff4 <HAL_ADCEx_Calibration_Start>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <system_setup+0x2e>
	  			ADC_SINGLE_ENDED) != HAL_OK) {
	  		/* Calibration Error */
	  		Error_Handler();
 80015ba:	f000 fb6f 	bl	8001c9c <Error_Handler>
	  	}

	  	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 80015be:	220b      	movs	r2, #11
 80015c0:	4912      	ldr	r1, [pc, #72]	; (800160c <system_setup+0x7c>)
 80015c2:	4811      	ldr	r0, [pc, #68]	; (8001608 <system_setup+0x78>)
 80015c4:	f001 fdf4 	bl	80031b0 <HAL_ADC_Start_DMA>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <system_setup+0x42>
	  	ADC1_NUM_CHANNELS) != HAL_OK) {
	  		Error_Handler();
 80015ce:	f000 fb65 	bl	8001c9c <Error_Handler>
	  	}

	  	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 80015d2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80015d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80015da:	480d      	ldr	r0, [pc, #52]	; (8001610 <system_setup+0x80>)
 80015dc:	f002 fd0a 	bl	8003ff4 <HAL_ADCEx_Calibration_Start>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <system_setup+0x5a>
	  			ADC_SINGLE_ENDED) != HAL_OK) {
	  		/* Calibration Error */
	  		Error_Handler();
 80015e6:	f000 fb59 	bl	8001c9c <Error_Handler>
	  	}

	  	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 80015ea:	2204      	movs	r2, #4
 80015ec:	4909      	ldr	r1, [pc, #36]	; (8001614 <system_setup+0x84>)
 80015ee:	4808      	ldr	r0, [pc, #32]	; (8001610 <system_setup+0x80>)
 80015f0:	f001 fdde 	bl	80031b0 <HAL_ADC_Start_DMA>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <system_setup+0x6e>
	  	ADC3_NUM_CHANNELS) != HAL_OK) {
	  		Error_Handler();
 80015fa:	f000 fb4f 	bl	8001c9c <Error_Handler>
	  	}
}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	24000408 	.word	0x24000408
 8001608:	2400009c 	.word	0x2400009c
 800160c:	240005c0 	.word	0x240005c0
 8001610:	24000100 	.word	0x24000100
 8001614:	240005e0 	.word	0x240005e0

08001618 <create_packet>:


packet_t create_packet(const uint8_t* data, uint16_t size) {
 8001618:	b580      	push	{r7, lr}
 800161a:	b086      	sub	sp, #24
 800161c:	af00      	add	r7, sp, #0
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	60b9      	str	r1, [r7, #8]
 8001622:	4613      	mov	r3, r2
 8001624:	80fb      	strh	r3, [r7, #6]
    packet_t packet;
    packet.array = (uint8_t*)malloc(size * sizeof(uint8_t)); // Allocate memory
 8001626:	88fb      	ldrh	r3, [r7, #6]
 8001628:	4618      	mov	r0, r3
 800162a:	f011 fce1 	bl	8012ff0 <malloc>
 800162e:	4603      	mov	r3, r0
 8001630:	613b      	str	r3, [r7, #16]
    if (packet.array == NULL) {
        // Memory allocation failed
        // Handle the error accordingly (e.g., return an error code or terminate the program)
    }
    memcpy(packet.array, data, size); // Copy the data into the packet array
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	88fa      	ldrh	r2, [r7, #6]
 8001636:	68b9      	ldr	r1, [r7, #8]
 8001638:	4618      	mov	r0, r3
 800163a:	f011 fce9 	bl	8013010 <memcpy>
    packet.size = size;
 800163e:	88fb      	ldrh	r3, [r7, #6]
 8001640:	82bb      	strh	r3, [r7, #20]
    return packet;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	461a      	mov	r2, r3
 8001646:	f107 0310 	add.w	r3, r7, #16
 800164a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800164e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001652:	68f8      	ldr	r0, [r7, #12]
 8001654:	3718      	adds	r7, #24
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
	...

0800165c <sample_pmt>:
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_pmt()
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
    uint8_t* buffer = (uint8_t*)malloc(PMT_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 8001662:	2006      	movs	r0, #6
 8001664:	f011 fcc4 	bl	8012ff0 <malloc>
 8001668:	4603      	mov	r3, r0
 800166a:	60fb      	str	r3, [r7, #12]
	uint8_t* pmt_spi = (uint8_t*)malloc(2 * sizeof(uint8_t));
 800166c:	2002      	movs	r0, #2
 800166e:	f011 fcbf 	bl	8012ff0 <malloc>
 8001672:	4603      	mov	r3, r0
 8001674:	60bb      	str	r3, [r7, #8]

#ifdef SIMULATE
	pmt_spi[0] = 0xE;
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	220e      	movs	r2, #14
 800167a:	701a      	strb	r2, [r3, #0]
	pmt_spi[1] = 0xD;
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	3301      	adds	r3, #1
 8001680:	220d      	movs	r2, #13
 8001682:	701a      	strb	r2, [r3, #0]
#else
	receive_spi(hspi1, pmt_spi);
#endif

	buffer[0] = PMT_SYNC;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	22bb      	movs	r2, #187	; 0xbb
 8001688:	701a      	strb	r2, [r3, #0]
	buffer[1] = PMT_SYNC;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	3301      	adds	r3, #1
 800168e:	22bb      	movs	r2, #187	; 0xbb
 8001690:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	3302      	adds	r3, #2
 8001696:	2200      	movs	r2, #0
 8001698:	701a      	strb	r2, [r3, #0]
	buffer[3] = (pmt_seq & 0xFF);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	3303      	adds	r3, #3
 800169e:	4a12      	ldr	r2, [pc, #72]	; (80016e8 <sample_pmt+0x8c>)
 80016a0:	7812      	ldrb	r2, [r2, #0]
 80016a2:	701a      	strb	r2, [r3, #0]
	buffer[4] = pmt_spi[0];
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	3304      	adds	r3, #4
 80016a8:	68ba      	ldr	r2, [r7, #8]
 80016aa:	7812      	ldrb	r2, [r2, #0]
 80016ac:	701a      	strb	r2, [r3, #0]
	buffer[5] = pmt_spi[1];
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	3305      	adds	r3, #5
 80016b2:	68ba      	ldr	r2, [r7, #8]
 80016b4:	7852      	ldrb	r2, [r2, #1]
 80016b6:	701a      	strb	r2, [r3, #0]

	packet_t pmt_packet = create_packet(buffer, PMT_DATA_SIZE);
 80016b8:	463b      	mov	r3, r7
 80016ba:	2206      	movs	r2, #6
 80016bc:	68f9      	ldr	r1, [r7, #12]
 80016be:	4618      	mov	r0, r3
 80016c0:	f7ff ffaa 	bl	8001618 <create_packet>
    osMessageQueuePut(mid_MsgQueue, &pmt_packet, 0U, 0U);
 80016c4:	4b09      	ldr	r3, [pc, #36]	; (80016ec <sample_pmt+0x90>)
 80016c6:	6818      	ldr	r0, [r3, #0]
 80016c8:	4639      	mov	r1, r7
 80016ca:	2300      	movs	r3, #0
 80016cc:	2200      	movs	r2, #0
 80016ce:	f00e fb75 	bl	800fdbc <osMessageQueuePut>
	free(buffer);
 80016d2:	68f8      	ldr	r0, [r7, #12]
 80016d4:	f011 fc94 	bl	8013000 <free>
	free(pmt_spi);
 80016d8:	68b8      	ldr	r0, [r7, #8]
 80016da:	f011 fc91 	bl	8013000 <free>
}
 80016de:	bf00      	nop
 80016e0:	3710      	adds	r7, #16
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	2400054c 	.word	0x2400054c
 80016ec:	24000548 	.word	0x24000548

080016f0 <sample_erpa>:
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_erpa()
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	af00      	add	r7, sp, #0
    uint8_t* buffer = (uint8_t*)malloc(ERPA_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 80016f6:	200e      	movs	r0, #14
 80016f8:	f011 fc7a 	bl	8012ff0 <malloc>
 80016fc:	4603      	mov	r3, r0
 80016fe:	617b      	str	r3, [r7, #20]

	uint8_t* erpa_spi = (uint8_t*)malloc(2 * sizeof(uint8_t));
 8001700:	2002      	movs	r0, #2
 8001702:	f011 fc75 	bl	8012ff0 <malloc>
 8001706:	4603      	mov	r3, r0
 8001708:	613b      	str	r3, [r7, #16]
	uint16_t* erpa_adc = (uint16_t*)malloc(2 * sizeof(uint16_t));
 800170a:	2004      	movs	r0, #4
 800170c:	f011 fc70 	bl	8012ff0 <malloc>
 8001710:	4603      	mov	r3, r0
 8001712:	60fb      	str	r3, [r7, #12]

#ifdef SIMULATE
	erpa_spi[0] = 0xE;
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	220e      	movs	r2, #14
 8001718:	701a      	strb	r2, [r3, #0]
	erpa_spi[1] = 0xD;
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	3301      	adds	r3, #1
 800171e:	220d      	movs	r2, #13
 8001720:	701a      	strb	r2, [r3, #0]

	erpa_adc[0] = 0xEE;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	22ee      	movs	r2, #238	; 0xee
 8001726:	801a      	strh	r2, [r3, #0]
	erpa_adc[1] = 0xDD;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	3302      	adds	r3, #2
 800172c:	22dd      	movs	r2, #221	; 0xdd
 800172e:	801a      	strh	r2, [r3, #0]
#else
	receive_spi(hspi2);
	reveice_erpa_adc(erpa_adc);
#endif

	buffer[0] = ERPA_SYNC;
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	22aa      	movs	r2, #170	; 0xaa
 8001734:	701a      	strb	r2, [r3, #0]
	buffer[1] = ERPA_SYNC;
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	3301      	adds	r3, #1
 800173a:	22aa      	movs	r2, #170	; 0xaa
 800173c:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((erpa_seq & 0xFF00) >> 8);
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	3302      	adds	r3, #2
 8001742:	2200      	movs	r2, #0
 8001744:	701a      	strb	r2, [r3, #0]
	buffer[3] = (erpa_seq & 0xFF);
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	3303      	adds	r3, #3
 800174a:	4a2a      	ldr	r2, [pc, #168]	; (80017f4 <sample_erpa+0x104>)
 800174c:	7812      	ldrb	r2, [r2, #0]
 800174e:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((0 & 0xFF00) >> 8); 	  		// ENDmon MSB
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	3304      	adds	r3, #4
 8001754:	2200      	movs	r2, #0
 8001756:	701a      	strb	r2, [r3, #0]
	buffer[5] = (0 & 0xFF);               		// ENDmon LSB
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	3305      	adds	r3, #5
 800175c:	2200      	movs	r2, #0
 800175e:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	881b      	ldrh	r3, [r3, #0]
 8001764:	0a1b      	lsrs	r3, r3, #8
 8001766:	b29a      	uxth	r2, r3
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	3306      	adds	r3, #6
 800176c:	b2d2      	uxtb	r2, r2
 800176e:	701a      	strb	r2, [r3, #0]
	buffer[7] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	881a      	ldrh	r2, [r3, #0]
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	3307      	adds	r3, #7
 8001778:	b2d2      	uxtb	r2, r2
 800177a:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((erpa_adc[1] & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	3302      	adds	r3, #2
 8001780:	881b      	ldrh	r3, [r3, #0]
 8001782:	0a1b      	lsrs	r3, r3, #8
 8001784:	b29a      	uxth	r2, r3
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	3308      	adds	r3, #8
 800178a:	b2d2      	uxtb	r2, r2
 800178c:	701a      	strb	r2, [r3, #0]
	buffer[9] = (erpa_adc[1] & 0xFF);           // TEMPURATURE 1 LSB
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	3302      	adds	r3, #2
 8001792:	881a      	ldrh	r2, [r3, #0]
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	3309      	adds	r3, #9
 8001798:	b2d2      	uxtb	r2, r2
 800179a:	701a      	strb	r2, [r3, #0]
	buffer[10] = ((0 & 0xFF00) >> 8);     		// TEMPURATURE 2 MSB
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	330a      	adds	r3, #10
 80017a0:	2200      	movs	r2, #0
 80017a2:	701a      	strb	r2, [r3, #0]
	buffer[11] = (0 & 0xFF);                    // TEMPURATURE 2 LSB
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	330b      	adds	r3, #11
 80017a8:	2200      	movs	r2, #0
 80017aa:	701a      	strb	r2, [r3, #0]
	buffer[12] = erpa_spi[0];					// ERPA eADC MSB
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	330c      	adds	r3, #12
 80017b0:	693a      	ldr	r2, [r7, #16]
 80017b2:	7812      	ldrb	r2, [r2, #0]
 80017b4:	701a      	strb	r2, [r3, #0]
	buffer[13] = erpa_spi[1];					// ERPA eADC LSB
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	330d      	adds	r3, #13
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	7852      	ldrb	r2, [r2, #1]
 80017be:	701a      	strb	r2, [r3, #0]

	packet_t erpa_packet = create_packet(buffer, ERPA_DATA_SIZE);
 80017c0:	1d3b      	adds	r3, r7, #4
 80017c2:	220e      	movs	r2, #14
 80017c4:	6979      	ldr	r1, [r7, #20]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff ff26 	bl	8001618 <create_packet>
    osMessageQueuePut(mid_MsgQueue, &erpa_packet, 0U, 0U);
 80017cc:	4b0a      	ldr	r3, [pc, #40]	; (80017f8 <sample_erpa+0x108>)
 80017ce:	6818      	ldr	r0, [r3, #0]
 80017d0:	1d39      	adds	r1, r7, #4
 80017d2:	2300      	movs	r3, #0
 80017d4:	2200      	movs	r2, #0
 80017d6:	f00e faf1 	bl	800fdbc <osMessageQueuePut>
	free(buffer);
 80017da:	6978      	ldr	r0, [r7, #20]
 80017dc:	f011 fc10 	bl	8013000 <free>
	free(erpa_spi);
 80017e0:	6938      	ldr	r0, [r7, #16]
 80017e2:	f011 fc0d 	bl	8013000 <free>
	free(erpa_adc);
 80017e6:	68f8      	ldr	r0, [r7, #12]
 80017e8:	f011 fc0a 	bl	8013000 <free>
}
 80017ec:	bf00      	nop
 80017ee:	3718      	adds	r7, #24
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	2400054d 	.word	0x2400054d
 80017f8:	24000548 	.word	0x24000548

080017fc <sample_hk>:
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_hk()
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af00      	add	r7, sp, #0
    uint8_t* buffer = (uint8_t*)malloc(HK_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 8001802:	2026      	movs	r0, #38	; 0x26
 8001804:	f011 fbf4 	bl	8012ff0 <malloc>
 8001808:	4603      	mov	r3, r0
 800180a:	617b      	str	r3, [r7, #20]

	int16_t* hk_i2c = (uint16_t*)malloc(4 * sizeof(uint16_t));
 800180c:	2008      	movs	r0, #8
 800180e:	f011 fbef 	bl	8012ff0 <malloc>
 8001812:	4603      	mov	r3, r0
 8001814:	613b      	str	r3, [r7, #16]
	uint16_t* hk_adc1 = (uint16_t*)malloc(9 * sizeof(uint16_t));
 8001816:	2012      	movs	r0, #18
 8001818:	f011 fbea 	bl	8012ff0 <malloc>
 800181c:	4603      	mov	r3, r0
 800181e:	60fb      	str	r3, [r7, #12]
	uint16_t* hk_adc3 = (uint16_t*)malloc(4 * sizeof(uint16_t));
 8001820:	2008      	movs	r0, #8
 8001822:	f011 fbe5 	bl	8012ff0 <malloc>
 8001826:	4603      	mov	r3, r0
 8001828:	60bb      	str	r3, [r7, #8]

#ifdef SIMULATE
	hk_i2c[0] = 0x11;
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	2211      	movs	r2, #17
 800182e:	801a      	strh	r2, [r3, #0]
	hk_i2c[1] = 0x12;
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	3302      	adds	r3, #2
 8001834:	2212      	movs	r2, #18
 8001836:	801a      	strh	r2, [r3, #0]
	hk_i2c[2] = 0x13;
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	3304      	adds	r3, #4
 800183c:	2213      	movs	r2, #19
 800183e:	801a      	strh	r2, [r3, #0]
	hk_i2c[3] = 0x14;
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	3306      	adds	r3, #6
 8001844:	2214      	movs	r2, #20
 8001846:	801a      	strh	r2, [r3, #0]

	hk_adc1[0] = 0xA0;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	22a0      	movs	r2, #160	; 0xa0
 800184c:	801a      	strh	r2, [r3, #0]
	hk_adc1[1] = 0xA1;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	3302      	adds	r3, #2
 8001852:	22a1      	movs	r2, #161	; 0xa1
 8001854:	801a      	strh	r2, [r3, #0]
	hk_adc1[2] = 0xA2;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	3304      	adds	r3, #4
 800185a:	22a2      	movs	r2, #162	; 0xa2
 800185c:	801a      	strh	r2, [r3, #0]
	hk_adc1[3] = 0xA3;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	3306      	adds	r3, #6
 8001862:	22a3      	movs	r2, #163	; 0xa3
 8001864:	801a      	strh	r2, [r3, #0]
	hk_adc1[4] = 0xA4;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	3308      	adds	r3, #8
 800186a:	22a4      	movs	r2, #164	; 0xa4
 800186c:	801a      	strh	r2, [r3, #0]
	hk_adc1[5] = 0xA5;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	330a      	adds	r3, #10
 8001872:	22a5      	movs	r2, #165	; 0xa5
 8001874:	801a      	strh	r2, [r3, #0]
	hk_adc1[6] = 0xA6;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	330c      	adds	r3, #12
 800187a:	22a6      	movs	r2, #166	; 0xa6
 800187c:	801a      	strh	r2, [r3, #0]
	hk_adc1[7] = 0xA7;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	330e      	adds	r3, #14
 8001882:	22a7      	movs	r2, #167	; 0xa7
 8001884:	801a      	strh	r2, [r3, #0]
	hk_adc1[8] = 0xA8;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	3310      	adds	r3, #16
 800188a:	22a8      	movs	r2, #168	; 0xa8
 800188c:	801a      	strh	r2, [r3, #0]

	hk_adc3[0] = 0xB0;
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	22b0      	movs	r2, #176	; 0xb0
 8001892:	801a      	strh	r2, [r3, #0]
	hk_adc3[1] = 0xB1;
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	3302      	adds	r3, #2
 8001898:	22b1      	movs	r2, #177	; 0xb1
 800189a:	801a      	strh	r2, [r3, #0]
	hk_adc3[2] = 0xB2;
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	3304      	adds	r3, #4
 80018a0:	22b2      	movs	r2, #178	; 0xb2
 80018a2:	801a      	strh	r2, [r3, #0]
	hk_adc3[3] = 0xB3;
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	3306      	adds	r3, #6
 80018a8:	22b3      	movs	r2, #179	; 0xb3
 80018aa:	801a      	strh	r2, [r3, #0]
	receive_hk_i2c(hk_i2c);
	receive_hk_adc1(hk_adc1);
	receive_hk_adc3(hk_adc3);
#endif

	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	22cc      	movs	r2, #204	; 0xcc
 80018b0:	701a      	strb	r2, [r3, #0]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	3301      	adds	r3, #1
 80018b6:	22cc      	movs	r2, #204	; 0xcc
 80018b8:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	3302      	adds	r3, #2
 80018be:	2200      	movs	r2, #0
 80018c0:	701a      	strb	r2, [r3, #0]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	3303      	adds	r3, #3
 80018c6:	4a97      	ldr	r2, [pc, #604]	; (8001b24 <sample_hk+0x328>)
 80018c8:	7812      	ldrb	r2, [r2, #0]
 80018ca:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((hk_adc3[1] & 0xFF00) >> 8);	// HK vsense MSB
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	3302      	adds	r3, #2
 80018d0:	881b      	ldrh	r3, [r3, #0]
 80018d2:	0a1b      	lsrs	r3, r3, #8
 80018d4:	b29a      	uxth	r2, r3
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	3304      	adds	r3, #4
 80018da:	b2d2      	uxtb	r2, r2
 80018dc:	701a      	strb	r2, [r3, #0]
	buffer[5] = (hk_adc3[1] & 0xFF);			// HK vsense LSB
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	3302      	adds	r3, #2
 80018e2:	881a      	ldrh	r2, [r3, #0]
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	3305      	adds	r3, #5
 80018e8:	b2d2      	uxtb	r2, r2
 80018ea:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((hk_adc3[0] & 0xFF00) >> 8);	// HK vrefint MSB
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	881b      	ldrh	r3, [r3, #0]
 80018f0:	0a1b      	lsrs	r3, r3, #8
 80018f2:	b29a      	uxth	r2, r3
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	3306      	adds	r3, #6
 80018f8:	b2d2      	uxtb	r2, r2
 80018fa:	701a      	strb	r2, [r3, #0]
	buffer[7] = (hk_adc3[0] & 0xFF);			// HK vrefint LSB
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	881a      	ldrh	r2, [r3, #0]
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	3307      	adds	r3, #7
 8001904:	b2d2      	uxtb	r2, r2
 8001906:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((hk_i2c[0] & 0xFF00) >> 8);	// HK TEMP1 MSB
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800190e:	121a      	asrs	r2, r3, #8
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	3308      	adds	r3, #8
 8001914:	b2d2      	uxtb	r2, r2
 8001916:	701a      	strb	r2, [r3, #0]
	buffer[9] = (hk_i2c[0] & 0xFF);				// HK TEMP1 LSB
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	3309      	adds	r3, #9
 8001922:	b2d2      	uxtb	r2, r2
 8001924:	701a      	strb	r2, [r3, #0]
	buffer[10] = ((hk_i2c[1] & 0xFF00) >> 8);	// HK TEMP2 MSB
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	3302      	adds	r3, #2
 800192a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800192e:	121a      	asrs	r2, r3, #8
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	330a      	adds	r3, #10
 8001934:	b2d2      	uxtb	r2, r2
 8001936:	701a      	strb	r2, [r3, #0]
	buffer[11] = (hk_i2c[1] & 0xFF);			// HK TEMP2 LSB
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	3302      	adds	r3, #2
 800193c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	330b      	adds	r3, #11
 8001944:	b2d2      	uxtb	r2, r2
 8001946:	701a      	strb	r2, [r3, #0]
	buffer[12] = ((hk_i2c[2] & 0xFF00) >> 8);	// HK TEMP3 MSB
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	3304      	adds	r3, #4
 800194c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001950:	121a      	asrs	r2, r3, #8
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	330c      	adds	r3, #12
 8001956:	b2d2      	uxtb	r2, r2
 8001958:	701a      	strb	r2, [r3, #0]
	buffer[13] = (hk_i2c[2] & 0xFF);			// HK TEMP3 LSB
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	3304      	adds	r3, #4
 800195e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	330d      	adds	r3, #13
 8001966:	b2d2      	uxtb	r2, r2
 8001968:	701a      	strb	r2, [r3, #0]
	buffer[14] = ((hk_i2c[3] & 0xFF00) >> 8);	// HK TEMP4 MSB
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	3306      	adds	r3, #6
 800196e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001972:	121a      	asrs	r2, r3, #8
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	330e      	adds	r3, #14
 8001978:	b2d2      	uxtb	r2, r2
 800197a:	701a      	strb	r2, [r3, #0]
	buffer[15] = (hk_i2c[3] & 0xFF);			// HK TEMP4 LSB
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	3306      	adds	r3, #6
 8001980:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	330f      	adds	r3, #15
 8001988:	b2d2      	uxtb	r2, r2
 800198a:	701a      	strb	r2, [r3, #0]
	buffer[16] = ((hk_adc1[0] & 0xFF00) >> 8);	// HK BUSvmon MSB
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	881b      	ldrh	r3, [r3, #0]
 8001990:	0a1b      	lsrs	r3, r3, #8
 8001992:	b29a      	uxth	r2, r3
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	3310      	adds	r3, #16
 8001998:	b2d2      	uxtb	r2, r2
 800199a:	701a      	strb	r2, [r3, #0]
	buffer[17] = (hk_adc1[0] & 0xFF);			// HK BUSvmon LSB
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	881a      	ldrh	r2, [r3, #0]
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	3311      	adds	r3, #17
 80019a4:	b2d2      	uxtb	r2, r2
 80019a6:	701a      	strb	r2, [r3, #0]
	buffer[18] = ((hk_adc1[1] & 0xFF00) >> 8);	// HK BUSimon MSB
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	3302      	adds	r3, #2
 80019ac:	881b      	ldrh	r3, [r3, #0]
 80019ae:	0a1b      	lsrs	r3, r3, #8
 80019b0:	b29a      	uxth	r2, r3
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	3312      	adds	r3, #18
 80019b6:	b2d2      	uxtb	r2, r2
 80019b8:	701a      	strb	r2, [r3, #0]
	buffer[19] = (hk_adc1[1] & 0xFF);			// HK BUSimon LSB
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	3302      	adds	r3, #2
 80019be:	881a      	ldrh	r2, [r3, #0]
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	3313      	adds	r3, #19
 80019c4:	b2d2      	uxtb	r2, r2
 80019c6:	701a      	strb	r2, [r3, #0]
	buffer[20] = ((hk_adc1[2] & 0xFF00) >> 8);	// HK 2v5mon MSB
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	3304      	adds	r3, #4
 80019cc:	881b      	ldrh	r3, [r3, #0]
 80019ce:	0a1b      	lsrs	r3, r3, #8
 80019d0:	b29a      	uxth	r2, r3
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	3314      	adds	r3, #20
 80019d6:	b2d2      	uxtb	r2, r2
 80019d8:	701a      	strb	r2, [r3, #0]
	buffer[21] = (hk_adc1[2] & 0xFF);			// HK 2v5mon LSB
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	3304      	adds	r3, #4
 80019de:	881a      	ldrh	r2, [r3, #0]
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	3315      	adds	r3, #21
 80019e4:	b2d2      	uxtb	r2, r2
 80019e6:	701a      	strb	r2, [r3, #0]
	buffer[22] = ((hk_adc1[3] & 0xFF00) >> 8);	// HK 3v3mon MSB
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	3306      	adds	r3, #6
 80019ec:	881b      	ldrh	r3, [r3, #0]
 80019ee:	0a1b      	lsrs	r3, r3, #8
 80019f0:	b29a      	uxth	r2, r3
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	3316      	adds	r3, #22
 80019f6:	b2d2      	uxtb	r2, r2
 80019f8:	701a      	strb	r2, [r3, #0]
	buffer[23] = (hk_adc1[3] & 0xFF);			// HK 3v3mon LSB
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	3306      	adds	r3, #6
 80019fe:	881a      	ldrh	r2, [r3, #0]
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	3317      	adds	r3, #23
 8001a04:	b2d2      	uxtb	r2, r2
 8001a06:	701a      	strb	r2, [r3, #0]
	buffer[24] = ((hk_adc1[6] & 0xFF00) >> 8);	// HK 5vmon MSB
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	330c      	adds	r3, #12
 8001a0c:	881b      	ldrh	r3, [r3, #0]
 8001a0e:	0a1b      	lsrs	r3, r3, #8
 8001a10:	b29a      	uxth	r2, r3
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	3318      	adds	r3, #24
 8001a16:	b2d2      	uxtb	r2, r2
 8001a18:	701a      	strb	r2, [r3, #0]
	buffer[25] = (hk_adc1[6] & 0xFF);			// HK 5vmon LSB
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	330c      	adds	r3, #12
 8001a1e:	881a      	ldrh	r2, [r3, #0]
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	3319      	adds	r3, #25
 8001a24:	b2d2      	uxtb	r2, r2
 8001a26:	701a      	strb	r2, [r3, #0]
	buffer[26] = ((hk_adc1[3] & 0xFF00) >> 8);	// HK n3v3mon MSB
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	3306      	adds	r3, #6
 8001a2c:	881b      	ldrh	r3, [r3, #0]
 8001a2e:	0a1b      	lsrs	r3, r3, #8
 8001a30:	b29a      	uxth	r2, r3
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	331a      	adds	r3, #26
 8001a36:	b2d2      	uxtb	r2, r2
 8001a38:	701a      	strb	r2, [r3, #0]
	buffer[27] = (hk_adc1[3] & 0xFF);			// HK n3v3mon LSB
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	3306      	adds	r3, #6
 8001a3e:	881a      	ldrh	r2, [r3, #0]
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	331b      	adds	r3, #27
 8001a44:	b2d2      	uxtb	r2, r2
 8001a46:	701a      	strb	r2, [r3, #0]
	buffer[28] = ((hk_adc1[2] & 0xFF00) >> 8);	// HK n5vmon MSB
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	3304      	adds	r3, #4
 8001a4c:	881b      	ldrh	r3, [r3, #0]
 8001a4e:	0a1b      	lsrs	r3, r3, #8
 8001a50:	b29a      	uxth	r2, r3
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	331c      	adds	r3, #28
 8001a56:	b2d2      	uxtb	r2, r2
 8001a58:	701a      	strb	r2, [r3, #0]
	buffer[29] = (hk_adc1[2] & 0xFF);			// HK n5vmon LSB
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	3304      	adds	r3, #4
 8001a5e:	881a      	ldrh	r2, [r3, #0]
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	331d      	adds	r3, #29
 8001a64:	b2d2      	uxtb	r2, r2
 8001a66:	701a      	strb	r2, [r3, #0]
	buffer[30] = ((hk_adc1[7] & 0xFF00) >> 8);	// HK 15vmon MSB
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	330e      	adds	r3, #14
 8001a6c:	881b      	ldrh	r3, [r3, #0]
 8001a6e:	0a1b      	lsrs	r3, r3, #8
 8001a70:	b29a      	uxth	r2, r3
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	331e      	adds	r3, #30
 8001a76:	b2d2      	uxtb	r2, r2
 8001a78:	701a      	strb	r2, [r3, #0]
	buffer[31] = (hk_adc1[7] & 0xFF);			// HK 15vmon LSB
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	330e      	adds	r3, #14
 8001a7e:	881a      	ldrh	r2, [r3, #0]
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	331f      	adds	r3, #31
 8001a84:	b2d2      	uxtb	r2, r2
 8001a86:	701a      	strb	r2, [r3, #0]
	buffer[32] = ((hk_adc1[8] & 0xFF00) >> 8);	// HK 5vrefmon MSB
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	3310      	adds	r3, #16
 8001a8c:	881b      	ldrh	r3, [r3, #0]
 8001a8e:	0a1b      	lsrs	r3, r3, #8
 8001a90:	b29a      	uxth	r2, r3
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	3320      	adds	r3, #32
 8001a96:	b2d2      	uxtb	r2, r2
 8001a98:	701a      	strb	r2, [r3, #0]
	buffer[33] = (hk_adc1[8] & 0xFF);			// HK 5vrefmon LSB
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	3310      	adds	r3, #16
 8001a9e:	881a      	ldrh	r2, [r3, #0]
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	3321      	adds	r3, #33	; 0x21
 8001aa4:	b2d2      	uxtb	r2, r2
 8001aa6:	701a      	strb	r2, [r3, #0]
	buffer[34] = ((hk_adc1[4] & 0xFF00) >> 8);	// HK n150vmon MSB
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	3308      	adds	r3, #8
 8001aac:	881b      	ldrh	r3, [r3, #0]
 8001aae:	0a1b      	lsrs	r3, r3, #8
 8001ab0:	b29a      	uxth	r2, r3
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	3322      	adds	r3, #34	; 0x22
 8001ab6:	b2d2      	uxtb	r2, r2
 8001ab8:	701a      	strb	r2, [r3, #0]
	buffer[35] = (hk_adc1[4] & 0xFF);			// HK n150vmon LSB
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	3308      	adds	r3, #8
 8001abe:	881a      	ldrh	r2, [r3, #0]
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	3323      	adds	r3, #35	; 0x23
 8001ac4:	b2d2      	uxtb	r2, r2
 8001ac6:	701a      	strb	r2, [r3, #0]
	buffer[36] = ((hk_adc1[5] & 0xFF00) >> 8);	// HK n800vmon MSB
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	330a      	adds	r3, #10
 8001acc:	881b      	ldrh	r3, [r3, #0]
 8001ace:	0a1b      	lsrs	r3, r3, #8
 8001ad0:	b29a      	uxth	r2, r3
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	3324      	adds	r3, #36	; 0x24
 8001ad6:	b2d2      	uxtb	r2, r2
 8001ad8:	701a      	strb	r2, [r3, #0]
	buffer[37] = (hk_adc1[5] & 0xFF);			// HK n800vmon LSB
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	330a      	adds	r3, #10
 8001ade:	881a      	ldrh	r2, [r3, #0]
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	3325      	adds	r3, #37	; 0x25
 8001ae4:	b2d2      	uxtb	r2, r2
 8001ae6:	701a      	strb	r2, [r3, #0]

	packet_t hk_packet = create_packet(buffer, HK_DATA_SIZE);
 8001ae8:	463b      	mov	r3, r7
 8001aea:	2226      	movs	r2, #38	; 0x26
 8001aec:	6979      	ldr	r1, [r7, #20]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7ff fd92 	bl	8001618 <create_packet>
    osMessageQueuePut(mid_MsgQueue, &hk_packet, 0U, 0U);
 8001af4:	4b0c      	ldr	r3, [pc, #48]	; (8001b28 <sample_hk+0x32c>)
 8001af6:	6818      	ldr	r0, [r3, #0]
 8001af8:	4639      	mov	r1, r7
 8001afa:	2300      	movs	r3, #0
 8001afc:	2200      	movs	r2, #0
 8001afe:	f00e f95d 	bl	800fdbc <osMessageQueuePut>
	free(buffer);
 8001b02:	6978      	ldr	r0, [r7, #20]
 8001b04:	f011 fa7c 	bl	8013000 <free>
	free(hk_i2c);
 8001b08:	6938      	ldr	r0, [r7, #16]
 8001b0a:	f011 fa79 	bl	8013000 <free>
	free(hk_adc1);
 8001b0e:	68f8      	ldr	r0, [r7, #12]
 8001b10:	f011 fa76 	bl	8013000 <free>
	free(hk_adc3);
 8001b14:	68b8      	ldr	r0, [r7, #8]
 8001b16:	f011 fa73 	bl	8013000 <free>
}
 8001b1a:	bf00      	nop
 8001b1c:	3718      	adds	r7, #24
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	2400054e 	.word	0x2400054e
 8001b28:	24000548 	.word	0x24000548

08001b2c <PMT_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {

	    osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8001b34:	4b0b      	ldr	r3, [pc, #44]	; (8001b64 <PMT_init+0x38>)
 8001b36:	6818      	ldr	r0, [r3, #0]
 8001b38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	2101      	movs	r1, #1
 8001b40:	f00e f862 	bl	800fc08 <osEventFlagsWait>
		if(PMT_ON){
 8001b44:	4b08      	ldr	r3, [pc, #32]	; (8001b68 <PMT_init+0x3c>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d007      	beq.n	8001b5c <PMT_init+0x30>
	    sample_pmt();
 8001b4c:	f7ff fd86 	bl	800165c <sample_pmt>
		pmt_seq++;
 8001b50:	4b06      	ldr	r3, [pc, #24]	; (8001b6c <PMT_init+0x40>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	3301      	adds	r3, #1
 8001b56:	b2da      	uxtb	r2, r3
 8001b58:	4b04      	ldr	r3, [pc, #16]	; (8001b6c <PMT_init+0x40>)
 8001b5a:	701a      	strb	r2, [r3, #0]

		}
		osThreadYield();
 8001b5c:	f00d ff96 	bl	800fa8c <osThreadYield>
	    osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8001b60:	e7e8      	b.n	8001b34 <PMT_init+0x8>
 8001b62:	bf00      	nop
 8001b64:	24000554 	.word	0x24000554
 8001b68:	2400054f 	.word	0x2400054f
 8001b6c:	2400054c 	.word	0x2400054c

08001b70 <ERPA_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */

  /* Infinite loop */
  for(;;)
  {
	    osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8001b78:	4b0b      	ldr	r3, [pc, #44]	; (8001ba8 <ERPA_init+0x38>)
 8001b7a:	6818      	ldr	r0, [r3, #0]
 8001b7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b80:	2200      	movs	r2, #0
 8001b82:	2102      	movs	r1, #2
 8001b84:	f00e f840 	bl	800fc08 <osEventFlagsWait>
	  if (ERPA_ON)
 8001b88:	4b08      	ldr	r3, [pc, #32]	; (8001bac <ERPA_init+0x3c>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d007      	beq.n	8001ba0 <ERPA_init+0x30>
	  {
	    sample_erpa();
 8001b90:	f7ff fdae 	bl	80016f0 <sample_erpa>
		erpa_seq++;
 8001b94:	4b06      	ldr	r3, [pc, #24]	; (8001bb0 <ERPA_init+0x40>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	3301      	adds	r3, #1
 8001b9a:	b2da      	uxtb	r2, r3
 8001b9c:	4b04      	ldr	r3, [pc, #16]	; (8001bb0 <ERPA_init+0x40>)
 8001b9e:	701a      	strb	r2, [r3, #0]

	  }
		osThreadYield();
 8001ba0:	f00d ff74 	bl	800fa8c <osThreadYield>
	    osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8001ba4:	e7e8      	b.n	8001b78 <ERPA_init+0x8>
 8001ba6:	bf00      	nop
 8001ba8:	24000554 	.word	0x24000554
 8001bac:	24000550 	.word	0x24000550
 8001bb0:	2400054d 	.word	0x2400054d

08001bb4 <HK_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */

  /* Infinite loop */
  for(;;)
  {
	    osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8001bbc:	4b0b      	ldr	r3, [pc, #44]	; (8001bec <HK_init+0x38>)
 8001bbe:	6818      	ldr	r0, [r3, #0]
 8001bc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	2104      	movs	r1, #4
 8001bc8:	f00e f81e 	bl	800fc08 <osEventFlagsWait>
	  if(HK_ON)
 8001bcc:	4b08      	ldr	r3, [pc, #32]	; (8001bf0 <HK_init+0x3c>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d007      	beq.n	8001be4 <HK_init+0x30>
	  {
	    sample_hk();
 8001bd4:	f7ff fe12 	bl	80017fc <sample_hk>
		hk_seq++;
 8001bd8:	4b06      	ldr	r3, [pc, #24]	; (8001bf4 <HK_init+0x40>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	3301      	adds	r3, #1
 8001bde:	b2da      	uxtb	r2, r3
 8001be0:	4b04      	ldr	r3, [pc, #16]	; (8001bf4 <HK_init+0x40>)
 8001be2:	701a      	strb	r2, [r3, #0]

	  }
		osThreadYield();
 8001be4:	f00d ff52 	bl	800fa8c <osThreadYield>
	    osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8001be8:	e7e8      	b.n	8001bbc <HK_init+0x8>
 8001bea:	bf00      	nop
 8001bec:	24000554 	.word	0x24000554
 8001bf0:	24000551 	.word	0x24000551
 8001bf4:	2400054e 	.word	0x2400054e

08001bf8 <UART_RX_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UART_RX_init */
void UART_RX_init(void *argument)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART_RX_init */
  /* Infinite loop */
  for(;;)
  {
		HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8001c00:	2201      	movs	r2, #1
 8001c02:	4904      	ldr	r1, [pc, #16]	; (8001c14 <UART_RX_init+0x1c>)
 8001c04:	4804      	ldr	r0, [pc, #16]	; (8001c18 <UART_RX_init+0x20>)
 8001c06:	f00b fad1 	bl	800d1ac <HAL_UART_Receive_IT>
		osDelay(5);
 8001c0a:	2005      	movs	r0, #5
 8001c0c:	f00d ff5e 	bl	800facc <osDelay>
		HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8001c10:	e7f6      	b.n	8001c00 <UART_RX_init+0x8>
 8001c12:	bf00      	nop
 8001c14:	24000558 	.word	0x24000558
 8001c18:	240004a0 	.word	0x240004a0

08001c1c <UART_TX_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UART_TX_init */
void UART_TX_init(void *argument)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b086      	sub	sp, #24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
	osStatus_t status;

	while (1) {
	   ; // Insert thread code here...

	   status = osMessageQueueGet(mid_MsgQueue, &msg, NULL, osWaitForever); // wait for message
 8001c24:	4b11      	ldr	r3, [pc, #68]	; (8001c6c <UART_TX_init+0x50>)
 8001c26:	6818      	ldr	r0, [r3, #0]
 8001c28:	f107 010c 	add.w	r1, r7, #12
 8001c2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c30:	2200      	movs	r2, #0
 8001c32:	f00e f923 	bl	800fe7c <osMessageQueueGet>
 8001c36:	6178      	str	r0, [r7, #20]

	   if (status == osOK) {
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d113      	bne.n	8001c66 <UART_TX_init+0x4a>
	       printf("RTS queue size: %ld\n", osMessageQueueGetCount(mid_MsgQueue));
 8001c3e:	4b0b      	ldr	r3, [pc, #44]	; (8001c6c <UART_TX_init+0x50>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f00e f978 	bl	800ff38 <osMessageQueueGetCount>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4808      	ldr	r0, [pc, #32]	; (8001c70 <UART_TX_init+0x54>)
 8001c4e:	f011 fad5 	bl	80131fc <iprintf>
	       HAL_UART_Transmit(&huart1, msg.array, msg.size, 100);
 8001c52:	68f9      	ldr	r1, [r7, #12]
 8001c54:	8a3a      	ldrh	r2, [r7, #16]
 8001c56:	2364      	movs	r3, #100	; 0x64
 8001c58:	4806      	ldr	r0, [pc, #24]	; (8001c74 <UART_TX_init+0x58>)
 8001c5a:	f00b fa19 	bl	800d090 <HAL_UART_Transmit>
	       free(msg.array);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f011 f9cd 	bl	8013000 <free>
	   }
	   osThreadYield();
 8001c66:	f00d ff11 	bl	800fa8c <osThreadYield>
	   status = osMessageQueueGet(mid_MsgQueue, &msg, NULL, osWaitForever); // wait for message
 8001c6a:	e7db      	b.n	8001c24 <UART_TX_init+0x8>
 8001c6c:	24000548 	.word	0x24000548
 8001c70:	08014250 	.word	0x08014250
 8001c74:	240004a0 	.word	0x240004a0

08001c78 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a04      	ldr	r2, [pc, #16]	; (8001c98 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d101      	bne.n	8001c8e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001c8a:	f000 fe9f 	bl	80029cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001c8e:	bf00      	nop
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	40001000 	.word	0x40001000

08001c9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ca0:	b672      	cpsid	i
}
 8001ca2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001ca4:	e7fe      	b.n	8001ca4 <Error_Handler+0x8>
	...

08001ca8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cae:	4b0c      	ldr	r3, [pc, #48]	; (8001ce0 <HAL_MspInit+0x38>)
 8001cb0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001cb4:	4a0a      	ldr	r2, [pc, #40]	; (8001ce0 <HAL_MspInit+0x38>)
 8001cb6:	f043 0302 	orr.w	r3, r3, #2
 8001cba:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001cbe:	4b08      	ldr	r3, [pc, #32]	; (8001ce0 <HAL_MspInit+0x38>)
 8001cc0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001cc4:	f003 0302 	and.w	r3, r3, #2
 8001cc8:	607b      	str	r3, [r7, #4]
 8001cca:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ccc:	2200      	movs	r2, #0
 8001cce:	210f      	movs	r1, #15
 8001cd0:	f06f 0001 	mvn.w	r0, #1
 8001cd4:	f002 fb88 	bl	80043e8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cd8:	bf00      	nop
 8001cda:	3708      	adds	r7, #8
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	58024400 	.word	0x58024400

08001ce4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b08e      	sub	sp, #56	; 0x38
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	605a      	str	r2, [r3, #4]
 8001cf6:	609a      	str	r2, [r3, #8]
 8001cf8:	60da      	str	r2, [r3, #12]
 8001cfa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a7b      	ldr	r2, [pc, #492]	; (8001ef0 <HAL_ADC_MspInit+0x20c>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	f040 8091 	bne.w	8001e2a <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001d08:	4b7a      	ldr	r3, [pc, #488]	; (8001ef4 <HAL_ADC_MspInit+0x210>)
 8001d0a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d0e:	4a79      	ldr	r2, [pc, #484]	; (8001ef4 <HAL_ADC_MspInit+0x210>)
 8001d10:	f043 0320 	orr.w	r3, r3, #32
 8001d14:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001d18:	4b76      	ldr	r3, [pc, #472]	; (8001ef4 <HAL_ADC_MspInit+0x210>)
 8001d1a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d1e:	f003 0320 	and.w	r3, r3, #32
 8001d22:	623b      	str	r3, [r7, #32]
 8001d24:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d26:	4b73      	ldr	r3, [pc, #460]	; (8001ef4 <HAL_ADC_MspInit+0x210>)
 8001d28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d2c:	4a71      	ldr	r2, [pc, #452]	; (8001ef4 <HAL_ADC_MspInit+0x210>)
 8001d2e:	f043 0304 	orr.w	r3, r3, #4
 8001d32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d36:	4b6f      	ldr	r3, [pc, #444]	; (8001ef4 <HAL_ADC_MspInit+0x210>)
 8001d38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d3c:	f003 0304 	and.w	r3, r3, #4
 8001d40:	61fb      	str	r3, [r7, #28]
 8001d42:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d44:	4b6b      	ldr	r3, [pc, #428]	; (8001ef4 <HAL_ADC_MspInit+0x210>)
 8001d46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d4a:	4a6a      	ldr	r2, [pc, #424]	; (8001ef4 <HAL_ADC_MspInit+0x210>)
 8001d4c:	f043 0301 	orr.w	r3, r3, #1
 8001d50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d54:	4b67      	ldr	r3, [pc, #412]	; (8001ef4 <HAL_ADC_MspInit+0x210>)
 8001d56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	61bb      	str	r3, [r7, #24]
 8001d60:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d62:	4b64      	ldr	r3, [pc, #400]	; (8001ef4 <HAL_ADC_MspInit+0x210>)
 8001d64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d68:	4a62      	ldr	r2, [pc, #392]	; (8001ef4 <HAL_ADC_MspInit+0x210>)
 8001d6a:	f043 0302 	orr.w	r3, r3, #2
 8001d6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d72:	4b60      	ldr	r3, [pc, #384]	; (8001ef4 <HAL_ADC_MspInit+0x210>)
 8001d74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d78:	f003 0302 	and.w	r3, r3, #2
 8001d7c:	617b      	str	r3, [r7, #20]
 8001d7e:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001d80:	2333      	movs	r3, #51	; 0x33
 8001d82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d84:	2303      	movs	r3, #3
 8001d86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d90:	4619      	mov	r1, r3
 8001d92:	4859      	ldr	r0, [pc, #356]	; (8001ef8 <HAL_ADC_MspInit+0x214>)
 8001d94:	f005 fb5a 	bl	800744c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8001d98:	23ce      	movs	r3, #206	; 0xce
 8001d9a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da0:	2300      	movs	r3, #0
 8001da2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001da4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001da8:	4619      	mov	r1, r3
 8001daa:	4854      	ldr	r0, [pc, #336]	; (8001efc <HAL_ADC_MspInit+0x218>)
 8001dac:	f005 fb4e 	bl	800744c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001db0:	2303      	movs	r3, #3
 8001db2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001db4:	2303      	movs	r3, #3
 8001db6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db8:	2300      	movs	r3, #0
 8001dba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	484f      	ldr	r0, [pc, #316]	; (8001f00 <HAL_ADC_MspInit+0x21c>)
 8001dc4:	f005 fb42 	bl	800744c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001dc8:	4b4e      	ldr	r3, [pc, #312]	; (8001f04 <HAL_ADC_MspInit+0x220>)
 8001dca:	4a4f      	ldr	r2, [pc, #316]	; (8001f08 <HAL_ADC_MspInit+0x224>)
 8001dcc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001dce:	4b4d      	ldr	r3, [pc, #308]	; (8001f04 <HAL_ADC_MspInit+0x220>)
 8001dd0:	2209      	movs	r2, #9
 8001dd2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001dd4:	4b4b      	ldr	r3, [pc, #300]	; (8001f04 <HAL_ADC_MspInit+0x220>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dda:	4b4a      	ldr	r3, [pc, #296]	; (8001f04 <HAL_ADC_MspInit+0x220>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001de0:	4b48      	ldr	r3, [pc, #288]	; (8001f04 <HAL_ADC_MspInit+0x220>)
 8001de2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001de6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001de8:	4b46      	ldr	r3, [pc, #280]	; (8001f04 <HAL_ADC_MspInit+0x220>)
 8001dea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001dee:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001df0:	4b44      	ldr	r3, [pc, #272]	; (8001f04 <HAL_ADC_MspInit+0x220>)
 8001df2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001df6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001df8:	4b42      	ldr	r3, [pc, #264]	; (8001f04 <HAL_ADC_MspInit+0x220>)
 8001dfa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001dfe:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001e00:	4b40      	ldr	r3, [pc, #256]	; (8001f04 <HAL_ADC_MspInit+0x220>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e06:	4b3f      	ldr	r3, [pc, #252]	; (8001f04 <HAL_ADC_MspInit+0x220>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001e0c:	483d      	ldr	r0, [pc, #244]	; (8001f04 <HAL_ADC_MspInit+0x220>)
 8001e0e:	f002 fce1 	bl	80047d4 <HAL_DMA_Init>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8001e18:	f7ff ff40 	bl	8001c9c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	4a39      	ldr	r2, [pc, #228]	; (8001f04 <HAL_ADC_MspInit+0x220>)
 8001e20:	64da      	str	r2, [r3, #76]	; 0x4c
 8001e22:	4a38      	ldr	r2, [pc, #224]	; (8001f04 <HAL_ADC_MspInit+0x220>)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001e28:	e05e      	b.n	8001ee8 <HAL_ADC_MspInit+0x204>
  else if(hadc->Instance==ADC3)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a37      	ldr	r2, [pc, #220]	; (8001f0c <HAL_ADC_MspInit+0x228>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d159      	bne.n	8001ee8 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001e34:	4b2f      	ldr	r3, [pc, #188]	; (8001ef4 <HAL_ADC_MspInit+0x210>)
 8001e36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e3a:	4a2e      	ldr	r2, [pc, #184]	; (8001ef4 <HAL_ADC_MspInit+0x210>)
 8001e3c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e44:	4b2b      	ldr	r3, [pc, #172]	; (8001ef4 <HAL_ADC_MspInit+0x210>)
 8001e46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e4e:	613b      	str	r3, [r7, #16]
 8001e50:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e52:	4b28      	ldr	r3, [pc, #160]	; (8001ef4 <HAL_ADC_MspInit+0x210>)
 8001e54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e58:	4a26      	ldr	r2, [pc, #152]	; (8001ef4 <HAL_ADC_MspInit+0x210>)
 8001e5a:	f043 0304 	orr.w	r3, r3, #4
 8001e5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e62:	4b24      	ldr	r3, [pc, #144]	; (8001ef4 <HAL_ADC_MspInit+0x210>)
 8001e64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e68:	f003 0304 	and.w	r3, r3, #4
 8001e6c:	60fb      	str	r3, [r7, #12]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001e70:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8001e74:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001e78:	f000 fdd4 	bl	8002a24 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001e7c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001e80:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001e84:	f000 fdce 	bl	8002a24 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8001e88:	4b21      	ldr	r3, [pc, #132]	; (8001f10 <HAL_ADC_MspInit+0x22c>)
 8001e8a:	4a22      	ldr	r2, [pc, #136]	; (8001f14 <HAL_ADC_MspInit+0x230>)
 8001e8c:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001e8e:	4b20      	ldr	r3, [pc, #128]	; (8001f10 <HAL_ADC_MspInit+0x22c>)
 8001e90:	2273      	movs	r2, #115	; 0x73
 8001e92:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e94:	4b1e      	ldr	r3, [pc, #120]	; (8001f10 <HAL_ADC_MspInit+0x22c>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e9a:	4b1d      	ldr	r3, [pc, #116]	; (8001f10 <HAL_ADC_MspInit+0x22c>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001ea0:	4b1b      	ldr	r3, [pc, #108]	; (8001f10 <HAL_ADC_MspInit+0x22c>)
 8001ea2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ea6:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ea8:	4b19      	ldr	r3, [pc, #100]	; (8001f10 <HAL_ADC_MspInit+0x22c>)
 8001eaa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001eae:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001eb0:	4b17      	ldr	r3, [pc, #92]	; (8001f10 <HAL_ADC_MspInit+0x22c>)
 8001eb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001eb6:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001eb8:	4b15      	ldr	r3, [pc, #84]	; (8001f10 <HAL_ADC_MspInit+0x22c>)
 8001eba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ebe:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001ec0:	4b13      	ldr	r3, [pc, #76]	; (8001f10 <HAL_ADC_MspInit+0x22c>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ec6:	4b12      	ldr	r3, [pc, #72]	; (8001f10 <HAL_ADC_MspInit+0x22c>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001ecc:	4810      	ldr	r0, [pc, #64]	; (8001f10 <HAL_ADC_MspInit+0x22c>)
 8001ece:	f002 fc81 	bl	80047d4 <HAL_DMA_Init>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8001ed8:	f7ff fee0 	bl	8001c9c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4a0c      	ldr	r2, [pc, #48]	; (8001f10 <HAL_ADC_MspInit+0x22c>)
 8001ee0:	64da      	str	r2, [r3, #76]	; 0x4c
 8001ee2:	4a0b      	ldr	r2, [pc, #44]	; (8001f10 <HAL_ADC_MspInit+0x22c>)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001ee8:	bf00      	nop
 8001eea:	3738      	adds	r7, #56	; 0x38
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	40022000 	.word	0x40022000
 8001ef4:	58024400 	.word	0x58024400
 8001ef8:	58020800 	.word	0x58020800
 8001efc:	58020000 	.word	0x58020000
 8001f00:	58020400 	.word	0x58020400
 8001f04:	24000164 	.word	0x24000164
 8001f08:	40020010 	.word	0x40020010
 8001f0c:	58026000 	.word	0x58026000
 8001f10:	240001dc 	.word	0x240001dc
 8001f14:	40020028 	.word	0x40020028

08001f18 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b08a      	sub	sp, #40	; 0x28
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f20:	f107 0314 	add.w	r3, r7, #20
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	605a      	str	r2, [r3, #4]
 8001f2a:	609a      	str	r2, [r3, #8]
 8001f2c:	60da      	str	r2, [r3, #12]
 8001f2e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a34      	ldr	r2, [pc, #208]	; (8002008 <HAL_DAC_MspInit+0xf0>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d161      	bne.n	8001ffe <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8001f3a:	4b34      	ldr	r3, [pc, #208]	; (800200c <HAL_DAC_MspInit+0xf4>)
 8001f3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f40:	4a32      	ldr	r2, [pc, #200]	; (800200c <HAL_DAC_MspInit+0xf4>)
 8001f42:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001f46:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001f4a:	4b30      	ldr	r3, [pc, #192]	; (800200c <HAL_DAC_MspInit+0xf4>)
 8001f4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f54:	613b      	str	r3, [r7, #16]
 8001f56:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f58:	4b2c      	ldr	r3, [pc, #176]	; (800200c <HAL_DAC_MspInit+0xf4>)
 8001f5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f5e:	4a2b      	ldr	r2, [pc, #172]	; (800200c <HAL_DAC_MspInit+0xf4>)
 8001f60:	f043 0301 	orr.w	r3, r3, #1
 8001f64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f68:	4b28      	ldr	r3, [pc, #160]	; (800200c <HAL_DAC_MspInit+0xf4>)
 8001f6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	60fb      	str	r3, [r7, #12]
 8001f74:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001f76:	2310      	movs	r3, #16
 8001f78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f82:	f107 0314 	add.w	r3, r7, #20
 8001f86:	4619      	mov	r1, r3
 8001f88:	4821      	ldr	r0, [pc, #132]	; (8002010 <HAL_DAC_MspInit+0xf8>)
 8001f8a:	f005 fa5f 	bl	800744c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8001f8e:	4b21      	ldr	r3, [pc, #132]	; (8002014 <HAL_DAC_MspInit+0xfc>)
 8001f90:	4a21      	ldr	r2, [pc, #132]	; (8002018 <HAL_DAC_MspInit+0x100>)
 8001f92:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8001f94:	4b1f      	ldr	r3, [pc, #124]	; (8002014 <HAL_DAC_MspInit+0xfc>)
 8001f96:	2243      	movs	r2, #67	; 0x43
 8001f98:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f9a:	4b1e      	ldr	r3, [pc, #120]	; (8002014 <HAL_DAC_MspInit+0xfc>)
 8001f9c:	2240      	movs	r2, #64	; 0x40
 8001f9e:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fa0:	4b1c      	ldr	r3, [pc, #112]	; (8002014 <HAL_DAC_MspInit+0xfc>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001fa6:	4b1b      	ldr	r3, [pc, #108]	; (8002014 <HAL_DAC_MspInit+0xfc>)
 8001fa8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fac:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001fae:	4b19      	ldr	r3, [pc, #100]	; (8002014 <HAL_DAC_MspInit+0xfc>)
 8001fb0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001fb4:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001fb6:	4b17      	ldr	r3, [pc, #92]	; (8002014 <HAL_DAC_MspInit+0xfc>)
 8001fb8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001fbc:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8001fbe:	4b15      	ldr	r3, [pc, #84]	; (8002014 <HAL_DAC_MspInit+0xfc>)
 8001fc0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fc4:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001fc6:	4b13      	ldr	r3, [pc, #76]	; (8002014 <HAL_DAC_MspInit+0xfc>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fcc:	4b11      	ldr	r3, [pc, #68]	; (8002014 <HAL_DAC_MspInit+0xfc>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8001fd2:	4810      	ldr	r0, [pc, #64]	; (8002014 <HAL_DAC_MspInit+0xfc>)
 8001fd4:	f002 fbfe 	bl	80047d4 <HAL_DMA_Init>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8001fde:	f7ff fe5d 	bl	8001c9c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a0b      	ldr	r2, [pc, #44]	; (8002014 <HAL_DAC_MspInit+0xfc>)
 8001fe6:	609a      	str	r2, [r3, #8]
 8001fe8:	4a0a      	ldr	r2, [pc, #40]	; (8002014 <HAL_DAC_MspInit+0xfc>)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8001fee:	2200      	movs	r2, #0
 8001ff0:	2105      	movs	r1, #5
 8001ff2:	2036      	movs	r0, #54	; 0x36
 8001ff4:	f002 f9f8 	bl	80043e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001ff8:	2036      	movs	r0, #54	; 0x36
 8001ffa:	f002 fa0f 	bl	800441c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001ffe:	bf00      	nop
 8002000:	3728      	adds	r7, #40	; 0x28
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	40007400 	.word	0x40007400
 800200c:	58024400 	.word	0x58024400
 8002010:	58020000 	.word	0x58020000
 8002014:	24000268 	.word	0x24000268
 8002018:	40020088 	.word	0x40020088

0800201c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b0ba      	sub	sp, #232	; 0xe8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002024:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	605a      	str	r2, [r3, #4]
 800202e:	609a      	str	r2, [r3, #8]
 8002030:	60da      	str	r2, [r3, #12]
 8002032:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002034:	f107 0310 	add.w	r3, r7, #16
 8002038:	22c0      	movs	r2, #192	; 0xc0
 800203a:	2100      	movs	r1, #0
 800203c:	4618      	mov	r0, r3
 800203e:	f010 fff5 	bl	801302c <memset>
  if(hi2c->Instance==I2C1)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a27      	ldr	r2, [pc, #156]	; (80020e4 <HAL_I2C_MspInit+0xc8>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d146      	bne.n	80020da <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800204c:	f04f 0208 	mov.w	r2, #8
 8002050:	f04f 0300 	mov.w	r3, #0
 8002054:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002058:	2300      	movs	r3, #0
 800205a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800205e:	f107 0310 	add.w	r3, r7, #16
 8002062:	4618      	mov	r0, r3
 8002064:	f006 fd52 	bl	8008b0c <HAL_RCCEx_PeriphCLKConfig>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800206e:	f7ff fe15 	bl	8001c9c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002072:	4b1d      	ldr	r3, [pc, #116]	; (80020e8 <HAL_I2C_MspInit+0xcc>)
 8002074:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002078:	4a1b      	ldr	r2, [pc, #108]	; (80020e8 <HAL_I2C_MspInit+0xcc>)
 800207a:	f043 0302 	orr.w	r3, r3, #2
 800207e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002082:	4b19      	ldr	r3, [pc, #100]	; (80020e8 <HAL_I2C_MspInit+0xcc>)
 8002084:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	60fb      	str	r3, [r7, #12]
 800208e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002090:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002094:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002098:	2312      	movs	r3, #18
 800209a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209e:	2300      	movs	r3, #0
 80020a0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a4:	2300      	movs	r3, #0
 80020a6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020aa:	2304      	movs	r3, #4
 80020ac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020b0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80020b4:	4619      	mov	r1, r3
 80020b6:	480d      	ldr	r0, [pc, #52]	; (80020ec <HAL_I2C_MspInit+0xd0>)
 80020b8:	f005 f9c8 	bl	800744c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020bc:	4b0a      	ldr	r3, [pc, #40]	; (80020e8 <HAL_I2C_MspInit+0xcc>)
 80020be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80020c2:	4a09      	ldr	r2, [pc, #36]	; (80020e8 <HAL_I2C_MspInit+0xcc>)
 80020c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020c8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80020cc:	4b06      	ldr	r3, [pc, #24]	; (80020e8 <HAL_I2C_MspInit+0xcc>)
 80020ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80020d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020d6:	60bb      	str	r3, [r7, #8]
 80020d8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80020da:	bf00      	nop
 80020dc:	37e8      	adds	r7, #232	; 0xe8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	40005400 	.word	0x40005400
 80020e8:	58024400 	.word	0x58024400
 80020ec:	58020400 	.word	0x58020400

080020f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b0ba      	sub	sp, #232	; 0xe8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	605a      	str	r2, [r3, #4]
 8002102:	609a      	str	r2, [r3, #8]
 8002104:	60da      	str	r2, [r3, #12]
 8002106:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002108:	f107 0310 	add.w	r3, r7, #16
 800210c:	22c0      	movs	r2, #192	; 0xc0
 800210e:	2100      	movs	r1, #0
 8002110:	4618      	mov	r0, r3
 8002112:	f010 ff8b 	bl	801302c <memset>
  if(hspi->Instance==SPI2)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a26      	ldr	r2, [pc, #152]	; (80021b4 <HAL_SPI_MspInit+0xc4>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d145      	bne.n	80021ac <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002120:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002124:	f04f 0300 	mov.w	r3, #0
 8002128:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800212c:	2300      	movs	r3, #0
 800212e:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002130:	f107 0310 	add.w	r3, r7, #16
 8002134:	4618      	mov	r0, r3
 8002136:	f006 fce9 	bl	8008b0c <HAL_RCCEx_PeriphCLKConfig>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8002140:	f7ff fdac 	bl	8001c9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002144:	4b1c      	ldr	r3, [pc, #112]	; (80021b8 <HAL_SPI_MspInit+0xc8>)
 8002146:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800214a:	4a1b      	ldr	r2, [pc, #108]	; (80021b8 <HAL_SPI_MspInit+0xc8>)
 800214c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002150:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002154:	4b18      	ldr	r3, [pc, #96]	; (80021b8 <HAL_SPI_MspInit+0xc8>)
 8002156:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800215a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800215e:	60fb      	str	r3, [r7, #12]
 8002160:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002162:	4b15      	ldr	r3, [pc, #84]	; (80021b8 <HAL_SPI_MspInit+0xc8>)
 8002164:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002168:	4a13      	ldr	r2, [pc, #76]	; (80021b8 <HAL_SPI_MspInit+0xc8>)
 800216a:	f043 0302 	orr.w	r3, r3, #2
 800216e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002172:	4b11      	ldr	r3, [pc, #68]	; (80021b8 <HAL_SPI_MspInit+0xc8>)
 8002174:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002178:	f003 0302 	and.w	r3, r3, #2
 800217c:	60bb      	str	r3, [r7, #8]
 800217e:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002180:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002184:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002188:	2302      	movs	r3, #2
 800218a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218e:	2300      	movs	r3, #0
 8002190:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002194:	2300      	movs	r3, #0
 8002196:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800219a:	2305      	movs	r3, #5
 800219c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021a0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80021a4:	4619      	mov	r1, r3
 80021a6:	4805      	ldr	r0, [pc, #20]	; (80021bc <HAL_SPI_MspInit+0xcc>)
 80021a8:	f005 f950 	bl	800744c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80021ac:	bf00      	nop
 80021ae:	37e8      	adds	r7, #232	; 0xe8
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	40003800 	.word	0x40003800
 80021b8:	58024400 	.word	0x58024400
 80021bc:	58020400 	.word	0x58020400

080021c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b086      	sub	sp, #24
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a37      	ldr	r2, [pc, #220]	; (80022ac <HAL_TIM_Base_MspInit+0xec>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d12f      	bne.n	8002232 <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021d2:	4b37      	ldr	r3, [pc, #220]	; (80022b0 <HAL_TIM_Base_MspInit+0xf0>)
 80021d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021d8:	4a35      	ldr	r2, [pc, #212]	; (80022b0 <HAL_TIM_Base_MspInit+0xf0>)
 80021da:	f043 0301 	orr.w	r3, r3, #1
 80021de:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80021e2:	4b33      	ldr	r3, [pc, #204]	; (80022b0 <HAL_TIM_Base_MspInit+0xf0>)
 80021e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021e8:	f003 0301 	and.w	r3, r3, #1
 80021ec:	617b      	str	r3, [r7, #20]
 80021ee:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 80021f0:	2200      	movs	r2, #0
 80021f2:	2105      	movs	r1, #5
 80021f4:	2018      	movs	r0, #24
 80021f6:	f002 f8f7 	bl	80043e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80021fa:	2018      	movs	r0, #24
 80021fc:	f002 f90e 	bl	800441c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8002200:	2200      	movs	r2, #0
 8002202:	2105      	movs	r1, #5
 8002204:	2019      	movs	r0, #25
 8002206:	f002 f8ef 	bl	80043e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800220a:	2019      	movs	r0, #25
 800220c:	f002 f906 	bl	800441c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 8002210:	2200      	movs	r2, #0
 8002212:	2105      	movs	r1, #5
 8002214:	201a      	movs	r0, #26
 8002216:	f002 f8e7 	bl	80043e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 800221a:	201a      	movs	r0, #26
 800221c:	f002 f8fe 	bl	800441c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8002220:	2200      	movs	r2, #0
 8002222:	2105      	movs	r1, #5
 8002224:	201b      	movs	r0, #27
 8002226:	f002 f8df 	bl	80043e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800222a:	201b      	movs	r0, #27
 800222c:	f002 f8f6 	bl	800441c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002230:	e038      	b.n	80022a4 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM2)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800223a:	d117      	bne.n	800226c <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800223c:	4b1c      	ldr	r3, [pc, #112]	; (80022b0 <HAL_TIM_Base_MspInit+0xf0>)
 800223e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002242:	4a1b      	ldr	r2, [pc, #108]	; (80022b0 <HAL_TIM_Base_MspInit+0xf0>)
 8002244:	f043 0301 	orr.w	r3, r3, #1
 8002248:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800224c:	4b18      	ldr	r3, [pc, #96]	; (80022b0 <HAL_TIM_Base_MspInit+0xf0>)
 800224e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	613b      	str	r3, [r7, #16]
 8002258:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800225a:	2200      	movs	r2, #0
 800225c:	2105      	movs	r1, #5
 800225e:	201c      	movs	r0, #28
 8002260:	f002 f8c2 	bl	80043e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002264:	201c      	movs	r0, #28
 8002266:	f002 f8d9 	bl	800441c <HAL_NVIC_EnableIRQ>
}
 800226a:	e01b      	b.n	80022a4 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM3)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a10      	ldr	r2, [pc, #64]	; (80022b4 <HAL_TIM_Base_MspInit+0xf4>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d116      	bne.n	80022a4 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002276:	4b0e      	ldr	r3, [pc, #56]	; (80022b0 <HAL_TIM_Base_MspInit+0xf0>)
 8002278:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800227c:	4a0c      	ldr	r2, [pc, #48]	; (80022b0 <HAL_TIM_Base_MspInit+0xf0>)
 800227e:	f043 0302 	orr.w	r3, r3, #2
 8002282:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002286:	4b0a      	ldr	r3, [pc, #40]	; (80022b0 <HAL_TIM_Base_MspInit+0xf0>)
 8002288:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800228c:	f003 0302 	and.w	r3, r3, #2
 8002290:	60fb      	str	r3, [r7, #12]
 8002292:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002294:	2200      	movs	r2, #0
 8002296:	2105      	movs	r1, #5
 8002298:	201d      	movs	r0, #29
 800229a:	f002 f8a5 	bl	80043e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800229e:	201d      	movs	r0, #29
 80022a0:	f002 f8bc 	bl	800441c <HAL_NVIC_EnableIRQ>
}
 80022a4:	bf00      	nop
 80022a6:	3718      	adds	r7, #24
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	40010000 	.word	0x40010000
 80022b0:	58024400 	.word	0x58024400
 80022b4:	40000400 	.word	0x40000400

080022b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b08a      	sub	sp, #40	; 0x28
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c0:	f107 0314 	add.w	r3, r7, #20
 80022c4:	2200      	movs	r2, #0
 80022c6:	601a      	str	r2, [r3, #0]
 80022c8:	605a      	str	r2, [r3, #4]
 80022ca:	609a      	str	r2, [r3, #8]
 80022cc:	60da      	str	r2, [r3, #12]
 80022ce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a26      	ldr	r2, [pc, #152]	; (8002370 <HAL_TIM_MspPostInit+0xb8>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d120      	bne.n	800231c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022da:	4b26      	ldr	r3, [pc, #152]	; (8002374 <HAL_TIM_MspPostInit+0xbc>)
 80022dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022e0:	4a24      	ldr	r2, [pc, #144]	; (8002374 <HAL_TIM_MspPostInit+0xbc>)
 80022e2:	f043 0301 	orr.w	r3, r3, #1
 80022e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022ea:	4b22      	ldr	r3, [pc, #136]	; (8002374 <HAL_TIM_MspPostInit+0xbc>)
 80022ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022f0:	f003 0301 	and.w	r3, r3, #1
 80022f4:	613b      	str	r3, [r7, #16]
 80022f6:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80022f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022fe:	2302      	movs	r3, #2
 8002300:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002302:	2300      	movs	r3, #0
 8002304:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002306:	2300      	movs	r3, #0
 8002308:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800230a:	2301      	movs	r3, #1
 800230c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800230e:	f107 0314 	add.w	r3, r7, #20
 8002312:	4619      	mov	r1, r3
 8002314:	4818      	ldr	r0, [pc, #96]	; (8002378 <HAL_TIM_MspPostInit+0xc0>)
 8002316:	f005 f899 	bl	800744c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800231a:	e024      	b.n	8002366 <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM2)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002324:	d11f      	bne.n	8002366 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002326:	4b13      	ldr	r3, [pc, #76]	; (8002374 <HAL_TIM_MspPostInit+0xbc>)
 8002328:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800232c:	4a11      	ldr	r2, [pc, #68]	; (8002374 <HAL_TIM_MspPostInit+0xbc>)
 800232e:	f043 0302 	orr.w	r3, r3, #2
 8002332:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002336:	4b0f      	ldr	r3, [pc, #60]	; (8002374 <HAL_TIM_MspPostInit+0xbc>)
 8002338:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	60fb      	str	r3, [r7, #12]
 8002342:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002344:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002348:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800234a:	2302      	movs	r3, #2
 800234c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234e:	2300      	movs	r3, #0
 8002350:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002352:	2300      	movs	r3, #0
 8002354:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002356:	2301      	movs	r3, #1
 8002358:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800235a:	f107 0314 	add.w	r3, r7, #20
 800235e:	4619      	mov	r1, r3
 8002360:	4806      	ldr	r0, [pc, #24]	; (800237c <HAL_TIM_MspPostInit+0xc4>)
 8002362:	f005 f873 	bl	800744c <HAL_GPIO_Init>
}
 8002366:	bf00      	nop
 8002368:	3728      	adds	r7, #40	; 0x28
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	40010000 	.word	0x40010000
 8002374:	58024400 	.word	0x58024400
 8002378:	58020000 	.word	0x58020000
 800237c:	58020400 	.word	0x58020400

08002380 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b0ba      	sub	sp, #232	; 0xe8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002388:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]
 8002390:	605a      	str	r2, [r3, #4]
 8002392:	609a      	str	r2, [r3, #8]
 8002394:	60da      	str	r2, [r3, #12]
 8002396:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002398:	f107 0310 	add.w	r3, r7, #16
 800239c:	22c0      	movs	r2, #192	; 0xc0
 800239e:	2100      	movs	r1, #0
 80023a0:	4618      	mov	r0, r3
 80023a2:	f010 fe43 	bl	801302c <memset>
  if(huart->Instance==USART1)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a2b      	ldr	r2, [pc, #172]	; (8002458 <HAL_UART_MspInit+0xd8>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d14e      	bne.n	800244e <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80023b0:	f04f 0201 	mov.w	r2, #1
 80023b4:	f04f 0300 	mov.w	r3, #0
 80023b8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80023bc:	2300      	movs	r3, #0
 80023be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023c2:	f107 0310 	add.w	r3, r7, #16
 80023c6:	4618      	mov	r0, r3
 80023c8:	f006 fba0 	bl	8008b0c <HAL_RCCEx_PeriphCLKConfig>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80023d2:	f7ff fc63 	bl	8001c9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80023d6:	4b21      	ldr	r3, [pc, #132]	; (800245c <HAL_UART_MspInit+0xdc>)
 80023d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80023dc:	4a1f      	ldr	r2, [pc, #124]	; (800245c <HAL_UART_MspInit+0xdc>)
 80023de:	f043 0310 	orr.w	r3, r3, #16
 80023e2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80023e6:	4b1d      	ldr	r3, [pc, #116]	; (800245c <HAL_UART_MspInit+0xdc>)
 80023e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80023ec:	f003 0310 	and.w	r3, r3, #16
 80023f0:	60fb      	str	r3, [r7, #12]
 80023f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023f4:	4b19      	ldr	r3, [pc, #100]	; (800245c <HAL_UART_MspInit+0xdc>)
 80023f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023fa:	4a18      	ldr	r2, [pc, #96]	; (800245c <HAL_UART_MspInit+0xdc>)
 80023fc:	f043 0301 	orr.w	r3, r3, #1
 8002400:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002404:	4b15      	ldr	r3, [pc, #84]	; (800245c <HAL_UART_MspInit+0xdc>)
 8002406:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	60bb      	str	r3, [r7, #8]
 8002410:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002412:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002416:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800241a:	2302      	movs	r3, #2
 800241c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002420:	2300      	movs	r3, #0
 8002422:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002426:	2300      	movs	r3, #0
 8002428:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800242c:	2307      	movs	r3, #7
 800242e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002432:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002436:	4619      	mov	r1, r3
 8002438:	4809      	ldr	r0, [pc, #36]	; (8002460 <HAL_UART_MspInit+0xe0>)
 800243a:	f005 f807 	bl	800744c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800243e:	2200      	movs	r2, #0
 8002440:	2105      	movs	r1, #5
 8002442:	2025      	movs	r0, #37	; 0x25
 8002444:	f001 ffd0 	bl	80043e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002448:	2025      	movs	r0, #37	; 0x25
 800244a:	f001 ffe7 	bl	800441c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800244e:	bf00      	nop
 8002450:	37e8      	adds	r7, #232	; 0xe8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	40011000 	.word	0x40011000
 800245c:	58024400 	.word	0x58024400
 8002460:	58020000 	.word	0x58020000

08002464 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b090      	sub	sp, #64	; 0x40
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2b0f      	cmp	r3, #15
 8002470:	d827      	bhi.n	80024c2 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8002472:	2200      	movs	r2, #0
 8002474:	6879      	ldr	r1, [r7, #4]
 8002476:	2036      	movs	r0, #54	; 0x36
 8002478:	f001 ffb6 	bl	80043e8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800247c:	2036      	movs	r0, #54	; 0x36
 800247e:	f001 ffcd 	bl	800441c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8002482:	4a29      	ldr	r2, [pc, #164]	; (8002528 <HAL_InitTick+0xc4>)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002488:	4b28      	ldr	r3, [pc, #160]	; (800252c <HAL_InitTick+0xc8>)
 800248a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800248e:	4a27      	ldr	r2, [pc, #156]	; (800252c <HAL_InitTick+0xc8>)
 8002490:	f043 0310 	orr.w	r3, r3, #16
 8002494:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002498:	4b24      	ldr	r3, [pc, #144]	; (800252c <HAL_InitTick+0xc8>)
 800249a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800249e:	f003 0310 	and.w	r3, r3, #16
 80024a2:	60fb      	str	r3, [r7, #12]
 80024a4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80024a6:	f107 0210 	add.w	r2, r7, #16
 80024aa:	f107 0314 	add.w	r3, r7, #20
 80024ae:	4611      	mov	r1, r2
 80024b0:	4618      	mov	r0, r3
 80024b2:	f006 fae9 	bl	8008a88 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80024b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b8:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80024ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d106      	bne.n	80024ce <HAL_InitTick+0x6a>
 80024c0:	e001      	b.n	80024c6 <HAL_InitTick+0x62>
    return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e02b      	b.n	800251e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80024c6:	f006 fab3 	bl	8008a30 <HAL_RCC_GetPCLK1Freq>
 80024ca:	63f8      	str	r0, [r7, #60]	; 0x3c
 80024cc:	e004      	b.n	80024d8 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80024ce:	f006 faaf 	bl	8008a30 <HAL_RCC_GetPCLK1Freq>
 80024d2:	4603      	mov	r3, r0
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80024d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024da:	4a15      	ldr	r2, [pc, #84]	; (8002530 <HAL_InitTick+0xcc>)
 80024dc:	fba2 2303 	umull	r2, r3, r2, r3
 80024e0:	0c9b      	lsrs	r3, r3, #18
 80024e2:	3b01      	subs	r3, #1
 80024e4:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80024e6:	4b13      	ldr	r3, [pc, #76]	; (8002534 <HAL_InitTick+0xd0>)
 80024e8:	4a13      	ldr	r2, [pc, #76]	; (8002538 <HAL_InitTick+0xd4>)
 80024ea:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80024ec:	4b11      	ldr	r3, [pc, #68]	; (8002534 <HAL_InitTick+0xd0>)
 80024ee:	f240 32e7 	movw	r2, #999	; 0x3e7
 80024f2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80024f4:	4a0f      	ldr	r2, [pc, #60]	; (8002534 <HAL_InitTick+0xd0>)
 80024f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024f8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80024fa:	4b0e      	ldr	r3, [pc, #56]	; (8002534 <HAL_InitTick+0xd0>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002500:	4b0c      	ldr	r3, [pc, #48]	; (8002534 <HAL_InitTick+0xd0>)
 8002502:	2200      	movs	r2, #0
 8002504:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002506:	480b      	ldr	r0, [pc, #44]	; (8002534 <HAL_InitTick+0xd0>)
 8002508:	f009 f93d 	bl	800b786 <HAL_TIM_Base_Init>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d104      	bne.n	800251c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002512:	4808      	ldr	r0, [pc, #32]	; (8002534 <HAL_InitTick+0xd0>)
 8002514:	f009 f98e 	bl	800b834 <HAL_TIM_Base_Start_IT>
 8002518:	4603      	mov	r3, r0
 800251a:	e000      	b.n	800251e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
}
 800251e:	4618      	mov	r0, r3
 8002520:	3740      	adds	r7, #64	; 0x40
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	24000008 	.word	0x24000008
 800252c:	58024400 	.word	0x58024400
 8002530:	431bde83 	.word	0x431bde83
 8002534:	240005e8 	.word	0x240005e8
 8002538:	40001000 	.word	0x40001000

0800253c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8002540:	e7fe      	b.n	8002540 <NMI_Handler+0x4>

08002542 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002542:	b480      	push	{r7}
 8002544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002546:	e7fe      	b.n	8002546 <HardFault_Handler+0x4>

08002548 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800254c:	e7fe      	b.n	800254c <MemManage_Handler+0x4>

0800254e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800254e:	b480      	push	{r7}
 8002550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002552:	e7fe      	b.n	8002552 <BusFault_Handler+0x4>

08002554 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002558:	e7fe      	b.n	8002558 <UsageFault_Handler+0x4>

0800255a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800255a:	b480      	push	{r7}
 800255c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800255e:	bf00      	nop
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800256c:	4802      	ldr	r0, [pc, #8]	; (8002578 <DMA1_Stream0_IRQHandler+0x10>)
 800256e:	f003 fc5b 	bl	8005e28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002572:	bf00      	nop
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	24000164 	.word	0x24000164

0800257c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002580:	4802      	ldr	r0, [pc, #8]	; (800258c <DMA1_Stream1_IRQHandler+0x10>)
 8002582:	f003 fc51 	bl	8005e28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002586:	bf00      	nop
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	240001dc 	.word	0x240001dc

08002590 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8002594:	4802      	ldr	r0, [pc, #8]	; (80025a0 <DMA1_Stream5_IRQHandler+0x10>)
 8002596:	f003 fc47 	bl	8005e28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800259a:	bf00      	nop
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	24000268 	.word	0x24000268

080025a4 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80025a8:	4802      	ldr	r0, [pc, #8]	; (80025b4 <TIM1_BRK_IRQHandler+0x10>)
 80025aa:	f009 fc85 	bl	800beb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80025ae:	bf00      	nop
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	240003bc 	.word	0x240003bc

080025b8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80025bc:	4802      	ldr	r0, [pc, #8]	; (80025c8 <TIM1_UP_IRQHandler+0x10>)
 80025be:	f009 fc7b 	bl	800beb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80025c2:	bf00      	nop
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	240003bc 	.word	0x240003bc

080025cc <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80025d0:	4802      	ldr	r0, [pc, #8]	; (80025dc <TIM1_TRG_COM_IRQHandler+0x10>)
 80025d2:	f009 fc71 	bl	800beb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80025d6:	bf00      	nop
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	240003bc 	.word	0x240003bc

080025e0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80025e4:	4802      	ldr	r0, [pc, #8]	; (80025f0 <TIM1_CC_IRQHandler+0x10>)
 80025e6:	f009 fc67 	bl	800beb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80025ea:	bf00      	nop
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	240003bc 	.word	0x240003bc

080025f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80025f8:	4802      	ldr	r0, [pc, #8]	; (8002604 <TIM2_IRQHandler+0x10>)
 80025fa:	f009 fc5d 	bl	800beb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80025fe:	bf00      	nop
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	24000408 	.word	0x24000408

08002608 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800260c:	4802      	ldr	r0, [pc, #8]	; (8002618 <TIM3_IRQHandler+0x10>)
 800260e:	f009 fc53 	bl	800beb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002612:	bf00      	nop
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	24000454 	.word	0x24000454

0800261c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002620:	4802      	ldr	r0, [pc, #8]	; (800262c <USART1_IRQHandler+0x10>)
 8002622:	f00a fe0f 	bl	800d244 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002626:	bf00      	nop
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	240004a0 	.word	0x240004a0

08002630 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 8002634:	4b06      	ldr	r3, [pc, #24]	; (8002650 <TIM6_DAC_IRQHandler+0x20>)
 8002636:	791b      	ldrb	r3, [r3, #4]
 8002638:	b2db      	uxtb	r3, r3
 800263a:	2b00      	cmp	r3, #0
 800263c:	d002      	beq.n	8002644 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 800263e:	4804      	ldr	r0, [pc, #16]	; (8002650 <TIM6_DAC_IRQHandler+0x20>)
 8002640:	f001 ff1c 	bl	800447c <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8002644:	4803      	ldr	r0, [pc, #12]	; (8002654 <TIM6_DAC_IRQHandler+0x24>)
 8002646:	f009 fc37 	bl	800beb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800264a:	bf00      	nop
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	24000254 	.word	0x24000254
 8002654:	240005e8 	.word	0x240005e8

08002658 <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	4603      	mov	r3, r0
 8002660:	71fb      	strb	r3, [r7, #7]
	DEMCR |= (1 << 24);
 8002662:	4b0f      	ldr	r3, [pc, #60]	; (80026a0 <ITM_SendChar+0x48>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a0e      	ldr	r2, [pc, #56]	; (80026a0 <ITM_SendChar+0x48>)
 8002668:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800266c:	6013      	str	r3, [r2, #0]

	ITM_TRACE_EN |= (1 << 0);
 800266e:	4b0d      	ldr	r3, [pc, #52]	; (80026a4 <ITM_SendChar+0x4c>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a0c      	ldr	r2, [pc, #48]	; (80026a4 <ITM_SendChar+0x4c>)
 8002674:	f043 0301 	orr.w	r3, r3, #1
 8002678:	6013      	str	r3, [r2, #0]

	while (!(ITM_STIMULUS_PORT0 & 1))
 800267a:	bf00      	nop
 800267c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	2b00      	cmp	r3, #0
 8002688:	d0f8      	beq.n	800267c <ITM_SendChar+0x24>
		;

	ITM_STIMULUS_PORT0 = ch;
 800268a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800268e:	79fb      	ldrb	r3, [r7, #7]
 8002690:	6013      	str	r3, [r2, #0]
}
 8002692:	bf00      	nop
 8002694:	370c      	adds	r7, #12
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	e000edfc 	.word	0xe000edfc
 80026a4:	e0000e00 	.word	0xe0000e00

080026a8 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b086      	sub	sp, #24
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80026b4:	2300      	movs	r3, #0
 80026b6:	617b      	str	r3, [r7, #20]
 80026b8:	e00a      	b.n	80026d0 <_read+0x28>
		*ptr++ = __io_getchar();
 80026ba:	f3af 8000 	nop.w
 80026be:	4601      	mov	r1, r0
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	1c5a      	adds	r2, r3, #1
 80026c4:	60ba      	str	r2, [r7, #8]
 80026c6:	b2ca      	uxtb	r2, r1
 80026c8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	3301      	adds	r3, #1
 80026ce:	617b      	str	r3, [r7, #20]
 80026d0:	697a      	ldr	r2, [r7, #20]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	dbf0      	blt.n	80026ba <_read+0x12>
	}

	return len;
 80026d8:	687b      	ldr	r3, [r7, #4]
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3718      	adds	r7, #24
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 80026e2:	b580      	push	{r7, lr}
 80026e4:	b086      	sub	sp, #24
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	60f8      	str	r0, [r7, #12]
 80026ea:	60b9      	str	r1, [r7, #8]
 80026ec:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80026ee:	2300      	movs	r3, #0
 80026f0:	617b      	str	r3, [r7, #20]
 80026f2:	e009      	b.n	8002708 <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	1c5a      	adds	r2, r3, #1
 80026f8:	60ba      	str	r2, [r7, #8]
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7ff ffab 	bl	8002658 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	3301      	adds	r3, #1
 8002706:	617b      	str	r3, [r7, #20]
 8002708:	697a      	ldr	r2, [r7, #20]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	429a      	cmp	r2, r3
 800270e:	dbf1      	blt.n	80026f4 <_write+0x12>
	}
	return len;
 8002710:	687b      	ldr	r3, [r7, #4]
}
 8002712:	4618      	mov	r0, r3
 8002714:	3718      	adds	r7, #24
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}

0800271a <_close>:

int _close(int file) {
 800271a:	b480      	push	{r7}
 800271c:	b083      	sub	sp, #12
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8002722:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002726:	4618      	mov	r0, r3
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr

08002732 <_fstat>:

int _fstat(int file, struct stat *st) {
 8002732:	b480      	push	{r7}
 8002734:	b083      	sub	sp, #12
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
 800273a:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002742:	605a      	str	r2, [r3, #4]
	return 0;
 8002744:	2300      	movs	r3, #0
}
 8002746:	4618      	mov	r0, r3
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr

08002752 <_isatty>:

int _isatty(int file) {
 8002752:	b480      	push	{r7}
 8002754:	b083      	sub	sp, #12
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 800275a:	2301      	movs	r3, #1
}
 800275c:	4618      	mov	r0, r3
 800275e:	370c      	adds	r7, #12
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr

08002768 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8002768:	b480      	push	{r7}
 800276a:	b085      	sub	sp, #20
 800276c:	af00      	add	r7, sp, #0
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	60b9      	str	r1, [r7, #8]
 8002772:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	3714      	adds	r7, #20
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
	...

08002784 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 800278c:	4a14      	ldr	r2, [pc, #80]	; (80027e0 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 800278e:	4b15      	ldr	r3, [pc, #84]	; (80027e4 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8002798:	4b13      	ldr	r3, [pc, #76]	; (80027e8 <_sbrk+0x64>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d102      	bne.n	80027a6 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 80027a0:	4b11      	ldr	r3, [pc, #68]	; (80027e8 <_sbrk+0x64>)
 80027a2:	4a12      	ldr	r2, [pc, #72]	; (80027ec <_sbrk+0x68>)
 80027a4:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 80027a6:	4b10      	ldr	r3, [pc, #64]	; (80027e8 <_sbrk+0x64>)
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4413      	add	r3, r2
 80027ae:	693a      	ldr	r2, [r7, #16]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d207      	bcs.n	80027c4 <_sbrk+0x40>
		errno = ENOMEM;
 80027b4:	f010 fbf2 	bl	8012f9c <__errno>
 80027b8:	4603      	mov	r3, r0
 80027ba:	220c      	movs	r2, #12
 80027bc:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 80027be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027c2:	e009      	b.n	80027d8 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 80027c4:	4b08      	ldr	r3, [pc, #32]	; (80027e8 <_sbrk+0x64>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 80027ca:	4b07      	ldr	r3, [pc, #28]	; (80027e8 <_sbrk+0x64>)
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4413      	add	r3, r2
 80027d2:	4a05      	ldr	r2, [pc, #20]	; (80027e8 <_sbrk+0x64>)
 80027d4:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 80027d6:	68fb      	ldr	r3, [r7, #12]
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3718      	adds	r7, #24
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	24080000 	.word	0x24080000
 80027e4:	00000400 	.word	0x00000400
 80027e8:	24000634 	.word	0x24000634
 80027ec:	24004fa0 	.word	0x24004fa0

080027f0 <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 80027f4:	4b37      	ldr	r3, [pc, #220]	; (80028d4 <SystemInit+0xe4>)
 80027f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027fa:	4a36      	ldr	r2, [pc, #216]	; (80028d4 <SystemInit+0xe4>)
 80027fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002800:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8002804:	4b34      	ldr	r3, [pc, #208]	; (80028d8 <SystemInit+0xe8>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 030f 	and.w	r3, r3, #15
 800280c:	2b06      	cmp	r3, #6
 800280e:	d807      	bhi.n	8002820 <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8002810:	4b31      	ldr	r3, [pc, #196]	; (80028d8 <SystemInit+0xe8>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f023 030f 	bic.w	r3, r3, #15
 8002818:	4a2f      	ldr	r2, [pc, #188]	; (80028d8 <SystemInit+0xe8>)
 800281a:	f043 0307 	orr.w	r3, r3, #7
 800281e:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 8002820:	4b2e      	ldr	r3, [pc, #184]	; (80028dc <SystemInit+0xec>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a2d      	ldr	r2, [pc, #180]	; (80028dc <SystemInit+0xec>)
 8002826:	f043 0301 	orr.w	r3, r3, #1
 800282a:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 800282c:	4b2b      	ldr	r3, [pc, #172]	; (80028dc <SystemInit+0xec>)
 800282e:	2200      	movs	r2, #0
 8002830:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 8002832:	4b2a      	ldr	r3, [pc, #168]	; (80028dc <SystemInit+0xec>)
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	4929      	ldr	r1, [pc, #164]	; (80028dc <SystemInit+0xec>)
 8002838:	4b29      	ldr	r3, [pc, #164]	; (80028e0 <SystemInit+0xf0>)
 800283a:	4013      	ands	r3, r2
 800283c:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 800283e:	4b26      	ldr	r3, [pc, #152]	; (80028d8 <SystemInit+0xe8>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0308 	and.w	r3, r3, #8
 8002846:	2b00      	cmp	r3, #0
 8002848:	d007      	beq.n	800285a <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 800284a:	4b23      	ldr	r3, [pc, #140]	; (80028d8 <SystemInit+0xe8>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f023 030f 	bic.w	r3, r3, #15
 8002852:	4a21      	ldr	r2, [pc, #132]	; (80028d8 <SystemInit+0xe8>)
 8002854:	f043 0307 	orr.w	r3, r3, #7
 8002858:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 800285a:	4b20      	ldr	r3, [pc, #128]	; (80028dc <SystemInit+0xec>)
 800285c:	2200      	movs	r2, #0
 800285e:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8002860:	4b1e      	ldr	r3, [pc, #120]	; (80028dc <SystemInit+0xec>)
 8002862:	2200      	movs	r2, #0
 8002864:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 8002866:	4b1d      	ldr	r3, [pc, #116]	; (80028dc <SystemInit+0xec>)
 8002868:	2200      	movs	r2, #0
 800286a:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 800286c:	4b1b      	ldr	r3, [pc, #108]	; (80028dc <SystemInit+0xec>)
 800286e:	4a1d      	ldr	r2, [pc, #116]	; (80028e4 <SystemInit+0xf4>)
 8002870:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 8002872:	4b1a      	ldr	r3, [pc, #104]	; (80028dc <SystemInit+0xec>)
 8002874:	4a1c      	ldr	r2, [pc, #112]	; (80028e8 <SystemInit+0xf8>)
 8002876:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8002878:	4b18      	ldr	r3, [pc, #96]	; (80028dc <SystemInit+0xec>)
 800287a:	4a1c      	ldr	r2, [pc, #112]	; (80028ec <SystemInit+0xfc>)
 800287c:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 800287e:	4b17      	ldr	r3, [pc, #92]	; (80028dc <SystemInit+0xec>)
 8002880:	2200      	movs	r2, #0
 8002882:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8002884:	4b15      	ldr	r3, [pc, #84]	; (80028dc <SystemInit+0xec>)
 8002886:	4a19      	ldr	r2, [pc, #100]	; (80028ec <SystemInit+0xfc>)
 8002888:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 800288a:	4b14      	ldr	r3, [pc, #80]	; (80028dc <SystemInit+0xec>)
 800288c:	2200      	movs	r2, #0
 800288e:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 8002890:	4b12      	ldr	r3, [pc, #72]	; (80028dc <SystemInit+0xec>)
 8002892:	4a16      	ldr	r2, [pc, #88]	; (80028ec <SystemInit+0xfc>)
 8002894:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8002896:	4b11      	ldr	r3, [pc, #68]	; (80028dc <SystemInit+0xec>)
 8002898:	2200      	movs	r2, #0
 800289a:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 800289c:	4b0f      	ldr	r3, [pc, #60]	; (80028dc <SystemInit+0xec>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a0e      	ldr	r2, [pc, #56]	; (80028dc <SystemInit+0xec>)
 80028a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028a6:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 80028a8:	4b0c      	ldr	r3, [pc, #48]	; (80028dc <SystemInit+0xec>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 80028ae:	4b10      	ldr	r3, [pc, #64]	; (80028f0 <SystemInit+0x100>)
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	4b10      	ldr	r3, [pc, #64]	; (80028f4 <SystemInit+0x104>)
 80028b4:	4013      	ands	r3, r2
 80028b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028ba:	d202      	bcs.n	80028c2 <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 80028bc:	4b0e      	ldr	r3, [pc, #56]	; (80028f8 <SystemInit+0x108>)
 80028be:	2201      	movs	r2, #1
 80028c0:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80028c2:	4b0e      	ldr	r3, [pc, #56]	; (80028fc <SystemInit+0x10c>)
 80028c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80028c8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80028ca:	bf00      	nop
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr
 80028d4:	e000ed00 	.word	0xe000ed00
 80028d8:	52002000 	.word	0x52002000
 80028dc:	58024400 	.word	0x58024400
 80028e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80028e4:	02020200 	.word	0x02020200
 80028e8:	01ff0000 	.word	0x01ff0000
 80028ec:	01010280 	.word	0x01010280
 80028f0:	5c001000 	.word	0x5c001000
 80028f4:	ffff0000 	.word	0xffff0000
 80028f8:	51008108 	.word	0x51008108
 80028fc:	52004000 	.word	0x52004000

08002900 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002900:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002938 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002904:	f7ff ff74 	bl	80027f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002908:	480c      	ldr	r0, [pc, #48]	; (800293c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800290a:	490d      	ldr	r1, [pc, #52]	; (8002940 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800290c:	4a0d      	ldr	r2, [pc, #52]	; (8002944 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800290e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002910:	e002      	b.n	8002918 <LoopCopyDataInit>

08002912 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002912:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002914:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002916:	3304      	adds	r3, #4

08002918 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002918:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800291a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800291c:	d3f9      	bcc.n	8002912 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800291e:	4a0a      	ldr	r2, [pc, #40]	; (8002948 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002920:	4c0a      	ldr	r4, [pc, #40]	; (800294c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002922:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002924:	e001      	b.n	800292a <LoopFillZerobss>

08002926 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002926:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002928:	3204      	adds	r2, #4

0800292a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800292a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800292c:	d3fb      	bcc.n	8002926 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800292e:	f010 fb3b 	bl	8012fa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002932:	f7fe f811 	bl	8000958 <main>
  bx  lr
 8002936:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002938:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800293c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002940:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8002944:	0801441c 	.word	0x0801441c
  ldr r2, =_sbss
 8002948:	24000080 	.word	0x24000080
  ldr r4, =_ebss
 800294c:	24004f9c 	.word	0x24004f9c

08002950 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002950:	e7fe      	b.n	8002950 <ADC3_IRQHandler>
	...

08002954 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800295a:	2003      	movs	r0, #3
 800295c:	f001 fd39 	bl	80043d2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002960:	f005 febc 	bl	80086dc <HAL_RCC_GetSysClockFreq>
 8002964:	4602      	mov	r2, r0
 8002966:	4b15      	ldr	r3, [pc, #84]	; (80029bc <HAL_Init+0x68>)
 8002968:	699b      	ldr	r3, [r3, #24]
 800296a:	0a1b      	lsrs	r3, r3, #8
 800296c:	f003 030f 	and.w	r3, r3, #15
 8002970:	4913      	ldr	r1, [pc, #76]	; (80029c0 <HAL_Init+0x6c>)
 8002972:	5ccb      	ldrb	r3, [r1, r3]
 8002974:	f003 031f 	and.w	r3, r3, #31
 8002978:	fa22 f303 	lsr.w	r3, r2, r3
 800297c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800297e:	4b0f      	ldr	r3, [pc, #60]	; (80029bc <HAL_Init+0x68>)
 8002980:	699b      	ldr	r3, [r3, #24]
 8002982:	f003 030f 	and.w	r3, r3, #15
 8002986:	4a0e      	ldr	r2, [pc, #56]	; (80029c0 <HAL_Init+0x6c>)
 8002988:	5cd3      	ldrb	r3, [r2, r3]
 800298a:	f003 031f 	and.w	r3, r3, #31
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	fa22 f303 	lsr.w	r3, r2, r3
 8002994:	4a0b      	ldr	r2, [pc, #44]	; (80029c4 <HAL_Init+0x70>)
 8002996:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002998:	4a0b      	ldr	r2, [pc, #44]	; (80029c8 <HAL_Init+0x74>)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800299e:	2005      	movs	r0, #5
 80029a0:	f7ff fd60 	bl	8002464 <HAL_InitTick>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e002      	b.n	80029b4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80029ae:	f7ff f97b 	bl	8001ca8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029b2:	2300      	movs	r3, #0
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3708      	adds	r7, #8
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	58024400 	.word	0x58024400
 80029c0:	08014334 	.word	0x08014334
 80029c4:	24000004 	.word	0x24000004
 80029c8:	24000000 	.word	0x24000000

080029cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80029d0:	4b06      	ldr	r3, [pc, #24]	; (80029ec <HAL_IncTick+0x20>)
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	461a      	mov	r2, r3
 80029d6:	4b06      	ldr	r3, [pc, #24]	; (80029f0 <HAL_IncTick+0x24>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4413      	add	r3, r2
 80029dc:	4a04      	ldr	r2, [pc, #16]	; (80029f0 <HAL_IncTick+0x24>)
 80029de:	6013      	str	r3, [r2, #0]
}
 80029e0:	bf00      	nop
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	2400000c 	.word	0x2400000c
 80029f0:	24000638 	.word	0x24000638

080029f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0
  return uwTick;
 80029f8:	4b03      	ldr	r3, [pc, #12]	; (8002a08 <HAL_GetTick+0x14>)
 80029fa:	681b      	ldr	r3, [r3, #0]
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	24000638 	.word	0x24000638

08002a0c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002a10:	4b03      	ldr	r3, [pc, #12]	; (8002a20 <HAL_GetREVID+0x14>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	0c1b      	lsrs	r3, r3, #16
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr
 8002a20:	5c001000 	.word	0x5c001000

08002a24 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8002a2e:	4b07      	ldr	r3, [pc, #28]	; (8002a4c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002a30:	685a      	ldr	r2, [r3, #4]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	43db      	mvns	r3, r3
 8002a36:	401a      	ands	r2, r3
 8002a38:	4904      	ldr	r1, [pc, #16]	; (8002a4c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	604b      	str	r3, [r1, #4]
}
 8002a40:	bf00      	nop
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr
 8002a4c:	58000400 	.word	0x58000400

08002a50 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	431a      	orrs	r2, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	609a      	str	r2, [r3, #8]
}
 8002a6a:	bf00      	nop
 8002a6c:	370c      	adds	r7, #12
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr

08002a76 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002a76:	b480      	push	{r7}
 8002a78:	b083      	sub	sp, #12
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
 8002a7e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	431a      	orrs	r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	609a      	str	r2, [r3, #8]
}
 8002a90:	bf00      	nop
 8002a92:	370c      	adds	r7, #12
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b087      	sub	sp, #28
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	607a      	str	r2, [r7, #4]
 8002ac4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	3360      	adds	r3, #96	; 0x60
 8002aca:	461a      	mov	r2, r3
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	4413      	add	r3, r2
 8002ad2:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	430b      	orrs	r3, r1
 8002ae6:	431a      	orrs	r2, r3
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002aec:	bf00      	nop
 8002aee:	371c      	adds	r7, #28
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b085      	sub	sp, #20
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	691b      	ldr	r3, [r3, #16]
 8002b08:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	f003 031f 	and.w	r3, r3, #31
 8002b12:	6879      	ldr	r1, [r7, #4]
 8002b14:	fa01 f303 	lsl.w	r3, r1, r3
 8002b18:	431a      	orrs	r2, r3
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	611a      	str	r2, [r3, #16]
}
 8002b1e:	bf00      	nop
 8002b20:	3714      	adds	r7, #20
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr

08002b2a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	b087      	sub	sp, #28
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	60f8      	str	r0, [r7, #12]
 8002b32:	60b9      	str	r1, [r7, #8]
 8002b34:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	3360      	adds	r3, #96	; 0x60
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	4413      	add	r3, r2
 8002b42:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	431a      	orrs	r2, r3
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	601a      	str	r2, [r3, #0]
  }
}
 8002b54:	bf00      	nop
 8002b56:	371c      	adds	r7, #28
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d101      	bne.n	8002b78 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002b74:	2301      	movs	r3, #1
 8002b76:	e000      	b.n	8002b7a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr

08002b86 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002b86:	b480      	push	{r7}
 8002b88:	b087      	sub	sp, #28
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	60f8      	str	r0, [r7, #12]
 8002b8e:	60b9      	str	r1, [r7, #8]
 8002b90:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	3330      	adds	r3, #48	; 0x30
 8002b96:	461a      	mov	r2, r3
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	0a1b      	lsrs	r3, r3, #8
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	f003 030c 	and.w	r3, r3, #12
 8002ba2:	4413      	add	r3, r2
 8002ba4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	f003 031f 	and.w	r3, r3, #31
 8002bb0:	211f      	movs	r1, #31
 8002bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8002bb6:	43db      	mvns	r3, r3
 8002bb8:	401a      	ands	r2, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	0e9b      	lsrs	r3, r3, #26
 8002bbe:	f003 011f 	and.w	r1, r3, #31
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	f003 031f 	and.w	r3, r3, #31
 8002bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bcc:	431a      	orrs	r2, r3
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002bd2:	bf00      	nop
 8002bd4:	371c      	adds	r7, #28
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr

08002bde <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002bde:	b480      	push	{r7}
 8002be0:	b083      	sub	sp, #12
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
 8002be6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	f023 0203 	bic.w	r2, r3, #3
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	431a      	orrs	r2, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	60da      	str	r2, [r3, #12]
}
 8002bf8:	bf00      	nop
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b087      	sub	sp, #28
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	3314      	adds	r3, #20
 8002c14:	461a      	mov	r2, r3
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	0e5b      	lsrs	r3, r3, #25
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	f003 0304 	and.w	r3, r3, #4
 8002c20:	4413      	add	r3, r2
 8002c22:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	0d1b      	lsrs	r3, r3, #20
 8002c2c:	f003 031f 	and.w	r3, r3, #31
 8002c30:	2107      	movs	r1, #7
 8002c32:	fa01 f303 	lsl.w	r3, r1, r3
 8002c36:	43db      	mvns	r3, r3
 8002c38:	401a      	ands	r2, r3
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	0d1b      	lsrs	r3, r3, #20
 8002c3e:	f003 031f 	and.w	r3, r3, #31
 8002c42:	6879      	ldr	r1, [r7, #4]
 8002c44:	fa01 f303 	lsl.w	r3, r1, r3
 8002c48:	431a      	orrs	r2, r3
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002c4e:	bf00      	nop
 8002c50:	371c      	adds	r7, #28
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
	...

08002c5c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b085      	sub	sp, #20
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	60b9      	str	r1, [r7, #8]
 8002c66:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c74:	43db      	mvns	r3, r3
 8002c76:	401a      	ands	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f003 0318 	and.w	r3, r3, #24
 8002c7e:	4908      	ldr	r1, [pc, #32]	; (8002ca0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002c80:	40d9      	lsrs	r1, r3
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	400b      	ands	r3, r1
 8002c86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c8a:	431a      	orrs	r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002c92:	bf00      	nop
 8002c94:	3714      	adds	r7, #20
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	000fffff 	.word	0x000fffff

08002ca4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f003 031f 	and.w	r3, r3, #31
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689a      	ldr	r2, [r3, #8]
 8002ccc:	4b04      	ldr	r3, [pc, #16]	; (8002ce0 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002cce:	4013      	ands	r3, r2
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	6093      	str	r3, [r2, #8]
}
 8002cd4:	bf00      	nop
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr
 8002ce0:	5fffffc0 	.word	0x5fffffc0

08002ce4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002cf4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cf8:	d101      	bne.n	8002cfe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e000      	b.n	8002d00 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689a      	ldr	r2, [r3, #8]
 8002d18:	4b05      	ldr	r3, [pc, #20]	; (8002d30 <LL_ADC_EnableInternalRegulator+0x24>)
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002d24:	bf00      	nop
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr
 8002d30:	6fffffc0 	.word	0x6fffffc0

08002d34 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d48:	d101      	bne.n	8002d4e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e000      	b.n	8002d50 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002d4e:	2300      	movs	r3, #0
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	689a      	ldr	r2, [r3, #8]
 8002d68:	4b05      	ldr	r3, [pc, #20]	; (8002d80 <LL_ADC_Enable+0x24>)
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	f043 0201 	orr.w	r2, r3, #1
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002d74:	bf00      	nop
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr
 8002d80:	7fffffc0 	.word	0x7fffffc0

08002d84 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689a      	ldr	r2, [r3, #8]
 8002d90:	4b05      	ldr	r3, [pc, #20]	; (8002da8 <LL_ADC_Disable+0x24>)
 8002d92:	4013      	ands	r3, r2
 8002d94:	f043 0202 	orr.w	r2, r3, #2
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr
 8002da8:	7fffffc0 	.word	0x7fffffc0

08002dac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f003 0301 	and.w	r3, r3, #1
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d101      	bne.n	8002dc4 <LL_ADC_IsEnabled+0x18>
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e000      	b.n	8002dc6 <LL_ADC_IsEnabled+0x1a>
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr

08002dd2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	b083      	sub	sp, #12
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d101      	bne.n	8002dea <LL_ADC_IsDisableOngoing+0x18>
 8002de6:	2301      	movs	r3, #1
 8002de8:	e000      	b.n	8002dec <LL_ADC_IsDisableOngoing+0x1a>
 8002dea:	2300      	movs	r3, #0
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	689a      	ldr	r2, [r3, #8]
 8002e04:	4b05      	ldr	r3, [pc, #20]	; (8002e1c <LL_ADC_REG_StartConversion+0x24>)
 8002e06:	4013      	ands	r3, r2
 8002e08:	f043 0204 	orr.w	r2, r3, #4
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr
 8002e1c:	7fffffc0 	.word	0x7fffffc0

08002e20 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f003 0304 	and.w	r3, r3, #4
 8002e30:	2b04      	cmp	r3, #4
 8002e32:	d101      	bne.n	8002e38 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e34:	2301      	movs	r3, #1
 8002e36:	e000      	b.n	8002e3a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr

08002e46 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002e46:	b480      	push	{r7}
 8002e48:	b083      	sub	sp, #12
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f003 0308 	and.w	r3, r3, #8
 8002e56:	2b08      	cmp	r3, #8
 8002e58:	d101      	bne.n	8002e5e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e000      	b.n	8002e60 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002e5e:	2300      	movs	r3, #0
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002e6c:	b590      	push	{r4, r7, lr}
 8002e6e:	b089      	sub	sp, #36	; 0x24
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e74:	2300      	movs	r3, #0
 8002e76:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d101      	bne.n	8002e86 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e18f      	b.n	80031a6 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d109      	bne.n	8002ea8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f7fe ff25 	bl	8001ce4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7ff ff19 	bl	8002ce4 <LL_ADC_IsDeepPowerDownEnabled>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d004      	beq.n	8002ec2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7ff feff 	bl	8002cc0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7ff ff34 	bl	8002d34 <LL_ADC_IsInternalRegulatorEnabled>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d114      	bne.n	8002efc <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7ff ff18 	bl	8002d0c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002edc:	4b87      	ldr	r3, [pc, #540]	; (80030fc <HAL_ADC_Init+0x290>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	099b      	lsrs	r3, r3, #6
 8002ee2:	4a87      	ldr	r2, [pc, #540]	; (8003100 <HAL_ADC_Init+0x294>)
 8002ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee8:	099b      	lsrs	r3, r3, #6
 8002eea:	3301      	adds	r3, #1
 8002eec:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002eee:	e002      	b.n	8002ef6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d1f9      	bne.n	8002ef0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4618      	mov	r0, r3
 8002f02:	f7ff ff17 	bl	8002d34 <LL_ADC_IsInternalRegulatorEnabled>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d10d      	bne.n	8002f28 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f10:	f043 0210 	orr.w	r2, r3, #16
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f1c:	f043 0201 	orr.w	r2, r3, #1
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7ff ff77 	bl	8002e20 <LL_ADC_REG_IsConversionOngoing>
 8002f32:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f38:	f003 0310 	and.w	r3, r3, #16
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	f040 8129 	bne.w	8003194 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	f040 8125 	bne.w	8003194 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f4e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002f52:	f043 0202 	orr.w	r2, r3, #2
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7ff ff24 	bl	8002dac <LL_ADC_IsEnabled>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d136      	bne.n	8002fd8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a65      	ldr	r2, [pc, #404]	; (8003104 <HAL_ADC_Init+0x298>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d004      	beq.n	8002f7e <HAL_ADC_Init+0x112>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a63      	ldr	r2, [pc, #396]	; (8003108 <HAL_ADC_Init+0x29c>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d10e      	bne.n	8002f9c <HAL_ADC_Init+0x130>
 8002f7e:	4861      	ldr	r0, [pc, #388]	; (8003104 <HAL_ADC_Init+0x298>)
 8002f80:	f7ff ff14 	bl	8002dac <LL_ADC_IsEnabled>
 8002f84:	4604      	mov	r4, r0
 8002f86:	4860      	ldr	r0, [pc, #384]	; (8003108 <HAL_ADC_Init+0x29c>)
 8002f88:	f7ff ff10 	bl	8002dac <LL_ADC_IsEnabled>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	4323      	orrs	r3, r4
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	bf0c      	ite	eq
 8002f94:	2301      	moveq	r3, #1
 8002f96:	2300      	movne	r3, #0
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	e008      	b.n	8002fae <HAL_ADC_Init+0x142>
 8002f9c:	485b      	ldr	r0, [pc, #364]	; (800310c <HAL_ADC_Init+0x2a0>)
 8002f9e:	f7ff ff05 	bl	8002dac <LL_ADC_IsEnabled>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	bf0c      	ite	eq
 8002fa8:	2301      	moveq	r3, #1
 8002faa:	2300      	movne	r3, #0
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d012      	beq.n	8002fd8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a53      	ldr	r2, [pc, #332]	; (8003104 <HAL_ADC_Init+0x298>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d004      	beq.n	8002fc6 <HAL_ADC_Init+0x15a>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a51      	ldr	r2, [pc, #324]	; (8003108 <HAL_ADC_Init+0x29c>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d101      	bne.n	8002fca <HAL_ADC_Init+0x15e>
 8002fc6:	4a52      	ldr	r2, [pc, #328]	; (8003110 <HAL_ADC_Init+0x2a4>)
 8002fc8:	e000      	b.n	8002fcc <HAL_ADC_Init+0x160>
 8002fca:	4a52      	ldr	r2, [pc, #328]	; (8003114 <HAL_ADC_Init+0x2a8>)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	4610      	mov	r0, r2
 8002fd4:	f7ff fd3c 	bl	8002a50 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002fd8:	f7ff fd18 	bl	8002a0c <HAL_GetREVID>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	f241 0203 	movw	r2, #4099	; 0x1003
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d914      	bls.n	8003010 <HAL_ADC_Init+0x1a4>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	2b10      	cmp	r3, #16
 8002fec:	d110      	bne.n	8003010 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	7d5b      	ldrb	r3, [r3, #21]
 8002ff2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002ff8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002ffe:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	7f1b      	ldrb	r3, [r3, #28]
 8003004:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003006:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003008:	f043 030c 	orr.w	r3, r3, #12
 800300c:	61bb      	str	r3, [r7, #24]
 800300e:	e00d      	b.n	800302c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	7d5b      	ldrb	r3, [r3, #21]
 8003014:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800301a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003020:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	7f1b      	ldrb	r3, [r3, #28]
 8003026:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003028:	4313      	orrs	r3, r2
 800302a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	7f1b      	ldrb	r3, [r3, #28]
 8003030:	2b01      	cmp	r3, #1
 8003032:	d106      	bne.n	8003042 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a1b      	ldr	r3, [r3, #32]
 8003038:	3b01      	subs	r3, #1
 800303a:	045b      	lsls	r3, r3, #17
 800303c:	69ba      	ldr	r2, [r7, #24]
 800303e:	4313      	orrs	r3, r2
 8003040:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003046:	2b00      	cmp	r3, #0
 8003048:	d009      	beq.n	800305e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003056:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	4313      	orrs	r3, r2
 800305c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	68da      	ldr	r2, [r3, #12]
 8003064:	4b2c      	ldr	r3, [pc, #176]	; (8003118 <HAL_ADC_Init+0x2ac>)
 8003066:	4013      	ands	r3, r2
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	6812      	ldr	r2, [r2, #0]
 800306c:	69b9      	ldr	r1, [r7, #24]
 800306e:	430b      	orrs	r3, r1
 8003070:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4618      	mov	r0, r3
 8003078:	f7ff fed2 	bl	8002e20 <LL_ADC_REG_IsConversionOngoing>
 800307c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4618      	mov	r0, r3
 8003084:	f7ff fedf 	bl	8002e46 <LL_ADC_INJ_IsConversionOngoing>
 8003088:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d15f      	bne.n	8003150 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d15c      	bne.n	8003150 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	7d1b      	ldrb	r3, [r3, #20]
 800309a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80030a0:	4313      	orrs	r3, r2
 80030a2:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68da      	ldr	r2, [r3, #12]
 80030aa:	4b1c      	ldr	r3, [pc, #112]	; (800311c <HAL_ADC_Init+0x2b0>)
 80030ac:	4013      	ands	r3, r2
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	6812      	ldr	r2, [r2, #0]
 80030b2:	69b9      	ldr	r1, [r7, #24]
 80030b4:	430b      	orrs	r3, r1
 80030b6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d130      	bne.n	8003124 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c6:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	691a      	ldr	r2, [r3, #16]
 80030ce:	4b14      	ldr	r3, [pc, #80]	; (8003120 <HAL_ADC_Init+0x2b4>)
 80030d0:	4013      	ands	r3, r2
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80030d6:	3a01      	subs	r2, #1
 80030d8:	0411      	lsls	r1, r2, #16
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80030de:	4311      	orrs	r1, r2
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80030e4:	4311      	orrs	r1, r2
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80030ea:	430a      	orrs	r2, r1
 80030ec:	431a      	orrs	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f042 0201 	orr.w	r2, r2, #1
 80030f6:	611a      	str	r2, [r3, #16]
 80030f8:	e01c      	b.n	8003134 <HAL_ADC_Init+0x2c8>
 80030fa:	bf00      	nop
 80030fc:	24000000 	.word	0x24000000
 8003100:	053e2d63 	.word	0x053e2d63
 8003104:	40022000 	.word	0x40022000
 8003108:	40022100 	.word	0x40022100
 800310c:	58026000 	.word	0x58026000
 8003110:	40022300 	.word	0x40022300
 8003114:	58026300 	.word	0x58026300
 8003118:	fff0c003 	.word	0xfff0c003
 800311c:	ffffbffc 	.word	0xffffbffc
 8003120:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	691a      	ldr	r2, [r3, #16]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f022 0201 	bic.w	r2, r2, #1
 8003132:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	430a      	orrs	r2, r1
 8003148:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f000 fdec 	bl	8003d28 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	2b01      	cmp	r3, #1
 8003156:	d10c      	bne.n	8003172 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315e:	f023 010f 	bic.w	r1, r3, #15
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	1e5a      	subs	r2, r3, #1
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	430a      	orrs	r2, r1
 800316e:	631a      	str	r2, [r3, #48]	; 0x30
 8003170:	e007      	b.n	8003182 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f022 020f 	bic.w	r2, r2, #15
 8003180:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003186:	f023 0303 	bic.w	r3, r3, #3
 800318a:	f043 0201 	orr.w	r2, r3, #1
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	655a      	str	r2, [r3, #84]	; 0x54
 8003192:	e007      	b.n	80031a4 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003198:	f043 0210 	orr.w	r2, r3, #16
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80031a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3724      	adds	r7, #36	; 0x24
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd90      	pop	{r4, r7, pc}
 80031ae:	bf00      	nop

080031b0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b086      	sub	sp, #24
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	60b9      	str	r1, [r7, #8]
 80031ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a55      	ldr	r2, [pc, #340]	; (8003318 <HAL_ADC_Start_DMA+0x168>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d004      	beq.n	80031d0 <HAL_ADC_Start_DMA+0x20>
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a54      	ldr	r2, [pc, #336]	; (800331c <HAL_ADC_Start_DMA+0x16c>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d101      	bne.n	80031d4 <HAL_ADC_Start_DMA+0x24>
 80031d0:	4b53      	ldr	r3, [pc, #332]	; (8003320 <HAL_ADC_Start_DMA+0x170>)
 80031d2:	e000      	b.n	80031d6 <HAL_ADC_Start_DMA+0x26>
 80031d4:	4b53      	ldr	r3, [pc, #332]	; (8003324 <HAL_ADC_Start_DMA+0x174>)
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7ff fd64 	bl	8002ca4 <LL_ADC_GetMultimode>
 80031dc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7ff fe1c 	bl	8002e20 <LL_ADC_REG_IsConversionOngoing>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	f040 808c 	bne.w	8003308 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d101      	bne.n	80031fe <HAL_ADC_Start_DMA+0x4e>
 80031fa:	2302      	movs	r3, #2
 80031fc:	e087      	b.n	800330e <HAL_ADC_Start_DMA+0x15e>
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2201      	movs	r2, #1
 8003202:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d005      	beq.n	8003218 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	2b05      	cmp	r3, #5
 8003210:	d002      	beq.n	8003218 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	2b09      	cmp	r3, #9
 8003216:	d170      	bne.n	80032fa <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003218:	68f8      	ldr	r0, [r7, #12]
 800321a:	f000 fc07 	bl	8003a2c <ADC_Enable>
 800321e:	4603      	mov	r3, r0
 8003220:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003222:	7dfb      	ldrb	r3, [r7, #23]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d163      	bne.n	80032f0 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800322c:	4b3e      	ldr	r3, [pc, #248]	; (8003328 <HAL_ADC_Start_DMA+0x178>)
 800322e:	4013      	ands	r3, r2
 8003230:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a37      	ldr	r2, [pc, #220]	; (800331c <HAL_ADC_Start_DMA+0x16c>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d002      	beq.n	8003248 <HAL_ADC_Start_DMA+0x98>
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	e000      	b.n	800324a <HAL_ADC_Start_DMA+0x9a>
 8003248:	4b33      	ldr	r3, [pc, #204]	; (8003318 <HAL_ADC_Start_DMA+0x168>)
 800324a:	68fa      	ldr	r2, [r7, #12]
 800324c:	6812      	ldr	r2, [r2, #0]
 800324e:	4293      	cmp	r3, r2
 8003250:	d002      	beq.n	8003258 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d105      	bne.n	8003264 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800325c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003268:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d006      	beq.n	800327e <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003274:	f023 0206 	bic.w	r2, r3, #6
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	659a      	str	r2, [r3, #88]	; 0x58
 800327c:	e002      	b.n	8003284 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2200      	movs	r2, #0
 8003282:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003288:	4a28      	ldr	r2, [pc, #160]	; (800332c <HAL_ADC_Start_DMA+0x17c>)
 800328a:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003290:	4a27      	ldr	r2, [pc, #156]	; (8003330 <HAL_ADC_Start_DMA+0x180>)
 8003292:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003298:	4a26      	ldr	r2, [pc, #152]	; (8003334 <HAL_ADC_Start_DMA+0x184>)
 800329a:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	221c      	movs	r2, #28
 80032a2:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	685a      	ldr	r2, [r3, #4]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f042 0210 	orr.w	r2, r2, #16
 80032ba:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c4:	4619      	mov	r1, r3
 80032c6:	4610      	mov	r0, r2
 80032c8:	f7ff fc89 	bl	8002bde <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	3340      	adds	r3, #64	; 0x40
 80032d6:	4619      	mov	r1, r3
 80032d8:	68ba      	ldr	r2, [r7, #8]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f001 fdd6 	bl	8004e8c <HAL_DMA_Start_IT>
 80032e0:	4603      	mov	r3, r0
 80032e2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7ff fd85 	bl	8002df8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80032ee:	e00d      	b.n	800330c <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 80032f8:	e008      	b.n	800330c <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003306:	e001      	b.n	800330c <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003308:	2302      	movs	r3, #2
 800330a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800330c:	7dfb      	ldrb	r3, [r7, #23]
}
 800330e:	4618      	mov	r0, r3
 8003310:	3718      	adds	r7, #24
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	40022000 	.word	0x40022000
 800331c:	40022100 	.word	0x40022100
 8003320:	40022300 	.word	0x40022300
 8003324:	58026300 	.word	0x58026300
 8003328:	fffff0fe 	.word	0xfffff0fe
 800332c:	08003bff 	.word	0x08003bff
 8003330:	08003cd7 	.word	0x08003cd7
 8003334:	08003cf3 	.word	0x08003cf3

08003338 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003340:	bf00      	nop
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003354:	bf00      	nop
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003368:	bf00      	nop
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003374:	b590      	push	{r4, r7, lr}
 8003376:	b0a1      	sub	sp, #132	; 0x84
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800337e:	2300      	movs	r3, #0
 8003380:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003384:	2300      	movs	r3, #0
 8003386:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	4a65      	ldr	r2, [pc, #404]	; (8003524 <HAL_ADC_ConfigChannel+0x1b0>)
 800338e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003396:	2b01      	cmp	r3, #1
 8003398:	d101      	bne.n	800339e <HAL_ADC_ConfigChannel+0x2a>
 800339a:	2302      	movs	r3, #2
 800339c:	e32e      	b.n	80039fc <HAL_ADC_ConfigChannel+0x688>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2201      	movs	r2, #1
 80033a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7ff fd38 	bl	8002e20 <LL_ADC_REG_IsConversionOngoing>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	f040 8313 	bne.w	80039de <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	db2c      	blt.n	800341a <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d108      	bne.n	80033de <HAL_ADC_ConfigChannel+0x6a>
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	0e9b      	lsrs	r3, r3, #26
 80033d2:	f003 031f 	and.w	r3, r3, #31
 80033d6:	2201      	movs	r2, #1
 80033d8:	fa02 f303 	lsl.w	r3, r2, r3
 80033dc:	e016      	b.n	800340c <HAL_ADC_ConfigChannel+0x98>
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033e6:	fa93 f3a3 	rbit	r3, r3
 80033ea:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80033ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033ee:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80033f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d101      	bne.n	80033fa <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 80033f6:	2320      	movs	r3, #32
 80033f8:	e003      	b.n	8003402 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 80033fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033fc:	fab3 f383 	clz	r3, r3
 8003400:	b2db      	uxtb	r3, r3
 8003402:	f003 031f 	and.w	r3, r3, #31
 8003406:	2201      	movs	r2, #1
 8003408:	fa02 f303 	lsl.w	r3, r2, r3
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	6812      	ldr	r2, [r2, #0]
 8003410:	69d1      	ldr	r1, [r2, #28]
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	6812      	ldr	r2, [r2, #0]
 8003416:	430b      	orrs	r3, r1
 8003418:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6818      	ldr	r0, [r3, #0]
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	6859      	ldr	r1, [r3, #4]
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	461a      	mov	r2, r3
 8003428:	f7ff fbad 	bl	8002b86 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4618      	mov	r0, r3
 8003432:	f7ff fcf5 	bl	8002e20 <LL_ADC_REG_IsConversionOngoing>
 8003436:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4618      	mov	r0, r3
 800343e:	f7ff fd02 	bl	8002e46 <LL_ADC_INJ_IsConversionOngoing>
 8003442:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003444:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003446:	2b00      	cmp	r3, #0
 8003448:	f040 80b8 	bne.w	80035bc <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800344c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800344e:	2b00      	cmp	r3, #0
 8003450:	f040 80b4 	bne.w	80035bc <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6818      	ldr	r0, [r3, #0]
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	6819      	ldr	r1, [r3, #0]
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	461a      	mov	r2, r3
 8003462:	f7ff fbcf 	bl	8002c04 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003466:	4b30      	ldr	r3, [pc, #192]	; (8003528 <HAL_ADC_ConfigChannel+0x1b4>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800346e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003472:	d10b      	bne.n	800348c <HAL_ADC_ConfigChannel+0x118>
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	695a      	ldr	r2, [r3, #20]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	089b      	lsrs	r3, r3, #2
 8003480:	f003 0307 	and.w	r3, r3, #7
 8003484:	005b      	lsls	r3, r3, #1
 8003486:	fa02 f303 	lsl.w	r3, r2, r3
 800348a:	e01d      	b.n	80034c8 <HAL_ADC_ConfigChannel+0x154>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	f003 0310 	and.w	r3, r3, #16
 8003496:	2b00      	cmp	r3, #0
 8003498:	d10b      	bne.n	80034b2 <HAL_ADC_ConfigChannel+0x13e>
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	695a      	ldr	r2, [r3, #20]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	089b      	lsrs	r3, r3, #2
 80034a6:	f003 0307 	and.w	r3, r3, #7
 80034aa:	005b      	lsls	r3, r3, #1
 80034ac:	fa02 f303 	lsl.w	r3, r2, r3
 80034b0:	e00a      	b.n	80034c8 <HAL_ADC_ConfigChannel+0x154>
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	695a      	ldr	r2, [r3, #20]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	089b      	lsrs	r3, r3, #2
 80034be:	f003 0304 	and.w	r3, r3, #4
 80034c2:	005b      	lsls	r3, r3, #1
 80034c4:	fa02 f303 	lsl.w	r3, r2, r3
 80034c8:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	2b04      	cmp	r3, #4
 80034d0:	d02c      	beq.n	800352c <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6818      	ldr	r0, [r3, #0]
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	6919      	ldr	r1, [r3, #16]
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034e0:	f7ff faea 	bl	8002ab8 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6818      	ldr	r0, [r3, #0]
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	6919      	ldr	r1, [r3, #16]
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	7e5b      	ldrb	r3, [r3, #25]
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d102      	bne.n	80034fa <HAL_ADC_ConfigChannel+0x186>
 80034f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80034f8:	e000      	b.n	80034fc <HAL_ADC_ConfigChannel+0x188>
 80034fa:	2300      	movs	r3, #0
 80034fc:	461a      	mov	r2, r3
 80034fe:	f7ff fb14 	bl	8002b2a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6818      	ldr	r0, [r3, #0]
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	6919      	ldr	r1, [r3, #16]
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	7e1b      	ldrb	r3, [r3, #24]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d102      	bne.n	8003518 <HAL_ADC_ConfigChannel+0x1a4>
 8003512:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003516:	e000      	b.n	800351a <HAL_ADC_ConfigChannel+0x1a6>
 8003518:	2300      	movs	r3, #0
 800351a:	461a      	mov	r2, r3
 800351c:	f7ff faec 	bl	8002af8 <LL_ADC_SetDataRightShift>
 8003520:	e04c      	b.n	80035bc <HAL_ADC_ConfigChannel+0x248>
 8003522:	bf00      	nop
 8003524:	47ff0000 	.word	0x47ff0000
 8003528:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003532:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	069b      	lsls	r3, r3, #26
 800353c:	429a      	cmp	r2, r3
 800353e:	d107      	bne.n	8003550 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800354e:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003556:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	069b      	lsls	r3, r3, #26
 8003560:	429a      	cmp	r2, r3
 8003562:	d107      	bne.n	8003574 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003572:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800357a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	069b      	lsls	r3, r3, #26
 8003584:	429a      	cmp	r2, r3
 8003586:	d107      	bne.n	8003598 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003596:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800359e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	069b      	lsls	r3, r3, #26
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d107      	bne.n	80035bc <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80035ba:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4618      	mov	r0, r3
 80035c2:	f7ff fbf3 	bl	8002dac <LL_ADC_IsEnabled>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	f040 8211 	bne.w	80039f0 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6818      	ldr	r0, [r3, #0]
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	6819      	ldr	r1, [r3, #0]
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	461a      	mov	r2, r3
 80035dc:	f7ff fb3e 	bl	8002c5c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	4aa1      	ldr	r2, [pc, #644]	; (800386c <HAL_ADC_ConfigChannel+0x4f8>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	f040 812e 	bne.w	8003848 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d10b      	bne.n	8003614 <HAL_ADC_ConfigChannel+0x2a0>
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	0e9b      	lsrs	r3, r3, #26
 8003602:	3301      	adds	r3, #1
 8003604:	f003 031f 	and.w	r3, r3, #31
 8003608:	2b09      	cmp	r3, #9
 800360a:	bf94      	ite	ls
 800360c:	2301      	movls	r3, #1
 800360e:	2300      	movhi	r3, #0
 8003610:	b2db      	uxtb	r3, r3
 8003612:	e019      	b.n	8003648 <HAL_ADC_ConfigChannel+0x2d4>
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800361a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800361c:	fa93 f3a3 	rbit	r3, r3
 8003620:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003622:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003624:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003626:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003628:	2b00      	cmp	r3, #0
 800362a:	d101      	bne.n	8003630 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 800362c:	2320      	movs	r3, #32
 800362e:	e003      	b.n	8003638 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8003630:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003632:	fab3 f383 	clz	r3, r3
 8003636:	b2db      	uxtb	r3, r3
 8003638:	3301      	adds	r3, #1
 800363a:	f003 031f 	and.w	r3, r3, #31
 800363e:	2b09      	cmp	r3, #9
 8003640:	bf94      	ite	ls
 8003642:	2301      	movls	r3, #1
 8003644:	2300      	movhi	r3, #0
 8003646:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003648:	2b00      	cmp	r3, #0
 800364a:	d079      	beq.n	8003740 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003654:	2b00      	cmp	r3, #0
 8003656:	d107      	bne.n	8003668 <HAL_ADC_ConfigChannel+0x2f4>
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	0e9b      	lsrs	r3, r3, #26
 800365e:	3301      	adds	r3, #1
 8003660:	069b      	lsls	r3, r3, #26
 8003662:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003666:	e015      	b.n	8003694 <HAL_ADC_ConfigChannel+0x320>
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800366e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003670:	fa93 f3a3 	rbit	r3, r3
 8003674:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003676:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003678:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800367a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800367c:	2b00      	cmp	r3, #0
 800367e:	d101      	bne.n	8003684 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8003680:	2320      	movs	r3, #32
 8003682:	e003      	b.n	800368c <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8003684:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003686:	fab3 f383 	clz	r3, r3
 800368a:	b2db      	uxtb	r3, r3
 800368c:	3301      	adds	r3, #1
 800368e:	069b      	lsls	r3, r3, #26
 8003690:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800369c:	2b00      	cmp	r3, #0
 800369e:	d109      	bne.n	80036b4 <HAL_ADC_ConfigChannel+0x340>
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	0e9b      	lsrs	r3, r3, #26
 80036a6:	3301      	adds	r3, #1
 80036a8:	f003 031f 	and.w	r3, r3, #31
 80036ac:	2101      	movs	r1, #1
 80036ae:	fa01 f303 	lsl.w	r3, r1, r3
 80036b2:	e017      	b.n	80036e4 <HAL_ADC_ConfigChannel+0x370>
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036bc:	fa93 f3a3 	rbit	r3, r3
 80036c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80036c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036c4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80036c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d101      	bne.n	80036d0 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 80036cc:	2320      	movs	r3, #32
 80036ce:	e003      	b.n	80036d8 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 80036d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036d2:	fab3 f383 	clz	r3, r3
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	3301      	adds	r3, #1
 80036da:	f003 031f 	and.w	r3, r3, #31
 80036de:	2101      	movs	r1, #1
 80036e0:	fa01 f303 	lsl.w	r3, r1, r3
 80036e4:	ea42 0103 	orr.w	r1, r2, r3
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d10a      	bne.n	800370a <HAL_ADC_ConfigChannel+0x396>
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	0e9b      	lsrs	r3, r3, #26
 80036fa:	3301      	adds	r3, #1
 80036fc:	f003 021f 	and.w	r2, r3, #31
 8003700:	4613      	mov	r3, r2
 8003702:	005b      	lsls	r3, r3, #1
 8003704:	4413      	add	r3, r2
 8003706:	051b      	lsls	r3, r3, #20
 8003708:	e018      	b.n	800373c <HAL_ADC_ConfigChannel+0x3c8>
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003712:	fa93 f3a3 	rbit	r3, r3
 8003716:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800371a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800371c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800371e:	2b00      	cmp	r3, #0
 8003720:	d101      	bne.n	8003726 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8003722:	2320      	movs	r3, #32
 8003724:	e003      	b.n	800372e <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8003726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003728:	fab3 f383 	clz	r3, r3
 800372c:	b2db      	uxtb	r3, r3
 800372e:	3301      	adds	r3, #1
 8003730:	f003 021f 	and.w	r2, r3, #31
 8003734:	4613      	mov	r3, r2
 8003736:	005b      	lsls	r3, r3, #1
 8003738:	4413      	add	r3, r2
 800373a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800373c:	430b      	orrs	r3, r1
 800373e:	e07e      	b.n	800383e <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003748:	2b00      	cmp	r3, #0
 800374a:	d107      	bne.n	800375c <HAL_ADC_ConfigChannel+0x3e8>
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	0e9b      	lsrs	r3, r3, #26
 8003752:	3301      	adds	r3, #1
 8003754:	069b      	lsls	r3, r3, #26
 8003756:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800375a:	e015      	b.n	8003788 <HAL_ADC_ConfigChannel+0x414>
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003764:	fa93 f3a3 	rbit	r3, r3
 8003768:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800376a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800376e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003770:	2b00      	cmp	r3, #0
 8003772:	d101      	bne.n	8003778 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8003774:	2320      	movs	r3, #32
 8003776:	e003      	b.n	8003780 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8003778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800377a:	fab3 f383 	clz	r3, r3
 800377e:	b2db      	uxtb	r3, r3
 8003780:	3301      	adds	r3, #1
 8003782:	069b      	lsls	r3, r3, #26
 8003784:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003790:	2b00      	cmp	r3, #0
 8003792:	d109      	bne.n	80037a8 <HAL_ADC_ConfigChannel+0x434>
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	0e9b      	lsrs	r3, r3, #26
 800379a:	3301      	adds	r3, #1
 800379c:	f003 031f 	and.w	r3, r3, #31
 80037a0:	2101      	movs	r1, #1
 80037a2:	fa01 f303 	lsl.w	r3, r1, r3
 80037a6:	e017      	b.n	80037d8 <HAL_ADC_ConfigChannel+0x464>
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	fa93 f3a3 	rbit	r3, r3
 80037b4:	61bb      	str	r3, [r7, #24]
  return result;
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80037ba:	6a3b      	ldr	r3, [r7, #32]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d101      	bne.n	80037c4 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 80037c0:	2320      	movs	r3, #32
 80037c2:	e003      	b.n	80037cc <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 80037c4:	6a3b      	ldr	r3, [r7, #32]
 80037c6:	fab3 f383 	clz	r3, r3
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	3301      	adds	r3, #1
 80037ce:	f003 031f 	and.w	r3, r3, #31
 80037d2:	2101      	movs	r1, #1
 80037d4:	fa01 f303 	lsl.w	r3, r1, r3
 80037d8:	ea42 0103 	orr.w	r1, r2, r3
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d10d      	bne.n	8003804 <HAL_ADC_ConfigChannel+0x490>
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	0e9b      	lsrs	r3, r3, #26
 80037ee:	3301      	adds	r3, #1
 80037f0:	f003 021f 	and.w	r2, r3, #31
 80037f4:	4613      	mov	r3, r2
 80037f6:	005b      	lsls	r3, r3, #1
 80037f8:	4413      	add	r3, r2
 80037fa:	3b1e      	subs	r3, #30
 80037fc:	051b      	lsls	r3, r3, #20
 80037fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003802:	e01b      	b.n	800383c <HAL_ADC_ConfigChannel+0x4c8>
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	fa93 f3a3 	rbit	r3, r3
 8003810:	60fb      	str	r3, [r7, #12]
  return result;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d101      	bne.n	8003820 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 800381c:	2320      	movs	r3, #32
 800381e:	e003      	b.n	8003828 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	fab3 f383 	clz	r3, r3
 8003826:	b2db      	uxtb	r3, r3
 8003828:	3301      	adds	r3, #1
 800382a:	f003 021f 	and.w	r2, r3, #31
 800382e:	4613      	mov	r3, r2
 8003830:	005b      	lsls	r3, r3, #1
 8003832:	4413      	add	r3, r2
 8003834:	3b1e      	subs	r3, #30
 8003836:	051b      	lsls	r3, r3, #20
 8003838:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800383c:	430b      	orrs	r3, r1
 800383e:	683a      	ldr	r2, [r7, #0]
 8003840:	6892      	ldr	r2, [r2, #8]
 8003842:	4619      	mov	r1, r3
 8003844:	f7ff f9de 	bl	8002c04 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2b00      	cmp	r3, #0
 800384e:	f280 80cf 	bge.w	80039f0 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a06      	ldr	r2, [pc, #24]	; (8003870 <HAL_ADC_ConfigChannel+0x4fc>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d004      	beq.n	8003866 <HAL_ADC_ConfigChannel+0x4f2>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a04      	ldr	r2, [pc, #16]	; (8003874 <HAL_ADC_ConfigChannel+0x500>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d10a      	bne.n	800387c <HAL_ADC_ConfigChannel+0x508>
 8003866:	4b04      	ldr	r3, [pc, #16]	; (8003878 <HAL_ADC_ConfigChannel+0x504>)
 8003868:	e009      	b.n	800387e <HAL_ADC_ConfigChannel+0x50a>
 800386a:	bf00      	nop
 800386c:	47ff0000 	.word	0x47ff0000
 8003870:	40022000 	.word	0x40022000
 8003874:	40022100 	.word	0x40022100
 8003878:	40022300 	.word	0x40022300
 800387c:	4b61      	ldr	r3, [pc, #388]	; (8003a04 <HAL_ADC_ConfigChannel+0x690>)
 800387e:	4618      	mov	r0, r3
 8003880:	f7ff f90c 	bl	8002a9c <LL_ADC_GetCommonPathInternalCh>
 8003884:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a5f      	ldr	r2, [pc, #380]	; (8003a08 <HAL_ADC_ConfigChannel+0x694>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d004      	beq.n	800389a <HAL_ADC_ConfigChannel+0x526>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a5d      	ldr	r2, [pc, #372]	; (8003a0c <HAL_ADC_ConfigChannel+0x698>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d10e      	bne.n	80038b8 <HAL_ADC_ConfigChannel+0x544>
 800389a:	485b      	ldr	r0, [pc, #364]	; (8003a08 <HAL_ADC_ConfigChannel+0x694>)
 800389c:	f7ff fa86 	bl	8002dac <LL_ADC_IsEnabled>
 80038a0:	4604      	mov	r4, r0
 80038a2:	485a      	ldr	r0, [pc, #360]	; (8003a0c <HAL_ADC_ConfigChannel+0x698>)
 80038a4:	f7ff fa82 	bl	8002dac <LL_ADC_IsEnabled>
 80038a8:	4603      	mov	r3, r0
 80038aa:	4323      	orrs	r3, r4
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	bf0c      	ite	eq
 80038b0:	2301      	moveq	r3, #1
 80038b2:	2300      	movne	r3, #0
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	e008      	b.n	80038ca <HAL_ADC_ConfigChannel+0x556>
 80038b8:	4855      	ldr	r0, [pc, #340]	; (8003a10 <HAL_ADC_ConfigChannel+0x69c>)
 80038ba:	f7ff fa77 	bl	8002dac <LL_ADC_IsEnabled>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	bf0c      	ite	eq
 80038c4:	2301      	moveq	r3, #1
 80038c6:	2300      	movne	r3, #0
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d07d      	beq.n	80039ca <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a50      	ldr	r2, [pc, #320]	; (8003a14 <HAL_ADC_ConfigChannel+0x6a0>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d130      	bne.n	800393a <HAL_ADC_ConfigChannel+0x5c6>
 80038d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d12b      	bne.n	800393a <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a4a      	ldr	r2, [pc, #296]	; (8003a10 <HAL_ADC_ConfigChannel+0x69c>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	f040 8081 	bne.w	80039f0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a45      	ldr	r2, [pc, #276]	; (8003a08 <HAL_ADC_ConfigChannel+0x694>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d004      	beq.n	8003902 <HAL_ADC_ConfigChannel+0x58e>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a43      	ldr	r2, [pc, #268]	; (8003a0c <HAL_ADC_ConfigChannel+0x698>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d101      	bne.n	8003906 <HAL_ADC_ConfigChannel+0x592>
 8003902:	4a45      	ldr	r2, [pc, #276]	; (8003a18 <HAL_ADC_ConfigChannel+0x6a4>)
 8003904:	e000      	b.n	8003908 <HAL_ADC_ConfigChannel+0x594>
 8003906:	4a3f      	ldr	r2, [pc, #252]	; (8003a04 <HAL_ADC_ConfigChannel+0x690>)
 8003908:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800390a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800390e:	4619      	mov	r1, r3
 8003910:	4610      	mov	r0, r2
 8003912:	f7ff f8b0 	bl	8002a76 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003916:	4b41      	ldr	r3, [pc, #260]	; (8003a1c <HAL_ADC_ConfigChannel+0x6a8>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	099b      	lsrs	r3, r3, #6
 800391c:	4a40      	ldr	r2, [pc, #256]	; (8003a20 <HAL_ADC_ConfigChannel+0x6ac>)
 800391e:	fba2 2303 	umull	r2, r3, r2, r3
 8003922:	099b      	lsrs	r3, r3, #6
 8003924:	3301      	adds	r3, #1
 8003926:	005b      	lsls	r3, r3, #1
 8003928:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800392a:	e002      	b.n	8003932 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	3b01      	subs	r3, #1
 8003930:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d1f9      	bne.n	800392c <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003938:	e05a      	b.n	80039f0 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a39      	ldr	r2, [pc, #228]	; (8003a24 <HAL_ADC_ConfigChannel+0x6b0>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d11e      	bne.n	8003982 <HAL_ADC_ConfigChannel+0x60e>
 8003944:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003946:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d119      	bne.n	8003982 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a2f      	ldr	r2, [pc, #188]	; (8003a10 <HAL_ADC_ConfigChannel+0x69c>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d14b      	bne.n	80039f0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a2a      	ldr	r2, [pc, #168]	; (8003a08 <HAL_ADC_ConfigChannel+0x694>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d004      	beq.n	800396c <HAL_ADC_ConfigChannel+0x5f8>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a29      	ldr	r2, [pc, #164]	; (8003a0c <HAL_ADC_ConfigChannel+0x698>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d101      	bne.n	8003970 <HAL_ADC_ConfigChannel+0x5fc>
 800396c:	4a2a      	ldr	r2, [pc, #168]	; (8003a18 <HAL_ADC_ConfigChannel+0x6a4>)
 800396e:	e000      	b.n	8003972 <HAL_ADC_ConfigChannel+0x5fe>
 8003970:	4a24      	ldr	r2, [pc, #144]	; (8003a04 <HAL_ADC_ConfigChannel+0x690>)
 8003972:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003974:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003978:	4619      	mov	r1, r3
 800397a:	4610      	mov	r0, r2
 800397c:	f7ff f87b 	bl	8002a76 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003980:	e036      	b.n	80039f0 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a28      	ldr	r2, [pc, #160]	; (8003a28 <HAL_ADC_ConfigChannel+0x6b4>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d131      	bne.n	80039f0 <HAL_ADC_ConfigChannel+0x67c>
 800398c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800398e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d12c      	bne.n	80039f0 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a1d      	ldr	r2, [pc, #116]	; (8003a10 <HAL_ADC_ConfigChannel+0x69c>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d127      	bne.n	80039f0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a18      	ldr	r2, [pc, #96]	; (8003a08 <HAL_ADC_ConfigChannel+0x694>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d004      	beq.n	80039b4 <HAL_ADC_ConfigChannel+0x640>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a17      	ldr	r2, [pc, #92]	; (8003a0c <HAL_ADC_ConfigChannel+0x698>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d101      	bne.n	80039b8 <HAL_ADC_ConfigChannel+0x644>
 80039b4:	4a18      	ldr	r2, [pc, #96]	; (8003a18 <HAL_ADC_ConfigChannel+0x6a4>)
 80039b6:	e000      	b.n	80039ba <HAL_ADC_ConfigChannel+0x646>
 80039b8:	4a12      	ldr	r2, [pc, #72]	; (8003a04 <HAL_ADC_ConfigChannel+0x690>)
 80039ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80039c0:	4619      	mov	r1, r3
 80039c2:	4610      	mov	r0, r2
 80039c4:	f7ff f857 	bl	8002a76 <LL_ADC_SetCommonPathInternalCh>
 80039c8:	e012      	b.n	80039f0 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ce:	f043 0220 	orr.w	r2, r3, #32
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80039dc:	e008      	b.n	80039f0 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039e2:	f043 0220 	orr.w	r2, r3, #32
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80039f8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3784      	adds	r7, #132	; 0x84
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd90      	pop	{r4, r7, pc}
 8003a04:	58026300 	.word	0x58026300
 8003a08:	40022000 	.word	0x40022000
 8003a0c:	40022100 	.word	0x40022100
 8003a10:	58026000 	.word	0x58026000
 8003a14:	cb840000 	.word	0xcb840000
 8003a18:	40022300 	.word	0x40022300
 8003a1c:	24000000 	.word	0x24000000
 8003a20:	053e2d63 	.word	0x053e2d63
 8003a24:	c7520000 	.word	0xc7520000
 8003a28:	cfb80000 	.word	0xcfb80000

08003a2c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f7ff f9b7 	bl	8002dac <LL_ADC_IsEnabled>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d16e      	bne.n	8003b22 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	689a      	ldr	r2, [r3, #8]
 8003a4a:	4b38      	ldr	r3, [pc, #224]	; (8003b2c <ADC_Enable+0x100>)
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00d      	beq.n	8003a6e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a56:	f043 0210 	orr.w	r2, r3, #16
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a62:	f043 0201 	orr.w	r2, r3, #1
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e05a      	b.n	8003b24 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7ff f972 	bl	8002d5c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003a78:	f7fe ffbc 	bl	80029f4 <HAL_GetTick>
 8003a7c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a2b      	ldr	r2, [pc, #172]	; (8003b30 <ADC_Enable+0x104>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d004      	beq.n	8003a92 <ADC_Enable+0x66>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a29      	ldr	r2, [pc, #164]	; (8003b34 <ADC_Enable+0x108>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d101      	bne.n	8003a96 <ADC_Enable+0x6a>
 8003a92:	4b29      	ldr	r3, [pc, #164]	; (8003b38 <ADC_Enable+0x10c>)
 8003a94:	e000      	b.n	8003a98 <ADC_Enable+0x6c>
 8003a96:	4b29      	ldr	r3, [pc, #164]	; (8003b3c <ADC_Enable+0x110>)
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7ff f903 	bl	8002ca4 <LL_ADC_GetMultimode>
 8003a9e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a23      	ldr	r2, [pc, #140]	; (8003b34 <ADC_Enable+0x108>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d002      	beq.n	8003ab0 <ADC_Enable+0x84>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	e000      	b.n	8003ab2 <ADC_Enable+0x86>
 8003ab0:	4b1f      	ldr	r3, [pc, #124]	; (8003b30 <ADC_Enable+0x104>)
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	6812      	ldr	r2, [r2, #0]
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d02c      	beq.n	8003b14 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d130      	bne.n	8003b22 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ac0:	e028      	b.n	8003b14 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f7ff f970 	bl	8002dac <LL_ADC_IsEnabled>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d104      	bne.n	8003adc <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7ff f940 	bl	8002d5c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003adc:	f7fe ff8a 	bl	80029f4 <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d914      	bls.n	8003b14 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0301 	and.w	r3, r3, #1
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d00d      	beq.n	8003b14 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003afc:	f043 0210 	orr.w	r2, r3, #16
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b08:	f043 0201 	orr.w	r2, r3, #1
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e007      	b.n	8003b24 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0301 	and.w	r3, r3, #1
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d1cf      	bne.n	8003ac2 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003b22:	2300      	movs	r3, #0
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3710      	adds	r7, #16
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	8000003f 	.word	0x8000003f
 8003b30:	40022000 	.word	0x40022000
 8003b34:	40022100 	.word	0x40022100
 8003b38:	40022300 	.word	0x40022300
 8003b3c:	58026300 	.word	0x58026300

08003b40 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f7ff f940 	bl	8002dd2 <LL_ADC_IsDisableOngoing>
 8003b52:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f7ff f927 	bl	8002dac <LL_ADC_IsEnabled>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d047      	beq.n	8003bf4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d144      	bne.n	8003bf4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f003 030d 	and.w	r3, r3, #13
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d10c      	bne.n	8003b92 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f7ff f901 	bl	8002d84 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2203      	movs	r2, #3
 8003b88:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003b8a:	f7fe ff33 	bl	80029f4 <HAL_GetTick>
 8003b8e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b90:	e029      	b.n	8003be6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b96:	f043 0210 	orr.w	r2, r3, #16
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ba2:	f043 0201 	orr.w	r2, r3, #1
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e023      	b.n	8003bf6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003bae:	f7fe ff21 	bl	80029f4 <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d914      	bls.n	8003be6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f003 0301 	and.w	r3, r3, #1
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d00d      	beq.n	8003be6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bce:	f043 0210 	orr.w	r2, r3, #16
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bda:	f043 0201 	orr.w	r2, r3, #1
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e007      	b.n	8003bf6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	f003 0301 	and.w	r3, r3, #1
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d1dc      	bne.n	8003bae <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3710      	adds	r7, #16
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}

08003bfe <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003bfe:	b580      	push	{r7, lr}
 8003c00:	b084      	sub	sp, #16
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c0a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c10:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d14b      	bne.n	8003cb0 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c1c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0308 	and.w	r3, r3, #8
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d021      	beq.n	8003c76 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4618      	mov	r0, r3
 8003c38:	f7fe ff92 	bl	8002b60 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d032      	beq.n	8003ca8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d12b      	bne.n	8003ca8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c54:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d11f      	bne.n	8003ca8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c6c:	f043 0201 	orr.w	r2, r3, #1
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	655a      	str	r2, [r3, #84]	; 0x54
 8003c74:	e018      	b.n	8003ca8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	f003 0303 	and.w	r3, r3, #3
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d111      	bne.n	8003ca8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c88:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d105      	bne.n	8003ca8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ca0:	f043 0201 	orr.w	r2, r3, #1
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003ca8:	68f8      	ldr	r0, [r7, #12]
 8003caa:	f7ff fb45 	bl	8003338 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003cae:	e00e      	b.n	8003cce <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cb4:	f003 0310 	and.w	r3, r3, #16
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d003      	beq.n	8003cc4 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003cbc:	68f8      	ldr	r0, [r7, #12]
 8003cbe:	f7ff fb4f 	bl	8003360 <HAL_ADC_ErrorCallback>
}
 8003cc2:	e004      	b.n	8003cce <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	4798      	blx	r3
}
 8003cce:	bf00      	nop
 8003cd0:	3710      	adds	r7, #16
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}

08003cd6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003cd6:	b580      	push	{r7, lr}
 8003cd8:	b084      	sub	sp, #16
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003ce4:	68f8      	ldr	r0, [r7, #12]
 8003ce6:	f7ff fb31 	bl	800334c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003cea:	bf00      	nop
 8003cec:	3710      	adds	r7, #16
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}

08003cf2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003cf2:	b580      	push	{r7, lr}
 8003cf4:	b084      	sub	sp, #16
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cfe:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d04:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d10:	f043 0204 	orr.w	r2, r3, #4
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003d18:	68f8      	ldr	r0, [r7, #12]
 8003d1a:	f7ff fb21 	bl	8003360 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003d1e:	bf00      	nop
 8003d20:	3710      	adds	r7, #16
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
	...

08003d28 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a7a      	ldr	r2, [pc, #488]	; (8003f20 <ADC_ConfigureBoostMode+0x1f8>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d004      	beq.n	8003d44 <ADC_ConfigureBoostMode+0x1c>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a79      	ldr	r2, [pc, #484]	; (8003f24 <ADC_ConfigureBoostMode+0x1fc>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d109      	bne.n	8003d58 <ADC_ConfigureBoostMode+0x30>
 8003d44:	4b78      	ldr	r3, [pc, #480]	; (8003f28 <ADC_ConfigureBoostMode+0x200>)
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	bf14      	ite	ne
 8003d50:	2301      	movne	r3, #1
 8003d52:	2300      	moveq	r3, #0
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	e008      	b.n	8003d6a <ADC_ConfigureBoostMode+0x42>
 8003d58:	4b74      	ldr	r3, [pc, #464]	; (8003f2c <ADC_ConfigureBoostMode+0x204>)
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	bf14      	ite	ne
 8003d64:	2301      	movne	r3, #1
 8003d66:	2300      	moveq	r3, #0
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d01c      	beq.n	8003da8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003d6e:	f004 fe2f 	bl	80089d0 <HAL_RCC_GetHCLKFreq>
 8003d72:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003d7c:	d010      	beq.n	8003da0 <ADC_ConfigureBoostMode+0x78>
 8003d7e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003d82:	d873      	bhi.n	8003e6c <ADC_ConfigureBoostMode+0x144>
 8003d84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d88:	d002      	beq.n	8003d90 <ADC_ConfigureBoostMode+0x68>
 8003d8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d8e:	d16d      	bne.n	8003e6c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	0c1b      	lsrs	r3, r3, #16
 8003d96:	68fa      	ldr	r2, [r7, #12]
 8003d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d9c:	60fb      	str	r3, [r7, #12]
        break;
 8003d9e:	e068      	b.n	8003e72 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	089b      	lsrs	r3, r3, #2
 8003da4:	60fb      	str	r3, [r7, #12]
        break;
 8003da6:	e064      	b.n	8003e72 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003da8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003dac:	f04f 0100 	mov.w	r1, #0
 8003db0:	f006 f8b6 	bl	8009f20 <HAL_RCCEx_GetPeriphCLKFreq>
 8003db4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003dbe:	d051      	beq.n	8003e64 <ADC_ConfigureBoostMode+0x13c>
 8003dc0:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003dc4:	d854      	bhi.n	8003e70 <ADC_ConfigureBoostMode+0x148>
 8003dc6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003dca:	d047      	beq.n	8003e5c <ADC_ConfigureBoostMode+0x134>
 8003dcc:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003dd0:	d84e      	bhi.n	8003e70 <ADC_ConfigureBoostMode+0x148>
 8003dd2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003dd6:	d03d      	beq.n	8003e54 <ADC_ConfigureBoostMode+0x12c>
 8003dd8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003ddc:	d848      	bhi.n	8003e70 <ADC_ConfigureBoostMode+0x148>
 8003dde:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003de2:	d033      	beq.n	8003e4c <ADC_ConfigureBoostMode+0x124>
 8003de4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003de8:	d842      	bhi.n	8003e70 <ADC_ConfigureBoostMode+0x148>
 8003dea:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003dee:	d029      	beq.n	8003e44 <ADC_ConfigureBoostMode+0x11c>
 8003df0:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003df4:	d83c      	bhi.n	8003e70 <ADC_ConfigureBoostMode+0x148>
 8003df6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003dfa:	d01a      	beq.n	8003e32 <ADC_ConfigureBoostMode+0x10a>
 8003dfc:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003e00:	d836      	bhi.n	8003e70 <ADC_ConfigureBoostMode+0x148>
 8003e02:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003e06:	d014      	beq.n	8003e32 <ADC_ConfigureBoostMode+0x10a>
 8003e08:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003e0c:	d830      	bhi.n	8003e70 <ADC_ConfigureBoostMode+0x148>
 8003e0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e12:	d00e      	beq.n	8003e32 <ADC_ConfigureBoostMode+0x10a>
 8003e14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e18:	d82a      	bhi.n	8003e70 <ADC_ConfigureBoostMode+0x148>
 8003e1a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003e1e:	d008      	beq.n	8003e32 <ADC_ConfigureBoostMode+0x10a>
 8003e20:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003e24:	d824      	bhi.n	8003e70 <ADC_ConfigureBoostMode+0x148>
 8003e26:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e2a:	d002      	beq.n	8003e32 <ADC_ConfigureBoostMode+0x10a>
 8003e2c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003e30:	d11e      	bne.n	8003e70 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	0c9b      	lsrs	r3, r3, #18
 8003e38:	005b      	lsls	r3, r3, #1
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e40:	60fb      	str	r3, [r7, #12]
        break;
 8003e42:	e016      	b.n	8003e72 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	091b      	lsrs	r3, r3, #4
 8003e48:	60fb      	str	r3, [r7, #12]
        break;
 8003e4a:	e012      	b.n	8003e72 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	095b      	lsrs	r3, r3, #5
 8003e50:	60fb      	str	r3, [r7, #12]
        break;
 8003e52:	e00e      	b.n	8003e72 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	099b      	lsrs	r3, r3, #6
 8003e58:	60fb      	str	r3, [r7, #12]
        break;
 8003e5a:	e00a      	b.n	8003e72 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	09db      	lsrs	r3, r3, #7
 8003e60:	60fb      	str	r3, [r7, #12]
        break;
 8003e62:	e006      	b.n	8003e72 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	0a1b      	lsrs	r3, r3, #8
 8003e68:	60fb      	str	r3, [r7, #12]
        break;
 8003e6a:	e002      	b.n	8003e72 <ADC_ConfigureBoostMode+0x14a>
        break;
 8003e6c:	bf00      	nop
 8003e6e:	e000      	b.n	8003e72 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003e70:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003e72:	f7fe fdcb 	bl	8002a0c <HAL_GetREVID>
 8003e76:	4603      	mov	r3, r0
 8003e78:	f241 0203 	movw	r2, #4099	; 0x1003
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d815      	bhi.n	8003eac <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	4a2b      	ldr	r2, [pc, #172]	; (8003f30 <ADC_ConfigureBoostMode+0x208>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d908      	bls.n	8003e9a <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	689a      	ldr	r2, [r3, #8]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e96:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003e98:	e03e      	b.n	8003f18 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	689a      	ldr	r2, [r3, #8]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ea8:	609a      	str	r2, [r3, #8]
}
 8003eaa:	e035      	b.n	8003f18 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	085b      	lsrs	r3, r3, #1
 8003eb0:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	4a1f      	ldr	r2, [pc, #124]	; (8003f34 <ADC_ConfigureBoostMode+0x20c>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d808      	bhi.n	8003ecc <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	689a      	ldr	r2, [r3, #8]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003ec8:	609a      	str	r2, [r3, #8]
}
 8003eca:	e025      	b.n	8003f18 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	4a1a      	ldr	r2, [pc, #104]	; (8003f38 <ADC_ConfigureBoostMode+0x210>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d80a      	bhi.n	8003eea <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ee6:	609a      	str	r2, [r3, #8]
}
 8003ee8:	e016      	b.n	8003f18 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	4a13      	ldr	r2, [pc, #76]	; (8003f3c <ADC_ConfigureBoostMode+0x214>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d80a      	bhi.n	8003f08 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f04:	609a      	str	r2, [r3, #8]
}
 8003f06:	e007      	b.n	8003f18 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	689a      	ldr	r2, [r3, #8]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003f16:	609a      	str	r2, [r3, #8]
}
 8003f18:	bf00      	nop
 8003f1a:	3710      	adds	r7, #16
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	40022000 	.word	0x40022000
 8003f24:	40022100 	.word	0x40022100
 8003f28:	40022300 	.word	0x40022300
 8003f2c:	58026300 	.word	0x58026300
 8003f30:	01312d00 	.word	0x01312d00
 8003f34:	005f5e10 	.word	0x005f5e10
 8003f38:	00bebc20 	.word	0x00bebc20
 8003f3c:	017d7840 	.word	0x017d7840

08003f40 <LL_ADC_IsEnabled>:
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	f003 0301 	and.w	r3, r3, #1
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d101      	bne.n	8003f58 <LL_ADC_IsEnabled+0x18>
 8003f54:	2301      	movs	r3, #1
 8003f56:	e000      	b.n	8003f5a <LL_ADC_IsEnabled+0x1a>
 8003f58:	2300      	movs	r3, #0
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	370c      	adds	r7, #12
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
	...

08003f68 <LL_ADC_StartCalibration>:
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b085      	sub	sp, #20
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	60b9      	str	r1, [r7, #8]
 8003f72:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	689a      	ldr	r2, [r3, #8]
 8003f78:	4b09      	ldr	r3, [pc, #36]	; (8003fa0 <LL_ADC_StartCalibration+0x38>)
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	68ba      	ldr	r2, [r7, #8]
 8003f7e:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003f88:	430a      	orrs	r2, r1
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	609a      	str	r2, [r3, #8]
}
 8003f94:	bf00      	nop
 8003f96:	3714      	adds	r7, #20
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr
 8003fa0:	3ffeffc0 	.word	0x3ffeffc0

08003fa4 <LL_ADC_IsCalibrationOnGoing>:
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003fb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003fb8:	d101      	bne.n	8003fbe <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e000      	b.n	8003fc0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003fbe:	2300      	movs	r3, #0
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	370c      	adds	r7, #12
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr

08003fcc <LL_ADC_REG_IsConversionOngoing>:
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	f003 0304 	and.w	r3, r3, #4
 8003fdc:	2b04      	cmp	r3, #4
 8003fde:	d101      	bne.n	8003fe4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e000      	b.n	8003fe6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	370c      	adds	r7, #12
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
	...

08003ff4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b086      	sub	sp, #24
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004000:	2300      	movs	r3, #0
 8004002:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800400a:	2b01      	cmp	r3, #1
 800400c:	d101      	bne.n	8004012 <HAL_ADCEx_Calibration_Start+0x1e>
 800400e:	2302      	movs	r3, #2
 8004010:	e04c      	b.n	80040ac <HAL_ADCEx_Calibration_Start+0xb8>
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2201      	movs	r2, #1
 8004016:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800401a:	68f8      	ldr	r0, [r7, #12]
 800401c:	f7ff fd90 	bl	8003b40 <ADC_Disable>
 8004020:	4603      	mov	r3, r0
 8004022:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004024:	7dfb      	ldrb	r3, [r7, #23]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d135      	bne.n	8004096 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800402e:	4b21      	ldr	r3, [pc, #132]	; (80040b4 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004030:	4013      	ands	r3, r2
 8004032:	f043 0202 	orr.w	r2, r3, #2
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	68b9      	ldr	r1, [r7, #8]
 8004042:	4618      	mov	r0, r3
 8004044:	f7ff ff90 	bl	8003f68 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004048:	e014      	b.n	8004074 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	3301      	adds	r3, #1
 800404e:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	4a19      	ldr	r2, [pc, #100]	; (80040b8 <HAL_ADCEx_Calibration_Start+0xc4>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d30d      	bcc.n	8004074 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800405c:	f023 0312 	bic.w	r3, r3, #18
 8004060:	f043 0210 	orr.w	r2, r3, #16
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2200      	movs	r2, #0
 800406c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e01b      	b.n	80040ac <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4618      	mov	r0, r3
 800407a:	f7ff ff93 	bl	8003fa4 <LL_ADC_IsCalibrationOnGoing>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d1e2      	bne.n	800404a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004088:	f023 0303 	bic.w	r3, r3, #3
 800408c:	f043 0201 	orr.w	r2, r3, #1
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	655a      	str	r2, [r3, #84]	; 0x54
 8004094:	e005      	b.n	80040a2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800409a:	f043 0210 	orr.w	r2, r3, #16
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80040aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3718      	adds	r7, #24
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	ffffeefd 	.word	0xffffeefd
 80040b8:	25c3f800 	.word	0x25c3f800

080040bc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80040bc:	b590      	push	{r4, r7, lr}
 80040be:	b09f      	sub	sp, #124	; 0x7c
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040c6:	2300      	movs	r3, #0
 80040c8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d101      	bne.n	80040da <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80040d6:	2302      	movs	r3, #2
 80040d8:	e0be      	b.n	8004258 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2201      	movs	r2, #1
 80040de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80040e2:	2300      	movs	r3, #0
 80040e4:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80040e6:	2300      	movs	r3, #0
 80040e8:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a5c      	ldr	r2, [pc, #368]	; (8004260 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d102      	bne.n	80040fa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80040f4:	4b5b      	ldr	r3, [pc, #364]	; (8004264 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80040f6:	60bb      	str	r3, [r7, #8]
 80040f8:	e001      	b.n	80040fe <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80040fa:	2300      	movs	r3, #0
 80040fc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d10b      	bne.n	800411c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004108:	f043 0220 	orr.w	r2, r3, #32
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e09d      	b.n	8004258 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	4618      	mov	r0, r3
 8004120:	f7ff ff54 	bl	8003fcc <LL_ADC_REG_IsConversionOngoing>
 8004124:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4618      	mov	r0, r3
 800412c:	f7ff ff4e 	bl	8003fcc <LL_ADC_REG_IsConversionOngoing>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d17f      	bne.n	8004236 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004136:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004138:	2b00      	cmp	r3, #0
 800413a:	d17c      	bne.n	8004236 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a47      	ldr	r2, [pc, #284]	; (8004260 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d004      	beq.n	8004150 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a46      	ldr	r2, [pc, #280]	; (8004264 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d101      	bne.n	8004154 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8004150:	4b45      	ldr	r3, [pc, #276]	; (8004268 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004152:	e000      	b.n	8004156 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004154:	4b45      	ldr	r3, [pc, #276]	; (800426c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004156:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d039      	beq.n	80041d4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004160:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	431a      	orrs	r2, r3
 800416e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004170:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a3a      	ldr	r2, [pc, #232]	; (8004260 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d004      	beq.n	8004186 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a38      	ldr	r2, [pc, #224]	; (8004264 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d10e      	bne.n	80041a4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004186:	4836      	ldr	r0, [pc, #216]	; (8004260 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004188:	f7ff feda 	bl	8003f40 <LL_ADC_IsEnabled>
 800418c:	4604      	mov	r4, r0
 800418e:	4835      	ldr	r0, [pc, #212]	; (8004264 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004190:	f7ff fed6 	bl	8003f40 <LL_ADC_IsEnabled>
 8004194:	4603      	mov	r3, r0
 8004196:	4323      	orrs	r3, r4
 8004198:	2b00      	cmp	r3, #0
 800419a:	bf0c      	ite	eq
 800419c:	2301      	moveq	r3, #1
 800419e:	2300      	movne	r3, #0
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	e008      	b.n	80041b6 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80041a4:	4832      	ldr	r0, [pc, #200]	; (8004270 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80041a6:	f7ff fecb 	bl	8003f40 <LL_ADC_IsEnabled>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	bf0c      	ite	eq
 80041b0:	2301      	moveq	r3, #1
 80041b2:	2300      	movne	r3, #0
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d047      	beq.n	800424a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80041ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041bc:	689a      	ldr	r2, [r3, #8]
 80041be:	4b2d      	ldr	r3, [pc, #180]	; (8004274 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80041c0:	4013      	ands	r3, r2
 80041c2:	683a      	ldr	r2, [r7, #0]
 80041c4:	6811      	ldr	r1, [r2, #0]
 80041c6:	683a      	ldr	r2, [r7, #0]
 80041c8:	6892      	ldr	r2, [r2, #8]
 80041ca:	430a      	orrs	r2, r1
 80041cc:	431a      	orrs	r2, r3
 80041ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041d0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80041d2:	e03a      	b.n	800424a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80041d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80041dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041de:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a1e      	ldr	r2, [pc, #120]	; (8004260 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d004      	beq.n	80041f4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a1d      	ldr	r2, [pc, #116]	; (8004264 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d10e      	bne.n	8004212 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80041f4:	481a      	ldr	r0, [pc, #104]	; (8004260 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80041f6:	f7ff fea3 	bl	8003f40 <LL_ADC_IsEnabled>
 80041fa:	4604      	mov	r4, r0
 80041fc:	4819      	ldr	r0, [pc, #100]	; (8004264 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80041fe:	f7ff fe9f 	bl	8003f40 <LL_ADC_IsEnabled>
 8004202:	4603      	mov	r3, r0
 8004204:	4323      	orrs	r3, r4
 8004206:	2b00      	cmp	r3, #0
 8004208:	bf0c      	ite	eq
 800420a:	2301      	moveq	r3, #1
 800420c:	2300      	movne	r3, #0
 800420e:	b2db      	uxtb	r3, r3
 8004210:	e008      	b.n	8004224 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004212:	4817      	ldr	r0, [pc, #92]	; (8004270 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004214:	f7ff fe94 	bl	8003f40 <LL_ADC_IsEnabled>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	bf0c      	ite	eq
 800421e:	2301      	moveq	r3, #1
 8004220:	2300      	movne	r3, #0
 8004222:	b2db      	uxtb	r3, r3
 8004224:	2b00      	cmp	r3, #0
 8004226:	d010      	beq.n	800424a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004228:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800422a:	689a      	ldr	r2, [r3, #8]
 800422c:	4b11      	ldr	r3, [pc, #68]	; (8004274 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800422e:	4013      	ands	r3, r2
 8004230:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004232:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004234:	e009      	b.n	800424a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800423a:	f043 0220 	orr.w	r2, r3, #32
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004248:	e000      	b.n	800424c <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800424a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004254:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004258:	4618      	mov	r0, r3
 800425a:	377c      	adds	r7, #124	; 0x7c
 800425c:	46bd      	mov	sp, r7
 800425e:	bd90      	pop	{r4, r7, pc}
 8004260:	40022000 	.word	0x40022000
 8004264:	40022100 	.word	0x40022100
 8004268:	40022300 	.word	0x40022300
 800426c:	58026300 	.word	0x58026300
 8004270:	58026000 	.word	0x58026000
 8004274:	fffff0e0 	.word	0xfffff0e0

08004278 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004278:	b480      	push	{r7}
 800427a:	b085      	sub	sp, #20
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f003 0307 	and.w	r3, r3, #7
 8004286:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004288:	4b0b      	ldr	r3, [pc, #44]	; (80042b8 <__NVIC_SetPriorityGrouping+0x40>)
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800428e:	68ba      	ldr	r2, [r7, #8]
 8004290:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004294:	4013      	ands	r3, r2
 8004296:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80042a0:	4b06      	ldr	r3, [pc, #24]	; (80042bc <__NVIC_SetPriorityGrouping+0x44>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80042a6:	4a04      	ldr	r2, [pc, #16]	; (80042b8 <__NVIC_SetPriorityGrouping+0x40>)
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	60d3      	str	r3, [r2, #12]
}
 80042ac:	bf00      	nop
 80042ae:	3714      	adds	r7, #20
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr
 80042b8:	e000ed00 	.word	0xe000ed00
 80042bc:	05fa0000 	.word	0x05fa0000

080042c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80042c0:	b480      	push	{r7}
 80042c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042c4:	4b04      	ldr	r3, [pc, #16]	; (80042d8 <__NVIC_GetPriorityGrouping+0x18>)
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	0a1b      	lsrs	r3, r3, #8
 80042ca:	f003 0307 	and.w	r3, r3, #7
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr
 80042d8:	e000ed00 	.word	0xe000ed00

080042dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	4603      	mov	r3, r0
 80042e4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80042e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	db0b      	blt.n	8004306 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042ee:	88fb      	ldrh	r3, [r7, #6]
 80042f0:	f003 021f 	and.w	r2, r3, #31
 80042f4:	4907      	ldr	r1, [pc, #28]	; (8004314 <__NVIC_EnableIRQ+0x38>)
 80042f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042fa:	095b      	lsrs	r3, r3, #5
 80042fc:	2001      	movs	r0, #1
 80042fe:	fa00 f202 	lsl.w	r2, r0, r2
 8004302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004306:	bf00      	nop
 8004308:	370c      	adds	r7, #12
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop
 8004314:	e000e100 	.word	0xe000e100

08004318 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	4603      	mov	r3, r0
 8004320:	6039      	str	r1, [r7, #0]
 8004322:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004324:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004328:	2b00      	cmp	r3, #0
 800432a:	db0a      	blt.n	8004342 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	b2da      	uxtb	r2, r3
 8004330:	490c      	ldr	r1, [pc, #48]	; (8004364 <__NVIC_SetPriority+0x4c>)
 8004332:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004336:	0112      	lsls	r2, r2, #4
 8004338:	b2d2      	uxtb	r2, r2
 800433a:	440b      	add	r3, r1
 800433c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004340:	e00a      	b.n	8004358 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	b2da      	uxtb	r2, r3
 8004346:	4908      	ldr	r1, [pc, #32]	; (8004368 <__NVIC_SetPriority+0x50>)
 8004348:	88fb      	ldrh	r3, [r7, #6]
 800434a:	f003 030f 	and.w	r3, r3, #15
 800434e:	3b04      	subs	r3, #4
 8004350:	0112      	lsls	r2, r2, #4
 8004352:	b2d2      	uxtb	r2, r2
 8004354:	440b      	add	r3, r1
 8004356:	761a      	strb	r2, [r3, #24]
}
 8004358:	bf00      	nop
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr
 8004364:	e000e100 	.word	0xe000e100
 8004368:	e000ed00 	.word	0xe000ed00

0800436c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800436c:	b480      	push	{r7}
 800436e:	b089      	sub	sp, #36	; 0x24
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f003 0307 	and.w	r3, r3, #7
 800437e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	f1c3 0307 	rsb	r3, r3, #7
 8004386:	2b04      	cmp	r3, #4
 8004388:	bf28      	it	cs
 800438a:	2304      	movcs	r3, #4
 800438c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	3304      	adds	r3, #4
 8004392:	2b06      	cmp	r3, #6
 8004394:	d902      	bls.n	800439c <NVIC_EncodePriority+0x30>
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	3b03      	subs	r3, #3
 800439a:	e000      	b.n	800439e <NVIC_EncodePriority+0x32>
 800439c:	2300      	movs	r3, #0
 800439e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80043a4:	69bb      	ldr	r3, [r7, #24]
 80043a6:	fa02 f303 	lsl.w	r3, r2, r3
 80043aa:	43da      	mvns	r2, r3
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	401a      	ands	r2, r3
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80043b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	fa01 f303 	lsl.w	r3, r1, r3
 80043be:	43d9      	mvns	r1, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043c4:	4313      	orrs	r3, r2
         );
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3724      	adds	r7, #36	; 0x24
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr

080043d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043d2:	b580      	push	{r7, lr}
 80043d4:	b082      	sub	sp, #8
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f7ff ff4c 	bl	8004278 <__NVIC_SetPriorityGrouping>
}
 80043e0:	bf00      	nop
 80043e2:	3708      	adds	r7, #8
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b086      	sub	sp, #24
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	4603      	mov	r3, r0
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	607a      	str	r2, [r7, #4]
 80043f4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80043f6:	f7ff ff63 	bl	80042c0 <__NVIC_GetPriorityGrouping>
 80043fa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	68b9      	ldr	r1, [r7, #8]
 8004400:	6978      	ldr	r0, [r7, #20]
 8004402:	f7ff ffb3 	bl	800436c <NVIC_EncodePriority>
 8004406:	4602      	mov	r2, r0
 8004408:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800440c:	4611      	mov	r1, r2
 800440e:	4618      	mov	r0, r3
 8004410:	f7ff ff82 	bl	8004318 <__NVIC_SetPriority>
}
 8004414:	bf00      	nop
 8004416:	3718      	adds	r7, #24
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0
 8004422:	4603      	mov	r3, r0
 8004424:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004426:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800442a:	4618      	mov	r0, r3
 800442c:	f7ff ff56 	bl	80042dc <__NVIC_EnableIRQ>
}
 8004430:	bf00      	nop
 8004432:	3708      	adds	r7, #8
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d101      	bne.n	800444a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e014      	b.n	8004474 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	791b      	ldrb	r3, [r3, #4]
 800444e:	b2db      	uxtb	r3, r3
 8004450:	2b00      	cmp	r3, #0
 8004452:	d105      	bne.n	8004460 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f7fd fd5c 	bl	8001f18 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2202      	movs	r2, #2
 8004464:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004472:	2300      	movs	r3, #0
}
 8004474:	4618      	mov	r0, r3
 8004476:	3708      	adds	r7, #8
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}

0800447c <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004492:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d01d      	beq.n	80044da <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d018      	beq.n	80044da <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2204      	movs	r2, #4
 80044ac:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	f043 0201 	orr.w	r2, r3, #1
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80044c2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80044d2:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f000 f827 	bl	8004528 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d01d      	beq.n	8004520 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d018      	beq.n	8004520 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2204      	movs	r2, #4
 80044f2:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	691b      	ldr	r3, [r3, #16]
 80044f8:	f043 0202 	orr.w	r2, r3, #2
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004508:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8004518:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 f950 	bl	80047c0 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8004520:	bf00      	nop
 8004522:	3710      	adds	r7, #16
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8004530:	bf00      	nop
 8004532:	370c      	adds	r7, #12
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr

0800453c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b08a      	sub	sp, #40	; 0x28
 8004540:	af00      	add	r7, sp, #0
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	60b9      	str	r1, [r7, #8]
 8004546:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004548:	2300      	movs	r3, #0
 800454a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d002      	beq.n	800455a <HAL_DAC_ConfigChannel+0x1e>
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d101      	bne.n	800455e <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e12a      	b.n	80047b4 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	795b      	ldrb	r3, [r3, #5]
 8004562:	2b01      	cmp	r3, #1
 8004564:	d101      	bne.n	800456a <HAL_DAC_ConfigChannel+0x2e>
 8004566:	2302      	movs	r3, #2
 8004568:	e124      	b.n	80047b4 <HAL_DAC_ConfigChannel+0x278>
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2201      	movs	r2, #1
 800456e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2202      	movs	r2, #2
 8004574:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	2b04      	cmp	r3, #4
 800457c:	d17a      	bne.n	8004674 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800457e:	f7fe fa39 	bl	80029f4 <HAL_GetTick>
 8004582:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d13d      	bne.n	8004606 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800458a:	e018      	b.n	80045be <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800458c:	f7fe fa32 	bl	80029f4 <HAL_GetTick>
 8004590:	4602      	mov	r2, r0
 8004592:	69fb      	ldr	r3, [r7, #28]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	2b01      	cmp	r3, #1
 8004598:	d911      	bls.n	80045be <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045a0:	4b86      	ldr	r3, [pc, #536]	; (80047bc <HAL_DAC_ConfigChannel+0x280>)
 80045a2:	4013      	ands	r3, r2
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d00a      	beq.n	80045be <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	f043 0208 	orr.w	r2, r3, #8
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2203      	movs	r2, #3
 80045b8:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e0fa      	b.n	80047b4 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045c4:	4b7d      	ldr	r3, [pc, #500]	; (80047bc <HAL_DAC_ConfigChannel+0x280>)
 80045c6:	4013      	ands	r3, r2
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d1df      	bne.n	800458c <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68ba      	ldr	r2, [r7, #8]
 80045d2:	6992      	ldr	r2, [r2, #24]
 80045d4:	641a      	str	r2, [r3, #64]	; 0x40
 80045d6:	e020      	b.n	800461a <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80045d8:	f7fe fa0c 	bl	80029f4 <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d90f      	bls.n	8004606 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	da0a      	bge.n	8004606 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	691b      	ldr	r3, [r3, #16]
 80045f4:	f043 0208 	orr.w	r2, r3, #8
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2203      	movs	r2, #3
 8004600:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e0d6      	b.n	80047b4 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800460c:	2b00      	cmp	r3, #0
 800460e:	dbe3      	blt.n	80045d8 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68ba      	ldr	r2, [r7, #8]
 8004616:	6992      	ldr	r2, [r2, #24]
 8004618:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f003 0310 	and.w	r3, r3, #16
 8004626:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800462a:	fa01 f303 	lsl.w	r3, r1, r3
 800462e:	43db      	mvns	r3, r3
 8004630:	ea02 0103 	and.w	r1, r2, r3
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	69da      	ldr	r2, [r3, #28]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f003 0310 	and.w	r3, r3, #16
 800463e:	409a      	lsls	r2, r3
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	430a      	orrs	r2, r1
 8004646:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f003 0310 	and.w	r3, r3, #16
 8004654:	21ff      	movs	r1, #255	; 0xff
 8004656:	fa01 f303 	lsl.w	r3, r1, r3
 800465a:	43db      	mvns	r3, r3
 800465c:	ea02 0103 	and.w	r1, r2, r3
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	6a1a      	ldr	r2, [r3, #32]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f003 0310 	and.w	r3, r3, #16
 800466a:	409a      	lsls	r2, r3
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	430a      	orrs	r2, r1
 8004672:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	691b      	ldr	r3, [r3, #16]
 8004678:	2b01      	cmp	r3, #1
 800467a:	d11d      	bne.n	80046b8 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004682:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f003 0310 	and.w	r3, r3, #16
 800468a:	221f      	movs	r2, #31
 800468c:	fa02 f303 	lsl.w	r3, r2, r3
 8004690:	43db      	mvns	r3, r3
 8004692:	69ba      	ldr	r2, [r7, #24]
 8004694:	4013      	ands	r3, r2
 8004696:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	695b      	ldr	r3, [r3, #20]
 800469c:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f003 0310 	and.w	r3, r3, #16
 80046a4:	697a      	ldr	r2, [r7, #20]
 80046a6:	fa02 f303 	lsl.w	r3, r2, r3
 80046aa:	69ba      	ldr	r2, [r7, #24]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	69ba      	ldr	r2, [r7, #24]
 80046b6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046be:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f003 0310 	and.w	r3, r3, #16
 80046c6:	2207      	movs	r2, #7
 80046c8:	fa02 f303 	lsl.w	r3, r2, r3
 80046cc:	43db      	mvns	r3, r3
 80046ce:	69ba      	ldr	r2, [r7, #24]
 80046d0:	4013      	ands	r3, r2
 80046d2:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d102      	bne.n	80046e2 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 80046dc:	2300      	movs	r3, #0
 80046de:	627b      	str	r3, [r7, #36]	; 0x24
 80046e0:	e00f      	b.n	8004702 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d102      	bne.n	80046f0 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80046ea:	2301      	movs	r3, #1
 80046ec:	627b      	str	r3, [r7, #36]	; 0x24
 80046ee:	e008      	b.n	8004702 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d102      	bne.n	80046fe <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80046f8:	2301      	movs	r3, #1
 80046fa:	627b      	str	r3, [r7, #36]	; 0x24
 80046fc:	e001      	b.n	8004702 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80046fe:	2300      	movs	r3, #0
 8004700:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	4313      	orrs	r3, r2
 800470c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800470e:	4313      	orrs	r3, r2
 8004710:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f003 0310 	and.w	r3, r3, #16
 8004718:	697a      	ldr	r2, [r7, #20]
 800471a:	fa02 f303 	lsl.w	r3, r2, r3
 800471e:	69ba      	ldr	r2, [r7, #24]
 8004720:	4313      	orrs	r3, r2
 8004722:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	69ba      	ldr	r2, [r7, #24]
 800472a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	6819      	ldr	r1, [r3, #0]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f003 0310 	and.w	r3, r3, #16
 8004738:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800473c:	fa02 f303 	lsl.w	r3, r2, r3
 8004740:	43da      	mvns	r2, r3
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	400a      	ands	r2, r1
 8004748:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f003 0310 	and.w	r3, r3, #16
 8004758:	f640 72fe 	movw	r2, #4094	; 0xffe
 800475c:	fa02 f303 	lsl.w	r3, r2, r3
 8004760:	43db      	mvns	r3, r3
 8004762:	69ba      	ldr	r2, [r7, #24]
 8004764:	4013      	ands	r3, r2
 8004766:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f003 0310 	and.w	r3, r3, #16
 8004774:	697a      	ldr	r2, [r7, #20]
 8004776:	fa02 f303 	lsl.w	r3, r2, r3
 800477a:	69ba      	ldr	r2, [r7, #24]
 800477c:	4313      	orrs	r3, r2
 800477e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	69ba      	ldr	r2, [r7, #24]
 8004786:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	6819      	ldr	r1, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f003 0310 	and.w	r3, r3, #16
 8004794:	22c0      	movs	r2, #192	; 0xc0
 8004796:	fa02 f303 	lsl.w	r3, r2, r3
 800479a:	43da      	mvns	r2, r3
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	400a      	ands	r2, r1
 80047a2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2201      	movs	r2, #1
 80047a8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2200      	movs	r2, #0
 80047ae:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80047b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3728      	adds	r7, #40	; 0x28
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	20008000 	.word	0x20008000

080047c0 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80047c8:	bf00      	nop
 80047ca:	370c      	adds	r7, #12
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr

080047d4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b086      	sub	sp, #24
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80047dc:	f7fe f90a 	bl	80029f4 <HAL_GetTick>
 80047e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d101      	bne.n	80047ec <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e316      	b.n	8004e1a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a66      	ldr	r2, [pc, #408]	; (800498c <HAL_DMA_Init+0x1b8>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d04a      	beq.n	800488c <HAL_DMA_Init+0xb8>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a65      	ldr	r2, [pc, #404]	; (8004990 <HAL_DMA_Init+0x1bc>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d045      	beq.n	800488c <HAL_DMA_Init+0xb8>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a63      	ldr	r2, [pc, #396]	; (8004994 <HAL_DMA_Init+0x1c0>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d040      	beq.n	800488c <HAL_DMA_Init+0xb8>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a62      	ldr	r2, [pc, #392]	; (8004998 <HAL_DMA_Init+0x1c4>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d03b      	beq.n	800488c <HAL_DMA_Init+0xb8>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a60      	ldr	r2, [pc, #384]	; (800499c <HAL_DMA_Init+0x1c8>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d036      	beq.n	800488c <HAL_DMA_Init+0xb8>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a5f      	ldr	r2, [pc, #380]	; (80049a0 <HAL_DMA_Init+0x1cc>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d031      	beq.n	800488c <HAL_DMA_Init+0xb8>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a5d      	ldr	r2, [pc, #372]	; (80049a4 <HAL_DMA_Init+0x1d0>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d02c      	beq.n	800488c <HAL_DMA_Init+0xb8>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a5c      	ldr	r2, [pc, #368]	; (80049a8 <HAL_DMA_Init+0x1d4>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d027      	beq.n	800488c <HAL_DMA_Init+0xb8>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a5a      	ldr	r2, [pc, #360]	; (80049ac <HAL_DMA_Init+0x1d8>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d022      	beq.n	800488c <HAL_DMA_Init+0xb8>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a59      	ldr	r2, [pc, #356]	; (80049b0 <HAL_DMA_Init+0x1dc>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d01d      	beq.n	800488c <HAL_DMA_Init+0xb8>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a57      	ldr	r2, [pc, #348]	; (80049b4 <HAL_DMA_Init+0x1e0>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d018      	beq.n	800488c <HAL_DMA_Init+0xb8>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a56      	ldr	r2, [pc, #344]	; (80049b8 <HAL_DMA_Init+0x1e4>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d013      	beq.n	800488c <HAL_DMA_Init+0xb8>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a54      	ldr	r2, [pc, #336]	; (80049bc <HAL_DMA_Init+0x1e8>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d00e      	beq.n	800488c <HAL_DMA_Init+0xb8>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a53      	ldr	r2, [pc, #332]	; (80049c0 <HAL_DMA_Init+0x1ec>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d009      	beq.n	800488c <HAL_DMA_Init+0xb8>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a51      	ldr	r2, [pc, #324]	; (80049c4 <HAL_DMA_Init+0x1f0>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d004      	beq.n	800488c <HAL_DMA_Init+0xb8>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a50      	ldr	r2, [pc, #320]	; (80049c8 <HAL_DMA_Init+0x1f4>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d101      	bne.n	8004890 <HAL_DMA_Init+0xbc>
 800488c:	2301      	movs	r3, #1
 800488e:	e000      	b.n	8004892 <HAL_DMA_Init+0xbe>
 8004890:	2300      	movs	r3, #0
 8004892:	2b00      	cmp	r3, #0
 8004894:	f000 813b 	beq.w	8004b0e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2202      	movs	r2, #2
 800489c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a37      	ldr	r2, [pc, #220]	; (800498c <HAL_DMA_Init+0x1b8>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d04a      	beq.n	8004948 <HAL_DMA_Init+0x174>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a36      	ldr	r2, [pc, #216]	; (8004990 <HAL_DMA_Init+0x1bc>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d045      	beq.n	8004948 <HAL_DMA_Init+0x174>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a34      	ldr	r2, [pc, #208]	; (8004994 <HAL_DMA_Init+0x1c0>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d040      	beq.n	8004948 <HAL_DMA_Init+0x174>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a33      	ldr	r2, [pc, #204]	; (8004998 <HAL_DMA_Init+0x1c4>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d03b      	beq.n	8004948 <HAL_DMA_Init+0x174>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a31      	ldr	r2, [pc, #196]	; (800499c <HAL_DMA_Init+0x1c8>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d036      	beq.n	8004948 <HAL_DMA_Init+0x174>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a30      	ldr	r2, [pc, #192]	; (80049a0 <HAL_DMA_Init+0x1cc>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d031      	beq.n	8004948 <HAL_DMA_Init+0x174>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a2e      	ldr	r2, [pc, #184]	; (80049a4 <HAL_DMA_Init+0x1d0>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d02c      	beq.n	8004948 <HAL_DMA_Init+0x174>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a2d      	ldr	r2, [pc, #180]	; (80049a8 <HAL_DMA_Init+0x1d4>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d027      	beq.n	8004948 <HAL_DMA_Init+0x174>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a2b      	ldr	r2, [pc, #172]	; (80049ac <HAL_DMA_Init+0x1d8>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d022      	beq.n	8004948 <HAL_DMA_Init+0x174>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a2a      	ldr	r2, [pc, #168]	; (80049b0 <HAL_DMA_Init+0x1dc>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d01d      	beq.n	8004948 <HAL_DMA_Init+0x174>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a28      	ldr	r2, [pc, #160]	; (80049b4 <HAL_DMA_Init+0x1e0>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d018      	beq.n	8004948 <HAL_DMA_Init+0x174>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a27      	ldr	r2, [pc, #156]	; (80049b8 <HAL_DMA_Init+0x1e4>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d013      	beq.n	8004948 <HAL_DMA_Init+0x174>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a25      	ldr	r2, [pc, #148]	; (80049bc <HAL_DMA_Init+0x1e8>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d00e      	beq.n	8004948 <HAL_DMA_Init+0x174>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a24      	ldr	r2, [pc, #144]	; (80049c0 <HAL_DMA_Init+0x1ec>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d009      	beq.n	8004948 <HAL_DMA_Init+0x174>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a22      	ldr	r2, [pc, #136]	; (80049c4 <HAL_DMA_Init+0x1f0>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d004      	beq.n	8004948 <HAL_DMA_Init+0x174>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a21      	ldr	r2, [pc, #132]	; (80049c8 <HAL_DMA_Init+0x1f4>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d108      	bne.n	800495a <HAL_DMA_Init+0x186>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f022 0201 	bic.w	r2, r2, #1
 8004956:	601a      	str	r2, [r3, #0]
 8004958:	e007      	b.n	800496a <HAL_DMA_Init+0x196>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f022 0201 	bic.w	r2, r2, #1
 8004968:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800496a:	e02f      	b.n	80049cc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800496c:	f7fe f842 	bl	80029f4 <HAL_GetTick>
 8004970:	4602      	mov	r2, r0
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	2b05      	cmp	r3, #5
 8004978:	d928      	bls.n	80049cc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2220      	movs	r2, #32
 800497e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2203      	movs	r2, #3
 8004984:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e246      	b.n	8004e1a <HAL_DMA_Init+0x646>
 800498c:	40020010 	.word	0x40020010
 8004990:	40020028 	.word	0x40020028
 8004994:	40020040 	.word	0x40020040
 8004998:	40020058 	.word	0x40020058
 800499c:	40020070 	.word	0x40020070
 80049a0:	40020088 	.word	0x40020088
 80049a4:	400200a0 	.word	0x400200a0
 80049a8:	400200b8 	.word	0x400200b8
 80049ac:	40020410 	.word	0x40020410
 80049b0:	40020428 	.word	0x40020428
 80049b4:	40020440 	.word	0x40020440
 80049b8:	40020458 	.word	0x40020458
 80049bc:	40020470 	.word	0x40020470
 80049c0:	40020488 	.word	0x40020488
 80049c4:	400204a0 	.word	0x400204a0
 80049c8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 0301 	and.w	r3, r3, #1
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d1c8      	bne.n	800496c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80049e2:	697a      	ldr	r2, [r7, #20]
 80049e4:	4b83      	ldr	r3, [pc, #524]	; (8004bf4 <HAL_DMA_Init+0x420>)
 80049e6:	4013      	ands	r3, r2
 80049e8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80049f2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	691b      	ldr	r3, [r3, #16]
 80049f8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049fe:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	699b      	ldr	r3, [r3, #24]
 8004a04:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a0a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6a1b      	ldr	r3, [r3, #32]
 8004a10:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004a12:	697a      	ldr	r2, [r7, #20]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1c:	2b04      	cmp	r3, #4
 8004a1e:	d107      	bne.n	8004a30 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	697a      	ldr	r2, [r7, #20]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004a30:	4b71      	ldr	r3, [pc, #452]	; (8004bf8 <HAL_DMA_Init+0x424>)
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	4b71      	ldr	r3, [pc, #452]	; (8004bfc <HAL_DMA_Init+0x428>)
 8004a36:	4013      	ands	r3, r2
 8004a38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a3c:	d328      	bcc.n	8004a90 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	2b28      	cmp	r3, #40	; 0x28
 8004a44:	d903      	bls.n	8004a4e <HAL_DMA_Init+0x27a>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	2b2e      	cmp	r3, #46	; 0x2e
 8004a4c:	d917      	bls.n	8004a7e <HAL_DMA_Init+0x2aa>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	2b3e      	cmp	r3, #62	; 0x3e
 8004a54:	d903      	bls.n	8004a5e <HAL_DMA_Init+0x28a>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	2b42      	cmp	r3, #66	; 0x42
 8004a5c:	d90f      	bls.n	8004a7e <HAL_DMA_Init+0x2aa>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	2b46      	cmp	r3, #70	; 0x46
 8004a64:	d903      	bls.n	8004a6e <HAL_DMA_Init+0x29a>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	2b48      	cmp	r3, #72	; 0x48
 8004a6c:	d907      	bls.n	8004a7e <HAL_DMA_Init+0x2aa>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	2b4e      	cmp	r3, #78	; 0x4e
 8004a74:	d905      	bls.n	8004a82 <HAL_DMA_Init+0x2ae>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	2b52      	cmp	r3, #82	; 0x52
 8004a7c:	d801      	bhi.n	8004a82 <HAL_DMA_Init+0x2ae>
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e000      	b.n	8004a84 <HAL_DMA_Init+0x2b0>
 8004a82:	2300      	movs	r3, #0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d003      	beq.n	8004a90 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a8e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	697a      	ldr	r2, [r7, #20]
 8004a96:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	695b      	ldr	r3, [r3, #20]
 8004a9e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	f023 0307 	bic.w	r3, r3, #7
 8004aa6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aac:	697a      	ldr	r2, [r7, #20]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab6:	2b04      	cmp	r3, #4
 8004ab8:	d117      	bne.n	8004aea <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004abe:	697a      	ldr	r2, [r7, #20]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d00e      	beq.n	8004aea <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f002 fb33 	bl	8007138 <DMA_CheckFifoParam>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d008      	beq.n	8004aea <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2240      	movs	r2, #64	; 0x40
 8004adc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e197      	b.n	8004e1a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	697a      	ldr	r2, [r7, #20]
 8004af0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f002 fa6e 	bl	8006fd4 <DMA_CalcBaseAndBitshift>
 8004af8:	4603      	mov	r3, r0
 8004afa:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b00:	f003 031f 	and.w	r3, r3, #31
 8004b04:	223f      	movs	r2, #63	; 0x3f
 8004b06:	409a      	lsls	r2, r3
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	609a      	str	r2, [r3, #8]
 8004b0c:	e0cd      	b.n	8004caa <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a3b      	ldr	r2, [pc, #236]	; (8004c00 <HAL_DMA_Init+0x42c>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d022      	beq.n	8004b5e <HAL_DMA_Init+0x38a>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a39      	ldr	r2, [pc, #228]	; (8004c04 <HAL_DMA_Init+0x430>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d01d      	beq.n	8004b5e <HAL_DMA_Init+0x38a>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a38      	ldr	r2, [pc, #224]	; (8004c08 <HAL_DMA_Init+0x434>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d018      	beq.n	8004b5e <HAL_DMA_Init+0x38a>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a36      	ldr	r2, [pc, #216]	; (8004c0c <HAL_DMA_Init+0x438>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d013      	beq.n	8004b5e <HAL_DMA_Init+0x38a>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a35      	ldr	r2, [pc, #212]	; (8004c10 <HAL_DMA_Init+0x43c>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d00e      	beq.n	8004b5e <HAL_DMA_Init+0x38a>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a33      	ldr	r2, [pc, #204]	; (8004c14 <HAL_DMA_Init+0x440>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d009      	beq.n	8004b5e <HAL_DMA_Init+0x38a>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a32      	ldr	r2, [pc, #200]	; (8004c18 <HAL_DMA_Init+0x444>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d004      	beq.n	8004b5e <HAL_DMA_Init+0x38a>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a30      	ldr	r2, [pc, #192]	; (8004c1c <HAL_DMA_Init+0x448>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d101      	bne.n	8004b62 <HAL_DMA_Init+0x38e>
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e000      	b.n	8004b64 <HAL_DMA_Init+0x390>
 8004b62:	2300      	movs	r3, #0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	f000 8097 	beq.w	8004c98 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a24      	ldr	r2, [pc, #144]	; (8004c00 <HAL_DMA_Init+0x42c>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d021      	beq.n	8004bb8 <HAL_DMA_Init+0x3e4>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a22      	ldr	r2, [pc, #136]	; (8004c04 <HAL_DMA_Init+0x430>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d01c      	beq.n	8004bb8 <HAL_DMA_Init+0x3e4>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a21      	ldr	r2, [pc, #132]	; (8004c08 <HAL_DMA_Init+0x434>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d017      	beq.n	8004bb8 <HAL_DMA_Init+0x3e4>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a1f      	ldr	r2, [pc, #124]	; (8004c0c <HAL_DMA_Init+0x438>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d012      	beq.n	8004bb8 <HAL_DMA_Init+0x3e4>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a1e      	ldr	r2, [pc, #120]	; (8004c10 <HAL_DMA_Init+0x43c>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d00d      	beq.n	8004bb8 <HAL_DMA_Init+0x3e4>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a1c      	ldr	r2, [pc, #112]	; (8004c14 <HAL_DMA_Init+0x440>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d008      	beq.n	8004bb8 <HAL_DMA_Init+0x3e4>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a1b      	ldr	r2, [pc, #108]	; (8004c18 <HAL_DMA_Init+0x444>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d003      	beq.n	8004bb8 <HAL_DMA_Init+0x3e4>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a19      	ldr	r2, [pc, #100]	; (8004c1c <HAL_DMA_Init+0x448>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2202      	movs	r2, #2
 8004bbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004bd2:	697a      	ldr	r2, [r7, #20]
 8004bd4:	4b12      	ldr	r3, [pc, #72]	; (8004c20 <HAL_DMA_Init+0x44c>)
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	2b40      	cmp	r3, #64	; 0x40
 8004be0:	d020      	beq.n	8004c24 <HAL_DMA_Init+0x450>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	2b80      	cmp	r3, #128	; 0x80
 8004be8:	d102      	bne.n	8004bf0 <HAL_DMA_Init+0x41c>
 8004bea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004bee:	e01a      	b.n	8004c26 <HAL_DMA_Init+0x452>
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	e018      	b.n	8004c26 <HAL_DMA_Init+0x452>
 8004bf4:	fe10803f 	.word	0xfe10803f
 8004bf8:	5c001000 	.word	0x5c001000
 8004bfc:	ffff0000 	.word	0xffff0000
 8004c00:	58025408 	.word	0x58025408
 8004c04:	5802541c 	.word	0x5802541c
 8004c08:	58025430 	.word	0x58025430
 8004c0c:	58025444 	.word	0x58025444
 8004c10:	58025458 	.word	0x58025458
 8004c14:	5802546c 	.word	0x5802546c
 8004c18:	58025480 	.word	0x58025480
 8004c1c:	58025494 	.word	0x58025494
 8004c20:	fffe000f 	.word	0xfffe000f
 8004c24:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	68d2      	ldr	r2, [r2, #12]
 8004c2a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004c2c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004c34:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	695b      	ldr	r3, [r3, #20]
 8004c3a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004c3c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	699b      	ldr	r3, [r3, #24]
 8004c42:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004c44:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	69db      	ldr	r3, [r3, #28]
 8004c4a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004c4c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a1b      	ldr	r3, [r3, #32]
 8004c52:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004c54:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004c56:	697a      	ldr	r2, [r7, #20]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	697a      	ldr	r2, [r7, #20]
 8004c62:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	461a      	mov	r2, r3
 8004c6a:	4b6e      	ldr	r3, [pc, #440]	; (8004e24 <HAL_DMA_Init+0x650>)
 8004c6c:	4413      	add	r3, r2
 8004c6e:	4a6e      	ldr	r2, [pc, #440]	; (8004e28 <HAL_DMA_Init+0x654>)
 8004c70:	fba2 2303 	umull	r2, r3, r2, r3
 8004c74:	091b      	lsrs	r3, r3, #4
 8004c76:	009a      	lsls	r2, r3, #2
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f002 f9a9 	bl	8006fd4 <DMA_CalcBaseAndBitshift>
 8004c82:	4603      	mov	r3, r0
 8004c84:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c8a:	f003 031f 	and.w	r3, r3, #31
 8004c8e:	2201      	movs	r2, #1
 8004c90:	409a      	lsls	r2, r3
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	605a      	str	r2, [r3, #4]
 8004c96:	e008      	b.n	8004caa <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2240      	movs	r2, #64	; 0x40
 8004c9c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2203      	movs	r2, #3
 8004ca2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e0b7      	b.n	8004e1a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a5f      	ldr	r2, [pc, #380]	; (8004e2c <HAL_DMA_Init+0x658>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d072      	beq.n	8004d9a <HAL_DMA_Init+0x5c6>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a5d      	ldr	r2, [pc, #372]	; (8004e30 <HAL_DMA_Init+0x65c>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d06d      	beq.n	8004d9a <HAL_DMA_Init+0x5c6>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a5c      	ldr	r2, [pc, #368]	; (8004e34 <HAL_DMA_Init+0x660>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d068      	beq.n	8004d9a <HAL_DMA_Init+0x5c6>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a5a      	ldr	r2, [pc, #360]	; (8004e38 <HAL_DMA_Init+0x664>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d063      	beq.n	8004d9a <HAL_DMA_Init+0x5c6>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a59      	ldr	r2, [pc, #356]	; (8004e3c <HAL_DMA_Init+0x668>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d05e      	beq.n	8004d9a <HAL_DMA_Init+0x5c6>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a57      	ldr	r2, [pc, #348]	; (8004e40 <HAL_DMA_Init+0x66c>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d059      	beq.n	8004d9a <HAL_DMA_Init+0x5c6>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a56      	ldr	r2, [pc, #344]	; (8004e44 <HAL_DMA_Init+0x670>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d054      	beq.n	8004d9a <HAL_DMA_Init+0x5c6>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a54      	ldr	r2, [pc, #336]	; (8004e48 <HAL_DMA_Init+0x674>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d04f      	beq.n	8004d9a <HAL_DMA_Init+0x5c6>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a53      	ldr	r2, [pc, #332]	; (8004e4c <HAL_DMA_Init+0x678>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d04a      	beq.n	8004d9a <HAL_DMA_Init+0x5c6>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a51      	ldr	r2, [pc, #324]	; (8004e50 <HAL_DMA_Init+0x67c>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d045      	beq.n	8004d9a <HAL_DMA_Init+0x5c6>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a50      	ldr	r2, [pc, #320]	; (8004e54 <HAL_DMA_Init+0x680>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d040      	beq.n	8004d9a <HAL_DMA_Init+0x5c6>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a4e      	ldr	r2, [pc, #312]	; (8004e58 <HAL_DMA_Init+0x684>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d03b      	beq.n	8004d9a <HAL_DMA_Init+0x5c6>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a4d      	ldr	r2, [pc, #308]	; (8004e5c <HAL_DMA_Init+0x688>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d036      	beq.n	8004d9a <HAL_DMA_Init+0x5c6>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a4b      	ldr	r2, [pc, #300]	; (8004e60 <HAL_DMA_Init+0x68c>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d031      	beq.n	8004d9a <HAL_DMA_Init+0x5c6>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a4a      	ldr	r2, [pc, #296]	; (8004e64 <HAL_DMA_Init+0x690>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d02c      	beq.n	8004d9a <HAL_DMA_Init+0x5c6>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a48      	ldr	r2, [pc, #288]	; (8004e68 <HAL_DMA_Init+0x694>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d027      	beq.n	8004d9a <HAL_DMA_Init+0x5c6>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a47      	ldr	r2, [pc, #284]	; (8004e6c <HAL_DMA_Init+0x698>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d022      	beq.n	8004d9a <HAL_DMA_Init+0x5c6>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a45      	ldr	r2, [pc, #276]	; (8004e70 <HAL_DMA_Init+0x69c>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d01d      	beq.n	8004d9a <HAL_DMA_Init+0x5c6>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a44      	ldr	r2, [pc, #272]	; (8004e74 <HAL_DMA_Init+0x6a0>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d018      	beq.n	8004d9a <HAL_DMA_Init+0x5c6>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a42      	ldr	r2, [pc, #264]	; (8004e78 <HAL_DMA_Init+0x6a4>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d013      	beq.n	8004d9a <HAL_DMA_Init+0x5c6>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a41      	ldr	r2, [pc, #260]	; (8004e7c <HAL_DMA_Init+0x6a8>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d00e      	beq.n	8004d9a <HAL_DMA_Init+0x5c6>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a3f      	ldr	r2, [pc, #252]	; (8004e80 <HAL_DMA_Init+0x6ac>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d009      	beq.n	8004d9a <HAL_DMA_Init+0x5c6>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a3e      	ldr	r2, [pc, #248]	; (8004e84 <HAL_DMA_Init+0x6b0>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d004      	beq.n	8004d9a <HAL_DMA_Init+0x5c6>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a3c      	ldr	r2, [pc, #240]	; (8004e88 <HAL_DMA_Init+0x6b4>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d101      	bne.n	8004d9e <HAL_DMA_Init+0x5ca>
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e000      	b.n	8004da0 <HAL_DMA_Init+0x5cc>
 8004d9e:	2300      	movs	r3, #0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d032      	beq.n	8004e0a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f002 fa43 	bl	8007230 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	2b80      	cmp	r3, #128	; 0x80
 8004db0:	d102      	bne.n	8004db8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	685a      	ldr	r2, [r3, #4]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dc0:	b2d2      	uxtb	r2, r2
 8004dc2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dc8:	687a      	ldr	r2, [r7, #4]
 8004dca:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004dcc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d010      	beq.n	8004df8 <HAL_DMA_Init+0x624>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	2b08      	cmp	r3, #8
 8004ddc:	d80c      	bhi.n	8004df8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f002 fac0 	bl	8007364 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004de8:	2200      	movs	r2, #0
 8004dea:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004df4:	605a      	str	r2, [r3, #4]
 8004df6:	e008      	b.n	8004e0a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3718      	adds	r7, #24
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	a7fdabf8 	.word	0xa7fdabf8
 8004e28:	cccccccd 	.word	0xcccccccd
 8004e2c:	40020010 	.word	0x40020010
 8004e30:	40020028 	.word	0x40020028
 8004e34:	40020040 	.word	0x40020040
 8004e38:	40020058 	.word	0x40020058
 8004e3c:	40020070 	.word	0x40020070
 8004e40:	40020088 	.word	0x40020088
 8004e44:	400200a0 	.word	0x400200a0
 8004e48:	400200b8 	.word	0x400200b8
 8004e4c:	40020410 	.word	0x40020410
 8004e50:	40020428 	.word	0x40020428
 8004e54:	40020440 	.word	0x40020440
 8004e58:	40020458 	.word	0x40020458
 8004e5c:	40020470 	.word	0x40020470
 8004e60:	40020488 	.word	0x40020488
 8004e64:	400204a0 	.word	0x400204a0
 8004e68:	400204b8 	.word	0x400204b8
 8004e6c:	58025408 	.word	0x58025408
 8004e70:	5802541c 	.word	0x5802541c
 8004e74:	58025430 	.word	0x58025430
 8004e78:	58025444 	.word	0x58025444
 8004e7c:	58025458 	.word	0x58025458
 8004e80:	5802546c 	.word	0x5802546c
 8004e84:	58025480 	.word	0x58025480
 8004e88:	58025494 	.word	0x58025494

08004e8c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b086      	sub	sp, #24
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	60b9      	str	r1, [r7, #8]
 8004e96:	607a      	str	r2, [r7, #4]
 8004e98:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d101      	bne.n	8004ea8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e226      	b.n	80052f6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d101      	bne.n	8004eb6 <HAL_DMA_Start_IT+0x2a>
 8004eb2:	2302      	movs	r3, #2
 8004eb4:	e21f      	b.n	80052f6 <HAL_DMA_Start_IT+0x46a>
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	f040 820a 	bne.w	80052e0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2202      	movs	r2, #2
 8004ed0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a68      	ldr	r2, [pc, #416]	; (8005080 <HAL_DMA_Start_IT+0x1f4>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d04a      	beq.n	8004f7a <HAL_DMA_Start_IT+0xee>
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a66      	ldr	r2, [pc, #408]	; (8005084 <HAL_DMA_Start_IT+0x1f8>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d045      	beq.n	8004f7a <HAL_DMA_Start_IT+0xee>
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a65      	ldr	r2, [pc, #404]	; (8005088 <HAL_DMA_Start_IT+0x1fc>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d040      	beq.n	8004f7a <HAL_DMA_Start_IT+0xee>
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a63      	ldr	r2, [pc, #396]	; (800508c <HAL_DMA_Start_IT+0x200>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d03b      	beq.n	8004f7a <HAL_DMA_Start_IT+0xee>
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a62      	ldr	r2, [pc, #392]	; (8005090 <HAL_DMA_Start_IT+0x204>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d036      	beq.n	8004f7a <HAL_DMA_Start_IT+0xee>
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a60      	ldr	r2, [pc, #384]	; (8005094 <HAL_DMA_Start_IT+0x208>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d031      	beq.n	8004f7a <HAL_DMA_Start_IT+0xee>
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a5f      	ldr	r2, [pc, #380]	; (8005098 <HAL_DMA_Start_IT+0x20c>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d02c      	beq.n	8004f7a <HAL_DMA_Start_IT+0xee>
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a5d      	ldr	r2, [pc, #372]	; (800509c <HAL_DMA_Start_IT+0x210>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d027      	beq.n	8004f7a <HAL_DMA_Start_IT+0xee>
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a5c      	ldr	r2, [pc, #368]	; (80050a0 <HAL_DMA_Start_IT+0x214>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d022      	beq.n	8004f7a <HAL_DMA_Start_IT+0xee>
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a5a      	ldr	r2, [pc, #360]	; (80050a4 <HAL_DMA_Start_IT+0x218>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d01d      	beq.n	8004f7a <HAL_DMA_Start_IT+0xee>
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a59      	ldr	r2, [pc, #356]	; (80050a8 <HAL_DMA_Start_IT+0x21c>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d018      	beq.n	8004f7a <HAL_DMA_Start_IT+0xee>
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a57      	ldr	r2, [pc, #348]	; (80050ac <HAL_DMA_Start_IT+0x220>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d013      	beq.n	8004f7a <HAL_DMA_Start_IT+0xee>
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a56      	ldr	r2, [pc, #344]	; (80050b0 <HAL_DMA_Start_IT+0x224>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d00e      	beq.n	8004f7a <HAL_DMA_Start_IT+0xee>
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a54      	ldr	r2, [pc, #336]	; (80050b4 <HAL_DMA_Start_IT+0x228>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d009      	beq.n	8004f7a <HAL_DMA_Start_IT+0xee>
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a53      	ldr	r2, [pc, #332]	; (80050b8 <HAL_DMA_Start_IT+0x22c>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d004      	beq.n	8004f7a <HAL_DMA_Start_IT+0xee>
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a51      	ldr	r2, [pc, #324]	; (80050bc <HAL_DMA_Start_IT+0x230>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d108      	bne.n	8004f8c <HAL_DMA_Start_IT+0x100>
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f022 0201 	bic.w	r2, r2, #1
 8004f88:	601a      	str	r2, [r3, #0]
 8004f8a:	e007      	b.n	8004f9c <HAL_DMA_Start_IT+0x110>
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f022 0201 	bic.w	r2, r2, #1
 8004f9a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	68b9      	ldr	r1, [r7, #8]
 8004fa2:	68f8      	ldr	r0, [r7, #12]
 8004fa4:	f001 fe6a 	bl	8006c7c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a34      	ldr	r2, [pc, #208]	; (8005080 <HAL_DMA_Start_IT+0x1f4>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d04a      	beq.n	8005048 <HAL_DMA_Start_IT+0x1bc>
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a33      	ldr	r2, [pc, #204]	; (8005084 <HAL_DMA_Start_IT+0x1f8>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d045      	beq.n	8005048 <HAL_DMA_Start_IT+0x1bc>
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a31      	ldr	r2, [pc, #196]	; (8005088 <HAL_DMA_Start_IT+0x1fc>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d040      	beq.n	8005048 <HAL_DMA_Start_IT+0x1bc>
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a30      	ldr	r2, [pc, #192]	; (800508c <HAL_DMA_Start_IT+0x200>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d03b      	beq.n	8005048 <HAL_DMA_Start_IT+0x1bc>
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a2e      	ldr	r2, [pc, #184]	; (8005090 <HAL_DMA_Start_IT+0x204>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d036      	beq.n	8005048 <HAL_DMA_Start_IT+0x1bc>
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a2d      	ldr	r2, [pc, #180]	; (8005094 <HAL_DMA_Start_IT+0x208>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d031      	beq.n	8005048 <HAL_DMA_Start_IT+0x1bc>
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a2b      	ldr	r2, [pc, #172]	; (8005098 <HAL_DMA_Start_IT+0x20c>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d02c      	beq.n	8005048 <HAL_DMA_Start_IT+0x1bc>
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a2a      	ldr	r2, [pc, #168]	; (800509c <HAL_DMA_Start_IT+0x210>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d027      	beq.n	8005048 <HAL_DMA_Start_IT+0x1bc>
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a28      	ldr	r2, [pc, #160]	; (80050a0 <HAL_DMA_Start_IT+0x214>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d022      	beq.n	8005048 <HAL_DMA_Start_IT+0x1bc>
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a27      	ldr	r2, [pc, #156]	; (80050a4 <HAL_DMA_Start_IT+0x218>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d01d      	beq.n	8005048 <HAL_DMA_Start_IT+0x1bc>
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a25      	ldr	r2, [pc, #148]	; (80050a8 <HAL_DMA_Start_IT+0x21c>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d018      	beq.n	8005048 <HAL_DMA_Start_IT+0x1bc>
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a24      	ldr	r2, [pc, #144]	; (80050ac <HAL_DMA_Start_IT+0x220>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d013      	beq.n	8005048 <HAL_DMA_Start_IT+0x1bc>
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a22      	ldr	r2, [pc, #136]	; (80050b0 <HAL_DMA_Start_IT+0x224>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d00e      	beq.n	8005048 <HAL_DMA_Start_IT+0x1bc>
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a21      	ldr	r2, [pc, #132]	; (80050b4 <HAL_DMA_Start_IT+0x228>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d009      	beq.n	8005048 <HAL_DMA_Start_IT+0x1bc>
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a1f      	ldr	r2, [pc, #124]	; (80050b8 <HAL_DMA_Start_IT+0x22c>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d004      	beq.n	8005048 <HAL_DMA_Start_IT+0x1bc>
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a1e      	ldr	r2, [pc, #120]	; (80050bc <HAL_DMA_Start_IT+0x230>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d101      	bne.n	800504c <HAL_DMA_Start_IT+0x1c0>
 8005048:	2301      	movs	r3, #1
 800504a:	e000      	b.n	800504e <HAL_DMA_Start_IT+0x1c2>
 800504c:	2300      	movs	r3, #0
 800504e:	2b00      	cmp	r3, #0
 8005050:	d036      	beq.n	80050c0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f023 021e 	bic.w	r2, r3, #30
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f042 0216 	orr.w	r2, r2, #22
 8005064:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506a:	2b00      	cmp	r3, #0
 800506c:	d03e      	beq.n	80050ec <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f042 0208 	orr.w	r2, r2, #8
 800507c:	601a      	str	r2, [r3, #0]
 800507e:	e035      	b.n	80050ec <HAL_DMA_Start_IT+0x260>
 8005080:	40020010 	.word	0x40020010
 8005084:	40020028 	.word	0x40020028
 8005088:	40020040 	.word	0x40020040
 800508c:	40020058 	.word	0x40020058
 8005090:	40020070 	.word	0x40020070
 8005094:	40020088 	.word	0x40020088
 8005098:	400200a0 	.word	0x400200a0
 800509c:	400200b8 	.word	0x400200b8
 80050a0:	40020410 	.word	0x40020410
 80050a4:	40020428 	.word	0x40020428
 80050a8:	40020440 	.word	0x40020440
 80050ac:	40020458 	.word	0x40020458
 80050b0:	40020470 	.word	0x40020470
 80050b4:	40020488 	.word	0x40020488
 80050b8:	400204a0 	.word	0x400204a0
 80050bc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f023 020e 	bic.w	r2, r3, #14
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f042 020a 	orr.w	r2, r2, #10
 80050d2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d007      	beq.n	80050ec <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f042 0204 	orr.w	r2, r2, #4
 80050ea:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a83      	ldr	r2, [pc, #524]	; (8005300 <HAL_DMA_Start_IT+0x474>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d072      	beq.n	80051dc <HAL_DMA_Start_IT+0x350>
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a82      	ldr	r2, [pc, #520]	; (8005304 <HAL_DMA_Start_IT+0x478>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d06d      	beq.n	80051dc <HAL_DMA_Start_IT+0x350>
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a80      	ldr	r2, [pc, #512]	; (8005308 <HAL_DMA_Start_IT+0x47c>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d068      	beq.n	80051dc <HAL_DMA_Start_IT+0x350>
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a7f      	ldr	r2, [pc, #508]	; (800530c <HAL_DMA_Start_IT+0x480>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d063      	beq.n	80051dc <HAL_DMA_Start_IT+0x350>
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a7d      	ldr	r2, [pc, #500]	; (8005310 <HAL_DMA_Start_IT+0x484>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d05e      	beq.n	80051dc <HAL_DMA_Start_IT+0x350>
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a7c      	ldr	r2, [pc, #496]	; (8005314 <HAL_DMA_Start_IT+0x488>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d059      	beq.n	80051dc <HAL_DMA_Start_IT+0x350>
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a7a      	ldr	r2, [pc, #488]	; (8005318 <HAL_DMA_Start_IT+0x48c>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d054      	beq.n	80051dc <HAL_DMA_Start_IT+0x350>
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a79      	ldr	r2, [pc, #484]	; (800531c <HAL_DMA_Start_IT+0x490>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d04f      	beq.n	80051dc <HAL_DMA_Start_IT+0x350>
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a77      	ldr	r2, [pc, #476]	; (8005320 <HAL_DMA_Start_IT+0x494>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d04a      	beq.n	80051dc <HAL_DMA_Start_IT+0x350>
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a76      	ldr	r2, [pc, #472]	; (8005324 <HAL_DMA_Start_IT+0x498>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d045      	beq.n	80051dc <HAL_DMA_Start_IT+0x350>
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a74      	ldr	r2, [pc, #464]	; (8005328 <HAL_DMA_Start_IT+0x49c>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d040      	beq.n	80051dc <HAL_DMA_Start_IT+0x350>
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a73      	ldr	r2, [pc, #460]	; (800532c <HAL_DMA_Start_IT+0x4a0>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d03b      	beq.n	80051dc <HAL_DMA_Start_IT+0x350>
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a71      	ldr	r2, [pc, #452]	; (8005330 <HAL_DMA_Start_IT+0x4a4>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d036      	beq.n	80051dc <HAL_DMA_Start_IT+0x350>
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a70      	ldr	r2, [pc, #448]	; (8005334 <HAL_DMA_Start_IT+0x4a8>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d031      	beq.n	80051dc <HAL_DMA_Start_IT+0x350>
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a6e      	ldr	r2, [pc, #440]	; (8005338 <HAL_DMA_Start_IT+0x4ac>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d02c      	beq.n	80051dc <HAL_DMA_Start_IT+0x350>
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a6d      	ldr	r2, [pc, #436]	; (800533c <HAL_DMA_Start_IT+0x4b0>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d027      	beq.n	80051dc <HAL_DMA_Start_IT+0x350>
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a6b      	ldr	r2, [pc, #428]	; (8005340 <HAL_DMA_Start_IT+0x4b4>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d022      	beq.n	80051dc <HAL_DMA_Start_IT+0x350>
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a6a      	ldr	r2, [pc, #424]	; (8005344 <HAL_DMA_Start_IT+0x4b8>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d01d      	beq.n	80051dc <HAL_DMA_Start_IT+0x350>
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a68      	ldr	r2, [pc, #416]	; (8005348 <HAL_DMA_Start_IT+0x4bc>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d018      	beq.n	80051dc <HAL_DMA_Start_IT+0x350>
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a67      	ldr	r2, [pc, #412]	; (800534c <HAL_DMA_Start_IT+0x4c0>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d013      	beq.n	80051dc <HAL_DMA_Start_IT+0x350>
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a65      	ldr	r2, [pc, #404]	; (8005350 <HAL_DMA_Start_IT+0x4c4>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d00e      	beq.n	80051dc <HAL_DMA_Start_IT+0x350>
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a64      	ldr	r2, [pc, #400]	; (8005354 <HAL_DMA_Start_IT+0x4c8>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d009      	beq.n	80051dc <HAL_DMA_Start_IT+0x350>
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a62      	ldr	r2, [pc, #392]	; (8005358 <HAL_DMA_Start_IT+0x4cc>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d004      	beq.n	80051dc <HAL_DMA_Start_IT+0x350>
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a61      	ldr	r2, [pc, #388]	; (800535c <HAL_DMA_Start_IT+0x4d0>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d101      	bne.n	80051e0 <HAL_DMA_Start_IT+0x354>
 80051dc:	2301      	movs	r3, #1
 80051de:	e000      	b.n	80051e2 <HAL_DMA_Start_IT+0x356>
 80051e0:	2300      	movs	r3, #0
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d01a      	beq.n	800521c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d007      	beq.n	8005204 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005202:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005208:	2b00      	cmp	r3, #0
 800520a:	d007      	beq.n	800521c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005216:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800521a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a37      	ldr	r2, [pc, #220]	; (8005300 <HAL_DMA_Start_IT+0x474>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d04a      	beq.n	80052bc <HAL_DMA_Start_IT+0x430>
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a36      	ldr	r2, [pc, #216]	; (8005304 <HAL_DMA_Start_IT+0x478>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d045      	beq.n	80052bc <HAL_DMA_Start_IT+0x430>
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a34      	ldr	r2, [pc, #208]	; (8005308 <HAL_DMA_Start_IT+0x47c>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d040      	beq.n	80052bc <HAL_DMA_Start_IT+0x430>
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a33      	ldr	r2, [pc, #204]	; (800530c <HAL_DMA_Start_IT+0x480>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d03b      	beq.n	80052bc <HAL_DMA_Start_IT+0x430>
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a31      	ldr	r2, [pc, #196]	; (8005310 <HAL_DMA_Start_IT+0x484>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d036      	beq.n	80052bc <HAL_DMA_Start_IT+0x430>
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a30      	ldr	r2, [pc, #192]	; (8005314 <HAL_DMA_Start_IT+0x488>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d031      	beq.n	80052bc <HAL_DMA_Start_IT+0x430>
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a2e      	ldr	r2, [pc, #184]	; (8005318 <HAL_DMA_Start_IT+0x48c>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d02c      	beq.n	80052bc <HAL_DMA_Start_IT+0x430>
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a2d      	ldr	r2, [pc, #180]	; (800531c <HAL_DMA_Start_IT+0x490>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d027      	beq.n	80052bc <HAL_DMA_Start_IT+0x430>
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a2b      	ldr	r2, [pc, #172]	; (8005320 <HAL_DMA_Start_IT+0x494>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d022      	beq.n	80052bc <HAL_DMA_Start_IT+0x430>
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a2a      	ldr	r2, [pc, #168]	; (8005324 <HAL_DMA_Start_IT+0x498>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d01d      	beq.n	80052bc <HAL_DMA_Start_IT+0x430>
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a28      	ldr	r2, [pc, #160]	; (8005328 <HAL_DMA_Start_IT+0x49c>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d018      	beq.n	80052bc <HAL_DMA_Start_IT+0x430>
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a27      	ldr	r2, [pc, #156]	; (800532c <HAL_DMA_Start_IT+0x4a0>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d013      	beq.n	80052bc <HAL_DMA_Start_IT+0x430>
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a25      	ldr	r2, [pc, #148]	; (8005330 <HAL_DMA_Start_IT+0x4a4>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d00e      	beq.n	80052bc <HAL_DMA_Start_IT+0x430>
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a24      	ldr	r2, [pc, #144]	; (8005334 <HAL_DMA_Start_IT+0x4a8>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d009      	beq.n	80052bc <HAL_DMA_Start_IT+0x430>
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a22      	ldr	r2, [pc, #136]	; (8005338 <HAL_DMA_Start_IT+0x4ac>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d004      	beq.n	80052bc <HAL_DMA_Start_IT+0x430>
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a21      	ldr	r2, [pc, #132]	; (800533c <HAL_DMA_Start_IT+0x4b0>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d108      	bne.n	80052ce <HAL_DMA_Start_IT+0x442>
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f042 0201 	orr.w	r2, r2, #1
 80052ca:	601a      	str	r2, [r3, #0]
 80052cc:	e012      	b.n	80052f4 <HAL_DMA_Start_IT+0x468>
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f042 0201 	orr.w	r2, r2, #1
 80052dc:	601a      	str	r2, [r3, #0]
 80052de:	e009      	b.n	80052f4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052e6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2200      	movs	r2, #0
 80052ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80052f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3718      	adds	r7, #24
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
 80052fe:	bf00      	nop
 8005300:	40020010 	.word	0x40020010
 8005304:	40020028 	.word	0x40020028
 8005308:	40020040 	.word	0x40020040
 800530c:	40020058 	.word	0x40020058
 8005310:	40020070 	.word	0x40020070
 8005314:	40020088 	.word	0x40020088
 8005318:	400200a0 	.word	0x400200a0
 800531c:	400200b8 	.word	0x400200b8
 8005320:	40020410 	.word	0x40020410
 8005324:	40020428 	.word	0x40020428
 8005328:	40020440 	.word	0x40020440
 800532c:	40020458 	.word	0x40020458
 8005330:	40020470 	.word	0x40020470
 8005334:	40020488 	.word	0x40020488
 8005338:	400204a0 	.word	0x400204a0
 800533c:	400204b8 	.word	0x400204b8
 8005340:	58025408 	.word	0x58025408
 8005344:	5802541c 	.word	0x5802541c
 8005348:	58025430 	.word	0x58025430
 800534c:	58025444 	.word	0x58025444
 8005350:	58025458 	.word	0x58025458
 8005354:	5802546c 	.word	0x5802546c
 8005358:	58025480 	.word	0x58025480
 800535c:	58025494 	.word	0x58025494

08005360 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b086      	sub	sp, #24
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005368:	f7fd fb44 	bl	80029f4 <HAL_GetTick>
 800536c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d101      	bne.n	8005378 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e2dc      	b.n	8005932 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800537e:	b2db      	uxtb	r3, r3
 8005380:	2b02      	cmp	r3, #2
 8005382:	d008      	beq.n	8005396 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2280      	movs	r2, #128	; 0x80
 8005388:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	e2cd      	b.n	8005932 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a76      	ldr	r2, [pc, #472]	; (8005574 <HAL_DMA_Abort+0x214>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d04a      	beq.n	8005436 <HAL_DMA_Abort+0xd6>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a74      	ldr	r2, [pc, #464]	; (8005578 <HAL_DMA_Abort+0x218>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d045      	beq.n	8005436 <HAL_DMA_Abort+0xd6>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a73      	ldr	r2, [pc, #460]	; (800557c <HAL_DMA_Abort+0x21c>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d040      	beq.n	8005436 <HAL_DMA_Abort+0xd6>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a71      	ldr	r2, [pc, #452]	; (8005580 <HAL_DMA_Abort+0x220>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d03b      	beq.n	8005436 <HAL_DMA_Abort+0xd6>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a70      	ldr	r2, [pc, #448]	; (8005584 <HAL_DMA_Abort+0x224>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d036      	beq.n	8005436 <HAL_DMA_Abort+0xd6>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a6e      	ldr	r2, [pc, #440]	; (8005588 <HAL_DMA_Abort+0x228>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d031      	beq.n	8005436 <HAL_DMA_Abort+0xd6>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a6d      	ldr	r2, [pc, #436]	; (800558c <HAL_DMA_Abort+0x22c>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d02c      	beq.n	8005436 <HAL_DMA_Abort+0xd6>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a6b      	ldr	r2, [pc, #428]	; (8005590 <HAL_DMA_Abort+0x230>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d027      	beq.n	8005436 <HAL_DMA_Abort+0xd6>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a6a      	ldr	r2, [pc, #424]	; (8005594 <HAL_DMA_Abort+0x234>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d022      	beq.n	8005436 <HAL_DMA_Abort+0xd6>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a68      	ldr	r2, [pc, #416]	; (8005598 <HAL_DMA_Abort+0x238>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d01d      	beq.n	8005436 <HAL_DMA_Abort+0xd6>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a67      	ldr	r2, [pc, #412]	; (800559c <HAL_DMA_Abort+0x23c>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d018      	beq.n	8005436 <HAL_DMA_Abort+0xd6>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a65      	ldr	r2, [pc, #404]	; (80055a0 <HAL_DMA_Abort+0x240>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d013      	beq.n	8005436 <HAL_DMA_Abort+0xd6>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a64      	ldr	r2, [pc, #400]	; (80055a4 <HAL_DMA_Abort+0x244>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d00e      	beq.n	8005436 <HAL_DMA_Abort+0xd6>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a62      	ldr	r2, [pc, #392]	; (80055a8 <HAL_DMA_Abort+0x248>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d009      	beq.n	8005436 <HAL_DMA_Abort+0xd6>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a61      	ldr	r2, [pc, #388]	; (80055ac <HAL_DMA_Abort+0x24c>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d004      	beq.n	8005436 <HAL_DMA_Abort+0xd6>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a5f      	ldr	r2, [pc, #380]	; (80055b0 <HAL_DMA_Abort+0x250>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d101      	bne.n	800543a <HAL_DMA_Abort+0xda>
 8005436:	2301      	movs	r3, #1
 8005438:	e000      	b.n	800543c <HAL_DMA_Abort+0xdc>
 800543a:	2300      	movs	r3, #0
 800543c:	2b00      	cmp	r3, #0
 800543e:	d013      	beq.n	8005468 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f022 021e 	bic.w	r2, r2, #30
 800544e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	695a      	ldr	r2, [r3, #20]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800545e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	617b      	str	r3, [r7, #20]
 8005466:	e00a      	b.n	800547e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f022 020e 	bic.w	r2, r2, #14
 8005476:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a3c      	ldr	r2, [pc, #240]	; (8005574 <HAL_DMA_Abort+0x214>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d072      	beq.n	800556e <HAL_DMA_Abort+0x20e>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a3a      	ldr	r2, [pc, #232]	; (8005578 <HAL_DMA_Abort+0x218>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d06d      	beq.n	800556e <HAL_DMA_Abort+0x20e>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a39      	ldr	r2, [pc, #228]	; (800557c <HAL_DMA_Abort+0x21c>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d068      	beq.n	800556e <HAL_DMA_Abort+0x20e>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a37      	ldr	r2, [pc, #220]	; (8005580 <HAL_DMA_Abort+0x220>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d063      	beq.n	800556e <HAL_DMA_Abort+0x20e>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a36      	ldr	r2, [pc, #216]	; (8005584 <HAL_DMA_Abort+0x224>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d05e      	beq.n	800556e <HAL_DMA_Abort+0x20e>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a34      	ldr	r2, [pc, #208]	; (8005588 <HAL_DMA_Abort+0x228>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d059      	beq.n	800556e <HAL_DMA_Abort+0x20e>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a33      	ldr	r2, [pc, #204]	; (800558c <HAL_DMA_Abort+0x22c>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d054      	beq.n	800556e <HAL_DMA_Abort+0x20e>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a31      	ldr	r2, [pc, #196]	; (8005590 <HAL_DMA_Abort+0x230>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d04f      	beq.n	800556e <HAL_DMA_Abort+0x20e>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a30      	ldr	r2, [pc, #192]	; (8005594 <HAL_DMA_Abort+0x234>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d04a      	beq.n	800556e <HAL_DMA_Abort+0x20e>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a2e      	ldr	r2, [pc, #184]	; (8005598 <HAL_DMA_Abort+0x238>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d045      	beq.n	800556e <HAL_DMA_Abort+0x20e>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a2d      	ldr	r2, [pc, #180]	; (800559c <HAL_DMA_Abort+0x23c>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d040      	beq.n	800556e <HAL_DMA_Abort+0x20e>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a2b      	ldr	r2, [pc, #172]	; (80055a0 <HAL_DMA_Abort+0x240>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d03b      	beq.n	800556e <HAL_DMA_Abort+0x20e>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a2a      	ldr	r2, [pc, #168]	; (80055a4 <HAL_DMA_Abort+0x244>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d036      	beq.n	800556e <HAL_DMA_Abort+0x20e>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a28      	ldr	r2, [pc, #160]	; (80055a8 <HAL_DMA_Abort+0x248>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d031      	beq.n	800556e <HAL_DMA_Abort+0x20e>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a27      	ldr	r2, [pc, #156]	; (80055ac <HAL_DMA_Abort+0x24c>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d02c      	beq.n	800556e <HAL_DMA_Abort+0x20e>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a25      	ldr	r2, [pc, #148]	; (80055b0 <HAL_DMA_Abort+0x250>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d027      	beq.n	800556e <HAL_DMA_Abort+0x20e>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a24      	ldr	r2, [pc, #144]	; (80055b4 <HAL_DMA_Abort+0x254>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d022      	beq.n	800556e <HAL_DMA_Abort+0x20e>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a22      	ldr	r2, [pc, #136]	; (80055b8 <HAL_DMA_Abort+0x258>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d01d      	beq.n	800556e <HAL_DMA_Abort+0x20e>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a21      	ldr	r2, [pc, #132]	; (80055bc <HAL_DMA_Abort+0x25c>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d018      	beq.n	800556e <HAL_DMA_Abort+0x20e>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a1f      	ldr	r2, [pc, #124]	; (80055c0 <HAL_DMA_Abort+0x260>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d013      	beq.n	800556e <HAL_DMA_Abort+0x20e>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a1e      	ldr	r2, [pc, #120]	; (80055c4 <HAL_DMA_Abort+0x264>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d00e      	beq.n	800556e <HAL_DMA_Abort+0x20e>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a1c      	ldr	r2, [pc, #112]	; (80055c8 <HAL_DMA_Abort+0x268>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d009      	beq.n	800556e <HAL_DMA_Abort+0x20e>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a1b      	ldr	r2, [pc, #108]	; (80055cc <HAL_DMA_Abort+0x26c>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d004      	beq.n	800556e <HAL_DMA_Abort+0x20e>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a19      	ldr	r2, [pc, #100]	; (80055d0 <HAL_DMA_Abort+0x270>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d132      	bne.n	80055d4 <HAL_DMA_Abort+0x274>
 800556e:	2301      	movs	r3, #1
 8005570:	e031      	b.n	80055d6 <HAL_DMA_Abort+0x276>
 8005572:	bf00      	nop
 8005574:	40020010 	.word	0x40020010
 8005578:	40020028 	.word	0x40020028
 800557c:	40020040 	.word	0x40020040
 8005580:	40020058 	.word	0x40020058
 8005584:	40020070 	.word	0x40020070
 8005588:	40020088 	.word	0x40020088
 800558c:	400200a0 	.word	0x400200a0
 8005590:	400200b8 	.word	0x400200b8
 8005594:	40020410 	.word	0x40020410
 8005598:	40020428 	.word	0x40020428
 800559c:	40020440 	.word	0x40020440
 80055a0:	40020458 	.word	0x40020458
 80055a4:	40020470 	.word	0x40020470
 80055a8:	40020488 	.word	0x40020488
 80055ac:	400204a0 	.word	0x400204a0
 80055b0:	400204b8 	.word	0x400204b8
 80055b4:	58025408 	.word	0x58025408
 80055b8:	5802541c 	.word	0x5802541c
 80055bc:	58025430 	.word	0x58025430
 80055c0:	58025444 	.word	0x58025444
 80055c4:	58025458 	.word	0x58025458
 80055c8:	5802546c 	.word	0x5802546c
 80055cc:	58025480 	.word	0x58025480
 80055d0:	58025494 	.word	0x58025494
 80055d4:	2300      	movs	r3, #0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d007      	beq.n	80055ea <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80055e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a6d      	ldr	r2, [pc, #436]	; (80057a4 <HAL_DMA_Abort+0x444>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d04a      	beq.n	800568a <HAL_DMA_Abort+0x32a>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a6b      	ldr	r2, [pc, #428]	; (80057a8 <HAL_DMA_Abort+0x448>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d045      	beq.n	800568a <HAL_DMA_Abort+0x32a>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a6a      	ldr	r2, [pc, #424]	; (80057ac <HAL_DMA_Abort+0x44c>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d040      	beq.n	800568a <HAL_DMA_Abort+0x32a>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a68      	ldr	r2, [pc, #416]	; (80057b0 <HAL_DMA_Abort+0x450>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d03b      	beq.n	800568a <HAL_DMA_Abort+0x32a>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a67      	ldr	r2, [pc, #412]	; (80057b4 <HAL_DMA_Abort+0x454>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d036      	beq.n	800568a <HAL_DMA_Abort+0x32a>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a65      	ldr	r2, [pc, #404]	; (80057b8 <HAL_DMA_Abort+0x458>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d031      	beq.n	800568a <HAL_DMA_Abort+0x32a>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a64      	ldr	r2, [pc, #400]	; (80057bc <HAL_DMA_Abort+0x45c>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d02c      	beq.n	800568a <HAL_DMA_Abort+0x32a>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a62      	ldr	r2, [pc, #392]	; (80057c0 <HAL_DMA_Abort+0x460>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d027      	beq.n	800568a <HAL_DMA_Abort+0x32a>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a61      	ldr	r2, [pc, #388]	; (80057c4 <HAL_DMA_Abort+0x464>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d022      	beq.n	800568a <HAL_DMA_Abort+0x32a>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a5f      	ldr	r2, [pc, #380]	; (80057c8 <HAL_DMA_Abort+0x468>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d01d      	beq.n	800568a <HAL_DMA_Abort+0x32a>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a5e      	ldr	r2, [pc, #376]	; (80057cc <HAL_DMA_Abort+0x46c>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d018      	beq.n	800568a <HAL_DMA_Abort+0x32a>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a5c      	ldr	r2, [pc, #368]	; (80057d0 <HAL_DMA_Abort+0x470>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d013      	beq.n	800568a <HAL_DMA_Abort+0x32a>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a5b      	ldr	r2, [pc, #364]	; (80057d4 <HAL_DMA_Abort+0x474>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d00e      	beq.n	800568a <HAL_DMA_Abort+0x32a>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a59      	ldr	r2, [pc, #356]	; (80057d8 <HAL_DMA_Abort+0x478>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d009      	beq.n	800568a <HAL_DMA_Abort+0x32a>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a58      	ldr	r2, [pc, #352]	; (80057dc <HAL_DMA_Abort+0x47c>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d004      	beq.n	800568a <HAL_DMA_Abort+0x32a>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a56      	ldr	r2, [pc, #344]	; (80057e0 <HAL_DMA_Abort+0x480>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d108      	bne.n	800569c <HAL_DMA_Abort+0x33c>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f022 0201 	bic.w	r2, r2, #1
 8005698:	601a      	str	r2, [r3, #0]
 800569a:	e007      	b.n	80056ac <HAL_DMA_Abort+0x34c>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f022 0201 	bic.w	r2, r2, #1
 80056aa:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80056ac:	e013      	b.n	80056d6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80056ae:	f7fd f9a1 	bl	80029f4 <HAL_GetTick>
 80056b2:	4602      	mov	r2, r0
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	1ad3      	subs	r3, r2, r3
 80056b8:	2b05      	cmp	r3, #5
 80056ba:	d90c      	bls.n	80056d6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2220      	movs	r2, #32
 80056c0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2203      	movs	r2, #3
 80056c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e12d      	b.n	8005932 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 0301 	and.w	r3, r3, #1
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d1e5      	bne.n	80056ae <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a2f      	ldr	r2, [pc, #188]	; (80057a4 <HAL_DMA_Abort+0x444>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d04a      	beq.n	8005782 <HAL_DMA_Abort+0x422>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a2d      	ldr	r2, [pc, #180]	; (80057a8 <HAL_DMA_Abort+0x448>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d045      	beq.n	8005782 <HAL_DMA_Abort+0x422>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a2c      	ldr	r2, [pc, #176]	; (80057ac <HAL_DMA_Abort+0x44c>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d040      	beq.n	8005782 <HAL_DMA_Abort+0x422>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a2a      	ldr	r2, [pc, #168]	; (80057b0 <HAL_DMA_Abort+0x450>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d03b      	beq.n	8005782 <HAL_DMA_Abort+0x422>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a29      	ldr	r2, [pc, #164]	; (80057b4 <HAL_DMA_Abort+0x454>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d036      	beq.n	8005782 <HAL_DMA_Abort+0x422>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a27      	ldr	r2, [pc, #156]	; (80057b8 <HAL_DMA_Abort+0x458>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d031      	beq.n	8005782 <HAL_DMA_Abort+0x422>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a26      	ldr	r2, [pc, #152]	; (80057bc <HAL_DMA_Abort+0x45c>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d02c      	beq.n	8005782 <HAL_DMA_Abort+0x422>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a24      	ldr	r2, [pc, #144]	; (80057c0 <HAL_DMA_Abort+0x460>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d027      	beq.n	8005782 <HAL_DMA_Abort+0x422>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a23      	ldr	r2, [pc, #140]	; (80057c4 <HAL_DMA_Abort+0x464>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d022      	beq.n	8005782 <HAL_DMA_Abort+0x422>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a21      	ldr	r2, [pc, #132]	; (80057c8 <HAL_DMA_Abort+0x468>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d01d      	beq.n	8005782 <HAL_DMA_Abort+0x422>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a20      	ldr	r2, [pc, #128]	; (80057cc <HAL_DMA_Abort+0x46c>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d018      	beq.n	8005782 <HAL_DMA_Abort+0x422>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a1e      	ldr	r2, [pc, #120]	; (80057d0 <HAL_DMA_Abort+0x470>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d013      	beq.n	8005782 <HAL_DMA_Abort+0x422>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a1d      	ldr	r2, [pc, #116]	; (80057d4 <HAL_DMA_Abort+0x474>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d00e      	beq.n	8005782 <HAL_DMA_Abort+0x422>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a1b      	ldr	r2, [pc, #108]	; (80057d8 <HAL_DMA_Abort+0x478>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d009      	beq.n	8005782 <HAL_DMA_Abort+0x422>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a1a      	ldr	r2, [pc, #104]	; (80057dc <HAL_DMA_Abort+0x47c>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d004      	beq.n	8005782 <HAL_DMA_Abort+0x422>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a18      	ldr	r2, [pc, #96]	; (80057e0 <HAL_DMA_Abort+0x480>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d101      	bne.n	8005786 <HAL_DMA_Abort+0x426>
 8005782:	2301      	movs	r3, #1
 8005784:	e000      	b.n	8005788 <HAL_DMA_Abort+0x428>
 8005786:	2300      	movs	r3, #0
 8005788:	2b00      	cmp	r3, #0
 800578a:	d02b      	beq.n	80057e4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005790:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005796:	f003 031f 	and.w	r3, r3, #31
 800579a:	223f      	movs	r2, #63	; 0x3f
 800579c:	409a      	lsls	r2, r3
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	609a      	str	r2, [r3, #8]
 80057a2:	e02a      	b.n	80057fa <HAL_DMA_Abort+0x49a>
 80057a4:	40020010 	.word	0x40020010
 80057a8:	40020028 	.word	0x40020028
 80057ac:	40020040 	.word	0x40020040
 80057b0:	40020058 	.word	0x40020058
 80057b4:	40020070 	.word	0x40020070
 80057b8:	40020088 	.word	0x40020088
 80057bc:	400200a0 	.word	0x400200a0
 80057c0:	400200b8 	.word	0x400200b8
 80057c4:	40020410 	.word	0x40020410
 80057c8:	40020428 	.word	0x40020428
 80057cc:	40020440 	.word	0x40020440
 80057d0:	40020458 	.word	0x40020458
 80057d4:	40020470 	.word	0x40020470
 80057d8:	40020488 	.word	0x40020488
 80057dc:	400204a0 	.word	0x400204a0
 80057e0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057e8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057ee:	f003 031f 	and.w	r3, r3, #31
 80057f2:	2201      	movs	r2, #1
 80057f4:	409a      	lsls	r2, r3
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a4f      	ldr	r2, [pc, #316]	; (800593c <HAL_DMA_Abort+0x5dc>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d072      	beq.n	80058ea <HAL_DMA_Abort+0x58a>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a4d      	ldr	r2, [pc, #308]	; (8005940 <HAL_DMA_Abort+0x5e0>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d06d      	beq.n	80058ea <HAL_DMA_Abort+0x58a>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a4c      	ldr	r2, [pc, #304]	; (8005944 <HAL_DMA_Abort+0x5e4>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d068      	beq.n	80058ea <HAL_DMA_Abort+0x58a>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a4a      	ldr	r2, [pc, #296]	; (8005948 <HAL_DMA_Abort+0x5e8>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d063      	beq.n	80058ea <HAL_DMA_Abort+0x58a>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a49      	ldr	r2, [pc, #292]	; (800594c <HAL_DMA_Abort+0x5ec>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d05e      	beq.n	80058ea <HAL_DMA_Abort+0x58a>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a47      	ldr	r2, [pc, #284]	; (8005950 <HAL_DMA_Abort+0x5f0>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d059      	beq.n	80058ea <HAL_DMA_Abort+0x58a>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a46      	ldr	r2, [pc, #280]	; (8005954 <HAL_DMA_Abort+0x5f4>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d054      	beq.n	80058ea <HAL_DMA_Abort+0x58a>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a44      	ldr	r2, [pc, #272]	; (8005958 <HAL_DMA_Abort+0x5f8>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d04f      	beq.n	80058ea <HAL_DMA_Abort+0x58a>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a43      	ldr	r2, [pc, #268]	; (800595c <HAL_DMA_Abort+0x5fc>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d04a      	beq.n	80058ea <HAL_DMA_Abort+0x58a>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a41      	ldr	r2, [pc, #260]	; (8005960 <HAL_DMA_Abort+0x600>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d045      	beq.n	80058ea <HAL_DMA_Abort+0x58a>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a40      	ldr	r2, [pc, #256]	; (8005964 <HAL_DMA_Abort+0x604>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d040      	beq.n	80058ea <HAL_DMA_Abort+0x58a>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a3e      	ldr	r2, [pc, #248]	; (8005968 <HAL_DMA_Abort+0x608>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d03b      	beq.n	80058ea <HAL_DMA_Abort+0x58a>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a3d      	ldr	r2, [pc, #244]	; (800596c <HAL_DMA_Abort+0x60c>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d036      	beq.n	80058ea <HAL_DMA_Abort+0x58a>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a3b      	ldr	r2, [pc, #236]	; (8005970 <HAL_DMA_Abort+0x610>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d031      	beq.n	80058ea <HAL_DMA_Abort+0x58a>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a3a      	ldr	r2, [pc, #232]	; (8005974 <HAL_DMA_Abort+0x614>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d02c      	beq.n	80058ea <HAL_DMA_Abort+0x58a>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a38      	ldr	r2, [pc, #224]	; (8005978 <HAL_DMA_Abort+0x618>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d027      	beq.n	80058ea <HAL_DMA_Abort+0x58a>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a37      	ldr	r2, [pc, #220]	; (800597c <HAL_DMA_Abort+0x61c>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d022      	beq.n	80058ea <HAL_DMA_Abort+0x58a>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a35      	ldr	r2, [pc, #212]	; (8005980 <HAL_DMA_Abort+0x620>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d01d      	beq.n	80058ea <HAL_DMA_Abort+0x58a>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a34      	ldr	r2, [pc, #208]	; (8005984 <HAL_DMA_Abort+0x624>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d018      	beq.n	80058ea <HAL_DMA_Abort+0x58a>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a32      	ldr	r2, [pc, #200]	; (8005988 <HAL_DMA_Abort+0x628>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d013      	beq.n	80058ea <HAL_DMA_Abort+0x58a>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a31      	ldr	r2, [pc, #196]	; (800598c <HAL_DMA_Abort+0x62c>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d00e      	beq.n	80058ea <HAL_DMA_Abort+0x58a>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a2f      	ldr	r2, [pc, #188]	; (8005990 <HAL_DMA_Abort+0x630>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d009      	beq.n	80058ea <HAL_DMA_Abort+0x58a>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a2e      	ldr	r2, [pc, #184]	; (8005994 <HAL_DMA_Abort+0x634>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d004      	beq.n	80058ea <HAL_DMA_Abort+0x58a>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a2c      	ldr	r2, [pc, #176]	; (8005998 <HAL_DMA_Abort+0x638>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d101      	bne.n	80058ee <HAL_DMA_Abort+0x58e>
 80058ea:	2301      	movs	r3, #1
 80058ec:	e000      	b.n	80058f0 <HAL_DMA_Abort+0x590>
 80058ee:	2300      	movs	r3, #0
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d015      	beq.n	8005920 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058f8:	687a      	ldr	r2, [r7, #4]
 80058fa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80058fc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005902:	2b00      	cmp	r3, #0
 8005904:	d00c      	beq.n	8005920 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005910:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005914:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800591e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8005930:	2300      	movs	r3, #0
}
 8005932:	4618      	mov	r0, r3
 8005934:	3718      	adds	r7, #24
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop
 800593c:	40020010 	.word	0x40020010
 8005940:	40020028 	.word	0x40020028
 8005944:	40020040 	.word	0x40020040
 8005948:	40020058 	.word	0x40020058
 800594c:	40020070 	.word	0x40020070
 8005950:	40020088 	.word	0x40020088
 8005954:	400200a0 	.word	0x400200a0
 8005958:	400200b8 	.word	0x400200b8
 800595c:	40020410 	.word	0x40020410
 8005960:	40020428 	.word	0x40020428
 8005964:	40020440 	.word	0x40020440
 8005968:	40020458 	.word	0x40020458
 800596c:	40020470 	.word	0x40020470
 8005970:	40020488 	.word	0x40020488
 8005974:	400204a0 	.word	0x400204a0
 8005978:	400204b8 	.word	0x400204b8
 800597c:	58025408 	.word	0x58025408
 8005980:	5802541c 	.word	0x5802541c
 8005984:	58025430 	.word	0x58025430
 8005988:	58025444 	.word	0x58025444
 800598c:	58025458 	.word	0x58025458
 8005990:	5802546c 	.word	0x5802546c
 8005994:	58025480 	.word	0x58025480
 8005998:	58025494 	.word	0x58025494

0800599c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b084      	sub	sp, #16
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d101      	bne.n	80059ae <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e237      	b.n	8005e1e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	2b02      	cmp	r3, #2
 80059b8:	d004      	beq.n	80059c4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2280      	movs	r2, #128	; 0x80
 80059be:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	e22c      	b.n	8005e1e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a5c      	ldr	r2, [pc, #368]	; (8005b3c <HAL_DMA_Abort_IT+0x1a0>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d04a      	beq.n	8005a64 <HAL_DMA_Abort_IT+0xc8>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a5b      	ldr	r2, [pc, #364]	; (8005b40 <HAL_DMA_Abort_IT+0x1a4>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d045      	beq.n	8005a64 <HAL_DMA_Abort_IT+0xc8>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a59      	ldr	r2, [pc, #356]	; (8005b44 <HAL_DMA_Abort_IT+0x1a8>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d040      	beq.n	8005a64 <HAL_DMA_Abort_IT+0xc8>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a58      	ldr	r2, [pc, #352]	; (8005b48 <HAL_DMA_Abort_IT+0x1ac>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d03b      	beq.n	8005a64 <HAL_DMA_Abort_IT+0xc8>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a56      	ldr	r2, [pc, #344]	; (8005b4c <HAL_DMA_Abort_IT+0x1b0>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d036      	beq.n	8005a64 <HAL_DMA_Abort_IT+0xc8>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a55      	ldr	r2, [pc, #340]	; (8005b50 <HAL_DMA_Abort_IT+0x1b4>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d031      	beq.n	8005a64 <HAL_DMA_Abort_IT+0xc8>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a53      	ldr	r2, [pc, #332]	; (8005b54 <HAL_DMA_Abort_IT+0x1b8>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d02c      	beq.n	8005a64 <HAL_DMA_Abort_IT+0xc8>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a52      	ldr	r2, [pc, #328]	; (8005b58 <HAL_DMA_Abort_IT+0x1bc>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d027      	beq.n	8005a64 <HAL_DMA_Abort_IT+0xc8>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a50      	ldr	r2, [pc, #320]	; (8005b5c <HAL_DMA_Abort_IT+0x1c0>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d022      	beq.n	8005a64 <HAL_DMA_Abort_IT+0xc8>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a4f      	ldr	r2, [pc, #316]	; (8005b60 <HAL_DMA_Abort_IT+0x1c4>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d01d      	beq.n	8005a64 <HAL_DMA_Abort_IT+0xc8>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a4d      	ldr	r2, [pc, #308]	; (8005b64 <HAL_DMA_Abort_IT+0x1c8>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d018      	beq.n	8005a64 <HAL_DMA_Abort_IT+0xc8>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a4c      	ldr	r2, [pc, #304]	; (8005b68 <HAL_DMA_Abort_IT+0x1cc>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d013      	beq.n	8005a64 <HAL_DMA_Abort_IT+0xc8>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a4a      	ldr	r2, [pc, #296]	; (8005b6c <HAL_DMA_Abort_IT+0x1d0>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d00e      	beq.n	8005a64 <HAL_DMA_Abort_IT+0xc8>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a49      	ldr	r2, [pc, #292]	; (8005b70 <HAL_DMA_Abort_IT+0x1d4>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d009      	beq.n	8005a64 <HAL_DMA_Abort_IT+0xc8>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a47      	ldr	r2, [pc, #284]	; (8005b74 <HAL_DMA_Abort_IT+0x1d8>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d004      	beq.n	8005a64 <HAL_DMA_Abort_IT+0xc8>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a46      	ldr	r2, [pc, #280]	; (8005b78 <HAL_DMA_Abort_IT+0x1dc>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d101      	bne.n	8005a68 <HAL_DMA_Abort_IT+0xcc>
 8005a64:	2301      	movs	r3, #1
 8005a66:	e000      	b.n	8005a6a <HAL_DMA_Abort_IT+0xce>
 8005a68:	2300      	movs	r3, #0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	f000 8086 	beq.w	8005b7c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2204      	movs	r2, #4
 8005a74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a2f      	ldr	r2, [pc, #188]	; (8005b3c <HAL_DMA_Abort_IT+0x1a0>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d04a      	beq.n	8005b18 <HAL_DMA_Abort_IT+0x17c>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a2e      	ldr	r2, [pc, #184]	; (8005b40 <HAL_DMA_Abort_IT+0x1a4>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d045      	beq.n	8005b18 <HAL_DMA_Abort_IT+0x17c>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a2c      	ldr	r2, [pc, #176]	; (8005b44 <HAL_DMA_Abort_IT+0x1a8>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d040      	beq.n	8005b18 <HAL_DMA_Abort_IT+0x17c>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a2b      	ldr	r2, [pc, #172]	; (8005b48 <HAL_DMA_Abort_IT+0x1ac>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d03b      	beq.n	8005b18 <HAL_DMA_Abort_IT+0x17c>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a29      	ldr	r2, [pc, #164]	; (8005b4c <HAL_DMA_Abort_IT+0x1b0>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d036      	beq.n	8005b18 <HAL_DMA_Abort_IT+0x17c>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a28      	ldr	r2, [pc, #160]	; (8005b50 <HAL_DMA_Abort_IT+0x1b4>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d031      	beq.n	8005b18 <HAL_DMA_Abort_IT+0x17c>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a26      	ldr	r2, [pc, #152]	; (8005b54 <HAL_DMA_Abort_IT+0x1b8>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d02c      	beq.n	8005b18 <HAL_DMA_Abort_IT+0x17c>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a25      	ldr	r2, [pc, #148]	; (8005b58 <HAL_DMA_Abort_IT+0x1bc>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d027      	beq.n	8005b18 <HAL_DMA_Abort_IT+0x17c>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a23      	ldr	r2, [pc, #140]	; (8005b5c <HAL_DMA_Abort_IT+0x1c0>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d022      	beq.n	8005b18 <HAL_DMA_Abort_IT+0x17c>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a22      	ldr	r2, [pc, #136]	; (8005b60 <HAL_DMA_Abort_IT+0x1c4>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d01d      	beq.n	8005b18 <HAL_DMA_Abort_IT+0x17c>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a20      	ldr	r2, [pc, #128]	; (8005b64 <HAL_DMA_Abort_IT+0x1c8>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d018      	beq.n	8005b18 <HAL_DMA_Abort_IT+0x17c>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a1f      	ldr	r2, [pc, #124]	; (8005b68 <HAL_DMA_Abort_IT+0x1cc>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d013      	beq.n	8005b18 <HAL_DMA_Abort_IT+0x17c>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a1d      	ldr	r2, [pc, #116]	; (8005b6c <HAL_DMA_Abort_IT+0x1d0>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d00e      	beq.n	8005b18 <HAL_DMA_Abort_IT+0x17c>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a1c      	ldr	r2, [pc, #112]	; (8005b70 <HAL_DMA_Abort_IT+0x1d4>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d009      	beq.n	8005b18 <HAL_DMA_Abort_IT+0x17c>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a1a      	ldr	r2, [pc, #104]	; (8005b74 <HAL_DMA_Abort_IT+0x1d8>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d004      	beq.n	8005b18 <HAL_DMA_Abort_IT+0x17c>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a19      	ldr	r2, [pc, #100]	; (8005b78 <HAL_DMA_Abort_IT+0x1dc>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d108      	bne.n	8005b2a <HAL_DMA_Abort_IT+0x18e>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f022 0201 	bic.w	r2, r2, #1
 8005b26:	601a      	str	r2, [r3, #0]
 8005b28:	e178      	b.n	8005e1c <HAL_DMA_Abort_IT+0x480>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f022 0201 	bic.w	r2, r2, #1
 8005b38:	601a      	str	r2, [r3, #0]
 8005b3a:	e16f      	b.n	8005e1c <HAL_DMA_Abort_IT+0x480>
 8005b3c:	40020010 	.word	0x40020010
 8005b40:	40020028 	.word	0x40020028
 8005b44:	40020040 	.word	0x40020040
 8005b48:	40020058 	.word	0x40020058
 8005b4c:	40020070 	.word	0x40020070
 8005b50:	40020088 	.word	0x40020088
 8005b54:	400200a0 	.word	0x400200a0
 8005b58:	400200b8 	.word	0x400200b8
 8005b5c:	40020410 	.word	0x40020410
 8005b60:	40020428 	.word	0x40020428
 8005b64:	40020440 	.word	0x40020440
 8005b68:	40020458 	.word	0x40020458
 8005b6c:	40020470 	.word	0x40020470
 8005b70:	40020488 	.word	0x40020488
 8005b74:	400204a0 	.word	0x400204a0
 8005b78:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f022 020e 	bic.w	r2, r2, #14
 8005b8a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a6c      	ldr	r2, [pc, #432]	; (8005d44 <HAL_DMA_Abort_IT+0x3a8>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d04a      	beq.n	8005c2c <HAL_DMA_Abort_IT+0x290>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a6b      	ldr	r2, [pc, #428]	; (8005d48 <HAL_DMA_Abort_IT+0x3ac>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d045      	beq.n	8005c2c <HAL_DMA_Abort_IT+0x290>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a69      	ldr	r2, [pc, #420]	; (8005d4c <HAL_DMA_Abort_IT+0x3b0>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d040      	beq.n	8005c2c <HAL_DMA_Abort_IT+0x290>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a68      	ldr	r2, [pc, #416]	; (8005d50 <HAL_DMA_Abort_IT+0x3b4>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d03b      	beq.n	8005c2c <HAL_DMA_Abort_IT+0x290>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a66      	ldr	r2, [pc, #408]	; (8005d54 <HAL_DMA_Abort_IT+0x3b8>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d036      	beq.n	8005c2c <HAL_DMA_Abort_IT+0x290>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a65      	ldr	r2, [pc, #404]	; (8005d58 <HAL_DMA_Abort_IT+0x3bc>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d031      	beq.n	8005c2c <HAL_DMA_Abort_IT+0x290>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a63      	ldr	r2, [pc, #396]	; (8005d5c <HAL_DMA_Abort_IT+0x3c0>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d02c      	beq.n	8005c2c <HAL_DMA_Abort_IT+0x290>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a62      	ldr	r2, [pc, #392]	; (8005d60 <HAL_DMA_Abort_IT+0x3c4>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d027      	beq.n	8005c2c <HAL_DMA_Abort_IT+0x290>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a60      	ldr	r2, [pc, #384]	; (8005d64 <HAL_DMA_Abort_IT+0x3c8>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d022      	beq.n	8005c2c <HAL_DMA_Abort_IT+0x290>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a5f      	ldr	r2, [pc, #380]	; (8005d68 <HAL_DMA_Abort_IT+0x3cc>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d01d      	beq.n	8005c2c <HAL_DMA_Abort_IT+0x290>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a5d      	ldr	r2, [pc, #372]	; (8005d6c <HAL_DMA_Abort_IT+0x3d0>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d018      	beq.n	8005c2c <HAL_DMA_Abort_IT+0x290>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a5c      	ldr	r2, [pc, #368]	; (8005d70 <HAL_DMA_Abort_IT+0x3d4>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d013      	beq.n	8005c2c <HAL_DMA_Abort_IT+0x290>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a5a      	ldr	r2, [pc, #360]	; (8005d74 <HAL_DMA_Abort_IT+0x3d8>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d00e      	beq.n	8005c2c <HAL_DMA_Abort_IT+0x290>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a59      	ldr	r2, [pc, #356]	; (8005d78 <HAL_DMA_Abort_IT+0x3dc>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d009      	beq.n	8005c2c <HAL_DMA_Abort_IT+0x290>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a57      	ldr	r2, [pc, #348]	; (8005d7c <HAL_DMA_Abort_IT+0x3e0>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d004      	beq.n	8005c2c <HAL_DMA_Abort_IT+0x290>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a56      	ldr	r2, [pc, #344]	; (8005d80 <HAL_DMA_Abort_IT+0x3e4>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d108      	bne.n	8005c3e <HAL_DMA_Abort_IT+0x2a2>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f022 0201 	bic.w	r2, r2, #1
 8005c3a:	601a      	str	r2, [r3, #0]
 8005c3c:	e007      	b.n	8005c4e <HAL_DMA_Abort_IT+0x2b2>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f022 0201 	bic.w	r2, r2, #1
 8005c4c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a3c      	ldr	r2, [pc, #240]	; (8005d44 <HAL_DMA_Abort_IT+0x3a8>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d072      	beq.n	8005d3e <HAL_DMA_Abort_IT+0x3a2>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a3a      	ldr	r2, [pc, #232]	; (8005d48 <HAL_DMA_Abort_IT+0x3ac>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d06d      	beq.n	8005d3e <HAL_DMA_Abort_IT+0x3a2>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a39      	ldr	r2, [pc, #228]	; (8005d4c <HAL_DMA_Abort_IT+0x3b0>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d068      	beq.n	8005d3e <HAL_DMA_Abort_IT+0x3a2>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a37      	ldr	r2, [pc, #220]	; (8005d50 <HAL_DMA_Abort_IT+0x3b4>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d063      	beq.n	8005d3e <HAL_DMA_Abort_IT+0x3a2>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a36      	ldr	r2, [pc, #216]	; (8005d54 <HAL_DMA_Abort_IT+0x3b8>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d05e      	beq.n	8005d3e <HAL_DMA_Abort_IT+0x3a2>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a34      	ldr	r2, [pc, #208]	; (8005d58 <HAL_DMA_Abort_IT+0x3bc>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d059      	beq.n	8005d3e <HAL_DMA_Abort_IT+0x3a2>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a33      	ldr	r2, [pc, #204]	; (8005d5c <HAL_DMA_Abort_IT+0x3c0>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d054      	beq.n	8005d3e <HAL_DMA_Abort_IT+0x3a2>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a31      	ldr	r2, [pc, #196]	; (8005d60 <HAL_DMA_Abort_IT+0x3c4>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d04f      	beq.n	8005d3e <HAL_DMA_Abort_IT+0x3a2>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a30      	ldr	r2, [pc, #192]	; (8005d64 <HAL_DMA_Abort_IT+0x3c8>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d04a      	beq.n	8005d3e <HAL_DMA_Abort_IT+0x3a2>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a2e      	ldr	r2, [pc, #184]	; (8005d68 <HAL_DMA_Abort_IT+0x3cc>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d045      	beq.n	8005d3e <HAL_DMA_Abort_IT+0x3a2>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a2d      	ldr	r2, [pc, #180]	; (8005d6c <HAL_DMA_Abort_IT+0x3d0>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d040      	beq.n	8005d3e <HAL_DMA_Abort_IT+0x3a2>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a2b      	ldr	r2, [pc, #172]	; (8005d70 <HAL_DMA_Abort_IT+0x3d4>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d03b      	beq.n	8005d3e <HAL_DMA_Abort_IT+0x3a2>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a2a      	ldr	r2, [pc, #168]	; (8005d74 <HAL_DMA_Abort_IT+0x3d8>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d036      	beq.n	8005d3e <HAL_DMA_Abort_IT+0x3a2>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a28      	ldr	r2, [pc, #160]	; (8005d78 <HAL_DMA_Abort_IT+0x3dc>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d031      	beq.n	8005d3e <HAL_DMA_Abort_IT+0x3a2>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a27      	ldr	r2, [pc, #156]	; (8005d7c <HAL_DMA_Abort_IT+0x3e0>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d02c      	beq.n	8005d3e <HAL_DMA_Abort_IT+0x3a2>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a25      	ldr	r2, [pc, #148]	; (8005d80 <HAL_DMA_Abort_IT+0x3e4>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d027      	beq.n	8005d3e <HAL_DMA_Abort_IT+0x3a2>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a24      	ldr	r2, [pc, #144]	; (8005d84 <HAL_DMA_Abort_IT+0x3e8>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d022      	beq.n	8005d3e <HAL_DMA_Abort_IT+0x3a2>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a22      	ldr	r2, [pc, #136]	; (8005d88 <HAL_DMA_Abort_IT+0x3ec>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d01d      	beq.n	8005d3e <HAL_DMA_Abort_IT+0x3a2>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a21      	ldr	r2, [pc, #132]	; (8005d8c <HAL_DMA_Abort_IT+0x3f0>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d018      	beq.n	8005d3e <HAL_DMA_Abort_IT+0x3a2>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a1f      	ldr	r2, [pc, #124]	; (8005d90 <HAL_DMA_Abort_IT+0x3f4>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d013      	beq.n	8005d3e <HAL_DMA_Abort_IT+0x3a2>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a1e      	ldr	r2, [pc, #120]	; (8005d94 <HAL_DMA_Abort_IT+0x3f8>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d00e      	beq.n	8005d3e <HAL_DMA_Abort_IT+0x3a2>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a1c      	ldr	r2, [pc, #112]	; (8005d98 <HAL_DMA_Abort_IT+0x3fc>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d009      	beq.n	8005d3e <HAL_DMA_Abort_IT+0x3a2>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a1b      	ldr	r2, [pc, #108]	; (8005d9c <HAL_DMA_Abort_IT+0x400>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d004      	beq.n	8005d3e <HAL_DMA_Abort_IT+0x3a2>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a19      	ldr	r2, [pc, #100]	; (8005da0 <HAL_DMA_Abort_IT+0x404>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d132      	bne.n	8005da4 <HAL_DMA_Abort_IT+0x408>
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e031      	b.n	8005da6 <HAL_DMA_Abort_IT+0x40a>
 8005d42:	bf00      	nop
 8005d44:	40020010 	.word	0x40020010
 8005d48:	40020028 	.word	0x40020028
 8005d4c:	40020040 	.word	0x40020040
 8005d50:	40020058 	.word	0x40020058
 8005d54:	40020070 	.word	0x40020070
 8005d58:	40020088 	.word	0x40020088
 8005d5c:	400200a0 	.word	0x400200a0
 8005d60:	400200b8 	.word	0x400200b8
 8005d64:	40020410 	.word	0x40020410
 8005d68:	40020428 	.word	0x40020428
 8005d6c:	40020440 	.word	0x40020440
 8005d70:	40020458 	.word	0x40020458
 8005d74:	40020470 	.word	0x40020470
 8005d78:	40020488 	.word	0x40020488
 8005d7c:	400204a0 	.word	0x400204a0
 8005d80:	400204b8 	.word	0x400204b8
 8005d84:	58025408 	.word	0x58025408
 8005d88:	5802541c 	.word	0x5802541c
 8005d8c:	58025430 	.word	0x58025430
 8005d90:	58025444 	.word	0x58025444
 8005d94:	58025458 	.word	0x58025458
 8005d98:	5802546c 	.word	0x5802546c
 8005d9c:	58025480 	.word	0x58025480
 8005da0:	58025494 	.word	0x58025494
 8005da4:	2300      	movs	r3, #0
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d028      	beq.n	8005dfc <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005db4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005db8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dbe:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dc4:	f003 031f 	and.w	r3, r3, #31
 8005dc8:	2201      	movs	r2, #1
 8005dca:	409a      	lsls	r2, r3
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005dd8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d00c      	beq.n	8005dfc <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005dec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005df0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005dfa:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2200      	movs	r2, #0
 8005e08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d003      	beq.n	8005e1c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005e1c:	2300      	movs	r3, #0
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3710      	adds	r7, #16
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}
 8005e26:	bf00      	nop

08005e28 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b08a      	sub	sp, #40	; 0x28
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005e30:	2300      	movs	r3, #0
 8005e32:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005e34:	4b67      	ldr	r3, [pc, #412]	; (8005fd4 <HAL_DMA_IRQHandler+0x1ac>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a67      	ldr	r2, [pc, #412]	; (8005fd8 <HAL_DMA_IRQHandler+0x1b0>)
 8005e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e3e:	0a9b      	lsrs	r3, r3, #10
 8005e40:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e46:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e4c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005e4e:	6a3b      	ldr	r3, [r7, #32]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005e54:	69fb      	ldr	r3, [r7, #28]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a5f      	ldr	r2, [pc, #380]	; (8005fdc <HAL_DMA_IRQHandler+0x1b4>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d04a      	beq.n	8005efa <HAL_DMA_IRQHandler+0xd2>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a5d      	ldr	r2, [pc, #372]	; (8005fe0 <HAL_DMA_IRQHandler+0x1b8>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d045      	beq.n	8005efa <HAL_DMA_IRQHandler+0xd2>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a5c      	ldr	r2, [pc, #368]	; (8005fe4 <HAL_DMA_IRQHandler+0x1bc>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d040      	beq.n	8005efa <HAL_DMA_IRQHandler+0xd2>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a5a      	ldr	r2, [pc, #360]	; (8005fe8 <HAL_DMA_IRQHandler+0x1c0>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d03b      	beq.n	8005efa <HAL_DMA_IRQHandler+0xd2>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a59      	ldr	r2, [pc, #356]	; (8005fec <HAL_DMA_IRQHandler+0x1c4>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d036      	beq.n	8005efa <HAL_DMA_IRQHandler+0xd2>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a57      	ldr	r2, [pc, #348]	; (8005ff0 <HAL_DMA_IRQHandler+0x1c8>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d031      	beq.n	8005efa <HAL_DMA_IRQHandler+0xd2>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a56      	ldr	r2, [pc, #344]	; (8005ff4 <HAL_DMA_IRQHandler+0x1cc>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d02c      	beq.n	8005efa <HAL_DMA_IRQHandler+0xd2>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a54      	ldr	r2, [pc, #336]	; (8005ff8 <HAL_DMA_IRQHandler+0x1d0>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d027      	beq.n	8005efa <HAL_DMA_IRQHandler+0xd2>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a53      	ldr	r2, [pc, #332]	; (8005ffc <HAL_DMA_IRQHandler+0x1d4>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d022      	beq.n	8005efa <HAL_DMA_IRQHandler+0xd2>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a51      	ldr	r2, [pc, #324]	; (8006000 <HAL_DMA_IRQHandler+0x1d8>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d01d      	beq.n	8005efa <HAL_DMA_IRQHandler+0xd2>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a50      	ldr	r2, [pc, #320]	; (8006004 <HAL_DMA_IRQHandler+0x1dc>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d018      	beq.n	8005efa <HAL_DMA_IRQHandler+0xd2>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a4e      	ldr	r2, [pc, #312]	; (8006008 <HAL_DMA_IRQHandler+0x1e0>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d013      	beq.n	8005efa <HAL_DMA_IRQHandler+0xd2>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a4d      	ldr	r2, [pc, #308]	; (800600c <HAL_DMA_IRQHandler+0x1e4>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d00e      	beq.n	8005efa <HAL_DMA_IRQHandler+0xd2>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a4b      	ldr	r2, [pc, #300]	; (8006010 <HAL_DMA_IRQHandler+0x1e8>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d009      	beq.n	8005efa <HAL_DMA_IRQHandler+0xd2>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a4a      	ldr	r2, [pc, #296]	; (8006014 <HAL_DMA_IRQHandler+0x1ec>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d004      	beq.n	8005efa <HAL_DMA_IRQHandler+0xd2>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a48      	ldr	r2, [pc, #288]	; (8006018 <HAL_DMA_IRQHandler+0x1f0>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d101      	bne.n	8005efe <HAL_DMA_IRQHandler+0xd6>
 8005efa:	2301      	movs	r3, #1
 8005efc:	e000      	b.n	8005f00 <HAL_DMA_IRQHandler+0xd8>
 8005efe:	2300      	movs	r3, #0
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	f000 842b 	beq.w	800675c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f0a:	f003 031f 	and.w	r3, r3, #31
 8005f0e:	2208      	movs	r2, #8
 8005f10:	409a      	lsls	r2, r3
 8005f12:	69bb      	ldr	r3, [r7, #24]
 8005f14:	4013      	ands	r3, r2
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	f000 80a2 	beq.w	8006060 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a2e      	ldr	r2, [pc, #184]	; (8005fdc <HAL_DMA_IRQHandler+0x1b4>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d04a      	beq.n	8005fbc <HAL_DMA_IRQHandler+0x194>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a2d      	ldr	r2, [pc, #180]	; (8005fe0 <HAL_DMA_IRQHandler+0x1b8>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d045      	beq.n	8005fbc <HAL_DMA_IRQHandler+0x194>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a2b      	ldr	r2, [pc, #172]	; (8005fe4 <HAL_DMA_IRQHandler+0x1bc>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d040      	beq.n	8005fbc <HAL_DMA_IRQHandler+0x194>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a2a      	ldr	r2, [pc, #168]	; (8005fe8 <HAL_DMA_IRQHandler+0x1c0>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d03b      	beq.n	8005fbc <HAL_DMA_IRQHandler+0x194>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a28      	ldr	r2, [pc, #160]	; (8005fec <HAL_DMA_IRQHandler+0x1c4>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d036      	beq.n	8005fbc <HAL_DMA_IRQHandler+0x194>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a27      	ldr	r2, [pc, #156]	; (8005ff0 <HAL_DMA_IRQHandler+0x1c8>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d031      	beq.n	8005fbc <HAL_DMA_IRQHandler+0x194>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a25      	ldr	r2, [pc, #148]	; (8005ff4 <HAL_DMA_IRQHandler+0x1cc>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d02c      	beq.n	8005fbc <HAL_DMA_IRQHandler+0x194>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a24      	ldr	r2, [pc, #144]	; (8005ff8 <HAL_DMA_IRQHandler+0x1d0>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d027      	beq.n	8005fbc <HAL_DMA_IRQHandler+0x194>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a22      	ldr	r2, [pc, #136]	; (8005ffc <HAL_DMA_IRQHandler+0x1d4>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d022      	beq.n	8005fbc <HAL_DMA_IRQHandler+0x194>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a21      	ldr	r2, [pc, #132]	; (8006000 <HAL_DMA_IRQHandler+0x1d8>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d01d      	beq.n	8005fbc <HAL_DMA_IRQHandler+0x194>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a1f      	ldr	r2, [pc, #124]	; (8006004 <HAL_DMA_IRQHandler+0x1dc>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d018      	beq.n	8005fbc <HAL_DMA_IRQHandler+0x194>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a1e      	ldr	r2, [pc, #120]	; (8006008 <HAL_DMA_IRQHandler+0x1e0>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d013      	beq.n	8005fbc <HAL_DMA_IRQHandler+0x194>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a1c      	ldr	r2, [pc, #112]	; (800600c <HAL_DMA_IRQHandler+0x1e4>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d00e      	beq.n	8005fbc <HAL_DMA_IRQHandler+0x194>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a1b      	ldr	r2, [pc, #108]	; (8006010 <HAL_DMA_IRQHandler+0x1e8>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d009      	beq.n	8005fbc <HAL_DMA_IRQHandler+0x194>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a19      	ldr	r2, [pc, #100]	; (8006014 <HAL_DMA_IRQHandler+0x1ec>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d004      	beq.n	8005fbc <HAL_DMA_IRQHandler+0x194>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a18      	ldr	r2, [pc, #96]	; (8006018 <HAL_DMA_IRQHandler+0x1f0>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d12f      	bne.n	800601c <HAL_DMA_IRQHandler+0x1f4>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f003 0304 	and.w	r3, r3, #4
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	bf14      	ite	ne
 8005fca:	2301      	movne	r3, #1
 8005fcc:	2300      	moveq	r3, #0
 8005fce:	b2db      	uxtb	r3, r3
 8005fd0:	e02e      	b.n	8006030 <HAL_DMA_IRQHandler+0x208>
 8005fd2:	bf00      	nop
 8005fd4:	24000000 	.word	0x24000000
 8005fd8:	1b4e81b5 	.word	0x1b4e81b5
 8005fdc:	40020010 	.word	0x40020010
 8005fe0:	40020028 	.word	0x40020028
 8005fe4:	40020040 	.word	0x40020040
 8005fe8:	40020058 	.word	0x40020058
 8005fec:	40020070 	.word	0x40020070
 8005ff0:	40020088 	.word	0x40020088
 8005ff4:	400200a0 	.word	0x400200a0
 8005ff8:	400200b8 	.word	0x400200b8
 8005ffc:	40020410 	.word	0x40020410
 8006000:	40020428 	.word	0x40020428
 8006004:	40020440 	.word	0x40020440
 8006008:	40020458 	.word	0x40020458
 800600c:	40020470 	.word	0x40020470
 8006010:	40020488 	.word	0x40020488
 8006014:	400204a0 	.word	0x400204a0
 8006018:	400204b8 	.word	0x400204b8
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f003 0308 	and.w	r3, r3, #8
 8006026:	2b00      	cmp	r3, #0
 8006028:	bf14      	ite	ne
 800602a:	2301      	movne	r3, #1
 800602c:	2300      	moveq	r3, #0
 800602e:	b2db      	uxtb	r3, r3
 8006030:	2b00      	cmp	r3, #0
 8006032:	d015      	beq.n	8006060 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f022 0204 	bic.w	r2, r2, #4
 8006042:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006048:	f003 031f 	and.w	r3, r3, #31
 800604c:	2208      	movs	r2, #8
 800604e:	409a      	lsls	r2, r3
 8006050:	6a3b      	ldr	r3, [r7, #32]
 8006052:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006058:	f043 0201 	orr.w	r2, r3, #1
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006064:	f003 031f 	and.w	r3, r3, #31
 8006068:	69ba      	ldr	r2, [r7, #24]
 800606a:	fa22 f303 	lsr.w	r3, r2, r3
 800606e:	f003 0301 	and.w	r3, r3, #1
 8006072:	2b00      	cmp	r3, #0
 8006074:	d06e      	beq.n	8006154 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a69      	ldr	r2, [pc, #420]	; (8006220 <HAL_DMA_IRQHandler+0x3f8>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d04a      	beq.n	8006116 <HAL_DMA_IRQHandler+0x2ee>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a67      	ldr	r2, [pc, #412]	; (8006224 <HAL_DMA_IRQHandler+0x3fc>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d045      	beq.n	8006116 <HAL_DMA_IRQHandler+0x2ee>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a66      	ldr	r2, [pc, #408]	; (8006228 <HAL_DMA_IRQHandler+0x400>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d040      	beq.n	8006116 <HAL_DMA_IRQHandler+0x2ee>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a64      	ldr	r2, [pc, #400]	; (800622c <HAL_DMA_IRQHandler+0x404>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d03b      	beq.n	8006116 <HAL_DMA_IRQHandler+0x2ee>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a63      	ldr	r2, [pc, #396]	; (8006230 <HAL_DMA_IRQHandler+0x408>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d036      	beq.n	8006116 <HAL_DMA_IRQHandler+0x2ee>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a61      	ldr	r2, [pc, #388]	; (8006234 <HAL_DMA_IRQHandler+0x40c>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d031      	beq.n	8006116 <HAL_DMA_IRQHandler+0x2ee>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a60      	ldr	r2, [pc, #384]	; (8006238 <HAL_DMA_IRQHandler+0x410>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d02c      	beq.n	8006116 <HAL_DMA_IRQHandler+0x2ee>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a5e      	ldr	r2, [pc, #376]	; (800623c <HAL_DMA_IRQHandler+0x414>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d027      	beq.n	8006116 <HAL_DMA_IRQHandler+0x2ee>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a5d      	ldr	r2, [pc, #372]	; (8006240 <HAL_DMA_IRQHandler+0x418>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d022      	beq.n	8006116 <HAL_DMA_IRQHandler+0x2ee>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a5b      	ldr	r2, [pc, #364]	; (8006244 <HAL_DMA_IRQHandler+0x41c>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d01d      	beq.n	8006116 <HAL_DMA_IRQHandler+0x2ee>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a5a      	ldr	r2, [pc, #360]	; (8006248 <HAL_DMA_IRQHandler+0x420>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d018      	beq.n	8006116 <HAL_DMA_IRQHandler+0x2ee>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a58      	ldr	r2, [pc, #352]	; (800624c <HAL_DMA_IRQHandler+0x424>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d013      	beq.n	8006116 <HAL_DMA_IRQHandler+0x2ee>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a57      	ldr	r2, [pc, #348]	; (8006250 <HAL_DMA_IRQHandler+0x428>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d00e      	beq.n	8006116 <HAL_DMA_IRQHandler+0x2ee>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a55      	ldr	r2, [pc, #340]	; (8006254 <HAL_DMA_IRQHandler+0x42c>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d009      	beq.n	8006116 <HAL_DMA_IRQHandler+0x2ee>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a54      	ldr	r2, [pc, #336]	; (8006258 <HAL_DMA_IRQHandler+0x430>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d004      	beq.n	8006116 <HAL_DMA_IRQHandler+0x2ee>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a52      	ldr	r2, [pc, #328]	; (800625c <HAL_DMA_IRQHandler+0x434>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d10a      	bne.n	800612c <HAL_DMA_IRQHandler+0x304>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	695b      	ldr	r3, [r3, #20]
 800611c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006120:	2b00      	cmp	r3, #0
 8006122:	bf14      	ite	ne
 8006124:	2301      	movne	r3, #1
 8006126:	2300      	moveq	r3, #0
 8006128:	b2db      	uxtb	r3, r3
 800612a:	e003      	b.n	8006134 <HAL_DMA_IRQHandler+0x30c>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	2300      	movs	r3, #0
 8006134:	2b00      	cmp	r3, #0
 8006136:	d00d      	beq.n	8006154 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800613c:	f003 031f 	and.w	r3, r3, #31
 8006140:	2201      	movs	r2, #1
 8006142:	409a      	lsls	r2, r3
 8006144:	6a3b      	ldr	r3, [r7, #32]
 8006146:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800614c:	f043 0202 	orr.w	r2, r3, #2
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006158:	f003 031f 	and.w	r3, r3, #31
 800615c:	2204      	movs	r2, #4
 800615e:	409a      	lsls	r2, r3
 8006160:	69bb      	ldr	r3, [r7, #24]
 8006162:	4013      	ands	r3, r2
 8006164:	2b00      	cmp	r3, #0
 8006166:	f000 808f 	beq.w	8006288 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a2c      	ldr	r2, [pc, #176]	; (8006220 <HAL_DMA_IRQHandler+0x3f8>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d04a      	beq.n	800620a <HAL_DMA_IRQHandler+0x3e2>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a2a      	ldr	r2, [pc, #168]	; (8006224 <HAL_DMA_IRQHandler+0x3fc>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d045      	beq.n	800620a <HAL_DMA_IRQHandler+0x3e2>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a29      	ldr	r2, [pc, #164]	; (8006228 <HAL_DMA_IRQHandler+0x400>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d040      	beq.n	800620a <HAL_DMA_IRQHandler+0x3e2>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a27      	ldr	r2, [pc, #156]	; (800622c <HAL_DMA_IRQHandler+0x404>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d03b      	beq.n	800620a <HAL_DMA_IRQHandler+0x3e2>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a26      	ldr	r2, [pc, #152]	; (8006230 <HAL_DMA_IRQHandler+0x408>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d036      	beq.n	800620a <HAL_DMA_IRQHandler+0x3e2>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a24      	ldr	r2, [pc, #144]	; (8006234 <HAL_DMA_IRQHandler+0x40c>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d031      	beq.n	800620a <HAL_DMA_IRQHandler+0x3e2>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a23      	ldr	r2, [pc, #140]	; (8006238 <HAL_DMA_IRQHandler+0x410>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d02c      	beq.n	800620a <HAL_DMA_IRQHandler+0x3e2>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a21      	ldr	r2, [pc, #132]	; (800623c <HAL_DMA_IRQHandler+0x414>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d027      	beq.n	800620a <HAL_DMA_IRQHandler+0x3e2>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a20      	ldr	r2, [pc, #128]	; (8006240 <HAL_DMA_IRQHandler+0x418>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d022      	beq.n	800620a <HAL_DMA_IRQHandler+0x3e2>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a1e      	ldr	r2, [pc, #120]	; (8006244 <HAL_DMA_IRQHandler+0x41c>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d01d      	beq.n	800620a <HAL_DMA_IRQHandler+0x3e2>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a1d      	ldr	r2, [pc, #116]	; (8006248 <HAL_DMA_IRQHandler+0x420>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d018      	beq.n	800620a <HAL_DMA_IRQHandler+0x3e2>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a1b      	ldr	r2, [pc, #108]	; (800624c <HAL_DMA_IRQHandler+0x424>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d013      	beq.n	800620a <HAL_DMA_IRQHandler+0x3e2>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a1a      	ldr	r2, [pc, #104]	; (8006250 <HAL_DMA_IRQHandler+0x428>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d00e      	beq.n	800620a <HAL_DMA_IRQHandler+0x3e2>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a18      	ldr	r2, [pc, #96]	; (8006254 <HAL_DMA_IRQHandler+0x42c>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d009      	beq.n	800620a <HAL_DMA_IRQHandler+0x3e2>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a17      	ldr	r2, [pc, #92]	; (8006258 <HAL_DMA_IRQHandler+0x430>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d004      	beq.n	800620a <HAL_DMA_IRQHandler+0x3e2>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a15      	ldr	r2, [pc, #84]	; (800625c <HAL_DMA_IRQHandler+0x434>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d12a      	bne.n	8006260 <HAL_DMA_IRQHandler+0x438>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f003 0302 	and.w	r3, r3, #2
 8006214:	2b00      	cmp	r3, #0
 8006216:	bf14      	ite	ne
 8006218:	2301      	movne	r3, #1
 800621a:	2300      	moveq	r3, #0
 800621c:	b2db      	uxtb	r3, r3
 800621e:	e023      	b.n	8006268 <HAL_DMA_IRQHandler+0x440>
 8006220:	40020010 	.word	0x40020010
 8006224:	40020028 	.word	0x40020028
 8006228:	40020040 	.word	0x40020040
 800622c:	40020058 	.word	0x40020058
 8006230:	40020070 	.word	0x40020070
 8006234:	40020088 	.word	0x40020088
 8006238:	400200a0 	.word	0x400200a0
 800623c:	400200b8 	.word	0x400200b8
 8006240:	40020410 	.word	0x40020410
 8006244:	40020428 	.word	0x40020428
 8006248:	40020440 	.word	0x40020440
 800624c:	40020458 	.word	0x40020458
 8006250:	40020470 	.word	0x40020470
 8006254:	40020488 	.word	0x40020488
 8006258:	400204a0 	.word	0x400204a0
 800625c:	400204b8 	.word	0x400204b8
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	2300      	movs	r3, #0
 8006268:	2b00      	cmp	r3, #0
 800626a:	d00d      	beq.n	8006288 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006270:	f003 031f 	and.w	r3, r3, #31
 8006274:	2204      	movs	r2, #4
 8006276:	409a      	lsls	r2, r3
 8006278:	6a3b      	ldr	r3, [r7, #32]
 800627a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006280:	f043 0204 	orr.w	r2, r3, #4
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800628c:	f003 031f 	and.w	r3, r3, #31
 8006290:	2210      	movs	r2, #16
 8006292:	409a      	lsls	r2, r3
 8006294:	69bb      	ldr	r3, [r7, #24]
 8006296:	4013      	ands	r3, r2
 8006298:	2b00      	cmp	r3, #0
 800629a:	f000 80a6 	beq.w	80063ea <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a85      	ldr	r2, [pc, #532]	; (80064b8 <HAL_DMA_IRQHandler+0x690>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d04a      	beq.n	800633e <HAL_DMA_IRQHandler+0x516>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a83      	ldr	r2, [pc, #524]	; (80064bc <HAL_DMA_IRQHandler+0x694>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d045      	beq.n	800633e <HAL_DMA_IRQHandler+0x516>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a82      	ldr	r2, [pc, #520]	; (80064c0 <HAL_DMA_IRQHandler+0x698>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d040      	beq.n	800633e <HAL_DMA_IRQHandler+0x516>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a80      	ldr	r2, [pc, #512]	; (80064c4 <HAL_DMA_IRQHandler+0x69c>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d03b      	beq.n	800633e <HAL_DMA_IRQHandler+0x516>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a7f      	ldr	r2, [pc, #508]	; (80064c8 <HAL_DMA_IRQHandler+0x6a0>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d036      	beq.n	800633e <HAL_DMA_IRQHandler+0x516>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a7d      	ldr	r2, [pc, #500]	; (80064cc <HAL_DMA_IRQHandler+0x6a4>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d031      	beq.n	800633e <HAL_DMA_IRQHandler+0x516>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a7c      	ldr	r2, [pc, #496]	; (80064d0 <HAL_DMA_IRQHandler+0x6a8>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d02c      	beq.n	800633e <HAL_DMA_IRQHandler+0x516>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a7a      	ldr	r2, [pc, #488]	; (80064d4 <HAL_DMA_IRQHandler+0x6ac>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d027      	beq.n	800633e <HAL_DMA_IRQHandler+0x516>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a79      	ldr	r2, [pc, #484]	; (80064d8 <HAL_DMA_IRQHandler+0x6b0>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d022      	beq.n	800633e <HAL_DMA_IRQHandler+0x516>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a77      	ldr	r2, [pc, #476]	; (80064dc <HAL_DMA_IRQHandler+0x6b4>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d01d      	beq.n	800633e <HAL_DMA_IRQHandler+0x516>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a76      	ldr	r2, [pc, #472]	; (80064e0 <HAL_DMA_IRQHandler+0x6b8>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d018      	beq.n	800633e <HAL_DMA_IRQHandler+0x516>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a74      	ldr	r2, [pc, #464]	; (80064e4 <HAL_DMA_IRQHandler+0x6bc>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d013      	beq.n	800633e <HAL_DMA_IRQHandler+0x516>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a73      	ldr	r2, [pc, #460]	; (80064e8 <HAL_DMA_IRQHandler+0x6c0>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d00e      	beq.n	800633e <HAL_DMA_IRQHandler+0x516>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a71      	ldr	r2, [pc, #452]	; (80064ec <HAL_DMA_IRQHandler+0x6c4>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d009      	beq.n	800633e <HAL_DMA_IRQHandler+0x516>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a70      	ldr	r2, [pc, #448]	; (80064f0 <HAL_DMA_IRQHandler+0x6c8>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d004      	beq.n	800633e <HAL_DMA_IRQHandler+0x516>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a6e      	ldr	r2, [pc, #440]	; (80064f4 <HAL_DMA_IRQHandler+0x6cc>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d10a      	bne.n	8006354 <HAL_DMA_IRQHandler+0x52c>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f003 0308 	and.w	r3, r3, #8
 8006348:	2b00      	cmp	r3, #0
 800634a:	bf14      	ite	ne
 800634c:	2301      	movne	r3, #1
 800634e:	2300      	moveq	r3, #0
 8006350:	b2db      	uxtb	r3, r3
 8006352:	e009      	b.n	8006368 <HAL_DMA_IRQHandler+0x540>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f003 0304 	and.w	r3, r3, #4
 800635e:	2b00      	cmp	r3, #0
 8006360:	bf14      	ite	ne
 8006362:	2301      	movne	r3, #1
 8006364:	2300      	moveq	r3, #0
 8006366:	b2db      	uxtb	r3, r3
 8006368:	2b00      	cmp	r3, #0
 800636a:	d03e      	beq.n	80063ea <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006370:	f003 031f 	and.w	r3, r3, #31
 8006374:	2210      	movs	r2, #16
 8006376:	409a      	lsls	r2, r3
 8006378:	6a3b      	ldr	r3, [r7, #32]
 800637a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006386:	2b00      	cmp	r3, #0
 8006388:	d018      	beq.n	80063bc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006394:	2b00      	cmp	r3, #0
 8006396:	d108      	bne.n	80063aa <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800639c:	2b00      	cmp	r3, #0
 800639e:	d024      	beq.n	80063ea <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	4798      	blx	r3
 80063a8:	e01f      	b.n	80063ea <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d01b      	beq.n	80063ea <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	4798      	blx	r3
 80063ba:	e016      	b.n	80063ea <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d107      	bne.n	80063da <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	681a      	ldr	r2, [r3, #0]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f022 0208 	bic.w	r2, r2, #8
 80063d8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d003      	beq.n	80063ea <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063ee:	f003 031f 	and.w	r3, r3, #31
 80063f2:	2220      	movs	r2, #32
 80063f4:	409a      	lsls	r2, r3
 80063f6:	69bb      	ldr	r3, [r7, #24]
 80063f8:	4013      	ands	r3, r2
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	f000 8110 	beq.w	8006620 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a2c      	ldr	r2, [pc, #176]	; (80064b8 <HAL_DMA_IRQHandler+0x690>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d04a      	beq.n	80064a0 <HAL_DMA_IRQHandler+0x678>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a2b      	ldr	r2, [pc, #172]	; (80064bc <HAL_DMA_IRQHandler+0x694>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d045      	beq.n	80064a0 <HAL_DMA_IRQHandler+0x678>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a29      	ldr	r2, [pc, #164]	; (80064c0 <HAL_DMA_IRQHandler+0x698>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d040      	beq.n	80064a0 <HAL_DMA_IRQHandler+0x678>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a28      	ldr	r2, [pc, #160]	; (80064c4 <HAL_DMA_IRQHandler+0x69c>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d03b      	beq.n	80064a0 <HAL_DMA_IRQHandler+0x678>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a26      	ldr	r2, [pc, #152]	; (80064c8 <HAL_DMA_IRQHandler+0x6a0>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d036      	beq.n	80064a0 <HAL_DMA_IRQHandler+0x678>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a25      	ldr	r2, [pc, #148]	; (80064cc <HAL_DMA_IRQHandler+0x6a4>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d031      	beq.n	80064a0 <HAL_DMA_IRQHandler+0x678>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a23      	ldr	r2, [pc, #140]	; (80064d0 <HAL_DMA_IRQHandler+0x6a8>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d02c      	beq.n	80064a0 <HAL_DMA_IRQHandler+0x678>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a22      	ldr	r2, [pc, #136]	; (80064d4 <HAL_DMA_IRQHandler+0x6ac>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d027      	beq.n	80064a0 <HAL_DMA_IRQHandler+0x678>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a20      	ldr	r2, [pc, #128]	; (80064d8 <HAL_DMA_IRQHandler+0x6b0>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d022      	beq.n	80064a0 <HAL_DMA_IRQHandler+0x678>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a1f      	ldr	r2, [pc, #124]	; (80064dc <HAL_DMA_IRQHandler+0x6b4>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d01d      	beq.n	80064a0 <HAL_DMA_IRQHandler+0x678>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a1d      	ldr	r2, [pc, #116]	; (80064e0 <HAL_DMA_IRQHandler+0x6b8>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d018      	beq.n	80064a0 <HAL_DMA_IRQHandler+0x678>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a1c      	ldr	r2, [pc, #112]	; (80064e4 <HAL_DMA_IRQHandler+0x6bc>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d013      	beq.n	80064a0 <HAL_DMA_IRQHandler+0x678>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a1a      	ldr	r2, [pc, #104]	; (80064e8 <HAL_DMA_IRQHandler+0x6c0>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d00e      	beq.n	80064a0 <HAL_DMA_IRQHandler+0x678>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a19      	ldr	r2, [pc, #100]	; (80064ec <HAL_DMA_IRQHandler+0x6c4>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d009      	beq.n	80064a0 <HAL_DMA_IRQHandler+0x678>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a17      	ldr	r2, [pc, #92]	; (80064f0 <HAL_DMA_IRQHandler+0x6c8>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d004      	beq.n	80064a0 <HAL_DMA_IRQHandler+0x678>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a16      	ldr	r2, [pc, #88]	; (80064f4 <HAL_DMA_IRQHandler+0x6cc>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d12b      	bne.n	80064f8 <HAL_DMA_IRQHandler+0x6d0>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f003 0310 	and.w	r3, r3, #16
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	bf14      	ite	ne
 80064ae:	2301      	movne	r3, #1
 80064b0:	2300      	moveq	r3, #0
 80064b2:	b2db      	uxtb	r3, r3
 80064b4:	e02a      	b.n	800650c <HAL_DMA_IRQHandler+0x6e4>
 80064b6:	bf00      	nop
 80064b8:	40020010 	.word	0x40020010
 80064bc:	40020028 	.word	0x40020028
 80064c0:	40020040 	.word	0x40020040
 80064c4:	40020058 	.word	0x40020058
 80064c8:	40020070 	.word	0x40020070
 80064cc:	40020088 	.word	0x40020088
 80064d0:	400200a0 	.word	0x400200a0
 80064d4:	400200b8 	.word	0x400200b8
 80064d8:	40020410 	.word	0x40020410
 80064dc:	40020428 	.word	0x40020428
 80064e0:	40020440 	.word	0x40020440
 80064e4:	40020458 	.word	0x40020458
 80064e8:	40020470 	.word	0x40020470
 80064ec:	40020488 	.word	0x40020488
 80064f0:	400204a0 	.word	0x400204a0
 80064f4:	400204b8 	.word	0x400204b8
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f003 0302 	and.w	r3, r3, #2
 8006502:	2b00      	cmp	r3, #0
 8006504:	bf14      	ite	ne
 8006506:	2301      	movne	r3, #1
 8006508:	2300      	moveq	r3, #0
 800650a:	b2db      	uxtb	r3, r3
 800650c:	2b00      	cmp	r3, #0
 800650e:	f000 8087 	beq.w	8006620 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006516:	f003 031f 	and.w	r3, r3, #31
 800651a:	2220      	movs	r2, #32
 800651c:	409a      	lsls	r2, r3
 800651e:	6a3b      	ldr	r3, [r7, #32]
 8006520:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006528:	b2db      	uxtb	r3, r3
 800652a:	2b04      	cmp	r3, #4
 800652c:	d139      	bne.n	80065a2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f022 0216 	bic.w	r2, r2, #22
 800653c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	695a      	ldr	r2, [r3, #20]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800654c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006552:	2b00      	cmp	r3, #0
 8006554:	d103      	bne.n	800655e <HAL_DMA_IRQHandler+0x736>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800655a:	2b00      	cmp	r3, #0
 800655c:	d007      	beq.n	800656e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f022 0208 	bic.w	r2, r2, #8
 800656c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006572:	f003 031f 	and.w	r3, r3, #31
 8006576:	223f      	movs	r2, #63	; 0x3f
 8006578:	409a      	lsls	r2, r3
 800657a:	6a3b      	ldr	r3, [r7, #32]
 800657c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2201      	movs	r2, #1
 8006582:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2200      	movs	r2, #0
 800658a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006592:	2b00      	cmp	r3, #0
 8006594:	f000 834a 	beq.w	8006c2c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	4798      	blx	r3
          }
          return;
 80065a0:	e344      	b.n	8006c2c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d018      	beq.n	80065e2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d108      	bne.n	80065d0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d02c      	beq.n	8006620 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	4798      	blx	r3
 80065ce:	e027      	b.n	8006620 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d023      	beq.n	8006620 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	4798      	blx	r3
 80065e0:	e01e      	b.n	8006620 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d10f      	bne.n	8006610 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	681a      	ldr	r2, [r3, #0]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f022 0210 	bic.w	r2, r2, #16
 80065fe:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2201      	movs	r2, #1
 8006604:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2200      	movs	r2, #0
 800660c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006614:	2b00      	cmp	r3, #0
 8006616:	d003      	beq.n	8006620 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006624:	2b00      	cmp	r3, #0
 8006626:	f000 8306 	beq.w	8006c36 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800662e:	f003 0301 	and.w	r3, r3, #1
 8006632:	2b00      	cmp	r3, #0
 8006634:	f000 8088 	beq.w	8006748 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2204      	movs	r2, #4
 800663c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a7a      	ldr	r2, [pc, #488]	; (8006830 <HAL_DMA_IRQHandler+0xa08>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d04a      	beq.n	80066e0 <HAL_DMA_IRQHandler+0x8b8>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a79      	ldr	r2, [pc, #484]	; (8006834 <HAL_DMA_IRQHandler+0xa0c>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d045      	beq.n	80066e0 <HAL_DMA_IRQHandler+0x8b8>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a77      	ldr	r2, [pc, #476]	; (8006838 <HAL_DMA_IRQHandler+0xa10>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d040      	beq.n	80066e0 <HAL_DMA_IRQHandler+0x8b8>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a76      	ldr	r2, [pc, #472]	; (800683c <HAL_DMA_IRQHandler+0xa14>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d03b      	beq.n	80066e0 <HAL_DMA_IRQHandler+0x8b8>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a74      	ldr	r2, [pc, #464]	; (8006840 <HAL_DMA_IRQHandler+0xa18>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d036      	beq.n	80066e0 <HAL_DMA_IRQHandler+0x8b8>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a73      	ldr	r2, [pc, #460]	; (8006844 <HAL_DMA_IRQHandler+0xa1c>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d031      	beq.n	80066e0 <HAL_DMA_IRQHandler+0x8b8>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a71      	ldr	r2, [pc, #452]	; (8006848 <HAL_DMA_IRQHandler+0xa20>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d02c      	beq.n	80066e0 <HAL_DMA_IRQHandler+0x8b8>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a70      	ldr	r2, [pc, #448]	; (800684c <HAL_DMA_IRQHandler+0xa24>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d027      	beq.n	80066e0 <HAL_DMA_IRQHandler+0x8b8>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a6e      	ldr	r2, [pc, #440]	; (8006850 <HAL_DMA_IRQHandler+0xa28>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d022      	beq.n	80066e0 <HAL_DMA_IRQHandler+0x8b8>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a6d      	ldr	r2, [pc, #436]	; (8006854 <HAL_DMA_IRQHandler+0xa2c>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d01d      	beq.n	80066e0 <HAL_DMA_IRQHandler+0x8b8>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a6b      	ldr	r2, [pc, #428]	; (8006858 <HAL_DMA_IRQHandler+0xa30>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d018      	beq.n	80066e0 <HAL_DMA_IRQHandler+0x8b8>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a6a      	ldr	r2, [pc, #424]	; (800685c <HAL_DMA_IRQHandler+0xa34>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d013      	beq.n	80066e0 <HAL_DMA_IRQHandler+0x8b8>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a68      	ldr	r2, [pc, #416]	; (8006860 <HAL_DMA_IRQHandler+0xa38>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d00e      	beq.n	80066e0 <HAL_DMA_IRQHandler+0x8b8>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a67      	ldr	r2, [pc, #412]	; (8006864 <HAL_DMA_IRQHandler+0xa3c>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d009      	beq.n	80066e0 <HAL_DMA_IRQHandler+0x8b8>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a65      	ldr	r2, [pc, #404]	; (8006868 <HAL_DMA_IRQHandler+0xa40>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d004      	beq.n	80066e0 <HAL_DMA_IRQHandler+0x8b8>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a64      	ldr	r2, [pc, #400]	; (800686c <HAL_DMA_IRQHandler+0xa44>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d108      	bne.n	80066f2 <HAL_DMA_IRQHandler+0x8ca>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	681a      	ldr	r2, [r3, #0]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f022 0201 	bic.w	r2, r2, #1
 80066ee:	601a      	str	r2, [r3, #0]
 80066f0:	e007      	b.n	8006702 <HAL_DMA_IRQHandler+0x8da>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f022 0201 	bic.w	r2, r2, #1
 8006700:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	3301      	adds	r3, #1
 8006706:	60fb      	str	r3, [r7, #12]
 8006708:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800670a:	429a      	cmp	r2, r3
 800670c:	d307      	bcc.n	800671e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f003 0301 	and.w	r3, r3, #1
 8006718:	2b00      	cmp	r3, #0
 800671a:	d1f2      	bne.n	8006702 <HAL_DMA_IRQHandler+0x8da>
 800671c:	e000      	b.n	8006720 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800671e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f003 0301 	and.w	r3, r3, #1
 800672a:	2b00      	cmp	r3, #0
 800672c:	d004      	beq.n	8006738 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2203      	movs	r2, #3
 8006732:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006736:	e003      	b.n	8006740 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2201      	movs	r2, #1
 800673c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2200      	movs	r2, #0
 8006744:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800674c:	2b00      	cmp	r3, #0
 800674e:	f000 8272 	beq.w	8006c36 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	4798      	blx	r3
 800675a:	e26c      	b.n	8006c36 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a43      	ldr	r2, [pc, #268]	; (8006870 <HAL_DMA_IRQHandler+0xa48>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d022      	beq.n	80067ac <HAL_DMA_IRQHandler+0x984>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a42      	ldr	r2, [pc, #264]	; (8006874 <HAL_DMA_IRQHandler+0xa4c>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d01d      	beq.n	80067ac <HAL_DMA_IRQHandler+0x984>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a40      	ldr	r2, [pc, #256]	; (8006878 <HAL_DMA_IRQHandler+0xa50>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d018      	beq.n	80067ac <HAL_DMA_IRQHandler+0x984>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a3f      	ldr	r2, [pc, #252]	; (800687c <HAL_DMA_IRQHandler+0xa54>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d013      	beq.n	80067ac <HAL_DMA_IRQHandler+0x984>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a3d      	ldr	r2, [pc, #244]	; (8006880 <HAL_DMA_IRQHandler+0xa58>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d00e      	beq.n	80067ac <HAL_DMA_IRQHandler+0x984>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a3c      	ldr	r2, [pc, #240]	; (8006884 <HAL_DMA_IRQHandler+0xa5c>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d009      	beq.n	80067ac <HAL_DMA_IRQHandler+0x984>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a3a      	ldr	r2, [pc, #232]	; (8006888 <HAL_DMA_IRQHandler+0xa60>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d004      	beq.n	80067ac <HAL_DMA_IRQHandler+0x984>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a39      	ldr	r2, [pc, #228]	; (800688c <HAL_DMA_IRQHandler+0xa64>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d101      	bne.n	80067b0 <HAL_DMA_IRQHandler+0x988>
 80067ac:	2301      	movs	r3, #1
 80067ae:	e000      	b.n	80067b2 <HAL_DMA_IRQHandler+0x98a>
 80067b0:	2300      	movs	r3, #0
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	f000 823f 	beq.w	8006c36 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067c4:	f003 031f 	and.w	r3, r3, #31
 80067c8:	2204      	movs	r2, #4
 80067ca:	409a      	lsls	r2, r3
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	4013      	ands	r3, r2
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	f000 80cd 	beq.w	8006970 <HAL_DMA_IRQHandler+0xb48>
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	f003 0304 	and.w	r3, r3, #4
 80067dc:	2b00      	cmp	r3, #0
 80067de:	f000 80c7 	beq.w	8006970 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067e6:	f003 031f 	and.w	r3, r3, #31
 80067ea:	2204      	movs	r2, #4
 80067ec:	409a      	lsls	r2, r3
 80067ee:	69fb      	ldr	r3, [r7, #28]
 80067f0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d049      	beq.n	8006890 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006802:	2b00      	cmp	r3, #0
 8006804:	d109      	bne.n	800681a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800680a:	2b00      	cmp	r3, #0
 800680c:	f000 8210 	beq.w	8006c30 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006818:	e20a      	b.n	8006c30 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800681e:	2b00      	cmp	r3, #0
 8006820:	f000 8206 	beq.w	8006c30 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800682c:	e200      	b.n	8006c30 <HAL_DMA_IRQHandler+0xe08>
 800682e:	bf00      	nop
 8006830:	40020010 	.word	0x40020010
 8006834:	40020028 	.word	0x40020028
 8006838:	40020040 	.word	0x40020040
 800683c:	40020058 	.word	0x40020058
 8006840:	40020070 	.word	0x40020070
 8006844:	40020088 	.word	0x40020088
 8006848:	400200a0 	.word	0x400200a0
 800684c:	400200b8 	.word	0x400200b8
 8006850:	40020410 	.word	0x40020410
 8006854:	40020428 	.word	0x40020428
 8006858:	40020440 	.word	0x40020440
 800685c:	40020458 	.word	0x40020458
 8006860:	40020470 	.word	0x40020470
 8006864:	40020488 	.word	0x40020488
 8006868:	400204a0 	.word	0x400204a0
 800686c:	400204b8 	.word	0x400204b8
 8006870:	58025408 	.word	0x58025408
 8006874:	5802541c 	.word	0x5802541c
 8006878:	58025430 	.word	0x58025430
 800687c:	58025444 	.word	0x58025444
 8006880:	58025458 	.word	0x58025458
 8006884:	5802546c 	.word	0x5802546c
 8006888:	58025480 	.word	0x58025480
 800688c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	f003 0320 	and.w	r3, r3, #32
 8006896:	2b00      	cmp	r3, #0
 8006898:	d160      	bne.n	800695c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a7f      	ldr	r2, [pc, #508]	; (8006a9c <HAL_DMA_IRQHandler+0xc74>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d04a      	beq.n	800693a <HAL_DMA_IRQHandler+0xb12>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a7d      	ldr	r2, [pc, #500]	; (8006aa0 <HAL_DMA_IRQHandler+0xc78>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d045      	beq.n	800693a <HAL_DMA_IRQHandler+0xb12>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a7c      	ldr	r2, [pc, #496]	; (8006aa4 <HAL_DMA_IRQHandler+0xc7c>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d040      	beq.n	800693a <HAL_DMA_IRQHandler+0xb12>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a7a      	ldr	r2, [pc, #488]	; (8006aa8 <HAL_DMA_IRQHandler+0xc80>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d03b      	beq.n	800693a <HAL_DMA_IRQHandler+0xb12>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a79      	ldr	r2, [pc, #484]	; (8006aac <HAL_DMA_IRQHandler+0xc84>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d036      	beq.n	800693a <HAL_DMA_IRQHandler+0xb12>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a77      	ldr	r2, [pc, #476]	; (8006ab0 <HAL_DMA_IRQHandler+0xc88>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d031      	beq.n	800693a <HAL_DMA_IRQHandler+0xb12>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a76      	ldr	r2, [pc, #472]	; (8006ab4 <HAL_DMA_IRQHandler+0xc8c>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d02c      	beq.n	800693a <HAL_DMA_IRQHandler+0xb12>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a74      	ldr	r2, [pc, #464]	; (8006ab8 <HAL_DMA_IRQHandler+0xc90>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d027      	beq.n	800693a <HAL_DMA_IRQHandler+0xb12>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a73      	ldr	r2, [pc, #460]	; (8006abc <HAL_DMA_IRQHandler+0xc94>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d022      	beq.n	800693a <HAL_DMA_IRQHandler+0xb12>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a71      	ldr	r2, [pc, #452]	; (8006ac0 <HAL_DMA_IRQHandler+0xc98>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d01d      	beq.n	800693a <HAL_DMA_IRQHandler+0xb12>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a70      	ldr	r2, [pc, #448]	; (8006ac4 <HAL_DMA_IRQHandler+0xc9c>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d018      	beq.n	800693a <HAL_DMA_IRQHandler+0xb12>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a6e      	ldr	r2, [pc, #440]	; (8006ac8 <HAL_DMA_IRQHandler+0xca0>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d013      	beq.n	800693a <HAL_DMA_IRQHandler+0xb12>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a6d      	ldr	r2, [pc, #436]	; (8006acc <HAL_DMA_IRQHandler+0xca4>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d00e      	beq.n	800693a <HAL_DMA_IRQHandler+0xb12>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a6b      	ldr	r2, [pc, #428]	; (8006ad0 <HAL_DMA_IRQHandler+0xca8>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d009      	beq.n	800693a <HAL_DMA_IRQHandler+0xb12>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a6a      	ldr	r2, [pc, #424]	; (8006ad4 <HAL_DMA_IRQHandler+0xcac>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d004      	beq.n	800693a <HAL_DMA_IRQHandler+0xb12>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a68      	ldr	r2, [pc, #416]	; (8006ad8 <HAL_DMA_IRQHandler+0xcb0>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d108      	bne.n	800694c <HAL_DMA_IRQHandler+0xb24>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f022 0208 	bic.w	r2, r2, #8
 8006948:	601a      	str	r2, [r3, #0]
 800694a:	e007      	b.n	800695c <HAL_DMA_IRQHandler+0xb34>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	681a      	ldr	r2, [r3, #0]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f022 0204 	bic.w	r2, r2, #4
 800695a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006960:	2b00      	cmp	r3, #0
 8006962:	f000 8165 	beq.w	8006c30 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800696e:	e15f      	b.n	8006c30 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006974:	f003 031f 	and.w	r3, r3, #31
 8006978:	2202      	movs	r2, #2
 800697a:	409a      	lsls	r2, r3
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	4013      	ands	r3, r2
 8006980:	2b00      	cmp	r3, #0
 8006982:	f000 80c5 	beq.w	8006b10 <HAL_DMA_IRQHandler+0xce8>
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	f003 0302 	and.w	r3, r3, #2
 800698c:	2b00      	cmp	r3, #0
 800698e:	f000 80bf 	beq.w	8006b10 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006996:	f003 031f 	and.w	r3, r3, #31
 800699a:	2202      	movs	r2, #2
 800699c:	409a      	lsls	r2, r3
 800699e:	69fb      	ldr	r3, [r7, #28]
 80069a0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d018      	beq.n	80069de <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d109      	bne.n	80069ca <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	f000 813a 	beq.w	8006c34 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80069c8:	e134      	b.n	8006c34 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	f000 8130 	beq.w	8006c34 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80069dc:	e12a      	b.n	8006c34 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	f003 0320 	and.w	r3, r3, #32
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	f040 8089 	bne.w	8006afc <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a2b      	ldr	r2, [pc, #172]	; (8006a9c <HAL_DMA_IRQHandler+0xc74>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d04a      	beq.n	8006a8a <HAL_DMA_IRQHandler+0xc62>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a29      	ldr	r2, [pc, #164]	; (8006aa0 <HAL_DMA_IRQHandler+0xc78>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d045      	beq.n	8006a8a <HAL_DMA_IRQHandler+0xc62>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a28      	ldr	r2, [pc, #160]	; (8006aa4 <HAL_DMA_IRQHandler+0xc7c>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d040      	beq.n	8006a8a <HAL_DMA_IRQHandler+0xc62>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a26      	ldr	r2, [pc, #152]	; (8006aa8 <HAL_DMA_IRQHandler+0xc80>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d03b      	beq.n	8006a8a <HAL_DMA_IRQHandler+0xc62>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a25      	ldr	r2, [pc, #148]	; (8006aac <HAL_DMA_IRQHandler+0xc84>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d036      	beq.n	8006a8a <HAL_DMA_IRQHandler+0xc62>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a23      	ldr	r2, [pc, #140]	; (8006ab0 <HAL_DMA_IRQHandler+0xc88>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d031      	beq.n	8006a8a <HAL_DMA_IRQHandler+0xc62>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a22      	ldr	r2, [pc, #136]	; (8006ab4 <HAL_DMA_IRQHandler+0xc8c>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d02c      	beq.n	8006a8a <HAL_DMA_IRQHandler+0xc62>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a20      	ldr	r2, [pc, #128]	; (8006ab8 <HAL_DMA_IRQHandler+0xc90>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d027      	beq.n	8006a8a <HAL_DMA_IRQHandler+0xc62>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a1f      	ldr	r2, [pc, #124]	; (8006abc <HAL_DMA_IRQHandler+0xc94>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d022      	beq.n	8006a8a <HAL_DMA_IRQHandler+0xc62>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a1d      	ldr	r2, [pc, #116]	; (8006ac0 <HAL_DMA_IRQHandler+0xc98>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d01d      	beq.n	8006a8a <HAL_DMA_IRQHandler+0xc62>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a1c      	ldr	r2, [pc, #112]	; (8006ac4 <HAL_DMA_IRQHandler+0xc9c>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d018      	beq.n	8006a8a <HAL_DMA_IRQHandler+0xc62>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a1a      	ldr	r2, [pc, #104]	; (8006ac8 <HAL_DMA_IRQHandler+0xca0>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d013      	beq.n	8006a8a <HAL_DMA_IRQHandler+0xc62>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a19      	ldr	r2, [pc, #100]	; (8006acc <HAL_DMA_IRQHandler+0xca4>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d00e      	beq.n	8006a8a <HAL_DMA_IRQHandler+0xc62>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a17      	ldr	r2, [pc, #92]	; (8006ad0 <HAL_DMA_IRQHandler+0xca8>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d009      	beq.n	8006a8a <HAL_DMA_IRQHandler+0xc62>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a16      	ldr	r2, [pc, #88]	; (8006ad4 <HAL_DMA_IRQHandler+0xcac>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d004      	beq.n	8006a8a <HAL_DMA_IRQHandler+0xc62>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a14      	ldr	r2, [pc, #80]	; (8006ad8 <HAL_DMA_IRQHandler+0xcb0>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d128      	bne.n	8006adc <HAL_DMA_IRQHandler+0xcb4>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f022 0214 	bic.w	r2, r2, #20
 8006a98:	601a      	str	r2, [r3, #0]
 8006a9a:	e027      	b.n	8006aec <HAL_DMA_IRQHandler+0xcc4>
 8006a9c:	40020010 	.word	0x40020010
 8006aa0:	40020028 	.word	0x40020028
 8006aa4:	40020040 	.word	0x40020040
 8006aa8:	40020058 	.word	0x40020058
 8006aac:	40020070 	.word	0x40020070
 8006ab0:	40020088 	.word	0x40020088
 8006ab4:	400200a0 	.word	0x400200a0
 8006ab8:	400200b8 	.word	0x400200b8
 8006abc:	40020410 	.word	0x40020410
 8006ac0:	40020428 	.word	0x40020428
 8006ac4:	40020440 	.word	0x40020440
 8006ac8:	40020458 	.word	0x40020458
 8006acc:	40020470 	.word	0x40020470
 8006ad0:	40020488 	.word	0x40020488
 8006ad4:	400204a0 	.word	0x400204a0
 8006ad8:	400204b8 	.word	0x400204b8
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f022 020a 	bic.w	r2, r2, #10
 8006aea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2201      	movs	r2, #1
 8006af0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2200      	movs	r2, #0
 8006af8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	f000 8097 	beq.w	8006c34 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b0e:	e091      	b.n	8006c34 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b14:	f003 031f 	and.w	r3, r3, #31
 8006b18:	2208      	movs	r2, #8
 8006b1a:	409a      	lsls	r2, r3
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	4013      	ands	r3, r2
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	f000 8088 	beq.w	8006c36 <HAL_DMA_IRQHandler+0xe0e>
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	f003 0308 	and.w	r3, r3, #8
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	f000 8082 	beq.w	8006c36 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a41      	ldr	r2, [pc, #260]	; (8006c3c <HAL_DMA_IRQHandler+0xe14>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d04a      	beq.n	8006bd2 <HAL_DMA_IRQHandler+0xdaa>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a3f      	ldr	r2, [pc, #252]	; (8006c40 <HAL_DMA_IRQHandler+0xe18>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d045      	beq.n	8006bd2 <HAL_DMA_IRQHandler+0xdaa>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a3e      	ldr	r2, [pc, #248]	; (8006c44 <HAL_DMA_IRQHandler+0xe1c>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d040      	beq.n	8006bd2 <HAL_DMA_IRQHandler+0xdaa>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a3c      	ldr	r2, [pc, #240]	; (8006c48 <HAL_DMA_IRQHandler+0xe20>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d03b      	beq.n	8006bd2 <HAL_DMA_IRQHandler+0xdaa>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a3b      	ldr	r2, [pc, #236]	; (8006c4c <HAL_DMA_IRQHandler+0xe24>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d036      	beq.n	8006bd2 <HAL_DMA_IRQHandler+0xdaa>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a39      	ldr	r2, [pc, #228]	; (8006c50 <HAL_DMA_IRQHandler+0xe28>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d031      	beq.n	8006bd2 <HAL_DMA_IRQHandler+0xdaa>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a38      	ldr	r2, [pc, #224]	; (8006c54 <HAL_DMA_IRQHandler+0xe2c>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d02c      	beq.n	8006bd2 <HAL_DMA_IRQHandler+0xdaa>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a36      	ldr	r2, [pc, #216]	; (8006c58 <HAL_DMA_IRQHandler+0xe30>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d027      	beq.n	8006bd2 <HAL_DMA_IRQHandler+0xdaa>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a35      	ldr	r2, [pc, #212]	; (8006c5c <HAL_DMA_IRQHandler+0xe34>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d022      	beq.n	8006bd2 <HAL_DMA_IRQHandler+0xdaa>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a33      	ldr	r2, [pc, #204]	; (8006c60 <HAL_DMA_IRQHandler+0xe38>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d01d      	beq.n	8006bd2 <HAL_DMA_IRQHandler+0xdaa>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a32      	ldr	r2, [pc, #200]	; (8006c64 <HAL_DMA_IRQHandler+0xe3c>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d018      	beq.n	8006bd2 <HAL_DMA_IRQHandler+0xdaa>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a30      	ldr	r2, [pc, #192]	; (8006c68 <HAL_DMA_IRQHandler+0xe40>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d013      	beq.n	8006bd2 <HAL_DMA_IRQHandler+0xdaa>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a2f      	ldr	r2, [pc, #188]	; (8006c6c <HAL_DMA_IRQHandler+0xe44>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d00e      	beq.n	8006bd2 <HAL_DMA_IRQHandler+0xdaa>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a2d      	ldr	r2, [pc, #180]	; (8006c70 <HAL_DMA_IRQHandler+0xe48>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d009      	beq.n	8006bd2 <HAL_DMA_IRQHandler+0xdaa>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a2c      	ldr	r2, [pc, #176]	; (8006c74 <HAL_DMA_IRQHandler+0xe4c>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d004      	beq.n	8006bd2 <HAL_DMA_IRQHandler+0xdaa>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a2a      	ldr	r2, [pc, #168]	; (8006c78 <HAL_DMA_IRQHandler+0xe50>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d108      	bne.n	8006be4 <HAL_DMA_IRQHandler+0xdbc>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	681a      	ldr	r2, [r3, #0]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f022 021c 	bic.w	r2, r2, #28
 8006be0:	601a      	str	r2, [r3, #0]
 8006be2:	e007      	b.n	8006bf4 <HAL_DMA_IRQHandler+0xdcc>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	681a      	ldr	r2, [r3, #0]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f022 020e 	bic.w	r2, r2, #14
 8006bf2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bf8:	f003 031f 	and.w	r3, r3, #31
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	409a      	lsls	r2, r3
 8006c00:	69fb      	ldr	r3, [r7, #28]
 8006c02:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2201      	movs	r2, #1
 8006c08:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2200      	movs	r2, #0
 8006c16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d009      	beq.n	8006c36 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	4798      	blx	r3
 8006c2a:	e004      	b.n	8006c36 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006c2c:	bf00      	nop
 8006c2e:	e002      	b.n	8006c36 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c30:	bf00      	nop
 8006c32:	e000      	b.n	8006c36 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c34:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006c36:	3728      	adds	r7, #40	; 0x28
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}
 8006c3c:	40020010 	.word	0x40020010
 8006c40:	40020028 	.word	0x40020028
 8006c44:	40020040 	.word	0x40020040
 8006c48:	40020058 	.word	0x40020058
 8006c4c:	40020070 	.word	0x40020070
 8006c50:	40020088 	.word	0x40020088
 8006c54:	400200a0 	.word	0x400200a0
 8006c58:	400200b8 	.word	0x400200b8
 8006c5c:	40020410 	.word	0x40020410
 8006c60:	40020428 	.word	0x40020428
 8006c64:	40020440 	.word	0x40020440
 8006c68:	40020458 	.word	0x40020458
 8006c6c:	40020470 	.word	0x40020470
 8006c70:	40020488 	.word	0x40020488
 8006c74:	400204a0 	.word	0x400204a0
 8006c78:	400204b8 	.word	0x400204b8

08006c7c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b087      	sub	sp, #28
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	60f8      	str	r0, [r7, #12]
 8006c84:	60b9      	str	r1, [r7, #8]
 8006c86:	607a      	str	r2, [r7, #4]
 8006c88:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c8e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c94:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a7f      	ldr	r2, [pc, #508]	; (8006e98 <DMA_SetConfig+0x21c>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d072      	beq.n	8006d86 <DMA_SetConfig+0x10a>
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a7d      	ldr	r2, [pc, #500]	; (8006e9c <DMA_SetConfig+0x220>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d06d      	beq.n	8006d86 <DMA_SetConfig+0x10a>
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a7c      	ldr	r2, [pc, #496]	; (8006ea0 <DMA_SetConfig+0x224>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d068      	beq.n	8006d86 <DMA_SetConfig+0x10a>
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a7a      	ldr	r2, [pc, #488]	; (8006ea4 <DMA_SetConfig+0x228>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d063      	beq.n	8006d86 <DMA_SetConfig+0x10a>
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a79      	ldr	r2, [pc, #484]	; (8006ea8 <DMA_SetConfig+0x22c>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d05e      	beq.n	8006d86 <DMA_SetConfig+0x10a>
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a77      	ldr	r2, [pc, #476]	; (8006eac <DMA_SetConfig+0x230>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d059      	beq.n	8006d86 <DMA_SetConfig+0x10a>
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a76      	ldr	r2, [pc, #472]	; (8006eb0 <DMA_SetConfig+0x234>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d054      	beq.n	8006d86 <DMA_SetConfig+0x10a>
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a74      	ldr	r2, [pc, #464]	; (8006eb4 <DMA_SetConfig+0x238>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d04f      	beq.n	8006d86 <DMA_SetConfig+0x10a>
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a73      	ldr	r2, [pc, #460]	; (8006eb8 <DMA_SetConfig+0x23c>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d04a      	beq.n	8006d86 <DMA_SetConfig+0x10a>
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a71      	ldr	r2, [pc, #452]	; (8006ebc <DMA_SetConfig+0x240>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d045      	beq.n	8006d86 <DMA_SetConfig+0x10a>
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a70      	ldr	r2, [pc, #448]	; (8006ec0 <DMA_SetConfig+0x244>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d040      	beq.n	8006d86 <DMA_SetConfig+0x10a>
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a6e      	ldr	r2, [pc, #440]	; (8006ec4 <DMA_SetConfig+0x248>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d03b      	beq.n	8006d86 <DMA_SetConfig+0x10a>
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a6d      	ldr	r2, [pc, #436]	; (8006ec8 <DMA_SetConfig+0x24c>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d036      	beq.n	8006d86 <DMA_SetConfig+0x10a>
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a6b      	ldr	r2, [pc, #428]	; (8006ecc <DMA_SetConfig+0x250>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d031      	beq.n	8006d86 <DMA_SetConfig+0x10a>
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a6a      	ldr	r2, [pc, #424]	; (8006ed0 <DMA_SetConfig+0x254>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d02c      	beq.n	8006d86 <DMA_SetConfig+0x10a>
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a68      	ldr	r2, [pc, #416]	; (8006ed4 <DMA_SetConfig+0x258>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d027      	beq.n	8006d86 <DMA_SetConfig+0x10a>
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a67      	ldr	r2, [pc, #412]	; (8006ed8 <DMA_SetConfig+0x25c>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d022      	beq.n	8006d86 <DMA_SetConfig+0x10a>
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a65      	ldr	r2, [pc, #404]	; (8006edc <DMA_SetConfig+0x260>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d01d      	beq.n	8006d86 <DMA_SetConfig+0x10a>
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a64      	ldr	r2, [pc, #400]	; (8006ee0 <DMA_SetConfig+0x264>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d018      	beq.n	8006d86 <DMA_SetConfig+0x10a>
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a62      	ldr	r2, [pc, #392]	; (8006ee4 <DMA_SetConfig+0x268>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d013      	beq.n	8006d86 <DMA_SetConfig+0x10a>
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a61      	ldr	r2, [pc, #388]	; (8006ee8 <DMA_SetConfig+0x26c>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d00e      	beq.n	8006d86 <DMA_SetConfig+0x10a>
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a5f      	ldr	r2, [pc, #380]	; (8006eec <DMA_SetConfig+0x270>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d009      	beq.n	8006d86 <DMA_SetConfig+0x10a>
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a5e      	ldr	r2, [pc, #376]	; (8006ef0 <DMA_SetConfig+0x274>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d004      	beq.n	8006d86 <DMA_SetConfig+0x10a>
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a5c      	ldr	r2, [pc, #368]	; (8006ef4 <DMA_SetConfig+0x278>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d101      	bne.n	8006d8a <DMA_SetConfig+0x10e>
 8006d86:	2301      	movs	r3, #1
 8006d88:	e000      	b.n	8006d8c <DMA_SetConfig+0x110>
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d00d      	beq.n	8006dac <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d94:	68fa      	ldr	r2, [r7, #12]
 8006d96:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006d98:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d004      	beq.n	8006dac <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006da6:	68fa      	ldr	r2, [r7, #12]
 8006da8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006daa:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a39      	ldr	r2, [pc, #228]	; (8006e98 <DMA_SetConfig+0x21c>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d04a      	beq.n	8006e4c <DMA_SetConfig+0x1d0>
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a38      	ldr	r2, [pc, #224]	; (8006e9c <DMA_SetConfig+0x220>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d045      	beq.n	8006e4c <DMA_SetConfig+0x1d0>
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a36      	ldr	r2, [pc, #216]	; (8006ea0 <DMA_SetConfig+0x224>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d040      	beq.n	8006e4c <DMA_SetConfig+0x1d0>
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a35      	ldr	r2, [pc, #212]	; (8006ea4 <DMA_SetConfig+0x228>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d03b      	beq.n	8006e4c <DMA_SetConfig+0x1d0>
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a33      	ldr	r2, [pc, #204]	; (8006ea8 <DMA_SetConfig+0x22c>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d036      	beq.n	8006e4c <DMA_SetConfig+0x1d0>
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a32      	ldr	r2, [pc, #200]	; (8006eac <DMA_SetConfig+0x230>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d031      	beq.n	8006e4c <DMA_SetConfig+0x1d0>
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a30      	ldr	r2, [pc, #192]	; (8006eb0 <DMA_SetConfig+0x234>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d02c      	beq.n	8006e4c <DMA_SetConfig+0x1d0>
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a2f      	ldr	r2, [pc, #188]	; (8006eb4 <DMA_SetConfig+0x238>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d027      	beq.n	8006e4c <DMA_SetConfig+0x1d0>
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a2d      	ldr	r2, [pc, #180]	; (8006eb8 <DMA_SetConfig+0x23c>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d022      	beq.n	8006e4c <DMA_SetConfig+0x1d0>
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a2c      	ldr	r2, [pc, #176]	; (8006ebc <DMA_SetConfig+0x240>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d01d      	beq.n	8006e4c <DMA_SetConfig+0x1d0>
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a2a      	ldr	r2, [pc, #168]	; (8006ec0 <DMA_SetConfig+0x244>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d018      	beq.n	8006e4c <DMA_SetConfig+0x1d0>
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a29      	ldr	r2, [pc, #164]	; (8006ec4 <DMA_SetConfig+0x248>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d013      	beq.n	8006e4c <DMA_SetConfig+0x1d0>
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a27      	ldr	r2, [pc, #156]	; (8006ec8 <DMA_SetConfig+0x24c>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d00e      	beq.n	8006e4c <DMA_SetConfig+0x1d0>
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a26      	ldr	r2, [pc, #152]	; (8006ecc <DMA_SetConfig+0x250>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d009      	beq.n	8006e4c <DMA_SetConfig+0x1d0>
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a24      	ldr	r2, [pc, #144]	; (8006ed0 <DMA_SetConfig+0x254>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d004      	beq.n	8006e4c <DMA_SetConfig+0x1d0>
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a23      	ldr	r2, [pc, #140]	; (8006ed4 <DMA_SetConfig+0x258>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d101      	bne.n	8006e50 <DMA_SetConfig+0x1d4>
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	e000      	b.n	8006e52 <DMA_SetConfig+0x1d6>
 8006e50:	2300      	movs	r3, #0
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d059      	beq.n	8006f0a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e5a:	f003 031f 	and.w	r3, r3, #31
 8006e5e:	223f      	movs	r2, #63	; 0x3f
 8006e60:	409a      	lsls	r2, r3
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	681a      	ldr	r2, [r3, #0]
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006e74:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	683a      	ldr	r2, [r7, #0]
 8006e7c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	2b40      	cmp	r3, #64	; 0x40
 8006e84:	d138      	bne.n	8006ef8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	68ba      	ldr	r2, [r7, #8]
 8006e94:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006e96:	e086      	b.n	8006fa6 <DMA_SetConfig+0x32a>
 8006e98:	40020010 	.word	0x40020010
 8006e9c:	40020028 	.word	0x40020028
 8006ea0:	40020040 	.word	0x40020040
 8006ea4:	40020058 	.word	0x40020058
 8006ea8:	40020070 	.word	0x40020070
 8006eac:	40020088 	.word	0x40020088
 8006eb0:	400200a0 	.word	0x400200a0
 8006eb4:	400200b8 	.word	0x400200b8
 8006eb8:	40020410 	.word	0x40020410
 8006ebc:	40020428 	.word	0x40020428
 8006ec0:	40020440 	.word	0x40020440
 8006ec4:	40020458 	.word	0x40020458
 8006ec8:	40020470 	.word	0x40020470
 8006ecc:	40020488 	.word	0x40020488
 8006ed0:	400204a0 	.word	0x400204a0
 8006ed4:	400204b8 	.word	0x400204b8
 8006ed8:	58025408 	.word	0x58025408
 8006edc:	5802541c 	.word	0x5802541c
 8006ee0:	58025430 	.word	0x58025430
 8006ee4:	58025444 	.word	0x58025444
 8006ee8:	58025458 	.word	0x58025458
 8006eec:	5802546c 	.word	0x5802546c
 8006ef0:	58025480 	.word	0x58025480
 8006ef4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	68ba      	ldr	r2, [r7, #8]
 8006efe:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	687a      	ldr	r2, [r7, #4]
 8006f06:	60da      	str	r2, [r3, #12]
}
 8006f08:	e04d      	b.n	8006fa6 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a29      	ldr	r2, [pc, #164]	; (8006fb4 <DMA_SetConfig+0x338>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d022      	beq.n	8006f5a <DMA_SetConfig+0x2de>
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a27      	ldr	r2, [pc, #156]	; (8006fb8 <DMA_SetConfig+0x33c>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d01d      	beq.n	8006f5a <DMA_SetConfig+0x2de>
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a26      	ldr	r2, [pc, #152]	; (8006fbc <DMA_SetConfig+0x340>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d018      	beq.n	8006f5a <DMA_SetConfig+0x2de>
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a24      	ldr	r2, [pc, #144]	; (8006fc0 <DMA_SetConfig+0x344>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d013      	beq.n	8006f5a <DMA_SetConfig+0x2de>
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a23      	ldr	r2, [pc, #140]	; (8006fc4 <DMA_SetConfig+0x348>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d00e      	beq.n	8006f5a <DMA_SetConfig+0x2de>
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a21      	ldr	r2, [pc, #132]	; (8006fc8 <DMA_SetConfig+0x34c>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d009      	beq.n	8006f5a <DMA_SetConfig+0x2de>
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a20      	ldr	r2, [pc, #128]	; (8006fcc <DMA_SetConfig+0x350>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d004      	beq.n	8006f5a <DMA_SetConfig+0x2de>
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a1e      	ldr	r2, [pc, #120]	; (8006fd0 <DMA_SetConfig+0x354>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d101      	bne.n	8006f5e <DMA_SetConfig+0x2e2>
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	e000      	b.n	8006f60 <DMA_SetConfig+0x2e4>
 8006f5e:	2300      	movs	r3, #0
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d020      	beq.n	8006fa6 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f68:	f003 031f 	and.w	r3, r3, #31
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	409a      	lsls	r2, r3
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	683a      	ldr	r2, [r7, #0]
 8006f7a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	689b      	ldr	r3, [r3, #8]
 8006f80:	2b40      	cmp	r3, #64	; 0x40
 8006f82:	d108      	bne.n	8006f96 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	687a      	ldr	r2, [r7, #4]
 8006f8a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	68ba      	ldr	r2, [r7, #8]
 8006f92:	60da      	str	r2, [r3, #12]
}
 8006f94:	e007      	b.n	8006fa6 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	68ba      	ldr	r2, [r7, #8]
 8006f9c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	687a      	ldr	r2, [r7, #4]
 8006fa4:	60da      	str	r2, [r3, #12]
}
 8006fa6:	bf00      	nop
 8006fa8:	371c      	adds	r7, #28
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr
 8006fb2:	bf00      	nop
 8006fb4:	58025408 	.word	0x58025408
 8006fb8:	5802541c 	.word	0x5802541c
 8006fbc:	58025430 	.word	0x58025430
 8006fc0:	58025444 	.word	0x58025444
 8006fc4:	58025458 	.word	0x58025458
 8006fc8:	5802546c 	.word	0x5802546c
 8006fcc:	58025480 	.word	0x58025480
 8006fd0:	58025494 	.word	0x58025494

08006fd4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b085      	sub	sp, #20
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a42      	ldr	r2, [pc, #264]	; (80070ec <DMA_CalcBaseAndBitshift+0x118>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d04a      	beq.n	800707c <DMA_CalcBaseAndBitshift+0xa8>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a41      	ldr	r2, [pc, #260]	; (80070f0 <DMA_CalcBaseAndBitshift+0x11c>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d045      	beq.n	800707c <DMA_CalcBaseAndBitshift+0xa8>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a3f      	ldr	r2, [pc, #252]	; (80070f4 <DMA_CalcBaseAndBitshift+0x120>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d040      	beq.n	800707c <DMA_CalcBaseAndBitshift+0xa8>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a3e      	ldr	r2, [pc, #248]	; (80070f8 <DMA_CalcBaseAndBitshift+0x124>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d03b      	beq.n	800707c <DMA_CalcBaseAndBitshift+0xa8>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a3c      	ldr	r2, [pc, #240]	; (80070fc <DMA_CalcBaseAndBitshift+0x128>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d036      	beq.n	800707c <DMA_CalcBaseAndBitshift+0xa8>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a3b      	ldr	r2, [pc, #236]	; (8007100 <DMA_CalcBaseAndBitshift+0x12c>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d031      	beq.n	800707c <DMA_CalcBaseAndBitshift+0xa8>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a39      	ldr	r2, [pc, #228]	; (8007104 <DMA_CalcBaseAndBitshift+0x130>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d02c      	beq.n	800707c <DMA_CalcBaseAndBitshift+0xa8>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a38      	ldr	r2, [pc, #224]	; (8007108 <DMA_CalcBaseAndBitshift+0x134>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d027      	beq.n	800707c <DMA_CalcBaseAndBitshift+0xa8>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a36      	ldr	r2, [pc, #216]	; (800710c <DMA_CalcBaseAndBitshift+0x138>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d022      	beq.n	800707c <DMA_CalcBaseAndBitshift+0xa8>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a35      	ldr	r2, [pc, #212]	; (8007110 <DMA_CalcBaseAndBitshift+0x13c>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d01d      	beq.n	800707c <DMA_CalcBaseAndBitshift+0xa8>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a33      	ldr	r2, [pc, #204]	; (8007114 <DMA_CalcBaseAndBitshift+0x140>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d018      	beq.n	800707c <DMA_CalcBaseAndBitshift+0xa8>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a32      	ldr	r2, [pc, #200]	; (8007118 <DMA_CalcBaseAndBitshift+0x144>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d013      	beq.n	800707c <DMA_CalcBaseAndBitshift+0xa8>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a30      	ldr	r2, [pc, #192]	; (800711c <DMA_CalcBaseAndBitshift+0x148>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d00e      	beq.n	800707c <DMA_CalcBaseAndBitshift+0xa8>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a2f      	ldr	r2, [pc, #188]	; (8007120 <DMA_CalcBaseAndBitshift+0x14c>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d009      	beq.n	800707c <DMA_CalcBaseAndBitshift+0xa8>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a2d      	ldr	r2, [pc, #180]	; (8007124 <DMA_CalcBaseAndBitshift+0x150>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d004      	beq.n	800707c <DMA_CalcBaseAndBitshift+0xa8>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a2c      	ldr	r2, [pc, #176]	; (8007128 <DMA_CalcBaseAndBitshift+0x154>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d101      	bne.n	8007080 <DMA_CalcBaseAndBitshift+0xac>
 800707c:	2301      	movs	r3, #1
 800707e:	e000      	b.n	8007082 <DMA_CalcBaseAndBitshift+0xae>
 8007080:	2300      	movs	r3, #0
 8007082:	2b00      	cmp	r3, #0
 8007084:	d024      	beq.n	80070d0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	b2db      	uxtb	r3, r3
 800708c:	3b10      	subs	r3, #16
 800708e:	4a27      	ldr	r2, [pc, #156]	; (800712c <DMA_CalcBaseAndBitshift+0x158>)
 8007090:	fba2 2303 	umull	r2, r3, r2, r3
 8007094:	091b      	lsrs	r3, r3, #4
 8007096:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f003 0307 	and.w	r3, r3, #7
 800709e:	4a24      	ldr	r2, [pc, #144]	; (8007130 <DMA_CalcBaseAndBitshift+0x15c>)
 80070a0:	5cd3      	ldrb	r3, [r2, r3]
 80070a2:	461a      	mov	r2, r3
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2b03      	cmp	r3, #3
 80070ac:	d908      	bls.n	80070c0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	461a      	mov	r2, r3
 80070b4:	4b1f      	ldr	r3, [pc, #124]	; (8007134 <DMA_CalcBaseAndBitshift+0x160>)
 80070b6:	4013      	ands	r3, r2
 80070b8:	1d1a      	adds	r2, r3, #4
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	659a      	str	r2, [r3, #88]	; 0x58
 80070be:	e00d      	b.n	80070dc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	461a      	mov	r2, r3
 80070c6:	4b1b      	ldr	r3, [pc, #108]	; (8007134 <DMA_CalcBaseAndBitshift+0x160>)
 80070c8:	4013      	ands	r3, r2
 80070ca:	687a      	ldr	r2, [r7, #4]
 80070cc:	6593      	str	r3, [r2, #88]	; 0x58
 80070ce:	e005      	b.n	80070dc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	3714      	adds	r7, #20
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr
 80070ec:	40020010 	.word	0x40020010
 80070f0:	40020028 	.word	0x40020028
 80070f4:	40020040 	.word	0x40020040
 80070f8:	40020058 	.word	0x40020058
 80070fc:	40020070 	.word	0x40020070
 8007100:	40020088 	.word	0x40020088
 8007104:	400200a0 	.word	0x400200a0
 8007108:	400200b8 	.word	0x400200b8
 800710c:	40020410 	.word	0x40020410
 8007110:	40020428 	.word	0x40020428
 8007114:	40020440 	.word	0x40020440
 8007118:	40020458 	.word	0x40020458
 800711c:	40020470 	.word	0x40020470
 8007120:	40020488 	.word	0x40020488
 8007124:	400204a0 	.word	0x400204a0
 8007128:	400204b8 	.word	0x400204b8
 800712c:	aaaaaaab 	.word	0xaaaaaaab
 8007130:	08014344 	.word	0x08014344
 8007134:	fffffc00 	.word	0xfffffc00

08007138 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007138:	b480      	push	{r7}
 800713a:	b085      	sub	sp, #20
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007140:	2300      	movs	r3, #0
 8007142:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	699b      	ldr	r3, [r3, #24]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d120      	bne.n	800718e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007150:	2b03      	cmp	r3, #3
 8007152:	d858      	bhi.n	8007206 <DMA_CheckFifoParam+0xce>
 8007154:	a201      	add	r2, pc, #4	; (adr r2, 800715c <DMA_CheckFifoParam+0x24>)
 8007156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800715a:	bf00      	nop
 800715c:	0800716d 	.word	0x0800716d
 8007160:	0800717f 	.word	0x0800717f
 8007164:	0800716d 	.word	0x0800716d
 8007168:	08007207 	.word	0x08007207
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007170:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007174:	2b00      	cmp	r3, #0
 8007176:	d048      	beq.n	800720a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007178:	2301      	movs	r3, #1
 800717a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800717c:	e045      	b.n	800720a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007182:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007186:	d142      	bne.n	800720e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007188:	2301      	movs	r3, #1
 800718a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800718c:	e03f      	b.n	800720e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	699b      	ldr	r3, [r3, #24]
 8007192:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007196:	d123      	bne.n	80071e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800719c:	2b03      	cmp	r3, #3
 800719e:	d838      	bhi.n	8007212 <DMA_CheckFifoParam+0xda>
 80071a0:	a201      	add	r2, pc, #4	; (adr r2, 80071a8 <DMA_CheckFifoParam+0x70>)
 80071a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071a6:	bf00      	nop
 80071a8:	080071b9 	.word	0x080071b9
 80071ac:	080071bf 	.word	0x080071bf
 80071b0:	080071b9 	.word	0x080071b9
 80071b4:	080071d1 	.word	0x080071d1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80071b8:	2301      	movs	r3, #1
 80071ba:	73fb      	strb	r3, [r7, #15]
        break;
 80071bc:	e030      	b.n	8007220 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d025      	beq.n	8007216 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80071ca:	2301      	movs	r3, #1
 80071cc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80071ce:	e022      	b.n	8007216 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071d4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80071d8:	d11f      	bne.n	800721a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80071da:	2301      	movs	r3, #1
 80071dc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80071de:	e01c      	b.n	800721a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071e4:	2b02      	cmp	r3, #2
 80071e6:	d902      	bls.n	80071ee <DMA_CheckFifoParam+0xb6>
 80071e8:	2b03      	cmp	r3, #3
 80071ea:	d003      	beq.n	80071f4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80071ec:	e018      	b.n	8007220 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80071ee:	2301      	movs	r3, #1
 80071f0:	73fb      	strb	r3, [r7, #15]
        break;
 80071f2:	e015      	b.n	8007220 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d00e      	beq.n	800721e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007200:	2301      	movs	r3, #1
 8007202:	73fb      	strb	r3, [r7, #15]
    break;
 8007204:	e00b      	b.n	800721e <DMA_CheckFifoParam+0xe6>
        break;
 8007206:	bf00      	nop
 8007208:	e00a      	b.n	8007220 <DMA_CheckFifoParam+0xe8>
        break;
 800720a:	bf00      	nop
 800720c:	e008      	b.n	8007220 <DMA_CheckFifoParam+0xe8>
        break;
 800720e:	bf00      	nop
 8007210:	e006      	b.n	8007220 <DMA_CheckFifoParam+0xe8>
        break;
 8007212:	bf00      	nop
 8007214:	e004      	b.n	8007220 <DMA_CheckFifoParam+0xe8>
        break;
 8007216:	bf00      	nop
 8007218:	e002      	b.n	8007220 <DMA_CheckFifoParam+0xe8>
        break;
 800721a:	bf00      	nop
 800721c:	e000      	b.n	8007220 <DMA_CheckFifoParam+0xe8>
    break;
 800721e:	bf00      	nop
    }
  }

  return status;
 8007220:	7bfb      	ldrb	r3, [r7, #15]
}
 8007222:	4618      	mov	r0, r3
 8007224:	3714      	adds	r7, #20
 8007226:	46bd      	mov	sp, r7
 8007228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722c:	4770      	bx	lr
 800722e:	bf00      	nop

08007230 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007230:	b480      	push	{r7}
 8007232:	b085      	sub	sp, #20
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a38      	ldr	r2, [pc, #224]	; (8007324 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d022      	beq.n	800728e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a36      	ldr	r2, [pc, #216]	; (8007328 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d01d      	beq.n	800728e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a35      	ldr	r2, [pc, #212]	; (800732c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d018      	beq.n	800728e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a33      	ldr	r2, [pc, #204]	; (8007330 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d013      	beq.n	800728e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a32      	ldr	r2, [pc, #200]	; (8007334 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d00e      	beq.n	800728e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a30      	ldr	r2, [pc, #192]	; (8007338 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d009      	beq.n	800728e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a2f      	ldr	r2, [pc, #188]	; (800733c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d004      	beq.n	800728e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a2d      	ldr	r2, [pc, #180]	; (8007340 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d101      	bne.n	8007292 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800728e:	2301      	movs	r3, #1
 8007290:	e000      	b.n	8007294 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007292:	2300      	movs	r3, #0
 8007294:	2b00      	cmp	r3, #0
 8007296:	d01a      	beq.n	80072ce <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	b2db      	uxtb	r3, r3
 800729e:	3b08      	subs	r3, #8
 80072a0:	4a28      	ldr	r2, [pc, #160]	; (8007344 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80072a2:	fba2 2303 	umull	r2, r3, r2, r3
 80072a6:	091b      	lsrs	r3, r3, #4
 80072a8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80072aa:	68fa      	ldr	r2, [r7, #12]
 80072ac:	4b26      	ldr	r3, [pc, #152]	; (8007348 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80072ae:	4413      	add	r3, r2
 80072b0:	009b      	lsls	r3, r3, #2
 80072b2:	461a      	mov	r2, r3
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	4a24      	ldr	r2, [pc, #144]	; (800734c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80072bc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	f003 031f 	and.w	r3, r3, #31
 80072c4:	2201      	movs	r2, #1
 80072c6:	409a      	lsls	r2, r3
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80072cc:	e024      	b.n	8007318 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	b2db      	uxtb	r3, r3
 80072d4:	3b10      	subs	r3, #16
 80072d6:	4a1e      	ldr	r2, [pc, #120]	; (8007350 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80072d8:	fba2 2303 	umull	r2, r3, r2, r3
 80072dc:	091b      	lsrs	r3, r3, #4
 80072de:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	4a1c      	ldr	r2, [pc, #112]	; (8007354 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d806      	bhi.n	80072f6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	4a1b      	ldr	r2, [pc, #108]	; (8007358 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d902      	bls.n	80072f6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	3308      	adds	r3, #8
 80072f4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80072f6:	68fa      	ldr	r2, [r7, #12]
 80072f8:	4b18      	ldr	r3, [pc, #96]	; (800735c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80072fa:	4413      	add	r3, r2
 80072fc:	009b      	lsls	r3, r3, #2
 80072fe:	461a      	mov	r2, r3
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	4a16      	ldr	r2, [pc, #88]	; (8007360 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007308:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	f003 031f 	and.w	r3, r3, #31
 8007310:	2201      	movs	r2, #1
 8007312:	409a      	lsls	r2, r3
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007318:	bf00      	nop
 800731a:	3714      	adds	r7, #20
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr
 8007324:	58025408 	.word	0x58025408
 8007328:	5802541c 	.word	0x5802541c
 800732c:	58025430 	.word	0x58025430
 8007330:	58025444 	.word	0x58025444
 8007334:	58025458 	.word	0x58025458
 8007338:	5802546c 	.word	0x5802546c
 800733c:	58025480 	.word	0x58025480
 8007340:	58025494 	.word	0x58025494
 8007344:	cccccccd 	.word	0xcccccccd
 8007348:	16009600 	.word	0x16009600
 800734c:	58025880 	.word	0x58025880
 8007350:	aaaaaaab 	.word	0xaaaaaaab
 8007354:	400204b8 	.word	0x400204b8
 8007358:	4002040f 	.word	0x4002040f
 800735c:	10008200 	.word	0x10008200
 8007360:	40020880 	.word	0x40020880

08007364 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007364:	b480      	push	{r7}
 8007366:	b085      	sub	sp, #20
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	b2db      	uxtb	r3, r3
 8007372:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d04a      	beq.n	8007410 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2b08      	cmp	r3, #8
 800737e:	d847      	bhi.n	8007410 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a25      	ldr	r2, [pc, #148]	; (800741c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d022      	beq.n	80073d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a24      	ldr	r2, [pc, #144]	; (8007420 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d01d      	beq.n	80073d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a22      	ldr	r2, [pc, #136]	; (8007424 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d018      	beq.n	80073d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a21      	ldr	r2, [pc, #132]	; (8007428 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d013      	beq.n	80073d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a1f      	ldr	r2, [pc, #124]	; (800742c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d00e      	beq.n	80073d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a1e      	ldr	r2, [pc, #120]	; (8007430 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d009      	beq.n	80073d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a1c      	ldr	r2, [pc, #112]	; (8007434 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d004      	beq.n	80073d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a1b      	ldr	r2, [pc, #108]	; (8007438 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d101      	bne.n	80073d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80073d0:	2301      	movs	r3, #1
 80073d2:	e000      	b.n	80073d6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80073d4:	2300      	movs	r3, #0
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d00a      	beq.n	80073f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80073da:	68fa      	ldr	r2, [r7, #12]
 80073dc:	4b17      	ldr	r3, [pc, #92]	; (800743c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80073de:	4413      	add	r3, r2
 80073e0:	009b      	lsls	r3, r3, #2
 80073e2:	461a      	mov	r2, r3
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	4a15      	ldr	r2, [pc, #84]	; (8007440 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80073ec:	671a      	str	r2, [r3, #112]	; 0x70
 80073ee:	e009      	b.n	8007404 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80073f0:	68fa      	ldr	r2, [r7, #12]
 80073f2:	4b14      	ldr	r3, [pc, #80]	; (8007444 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80073f4:	4413      	add	r3, r2
 80073f6:	009b      	lsls	r3, r3, #2
 80073f8:	461a      	mov	r2, r3
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	4a11      	ldr	r2, [pc, #68]	; (8007448 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007402:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	3b01      	subs	r3, #1
 8007408:	2201      	movs	r2, #1
 800740a:	409a      	lsls	r2, r3
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007410:	bf00      	nop
 8007412:	3714      	adds	r7, #20
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr
 800741c:	58025408 	.word	0x58025408
 8007420:	5802541c 	.word	0x5802541c
 8007424:	58025430 	.word	0x58025430
 8007428:	58025444 	.word	0x58025444
 800742c:	58025458 	.word	0x58025458
 8007430:	5802546c 	.word	0x5802546c
 8007434:	58025480 	.word	0x58025480
 8007438:	58025494 	.word	0x58025494
 800743c:	1600963f 	.word	0x1600963f
 8007440:	58025940 	.word	0x58025940
 8007444:	1000823f 	.word	0x1000823f
 8007448:	40020940 	.word	0x40020940

0800744c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800744c:	b480      	push	{r7}
 800744e:	b089      	sub	sp, #36	; 0x24
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
 8007454:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007456:	2300      	movs	r3, #0
 8007458:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800745a:	4b89      	ldr	r3, [pc, #548]	; (8007680 <HAL_GPIO_Init+0x234>)
 800745c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800745e:	e194      	b.n	800778a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	2101      	movs	r1, #1
 8007466:	69fb      	ldr	r3, [r7, #28]
 8007468:	fa01 f303 	lsl.w	r3, r1, r3
 800746c:	4013      	ands	r3, r2
 800746e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	2b00      	cmp	r3, #0
 8007474:	f000 8186 	beq.w	8007784 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	685b      	ldr	r3, [r3, #4]
 800747c:	f003 0303 	and.w	r3, r3, #3
 8007480:	2b01      	cmp	r3, #1
 8007482:	d005      	beq.n	8007490 <HAL_GPIO_Init+0x44>
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	f003 0303 	and.w	r3, r3, #3
 800748c:	2b02      	cmp	r3, #2
 800748e:	d130      	bne.n	80074f2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	689b      	ldr	r3, [r3, #8]
 8007494:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007496:	69fb      	ldr	r3, [r7, #28]
 8007498:	005b      	lsls	r3, r3, #1
 800749a:	2203      	movs	r2, #3
 800749c:	fa02 f303 	lsl.w	r3, r2, r3
 80074a0:	43db      	mvns	r3, r3
 80074a2:	69ba      	ldr	r2, [r7, #24]
 80074a4:	4013      	ands	r3, r2
 80074a6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	68da      	ldr	r2, [r3, #12]
 80074ac:	69fb      	ldr	r3, [r7, #28]
 80074ae:	005b      	lsls	r3, r3, #1
 80074b0:	fa02 f303 	lsl.w	r3, r2, r3
 80074b4:	69ba      	ldr	r2, [r7, #24]
 80074b6:	4313      	orrs	r3, r2
 80074b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	69ba      	ldr	r2, [r7, #24]
 80074be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80074c6:	2201      	movs	r2, #1
 80074c8:	69fb      	ldr	r3, [r7, #28]
 80074ca:	fa02 f303 	lsl.w	r3, r2, r3
 80074ce:	43db      	mvns	r3, r3
 80074d0:	69ba      	ldr	r2, [r7, #24]
 80074d2:	4013      	ands	r3, r2
 80074d4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	091b      	lsrs	r3, r3, #4
 80074dc:	f003 0201 	and.w	r2, r3, #1
 80074e0:	69fb      	ldr	r3, [r7, #28]
 80074e2:	fa02 f303 	lsl.w	r3, r2, r3
 80074e6:	69ba      	ldr	r2, [r7, #24]
 80074e8:	4313      	orrs	r3, r2
 80074ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	69ba      	ldr	r2, [r7, #24]
 80074f0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	f003 0303 	and.w	r3, r3, #3
 80074fa:	2b03      	cmp	r3, #3
 80074fc:	d017      	beq.n	800752e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	68db      	ldr	r3, [r3, #12]
 8007502:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007504:	69fb      	ldr	r3, [r7, #28]
 8007506:	005b      	lsls	r3, r3, #1
 8007508:	2203      	movs	r2, #3
 800750a:	fa02 f303 	lsl.w	r3, r2, r3
 800750e:	43db      	mvns	r3, r3
 8007510:	69ba      	ldr	r2, [r7, #24]
 8007512:	4013      	ands	r3, r2
 8007514:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	689a      	ldr	r2, [r3, #8]
 800751a:	69fb      	ldr	r3, [r7, #28]
 800751c:	005b      	lsls	r3, r3, #1
 800751e:	fa02 f303 	lsl.w	r3, r2, r3
 8007522:	69ba      	ldr	r2, [r7, #24]
 8007524:	4313      	orrs	r3, r2
 8007526:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	69ba      	ldr	r2, [r7, #24]
 800752c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	f003 0303 	and.w	r3, r3, #3
 8007536:	2b02      	cmp	r3, #2
 8007538:	d123      	bne.n	8007582 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800753a:	69fb      	ldr	r3, [r7, #28]
 800753c:	08da      	lsrs	r2, r3, #3
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	3208      	adds	r2, #8
 8007542:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007546:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007548:	69fb      	ldr	r3, [r7, #28]
 800754a:	f003 0307 	and.w	r3, r3, #7
 800754e:	009b      	lsls	r3, r3, #2
 8007550:	220f      	movs	r2, #15
 8007552:	fa02 f303 	lsl.w	r3, r2, r3
 8007556:	43db      	mvns	r3, r3
 8007558:	69ba      	ldr	r2, [r7, #24]
 800755a:	4013      	ands	r3, r2
 800755c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	691a      	ldr	r2, [r3, #16]
 8007562:	69fb      	ldr	r3, [r7, #28]
 8007564:	f003 0307 	and.w	r3, r3, #7
 8007568:	009b      	lsls	r3, r3, #2
 800756a:	fa02 f303 	lsl.w	r3, r2, r3
 800756e:	69ba      	ldr	r2, [r7, #24]
 8007570:	4313      	orrs	r3, r2
 8007572:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007574:	69fb      	ldr	r3, [r7, #28]
 8007576:	08da      	lsrs	r2, r3, #3
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	3208      	adds	r2, #8
 800757c:	69b9      	ldr	r1, [r7, #24]
 800757e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007588:	69fb      	ldr	r3, [r7, #28]
 800758a:	005b      	lsls	r3, r3, #1
 800758c:	2203      	movs	r2, #3
 800758e:	fa02 f303 	lsl.w	r3, r2, r3
 8007592:	43db      	mvns	r3, r3
 8007594:	69ba      	ldr	r2, [r7, #24]
 8007596:	4013      	ands	r3, r2
 8007598:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	f003 0203 	and.w	r2, r3, #3
 80075a2:	69fb      	ldr	r3, [r7, #28]
 80075a4:	005b      	lsls	r3, r3, #1
 80075a6:	fa02 f303 	lsl.w	r3, r2, r3
 80075aa:	69ba      	ldr	r2, [r7, #24]
 80075ac:	4313      	orrs	r3, r2
 80075ae:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	69ba      	ldr	r2, [r7, #24]
 80075b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	685b      	ldr	r3, [r3, #4]
 80075ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80075be:	2b00      	cmp	r3, #0
 80075c0:	f000 80e0 	beq.w	8007784 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80075c4:	4b2f      	ldr	r3, [pc, #188]	; (8007684 <HAL_GPIO_Init+0x238>)
 80075c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80075ca:	4a2e      	ldr	r2, [pc, #184]	; (8007684 <HAL_GPIO_Init+0x238>)
 80075cc:	f043 0302 	orr.w	r3, r3, #2
 80075d0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80075d4:	4b2b      	ldr	r3, [pc, #172]	; (8007684 <HAL_GPIO_Init+0x238>)
 80075d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80075da:	f003 0302 	and.w	r3, r3, #2
 80075de:	60fb      	str	r3, [r7, #12]
 80075e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80075e2:	4a29      	ldr	r2, [pc, #164]	; (8007688 <HAL_GPIO_Init+0x23c>)
 80075e4:	69fb      	ldr	r3, [r7, #28]
 80075e6:	089b      	lsrs	r3, r3, #2
 80075e8:	3302      	adds	r3, #2
 80075ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80075f0:	69fb      	ldr	r3, [r7, #28]
 80075f2:	f003 0303 	and.w	r3, r3, #3
 80075f6:	009b      	lsls	r3, r3, #2
 80075f8:	220f      	movs	r2, #15
 80075fa:	fa02 f303 	lsl.w	r3, r2, r3
 80075fe:	43db      	mvns	r3, r3
 8007600:	69ba      	ldr	r2, [r7, #24]
 8007602:	4013      	ands	r3, r2
 8007604:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	4a20      	ldr	r2, [pc, #128]	; (800768c <HAL_GPIO_Init+0x240>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d052      	beq.n	80076b4 <HAL_GPIO_Init+0x268>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	4a1f      	ldr	r2, [pc, #124]	; (8007690 <HAL_GPIO_Init+0x244>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d031      	beq.n	800767a <HAL_GPIO_Init+0x22e>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	4a1e      	ldr	r2, [pc, #120]	; (8007694 <HAL_GPIO_Init+0x248>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d02b      	beq.n	8007676 <HAL_GPIO_Init+0x22a>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	4a1d      	ldr	r2, [pc, #116]	; (8007698 <HAL_GPIO_Init+0x24c>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d025      	beq.n	8007672 <HAL_GPIO_Init+0x226>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	4a1c      	ldr	r2, [pc, #112]	; (800769c <HAL_GPIO_Init+0x250>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d01f      	beq.n	800766e <HAL_GPIO_Init+0x222>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	4a1b      	ldr	r2, [pc, #108]	; (80076a0 <HAL_GPIO_Init+0x254>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d019      	beq.n	800766a <HAL_GPIO_Init+0x21e>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	4a1a      	ldr	r2, [pc, #104]	; (80076a4 <HAL_GPIO_Init+0x258>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d013      	beq.n	8007666 <HAL_GPIO_Init+0x21a>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	4a19      	ldr	r2, [pc, #100]	; (80076a8 <HAL_GPIO_Init+0x25c>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d00d      	beq.n	8007662 <HAL_GPIO_Init+0x216>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	4a18      	ldr	r2, [pc, #96]	; (80076ac <HAL_GPIO_Init+0x260>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d007      	beq.n	800765e <HAL_GPIO_Init+0x212>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	4a17      	ldr	r2, [pc, #92]	; (80076b0 <HAL_GPIO_Init+0x264>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d101      	bne.n	800765a <HAL_GPIO_Init+0x20e>
 8007656:	2309      	movs	r3, #9
 8007658:	e02d      	b.n	80076b6 <HAL_GPIO_Init+0x26a>
 800765a:	230a      	movs	r3, #10
 800765c:	e02b      	b.n	80076b6 <HAL_GPIO_Init+0x26a>
 800765e:	2308      	movs	r3, #8
 8007660:	e029      	b.n	80076b6 <HAL_GPIO_Init+0x26a>
 8007662:	2307      	movs	r3, #7
 8007664:	e027      	b.n	80076b6 <HAL_GPIO_Init+0x26a>
 8007666:	2306      	movs	r3, #6
 8007668:	e025      	b.n	80076b6 <HAL_GPIO_Init+0x26a>
 800766a:	2305      	movs	r3, #5
 800766c:	e023      	b.n	80076b6 <HAL_GPIO_Init+0x26a>
 800766e:	2304      	movs	r3, #4
 8007670:	e021      	b.n	80076b6 <HAL_GPIO_Init+0x26a>
 8007672:	2303      	movs	r3, #3
 8007674:	e01f      	b.n	80076b6 <HAL_GPIO_Init+0x26a>
 8007676:	2302      	movs	r3, #2
 8007678:	e01d      	b.n	80076b6 <HAL_GPIO_Init+0x26a>
 800767a:	2301      	movs	r3, #1
 800767c:	e01b      	b.n	80076b6 <HAL_GPIO_Init+0x26a>
 800767e:	bf00      	nop
 8007680:	58000080 	.word	0x58000080
 8007684:	58024400 	.word	0x58024400
 8007688:	58000400 	.word	0x58000400
 800768c:	58020000 	.word	0x58020000
 8007690:	58020400 	.word	0x58020400
 8007694:	58020800 	.word	0x58020800
 8007698:	58020c00 	.word	0x58020c00
 800769c:	58021000 	.word	0x58021000
 80076a0:	58021400 	.word	0x58021400
 80076a4:	58021800 	.word	0x58021800
 80076a8:	58021c00 	.word	0x58021c00
 80076ac:	58022000 	.word	0x58022000
 80076b0:	58022400 	.word	0x58022400
 80076b4:	2300      	movs	r3, #0
 80076b6:	69fa      	ldr	r2, [r7, #28]
 80076b8:	f002 0203 	and.w	r2, r2, #3
 80076bc:	0092      	lsls	r2, r2, #2
 80076be:	4093      	lsls	r3, r2
 80076c0:	69ba      	ldr	r2, [r7, #24]
 80076c2:	4313      	orrs	r3, r2
 80076c4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80076c6:	4938      	ldr	r1, [pc, #224]	; (80077a8 <HAL_GPIO_Init+0x35c>)
 80076c8:	69fb      	ldr	r3, [r7, #28]
 80076ca:	089b      	lsrs	r3, r3, #2
 80076cc:	3302      	adds	r3, #2
 80076ce:	69ba      	ldr	r2, [r7, #24]
 80076d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80076d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	43db      	mvns	r3, r3
 80076e0:	69ba      	ldr	r2, [r7, #24]
 80076e2:	4013      	ands	r3, r2
 80076e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d003      	beq.n	80076fa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80076f2:	69ba      	ldr	r2, [r7, #24]
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	4313      	orrs	r3, r2
 80076f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80076fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80076fe:	69bb      	ldr	r3, [r7, #24]
 8007700:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007702:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	43db      	mvns	r3, r3
 800770e:	69ba      	ldr	r2, [r7, #24]
 8007710:	4013      	ands	r3, r2
 8007712:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800771c:	2b00      	cmp	r3, #0
 800771e:	d003      	beq.n	8007728 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007720:	69ba      	ldr	r2, [r7, #24]
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	4313      	orrs	r3, r2
 8007726:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007728:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800772c:	69bb      	ldr	r3, [r7, #24]
 800772e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	43db      	mvns	r3, r3
 800773a:	69ba      	ldr	r2, [r7, #24]
 800773c:	4013      	ands	r3, r2
 800773e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007748:	2b00      	cmp	r3, #0
 800774a:	d003      	beq.n	8007754 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800774c:	69ba      	ldr	r2, [r7, #24]
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	4313      	orrs	r3, r2
 8007752:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	69ba      	ldr	r2, [r7, #24]
 8007758:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	43db      	mvns	r3, r3
 8007764:	69ba      	ldr	r2, [r7, #24]
 8007766:	4013      	ands	r3, r2
 8007768:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	685b      	ldr	r3, [r3, #4]
 800776e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007772:	2b00      	cmp	r3, #0
 8007774:	d003      	beq.n	800777e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007776:	69ba      	ldr	r2, [r7, #24]
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	4313      	orrs	r3, r2
 800777c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	69ba      	ldr	r2, [r7, #24]
 8007782:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007784:	69fb      	ldr	r3, [r7, #28]
 8007786:	3301      	adds	r3, #1
 8007788:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	681a      	ldr	r2, [r3, #0]
 800778e:	69fb      	ldr	r3, [r7, #28]
 8007790:	fa22 f303 	lsr.w	r3, r2, r3
 8007794:	2b00      	cmp	r3, #0
 8007796:	f47f ae63 	bne.w	8007460 <HAL_GPIO_Init+0x14>
  }
}
 800779a:	bf00      	nop
 800779c:	bf00      	nop
 800779e:	3724      	adds	r7, #36	; 0x24
 80077a0:	46bd      	mov	sp, r7
 80077a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a6:	4770      	bx	lr
 80077a8:	58000400 	.word	0x58000400

080077ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b083      	sub	sp, #12
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	460b      	mov	r3, r1
 80077b6:	807b      	strh	r3, [r7, #2]
 80077b8:	4613      	mov	r3, r2
 80077ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80077bc:	787b      	ldrb	r3, [r7, #1]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d003      	beq.n	80077ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80077c2:	887a      	ldrh	r2, [r7, #2]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80077c8:	e003      	b.n	80077d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80077ca:	887b      	ldrh	r3, [r7, #2]
 80077cc:	041a      	lsls	r2, r3, #16
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	619a      	str	r2, [r3, #24]
}
 80077d2:	bf00      	nop
 80077d4:	370c      	adds	r7, #12
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr
	...

080077e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b082      	sub	sp, #8
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d101      	bne.n	80077f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80077ee:	2301      	movs	r3, #1
 80077f0:	e08b      	b.n	800790a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077f8:	b2db      	uxtb	r3, r3
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d106      	bne.n	800780c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2200      	movs	r2, #0
 8007802:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f7fa fc08 	bl	800201c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2224      	movs	r2, #36	; 0x24
 8007810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	681a      	ldr	r2, [r3, #0]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f022 0201 	bic.w	r2, r2, #1
 8007822:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	685a      	ldr	r2, [r3, #4]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007830:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	689a      	ldr	r2, [r3, #8]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007840:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	68db      	ldr	r3, [r3, #12]
 8007846:	2b01      	cmp	r3, #1
 8007848:	d107      	bne.n	800785a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	689a      	ldr	r2, [r3, #8]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007856:	609a      	str	r2, [r3, #8]
 8007858:	e006      	b.n	8007868 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	689a      	ldr	r2, [r3, #8]
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007866:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	68db      	ldr	r3, [r3, #12]
 800786c:	2b02      	cmp	r3, #2
 800786e:	d108      	bne.n	8007882 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	685a      	ldr	r2, [r3, #4]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800787e:	605a      	str	r2, [r3, #4]
 8007880:	e007      	b.n	8007892 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	685a      	ldr	r2, [r3, #4]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007890:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	6859      	ldr	r1, [r3, #4]
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681a      	ldr	r2, [r3, #0]
 800789c:	4b1d      	ldr	r3, [pc, #116]	; (8007914 <HAL_I2C_Init+0x134>)
 800789e:	430b      	orrs	r3, r1
 80078a0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	68da      	ldr	r2, [r3, #12]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80078b0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	691a      	ldr	r2, [r3, #16]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	695b      	ldr	r3, [r3, #20]
 80078ba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	699b      	ldr	r3, [r3, #24]
 80078c2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	430a      	orrs	r2, r1
 80078ca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	69d9      	ldr	r1, [r3, #28]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6a1a      	ldr	r2, [r3, #32]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	430a      	orrs	r2, r1
 80078da:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	681a      	ldr	r2, [r3, #0]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f042 0201 	orr.w	r2, r2, #1
 80078ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2200      	movs	r2, #0
 80078f0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2220      	movs	r2, #32
 80078f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2200      	movs	r2, #0
 80078fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2200      	movs	r2, #0
 8007904:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007908:	2300      	movs	r3, #0
}
 800790a:	4618      	mov	r0, r3
 800790c:	3708      	adds	r7, #8
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}
 8007912:	bf00      	nop
 8007914:	02008000 	.word	0x02008000

08007918 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007918:	b480      	push	{r7}
 800791a:	b083      	sub	sp, #12
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
 8007920:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007928:	b2db      	uxtb	r3, r3
 800792a:	2b20      	cmp	r3, #32
 800792c:	d138      	bne.n	80079a0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007934:	2b01      	cmp	r3, #1
 8007936:	d101      	bne.n	800793c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007938:	2302      	movs	r3, #2
 800793a:	e032      	b.n	80079a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2201      	movs	r2, #1
 8007940:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2224      	movs	r2, #36	; 0x24
 8007948:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	681a      	ldr	r2, [r3, #0]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f022 0201 	bic.w	r2, r2, #1
 800795a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	681a      	ldr	r2, [r3, #0]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800796a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	6819      	ldr	r1, [r3, #0]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	683a      	ldr	r2, [r7, #0]
 8007978:	430a      	orrs	r2, r1
 800797a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	681a      	ldr	r2, [r3, #0]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f042 0201 	orr.w	r2, r2, #1
 800798a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2220      	movs	r2, #32
 8007990:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2200      	movs	r2, #0
 8007998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800799c:	2300      	movs	r3, #0
 800799e:	e000      	b.n	80079a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80079a0:	2302      	movs	r3, #2
  }
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	370c      	adds	r7, #12
 80079a6:	46bd      	mov	sp, r7
 80079a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ac:	4770      	bx	lr

080079ae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80079ae:	b480      	push	{r7}
 80079b0:	b085      	sub	sp, #20
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	6078      	str	r0, [r7, #4]
 80079b6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80079be:	b2db      	uxtb	r3, r3
 80079c0:	2b20      	cmp	r3, #32
 80079c2:	d139      	bne.n	8007a38 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80079ca:	2b01      	cmp	r3, #1
 80079cc:	d101      	bne.n	80079d2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80079ce:	2302      	movs	r3, #2
 80079d0:	e033      	b.n	8007a3a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2201      	movs	r2, #1
 80079d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2224      	movs	r2, #36	; 0x24
 80079de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	681a      	ldr	r2, [r3, #0]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f022 0201 	bic.w	r2, r2, #1
 80079f0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007a00:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	021b      	lsls	r3, r3, #8
 8007a06:	68fa      	ldr	r2, [r7, #12]
 8007a08:	4313      	orrs	r3, r2
 8007a0a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	68fa      	ldr	r2, [r7, #12]
 8007a12:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	681a      	ldr	r2, [r3, #0]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f042 0201 	orr.w	r2, r2, #1
 8007a22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2220      	movs	r2, #32
 8007a28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007a34:	2300      	movs	r3, #0
 8007a36:	e000      	b.n	8007a3a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007a38:	2302      	movs	r3, #2
  }
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3714      	adds	r7, #20
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a44:	4770      	bx	lr
	...

08007a48 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b084      	sub	sp, #16
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007a50:	4b19      	ldr	r3, [pc, #100]	; (8007ab8 <HAL_PWREx_ConfigSupply+0x70>)
 8007a52:	68db      	ldr	r3, [r3, #12]
 8007a54:	f003 0304 	and.w	r3, r3, #4
 8007a58:	2b04      	cmp	r3, #4
 8007a5a:	d00a      	beq.n	8007a72 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007a5c:	4b16      	ldr	r3, [pc, #88]	; (8007ab8 <HAL_PWREx_ConfigSupply+0x70>)
 8007a5e:	68db      	ldr	r3, [r3, #12]
 8007a60:	f003 0307 	and.w	r3, r3, #7
 8007a64:	687a      	ldr	r2, [r7, #4]
 8007a66:	429a      	cmp	r2, r3
 8007a68:	d001      	beq.n	8007a6e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	e01f      	b.n	8007aae <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	e01d      	b.n	8007aae <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007a72:	4b11      	ldr	r3, [pc, #68]	; (8007ab8 <HAL_PWREx_ConfigSupply+0x70>)
 8007a74:	68db      	ldr	r3, [r3, #12]
 8007a76:	f023 0207 	bic.w	r2, r3, #7
 8007a7a:	490f      	ldr	r1, [pc, #60]	; (8007ab8 <HAL_PWREx_ConfigSupply+0x70>)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007a82:	f7fa ffb7 	bl	80029f4 <HAL_GetTick>
 8007a86:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007a88:	e009      	b.n	8007a9e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007a8a:	f7fa ffb3 	bl	80029f4 <HAL_GetTick>
 8007a8e:	4602      	mov	r2, r0
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	1ad3      	subs	r3, r2, r3
 8007a94:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007a98:	d901      	bls.n	8007a9e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	e007      	b.n	8007aae <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007a9e:	4b06      	ldr	r3, [pc, #24]	; (8007ab8 <HAL_PWREx_ConfigSupply+0x70>)
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007aa6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007aaa:	d1ee      	bne.n	8007a8a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007aac:	2300      	movs	r3, #0
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3710      	adds	r7, #16
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}
 8007ab6:	bf00      	nop
 8007ab8:	58024800 	.word	0x58024800

08007abc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b08c      	sub	sp, #48	; 0x30
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d102      	bne.n	8007ad0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007aca:	2301      	movs	r3, #1
 8007acc:	f000 bc48 	b.w	8008360 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f003 0301 	and.w	r3, r3, #1
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	f000 8088 	beq.w	8007bee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007ade:	4b99      	ldr	r3, [pc, #612]	; (8007d44 <HAL_RCC_OscConfig+0x288>)
 8007ae0:	691b      	ldr	r3, [r3, #16]
 8007ae2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007ae8:	4b96      	ldr	r3, [pc, #600]	; (8007d44 <HAL_RCC_OscConfig+0x288>)
 8007aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aec:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007af0:	2b10      	cmp	r3, #16
 8007af2:	d007      	beq.n	8007b04 <HAL_RCC_OscConfig+0x48>
 8007af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007af6:	2b18      	cmp	r3, #24
 8007af8:	d111      	bne.n	8007b1e <HAL_RCC_OscConfig+0x62>
 8007afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007afc:	f003 0303 	and.w	r3, r3, #3
 8007b00:	2b02      	cmp	r3, #2
 8007b02:	d10c      	bne.n	8007b1e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b04:	4b8f      	ldr	r3, [pc, #572]	; (8007d44 <HAL_RCC_OscConfig+0x288>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d06d      	beq.n	8007bec <HAL_RCC_OscConfig+0x130>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d169      	bne.n	8007bec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007b18:	2301      	movs	r3, #1
 8007b1a:	f000 bc21 	b.w	8008360 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b26:	d106      	bne.n	8007b36 <HAL_RCC_OscConfig+0x7a>
 8007b28:	4b86      	ldr	r3, [pc, #536]	; (8007d44 <HAL_RCC_OscConfig+0x288>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4a85      	ldr	r2, [pc, #532]	; (8007d44 <HAL_RCC_OscConfig+0x288>)
 8007b2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b32:	6013      	str	r3, [r2, #0]
 8007b34:	e02e      	b.n	8007b94 <HAL_RCC_OscConfig+0xd8>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	685b      	ldr	r3, [r3, #4]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d10c      	bne.n	8007b58 <HAL_RCC_OscConfig+0x9c>
 8007b3e:	4b81      	ldr	r3, [pc, #516]	; (8007d44 <HAL_RCC_OscConfig+0x288>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	4a80      	ldr	r2, [pc, #512]	; (8007d44 <HAL_RCC_OscConfig+0x288>)
 8007b44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b48:	6013      	str	r3, [r2, #0]
 8007b4a:	4b7e      	ldr	r3, [pc, #504]	; (8007d44 <HAL_RCC_OscConfig+0x288>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a7d      	ldr	r2, [pc, #500]	; (8007d44 <HAL_RCC_OscConfig+0x288>)
 8007b50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007b54:	6013      	str	r3, [r2, #0]
 8007b56:	e01d      	b.n	8007b94 <HAL_RCC_OscConfig+0xd8>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007b60:	d10c      	bne.n	8007b7c <HAL_RCC_OscConfig+0xc0>
 8007b62:	4b78      	ldr	r3, [pc, #480]	; (8007d44 <HAL_RCC_OscConfig+0x288>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4a77      	ldr	r2, [pc, #476]	; (8007d44 <HAL_RCC_OscConfig+0x288>)
 8007b68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007b6c:	6013      	str	r3, [r2, #0]
 8007b6e:	4b75      	ldr	r3, [pc, #468]	; (8007d44 <HAL_RCC_OscConfig+0x288>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4a74      	ldr	r2, [pc, #464]	; (8007d44 <HAL_RCC_OscConfig+0x288>)
 8007b74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b78:	6013      	str	r3, [r2, #0]
 8007b7a:	e00b      	b.n	8007b94 <HAL_RCC_OscConfig+0xd8>
 8007b7c:	4b71      	ldr	r3, [pc, #452]	; (8007d44 <HAL_RCC_OscConfig+0x288>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a70      	ldr	r2, [pc, #448]	; (8007d44 <HAL_RCC_OscConfig+0x288>)
 8007b82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b86:	6013      	str	r3, [r2, #0]
 8007b88:	4b6e      	ldr	r3, [pc, #440]	; (8007d44 <HAL_RCC_OscConfig+0x288>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4a6d      	ldr	r2, [pc, #436]	; (8007d44 <HAL_RCC_OscConfig+0x288>)
 8007b8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007b92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	685b      	ldr	r3, [r3, #4]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d013      	beq.n	8007bc4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b9c:	f7fa ff2a 	bl	80029f4 <HAL_GetTick>
 8007ba0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007ba2:	e008      	b.n	8007bb6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007ba4:	f7fa ff26 	bl	80029f4 <HAL_GetTick>
 8007ba8:	4602      	mov	r2, r0
 8007baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bac:	1ad3      	subs	r3, r2, r3
 8007bae:	2b64      	cmp	r3, #100	; 0x64
 8007bb0:	d901      	bls.n	8007bb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007bb2:	2303      	movs	r3, #3
 8007bb4:	e3d4      	b.n	8008360 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007bb6:	4b63      	ldr	r3, [pc, #396]	; (8007d44 <HAL_RCC_OscConfig+0x288>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d0f0      	beq.n	8007ba4 <HAL_RCC_OscConfig+0xe8>
 8007bc2:	e014      	b.n	8007bee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bc4:	f7fa ff16 	bl	80029f4 <HAL_GetTick>
 8007bc8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007bca:	e008      	b.n	8007bde <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007bcc:	f7fa ff12 	bl	80029f4 <HAL_GetTick>
 8007bd0:	4602      	mov	r2, r0
 8007bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd4:	1ad3      	subs	r3, r2, r3
 8007bd6:	2b64      	cmp	r3, #100	; 0x64
 8007bd8:	d901      	bls.n	8007bde <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007bda:	2303      	movs	r3, #3
 8007bdc:	e3c0      	b.n	8008360 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007bde:	4b59      	ldr	r3, [pc, #356]	; (8007d44 <HAL_RCC_OscConfig+0x288>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d1f0      	bne.n	8007bcc <HAL_RCC_OscConfig+0x110>
 8007bea:	e000      	b.n	8007bee <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007bec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f003 0302 	and.w	r3, r3, #2
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	f000 80ca 	beq.w	8007d90 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007bfc:	4b51      	ldr	r3, [pc, #324]	; (8007d44 <HAL_RCC_OscConfig+0x288>)
 8007bfe:	691b      	ldr	r3, [r3, #16]
 8007c00:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007c04:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007c06:	4b4f      	ldr	r3, [pc, #316]	; (8007d44 <HAL_RCC_OscConfig+0x288>)
 8007c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c0a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007c0c:	6a3b      	ldr	r3, [r7, #32]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d007      	beq.n	8007c22 <HAL_RCC_OscConfig+0x166>
 8007c12:	6a3b      	ldr	r3, [r7, #32]
 8007c14:	2b18      	cmp	r3, #24
 8007c16:	d156      	bne.n	8007cc6 <HAL_RCC_OscConfig+0x20a>
 8007c18:	69fb      	ldr	r3, [r7, #28]
 8007c1a:	f003 0303 	and.w	r3, r3, #3
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d151      	bne.n	8007cc6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007c22:	4b48      	ldr	r3, [pc, #288]	; (8007d44 <HAL_RCC_OscConfig+0x288>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f003 0304 	and.w	r3, r3, #4
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d005      	beq.n	8007c3a <HAL_RCC_OscConfig+0x17e>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	68db      	ldr	r3, [r3, #12]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d101      	bne.n	8007c3a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8007c36:	2301      	movs	r3, #1
 8007c38:	e392      	b.n	8008360 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007c3a:	4b42      	ldr	r3, [pc, #264]	; (8007d44 <HAL_RCC_OscConfig+0x288>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f023 0219 	bic.w	r2, r3, #25
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	68db      	ldr	r3, [r3, #12]
 8007c46:	493f      	ldr	r1, [pc, #252]	; (8007d44 <HAL_RCC_OscConfig+0x288>)
 8007c48:	4313      	orrs	r3, r2
 8007c4a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c4c:	f7fa fed2 	bl	80029f4 <HAL_GetTick>
 8007c50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007c52:	e008      	b.n	8007c66 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007c54:	f7fa fece 	bl	80029f4 <HAL_GetTick>
 8007c58:	4602      	mov	r2, r0
 8007c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c5c:	1ad3      	subs	r3, r2, r3
 8007c5e:	2b02      	cmp	r3, #2
 8007c60:	d901      	bls.n	8007c66 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007c62:	2303      	movs	r3, #3
 8007c64:	e37c      	b.n	8008360 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007c66:	4b37      	ldr	r3, [pc, #220]	; (8007d44 <HAL_RCC_OscConfig+0x288>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f003 0304 	and.w	r3, r3, #4
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d0f0      	beq.n	8007c54 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c72:	f7fa fecb 	bl	8002a0c <HAL_GetREVID>
 8007c76:	4603      	mov	r3, r0
 8007c78:	f241 0203 	movw	r2, #4099	; 0x1003
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d817      	bhi.n	8007cb0 <HAL_RCC_OscConfig+0x1f4>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	691b      	ldr	r3, [r3, #16]
 8007c84:	2b40      	cmp	r3, #64	; 0x40
 8007c86:	d108      	bne.n	8007c9a <HAL_RCC_OscConfig+0x1de>
 8007c88:	4b2e      	ldr	r3, [pc, #184]	; (8007d44 <HAL_RCC_OscConfig+0x288>)
 8007c8a:	685b      	ldr	r3, [r3, #4]
 8007c8c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007c90:	4a2c      	ldr	r2, [pc, #176]	; (8007d44 <HAL_RCC_OscConfig+0x288>)
 8007c92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c96:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007c98:	e07a      	b.n	8007d90 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c9a:	4b2a      	ldr	r3, [pc, #168]	; (8007d44 <HAL_RCC_OscConfig+0x288>)
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	691b      	ldr	r3, [r3, #16]
 8007ca6:	031b      	lsls	r3, r3, #12
 8007ca8:	4926      	ldr	r1, [pc, #152]	; (8007d44 <HAL_RCC_OscConfig+0x288>)
 8007caa:	4313      	orrs	r3, r2
 8007cac:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007cae:	e06f      	b.n	8007d90 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007cb0:	4b24      	ldr	r3, [pc, #144]	; (8007d44 <HAL_RCC_OscConfig+0x288>)
 8007cb2:	685b      	ldr	r3, [r3, #4]
 8007cb4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	691b      	ldr	r3, [r3, #16]
 8007cbc:	061b      	lsls	r3, r3, #24
 8007cbe:	4921      	ldr	r1, [pc, #132]	; (8007d44 <HAL_RCC_OscConfig+0x288>)
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007cc4:	e064      	b.n	8007d90 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	68db      	ldr	r3, [r3, #12]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d047      	beq.n	8007d5e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007cce:	4b1d      	ldr	r3, [pc, #116]	; (8007d44 <HAL_RCC_OscConfig+0x288>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f023 0219 	bic.w	r2, r3, #25
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	68db      	ldr	r3, [r3, #12]
 8007cda:	491a      	ldr	r1, [pc, #104]	; (8007d44 <HAL_RCC_OscConfig+0x288>)
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ce0:	f7fa fe88 	bl	80029f4 <HAL_GetTick>
 8007ce4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007ce6:	e008      	b.n	8007cfa <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007ce8:	f7fa fe84 	bl	80029f4 <HAL_GetTick>
 8007cec:	4602      	mov	r2, r0
 8007cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf0:	1ad3      	subs	r3, r2, r3
 8007cf2:	2b02      	cmp	r3, #2
 8007cf4:	d901      	bls.n	8007cfa <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8007cf6:	2303      	movs	r3, #3
 8007cf8:	e332      	b.n	8008360 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007cfa:	4b12      	ldr	r3, [pc, #72]	; (8007d44 <HAL_RCC_OscConfig+0x288>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f003 0304 	and.w	r3, r3, #4
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d0f0      	beq.n	8007ce8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d06:	f7fa fe81 	bl	8002a0c <HAL_GetREVID>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	f241 0203 	movw	r2, #4099	; 0x1003
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d819      	bhi.n	8007d48 <HAL_RCC_OscConfig+0x28c>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	691b      	ldr	r3, [r3, #16]
 8007d18:	2b40      	cmp	r3, #64	; 0x40
 8007d1a:	d108      	bne.n	8007d2e <HAL_RCC_OscConfig+0x272>
 8007d1c:	4b09      	ldr	r3, [pc, #36]	; (8007d44 <HAL_RCC_OscConfig+0x288>)
 8007d1e:	685b      	ldr	r3, [r3, #4]
 8007d20:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007d24:	4a07      	ldr	r2, [pc, #28]	; (8007d44 <HAL_RCC_OscConfig+0x288>)
 8007d26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d2a:	6053      	str	r3, [r2, #4]
 8007d2c:	e030      	b.n	8007d90 <HAL_RCC_OscConfig+0x2d4>
 8007d2e:	4b05      	ldr	r3, [pc, #20]	; (8007d44 <HAL_RCC_OscConfig+0x288>)
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	691b      	ldr	r3, [r3, #16]
 8007d3a:	031b      	lsls	r3, r3, #12
 8007d3c:	4901      	ldr	r1, [pc, #4]	; (8007d44 <HAL_RCC_OscConfig+0x288>)
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	604b      	str	r3, [r1, #4]
 8007d42:	e025      	b.n	8007d90 <HAL_RCC_OscConfig+0x2d4>
 8007d44:	58024400 	.word	0x58024400
 8007d48:	4b9a      	ldr	r3, [pc, #616]	; (8007fb4 <HAL_RCC_OscConfig+0x4f8>)
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	691b      	ldr	r3, [r3, #16]
 8007d54:	061b      	lsls	r3, r3, #24
 8007d56:	4997      	ldr	r1, [pc, #604]	; (8007fb4 <HAL_RCC_OscConfig+0x4f8>)
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	604b      	str	r3, [r1, #4]
 8007d5c:	e018      	b.n	8007d90 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007d5e:	4b95      	ldr	r3, [pc, #596]	; (8007fb4 <HAL_RCC_OscConfig+0x4f8>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4a94      	ldr	r2, [pc, #592]	; (8007fb4 <HAL_RCC_OscConfig+0x4f8>)
 8007d64:	f023 0301 	bic.w	r3, r3, #1
 8007d68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d6a:	f7fa fe43 	bl	80029f4 <HAL_GetTick>
 8007d6e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007d70:	e008      	b.n	8007d84 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007d72:	f7fa fe3f 	bl	80029f4 <HAL_GetTick>
 8007d76:	4602      	mov	r2, r0
 8007d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d7a:	1ad3      	subs	r3, r2, r3
 8007d7c:	2b02      	cmp	r3, #2
 8007d7e:	d901      	bls.n	8007d84 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8007d80:	2303      	movs	r3, #3
 8007d82:	e2ed      	b.n	8008360 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007d84:	4b8b      	ldr	r3, [pc, #556]	; (8007fb4 <HAL_RCC_OscConfig+0x4f8>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f003 0304 	and.w	r3, r3, #4
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d1f0      	bne.n	8007d72 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f003 0310 	and.w	r3, r3, #16
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	f000 80a9 	beq.w	8007ef0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007d9e:	4b85      	ldr	r3, [pc, #532]	; (8007fb4 <HAL_RCC_OscConfig+0x4f8>)
 8007da0:	691b      	ldr	r3, [r3, #16]
 8007da2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007da6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007da8:	4b82      	ldr	r3, [pc, #520]	; (8007fb4 <HAL_RCC_OscConfig+0x4f8>)
 8007daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dac:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007dae:	69bb      	ldr	r3, [r7, #24]
 8007db0:	2b08      	cmp	r3, #8
 8007db2:	d007      	beq.n	8007dc4 <HAL_RCC_OscConfig+0x308>
 8007db4:	69bb      	ldr	r3, [r7, #24]
 8007db6:	2b18      	cmp	r3, #24
 8007db8:	d13a      	bne.n	8007e30 <HAL_RCC_OscConfig+0x374>
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	f003 0303 	and.w	r3, r3, #3
 8007dc0:	2b01      	cmp	r3, #1
 8007dc2:	d135      	bne.n	8007e30 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007dc4:	4b7b      	ldr	r3, [pc, #492]	; (8007fb4 <HAL_RCC_OscConfig+0x4f8>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d005      	beq.n	8007ddc <HAL_RCC_OscConfig+0x320>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	69db      	ldr	r3, [r3, #28]
 8007dd4:	2b80      	cmp	r3, #128	; 0x80
 8007dd6:	d001      	beq.n	8007ddc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8007dd8:	2301      	movs	r3, #1
 8007dda:	e2c1      	b.n	8008360 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007ddc:	f7fa fe16 	bl	8002a0c <HAL_GetREVID>
 8007de0:	4603      	mov	r3, r0
 8007de2:	f241 0203 	movw	r2, #4099	; 0x1003
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d817      	bhi.n	8007e1a <HAL_RCC_OscConfig+0x35e>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6a1b      	ldr	r3, [r3, #32]
 8007dee:	2b20      	cmp	r3, #32
 8007df0:	d108      	bne.n	8007e04 <HAL_RCC_OscConfig+0x348>
 8007df2:	4b70      	ldr	r3, [pc, #448]	; (8007fb4 <HAL_RCC_OscConfig+0x4f8>)
 8007df4:	685b      	ldr	r3, [r3, #4]
 8007df6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007dfa:	4a6e      	ldr	r2, [pc, #440]	; (8007fb4 <HAL_RCC_OscConfig+0x4f8>)
 8007dfc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007e00:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007e02:	e075      	b.n	8007ef0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007e04:	4b6b      	ldr	r3, [pc, #428]	; (8007fb4 <HAL_RCC_OscConfig+0x4f8>)
 8007e06:	685b      	ldr	r3, [r3, #4]
 8007e08:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6a1b      	ldr	r3, [r3, #32]
 8007e10:	069b      	lsls	r3, r3, #26
 8007e12:	4968      	ldr	r1, [pc, #416]	; (8007fb4 <HAL_RCC_OscConfig+0x4f8>)
 8007e14:	4313      	orrs	r3, r2
 8007e16:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007e18:	e06a      	b.n	8007ef0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007e1a:	4b66      	ldr	r3, [pc, #408]	; (8007fb4 <HAL_RCC_OscConfig+0x4f8>)
 8007e1c:	68db      	ldr	r3, [r3, #12]
 8007e1e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6a1b      	ldr	r3, [r3, #32]
 8007e26:	061b      	lsls	r3, r3, #24
 8007e28:	4962      	ldr	r1, [pc, #392]	; (8007fb4 <HAL_RCC_OscConfig+0x4f8>)
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007e2e:	e05f      	b.n	8007ef0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	69db      	ldr	r3, [r3, #28]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d042      	beq.n	8007ebe <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007e38:	4b5e      	ldr	r3, [pc, #376]	; (8007fb4 <HAL_RCC_OscConfig+0x4f8>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4a5d      	ldr	r2, [pc, #372]	; (8007fb4 <HAL_RCC_OscConfig+0x4f8>)
 8007e3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e44:	f7fa fdd6 	bl	80029f4 <HAL_GetTick>
 8007e48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007e4a:	e008      	b.n	8007e5e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007e4c:	f7fa fdd2 	bl	80029f4 <HAL_GetTick>
 8007e50:	4602      	mov	r2, r0
 8007e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e54:	1ad3      	subs	r3, r2, r3
 8007e56:	2b02      	cmp	r3, #2
 8007e58:	d901      	bls.n	8007e5e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8007e5a:	2303      	movs	r3, #3
 8007e5c:	e280      	b.n	8008360 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007e5e:	4b55      	ldr	r3, [pc, #340]	; (8007fb4 <HAL_RCC_OscConfig+0x4f8>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d0f0      	beq.n	8007e4c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007e6a:	f7fa fdcf 	bl	8002a0c <HAL_GetREVID>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	f241 0203 	movw	r2, #4099	; 0x1003
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d817      	bhi.n	8007ea8 <HAL_RCC_OscConfig+0x3ec>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6a1b      	ldr	r3, [r3, #32]
 8007e7c:	2b20      	cmp	r3, #32
 8007e7e:	d108      	bne.n	8007e92 <HAL_RCC_OscConfig+0x3d6>
 8007e80:	4b4c      	ldr	r3, [pc, #304]	; (8007fb4 <HAL_RCC_OscConfig+0x4f8>)
 8007e82:	685b      	ldr	r3, [r3, #4]
 8007e84:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007e88:	4a4a      	ldr	r2, [pc, #296]	; (8007fb4 <HAL_RCC_OscConfig+0x4f8>)
 8007e8a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007e8e:	6053      	str	r3, [r2, #4]
 8007e90:	e02e      	b.n	8007ef0 <HAL_RCC_OscConfig+0x434>
 8007e92:	4b48      	ldr	r3, [pc, #288]	; (8007fb4 <HAL_RCC_OscConfig+0x4f8>)
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6a1b      	ldr	r3, [r3, #32]
 8007e9e:	069b      	lsls	r3, r3, #26
 8007ea0:	4944      	ldr	r1, [pc, #272]	; (8007fb4 <HAL_RCC_OscConfig+0x4f8>)
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	604b      	str	r3, [r1, #4]
 8007ea6:	e023      	b.n	8007ef0 <HAL_RCC_OscConfig+0x434>
 8007ea8:	4b42      	ldr	r3, [pc, #264]	; (8007fb4 <HAL_RCC_OscConfig+0x4f8>)
 8007eaa:	68db      	ldr	r3, [r3, #12]
 8007eac:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6a1b      	ldr	r3, [r3, #32]
 8007eb4:	061b      	lsls	r3, r3, #24
 8007eb6:	493f      	ldr	r1, [pc, #252]	; (8007fb4 <HAL_RCC_OscConfig+0x4f8>)
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	60cb      	str	r3, [r1, #12]
 8007ebc:	e018      	b.n	8007ef0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007ebe:	4b3d      	ldr	r3, [pc, #244]	; (8007fb4 <HAL_RCC_OscConfig+0x4f8>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4a3c      	ldr	r2, [pc, #240]	; (8007fb4 <HAL_RCC_OscConfig+0x4f8>)
 8007ec4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ec8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007eca:	f7fa fd93 	bl	80029f4 <HAL_GetTick>
 8007ece:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007ed0:	e008      	b.n	8007ee4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007ed2:	f7fa fd8f 	bl	80029f4 <HAL_GetTick>
 8007ed6:	4602      	mov	r2, r0
 8007ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eda:	1ad3      	subs	r3, r2, r3
 8007edc:	2b02      	cmp	r3, #2
 8007ede:	d901      	bls.n	8007ee4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007ee0:	2303      	movs	r3, #3
 8007ee2:	e23d      	b.n	8008360 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007ee4:	4b33      	ldr	r3, [pc, #204]	; (8007fb4 <HAL_RCC_OscConfig+0x4f8>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d1f0      	bne.n	8007ed2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f003 0308 	and.w	r3, r3, #8
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d036      	beq.n	8007f6a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	695b      	ldr	r3, [r3, #20]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d019      	beq.n	8007f38 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007f04:	4b2b      	ldr	r3, [pc, #172]	; (8007fb4 <HAL_RCC_OscConfig+0x4f8>)
 8007f06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f08:	4a2a      	ldr	r2, [pc, #168]	; (8007fb4 <HAL_RCC_OscConfig+0x4f8>)
 8007f0a:	f043 0301 	orr.w	r3, r3, #1
 8007f0e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f10:	f7fa fd70 	bl	80029f4 <HAL_GetTick>
 8007f14:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007f16:	e008      	b.n	8007f2a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007f18:	f7fa fd6c 	bl	80029f4 <HAL_GetTick>
 8007f1c:	4602      	mov	r2, r0
 8007f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f20:	1ad3      	subs	r3, r2, r3
 8007f22:	2b02      	cmp	r3, #2
 8007f24:	d901      	bls.n	8007f2a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8007f26:	2303      	movs	r3, #3
 8007f28:	e21a      	b.n	8008360 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007f2a:	4b22      	ldr	r3, [pc, #136]	; (8007fb4 <HAL_RCC_OscConfig+0x4f8>)
 8007f2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f2e:	f003 0302 	and.w	r3, r3, #2
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d0f0      	beq.n	8007f18 <HAL_RCC_OscConfig+0x45c>
 8007f36:	e018      	b.n	8007f6a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007f38:	4b1e      	ldr	r3, [pc, #120]	; (8007fb4 <HAL_RCC_OscConfig+0x4f8>)
 8007f3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f3c:	4a1d      	ldr	r2, [pc, #116]	; (8007fb4 <HAL_RCC_OscConfig+0x4f8>)
 8007f3e:	f023 0301 	bic.w	r3, r3, #1
 8007f42:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f44:	f7fa fd56 	bl	80029f4 <HAL_GetTick>
 8007f48:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007f4a:	e008      	b.n	8007f5e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007f4c:	f7fa fd52 	bl	80029f4 <HAL_GetTick>
 8007f50:	4602      	mov	r2, r0
 8007f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f54:	1ad3      	subs	r3, r2, r3
 8007f56:	2b02      	cmp	r3, #2
 8007f58:	d901      	bls.n	8007f5e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007f5a:	2303      	movs	r3, #3
 8007f5c:	e200      	b.n	8008360 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007f5e:	4b15      	ldr	r3, [pc, #84]	; (8007fb4 <HAL_RCC_OscConfig+0x4f8>)
 8007f60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f62:	f003 0302 	and.w	r3, r3, #2
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d1f0      	bne.n	8007f4c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f003 0320 	and.w	r3, r3, #32
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d039      	beq.n	8007fea <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	699b      	ldr	r3, [r3, #24]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d01c      	beq.n	8007fb8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007f7e:	4b0d      	ldr	r3, [pc, #52]	; (8007fb4 <HAL_RCC_OscConfig+0x4f8>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4a0c      	ldr	r2, [pc, #48]	; (8007fb4 <HAL_RCC_OscConfig+0x4f8>)
 8007f84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007f88:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007f8a:	f7fa fd33 	bl	80029f4 <HAL_GetTick>
 8007f8e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007f90:	e008      	b.n	8007fa4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007f92:	f7fa fd2f 	bl	80029f4 <HAL_GetTick>
 8007f96:	4602      	mov	r2, r0
 8007f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f9a:	1ad3      	subs	r3, r2, r3
 8007f9c:	2b02      	cmp	r3, #2
 8007f9e:	d901      	bls.n	8007fa4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8007fa0:	2303      	movs	r3, #3
 8007fa2:	e1dd      	b.n	8008360 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007fa4:	4b03      	ldr	r3, [pc, #12]	; (8007fb4 <HAL_RCC_OscConfig+0x4f8>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d0f0      	beq.n	8007f92 <HAL_RCC_OscConfig+0x4d6>
 8007fb0:	e01b      	b.n	8007fea <HAL_RCC_OscConfig+0x52e>
 8007fb2:	bf00      	nop
 8007fb4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007fb8:	4b9b      	ldr	r3, [pc, #620]	; (8008228 <HAL_RCC_OscConfig+0x76c>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a9a      	ldr	r2, [pc, #616]	; (8008228 <HAL_RCC_OscConfig+0x76c>)
 8007fbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007fc2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007fc4:	f7fa fd16 	bl	80029f4 <HAL_GetTick>
 8007fc8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007fca:	e008      	b.n	8007fde <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007fcc:	f7fa fd12 	bl	80029f4 <HAL_GetTick>
 8007fd0:	4602      	mov	r2, r0
 8007fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd4:	1ad3      	subs	r3, r2, r3
 8007fd6:	2b02      	cmp	r3, #2
 8007fd8:	d901      	bls.n	8007fde <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8007fda:	2303      	movs	r3, #3
 8007fdc:	e1c0      	b.n	8008360 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007fde:	4b92      	ldr	r3, [pc, #584]	; (8008228 <HAL_RCC_OscConfig+0x76c>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d1f0      	bne.n	8007fcc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f003 0304 	and.w	r3, r3, #4
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	f000 8081 	beq.w	80080fa <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007ff8:	4b8c      	ldr	r3, [pc, #560]	; (800822c <HAL_RCC_OscConfig+0x770>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4a8b      	ldr	r2, [pc, #556]	; (800822c <HAL_RCC_OscConfig+0x770>)
 8007ffe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008002:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008004:	f7fa fcf6 	bl	80029f4 <HAL_GetTick>
 8008008:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800800a:	e008      	b.n	800801e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800800c:	f7fa fcf2 	bl	80029f4 <HAL_GetTick>
 8008010:	4602      	mov	r2, r0
 8008012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008014:	1ad3      	subs	r3, r2, r3
 8008016:	2b64      	cmp	r3, #100	; 0x64
 8008018:	d901      	bls.n	800801e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800801a:	2303      	movs	r3, #3
 800801c:	e1a0      	b.n	8008360 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800801e:	4b83      	ldr	r3, [pc, #524]	; (800822c <HAL_RCC_OscConfig+0x770>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008026:	2b00      	cmp	r3, #0
 8008028:	d0f0      	beq.n	800800c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	689b      	ldr	r3, [r3, #8]
 800802e:	2b01      	cmp	r3, #1
 8008030:	d106      	bne.n	8008040 <HAL_RCC_OscConfig+0x584>
 8008032:	4b7d      	ldr	r3, [pc, #500]	; (8008228 <HAL_RCC_OscConfig+0x76c>)
 8008034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008036:	4a7c      	ldr	r2, [pc, #496]	; (8008228 <HAL_RCC_OscConfig+0x76c>)
 8008038:	f043 0301 	orr.w	r3, r3, #1
 800803c:	6713      	str	r3, [r2, #112]	; 0x70
 800803e:	e02d      	b.n	800809c <HAL_RCC_OscConfig+0x5e0>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	689b      	ldr	r3, [r3, #8]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d10c      	bne.n	8008062 <HAL_RCC_OscConfig+0x5a6>
 8008048:	4b77      	ldr	r3, [pc, #476]	; (8008228 <HAL_RCC_OscConfig+0x76c>)
 800804a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800804c:	4a76      	ldr	r2, [pc, #472]	; (8008228 <HAL_RCC_OscConfig+0x76c>)
 800804e:	f023 0301 	bic.w	r3, r3, #1
 8008052:	6713      	str	r3, [r2, #112]	; 0x70
 8008054:	4b74      	ldr	r3, [pc, #464]	; (8008228 <HAL_RCC_OscConfig+0x76c>)
 8008056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008058:	4a73      	ldr	r2, [pc, #460]	; (8008228 <HAL_RCC_OscConfig+0x76c>)
 800805a:	f023 0304 	bic.w	r3, r3, #4
 800805e:	6713      	str	r3, [r2, #112]	; 0x70
 8008060:	e01c      	b.n	800809c <HAL_RCC_OscConfig+0x5e0>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	689b      	ldr	r3, [r3, #8]
 8008066:	2b05      	cmp	r3, #5
 8008068:	d10c      	bne.n	8008084 <HAL_RCC_OscConfig+0x5c8>
 800806a:	4b6f      	ldr	r3, [pc, #444]	; (8008228 <HAL_RCC_OscConfig+0x76c>)
 800806c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800806e:	4a6e      	ldr	r2, [pc, #440]	; (8008228 <HAL_RCC_OscConfig+0x76c>)
 8008070:	f043 0304 	orr.w	r3, r3, #4
 8008074:	6713      	str	r3, [r2, #112]	; 0x70
 8008076:	4b6c      	ldr	r3, [pc, #432]	; (8008228 <HAL_RCC_OscConfig+0x76c>)
 8008078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800807a:	4a6b      	ldr	r2, [pc, #428]	; (8008228 <HAL_RCC_OscConfig+0x76c>)
 800807c:	f043 0301 	orr.w	r3, r3, #1
 8008080:	6713      	str	r3, [r2, #112]	; 0x70
 8008082:	e00b      	b.n	800809c <HAL_RCC_OscConfig+0x5e0>
 8008084:	4b68      	ldr	r3, [pc, #416]	; (8008228 <HAL_RCC_OscConfig+0x76c>)
 8008086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008088:	4a67      	ldr	r2, [pc, #412]	; (8008228 <HAL_RCC_OscConfig+0x76c>)
 800808a:	f023 0301 	bic.w	r3, r3, #1
 800808e:	6713      	str	r3, [r2, #112]	; 0x70
 8008090:	4b65      	ldr	r3, [pc, #404]	; (8008228 <HAL_RCC_OscConfig+0x76c>)
 8008092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008094:	4a64      	ldr	r2, [pc, #400]	; (8008228 <HAL_RCC_OscConfig+0x76c>)
 8008096:	f023 0304 	bic.w	r3, r3, #4
 800809a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	689b      	ldr	r3, [r3, #8]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d015      	beq.n	80080d0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080a4:	f7fa fca6 	bl	80029f4 <HAL_GetTick>
 80080a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80080aa:	e00a      	b.n	80080c2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80080ac:	f7fa fca2 	bl	80029f4 <HAL_GetTick>
 80080b0:	4602      	mov	r2, r0
 80080b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b4:	1ad3      	subs	r3, r2, r3
 80080b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d901      	bls.n	80080c2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80080be:	2303      	movs	r3, #3
 80080c0:	e14e      	b.n	8008360 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80080c2:	4b59      	ldr	r3, [pc, #356]	; (8008228 <HAL_RCC_OscConfig+0x76c>)
 80080c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080c6:	f003 0302 	and.w	r3, r3, #2
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d0ee      	beq.n	80080ac <HAL_RCC_OscConfig+0x5f0>
 80080ce:	e014      	b.n	80080fa <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080d0:	f7fa fc90 	bl	80029f4 <HAL_GetTick>
 80080d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80080d6:	e00a      	b.n	80080ee <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80080d8:	f7fa fc8c 	bl	80029f4 <HAL_GetTick>
 80080dc:	4602      	mov	r2, r0
 80080de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e0:	1ad3      	subs	r3, r2, r3
 80080e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d901      	bls.n	80080ee <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80080ea:	2303      	movs	r3, #3
 80080ec:	e138      	b.n	8008360 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80080ee:	4b4e      	ldr	r3, [pc, #312]	; (8008228 <HAL_RCC_OscConfig+0x76c>)
 80080f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080f2:	f003 0302 	and.w	r3, r3, #2
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d1ee      	bne.n	80080d8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080fe:	2b00      	cmp	r3, #0
 8008100:	f000 812d 	beq.w	800835e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008104:	4b48      	ldr	r3, [pc, #288]	; (8008228 <HAL_RCC_OscConfig+0x76c>)
 8008106:	691b      	ldr	r3, [r3, #16]
 8008108:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800810c:	2b18      	cmp	r3, #24
 800810e:	f000 80bd 	beq.w	800828c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008116:	2b02      	cmp	r3, #2
 8008118:	f040 809e 	bne.w	8008258 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800811c:	4b42      	ldr	r3, [pc, #264]	; (8008228 <HAL_RCC_OscConfig+0x76c>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4a41      	ldr	r2, [pc, #260]	; (8008228 <HAL_RCC_OscConfig+0x76c>)
 8008122:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008126:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008128:	f7fa fc64 	bl	80029f4 <HAL_GetTick>
 800812c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800812e:	e008      	b.n	8008142 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008130:	f7fa fc60 	bl	80029f4 <HAL_GetTick>
 8008134:	4602      	mov	r2, r0
 8008136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008138:	1ad3      	subs	r3, r2, r3
 800813a:	2b02      	cmp	r3, #2
 800813c:	d901      	bls.n	8008142 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800813e:	2303      	movs	r3, #3
 8008140:	e10e      	b.n	8008360 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008142:	4b39      	ldr	r3, [pc, #228]	; (8008228 <HAL_RCC_OscConfig+0x76c>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800814a:	2b00      	cmp	r3, #0
 800814c:	d1f0      	bne.n	8008130 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800814e:	4b36      	ldr	r3, [pc, #216]	; (8008228 <HAL_RCC_OscConfig+0x76c>)
 8008150:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008152:	4b37      	ldr	r3, [pc, #220]	; (8008230 <HAL_RCC_OscConfig+0x774>)
 8008154:	4013      	ands	r3, r2
 8008156:	687a      	ldr	r2, [r7, #4]
 8008158:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800815a:	687a      	ldr	r2, [r7, #4]
 800815c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800815e:	0112      	lsls	r2, r2, #4
 8008160:	430a      	orrs	r2, r1
 8008162:	4931      	ldr	r1, [pc, #196]	; (8008228 <HAL_RCC_OscConfig+0x76c>)
 8008164:	4313      	orrs	r3, r2
 8008166:	628b      	str	r3, [r1, #40]	; 0x28
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800816c:	3b01      	subs	r3, #1
 800816e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008176:	3b01      	subs	r3, #1
 8008178:	025b      	lsls	r3, r3, #9
 800817a:	b29b      	uxth	r3, r3
 800817c:	431a      	orrs	r2, r3
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008182:	3b01      	subs	r3, #1
 8008184:	041b      	lsls	r3, r3, #16
 8008186:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800818a:	431a      	orrs	r2, r3
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008190:	3b01      	subs	r3, #1
 8008192:	061b      	lsls	r3, r3, #24
 8008194:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008198:	4923      	ldr	r1, [pc, #140]	; (8008228 <HAL_RCC_OscConfig+0x76c>)
 800819a:	4313      	orrs	r3, r2
 800819c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800819e:	4b22      	ldr	r3, [pc, #136]	; (8008228 <HAL_RCC_OscConfig+0x76c>)
 80081a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081a2:	4a21      	ldr	r2, [pc, #132]	; (8008228 <HAL_RCC_OscConfig+0x76c>)
 80081a4:	f023 0301 	bic.w	r3, r3, #1
 80081a8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80081aa:	4b1f      	ldr	r3, [pc, #124]	; (8008228 <HAL_RCC_OscConfig+0x76c>)
 80081ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80081ae:	4b21      	ldr	r3, [pc, #132]	; (8008234 <HAL_RCC_OscConfig+0x778>)
 80081b0:	4013      	ands	r3, r2
 80081b2:	687a      	ldr	r2, [r7, #4]
 80081b4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80081b6:	00d2      	lsls	r2, r2, #3
 80081b8:	491b      	ldr	r1, [pc, #108]	; (8008228 <HAL_RCC_OscConfig+0x76c>)
 80081ba:	4313      	orrs	r3, r2
 80081bc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80081be:	4b1a      	ldr	r3, [pc, #104]	; (8008228 <HAL_RCC_OscConfig+0x76c>)
 80081c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081c2:	f023 020c 	bic.w	r2, r3, #12
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ca:	4917      	ldr	r1, [pc, #92]	; (8008228 <HAL_RCC_OscConfig+0x76c>)
 80081cc:	4313      	orrs	r3, r2
 80081ce:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80081d0:	4b15      	ldr	r3, [pc, #84]	; (8008228 <HAL_RCC_OscConfig+0x76c>)
 80081d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081d4:	f023 0202 	bic.w	r2, r3, #2
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081dc:	4912      	ldr	r1, [pc, #72]	; (8008228 <HAL_RCC_OscConfig+0x76c>)
 80081de:	4313      	orrs	r3, r2
 80081e0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80081e2:	4b11      	ldr	r3, [pc, #68]	; (8008228 <HAL_RCC_OscConfig+0x76c>)
 80081e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081e6:	4a10      	ldr	r2, [pc, #64]	; (8008228 <HAL_RCC_OscConfig+0x76c>)
 80081e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80081ec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081ee:	4b0e      	ldr	r3, [pc, #56]	; (8008228 <HAL_RCC_OscConfig+0x76c>)
 80081f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081f2:	4a0d      	ldr	r2, [pc, #52]	; (8008228 <HAL_RCC_OscConfig+0x76c>)
 80081f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80081f8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80081fa:	4b0b      	ldr	r3, [pc, #44]	; (8008228 <HAL_RCC_OscConfig+0x76c>)
 80081fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081fe:	4a0a      	ldr	r2, [pc, #40]	; (8008228 <HAL_RCC_OscConfig+0x76c>)
 8008200:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008204:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008206:	4b08      	ldr	r3, [pc, #32]	; (8008228 <HAL_RCC_OscConfig+0x76c>)
 8008208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800820a:	4a07      	ldr	r2, [pc, #28]	; (8008228 <HAL_RCC_OscConfig+0x76c>)
 800820c:	f043 0301 	orr.w	r3, r3, #1
 8008210:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008212:	4b05      	ldr	r3, [pc, #20]	; (8008228 <HAL_RCC_OscConfig+0x76c>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4a04      	ldr	r2, [pc, #16]	; (8008228 <HAL_RCC_OscConfig+0x76c>)
 8008218:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800821c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800821e:	f7fa fbe9 	bl	80029f4 <HAL_GetTick>
 8008222:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008224:	e011      	b.n	800824a <HAL_RCC_OscConfig+0x78e>
 8008226:	bf00      	nop
 8008228:	58024400 	.word	0x58024400
 800822c:	58024800 	.word	0x58024800
 8008230:	fffffc0c 	.word	0xfffffc0c
 8008234:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008238:	f7fa fbdc 	bl	80029f4 <HAL_GetTick>
 800823c:	4602      	mov	r2, r0
 800823e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008240:	1ad3      	subs	r3, r2, r3
 8008242:	2b02      	cmp	r3, #2
 8008244:	d901      	bls.n	800824a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008246:	2303      	movs	r3, #3
 8008248:	e08a      	b.n	8008360 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800824a:	4b47      	ldr	r3, [pc, #284]	; (8008368 <HAL_RCC_OscConfig+0x8ac>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008252:	2b00      	cmp	r3, #0
 8008254:	d0f0      	beq.n	8008238 <HAL_RCC_OscConfig+0x77c>
 8008256:	e082      	b.n	800835e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008258:	4b43      	ldr	r3, [pc, #268]	; (8008368 <HAL_RCC_OscConfig+0x8ac>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4a42      	ldr	r2, [pc, #264]	; (8008368 <HAL_RCC_OscConfig+0x8ac>)
 800825e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008262:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008264:	f7fa fbc6 	bl	80029f4 <HAL_GetTick>
 8008268:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800826a:	e008      	b.n	800827e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800826c:	f7fa fbc2 	bl	80029f4 <HAL_GetTick>
 8008270:	4602      	mov	r2, r0
 8008272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008274:	1ad3      	subs	r3, r2, r3
 8008276:	2b02      	cmp	r3, #2
 8008278:	d901      	bls.n	800827e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800827a:	2303      	movs	r3, #3
 800827c:	e070      	b.n	8008360 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800827e:	4b3a      	ldr	r3, [pc, #232]	; (8008368 <HAL_RCC_OscConfig+0x8ac>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008286:	2b00      	cmp	r3, #0
 8008288:	d1f0      	bne.n	800826c <HAL_RCC_OscConfig+0x7b0>
 800828a:	e068      	b.n	800835e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800828c:	4b36      	ldr	r3, [pc, #216]	; (8008368 <HAL_RCC_OscConfig+0x8ac>)
 800828e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008290:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008292:	4b35      	ldr	r3, [pc, #212]	; (8008368 <HAL_RCC_OscConfig+0x8ac>)
 8008294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008296:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800829c:	2b01      	cmp	r3, #1
 800829e:	d031      	beq.n	8008304 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80082a0:	693b      	ldr	r3, [r7, #16]
 80082a2:	f003 0203 	and.w	r2, r3, #3
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80082aa:	429a      	cmp	r2, r3
 80082ac:	d12a      	bne.n	8008304 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	091b      	lsrs	r3, r3, #4
 80082b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80082ba:	429a      	cmp	r2, r3
 80082bc:	d122      	bne.n	8008304 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082c8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80082ca:	429a      	cmp	r2, r3
 80082cc:	d11a      	bne.n	8008304 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	0a5b      	lsrs	r3, r3, #9
 80082d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082da:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80082dc:	429a      	cmp	r2, r3
 80082de:	d111      	bne.n	8008304 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	0c1b      	lsrs	r3, r3, #16
 80082e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ec:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80082ee:	429a      	cmp	r2, r3
 80082f0:	d108      	bne.n	8008304 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	0e1b      	lsrs	r3, r3, #24
 80082f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082fe:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008300:	429a      	cmp	r2, r3
 8008302:	d001      	beq.n	8008308 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008304:	2301      	movs	r3, #1
 8008306:	e02b      	b.n	8008360 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008308:	4b17      	ldr	r3, [pc, #92]	; (8008368 <HAL_RCC_OscConfig+0x8ac>)
 800830a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800830c:	08db      	lsrs	r3, r3, #3
 800830e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008312:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008318:	693a      	ldr	r2, [r7, #16]
 800831a:	429a      	cmp	r2, r3
 800831c:	d01f      	beq.n	800835e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800831e:	4b12      	ldr	r3, [pc, #72]	; (8008368 <HAL_RCC_OscConfig+0x8ac>)
 8008320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008322:	4a11      	ldr	r2, [pc, #68]	; (8008368 <HAL_RCC_OscConfig+0x8ac>)
 8008324:	f023 0301 	bic.w	r3, r3, #1
 8008328:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800832a:	f7fa fb63 	bl	80029f4 <HAL_GetTick>
 800832e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008330:	bf00      	nop
 8008332:	f7fa fb5f 	bl	80029f4 <HAL_GetTick>
 8008336:	4602      	mov	r2, r0
 8008338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800833a:	4293      	cmp	r3, r2
 800833c:	d0f9      	beq.n	8008332 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800833e:	4b0a      	ldr	r3, [pc, #40]	; (8008368 <HAL_RCC_OscConfig+0x8ac>)
 8008340:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008342:	4b0a      	ldr	r3, [pc, #40]	; (800836c <HAL_RCC_OscConfig+0x8b0>)
 8008344:	4013      	ands	r3, r2
 8008346:	687a      	ldr	r2, [r7, #4]
 8008348:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800834a:	00d2      	lsls	r2, r2, #3
 800834c:	4906      	ldr	r1, [pc, #24]	; (8008368 <HAL_RCC_OscConfig+0x8ac>)
 800834e:	4313      	orrs	r3, r2
 8008350:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008352:	4b05      	ldr	r3, [pc, #20]	; (8008368 <HAL_RCC_OscConfig+0x8ac>)
 8008354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008356:	4a04      	ldr	r2, [pc, #16]	; (8008368 <HAL_RCC_OscConfig+0x8ac>)
 8008358:	f043 0301 	orr.w	r3, r3, #1
 800835c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800835e:	2300      	movs	r3, #0
}
 8008360:	4618      	mov	r0, r3
 8008362:	3730      	adds	r7, #48	; 0x30
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}
 8008368:	58024400 	.word	0x58024400
 800836c:	ffff0007 	.word	0xffff0007

08008370 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b086      	sub	sp, #24
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
 8008378:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d101      	bne.n	8008384 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008380:	2301      	movs	r3, #1
 8008382:	e19c      	b.n	80086be <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008384:	4b8a      	ldr	r3, [pc, #552]	; (80085b0 <HAL_RCC_ClockConfig+0x240>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f003 030f 	and.w	r3, r3, #15
 800838c:	683a      	ldr	r2, [r7, #0]
 800838e:	429a      	cmp	r2, r3
 8008390:	d910      	bls.n	80083b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008392:	4b87      	ldr	r3, [pc, #540]	; (80085b0 <HAL_RCC_ClockConfig+0x240>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f023 020f 	bic.w	r2, r3, #15
 800839a:	4985      	ldr	r1, [pc, #532]	; (80085b0 <HAL_RCC_ClockConfig+0x240>)
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	4313      	orrs	r3, r2
 80083a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80083a2:	4b83      	ldr	r3, [pc, #524]	; (80085b0 <HAL_RCC_ClockConfig+0x240>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f003 030f 	and.w	r3, r3, #15
 80083aa:	683a      	ldr	r2, [r7, #0]
 80083ac:	429a      	cmp	r2, r3
 80083ae:	d001      	beq.n	80083b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80083b0:	2301      	movs	r3, #1
 80083b2:	e184      	b.n	80086be <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f003 0304 	and.w	r3, r3, #4
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d010      	beq.n	80083e2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	691a      	ldr	r2, [r3, #16]
 80083c4:	4b7b      	ldr	r3, [pc, #492]	; (80085b4 <HAL_RCC_ClockConfig+0x244>)
 80083c6:	699b      	ldr	r3, [r3, #24]
 80083c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80083cc:	429a      	cmp	r2, r3
 80083ce:	d908      	bls.n	80083e2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80083d0:	4b78      	ldr	r3, [pc, #480]	; (80085b4 <HAL_RCC_ClockConfig+0x244>)
 80083d2:	699b      	ldr	r3, [r3, #24]
 80083d4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	691b      	ldr	r3, [r3, #16]
 80083dc:	4975      	ldr	r1, [pc, #468]	; (80085b4 <HAL_RCC_ClockConfig+0x244>)
 80083de:	4313      	orrs	r3, r2
 80083e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f003 0308 	and.w	r3, r3, #8
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d010      	beq.n	8008410 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	695a      	ldr	r2, [r3, #20]
 80083f2:	4b70      	ldr	r3, [pc, #448]	; (80085b4 <HAL_RCC_ClockConfig+0x244>)
 80083f4:	69db      	ldr	r3, [r3, #28]
 80083f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80083fa:	429a      	cmp	r2, r3
 80083fc:	d908      	bls.n	8008410 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80083fe:	4b6d      	ldr	r3, [pc, #436]	; (80085b4 <HAL_RCC_ClockConfig+0x244>)
 8008400:	69db      	ldr	r3, [r3, #28]
 8008402:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	695b      	ldr	r3, [r3, #20]
 800840a:	496a      	ldr	r1, [pc, #424]	; (80085b4 <HAL_RCC_ClockConfig+0x244>)
 800840c:	4313      	orrs	r3, r2
 800840e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f003 0310 	and.w	r3, r3, #16
 8008418:	2b00      	cmp	r3, #0
 800841a:	d010      	beq.n	800843e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	699a      	ldr	r2, [r3, #24]
 8008420:	4b64      	ldr	r3, [pc, #400]	; (80085b4 <HAL_RCC_ClockConfig+0x244>)
 8008422:	69db      	ldr	r3, [r3, #28]
 8008424:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008428:	429a      	cmp	r2, r3
 800842a:	d908      	bls.n	800843e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800842c:	4b61      	ldr	r3, [pc, #388]	; (80085b4 <HAL_RCC_ClockConfig+0x244>)
 800842e:	69db      	ldr	r3, [r3, #28]
 8008430:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	699b      	ldr	r3, [r3, #24]
 8008438:	495e      	ldr	r1, [pc, #376]	; (80085b4 <HAL_RCC_ClockConfig+0x244>)
 800843a:	4313      	orrs	r3, r2
 800843c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f003 0320 	and.w	r3, r3, #32
 8008446:	2b00      	cmp	r3, #0
 8008448:	d010      	beq.n	800846c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	69da      	ldr	r2, [r3, #28]
 800844e:	4b59      	ldr	r3, [pc, #356]	; (80085b4 <HAL_RCC_ClockConfig+0x244>)
 8008450:	6a1b      	ldr	r3, [r3, #32]
 8008452:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008456:	429a      	cmp	r2, r3
 8008458:	d908      	bls.n	800846c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800845a:	4b56      	ldr	r3, [pc, #344]	; (80085b4 <HAL_RCC_ClockConfig+0x244>)
 800845c:	6a1b      	ldr	r3, [r3, #32]
 800845e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	69db      	ldr	r3, [r3, #28]
 8008466:	4953      	ldr	r1, [pc, #332]	; (80085b4 <HAL_RCC_ClockConfig+0x244>)
 8008468:	4313      	orrs	r3, r2
 800846a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f003 0302 	and.w	r3, r3, #2
 8008474:	2b00      	cmp	r3, #0
 8008476:	d010      	beq.n	800849a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	68da      	ldr	r2, [r3, #12]
 800847c:	4b4d      	ldr	r3, [pc, #308]	; (80085b4 <HAL_RCC_ClockConfig+0x244>)
 800847e:	699b      	ldr	r3, [r3, #24]
 8008480:	f003 030f 	and.w	r3, r3, #15
 8008484:	429a      	cmp	r2, r3
 8008486:	d908      	bls.n	800849a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008488:	4b4a      	ldr	r3, [pc, #296]	; (80085b4 <HAL_RCC_ClockConfig+0x244>)
 800848a:	699b      	ldr	r3, [r3, #24]
 800848c:	f023 020f 	bic.w	r2, r3, #15
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	68db      	ldr	r3, [r3, #12]
 8008494:	4947      	ldr	r1, [pc, #284]	; (80085b4 <HAL_RCC_ClockConfig+0x244>)
 8008496:	4313      	orrs	r3, r2
 8008498:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f003 0301 	and.w	r3, r3, #1
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d055      	beq.n	8008552 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80084a6:	4b43      	ldr	r3, [pc, #268]	; (80085b4 <HAL_RCC_ClockConfig+0x244>)
 80084a8:	699b      	ldr	r3, [r3, #24]
 80084aa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	689b      	ldr	r3, [r3, #8]
 80084b2:	4940      	ldr	r1, [pc, #256]	; (80085b4 <HAL_RCC_ClockConfig+0x244>)
 80084b4:	4313      	orrs	r3, r2
 80084b6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	685b      	ldr	r3, [r3, #4]
 80084bc:	2b02      	cmp	r3, #2
 80084be:	d107      	bne.n	80084d0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80084c0:	4b3c      	ldr	r3, [pc, #240]	; (80085b4 <HAL_RCC_ClockConfig+0x244>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d121      	bne.n	8008510 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80084cc:	2301      	movs	r3, #1
 80084ce:	e0f6      	b.n	80086be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	685b      	ldr	r3, [r3, #4]
 80084d4:	2b03      	cmp	r3, #3
 80084d6:	d107      	bne.n	80084e8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80084d8:	4b36      	ldr	r3, [pc, #216]	; (80085b4 <HAL_RCC_ClockConfig+0x244>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d115      	bne.n	8008510 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80084e4:	2301      	movs	r3, #1
 80084e6:	e0ea      	b.n	80086be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	685b      	ldr	r3, [r3, #4]
 80084ec:	2b01      	cmp	r3, #1
 80084ee:	d107      	bne.n	8008500 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80084f0:	4b30      	ldr	r3, [pc, #192]	; (80085b4 <HAL_RCC_ClockConfig+0x244>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d109      	bne.n	8008510 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80084fc:	2301      	movs	r3, #1
 80084fe:	e0de      	b.n	80086be <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008500:	4b2c      	ldr	r3, [pc, #176]	; (80085b4 <HAL_RCC_ClockConfig+0x244>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f003 0304 	and.w	r3, r3, #4
 8008508:	2b00      	cmp	r3, #0
 800850a:	d101      	bne.n	8008510 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800850c:	2301      	movs	r3, #1
 800850e:	e0d6      	b.n	80086be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008510:	4b28      	ldr	r3, [pc, #160]	; (80085b4 <HAL_RCC_ClockConfig+0x244>)
 8008512:	691b      	ldr	r3, [r3, #16]
 8008514:	f023 0207 	bic.w	r2, r3, #7
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	685b      	ldr	r3, [r3, #4]
 800851c:	4925      	ldr	r1, [pc, #148]	; (80085b4 <HAL_RCC_ClockConfig+0x244>)
 800851e:	4313      	orrs	r3, r2
 8008520:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008522:	f7fa fa67 	bl	80029f4 <HAL_GetTick>
 8008526:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008528:	e00a      	b.n	8008540 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800852a:	f7fa fa63 	bl	80029f4 <HAL_GetTick>
 800852e:	4602      	mov	r2, r0
 8008530:	697b      	ldr	r3, [r7, #20]
 8008532:	1ad3      	subs	r3, r2, r3
 8008534:	f241 3288 	movw	r2, #5000	; 0x1388
 8008538:	4293      	cmp	r3, r2
 800853a:	d901      	bls.n	8008540 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800853c:	2303      	movs	r3, #3
 800853e:	e0be      	b.n	80086be <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008540:	4b1c      	ldr	r3, [pc, #112]	; (80085b4 <HAL_RCC_ClockConfig+0x244>)
 8008542:	691b      	ldr	r3, [r3, #16]
 8008544:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	00db      	lsls	r3, r3, #3
 800854e:	429a      	cmp	r2, r3
 8008550:	d1eb      	bne.n	800852a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f003 0302 	and.w	r3, r3, #2
 800855a:	2b00      	cmp	r3, #0
 800855c:	d010      	beq.n	8008580 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	68da      	ldr	r2, [r3, #12]
 8008562:	4b14      	ldr	r3, [pc, #80]	; (80085b4 <HAL_RCC_ClockConfig+0x244>)
 8008564:	699b      	ldr	r3, [r3, #24]
 8008566:	f003 030f 	and.w	r3, r3, #15
 800856a:	429a      	cmp	r2, r3
 800856c:	d208      	bcs.n	8008580 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800856e:	4b11      	ldr	r3, [pc, #68]	; (80085b4 <HAL_RCC_ClockConfig+0x244>)
 8008570:	699b      	ldr	r3, [r3, #24]
 8008572:	f023 020f 	bic.w	r2, r3, #15
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	68db      	ldr	r3, [r3, #12]
 800857a:	490e      	ldr	r1, [pc, #56]	; (80085b4 <HAL_RCC_ClockConfig+0x244>)
 800857c:	4313      	orrs	r3, r2
 800857e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008580:	4b0b      	ldr	r3, [pc, #44]	; (80085b0 <HAL_RCC_ClockConfig+0x240>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f003 030f 	and.w	r3, r3, #15
 8008588:	683a      	ldr	r2, [r7, #0]
 800858a:	429a      	cmp	r2, r3
 800858c:	d214      	bcs.n	80085b8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800858e:	4b08      	ldr	r3, [pc, #32]	; (80085b0 <HAL_RCC_ClockConfig+0x240>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f023 020f 	bic.w	r2, r3, #15
 8008596:	4906      	ldr	r1, [pc, #24]	; (80085b0 <HAL_RCC_ClockConfig+0x240>)
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	4313      	orrs	r3, r2
 800859c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800859e:	4b04      	ldr	r3, [pc, #16]	; (80085b0 <HAL_RCC_ClockConfig+0x240>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f003 030f 	and.w	r3, r3, #15
 80085a6:	683a      	ldr	r2, [r7, #0]
 80085a8:	429a      	cmp	r2, r3
 80085aa:	d005      	beq.n	80085b8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80085ac:	2301      	movs	r3, #1
 80085ae:	e086      	b.n	80086be <HAL_RCC_ClockConfig+0x34e>
 80085b0:	52002000 	.word	0x52002000
 80085b4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f003 0304 	and.w	r3, r3, #4
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d010      	beq.n	80085e6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	691a      	ldr	r2, [r3, #16]
 80085c8:	4b3f      	ldr	r3, [pc, #252]	; (80086c8 <HAL_RCC_ClockConfig+0x358>)
 80085ca:	699b      	ldr	r3, [r3, #24]
 80085cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80085d0:	429a      	cmp	r2, r3
 80085d2:	d208      	bcs.n	80085e6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80085d4:	4b3c      	ldr	r3, [pc, #240]	; (80086c8 <HAL_RCC_ClockConfig+0x358>)
 80085d6:	699b      	ldr	r3, [r3, #24]
 80085d8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	691b      	ldr	r3, [r3, #16]
 80085e0:	4939      	ldr	r1, [pc, #228]	; (80086c8 <HAL_RCC_ClockConfig+0x358>)
 80085e2:	4313      	orrs	r3, r2
 80085e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f003 0308 	and.w	r3, r3, #8
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d010      	beq.n	8008614 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	695a      	ldr	r2, [r3, #20]
 80085f6:	4b34      	ldr	r3, [pc, #208]	; (80086c8 <HAL_RCC_ClockConfig+0x358>)
 80085f8:	69db      	ldr	r3, [r3, #28]
 80085fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80085fe:	429a      	cmp	r2, r3
 8008600:	d208      	bcs.n	8008614 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008602:	4b31      	ldr	r3, [pc, #196]	; (80086c8 <HAL_RCC_ClockConfig+0x358>)
 8008604:	69db      	ldr	r3, [r3, #28]
 8008606:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	695b      	ldr	r3, [r3, #20]
 800860e:	492e      	ldr	r1, [pc, #184]	; (80086c8 <HAL_RCC_ClockConfig+0x358>)
 8008610:	4313      	orrs	r3, r2
 8008612:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f003 0310 	and.w	r3, r3, #16
 800861c:	2b00      	cmp	r3, #0
 800861e:	d010      	beq.n	8008642 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	699a      	ldr	r2, [r3, #24]
 8008624:	4b28      	ldr	r3, [pc, #160]	; (80086c8 <HAL_RCC_ClockConfig+0x358>)
 8008626:	69db      	ldr	r3, [r3, #28]
 8008628:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800862c:	429a      	cmp	r2, r3
 800862e:	d208      	bcs.n	8008642 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008630:	4b25      	ldr	r3, [pc, #148]	; (80086c8 <HAL_RCC_ClockConfig+0x358>)
 8008632:	69db      	ldr	r3, [r3, #28]
 8008634:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	699b      	ldr	r3, [r3, #24]
 800863c:	4922      	ldr	r1, [pc, #136]	; (80086c8 <HAL_RCC_ClockConfig+0x358>)
 800863e:	4313      	orrs	r3, r2
 8008640:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f003 0320 	and.w	r3, r3, #32
 800864a:	2b00      	cmp	r3, #0
 800864c:	d010      	beq.n	8008670 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	69da      	ldr	r2, [r3, #28]
 8008652:	4b1d      	ldr	r3, [pc, #116]	; (80086c8 <HAL_RCC_ClockConfig+0x358>)
 8008654:	6a1b      	ldr	r3, [r3, #32]
 8008656:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800865a:	429a      	cmp	r2, r3
 800865c:	d208      	bcs.n	8008670 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800865e:	4b1a      	ldr	r3, [pc, #104]	; (80086c8 <HAL_RCC_ClockConfig+0x358>)
 8008660:	6a1b      	ldr	r3, [r3, #32]
 8008662:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	69db      	ldr	r3, [r3, #28]
 800866a:	4917      	ldr	r1, [pc, #92]	; (80086c8 <HAL_RCC_ClockConfig+0x358>)
 800866c:	4313      	orrs	r3, r2
 800866e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008670:	f000 f834 	bl	80086dc <HAL_RCC_GetSysClockFreq>
 8008674:	4602      	mov	r2, r0
 8008676:	4b14      	ldr	r3, [pc, #80]	; (80086c8 <HAL_RCC_ClockConfig+0x358>)
 8008678:	699b      	ldr	r3, [r3, #24]
 800867a:	0a1b      	lsrs	r3, r3, #8
 800867c:	f003 030f 	and.w	r3, r3, #15
 8008680:	4912      	ldr	r1, [pc, #72]	; (80086cc <HAL_RCC_ClockConfig+0x35c>)
 8008682:	5ccb      	ldrb	r3, [r1, r3]
 8008684:	f003 031f 	and.w	r3, r3, #31
 8008688:	fa22 f303 	lsr.w	r3, r2, r3
 800868c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800868e:	4b0e      	ldr	r3, [pc, #56]	; (80086c8 <HAL_RCC_ClockConfig+0x358>)
 8008690:	699b      	ldr	r3, [r3, #24]
 8008692:	f003 030f 	and.w	r3, r3, #15
 8008696:	4a0d      	ldr	r2, [pc, #52]	; (80086cc <HAL_RCC_ClockConfig+0x35c>)
 8008698:	5cd3      	ldrb	r3, [r2, r3]
 800869a:	f003 031f 	and.w	r3, r3, #31
 800869e:	693a      	ldr	r2, [r7, #16]
 80086a0:	fa22 f303 	lsr.w	r3, r2, r3
 80086a4:	4a0a      	ldr	r2, [pc, #40]	; (80086d0 <HAL_RCC_ClockConfig+0x360>)
 80086a6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80086a8:	4a0a      	ldr	r2, [pc, #40]	; (80086d4 <HAL_RCC_ClockConfig+0x364>)
 80086aa:	693b      	ldr	r3, [r7, #16]
 80086ac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80086ae:	4b0a      	ldr	r3, [pc, #40]	; (80086d8 <HAL_RCC_ClockConfig+0x368>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4618      	mov	r0, r3
 80086b4:	f7f9 fed6 	bl	8002464 <HAL_InitTick>
 80086b8:	4603      	mov	r3, r0
 80086ba:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80086bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3718      	adds	r7, #24
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}
 80086c6:	bf00      	nop
 80086c8:	58024400 	.word	0x58024400
 80086cc:	08014334 	.word	0x08014334
 80086d0:	24000004 	.word	0x24000004
 80086d4:	24000000 	.word	0x24000000
 80086d8:	24000008 	.word	0x24000008

080086dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80086dc:	b480      	push	{r7}
 80086de:	b089      	sub	sp, #36	; 0x24
 80086e0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80086e2:	4bb3      	ldr	r3, [pc, #716]	; (80089b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086e4:	691b      	ldr	r3, [r3, #16]
 80086e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80086ea:	2b18      	cmp	r3, #24
 80086ec:	f200 8155 	bhi.w	800899a <HAL_RCC_GetSysClockFreq+0x2be>
 80086f0:	a201      	add	r2, pc, #4	; (adr r2, 80086f8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80086f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086f6:	bf00      	nop
 80086f8:	0800875d 	.word	0x0800875d
 80086fc:	0800899b 	.word	0x0800899b
 8008700:	0800899b 	.word	0x0800899b
 8008704:	0800899b 	.word	0x0800899b
 8008708:	0800899b 	.word	0x0800899b
 800870c:	0800899b 	.word	0x0800899b
 8008710:	0800899b 	.word	0x0800899b
 8008714:	0800899b 	.word	0x0800899b
 8008718:	08008783 	.word	0x08008783
 800871c:	0800899b 	.word	0x0800899b
 8008720:	0800899b 	.word	0x0800899b
 8008724:	0800899b 	.word	0x0800899b
 8008728:	0800899b 	.word	0x0800899b
 800872c:	0800899b 	.word	0x0800899b
 8008730:	0800899b 	.word	0x0800899b
 8008734:	0800899b 	.word	0x0800899b
 8008738:	08008789 	.word	0x08008789
 800873c:	0800899b 	.word	0x0800899b
 8008740:	0800899b 	.word	0x0800899b
 8008744:	0800899b 	.word	0x0800899b
 8008748:	0800899b 	.word	0x0800899b
 800874c:	0800899b 	.word	0x0800899b
 8008750:	0800899b 	.word	0x0800899b
 8008754:	0800899b 	.word	0x0800899b
 8008758:	0800878f 	.word	0x0800878f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800875c:	4b94      	ldr	r3, [pc, #592]	; (80089b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f003 0320 	and.w	r3, r3, #32
 8008764:	2b00      	cmp	r3, #0
 8008766:	d009      	beq.n	800877c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008768:	4b91      	ldr	r3, [pc, #580]	; (80089b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	08db      	lsrs	r3, r3, #3
 800876e:	f003 0303 	and.w	r3, r3, #3
 8008772:	4a90      	ldr	r2, [pc, #576]	; (80089b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008774:	fa22 f303 	lsr.w	r3, r2, r3
 8008778:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800877a:	e111      	b.n	80089a0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800877c:	4b8d      	ldr	r3, [pc, #564]	; (80089b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800877e:	61bb      	str	r3, [r7, #24]
      break;
 8008780:	e10e      	b.n	80089a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008782:	4b8d      	ldr	r3, [pc, #564]	; (80089b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008784:	61bb      	str	r3, [r7, #24]
      break;
 8008786:	e10b      	b.n	80089a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008788:	4b8c      	ldr	r3, [pc, #560]	; (80089bc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800878a:	61bb      	str	r3, [r7, #24]
      break;
 800878c:	e108      	b.n	80089a0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800878e:	4b88      	ldr	r3, [pc, #544]	; (80089b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008792:	f003 0303 	and.w	r3, r3, #3
 8008796:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008798:	4b85      	ldr	r3, [pc, #532]	; (80089b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800879a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800879c:	091b      	lsrs	r3, r3, #4
 800879e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80087a2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80087a4:	4b82      	ldr	r3, [pc, #520]	; (80089b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087a8:	f003 0301 	and.w	r3, r3, #1
 80087ac:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80087ae:	4b80      	ldr	r3, [pc, #512]	; (80089b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087b2:	08db      	lsrs	r3, r3, #3
 80087b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80087b8:	68fa      	ldr	r2, [r7, #12]
 80087ba:	fb02 f303 	mul.w	r3, r2, r3
 80087be:	ee07 3a90 	vmov	s15, r3
 80087c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087c6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80087ca:	693b      	ldr	r3, [r7, #16]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	f000 80e1 	beq.w	8008994 <HAL_RCC_GetSysClockFreq+0x2b8>
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	2b02      	cmp	r3, #2
 80087d6:	f000 8083 	beq.w	80088e0 <HAL_RCC_GetSysClockFreq+0x204>
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	2b02      	cmp	r3, #2
 80087de:	f200 80a1 	bhi.w	8008924 <HAL_RCC_GetSysClockFreq+0x248>
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d003      	beq.n	80087f0 <HAL_RCC_GetSysClockFreq+0x114>
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	2b01      	cmp	r3, #1
 80087ec:	d056      	beq.n	800889c <HAL_RCC_GetSysClockFreq+0x1c0>
 80087ee:	e099      	b.n	8008924 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80087f0:	4b6f      	ldr	r3, [pc, #444]	; (80089b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f003 0320 	and.w	r3, r3, #32
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d02d      	beq.n	8008858 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80087fc:	4b6c      	ldr	r3, [pc, #432]	; (80089b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	08db      	lsrs	r3, r3, #3
 8008802:	f003 0303 	and.w	r3, r3, #3
 8008806:	4a6b      	ldr	r2, [pc, #428]	; (80089b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008808:	fa22 f303 	lsr.w	r3, r2, r3
 800880c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	ee07 3a90 	vmov	s15, r3
 8008814:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008818:	693b      	ldr	r3, [r7, #16]
 800881a:	ee07 3a90 	vmov	s15, r3
 800881e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008822:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008826:	4b62      	ldr	r3, [pc, #392]	; (80089b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800882a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800882e:	ee07 3a90 	vmov	s15, r3
 8008832:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008836:	ed97 6a02 	vldr	s12, [r7, #8]
 800883a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80089c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800883e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008842:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008846:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800884a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800884e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008852:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008856:	e087      	b.n	8008968 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008858:	693b      	ldr	r3, [r7, #16]
 800885a:	ee07 3a90 	vmov	s15, r3
 800885e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008862:	eddf 6a58 	vldr	s13, [pc, #352]	; 80089c4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008866:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800886a:	4b51      	ldr	r3, [pc, #324]	; (80089b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800886c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800886e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008872:	ee07 3a90 	vmov	s15, r3
 8008876:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800887a:	ed97 6a02 	vldr	s12, [r7, #8]
 800887e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80089c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008882:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008886:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800888a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800888e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008892:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008896:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800889a:	e065      	b.n	8008968 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	ee07 3a90 	vmov	s15, r3
 80088a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088a6:	eddf 6a48 	vldr	s13, [pc, #288]	; 80089c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80088aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088ae:	4b40      	ldr	r3, [pc, #256]	; (80089b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088b6:	ee07 3a90 	vmov	s15, r3
 80088ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088be:	ed97 6a02 	vldr	s12, [r7, #8]
 80088c2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80089c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80088c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80088de:	e043      	b.n	8008968 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80088e0:	693b      	ldr	r3, [r7, #16]
 80088e2:	ee07 3a90 	vmov	s15, r3
 80088e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088ea:	eddf 6a38 	vldr	s13, [pc, #224]	; 80089cc <HAL_RCC_GetSysClockFreq+0x2f0>
 80088ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088f2:	4b2f      	ldr	r3, [pc, #188]	; (80089b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088fa:	ee07 3a90 	vmov	s15, r3
 80088fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008902:	ed97 6a02 	vldr	s12, [r7, #8]
 8008906:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80089c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800890a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800890e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008912:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008916:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800891a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800891e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008922:	e021      	b.n	8008968 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008924:	693b      	ldr	r3, [r7, #16]
 8008926:	ee07 3a90 	vmov	s15, r3
 800892a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800892e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80089c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008932:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008936:	4b1e      	ldr	r3, [pc, #120]	; (80089b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800893a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800893e:	ee07 3a90 	vmov	s15, r3
 8008942:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008946:	ed97 6a02 	vldr	s12, [r7, #8]
 800894a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80089c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800894e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008952:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008956:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800895a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800895e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008962:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008966:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008968:	4b11      	ldr	r3, [pc, #68]	; (80089b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800896a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800896c:	0a5b      	lsrs	r3, r3, #9
 800896e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008972:	3301      	adds	r3, #1
 8008974:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	ee07 3a90 	vmov	s15, r3
 800897c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008980:	edd7 6a07 	vldr	s13, [r7, #28]
 8008984:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008988:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800898c:	ee17 3a90 	vmov	r3, s15
 8008990:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008992:	e005      	b.n	80089a0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008994:	2300      	movs	r3, #0
 8008996:	61bb      	str	r3, [r7, #24]
      break;
 8008998:	e002      	b.n	80089a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800899a:	4b07      	ldr	r3, [pc, #28]	; (80089b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800899c:	61bb      	str	r3, [r7, #24]
      break;
 800899e:	bf00      	nop
  }

  return sysclockfreq;
 80089a0:	69bb      	ldr	r3, [r7, #24]
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3724      	adds	r7, #36	; 0x24
 80089a6:	46bd      	mov	sp, r7
 80089a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ac:	4770      	bx	lr
 80089ae:	bf00      	nop
 80089b0:	58024400 	.word	0x58024400
 80089b4:	03d09000 	.word	0x03d09000
 80089b8:	003d0900 	.word	0x003d0900
 80089bc:	017d7840 	.word	0x017d7840
 80089c0:	46000000 	.word	0x46000000
 80089c4:	4c742400 	.word	0x4c742400
 80089c8:	4a742400 	.word	0x4a742400
 80089cc:	4bbebc20 	.word	0x4bbebc20

080089d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b082      	sub	sp, #8
 80089d4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80089d6:	f7ff fe81 	bl	80086dc <HAL_RCC_GetSysClockFreq>
 80089da:	4602      	mov	r2, r0
 80089dc:	4b10      	ldr	r3, [pc, #64]	; (8008a20 <HAL_RCC_GetHCLKFreq+0x50>)
 80089de:	699b      	ldr	r3, [r3, #24]
 80089e0:	0a1b      	lsrs	r3, r3, #8
 80089e2:	f003 030f 	and.w	r3, r3, #15
 80089e6:	490f      	ldr	r1, [pc, #60]	; (8008a24 <HAL_RCC_GetHCLKFreq+0x54>)
 80089e8:	5ccb      	ldrb	r3, [r1, r3]
 80089ea:	f003 031f 	and.w	r3, r3, #31
 80089ee:	fa22 f303 	lsr.w	r3, r2, r3
 80089f2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80089f4:	4b0a      	ldr	r3, [pc, #40]	; (8008a20 <HAL_RCC_GetHCLKFreq+0x50>)
 80089f6:	699b      	ldr	r3, [r3, #24]
 80089f8:	f003 030f 	and.w	r3, r3, #15
 80089fc:	4a09      	ldr	r2, [pc, #36]	; (8008a24 <HAL_RCC_GetHCLKFreq+0x54>)
 80089fe:	5cd3      	ldrb	r3, [r2, r3]
 8008a00:	f003 031f 	and.w	r3, r3, #31
 8008a04:	687a      	ldr	r2, [r7, #4]
 8008a06:	fa22 f303 	lsr.w	r3, r2, r3
 8008a0a:	4a07      	ldr	r2, [pc, #28]	; (8008a28 <HAL_RCC_GetHCLKFreq+0x58>)
 8008a0c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008a0e:	4a07      	ldr	r2, [pc, #28]	; (8008a2c <HAL_RCC_GetHCLKFreq+0x5c>)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008a14:	4b04      	ldr	r3, [pc, #16]	; (8008a28 <HAL_RCC_GetHCLKFreq+0x58>)
 8008a16:	681b      	ldr	r3, [r3, #0]
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	3708      	adds	r7, #8
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bd80      	pop	{r7, pc}
 8008a20:	58024400 	.word	0x58024400
 8008a24:	08014334 	.word	0x08014334
 8008a28:	24000004 	.word	0x24000004
 8008a2c:	24000000 	.word	0x24000000

08008a30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008a34:	f7ff ffcc 	bl	80089d0 <HAL_RCC_GetHCLKFreq>
 8008a38:	4602      	mov	r2, r0
 8008a3a:	4b06      	ldr	r3, [pc, #24]	; (8008a54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008a3c:	69db      	ldr	r3, [r3, #28]
 8008a3e:	091b      	lsrs	r3, r3, #4
 8008a40:	f003 0307 	and.w	r3, r3, #7
 8008a44:	4904      	ldr	r1, [pc, #16]	; (8008a58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008a46:	5ccb      	ldrb	r3, [r1, r3]
 8008a48:	f003 031f 	and.w	r3, r3, #31
 8008a4c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	bd80      	pop	{r7, pc}
 8008a54:	58024400 	.word	0x58024400
 8008a58:	08014334 	.word	0x08014334

08008a5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008a60:	f7ff ffb6 	bl	80089d0 <HAL_RCC_GetHCLKFreq>
 8008a64:	4602      	mov	r2, r0
 8008a66:	4b06      	ldr	r3, [pc, #24]	; (8008a80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008a68:	69db      	ldr	r3, [r3, #28]
 8008a6a:	0a1b      	lsrs	r3, r3, #8
 8008a6c:	f003 0307 	and.w	r3, r3, #7
 8008a70:	4904      	ldr	r1, [pc, #16]	; (8008a84 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008a72:	5ccb      	ldrb	r3, [r1, r3]
 8008a74:	f003 031f 	and.w	r3, r3, #31
 8008a78:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	bd80      	pop	{r7, pc}
 8008a80:	58024400 	.word	0x58024400
 8008a84:	08014334 	.word	0x08014334

08008a88 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b083      	sub	sp, #12
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
 8008a90:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	223f      	movs	r2, #63	; 0x3f
 8008a96:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008a98:	4b1a      	ldr	r3, [pc, #104]	; (8008b04 <HAL_RCC_GetClockConfig+0x7c>)
 8008a9a:	691b      	ldr	r3, [r3, #16]
 8008a9c:	f003 0207 	and.w	r2, r3, #7
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8008aa4:	4b17      	ldr	r3, [pc, #92]	; (8008b04 <HAL_RCC_GetClockConfig+0x7c>)
 8008aa6:	699b      	ldr	r3, [r3, #24]
 8008aa8:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8008ab0:	4b14      	ldr	r3, [pc, #80]	; (8008b04 <HAL_RCC_GetClockConfig+0x7c>)
 8008ab2:	699b      	ldr	r3, [r3, #24]
 8008ab4:	f003 020f 	and.w	r2, r3, #15
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8008abc:	4b11      	ldr	r3, [pc, #68]	; (8008b04 <HAL_RCC_GetClockConfig+0x7c>)
 8008abe:	699b      	ldr	r3, [r3, #24]
 8008ac0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8008ac8:	4b0e      	ldr	r3, [pc, #56]	; (8008b04 <HAL_RCC_GetClockConfig+0x7c>)
 8008aca:	69db      	ldr	r3, [r3, #28]
 8008acc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8008ad4:	4b0b      	ldr	r3, [pc, #44]	; (8008b04 <HAL_RCC_GetClockConfig+0x7c>)
 8008ad6:	69db      	ldr	r3, [r3, #28]
 8008ad8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8008ae0:	4b08      	ldr	r3, [pc, #32]	; (8008b04 <HAL_RCC_GetClockConfig+0x7c>)
 8008ae2:	6a1b      	ldr	r3, [r3, #32]
 8008ae4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008aec:	4b06      	ldr	r3, [pc, #24]	; (8008b08 <HAL_RCC_GetClockConfig+0x80>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f003 020f 	and.w	r2, r3, #15
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	601a      	str	r2, [r3, #0]
}
 8008af8:	bf00      	nop
 8008afa:	370c      	adds	r7, #12
 8008afc:	46bd      	mov	sp, r7
 8008afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b02:	4770      	bx	lr
 8008b04:	58024400 	.word	0x58024400
 8008b08:	52002000 	.word	0x52002000

08008b0c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008b0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008b10:	b0ca      	sub	sp, #296	; 0x128
 8008b12:	af00      	add	r7, sp, #0
 8008b14:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008b18:	2300      	movs	r3, #0
 8008b1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008b1e:	2300      	movs	r3, #0
 8008b20:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008b24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b2c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8008b30:	2500      	movs	r5, #0
 8008b32:	ea54 0305 	orrs.w	r3, r4, r5
 8008b36:	d049      	beq.n	8008bcc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008b38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b3e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008b42:	d02f      	beq.n	8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008b44:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008b48:	d828      	bhi.n	8008b9c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008b4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008b4e:	d01a      	beq.n	8008b86 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008b50:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008b54:	d822      	bhi.n	8008b9c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d003      	beq.n	8008b62 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008b5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b5e:	d007      	beq.n	8008b70 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008b60:	e01c      	b.n	8008b9c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b62:	4bb8      	ldr	r3, [pc, #736]	; (8008e44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b66:	4ab7      	ldr	r2, [pc, #732]	; (8008e44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008b68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b6c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008b6e:	e01a      	b.n	8008ba6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008b70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b74:	3308      	adds	r3, #8
 8008b76:	2102      	movs	r1, #2
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f002 fb61 	bl	800b240 <RCCEx_PLL2_Config>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008b84:	e00f      	b.n	8008ba6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b8a:	3328      	adds	r3, #40	; 0x28
 8008b8c:	2102      	movs	r1, #2
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f002 fc08 	bl	800b3a4 <RCCEx_PLL3_Config>
 8008b94:	4603      	mov	r3, r0
 8008b96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008b9a:	e004      	b.n	8008ba6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008ba2:	e000      	b.n	8008ba6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008ba4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ba6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d10a      	bne.n	8008bc4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008bae:	4ba5      	ldr	r3, [pc, #660]	; (8008e44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008bb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bb2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8008bb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008bbc:	4aa1      	ldr	r2, [pc, #644]	; (8008e44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008bbe:	430b      	orrs	r3, r1
 8008bc0:	6513      	str	r3, [r2, #80]	; 0x50
 8008bc2:	e003      	b.n	8008bcc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bc4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008bc8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008bcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8008bd8:	f04f 0900 	mov.w	r9, #0
 8008bdc:	ea58 0309 	orrs.w	r3, r8, r9
 8008be0:	d047      	beq.n	8008c72 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008be8:	2b04      	cmp	r3, #4
 8008bea:	d82a      	bhi.n	8008c42 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008bec:	a201      	add	r2, pc, #4	; (adr r2, 8008bf4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bf2:	bf00      	nop
 8008bf4:	08008c09 	.word	0x08008c09
 8008bf8:	08008c17 	.word	0x08008c17
 8008bfc:	08008c2d 	.word	0x08008c2d
 8008c00:	08008c4b 	.word	0x08008c4b
 8008c04:	08008c4b 	.word	0x08008c4b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c08:	4b8e      	ldr	r3, [pc, #568]	; (8008e44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c0c:	4a8d      	ldr	r2, [pc, #564]	; (8008e44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008c0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008c14:	e01a      	b.n	8008c4c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c1a:	3308      	adds	r3, #8
 8008c1c:	2100      	movs	r1, #0
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f002 fb0e 	bl	800b240 <RCCEx_PLL2_Config>
 8008c24:	4603      	mov	r3, r0
 8008c26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008c2a:	e00f      	b.n	8008c4c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008c2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c30:	3328      	adds	r3, #40	; 0x28
 8008c32:	2100      	movs	r1, #0
 8008c34:	4618      	mov	r0, r3
 8008c36:	f002 fbb5 	bl	800b3a4 <RCCEx_PLL3_Config>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008c40:	e004      	b.n	8008c4c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c42:	2301      	movs	r3, #1
 8008c44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008c48:	e000      	b.n	8008c4c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008c4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c4c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d10a      	bne.n	8008c6a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008c54:	4b7b      	ldr	r3, [pc, #492]	; (8008e44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008c56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c58:	f023 0107 	bic.w	r1, r3, #7
 8008c5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c62:	4a78      	ldr	r2, [pc, #480]	; (8008e44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008c64:	430b      	orrs	r3, r1
 8008c66:	6513      	str	r3, [r2, #80]	; 0x50
 8008c68:	e003      	b.n	8008c72 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c6e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008c72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c7a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8008c7e:	f04f 0b00 	mov.w	fp, #0
 8008c82:	ea5a 030b 	orrs.w	r3, sl, fp
 8008c86:	d04c      	beq.n	8008d22 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8008c88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c92:	d030      	beq.n	8008cf6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8008c94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c98:	d829      	bhi.n	8008cee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008c9a:	2bc0      	cmp	r3, #192	; 0xc0
 8008c9c:	d02d      	beq.n	8008cfa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8008c9e:	2bc0      	cmp	r3, #192	; 0xc0
 8008ca0:	d825      	bhi.n	8008cee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008ca2:	2b80      	cmp	r3, #128	; 0x80
 8008ca4:	d018      	beq.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8008ca6:	2b80      	cmp	r3, #128	; 0x80
 8008ca8:	d821      	bhi.n	8008cee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d002      	beq.n	8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8008cae:	2b40      	cmp	r3, #64	; 0x40
 8008cb0:	d007      	beq.n	8008cc2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8008cb2:	e01c      	b.n	8008cee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008cb4:	4b63      	ldr	r3, [pc, #396]	; (8008e44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cb8:	4a62      	ldr	r2, [pc, #392]	; (8008e44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008cba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008cbe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008cc0:	e01c      	b.n	8008cfc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cc6:	3308      	adds	r3, #8
 8008cc8:	2100      	movs	r1, #0
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f002 fab8 	bl	800b240 <RCCEx_PLL2_Config>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008cd6:	e011      	b.n	8008cfc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008cd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cdc:	3328      	adds	r3, #40	; 0x28
 8008cde:	2100      	movs	r1, #0
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f002 fb5f 	bl	800b3a4 <RCCEx_PLL3_Config>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008cec:	e006      	b.n	8008cfc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008cee:	2301      	movs	r3, #1
 8008cf0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008cf4:	e002      	b.n	8008cfc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008cf6:	bf00      	nop
 8008cf8:	e000      	b.n	8008cfc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008cfa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008cfc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d10a      	bne.n	8008d1a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008d04:	4b4f      	ldr	r3, [pc, #316]	; (8008e44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008d06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d08:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8008d0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d12:	4a4c      	ldr	r2, [pc, #304]	; (8008e44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008d14:	430b      	orrs	r3, r1
 8008d16:	6513      	str	r3, [r2, #80]	; 0x50
 8008d18:	e003      	b.n	8008d22 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d1e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d2a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8008d2e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008d32:	2300      	movs	r3, #0
 8008d34:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008d38:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8008d3c:	460b      	mov	r3, r1
 8008d3e:	4313      	orrs	r3, r2
 8008d40:	d053      	beq.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8008d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d46:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008d4a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008d4e:	d035      	beq.n	8008dbc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8008d50:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008d54:	d82e      	bhi.n	8008db4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008d56:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008d5a:	d031      	beq.n	8008dc0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8008d5c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008d60:	d828      	bhi.n	8008db4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008d62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008d66:	d01a      	beq.n	8008d9e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8008d68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008d6c:	d822      	bhi.n	8008db4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d003      	beq.n	8008d7a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8008d72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008d76:	d007      	beq.n	8008d88 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8008d78:	e01c      	b.n	8008db4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d7a:	4b32      	ldr	r3, [pc, #200]	; (8008e44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d7e:	4a31      	ldr	r2, [pc, #196]	; (8008e44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008d80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d84:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008d86:	e01c      	b.n	8008dc2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d8c:	3308      	adds	r3, #8
 8008d8e:	2100      	movs	r1, #0
 8008d90:	4618      	mov	r0, r3
 8008d92:	f002 fa55 	bl	800b240 <RCCEx_PLL2_Config>
 8008d96:	4603      	mov	r3, r0
 8008d98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008d9c:	e011      	b.n	8008dc2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008da2:	3328      	adds	r3, #40	; 0x28
 8008da4:	2100      	movs	r1, #0
 8008da6:	4618      	mov	r0, r3
 8008da8:	f002 fafc 	bl	800b3a4 <RCCEx_PLL3_Config>
 8008dac:	4603      	mov	r3, r0
 8008dae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008db2:	e006      	b.n	8008dc2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008db4:	2301      	movs	r3, #1
 8008db6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008dba:	e002      	b.n	8008dc2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008dbc:	bf00      	nop
 8008dbe:	e000      	b.n	8008dc2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008dc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008dc2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d10b      	bne.n	8008de2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008dca:	4b1e      	ldr	r3, [pc, #120]	; (8008e44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dce:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8008dd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008dd6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008dda:	4a1a      	ldr	r2, [pc, #104]	; (8008e44 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008ddc:	430b      	orrs	r3, r1
 8008dde:	6593      	str	r3, [r2, #88]	; 0x58
 8008de0:	e003      	b.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008de2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008de6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008df2:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8008df6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008e00:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8008e04:	460b      	mov	r3, r1
 8008e06:	4313      	orrs	r3, r2
 8008e08:	d056      	beq.n	8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e0e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008e12:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008e16:	d038      	beq.n	8008e8a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008e18:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008e1c:	d831      	bhi.n	8008e82 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008e1e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008e22:	d034      	beq.n	8008e8e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8008e24:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008e28:	d82b      	bhi.n	8008e82 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008e2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e2e:	d01d      	beq.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8008e30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e34:	d825      	bhi.n	8008e82 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d006      	beq.n	8008e48 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8008e3a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008e3e:	d00a      	beq.n	8008e56 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008e40:	e01f      	b.n	8008e82 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008e42:	bf00      	nop
 8008e44:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e48:	4ba2      	ldr	r3, [pc, #648]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e4c:	4aa1      	ldr	r2, [pc, #644]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008e4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008e54:	e01c      	b.n	8008e90 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e5a:	3308      	adds	r3, #8
 8008e5c:	2100      	movs	r1, #0
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f002 f9ee 	bl	800b240 <RCCEx_PLL2_Config>
 8008e64:	4603      	mov	r3, r0
 8008e66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008e6a:	e011      	b.n	8008e90 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008e6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e70:	3328      	adds	r3, #40	; 0x28
 8008e72:	2100      	movs	r1, #0
 8008e74:	4618      	mov	r0, r3
 8008e76:	f002 fa95 	bl	800b3a4 <RCCEx_PLL3_Config>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008e80:	e006      	b.n	8008e90 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008e82:	2301      	movs	r3, #1
 8008e84:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008e88:	e002      	b.n	8008e90 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008e8a:	bf00      	nop
 8008e8c:	e000      	b.n	8008e90 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008e8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e90:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d10b      	bne.n	8008eb0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008e98:	4b8e      	ldr	r3, [pc, #568]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e9c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8008ea0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ea4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008ea8:	4a8a      	ldr	r2, [pc, #552]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008eaa:	430b      	orrs	r3, r1
 8008eac:	6593      	str	r3, [r2, #88]	; 0x58
 8008eae:	e003      	b.n	8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008eb0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008eb4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008eb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ec0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8008ec4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008ec8:	2300      	movs	r3, #0
 8008eca:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008ece:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8008ed2:	460b      	mov	r3, r1
 8008ed4:	4313      	orrs	r3, r2
 8008ed6:	d03a      	beq.n	8008f4e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8008ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ede:	2b30      	cmp	r3, #48	; 0x30
 8008ee0:	d01f      	beq.n	8008f22 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8008ee2:	2b30      	cmp	r3, #48	; 0x30
 8008ee4:	d819      	bhi.n	8008f1a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008ee6:	2b20      	cmp	r3, #32
 8008ee8:	d00c      	beq.n	8008f04 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8008eea:	2b20      	cmp	r3, #32
 8008eec:	d815      	bhi.n	8008f1a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d019      	beq.n	8008f26 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8008ef2:	2b10      	cmp	r3, #16
 8008ef4:	d111      	bne.n	8008f1a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ef6:	4b77      	ldr	r3, [pc, #476]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008efa:	4a76      	ldr	r2, [pc, #472]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008efc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f00:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008f02:	e011      	b.n	8008f28 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008f04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f08:	3308      	adds	r3, #8
 8008f0a:	2102      	movs	r1, #2
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	f002 f997 	bl	800b240 <RCCEx_PLL2_Config>
 8008f12:	4603      	mov	r3, r0
 8008f14:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008f18:	e006      	b.n	8008f28 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008f20:	e002      	b.n	8008f28 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008f22:	bf00      	nop
 8008f24:	e000      	b.n	8008f28 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008f26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f28:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d10a      	bne.n	8008f46 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008f30:	4b68      	ldr	r3, [pc, #416]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008f32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f34:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8008f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f3e:	4a65      	ldr	r2, [pc, #404]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008f40:	430b      	orrs	r3, r1
 8008f42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008f44:	e003      	b.n	8008f4e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008f4a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008f4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f56:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8008f5a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008f5e:	2300      	movs	r3, #0
 8008f60:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008f64:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8008f68:	460b      	mov	r3, r1
 8008f6a:	4313      	orrs	r3, r2
 8008f6c:	d051      	beq.n	8009012 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8008f6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008f78:	d035      	beq.n	8008fe6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8008f7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008f7e:	d82e      	bhi.n	8008fde <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008f80:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008f84:	d031      	beq.n	8008fea <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8008f86:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008f8a:	d828      	bhi.n	8008fde <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008f8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f90:	d01a      	beq.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8008f92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f96:	d822      	bhi.n	8008fde <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d003      	beq.n	8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8008f9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fa0:	d007      	beq.n	8008fb2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8008fa2:	e01c      	b.n	8008fde <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008fa4:	4b4b      	ldr	r3, [pc, #300]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fa8:	4a4a      	ldr	r2, [pc, #296]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008faa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008fae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008fb0:	e01c      	b.n	8008fec <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008fb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fb6:	3308      	adds	r3, #8
 8008fb8:	2100      	movs	r1, #0
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f002 f940 	bl	800b240 <RCCEx_PLL2_Config>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008fc6:	e011      	b.n	8008fec <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008fc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fcc:	3328      	adds	r3, #40	; 0x28
 8008fce:	2100      	movs	r1, #0
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	f002 f9e7 	bl	800b3a4 <RCCEx_PLL3_Config>
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008fdc:	e006      	b.n	8008fec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008fde:	2301      	movs	r3, #1
 8008fe0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008fe4:	e002      	b.n	8008fec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008fe6:	bf00      	nop
 8008fe8:	e000      	b.n	8008fec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008fea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008fec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d10a      	bne.n	800900a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008ff4:	4b37      	ldr	r3, [pc, #220]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008ff6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ff8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8008ffc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009000:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009002:	4a34      	ldr	r2, [pc, #208]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009004:	430b      	orrs	r3, r1
 8009006:	6513      	str	r3, [r2, #80]	; 0x50
 8009008:	e003      	b.n	8009012 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800900a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800900e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009012:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800901a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800901e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009022:	2300      	movs	r3, #0
 8009024:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009028:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800902c:	460b      	mov	r3, r1
 800902e:	4313      	orrs	r3, r2
 8009030:	d056      	beq.n	80090e0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009032:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009036:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009038:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800903c:	d033      	beq.n	80090a6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800903e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009042:	d82c      	bhi.n	800909e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009044:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009048:	d02f      	beq.n	80090aa <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800904a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800904e:	d826      	bhi.n	800909e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009050:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009054:	d02b      	beq.n	80090ae <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8009056:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800905a:	d820      	bhi.n	800909e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800905c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009060:	d012      	beq.n	8009088 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8009062:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009066:	d81a      	bhi.n	800909e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009068:	2b00      	cmp	r3, #0
 800906a:	d022      	beq.n	80090b2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800906c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009070:	d115      	bne.n	800909e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009072:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009076:	3308      	adds	r3, #8
 8009078:	2101      	movs	r1, #1
 800907a:	4618      	mov	r0, r3
 800907c:	f002 f8e0 	bl	800b240 <RCCEx_PLL2_Config>
 8009080:	4603      	mov	r3, r0
 8009082:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009086:	e015      	b.n	80090b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009088:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800908c:	3328      	adds	r3, #40	; 0x28
 800908e:	2101      	movs	r1, #1
 8009090:	4618      	mov	r0, r3
 8009092:	f002 f987 	bl	800b3a4 <RCCEx_PLL3_Config>
 8009096:	4603      	mov	r3, r0
 8009098:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800909c:	e00a      	b.n	80090b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800909e:	2301      	movs	r3, #1
 80090a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80090a4:	e006      	b.n	80090b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80090a6:	bf00      	nop
 80090a8:	e004      	b.n	80090b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80090aa:	bf00      	nop
 80090ac:	e002      	b.n	80090b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80090ae:	bf00      	nop
 80090b0:	e000      	b.n	80090b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80090b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d10d      	bne.n	80090d8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80090bc:	4b05      	ldr	r3, [pc, #20]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80090be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090c0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80090c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80090ca:	4a02      	ldr	r2, [pc, #8]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80090cc:	430b      	orrs	r3, r1
 80090ce:	6513      	str	r3, [r2, #80]	; 0x50
 80090d0:	e006      	b.n	80090e0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80090d2:	bf00      	nop
 80090d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80090dc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80090e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090e8:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80090ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80090f0:	2300      	movs	r3, #0
 80090f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80090f6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80090fa:	460b      	mov	r3, r1
 80090fc:	4313      	orrs	r3, r2
 80090fe:	d055      	beq.n	80091ac <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009100:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009104:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009108:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800910c:	d033      	beq.n	8009176 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800910e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009112:	d82c      	bhi.n	800916e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009114:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009118:	d02f      	beq.n	800917a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800911a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800911e:	d826      	bhi.n	800916e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009120:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009124:	d02b      	beq.n	800917e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8009126:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800912a:	d820      	bhi.n	800916e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800912c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009130:	d012      	beq.n	8009158 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8009132:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009136:	d81a      	bhi.n	800916e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009138:	2b00      	cmp	r3, #0
 800913a:	d022      	beq.n	8009182 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800913c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009140:	d115      	bne.n	800916e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009142:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009146:	3308      	adds	r3, #8
 8009148:	2101      	movs	r1, #1
 800914a:	4618      	mov	r0, r3
 800914c:	f002 f878 	bl	800b240 <RCCEx_PLL2_Config>
 8009150:	4603      	mov	r3, r0
 8009152:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009156:	e015      	b.n	8009184 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009158:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800915c:	3328      	adds	r3, #40	; 0x28
 800915e:	2101      	movs	r1, #1
 8009160:	4618      	mov	r0, r3
 8009162:	f002 f91f 	bl	800b3a4 <RCCEx_PLL3_Config>
 8009166:	4603      	mov	r3, r0
 8009168:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800916c:	e00a      	b.n	8009184 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800916e:	2301      	movs	r3, #1
 8009170:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009174:	e006      	b.n	8009184 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009176:	bf00      	nop
 8009178:	e004      	b.n	8009184 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800917a:	bf00      	nop
 800917c:	e002      	b.n	8009184 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800917e:	bf00      	nop
 8009180:	e000      	b.n	8009184 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009182:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009184:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009188:	2b00      	cmp	r3, #0
 800918a:	d10b      	bne.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800918c:	4ba3      	ldr	r3, [pc, #652]	; (800941c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800918e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009190:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8009194:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009198:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800919c:	4a9f      	ldr	r2, [pc, #636]	; (800941c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800919e:	430b      	orrs	r3, r1
 80091a0:	6593      	str	r3, [r2, #88]	; 0x58
 80091a2:	e003      	b.n	80091ac <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80091a8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80091ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091b4:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80091b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80091bc:	2300      	movs	r3, #0
 80091be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80091c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80091c6:	460b      	mov	r3, r1
 80091c8:	4313      	orrs	r3, r2
 80091ca:	d037      	beq.n	800923c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80091cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091d6:	d00e      	beq.n	80091f6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80091d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091dc:	d816      	bhi.n	800920c <HAL_RCCEx_PeriphCLKConfig+0x700>
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d018      	beq.n	8009214 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80091e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80091e6:	d111      	bne.n	800920c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091e8:	4b8c      	ldr	r3, [pc, #560]	; (800941c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80091ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091ec:	4a8b      	ldr	r2, [pc, #556]	; (800941c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80091ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80091f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80091f4:	e00f      	b.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80091f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091fa:	3308      	adds	r3, #8
 80091fc:	2101      	movs	r1, #1
 80091fe:	4618      	mov	r0, r3
 8009200:	f002 f81e 	bl	800b240 <RCCEx_PLL2_Config>
 8009204:	4603      	mov	r3, r0
 8009206:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800920a:	e004      	b.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800920c:	2301      	movs	r3, #1
 800920e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009212:	e000      	b.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8009214:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009216:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800921a:	2b00      	cmp	r3, #0
 800921c:	d10a      	bne.n	8009234 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800921e:	4b7f      	ldr	r3, [pc, #508]	; (800941c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009220:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009222:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8009226:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800922a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800922c:	4a7b      	ldr	r2, [pc, #492]	; (800941c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800922e:	430b      	orrs	r3, r1
 8009230:	6513      	str	r3, [r2, #80]	; 0x50
 8009232:	e003      	b.n	800923c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009234:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009238:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800923c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009244:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8009248:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800924c:	2300      	movs	r3, #0
 800924e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009252:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8009256:	460b      	mov	r3, r1
 8009258:	4313      	orrs	r3, r2
 800925a:	d039      	beq.n	80092d0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800925c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009260:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009262:	2b03      	cmp	r3, #3
 8009264:	d81c      	bhi.n	80092a0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8009266:	a201      	add	r2, pc, #4	; (adr r2, 800926c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8009268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800926c:	080092a9 	.word	0x080092a9
 8009270:	0800927d 	.word	0x0800927d
 8009274:	0800928b 	.word	0x0800928b
 8009278:	080092a9 	.word	0x080092a9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800927c:	4b67      	ldr	r3, [pc, #412]	; (800941c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800927e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009280:	4a66      	ldr	r2, [pc, #408]	; (800941c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009282:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009286:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009288:	e00f      	b.n	80092aa <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800928a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800928e:	3308      	adds	r3, #8
 8009290:	2102      	movs	r1, #2
 8009292:	4618      	mov	r0, r3
 8009294:	f001 ffd4 	bl	800b240 <RCCEx_PLL2_Config>
 8009298:	4603      	mov	r3, r0
 800929a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800929e:	e004      	b.n	80092aa <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80092a0:	2301      	movs	r3, #1
 80092a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80092a6:	e000      	b.n	80092aa <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80092a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d10a      	bne.n	80092c8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80092b2:	4b5a      	ldr	r3, [pc, #360]	; (800941c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80092b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092b6:	f023 0103 	bic.w	r1, r3, #3
 80092ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092c0:	4a56      	ldr	r2, [pc, #344]	; (800941c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80092c2:	430b      	orrs	r3, r1
 80092c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80092c6:	e003      	b.n	80092d0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80092cc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80092d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092d8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80092dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80092e0:	2300      	movs	r3, #0
 80092e2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80092e6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80092ea:	460b      	mov	r3, r1
 80092ec:	4313      	orrs	r3, r2
 80092ee:	f000 809f 	beq.w	8009430 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80092f2:	4b4b      	ldr	r3, [pc, #300]	; (8009420 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	4a4a      	ldr	r2, [pc, #296]	; (8009420 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80092f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80092fc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80092fe:	f7f9 fb79 	bl	80029f4 <HAL_GetTick>
 8009302:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009306:	e00b      	b.n	8009320 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009308:	f7f9 fb74 	bl	80029f4 <HAL_GetTick>
 800930c:	4602      	mov	r2, r0
 800930e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009312:	1ad3      	subs	r3, r2, r3
 8009314:	2b64      	cmp	r3, #100	; 0x64
 8009316:	d903      	bls.n	8009320 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8009318:	2303      	movs	r3, #3
 800931a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800931e:	e005      	b.n	800932c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009320:	4b3f      	ldr	r3, [pc, #252]	; (8009420 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009328:	2b00      	cmp	r3, #0
 800932a:	d0ed      	beq.n	8009308 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800932c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009330:	2b00      	cmp	r3, #0
 8009332:	d179      	bne.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009334:	4b39      	ldr	r3, [pc, #228]	; (800941c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009336:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009338:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800933c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009340:	4053      	eors	r3, r2
 8009342:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009346:	2b00      	cmp	r3, #0
 8009348:	d015      	beq.n	8009376 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800934a:	4b34      	ldr	r3, [pc, #208]	; (800941c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800934c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800934e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009352:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009356:	4b31      	ldr	r3, [pc, #196]	; (800941c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800935a:	4a30      	ldr	r2, [pc, #192]	; (800941c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800935c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009360:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009362:	4b2e      	ldr	r3, [pc, #184]	; (800941c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009366:	4a2d      	ldr	r2, [pc, #180]	; (800941c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009368:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800936c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800936e:	4a2b      	ldr	r2, [pc, #172]	; (800941c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009370:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009374:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009376:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800937a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800937e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009382:	d118      	bne.n	80093b6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009384:	f7f9 fb36 	bl	80029f4 <HAL_GetTick>
 8009388:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800938c:	e00d      	b.n	80093aa <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800938e:	f7f9 fb31 	bl	80029f4 <HAL_GetTick>
 8009392:	4602      	mov	r2, r0
 8009394:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009398:	1ad2      	subs	r2, r2, r3
 800939a:	f241 3388 	movw	r3, #5000	; 0x1388
 800939e:	429a      	cmp	r2, r3
 80093a0:	d903      	bls.n	80093aa <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80093a2:	2303      	movs	r3, #3
 80093a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 80093a8:	e005      	b.n	80093b6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80093aa:	4b1c      	ldr	r3, [pc, #112]	; (800941c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80093ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093ae:	f003 0302 	and.w	r3, r3, #2
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d0eb      	beq.n	800938e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80093b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d129      	bne.n	8009412 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80093be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093c2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80093c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80093ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80093ce:	d10e      	bne.n	80093ee <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80093d0:	4b12      	ldr	r3, [pc, #72]	; (800941c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80093d2:	691b      	ldr	r3, [r3, #16]
 80093d4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80093d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093dc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80093e0:	091a      	lsrs	r2, r3, #4
 80093e2:	4b10      	ldr	r3, [pc, #64]	; (8009424 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80093e4:	4013      	ands	r3, r2
 80093e6:	4a0d      	ldr	r2, [pc, #52]	; (800941c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80093e8:	430b      	orrs	r3, r1
 80093ea:	6113      	str	r3, [r2, #16]
 80093ec:	e005      	b.n	80093fa <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80093ee:	4b0b      	ldr	r3, [pc, #44]	; (800941c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80093f0:	691b      	ldr	r3, [r3, #16]
 80093f2:	4a0a      	ldr	r2, [pc, #40]	; (800941c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80093f4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80093f8:	6113      	str	r3, [r2, #16]
 80093fa:	4b08      	ldr	r3, [pc, #32]	; (800941c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80093fc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80093fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009402:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009406:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800940a:	4a04      	ldr	r2, [pc, #16]	; (800941c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800940c:	430b      	orrs	r3, r1
 800940e:	6713      	str	r3, [r2, #112]	; 0x70
 8009410:	e00e      	b.n	8009430 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009412:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009416:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800941a:	e009      	b.n	8009430 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800941c:	58024400 	.word	0x58024400
 8009420:	58024800 	.word	0x58024800
 8009424:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009428:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800942c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009430:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009438:	f002 0301 	and.w	r3, r2, #1
 800943c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009440:	2300      	movs	r3, #0
 8009442:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009446:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800944a:	460b      	mov	r3, r1
 800944c:	4313      	orrs	r3, r2
 800944e:	f000 8089 	beq.w	8009564 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009452:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009456:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009458:	2b28      	cmp	r3, #40	; 0x28
 800945a:	d86b      	bhi.n	8009534 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800945c:	a201      	add	r2, pc, #4	; (adr r2, 8009464 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800945e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009462:	bf00      	nop
 8009464:	0800953d 	.word	0x0800953d
 8009468:	08009535 	.word	0x08009535
 800946c:	08009535 	.word	0x08009535
 8009470:	08009535 	.word	0x08009535
 8009474:	08009535 	.word	0x08009535
 8009478:	08009535 	.word	0x08009535
 800947c:	08009535 	.word	0x08009535
 8009480:	08009535 	.word	0x08009535
 8009484:	08009509 	.word	0x08009509
 8009488:	08009535 	.word	0x08009535
 800948c:	08009535 	.word	0x08009535
 8009490:	08009535 	.word	0x08009535
 8009494:	08009535 	.word	0x08009535
 8009498:	08009535 	.word	0x08009535
 800949c:	08009535 	.word	0x08009535
 80094a0:	08009535 	.word	0x08009535
 80094a4:	0800951f 	.word	0x0800951f
 80094a8:	08009535 	.word	0x08009535
 80094ac:	08009535 	.word	0x08009535
 80094b0:	08009535 	.word	0x08009535
 80094b4:	08009535 	.word	0x08009535
 80094b8:	08009535 	.word	0x08009535
 80094bc:	08009535 	.word	0x08009535
 80094c0:	08009535 	.word	0x08009535
 80094c4:	0800953d 	.word	0x0800953d
 80094c8:	08009535 	.word	0x08009535
 80094cc:	08009535 	.word	0x08009535
 80094d0:	08009535 	.word	0x08009535
 80094d4:	08009535 	.word	0x08009535
 80094d8:	08009535 	.word	0x08009535
 80094dc:	08009535 	.word	0x08009535
 80094e0:	08009535 	.word	0x08009535
 80094e4:	0800953d 	.word	0x0800953d
 80094e8:	08009535 	.word	0x08009535
 80094ec:	08009535 	.word	0x08009535
 80094f0:	08009535 	.word	0x08009535
 80094f4:	08009535 	.word	0x08009535
 80094f8:	08009535 	.word	0x08009535
 80094fc:	08009535 	.word	0x08009535
 8009500:	08009535 	.word	0x08009535
 8009504:	0800953d 	.word	0x0800953d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009508:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800950c:	3308      	adds	r3, #8
 800950e:	2101      	movs	r1, #1
 8009510:	4618      	mov	r0, r3
 8009512:	f001 fe95 	bl	800b240 <RCCEx_PLL2_Config>
 8009516:	4603      	mov	r3, r0
 8009518:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800951c:	e00f      	b.n	800953e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800951e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009522:	3328      	adds	r3, #40	; 0x28
 8009524:	2101      	movs	r1, #1
 8009526:	4618      	mov	r0, r3
 8009528:	f001 ff3c 	bl	800b3a4 <RCCEx_PLL3_Config>
 800952c:	4603      	mov	r3, r0
 800952e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009532:	e004      	b.n	800953e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009534:	2301      	movs	r3, #1
 8009536:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800953a:	e000      	b.n	800953e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800953c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800953e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009542:	2b00      	cmp	r3, #0
 8009544:	d10a      	bne.n	800955c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009546:	4bbf      	ldr	r3, [pc, #764]	; (8009844 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800954a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800954e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009552:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009554:	4abb      	ldr	r2, [pc, #748]	; (8009844 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009556:	430b      	orrs	r3, r1
 8009558:	6553      	str	r3, [r2, #84]	; 0x54
 800955a:	e003      	b.n	8009564 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800955c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009560:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009564:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800956c:	f002 0302 	and.w	r3, r2, #2
 8009570:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009574:	2300      	movs	r3, #0
 8009576:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800957a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800957e:	460b      	mov	r3, r1
 8009580:	4313      	orrs	r3, r2
 8009582:	d041      	beq.n	8009608 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009584:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009588:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800958a:	2b05      	cmp	r3, #5
 800958c:	d824      	bhi.n	80095d8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800958e:	a201      	add	r2, pc, #4	; (adr r2, 8009594 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8009590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009594:	080095e1 	.word	0x080095e1
 8009598:	080095ad 	.word	0x080095ad
 800959c:	080095c3 	.word	0x080095c3
 80095a0:	080095e1 	.word	0x080095e1
 80095a4:	080095e1 	.word	0x080095e1
 80095a8:	080095e1 	.word	0x080095e1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80095ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095b0:	3308      	adds	r3, #8
 80095b2:	2101      	movs	r1, #1
 80095b4:	4618      	mov	r0, r3
 80095b6:	f001 fe43 	bl	800b240 <RCCEx_PLL2_Config>
 80095ba:	4603      	mov	r3, r0
 80095bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80095c0:	e00f      	b.n	80095e2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80095c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095c6:	3328      	adds	r3, #40	; 0x28
 80095c8:	2101      	movs	r1, #1
 80095ca:	4618      	mov	r0, r3
 80095cc:	f001 feea 	bl	800b3a4 <RCCEx_PLL3_Config>
 80095d0:	4603      	mov	r3, r0
 80095d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80095d6:	e004      	b.n	80095e2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80095d8:	2301      	movs	r3, #1
 80095da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80095de:	e000      	b.n	80095e2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80095e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d10a      	bne.n	8009600 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80095ea:	4b96      	ldr	r3, [pc, #600]	; (8009844 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80095ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095ee:	f023 0107 	bic.w	r1, r3, #7
 80095f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80095f8:	4a92      	ldr	r2, [pc, #584]	; (8009844 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80095fa:	430b      	orrs	r3, r1
 80095fc:	6553      	str	r3, [r2, #84]	; 0x54
 80095fe:	e003      	b.n	8009608 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009600:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009604:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009608:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800960c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009610:	f002 0304 	and.w	r3, r2, #4
 8009614:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009618:	2300      	movs	r3, #0
 800961a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800961e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8009622:	460b      	mov	r3, r1
 8009624:	4313      	orrs	r3, r2
 8009626:	d044      	beq.n	80096b2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009628:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800962c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009630:	2b05      	cmp	r3, #5
 8009632:	d825      	bhi.n	8009680 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8009634:	a201      	add	r2, pc, #4	; (adr r2, 800963c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8009636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800963a:	bf00      	nop
 800963c:	08009689 	.word	0x08009689
 8009640:	08009655 	.word	0x08009655
 8009644:	0800966b 	.word	0x0800966b
 8009648:	08009689 	.word	0x08009689
 800964c:	08009689 	.word	0x08009689
 8009650:	08009689 	.word	0x08009689
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009654:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009658:	3308      	adds	r3, #8
 800965a:	2101      	movs	r1, #1
 800965c:	4618      	mov	r0, r3
 800965e:	f001 fdef 	bl	800b240 <RCCEx_PLL2_Config>
 8009662:	4603      	mov	r3, r0
 8009664:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009668:	e00f      	b.n	800968a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800966a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800966e:	3328      	adds	r3, #40	; 0x28
 8009670:	2101      	movs	r1, #1
 8009672:	4618      	mov	r0, r3
 8009674:	f001 fe96 	bl	800b3a4 <RCCEx_PLL3_Config>
 8009678:	4603      	mov	r3, r0
 800967a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800967e:	e004      	b.n	800968a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009680:	2301      	movs	r3, #1
 8009682:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009686:	e000      	b.n	800968a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8009688:	bf00      	nop
    }

    if (ret == HAL_OK)
 800968a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800968e:	2b00      	cmp	r3, #0
 8009690:	d10b      	bne.n	80096aa <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009692:	4b6c      	ldr	r3, [pc, #432]	; (8009844 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009696:	f023 0107 	bic.w	r1, r3, #7
 800969a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800969e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80096a2:	4a68      	ldr	r2, [pc, #416]	; (8009844 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80096a4:	430b      	orrs	r3, r1
 80096a6:	6593      	str	r3, [r2, #88]	; 0x58
 80096a8:	e003      	b.n	80096b2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80096ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80096b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ba:	f002 0320 	and.w	r3, r2, #32
 80096be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80096c2:	2300      	movs	r3, #0
 80096c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80096c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80096cc:	460b      	mov	r3, r1
 80096ce:	4313      	orrs	r3, r2
 80096d0:	d055      	beq.n	800977e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80096d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80096de:	d033      	beq.n	8009748 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80096e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80096e4:	d82c      	bhi.n	8009740 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80096e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096ea:	d02f      	beq.n	800974c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80096ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096f0:	d826      	bhi.n	8009740 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80096f2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80096f6:	d02b      	beq.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80096f8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80096fc:	d820      	bhi.n	8009740 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80096fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009702:	d012      	beq.n	800972a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009704:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009708:	d81a      	bhi.n	8009740 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800970a:	2b00      	cmp	r3, #0
 800970c:	d022      	beq.n	8009754 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800970e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009712:	d115      	bne.n	8009740 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009714:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009718:	3308      	adds	r3, #8
 800971a:	2100      	movs	r1, #0
 800971c:	4618      	mov	r0, r3
 800971e:	f001 fd8f 	bl	800b240 <RCCEx_PLL2_Config>
 8009722:	4603      	mov	r3, r0
 8009724:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009728:	e015      	b.n	8009756 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800972a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800972e:	3328      	adds	r3, #40	; 0x28
 8009730:	2102      	movs	r1, #2
 8009732:	4618      	mov	r0, r3
 8009734:	f001 fe36 	bl	800b3a4 <RCCEx_PLL3_Config>
 8009738:	4603      	mov	r3, r0
 800973a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800973e:	e00a      	b.n	8009756 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009740:	2301      	movs	r3, #1
 8009742:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009746:	e006      	b.n	8009756 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009748:	bf00      	nop
 800974a:	e004      	b.n	8009756 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800974c:	bf00      	nop
 800974e:	e002      	b.n	8009756 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009750:	bf00      	nop
 8009752:	e000      	b.n	8009756 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009754:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009756:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800975a:	2b00      	cmp	r3, #0
 800975c:	d10b      	bne.n	8009776 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800975e:	4b39      	ldr	r3, [pc, #228]	; (8009844 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009762:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8009766:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800976a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800976e:	4a35      	ldr	r2, [pc, #212]	; (8009844 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009770:	430b      	orrs	r3, r1
 8009772:	6553      	str	r3, [r2, #84]	; 0x54
 8009774:	e003      	b.n	800977e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009776:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800977a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800977e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009786:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800978a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800978e:	2300      	movs	r3, #0
 8009790:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009794:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8009798:	460b      	mov	r3, r1
 800979a:	4313      	orrs	r3, r2
 800979c:	d058      	beq.n	8009850 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800979e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80097a6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80097aa:	d033      	beq.n	8009814 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80097ac:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80097b0:	d82c      	bhi.n	800980c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80097b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097b6:	d02f      	beq.n	8009818 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80097b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097bc:	d826      	bhi.n	800980c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80097be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80097c2:	d02b      	beq.n	800981c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80097c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80097c8:	d820      	bhi.n	800980c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80097ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80097ce:	d012      	beq.n	80097f6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80097d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80097d4:	d81a      	bhi.n	800980c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d022      	beq.n	8009820 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80097da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097de:	d115      	bne.n	800980c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80097e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097e4:	3308      	adds	r3, #8
 80097e6:	2100      	movs	r1, #0
 80097e8:	4618      	mov	r0, r3
 80097ea:	f001 fd29 	bl	800b240 <RCCEx_PLL2_Config>
 80097ee:	4603      	mov	r3, r0
 80097f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80097f4:	e015      	b.n	8009822 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80097f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097fa:	3328      	adds	r3, #40	; 0x28
 80097fc:	2102      	movs	r1, #2
 80097fe:	4618      	mov	r0, r3
 8009800:	f001 fdd0 	bl	800b3a4 <RCCEx_PLL3_Config>
 8009804:	4603      	mov	r3, r0
 8009806:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800980a:	e00a      	b.n	8009822 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800980c:	2301      	movs	r3, #1
 800980e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009812:	e006      	b.n	8009822 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009814:	bf00      	nop
 8009816:	e004      	b.n	8009822 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009818:	bf00      	nop
 800981a:	e002      	b.n	8009822 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800981c:	bf00      	nop
 800981e:	e000      	b.n	8009822 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009820:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009822:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009826:	2b00      	cmp	r3, #0
 8009828:	d10e      	bne.n	8009848 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800982a:	4b06      	ldr	r3, [pc, #24]	; (8009844 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800982c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800982e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8009832:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009836:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800983a:	4a02      	ldr	r2, [pc, #8]	; (8009844 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800983c:	430b      	orrs	r3, r1
 800983e:	6593      	str	r3, [r2, #88]	; 0x58
 8009840:	e006      	b.n	8009850 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8009842:	bf00      	nop
 8009844:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009848:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800984c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009850:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009858:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800985c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009860:	2300      	movs	r3, #0
 8009862:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009866:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800986a:	460b      	mov	r3, r1
 800986c:	4313      	orrs	r3, r2
 800986e:	d055      	beq.n	800991c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009870:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009874:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009878:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800987c:	d033      	beq.n	80098e6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800987e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009882:	d82c      	bhi.n	80098de <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009884:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009888:	d02f      	beq.n	80098ea <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800988a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800988e:	d826      	bhi.n	80098de <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009890:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009894:	d02b      	beq.n	80098ee <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8009896:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800989a:	d820      	bhi.n	80098de <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800989c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80098a0:	d012      	beq.n	80098c8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80098a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80098a6:	d81a      	bhi.n	80098de <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d022      	beq.n	80098f2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80098ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80098b0:	d115      	bne.n	80098de <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80098b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098b6:	3308      	adds	r3, #8
 80098b8:	2100      	movs	r1, #0
 80098ba:	4618      	mov	r0, r3
 80098bc:	f001 fcc0 	bl	800b240 <RCCEx_PLL2_Config>
 80098c0:	4603      	mov	r3, r0
 80098c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80098c6:	e015      	b.n	80098f4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80098c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098cc:	3328      	adds	r3, #40	; 0x28
 80098ce:	2102      	movs	r1, #2
 80098d0:	4618      	mov	r0, r3
 80098d2:	f001 fd67 	bl	800b3a4 <RCCEx_PLL3_Config>
 80098d6:	4603      	mov	r3, r0
 80098d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80098dc:	e00a      	b.n	80098f4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80098de:	2301      	movs	r3, #1
 80098e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80098e4:	e006      	b.n	80098f4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80098e6:	bf00      	nop
 80098e8:	e004      	b.n	80098f4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80098ea:	bf00      	nop
 80098ec:	e002      	b.n	80098f4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80098ee:	bf00      	nop
 80098f0:	e000      	b.n	80098f4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80098f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d10b      	bne.n	8009914 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80098fc:	4ba1      	ldr	r3, [pc, #644]	; (8009b84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80098fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009900:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8009904:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009908:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800990c:	4a9d      	ldr	r2, [pc, #628]	; (8009b84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800990e:	430b      	orrs	r3, r1
 8009910:	6593      	str	r3, [r2, #88]	; 0x58
 8009912:	e003      	b.n	800991c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009914:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009918:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800991c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009924:	f002 0308 	and.w	r3, r2, #8
 8009928:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800992c:	2300      	movs	r3, #0
 800992e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009932:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8009936:	460b      	mov	r3, r1
 8009938:	4313      	orrs	r3, r2
 800993a:	d01e      	beq.n	800997a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800993c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009940:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009944:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009948:	d10c      	bne.n	8009964 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800994a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800994e:	3328      	adds	r3, #40	; 0x28
 8009950:	2102      	movs	r1, #2
 8009952:	4618      	mov	r0, r3
 8009954:	f001 fd26 	bl	800b3a4 <RCCEx_PLL3_Config>
 8009958:	4603      	mov	r3, r0
 800995a:	2b00      	cmp	r3, #0
 800995c:	d002      	beq.n	8009964 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800995e:	2301      	movs	r3, #1
 8009960:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009964:	4b87      	ldr	r3, [pc, #540]	; (8009b84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009968:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800996c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009970:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009974:	4a83      	ldr	r2, [pc, #524]	; (8009b84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009976:	430b      	orrs	r3, r1
 8009978:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800997a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800997e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009982:	f002 0310 	and.w	r3, r2, #16
 8009986:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800998a:	2300      	movs	r3, #0
 800998c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009990:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8009994:	460b      	mov	r3, r1
 8009996:	4313      	orrs	r3, r2
 8009998:	d01e      	beq.n	80099d8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800999a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800999e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80099a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099a6:	d10c      	bne.n	80099c2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80099a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099ac:	3328      	adds	r3, #40	; 0x28
 80099ae:	2102      	movs	r1, #2
 80099b0:	4618      	mov	r0, r3
 80099b2:	f001 fcf7 	bl	800b3a4 <RCCEx_PLL3_Config>
 80099b6:	4603      	mov	r3, r0
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d002      	beq.n	80099c2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80099bc:	2301      	movs	r3, #1
 80099be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80099c2:	4b70      	ldr	r3, [pc, #448]	; (8009b84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80099c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099c6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80099ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80099d2:	4a6c      	ldr	r2, [pc, #432]	; (8009b84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80099d4:	430b      	orrs	r3, r1
 80099d6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80099d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099e0:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80099e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80099e8:	2300      	movs	r3, #0
 80099ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80099ee:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80099f2:	460b      	mov	r3, r1
 80099f4:	4313      	orrs	r3, r2
 80099f6:	d03e      	beq.n	8009a76 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80099f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009a00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009a04:	d022      	beq.n	8009a4c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8009a06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009a0a:	d81b      	bhi.n	8009a44 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d003      	beq.n	8009a18 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8009a10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a14:	d00b      	beq.n	8009a2e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8009a16:	e015      	b.n	8009a44 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009a18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a1c:	3308      	adds	r3, #8
 8009a1e:	2100      	movs	r1, #0
 8009a20:	4618      	mov	r0, r3
 8009a22:	f001 fc0d 	bl	800b240 <RCCEx_PLL2_Config>
 8009a26:	4603      	mov	r3, r0
 8009a28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009a2c:	e00f      	b.n	8009a4e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009a2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a32:	3328      	adds	r3, #40	; 0x28
 8009a34:	2102      	movs	r1, #2
 8009a36:	4618      	mov	r0, r3
 8009a38:	f001 fcb4 	bl	800b3a4 <RCCEx_PLL3_Config>
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009a42:	e004      	b.n	8009a4e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a44:	2301      	movs	r3, #1
 8009a46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009a4a:	e000      	b.n	8009a4e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8009a4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d10b      	bne.n	8009a6e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009a56:	4b4b      	ldr	r3, [pc, #300]	; (8009b84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a5a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8009a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a62:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009a66:	4a47      	ldr	r2, [pc, #284]	; (8009b84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009a68:	430b      	orrs	r3, r1
 8009a6a:	6593      	str	r3, [r2, #88]	; 0x58
 8009a6c:	e003      	b.n	8009a76 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a72:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a7e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8009a82:	67bb      	str	r3, [r7, #120]	; 0x78
 8009a84:	2300      	movs	r3, #0
 8009a86:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009a88:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8009a8c:	460b      	mov	r3, r1
 8009a8e:	4313      	orrs	r3, r2
 8009a90:	d03b      	beq.n	8009b0a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009a92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a9a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009a9e:	d01f      	beq.n	8009ae0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8009aa0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009aa4:	d818      	bhi.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8009aa6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009aaa:	d003      	beq.n	8009ab4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8009aac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009ab0:	d007      	beq.n	8009ac2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8009ab2:	e011      	b.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ab4:	4b33      	ldr	r3, [pc, #204]	; (8009b84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ab8:	4a32      	ldr	r2, [pc, #200]	; (8009b84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009aba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009abe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009ac0:	e00f      	b.n	8009ae2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009ac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ac6:	3328      	adds	r3, #40	; 0x28
 8009ac8:	2101      	movs	r1, #1
 8009aca:	4618      	mov	r0, r3
 8009acc:	f001 fc6a 	bl	800b3a4 <RCCEx_PLL3_Config>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8009ad6:	e004      	b.n	8009ae2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ad8:	2301      	movs	r3, #1
 8009ada:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009ade:	e000      	b.n	8009ae2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8009ae0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ae2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d10b      	bne.n	8009b02 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009aea:	4b26      	ldr	r3, [pc, #152]	; (8009b84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009aee:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009afa:	4a22      	ldr	r2, [pc, #136]	; (8009b84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009afc:	430b      	orrs	r3, r1
 8009afe:	6553      	str	r3, [r2, #84]	; 0x54
 8009b00:	e003      	b.n	8009b0a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b06:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009b0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b12:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8009b16:	673b      	str	r3, [r7, #112]	; 0x70
 8009b18:	2300      	movs	r3, #0
 8009b1a:	677b      	str	r3, [r7, #116]	; 0x74
 8009b1c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8009b20:	460b      	mov	r3, r1
 8009b22:	4313      	orrs	r3, r2
 8009b24:	d034      	beq.n	8009b90 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009b26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d003      	beq.n	8009b38 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8009b30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b34:	d007      	beq.n	8009b46 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8009b36:	e011      	b.n	8009b5c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b38:	4b12      	ldr	r3, [pc, #72]	; (8009b84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b3c:	4a11      	ldr	r2, [pc, #68]	; (8009b84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009b3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b42:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009b44:	e00e      	b.n	8009b64 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009b46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b4a:	3308      	adds	r3, #8
 8009b4c:	2102      	movs	r1, #2
 8009b4e:	4618      	mov	r0, r3
 8009b50:	f001 fb76 	bl	800b240 <RCCEx_PLL2_Config>
 8009b54:	4603      	mov	r3, r0
 8009b56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009b5a:	e003      	b.n	8009b64 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009b62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b64:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d10d      	bne.n	8009b88 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009b6c:	4b05      	ldr	r3, [pc, #20]	; (8009b84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009b6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b70:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b7a:	4a02      	ldr	r2, [pc, #8]	; (8009b84 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009b7c:	430b      	orrs	r3, r1
 8009b7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009b80:	e006      	b.n	8009b90 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8009b82:	bf00      	nop
 8009b84:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b88:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b8c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009b90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b98:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8009b9c:	66bb      	str	r3, [r7, #104]	; 0x68
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009ba2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8009ba6:	460b      	mov	r3, r1
 8009ba8:	4313      	orrs	r3, r2
 8009baa:	d00c      	beq.n	8009bc6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009bac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bb0:	3328      	adds	r3, #40	; 0x28
 8009bb2:	2102      	movs	r1, #2
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	f001 fbf5 	bl	800b3a4 <RCCEx_PLL3_Config>
 8009bba:	4603      	mov	r3, r0
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d002      	beq.n	8009bc6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8009bc0:	2301      	movs	r3, #1
 8009bc2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009bc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bce:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8009bd2:	663b      	str	r3, [r7, #96]	; 0x60
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	667b      	str	r3, [r7, #100]	; 0x64
 8009bd8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8009bdc:	460b      	mov	r3, r1
 8009bde:	4313      	orrs	r3, r2
 8009be0:	d038      	beq.n	8009c54 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009be6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009bea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009bee:	d018      	beq.n	8009c22 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8009bf0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009bf4:	d811      	bhi.n	8009c1a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009bf6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009bfa:	d014      	beq.n	8009c26 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8009bfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c00:	d80b      	bhi.n	8009c1a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d011      	beq.n	8009c2a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8009c06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c0a:	d106      	bne.n	8009c1a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c0c:	4bc3      	ldr	r3, [pc, #780]	; (8009f1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c10:	4ac2      	ldr	r2, [pc, #776]	; (8009f1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009c12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c16:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009c18:	e008      	b.n	8009c2c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009c20:	e004      	b.n	8009c2c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009c22:	bf00      	nop
 8009c24:	e002      	b.n	8009c2c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009c26:	bf00      	nop
 8009c28:	e000      	b.n	8009c2c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009c2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c2c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d10b      	bne.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009c34:	4bb9      	ldr	r3, [pc, #740]	; (8009f1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c38:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009c3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009c44:	4ab5      	ldr	r2, [pc, #724]	; (8009f1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009c46:	430b      	orrs	r3, r1
 8009c48:	6553      	str	r3, [r2, #84]	; 0x54
 8009c4a:	e003      	b.n	8009c54 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c4c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c50:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009c54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c5c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8009c60:	65bb      	str	r3, [r7, #88]	; 0x58
 8009c62:	2300      	movs	r3, #0
 8009c64:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009c66:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8009c6a:	460b      	mov	r3, r1
 8009c6c:	4313      	orrs	r3, r2
 8009c6e:	d009      	beq.n	8009c84 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009c70:	4baa      	ldr	r3, [pc, #680]	; (8009f1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009c72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c74:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009c78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c7e:	4aa7      	ldr	r2, [pc, #668]	; (8009f1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009c80:	430b      	orrs	r3, r1
 8009c82:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009c84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c8c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8009c90:	653b      	str	r3, [r7, #80]	; 0x50
 8009c92:	2300      	movs	r3, #0
 8009c94:	657b      	str	r3, [r7, #84]	; 0x54
 8009c96:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8009c9a:	460b      	mov	r3, r1
 8009c9c:	4313      	orrs	r3, r2
 8009c9e:	d00a      	beq.n	8009cb6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009ca0:	4b9e      	ldr	r3, [pc, #632]	; (8009f1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009ca2:	691b      	ldr	r3, [r3, #16]
 8009ca4:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8009ca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cac:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009cb0:	4a9a      	ldr	r2, [pc, #616]	; (8009f1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009cb2:	430b      	orrs	r3, r1
 8009cb4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009cb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cbe:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8009cc2:	64bb      	str	r3, [r7, #72]	; 0x48
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009cc8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8009ccc:	460b      	mov	r3, r1
 8009cce:	4313      	orrs	r3, r2
 8009cd0:	d009      	beq.n	8009ce6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009cd2:	4b92      	ldr	r3, [pc, #584]	; (8009f1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009cd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cd6:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8009cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ce0:	4a8e      	ldr	r2, [pc, #568]	; (8009f1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009ce2:	430b      	orrs	r3, r1
 8009ce4:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cee:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8009cf2:	643b      	str	r3, [r7, #64]	; 0x40
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	647b      	str	r3, [r7, #68]	; 0x44
 8009cf8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8009cfc:	460b      	mov	r3, r1
 8009cfe:	4313      	orrs	r3, r2
 8009d00:	d00e      	beq.n	8009d20 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009d02:	4b86      	ldr	r3, [pc, #536]	; (8009f1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009d04:	691b      	ldr	r3, [r3, #16]
 8009d06:	4a85      	ldr	r2, [pc, #532]	; (8009f1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009d08:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009d0c:	6113      	str	r3, [r2, #16]
 8009d0e:	4b83      	ldr	r3, [pc, #524]	; (8009f1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009d10:	6919      	ldr	r1, [r3, #16]
 8009d12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d16:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8009d1a:	4a80      	ldr	r2, [pc, #512]	; (8009f1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009d1c:	430b      	orrs	r3, r1
 8009d1e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009d20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d28:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8009d2c:	63bb      	str	r3, [r7, #56]	; 0x38
 8009d2e:	2300      	movs	r3, #0
 8009d30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d32:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8009d36:	460b      	mov	r3, r1
 8009d38:	4313      	orrs	r3, r2
 8009d3a:	d009      	beq.n	8009d50 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009d3c:	4b77      	ldr	r3, [pc, #476]	; (8009f1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009d3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d40:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8009d44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d4a:	4a74      	ldr	r2, [pc, #464]	; (8009f1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009d4c:	430b      	orrs	r3, r1
 8009d4e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009d50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d58:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8009d5c:	633b      	str	r3, [r7, #48]	; 0x30
 8009d5e:	2300      	movs	r3, #0
 8009d60:	637b      	str	r3, [r7, #52]	; 0x34
 8009d62:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8009d66:	460b      	mov	r3, r1
 8009d68:	4313      	orrs	r3, r2
 8009d6a:	d00a      	beq.n	8009d82 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009d6c:	4b6b      	ldr	r3, [pc, #428]	; (8009f1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d70:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8009d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d7c:	4a67      	ldr	r2, [pc, #412]	; (8009f1c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009d7e:	430b      	orrs	r3, r1
 8009d80:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d8a:	2100      	movs	r1, #0
 8009d8c:	62b9      	str	r1, [r7, #40]	; 0x28
 8009d8e:	f003 0301 	and.w	r3, r3, #1
 8009d92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d94:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8009d98:	460b      	mov	r3, r1
 8009d9a:	4313      	orrs	r3, r2
 8009d9c:	d011      	beq.n	8009dc2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009da2:	3308      	adds	r3, #8
 8009da4:	2100      	movs	r1, #0
 8009da6:	4618      	mov	r0, r3
 8009da8:	f001 fa4a 	bl	800b240 <RCCEx_PLL2_Config>
 8009dac:	4603      	mov	r3, r0
 8009dae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009db2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d003      	beq.n	8009dc2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009dbe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009dc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dca:	2100      	movs	r1, #0
 8009dcc:	6239      	str	r1, [r7, #32]
 8009dce:	f003 0302 	and.w	r3, r3, #2
 8009dd2:	627b      	str	r3, [r7, #36]	; 0x24
 8009dd4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009dd8:	460b      	mov	r3, r1
 8009dda:	4313      	orrs	r3, r2
 8009ddc:	d011      	beq.n	8009e02 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009de2:	3308      	adds	r3, #8
 8009de4:	2101      	movs	r1, #1
 8009de6:	4618      	mov	r0, r3
 8009de8:	f001 fa2a 	bl	800b240 <RCCEx_PLL2_Config>
 8009dec:	4603      	mov	r3, r0
 8009dee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009df2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d003      	beq.n	8009e02 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dfa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009dfe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009e02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e0a:	2100      	movs	r1, #0
 8009e0c:	61b9      	str	r1, [r7, #24]
 8009e0e:	f003 0304 	and.w	r3, r3, #4
 8009e12:	61fb      	str	r3, [r7, #28]
 8009e14:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009e18:	460b      	mov	r3, r1
 8009e1a:	4313      	orrs	r3, r2
 8009e1c:	d011      	beq.n	8009e42 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e22:	3308      	adds	r3, #8
 8009e24:	2102      	movs	r1, #2
 8009e26:	4618      	mov	r0, r3
 8009e28:	f001 fa0a 	bl	800b240 <RCCEx_PLL2_Config>
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009e32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d003      	beq.n	8009e42 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e3e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e4a:	2100      	movs	r1, #0
 8009e4c:	6139      	str	r1, [r7, #16]
 8009e4e:	f003 0308 	and.w	r3, r3, #8
 8009e52:	617b      	str	r3, [r7, #20]
 8009e54:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009e58:	460b      	mov	r3, r1
 8009e5a:	4313      	orrs	r3, r2
 8009e5c:	d011      	beq.n	8009e82 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009e5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e62:	3328      	adds	r3, #40	; 0x28
 8009e64:	2100      	movs	r1, #0
 8009e66:	4618      	mov	r0, r3
 8009e68:	f001 fa9c 	bl	800b3a4 <RCCEx_PLL3_Config>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8009e72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d003      	beq.n	8009e82 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e7e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e8a:	2100      	movs	r1, #0
 8009e8c:	60b9      	str	r1, [r7, #8]
 8009e8e:	f003 0310 	and.w	r3, r3, #16
 8009e92:	60fb      	str	r3, [r7, #12]
 8009e94:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009e98:	460b      	mov	r3, r1
 8009e9a:	4313      	orrs	r3, r2
 8009e9c:	d011      	beq.n	8009ec2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009e9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ea2:	3328      	adds	r3, #40	; 0x28
 8009ea4:	2101      	movs	r1, #1
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f001 fa7c 	bl	800b3a4 <RCCEx_PLL3_Config>
 8009eac:	4603      	mov	r3, r0
 8009eae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009eb2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d003      	beq.n	8009ec2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009eba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ebe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eca:	2100      	movs	r1, #0
 8009ecc:	6039      	str	r1, [r7, #0]
 8009ece:	f003 0320 	and.w	r3, r3, #32
 8009ed2:	607b      	str	r3, [r7, #4]
 8009ed4:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009ed8:	460b      	mov	r3, r1
 8009eda:	4313      	orrs	r3, r2
 8009edc:	d011      	beq.n	8009f02 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009ede:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ee2:	3328      	adds	r3, #40	; 0x28
 8009ee4:	2102      	movs	r1, #2
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	f001 fa5c 	bl	800b3a4 <RCCEx_PLL3_Config>
 8009eec:	4603      	mov	r3, r0
 8009eee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009ef2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d003      	beq.n	8009f02 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009efa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009efe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8009f02:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d101      	bne.n	8009f0e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	e000      	b.n	8009f10 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8009f0e:	2301      	movs	r3, #1
}
 8009f10:	4618      	mov	r0, r3
 8009f12:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8009f16:	46bd      	mov	sp, r7
 8009f18:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009f1c:	58024400 	.word	0x58024400

08009f20 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b090      	sub	sp, #64	; 0x40
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009f2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f2e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8009f32:	430b      	orrs	r3, r1
 8009f34:	f040 8094 	bne.w	800a060 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8009f38:	4b9e      	ldr	r3, [pc, #632]	; (800a1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009f3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f3c:	f003 0307 	and.w	r3, r3, #7
 8009f40:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8009f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f44:	2b04      	cmp	r3, #4
 8009f46:	f200 8087 	bhi.w	800a058 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8009f4a:	a201      	add	r2, pc, #4	; (adr r2, 8009f50 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8009f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f50:	08009f65 	.word	0x08009f65
 8009f54:	08009f8d 	.word	0x08009f8d
 8009f58:	08009fb5 	.word	0x08009fb5
 8009f5c:	0800a051 	.word	0x0800a051
 8009f60:	08009fdd 	.word	0x08009fdd
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009f64:	4b93      	ldr	r3, [pc, #588]	; (800a1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009f70:	d108      	bne.n	8009f84 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009f72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009f76:	4618      	mov	r0, r3
 8009f78:	f001 f810 	bl	800af9c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f80:	f000 bd45 	b.w	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f84:	2300      	movs	r3, #0
 8009f86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f88:	f000 bd41 	b.w	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009f8c:	4b89      	ldr	r3, [pc, #548]	; (800a1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009f94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009f98:	d108      	bne.n	8009fac <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f9a:	f107 0318 	add.w	r3, r7, #24
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f000 fd54 	bl	800aa4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009fa4:	69bb      	ldr	r3, [r7, #24]
 8009fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009fa8:	f000 bd31 	b.w	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009fac:	2300      	movs	r3, #0
 8009fae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009fb0:	f000 bd2d 	b.w	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009fb4:	4b7f      	ldr	r3, [pc, #508]	; (800a1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009fbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009fc0:	d108      	bne.n	8009fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009fc2:	f107 030c 	add.w	r3, r7, #12
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	f000 fe94 	bl	800acf4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009fd0:	f000 bd1d 	b.w	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009fd8:	f000 bd19 	b.w	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009fdc:	4b75      	ldr	r3, [pc, #468]	; (800a1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009fde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fe0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009fe4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009fe6:	4b73      	ldr	r3, [pc, #460]	; (800a1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	f003 0304 	and.w	r3, r3, #4
 8009fee:	2b04      	cmp	r3, #4
 8009ff0:	d10c      	bne.n	800a00c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8009ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d109      	bne.n	800a00c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009ff8:	4b6e      	ldr	r3, [pc, #440]	; (800a1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	08db      	lsrs	r3, r3, #3
 8009ffe:	f003 0303 	and.w	r3, r3, #3
 800a002:	4a6d      	ldr	r2, [pc, #436]	; (800a1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a004:	fa22 f303 	lsr.w	r3, r2, r3
 800a008:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a00a:	e01f      	b.n	800a04c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a00c:	4b69      	ldr	r3, [pc, #420]	; (800a1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a014:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a018:	d106      	bne.n	800a028 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800a01a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a01c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a020:	d102      	bne.n	800a028 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a022:	4b66      	ldr	r3, [pc, #408]	; (800a1bc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a024:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a026:	e011      	b.n	800a04c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a028:	4b62      	ldr	r3, [pc, #392]	; (800a1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a030:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a034:	d106      	bne.n	800a044 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800a036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a038:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a03c:	d102      	bne.n	800a044 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a03e:	4b60      	ldr	r3, [pc, #384]	; (800a1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a040:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a042:	e003      	b.n	800a04c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a044:	2300      	movs	r3, #0
 800a046:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a048:	f000 bce1 	b.w	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a04c:	f000 bcdf 	b.w	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a050:	4b5c      	ldr	r3, [pc, #368]	; (800a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a052:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a054:	f000 bcdb 	b.w	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a058:	2300      	movs	r3, #0
 800a05a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a05c:	f000 bcd7 	b.w	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a060:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a064:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800a068:	430b      	orrs	r3, r1
 800a06a:	f040 80ad 	bne.w	800a1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800a06e:	4b51      	ldr	r3, [pc, #324]	; (800a1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a070:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a072:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800a076:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a07a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a07e:	d056      	beq.n	800a12e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800a080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a082:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a086:	f200 8090 	bhi.w	800a1aa <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a08a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a08c:	2bc0      	cmp	r3, #192	; 0xc0
 800a08e:	f000 8088 	beq.w	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800a092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a094:	2bc0      	cmp	r3, #192	; 0xc0
 800a096:	f200 8088 	bhi.w	800a1aa <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a09a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a09c:	2b80      	cmp	r3, #128	; 0x80
 800a09e:	d032      	beq.n	800a106 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a0a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0a2:	2b80      	cmp	r3, #128	; 0x80
 800a0a4:	f200 8081 	bhi.w	800a1aa <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a0a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d003      	beq.n	800a0b6 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800a0ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0b0:	2b40      	cmp	r3, #64	; 0x40
 800a0b2:	d014      	beq.n	800a0de <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800a0b4:	e079      	b.n	800a1aa <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a0b6:	4b3f      	ldr	r3, [pc, #252]	; (800a1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a0be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a0c2:	d108      	bne.n	800a0d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a0c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	f000 ff67 	bl	800af9c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a0ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0d2:	f000 bc9c 	b.w	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a0da:	f000 bc98 	b.w	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a0de:	4b35      	ldr	r3, [pc, #212]	; (800a1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a0e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a0ea:	d108      	bne.n	800a0fe <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a0ec:	f107 0318 	add.w	r3, r7, #24
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	f000 fcab 	bl	800aa4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a0f6:	69bb      	ldr	r3, [r7, #24]
 800a0f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0fa:	f000 bc88 	b.w	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a0fe:	2300      	movs	r3, #0
 800a100:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a102:	f000 bc84 	b.w	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a106:	4b2b      	ldr	r3, [pc, #172]	; (800a1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a10e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a112:	d108      	bne.n	800a126 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a114:	f107 030c 	add.w	r3, r7, #12
 800a118:	4618      	mov	r0, r3
 800a11a:	f000 fdeb 	bl	800acf4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a122:	f000 bc74 	b.w	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a126:	2300      	movs	r3, #0
 800a128:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a12a:	f000 bc70 	b.w	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a12e:	4b21      	ldr	r3, [pc, #132]	; (800a1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a132:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a136:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a138:	4b1e      	ldr	r3, [pc, #120]	; (800a1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	f003 0304 	and.w	r3, r3, #4
 800a140:	2b04      	cmp	r3, #4
 800a142:	d10c      	bne.n	800a15e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800a144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a146:	2b00      	cmp	r3, #0
 800a148:	d109      	bne.n	800a15e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a14a:	4b1a      	ldr	r3, [pc, #104]	; (800a1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	08db      	lsrs	r3, r3, #3
 800a150:	f003 0303 	and.w	r3, r3, #3
 800a154:	4a18      	ldr	r2, [pc, #96]	; (800a1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a156:	fa22 f303 	lsr.w	r3, r2, r3
 800a15a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a15c:	e01f      	b.n	800a19e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a15e:	4b15      	ldr	r3, [pc, #84]	; (800a1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a166:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a16a:	d106      	bne.n	800a17a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800a16c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a16e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a172:	d102      	bne.n	800a17a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a174:	4b11      	ldr	r3, [pc, #68]	; (800a1bc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a176:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a178:	e011      	b.n	800a19e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a17a:	4b0e      	ldr	r3, [pc, #56]	; (800a1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a182:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a186:	d106      	bne.n	800a196 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800a188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a18a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a18e:	d102      	bne.n	800a196 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a190:	4b0b      	ldr	r3, [pc, #44]	; (800a1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a192:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a194:	e003      	b.n	800a19e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a196:	2300      	movs	r3, #0
 800a198:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a19a:	f000 bc38 	b.w	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a19e:	f000 bc36 	b.w	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a1a2:	4b08      	ldr	r3, [pc, #32]	; (800a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a1a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a1a6:	f000 bc32 	b.w	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a1ae:	f000 bc2e 	b.w	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a1b2:	bf00      	nop
 800a1b4:	58024400 	.word	0x58024400
 800a1b8:	03d09000 	.word	0x03d09000
 800a1bc:	003d0900 	.word	0x003d0900
 800a1c0:	017d7840 	.word	0x017d7840
 800a1c4:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a1c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a1cc:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800a1d0:	430b      	orrs	r3, r1
 800a1d2:	f040 809c 	bne.w	800a30e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a1d6:	4b9e      	ldr	r3, [pc, #632]	; (800a450 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a1d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1da:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800a1de:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a1e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a1e6:	d054      	beq.n	800a292 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800a1e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a1ee:	f200 808b 	bhi.w	800a308 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a1f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1f4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a1f8:	f000 8083 	beq.w	800a302 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800a1fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1fe:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a202:	f200 8081 	bhi.w	800a308 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a208:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a20c:	d02f      	beq.n	800a26e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800a20e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a210:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a214:	d878      	bhi.n	800a308 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d004      	beq.n	800a226 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800a21c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a21e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a222:	d012      	beq.n	800a24a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800a224:	e070      	b.n	800a308 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a226:	4b8a      	ldr	r3, [pc, #552]	; (800a450 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a22e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a232:	d107      	bne.n	800a244 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a234:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a238:	4618      	mov	r0, r3
 800a23a:	f000 feaf 	bl	800af9c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a23e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a240:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a242:	e3e4      	b.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a244:	2300      	movs	r3, #0
 800a246:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a248:	e3e1      	b.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a24a:	4b81      	ldr	r3, [pc, #516]	; (800a450 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a252:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a256:	d107      	bne.n	800a268 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a258:	f107 0318 	add.w	r3, r7, #24
 800a25c:	4618      	mov	r0, r3
 800a25e:	f000 fbf5 	bl	800aa4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a262:	69bb      	ldr	r3, [r7, #24]
 800a264:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a266:	e3d2      	b.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a268:	2300      	movs	r3, #0
 800a26a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a26c:	e3cf      	b.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a26e:	4b78      	ldr	r3, [pc, #480]	; (800a450 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a276:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a27a:	d107      	bne.n	800a28c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a27c:	f107 030c 	add.w	r3, r7, #12
 800a280:	4618      	mov	r0, r3
 800a282:	f000 fd37 	bl	800acf4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a28a:	e3c0      	b.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a28c:	2300      	movs	r3, #0
 800a28e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a290:	e3bd      	b.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a292:	4b6f      	ldr	r3, [pc, #444]	; (800a450 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a296:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a29a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a29c:	4b6c      	ldr	r3, [pc, #432]	; (800a450 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	f003 0304 	and.w	r3, r3, #4
 800a2a4:	2b04      	cmp	r3, #4
 800a2a6:	d10c      	bne.n	800a2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800a2a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d109      	bne.n	800a2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a2ae:	4b68      	ldr	r3, [pc, #416]	; (800a450 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	08db      	lsrs	r3, r3, #3
 800a2b4:	f003 0303 	and.w	r3, r3, #3
 800a2b8:	4a66      	ldr	r2, [pc, #408]	; (800a454 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a2ba:	fa22 f303 	lsr.w	r3, r2, r3
 800a2be:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a2c0:	e01e      	b.n	800a300 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a2c2:	4b63      	ldr	r3, [pc, #396]	; (800a450 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2ce:	d106      	bne.n	800a2de <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800a2d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a2d6:	d102      	bne.n	800a2de <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a2d8:	4b5f      	ldr	r3, [pc, #380]	; (800a458 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a2da:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a2dc:	e010      	b.n	800a300 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a2de:	4b5c      	ldr	r3, [pc, #368]	; (800a450 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a2ea:	d106      	bne.n	800a2fa <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800a2ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a2f2:	d102      	bne.n	800a2fa <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a2f4:	4b59      	ldr	r3, [pc, #356]	; (800a45c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a2f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a2f8:	e002      	b.n	800a300 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a2fe:	e386      	b.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a300:	e385      	b.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a302:	4b57      	ldr	r3, [pc, #348]	; (800a460 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a304:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a306:	e382      	b.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a308:	2300      	movs	r3, #0
 800a30a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a30c:	e37f      	b.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a30e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a312:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800a316:	430b      	orrs	r3, r1
 800a318:	f040 80a7 	bne.w	800a46a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800a31c:	4b4c      	ldr	r3, [pc, #304]	; (800a450 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a31e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a320:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800a324:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a328:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a32c:	d055      	beq.n	800a3da <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800a32e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a330:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a334:	f200 8096 	bhi.w	800a464 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a33a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a33e:	f000 8084 	beq.w	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800a342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a344:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a348:	f200 808c 	bhi.w	800a464 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a34c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a34e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a352:	d030      	beq.n	800a3b6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800a354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a356:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a35a:	f200 8083 	bhi.w	800a464 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a35e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a360:	2b00      	cmp	r3, #0
 800a362:	d004      	beq.n	800a36e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800a364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a366:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a36a:	d012      	beq.n	800a392 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800a36c:	e07a      	b.n	800a464 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a36e:	4b38      	ldr	r3, [pc, #224]	; (800a450 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a376:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a37a:	d107      	bne.n	800a38c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a37c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a380:	4618      	mov	r0, r3
 800a382:	f000 fe0b 	bl	800af9c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a388:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a38a:	e340      	b.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a38c:	2300      	movs	r3, #0
 800a38e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a390:	e33d      	b.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a392:	4b2f      	ldr	r3, [pc, #188]	; (800a450 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a39a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a39e:	d107      	bne.n	800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a3a0:	f107 0318 	add.w	r3, r7, #24
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	f000 fb51 	bl	800aa4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a3aa:	69bb      	ldr	r3, [r7, #24]
 800a3ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a3ae:	e32e      	b.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a3b4:	e32b      	b.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a3b6:	4b26      	ldr	r3, [pc, #152]	; (800a450 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a3be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a3c2:	d107      	bne.n	800a3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a3c4:	f107 030c 	add.w	r3, r7, #12
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	f000 fc93 	bl	800acf4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a3d2:	e31c      	b.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a3d8:	e319      	b.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a3da:	4b1d      	ldr	r3, [pc, #116]	; (800a450 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a3dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a3e2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a3e4:	4b1a      	ldr	r3, [pc, #104]	; (800a450 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	f003 0304 	and.w	r3, r3, #4
 800a3ec:	2b04      	cmp	r3, #4
 800a3ee:	d10c      	bne.n	800a40a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800a3f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d109      	bne.n	800a40a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a3f6:	4b16      	ldr	r3, [pc, #88]	; (800a450 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	08db      	lsrs	r3, r3, #3
 800a3fc:	f003 0303 	and.w	r3, r3, #3
 800a400:	4a14      	ldr	r2, [pc, #80]	; (800a454 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a402:	fa22 f303 	lsr.w	r3, r2, r3
 800a406:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a408:	e01e      	b.n	800a448 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a40a:	4b11      	ldr	r3, [pc, #68]	; (800a450 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a412:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a416:	d106      	bne.n	800a426 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800a418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a41a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a41e:	d102      	bne.n	800a426 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a420:	4b0d      	ldr	r3, [pc, #52]	; (800a458 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a422:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a424:	e010      	b.n	800a448 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a426:	4b0a      	ldr	r3, [pc, #40]	; (800a450 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a42e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a432:	d106      	bne.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800a434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a436:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a43a:	d102      	bne.n	800a442 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a43c:	4b07      	ldr	r3, [pc, #28]	; (800a45c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a43e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a440:	e002      	b.n	800a448 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a442:	2300      	movs	r3, #0
 800a444:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a446:	e2e2      	b.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a448:	e2e1      	b.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a44a:	4b05      	ldr	r3, [pc, #20]	; (800a460 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a44c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a44e:	e2de      	b.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a450:	58024400 	.word	0x58024400
 800a454:	03d09000 	.word	0x03d09000
 800a458:	003d0900 	.word	0x003d0900
 800a45c:	017d7840 	.word	0x017d7840
 800a460:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800a464:	2300      	movs	r3, #0
 800a466:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a468:	e2d1      	b.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a46a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a46e:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800a472:	430b      	orrs	r3, r1
 800a474:	f040 809c 	bne.w	800a5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a478:	4b93      	ldr	r3, [pc, #588]	; (800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a47a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a47c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800a480:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a484:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a488:	d054      	beq.n	800a534 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800a48a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a48c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a490:	f200 808b 	bhi.w	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a496:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a49a:	f000 8083 	beq.w	800a5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800a49e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4a0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a4a4:	f200 8081 	bhi.w	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a4a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a4ae:	d02f      	beq.n	800a510 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800a4b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a4b6:	d878      	bhi.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a4b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d004      	beq.n	800a4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800a4be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4c4:	d012      	beq.n	800a4ec <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800a4c6:	e070      	b.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a4c8:	4b7f      	ldr	r3, [pc, #508]	; (800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a4d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a4d4:	d107      	bne.n	800a4e6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a4d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f000 fd5e 	bl	800af9c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a4e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4e4:	e293      	b.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a4ea:	e290      	b.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a4ec:	4b76      	ldr	r3, [pc, #472]	; (800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a4f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a4f8:	d107      	bne.n	800a50a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a4fa:	f107 0318 	add.w	r3, r7, #24
 800a4fe:	4618      	mov	r0, r3
 800a500:	f000 faa4 	bl	800aa4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a504:	69bb      	ldr	r3, [r7, #24]
 800a506:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a508:	e281      	b.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a50a:	2300      	movs	r3, #0
 800a50c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a50e:	e27e      	b.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a510:	4b6d      	ldr	r3, [pc, #436]	; (800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a518:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a51c:	d107      	bne.n	800a52e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a51e:	f107 030c 	add.w	r3, r7, #12
 800a522:	4618      	mov	r0, r3
 800a524:	f000 fbe6 	bl	800acf4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a52c:	e26f      	b.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a52e:	2300      	movs	r3, #0
 800a530:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a532:	e26c      	b.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a534:	4b64      	ldr	r3, [pc, #400]	; (800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a536:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a538:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a53c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a53e:	4b62      	ldr	r3, [pc, #392]	; (800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	f003 0304 	and.w	r3, r3, #4
 800a546:	2b04      	cmp	r3, #4
 800a548:	d10c      	bne.n	800a564 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800a54a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d109      	bne.n	800a564 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a550:	4b5d      	ldr	r3, [pc, #372]	; (800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	08db      	lsrs	r3, r3, #3
 800a556:	f003 0303 	and.w	r3, r3, #3
 800a55a:	4a5c      	ldr	r2, [pc, #368]	; (800a6cc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a55c:	fa22 f303 	lsr.w	r3, r2, r3
 800a560:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a562:	e01e      	b.n	800a5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a564:	4b58      	ldr	r3, [pc, #352]	; (800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a56c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a570:	d106      	bne.n	800a580 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800a572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a574:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a578:	d102      	bne.n	800a580 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a57a:	4b55      	ldr	r3, [pc, #340]	; (800a6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a57c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a57e:	e010      	b.n	800a5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a580:	4b51      	ldr	r3, [pc, #324]	; (800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a588:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a58c:	d106      	bne.n	800a59c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800a58e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a590:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a594:	d102      	bne.n	800a59c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a596:	4b4f      	ldr	r3, [pc, #316]	; (800a6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a598:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a59a:	e002      	b.n	800a5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a59c:	2300      	movs	r3, #0
 800a59e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a5a0:	e235      	b.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a5a2:	e234      	b.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a5a4:	4b4c      	ldr	r3, [pc, #304]	; (800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800a5a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a5a8:	e231      	b.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a5ae:	e22e      	b.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800a5b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a5b4:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800a5b8:	430b      	orrs	r3, r1
 800a5ba:	f040 808f 	bne.w	800a6dc <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800a5be:	4b42      	ldr	r3, [pc, #264]	; (800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a5c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5c2:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800a5c6:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800a5c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a5ce:	d06b      	beq.n	800a6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800a5d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a5d6:	d874      	bhi.n	800a6c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a5d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5da:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a5de:	d056      	beq.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800a5e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5e2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a5e6:	d86c      	bhi.n	800a6c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a5e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5ea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a5ee:	d03b      	beq.n	800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800a5f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5f2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a5f6:	d864      	bhi.n	800a6c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a5f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a5fe:	d021      	beq.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800a600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a602:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a606:	d85c      	bhi.n	800a6c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d004      	beq.n	800a618 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800a60e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a610:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a614:	d004      	beq.n	800a620 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800a616:	e054      	b.n	800a6c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800a618:	f7fe fa0a 	bl	8008a30 <HAL_RCC_GetPCLK1Freq>
 800a61c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a61e:	e1f6      	b.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a620:	4b29      	ldr	r3, [pc, #164]	; (800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a628:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a62c:	d107      	bne.n	800a63e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a62e:	f107 0318 	add.w	r3, r7, #24
 800a632:	4618      	mov	r0, r3
 800a634:	f000 fa0a 	bl	800aa4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a638:	69fb      	ldr	r3, [r7, #28]
 800a63a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a63c:	e1e7      	b.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a63e:	2300      	movs	r3, #0
 800a640:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a642:	e1e4      	b.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a644:	4b20      	ldr	r3, [pc, #128]	; (800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a64c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a650:	d107      	bne.n	800a662 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a652:	f107 030c 	add.w	r3, r7, #12
 800a656:	4618      	mov	r0, r3
 800a658:	f000 fb4c 	bl	800acf4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a65c:	693b      	ldr	r3, [r7, #16]
 800a65e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a660:	e1d5      	b.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a662:	2300      	movs	r3, #0
 800a664:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a666:	e1d2      	b.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a668:	4b17      	ldr	r3, [pc, #92]	; (800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	f003 0304 	and.w	r3, r3, #4
 800a670:	2b04      	cmp	r3, #4
 800a672:	d109      	bne.n	800a688 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a674:	4b14      	ldr	r3, [pc, #80]	; (800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	08db      	lsrs	r3, r3, #3
 800a67a:	f003 0303 	and.w	r3, r3, #3
 800a67e:	4a13      	ldr	r2, [pc, #76]	; (800a6cc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a680:	fa22 f303 	lsr.w	r3, r2, r3
 800a684:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a686:	e1c2      	b.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a688:	2300      	movs	r3, #0
 800a68a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a68c:	e1bf      	b.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a68e:	4b0e      	ldr	r3, [pc, #56]	; (800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a696:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a69a:	d102      	bne.n	800a6a2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800a69c:	4b0c      	ldr	r3, [pc, #48]	; (800a6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a69e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a6a0:	e1b5      	b.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a6a6:	e1b2      	b.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a6a8:	4b07      	ldr	r3, [pc, #28]	; (800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a6b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a6b4:	d102      	bne.n	800a6bc <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800a6b6:	4b07      	ldr	r3, [pc, #28]	; (800a6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a6b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a6ba:	e1a8      	b.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a6bc:	2300      	movs	r3, #0
 800a6be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a6c0:	e1a5      	b.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a6c6:	e1a2      	b.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a6c8:	58024400 	.word	0x58024400
 800a6cc:	03d09000 	.word	0x03d09000
 800a6d0:	003d0900 	.word	0x003d0900
 800a6d4:	017d7840 	.word	0x017d7840
 800a6d8:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a6dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a6e0:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800a6e4:	430b      	orrs	r3, r1
 800a6e6:	d173      	bne.n	800a7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800a6e8:	4b9c      	ldr	r3, [pc, #624]	; (800a95c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a6ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a6f0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a6f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a6f8:	d02f      	beq.n	800a75a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800a6fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a700:	d863      	bhi.n	800a7ca <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800a702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a704:	2b00      	cmp	r3, #0
 800a706:	d004      	beq.n	800a712 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800a708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a70a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a70e:	d012      	beq.n	800a736 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800a710:	e05b      	b.n	800a7ca <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a712:	4b92      	ldr	r3, [pc, #584]	; (800a95c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a71a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a71e:	d107      	bne.n	800a730 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a720:	f107 0318 	add.w	r3, r7, #24
 800a724:	4618      	mov	r0, r3
 800a726:	f000 f991 	bl	800aa4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a72a:	69bb      	ldr	r3, [r7, #24]
 800a72c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a72e:	e16e      	b.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a730:	2300      	movs	r3, #0
 800a732:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a734:	e16b      	b.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a736:	4b89      	ldr	r3, [pc, #548]	; (800a95c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a73e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a742:	d107      	bne.n	800a754 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a744:	f107 030c 	add.w	r3, r7, #12
 800a748:	4618      	mov	r0, r3
 800a74a:	f000 fad3 	bl	800acf4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a74e:	697b      	ldr	r3, [r7, #20]
 800a750:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a752:	e15c      	b.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a754:	2300      	movs	r3, #0
 800a756:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a758:	e159      	b.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a75a:	4b80      	ldr	r3, [pc, #512]	; (800a95c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a75c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a75e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a762:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a764:	4b7d      	ldr	r3, [pc, #500]	; (800a95c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	f003 0304 	and.w	r3, r3, #4
 800a76c:	2b04      	cmp	r3, #4
 800a76e:	d10c      	bne.n	800a78a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800a770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a772:	2b00      	cmp	r3, #0
 800a774:	d109      	bne.n	800a78a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a776:	4b79      	ldr	r3, [pc, #484]	; (800a95c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	08db      	lsrs	r3, r3, #3
 800a77c:	f003 0303 	and.w	r3, r3, #3
 800a780:	4a77      	ldr	r2, [pc, #476]	; (800a960 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800a782:	fa22 f303 	lsr.w	r3, r2, r3
 800a786:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a788:	e01e      	b.n	800a7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a78a:	4b74      	ldr	r3, [pc, #464]	; (800a95c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a792:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a796:	d106      	bne.n	800a7a6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800a798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a79a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a79e:	d102      	bne.n	800a7a6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a7a0:	4b70      	ldr	r3, [pc, #448]	; (800a964 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800a7a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a7a4:	e010      	b.n	800a7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a7a6:	4b6d      	ldr	r3, [pc, #436]	; (800a95c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a7b2:	d106      	bne.n	800a7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800a7b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a7ba:	d102      	bne.n	800a7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a7bc:	4b6a      	ldr	r3, [pc, #424]	; (800a968 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800a7be:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a7c0:	e002      	b.n	800a7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a7c6:	e122      	b.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a7c8:	e121      	b.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a7ce:	e11e      	b.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a7d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a7d4:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800a7d8:	430b      	orrs	r3, r1
 800a7da:	d133      	bne.n	800a844 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800a7dc:	4b5f      	ldr	r3, [pc, #380]	; (800a95c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a7de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a7e4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a7e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d004      	beq.n	800a7f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800a7ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7f2:	d012      	beq.n	800a81a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800a7f4:	e023      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a7f6:	4b59      	ldr	r3, [pc, #356]	; (800a95c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a7fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a802:	d107      	bne.n	800a814 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a804:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a808:	4618      	mov	r0, r3
 800a80a:	f000 fbc7 	bl	800af9c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a80e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a810:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a812:	e0fc      	b.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a814:	2300      	movs	r3, #0
 800a816:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a818:	e0f9      	b.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a81a:	4b50      	ldr	r3, [pc, #320]	; (800a95c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a822:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a826:	d107      	bne.n	800a838 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a828:	f107 0318 	add.w	r3, r7, #24
 800a82c:	4618      	mov	r0, r3
 800a82e:	f000 f90d 	bl	800aa4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a832:	6a3b      	ldr	r3, [r7, #32]
 800a834:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a836:	e0ea      	b.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a838:	2300      	movs	r3, #0
 800a83a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a83c:	e0e7      	b.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a83e:	2300      	movs	r3, #0
 800a840:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a842:	e0e4      	b.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a844:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a848:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800a84c:	430b      	orrs	r3, r1
 800a84e:	f040 808d 	bne.w	800a96c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800a852:	4b42      	ldr	r3, [pc, #264]	; (800a95c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a856:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800a85a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a85c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a85e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a862:	d06b      	beq.n	800a93c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800a864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a866:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a86a:	d874      	bhi.n	800a956 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a86c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a86e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a872:	d056      	beq.n	800a922 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800a874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a876:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a87a:	d86c      	bhi.n	800a956 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a87c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a87e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a882:	d03b      	beq.n	800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800a884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a886:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a88a:	d864      	bhi.n	800a956 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a88c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a88e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a892:	d021      	beq.n	800a8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800a894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a896:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a89a:	d85c      	bhi.n	800a956 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a89c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d004      	beq.n	800a8ac <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800a8a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a8a8:	d004      	beq.n	800a8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800a8aa:	e054      	b.n	800a956 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a8ac:	f000 f8b8 	bl	800aa20 <HAL_RCCEx_GetD3PCLK1Freq>
 800a8b0:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a8b2:	e0ac      	b.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a8b4:	4b29      	ldr	r3, [pc, #164]	; (800a95c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a8bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a8c0:	d107      	bne.n	800a8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8c2:	f107 0318 	add.w	r3, r7, #24
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	f000 f8c0 	bl	800aa4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a8cc:	69fb      	ldr	r3, [r7, #28]
 800a8ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8d0:	e09d      	b.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8d6:	e09a      	b.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a8d8:	4b20      	ldr	r3, [pc, #128]	; (800a95c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a8e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a8e4:	d107      	bne.n	800a8f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a8e6:	f107 030c 	add.w	r3, r7, #12
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	f000 fa02 	bl	800acf4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a8f0:	693b      	ldr	r3, [r7, #16]
 800a8f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8f4:	e08b      	b.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8fa:	e088      	b.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a8fc:	4b17      	ldr	r3, [pc, #92]	; (800a95c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	f003 0304 	and.w	r3, r3, #4
 800a904:	2b04      	cmp	r3, #4
 800a906:	d109      	bne.n	800a91c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a908:	4b14      	ldr	r3, [pc, #80]	; (800a95c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	08db      	lsrs	r3, r3, #3
 800a90e:	f003 0303 	and.w	r3, r3, #3
 800a912:	4a13      	ldr	r2, [pc, #76]	; (800a960 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800a914:	fa22 f303 	lsr.w	r3, r2, r3
 800a918:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a91a:	e078      	b.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a91c:	2300      	movs	r3, #0
 800a91e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a920:	e075      	b.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a922:	4b0e      	ldr	r3, [pc, #56]	; (800a95c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a92a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a92e:	d102      	bne.n	800a936 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800a930:	4b0c      	ldr	r3, [pc, #48]	; (800a964 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800a932:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a934:	e06b      	b.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a936:	2300      	movs	r3, #0
 800a938:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a93a:	e068      	b.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a93c:	4b07      	ldr	r3, [pc, #28]	; (800a95c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a944:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a948:	d102      	bne.n	800a950 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800a94a:	4b07      	ldr	r3, [pc, #28]	; (800a968 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800a94c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a94e:	e05e      	b.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a950:	2300      	movs	r3, #0
 800a952:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a954:	e05b      	b.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800a956:	2300      	movs	r3, #0
 800a958:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a95a:	e058      	b.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a95c:	58024400 	.word	0x58024400
 800a960:	03d09000 	.word	0x03d09000
 800a964:	003d0900 	.word	0x003d0900
 800a968:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a96c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a970:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800a974:	430b      	orrs	r3, r1
 800a976:	d148      	bne.n	800aa0a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800a978:	4b27      	ldr	r3, [pc, #156]	; (800aa18 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a97a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a97c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a980:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a984:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a988:	d02a      	beq.n	800a9e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800a98a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a98c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a990:	d838      	bhi.n	800aa04 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800a992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a994:	2b00      	cmp	r3, #0
 800a996:	d004      	beq.n	800a9a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800a998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a99a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a99e:	d00d      	beq.n	800a9bc <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800a9a0:	e030      	b.n	800aa04 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a9a2:	4b1d      	ldr	r3, [pc, #116]	; (800aa18 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a9aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a9ae:	d102      	bne.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800a9b0:	4b1a      	ldr	r3, [pc, #104]	; (800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800a9b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9b4:	e02b      	b.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a9ba:	e028      	b.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a9bc:	4b16      	ldr	r3, [pc, #88]	; (800aa18 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a9c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a9c8:	d107      	bne.n	800a9da <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a9ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	f000 fae4 	bl	800af9c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a9d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9d8:	e019      	b.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a9da:	2300      	movs	r3, #0
 800a9dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a9de:	e016      	b.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a9e0:	4b0d      	ldr	r3, [pc, #52]	; (800aa18 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a9e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a9ec:	d107      	bne.n	800a9fe <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a9ee:	f107 0318 	add.w	r3, r7, #24
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	f000 f82a 	bl	800aa4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a9f8:	69fb      	ldr	r3, [r7, #28]
 800a9fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9fc:	e007      	b.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a9fe:	2300      	movs	r3, #0
 800aa00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa02:	e004      	b.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800aa04:	2300      	movs	r3, #0
 800aa06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa08:	e001      	b.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800aa0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800aa10:	4618      	mov	r0, r3
 800aa12:	3740      	adds	r7, #64	; 0x40
 800aa14:	46bd      	mov	sp, r7
 800aa16:	bd80      	pop	{r7, pc}
 800aa18:	58024400 	.word	0x58024400
 800aa1c:	017d7840 	.word	0x017d7840

0800aa20 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800aa24:	f7fd ffd4 	bl	80089d0 <HAL_RCC_GetHCLKFreq>
 800aa28:	4602      	mov	r2, r0
 800aa2a:	4b06      	ldr	r3, [pc, #24]	; (800aa44 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800aa2c:	6a1b      	ldr	r3, [r3, #32]
 800aa2e:	091b      	lsrs	r3, r3, #4
 800aa30:	f003 0307 	and.w	r3, r3, #7
 800aa34:	4904      	ldr	r1, [pc, #16]	; (800aa48 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800aa36:	5ccb      	ldrb	r3, [r1, r3]
 800aa38:	f003 031f 	and.w	r3, r3, #31
 800aa3c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800aa40:	4618      	mov	r0, r3
 800aa42:	bd80      	pop	{r7, pc}
 800aa44:	58024400 	.word	0x58024400
 800aa48:	08014334 	.word	0x08014334

0800aa4c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800aa4c:	b480      	push	{r7}
 800aa4e:	b089      	sub	sp, #36	; 0x24
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aa54:	4ba1      	ldr	r3, [pc, #644]	; (800acdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa58:	f003 0303 	and.w	r3, r3, #3
 800aa5c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800aa5e:	4b9f      	ldr	r3, [pc, #636]	; (800acdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa62:	0b1b      	lsrs	r3, r3, #12
 800aa64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aa68:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800aa6a:	4b9c      	ldr	r3, [pc, #624]	; (800acdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa6e:	091b      	lsrs	r3, r3, #4
 800aa70:	f003 0301 	and.w	r3, r3, #1
 800aa74:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800aa76:	4b99      	ldr	r3, [pc, #612]	; (800acdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa7a:	08db      	lsrs	r3, r3, #3
 800aa7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aa80:	693a      	ldr	r2, [r7, #16]
 800aa82:	fb02 f303 	mul.w	r3, r2, r3
 800aa86:	ee07 3a90 	vmov	s15, r3
 800aa8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa8e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800aa92:	697b      	ldr	r3, [r7, #20]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	f000 8111 	beq.w	800acbc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800aa9a:	69bb      	ldr	r3, [r7, #24]
 800aa9c:	2b02      	cmp	r3, #2
 800aa9e:	f000 8083 	beq.w	800aba8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800aaa2:	69bb      	ldr	r3, [r7, #24]
 800aaa4:	2b02      	cmp	r3, #2
 800aaa6:	f200 80a1 	bhi.w	800abec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800aaaa:	69bb      	ldr	r3, [r7, #24]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d003      	beq.n	800aab8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800aab0:	69bb      	ldr	r3, [r7, #24]
 800aab2:	2b01      	cmp	r3, #1
 800aab4:	d056      	beq.n	800ab64 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800aab6:	e099      	b.n	800abec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aab8:	4b88      	ldr	r3, [pc, #544]	; (800acdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	f003 0320 	and.w	r3, r3, #32
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d02d      	beq.n	800ab20 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aac4:	4b85      	ldr	r3, [pc, #532]	; (800acdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	08db      	lsrs	r3, r3, #3
 800aaca:	f003 0303 	and.w	r3, r3, #3
 800aace:	4a84      	ldr	r2, [pc, #528]	; (800ace0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800aad0:	fa22 f303 	lsr.w	r3, r2, r3
 800aad4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aad6:	68bb      	ldr	r3, [r7, #8]
 800aad8:	ee07 3a90 	vmov	s15, r3
 800aadc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aae0:	697b      	ldr	r3, [r7, #20]
 800aae2:	ee07 3a90 	vmov	s15, r3
 800aae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aaea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aaee:	4b7b      	ldr	r3, [pc, #492]	; (800acdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aaf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aaf6:	ee07 3a90 	vmov	s15, r3
 800aafa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aafe:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab02:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ace4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ab06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab16:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab1a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ab1e:	e087      	b.n	800ac30 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ab20:	697b      	ldr	r3, [r7, #20]
 800ab22:	ee07 3a90 	vmov	s15, r3
 800ab26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab2a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ace8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ab2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab32:	4b6a      	ldr	r3, [pc, #424]	; (800acdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab3a:	ee07 3a90 	vmov	s15, r3
 800ab3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab42:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab46:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ace4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ab4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab62:	e065      	b.n	800ac30 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ab64:	697b      	ldr	r3, [r7, #20]
 800ab66:	ee07 3a90 	vmov	s15, r3
 800ab6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab6e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800acec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ab72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab76:	4b59      	ldr	r3, [pc, #356]	; (800acdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab7e:	ee07 3a90 	vmov	s15, r3
 800ab82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab86:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab8a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ace4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ab8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aba2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aba6:	e043      	b.n	800ac30 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aba8:	697b      	ldr	r3, [r7, #20]
 800abaa:	ee07 3a90 	vmov	s15, r3
 800abae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abb2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800acf0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800abb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abba:	4b48      	ldr	r3, [pc, #288]	; (800acdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abc2:	ee07 3a90 	vmov	s15, r3
 800abc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abca:	ed97 6a03 	vldr	s12, [r7, #12]
 800abce:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ace4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800abd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800abde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abe6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800abea:	e021      	b.n	800ac30 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800abec:	697b      	ldr	r3, [r7, #20]
 800abee:	ee07 3a90 	vmov	s15, r3
 800abf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abf6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800acec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800abfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abfe:	4b37      	ldr	r3, [pc, #220]	; (800acdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac06:	ee07 3a90 	vmov	s15, r3
 800ac0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac0e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac12:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ace4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ac16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ac2e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800ac30:	4b2a      	ldr	r3, [pc, #168]	; (800acdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac34:	0a5b      	lsrs	r3, r3, #9
 800ac36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac3a:	ee07 3a90 	vmov	s15, r3
 800ac3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ac46:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac4a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac56:	ee17 2a90 	vmov	r2, s15
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800ac5e:	4b1f      	ldr	r3, [pc, #124]	; (800acdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac62:	0c1b      	lsrs	r3, r3, #16
 800ac64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac68:	ee07 3a90 	vmov	s15, r3
 800ac6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ac74:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac78:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac84:	ee17 2a90 	vmov	r2, s15
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800ac8c:	4b13      	ldr	r3, [pc, #76]	; (800acdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac90:	0e1b      	lsrs	r3, r3, #24
 800ac92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac96:	ee07 3a90 	vmov	s15, r3
 800ac9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aca2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aca6:	edd7 6a07 	vldr	s13, [r7, #28]
 800acaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800acae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800acb2:	ee17 2a90 	vmov	r2, s15
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800acba:	e008      	b.n	800acce <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	2200      	movs	r2, #0
 800acc0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	2200      	movs	r2, #0
 800acc6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2200      	movs	r2, #0
 800accc:	609a      	str	r2, [r3, #8]
}
 800acce:	bf00      	nop
 800acd0:	3724      	adds	r7, #36	; 0x24
 800acd2:	46bd      	mov	sp, r7
 800acd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd8:	4770      	bx	lr
 800acda:	bf00      	nop
 800acdc:	58024400 	.word	0x58024400
 800ace0:	03d09000 	.word	0x03d09000
 800ace4:	46000000 	.word	0x46000000
 800ace8:	4c742400 	.word	0x4c742400
 800acec:	4a742400 	.word	0x4a742400
 800acf0:	4bbebc20 	.word	0x4bbebc20

0800acf4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800acf4:	b480      	push	{r7}
 800acf6:	b089      	sub	sp, #36	; 0x24
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800acfc:	4ba1      	ldr	r3, [pc, #644]	; (800af84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800acfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad00:	f003 0303 	and.w	r3, r3, #3
 800ad04:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800ad06:	4b9f      	ldr	r3, [pc, #636]	; (800af84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad0a:	0d1b      	lsrs	r3, r3, #20
 800ad0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ad10:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ad12:	4b9c      	ldr	r3, [pc, #624]	; (800af84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad16:	0a1b      	lsrs	r3, r3, #8
 800ad18:	f003 0301 	and.w	r3, r3, #1
 800ad1c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800ad1e:	4b99      	ldr	r3, [pc, #612]	; (800af84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad22:	08db      	lsrs	r3, r3, #3
 800ad24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ad28:	693a      	ldr	r2, [r7, #16]
 800ad2a:	fb02 f303 	mul.w	r3, r2, r3
 800ad2e:	ee07 3a90 	vmov	s15, r3
 800ad32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad36:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ad3a:	697b      	ldr	r3, [r7, #20]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	f000 8111 	beq.w	800af64 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800ad42:	69bb      	ldr	r3, [r7, #24]
 800ad44:	2b02      	cmp	r3, #2
 800ad46:	f000 8083 	beq.w	800ae50 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ad4a:	69bb      	ldr	r3, [r7, #24]
 800ad4c:	2b02      	cmp	r3, #2
 800ad4e:	f200 80a1 	bhi.w	800ae94 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ad52:	69bb      	ldr	r3, [r7, #24]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d003      	beq.n	800ad60 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ad58:	69bb      	ldr	r3, [r7, #24]
 800ad5a:	2b01      	cmp	r3, #1
 800ad5c:	d056      	beq.n	800ae0c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ad5e:	e099      	b.n	800ae94 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ad60:	4b88      	ldr	r3, [pc, #544]	; (800af84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	f003 0320 	and.w	r3, r3, #32
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d02d      	beq.n	800adc8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ad6c:	4b85      	ldr	r3, [pc, #532]	; (800af84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	08db      	lsrs	r3, r3, #3
 800ad72:	f003 0303 	and.w	r3, r3, #3
 800ad76:	4a84      	ldr	r2, [pc, #528]	; (800af88 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ad78:	fa22 f303 	lsr.w	r3, r2, r3
 800ad7c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ad7e:	68bb      	ldr	r3, [r7, #8]
 800ad80:	ee07 3a90 	vmov	s15, r3
 800ad84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad88:	697b      	ldr	r3, [r7, #20]
 800ad8a:	ee07 3a90 	vmov	s15, r3
 800ad8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad96:	4b7b      	ldr	r3, [pc, #492]	; (800af84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad9e:	ee07 3a90 	vmov	s15, r3
 800ada2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ada6:	ed97 6a03 	vldr	s12, [r7, #12]
 800adaa:	eddf 5a78 	vldr	s11, [pc, #480]	; 800af8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800adae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800adb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800adba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adc2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800adc6:	e087      	b.n	800aed8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800adc8:	697b      	ldr	r3, [r7, #20]
 800adca:	ee07 3a90 	vmov	s15, r3
 800adce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800add2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800af90 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800add6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800adda:	4b6a      	ldr	r3, [pc, #424]	; (800af84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800addc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ade2:	ee07 3a90 	vmov	s15, r3
 800ade6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800adea:	ed97 6a03 	vldr	s12, [r7, #12]
 800adee:	eddf 5a67 	vldr	s11, [pc, #412]	; 800af8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800adf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800adf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800adfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae02:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ae0a:	e065      	b.n	800aed8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ae0c:	697b      	ldr	r3, [r7, #20]
 800ae0e:	ee07 3a90 	vmov	s15, r3
 800ae12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae16:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800af94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ae1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae1e:	4b59      	ldr	r3, [pc, #356]	; (800af84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae26:	ee07 3a90 	vmov	s15, r3
 800ae2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae2e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae32:	eddf 5a56 	vldr	s11, [pc, #344]	; 800af8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ae36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae46:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ae4e:	e043      	b.n	800aed8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ae50:	697b      	ldr	r3, [r7, #20]
 800ae52:	ee07 3a90 	vmov	s15, r3
 800ae56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae5a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800af98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ae5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae62:	4b48      	ldr	r3, [pc, #288]	; (800af84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae6a:	ee07 3a90 	vmov	s15, r3
 800ae6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae72:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae76:	eddf 5a45 	vldr	s11, [pc, #276]	; 800af8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ae7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ae92:	e021      	b.n	800aed8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ae94:	697b      	ldr	r3, [r7, #20]
 800ae96:	ee07 3a90 	vmov	s15, r3
 800ae9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae9e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800af94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800aea2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aea6:	4b37      	ldr	r3, [pc, #220]	; (800af84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aeae:	ee07 3a90 	vmov	s15, r3
 800aeb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aeb6:	ed97 6a03 	vldr	s12, [r7, #12]
 800aeba:	eddf 5a34 	vldr	s11, [pc, #208]	; 800af8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aebe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aec2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aec6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aeca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aece:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aed2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aed6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800aed8:	4b2a      	ldr	r3, [pc, #168]	; (800af84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aeda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aedc:	0a5b      	lsrs	r3, r3, #9
 800aede:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aee2:	ee07 3a90 	vmov	s15, r3
 800aee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aeea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aeee:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aef2:	edd7 6a07 	vldr	s13, [r7, #28]
 800aef6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aefa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aefe:	ee17 2a90 	vmov	r2, s15
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800af06:	4b1f      	ldr	r3, [pc, #124]	; (800af84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af0a:	0c1b      	lsrs	r3, r3, #16
 800af0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af10:	ee07 3a90 	vmov	s15, r3
 800af14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800af1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800af20:	edd7 6a07 	vldr	s13, [r7, #28]
 800af24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af2c:	ee17 2a90 	vmov	r2, s15
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800af34:	4b13      	ldr	r3, [pc, #76]	; (800af84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af38:	0e1b      	lsrs	r3, r3, #24
 800af3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af3e:	ee07 3a90 	vmov	s15, r3
 800af42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800af4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800af4e:	edd7 6a07 	vldr	s13, [r7, #28]
 800af52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af5a:	ee17 2a90 	vmov	r2, s15
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800af62:	e008      	b.n	800af76 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	2200      	movs	r2, #0
 800af68:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	2200      	movs	r2, #0
 800af6e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2200      	movs	r2, #0
 800af74:	609a      	str	r2, [r3, #8]
}
 800af76:	bf00      	nop
 800af78:	3724      	adds	r7, #36	; 0x24
 800af7a:	46bd      	mov	sp, r7
 800af7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af80:	4770      	bx	lr
 800af82:	bf00      	nop
 800af84:	58024400 	.word	0x58024400
 800af88:	03d09000 	.word	0x03d09000
 800af8c:	46000000 	.word	0x46000000
 800af90:	4c742400 	.word	0x4c742400
 800af94:	4a742400 	.word	0x4a742400
 800af98:	4bbebc20 	.word	0x4bbebc20

0800af9c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800af9c:	b480      	push	{r7}
 800af9e:	b089      	sub	sp, #36	; 0x24
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800afa4:	4ba0      	ldr	r3, [pc, #640]	; (800b228 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800afa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afa8:	f003 0303 	and.w	r3, r3, #3
 800afac:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800afae:	4b9e      	ldr	r3, [pc, #632]	; (800b228 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800afb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afb2:	091b      	lsrs	r3, r3, #4
 800afb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800afb8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800afba:	4b9b      	ldr	r3, [pc, #620]	; (800b228 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800afbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afbe:	f003 0301 	and.w	r3, r3, #1
 800afc2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800afc4:	4b98      	ldr	r3, [pc, #608]	; (800b228 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800afc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afc8:	08db      	lsrs	r3, r3, #3
 800afca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800afce:	693a      	ldr	r2, [r7, #16]
 800afd0:	fb02 f303 	mul.w	r3, r2, r3
 800afd4:	ee07 3a90 	vmov	s15, r3
 800afd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afdc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800afe0:	697b      	ldr	r3, [r7, #20]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	f000 8111 	beq.w	800b20a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800afe8:	69bb      	ldr	r3, [r7, #24]
 800afea:	2b02      	cmp	r3, #2
 800afec:	f000 8083 	beq.w	800b0f6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800aff0:	69bb      	ldr	r3, [r7, #24]
 800aff2:	2b02      	cmp	r3, #2
 800aff4:	f200 80a1 	bhi.w	800b13a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800aff8:	69bb      	ldr	r3, [r7, #24]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d003      	beq.n	800b006 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800affe:	69bb      	ldr	r3, [r7, #24]
 800b000:	2b01      	cmp	r3, #1
 800b002:	d056      	beq.n	800b0b2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b004:	e099      	b.n	800b13a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b006:	4b88      	ldr	r3, [pc, #544]	; (800b228 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	f003 0320 	and.w	r3, r3, #32
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d02d      	beq.n	800b06e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b012:	4b85      	ldr	r3, [pc, #532]	; (800b228 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	08db      	lsrs	r3, r3, #3
 800b018:	f003 0303 	and.w	r3, r3, #3
 800b01c:	4a83      	ldr	r2, [pc, #524]	; (800b22c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b01e:	fa22 f303 	lsr.w	r3, r2, r3
 800b022:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b024:	68bb      	ldr	r3, [r7, #8]
 800b026:	ee07 3a90 	vmov	s15, r3
 800b02a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b02e:	697b      	ldr	r3, [r7, #20]
 800b030:	ee07 3a90 	vmov	s15, r3
 800b034:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b038:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b03c:	4b7a      	ldr	r3, [pc, #488]	; (800b228 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b03e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b040:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b044:	ee07 3a90 	vmov	s15, r3
 800b048:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b04c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b050:	eddf 5a77 	vldr	s11, [pc, #476]	; 800b230 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b054:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b058:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b05c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b060:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b064:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b068:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b06c:	e087      	b.n	800b17e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b06e:	697b      	ldr	r3, [r7, #20]
 800b070:	ee07 3a90 	vmov	s15, r3
 800b074:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b078:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800b234 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b07c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b080:	4b69      	ldr	r3, [pc, #420]	; (800b228 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b084:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b088:	ee07 3a90 	vmov	s15, r3
 800b08c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b090:	ed97 6a03 	vldr	s12, [r7, #12]
 800b094:	eddf 5a66 	vldr	s11, [pc, #408]	; 800b230 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b098:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b09c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b0a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0ac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b0b0:	e065      	b.n	800b17e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b0b2:	697b      	ldr	r3, [r7, #20]
 800b0b4:	ee07 3a90 	vmov	s15, r3
 800b0b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0bc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800b238 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b0c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0c4:	4b58      	ldr	r3, [pc, #352]	; (800b228 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b0c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0cc:	ee07 3a90 	vmov	s15, r3
 800b0d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0d4:	ed97 6a03 	vldr	s12, [r7, #12]
 800b0d8:	eddf 5a55 	vldr	s11, [pc, #340]	; 800b230 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b0dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b0e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0f0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b0f4:	e043      	b.n	800b17e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b0f6:	697b      	ldr	r3, [r7, #20]
 800b0f8:	ee07 3a90 	vmov	s15, r3
 800b0fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b100:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800b23c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b104:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b108:	4b47      	ldr	r3, [pc, #284]	; (800b228 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b10a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b10c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b110:	ee07 3a90 	vmov	s15, r3
 800b114:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b118:	ed97 6a03 	vldr	s12, [r7, #12]
 800b11c:	eddf 5a44 	vldr	s11, [pc, #272]	; 800b230 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b120:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b124:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b128:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b12c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b130:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b134:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b138:	e021      	b.n	800b17e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b13a:	697b      	ldr	r3, [r7, #20]
 800b13c:	ee07 3a90 	vmov	s15, r3
 800b140:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b144:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800b234 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b148:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b14c:	4b36      	ldr	r3, [pc, #216]	; (800b228 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b14e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b150:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b154:	ee07 3a90 	vmov	s15, r3
 800b158:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b15c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b160:	eddf 5a33 	vldr	s11, [pc, #204]	; 800b230 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b164:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b168:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b16c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b170:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b174:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b178:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b17c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b17e:	4b2a      	ldr	r3, [pc, #168]	; (800b228 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b182:	0a5b      	lsrs	r3, r3, #9
 800b184:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b188:	ee07 3a90 	vmov	s15, r3
 800b18c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b190:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b194:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b198:	edd7 6a07 	vldr	s13, [r7, #28]
 800b19c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b1a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b1a4:	ee17 2a90 	vmov	r2, s15
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b1ac:	4b1e      	ldr	r3, [pc, #120]	; (800b228 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b1ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1b0:	0c1b      	lsrs	r3, r3, #16
 800b1b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b1b6:	ee07 3a90 	vmov	s15, r3
 800b1ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b1c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b1c6:	edd7 6a07 	vldr	s13, [r7, #28]
 800b1ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b1ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b1d2:	ee17 2a90 	vmov	r2, s15
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b1da:	4b13      	ldr	r3, [pc, #76]	; (800b228 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b1dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1de:	0e1b      	lsrs	r3, r3, #24
 800b1e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b1e4:	ee07 3a90 	vmov	s15, r3
 800b1e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b1f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b1f4:	edd7 6a07 	vldr	s13, [r7, #28]
 800b1f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b1fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b200:	ee17 2a90 	vmov	r2, s15
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b208:	e008      	b.n	800b21c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	2200      	movs	r2, #0
 800b20e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2200      	movs	r2, #0
 800b214:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	2200      	movs	r2, #0
 800b21a:	609a      	str	r2, [r3, #8]
}
 800b21c:	bf00      	nop
 800b21e:	3724      	adds	r7, #36	; 0x24
 800b220:	46bd      	mov	sp, r7
 800b222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b226:	4770      	bx	lr
 800b228:	58024400 	.word	0x58024400
 800b22c:	03d09000 	.word	0x03d09000
 800b230:	46000000 	.word	0x46000000
 800b234:	4c742400 	.word	0x4c742400
 800b238:	4a742400 	.word	0x4a742400
 800b23c:	4bbebc20 	.word	0x4bbebc20

0800b240 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b240:	b580      	push	{r7, lr}
 800b242:	b084      	sub	sp, #16
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
 800b248:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b24a:	2300      	movs	r3, #0
 800b24c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b24e:	4b53      	ldr	r3, [pc, #332]	; (800b39c <RCCEx_PLL2_Config+0x15c>)
 800b250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b252:	f003 0303 	and.w	r3, r3, #3
 800b256:	2b03      	cmp	r3, #3
 800b258:	d101      	bne.n	800b25e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b25a:	2301      	movs	r3, #1
 800b25c:	e099      	b.n	800b392 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b25e:	4b4f      	ldr	r3, [pc, #316]	; (800b39c <RCCEx_PLL2_Config+0x15c>)
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	4a4e      	ldr	r2, [pc, #312]	; (800b39c <RCCEx_PLL2_Config+0x15c>)
 800b264:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b268:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b26a:	f7f7 fbc3 	bl	80029f4 <HAL_GetTick>
 800b26e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b270:	e008      	b.n	800b284 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b272:	f7f7 fbbf 	bl	80029f4 <HAL_GetTick>
 800b276:	4602      	mov	r2, r0
 800b278:	68bb      	ldr	r3, [r7, #8]
 800b27a:	1ad3      	subs	r3, r2, r3
 800b27c:	2b02      	cmp	r3, #2
 800b27e:	d901      	bls.n	800b284 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b280:	2303      	movs	r3, #3
 800b282:	e086      	b.n	800b392 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b284:	4b45      	ldr	r3, [pc, #276]	; (800b39c <RCCEx_PLL2_Config+0x15c>)
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d1f0      	bne.n	800b272 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b290:	4b42      	ldr	r3, [pc, #264]	; (800b39c <RCCEx_PLL2_Config+0x15c>)
 800b292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b294:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	031b      	lsls	r3, r3, #12
 800b29e:	493f      	ldr	r1, [pc, #252]	; (800b39c <RCCEx_PLL2_Config+0x15c>)
 800b2a0:	4313      	orrs	r3, r2
 800b2a2:	628b      	str	r3, [r1, #40]	; 0x28
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	685b      	ldr	r3, [r3, #4]
 800b2a8:	3b01      	subs	r3, #1
 800b2aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	689b      	ldr	r3, [r3, #8]
 800b2b2:	3b01      	subs	r3, #1
 800b2b4:	025b      	lsls	r3, r3, #9
 800b2b6:	b29b      	uxth	r3, r3
 800b2b8:	431a      	orrs	r2, r3
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	68db      	ldr	r3, [r3, #12]
 800b2be:	3b01      	subs	r3, #1
 800b2c0:	041b      	lsls	r3, r3, #16
 800b2c2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b2c6:	431a      	orrs	r2, r3
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	691b      	ldr	r3, [r3, #16]
 800b2cc:	3b01      	subs	r3, #1
 800b2ce:	061b      	lsls	r3, r3, #24
 800b2d0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b2d4:	4931      	ldr	r1, [pc, #196]	; (800b39c <RCCEx_PLL2_Config+0x15c>)
 800b2d6:	4313      	orrs	r3, r2
 800b2d8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b2da:	4b30      	ldr	r3, [pc, #192]	; (800b39c <RCCEx_PLL2_Config+0x15c>)
 800b2dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2de:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	695b      	ldr	r3, [r3, #20]
 800b2e6:	492d      	ldr	r1, [pc, #180]	; (800b39c <RCCEx_PLL2_Config+0x15c>)
 800b2e8:	4313      	orrs	r3, r2
 800b2ea:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b2ec:	4b2b      	ldr	r3, [pc, #172]	; (800b39c <RCCEx_PLL2_Config+0x15c>)
 800b2ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2f0:	f023 0220 	bic.w	r2, r3, #32
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	699b      	ldr	r3, [r3, #24]
 800b2f8:	4928      	ldr	r1, [pc, #160]	; (800b39c <RCCEx_PLL2_Config+0x15c>)
 800b2fa:	4313      	orrs	r3, r2
 800b2fc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b2fe:	4b27      	ldr	r3, [pc, #156]	; (800b39c <RCCEx_PLL2_Config+0x15c>)
 800b300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b302:	4a26      	ldr	r2, [pc, #152]	; (800b39c <RCCEx_PLL2_Config+0x15c>)
 800b304:	f023 0310 	bic.w	r3, r3, #16
 800b308:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b30a:	4b24      	ldr	r3, [pc, #144]	; (800b39c <RCCEx_PLL2_Config+0x15c>)
 800b30c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b30e:	4b24      	ldr	r3, [pc, #144]	; (800b3a0 <RCCEx_PLL2_Config+0x160>)
 800b310:	4013      	ands	r3, r2
 800b312:	687a      	ldr	r2, [r7, #4]
 800b314:	69d2      	ldr	r2, [r2, #28]
 800b316:	00d2      	lsls	r2, r2, #3
 800b318:	4920      	ldr	r1, [pc, #128]	; (800b39c <RCCEx_PLL2_Config+0x15c>)
 800b31a:	4313      	orrs	r3, r2
 800b31c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b31e:	4b1f      	ldr	r3, [pc, #124]	; (800b39c <RCCEx_PLL2_Config+0x15c>)
 800b320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b322:	4a1e      	ldr	r2, [pc, #120]	; (800b39c <RCCEx_PLL2_Config+0x15c>)
 800b324:	f043 0310 	orr.w	r3, r3, #16
 800b328:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b32a:	683b      	ldr	r3, [r7, #0]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d106      	bne.n	800b33e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b330:	4b1a      	ldr	r3, [pc, #104]	; (800b39c <RCCEx_PLL2_Config+0x15c>)
 800b332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b334:	4a19      	ldr	r2, [pc, #100]	; (800b39c <RCCEx_PLL2_Config+0x15c>)
 800b336:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b33a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b33c:	e00f      	b.n	800b35e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	2b01      	cmp	r3, #1
 800b342:	d106      	bne.n	800b352 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b344:	4b15      	ldr	r3, [pc, #84]	; (800b39c <RCCEx_PLL2_Config+0x15c>)
 800b346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b348:	4a14      	ldr	r2, [pc, #80]	; (800b39c <RCCEx_PLL2_Config+0x15c>)
 800b34a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b34e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b350:	e005      	b.n	800b35e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b352:	4b12      	ldr	r3, [pc, #72]	; (800b39c <RCCEx_PLL2_Config+0x15c>)
 800b354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b356:	4a11      	ldr	r2, [pc, #68]	; (800b39c <RCCEx_PLL2_Config+0x15c>)
 800b358:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b35c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b35e:	4b0f      	ldr	r3, [pc, #60]	; (800b39c <RCCEx_PLL2_Config+0x15c>)
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	4a0e      	ldr	r2, [pc, #56]	; (800b39c <RCCEx_PLL2_Config+0x15c>)
 800b364:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b368:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b36a:	f7f7 fb43 	bl	80029f4 <HAL_GetTick>
 800b36e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b370:	e008      	b.n	800b384 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b372:	f7f7 fb3f 	bl	80029f4 <HAL_GetTick>
 800b376:	4602      	mov	r2, r0
 800b378:	68bb      	ldr	r3, [r7, #8]
 800b37a:	1ad3      	subs	r3, r2, r3
 800b37c:	2b02      	cmp	r3, #2
 800b37e:	d901      	bls.n	800b384 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b380:	2303      	movs	r3, #3
 800b382:	e006      	b.n	800b392 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b384:	4b05      	ldr	r3, [pc, #20]	; (800b39c <RCCEx_PLL2_Config+0x15c>)
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d0f0      	beq.n	800b372 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b390:	7bfb      	ldrb	r3, [r7, #15]
}
 800b392:	4618      	mov	r0, r3
 800b394:	3710      	adds	r7, #16
 800b396:	46bd      	mov	sp, r7
 800b398:	bd80      	pop	{r7, pc}
 800b39a:	bf00      	nop
 800b39c:	58024400 	.word	0x58024400
 800b3a0:	ffff0007 	.word	0xffff0007

0800b3a4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b084      	sub	sp, #16
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
 800b3ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b3b2:	4b53      	ldr	r3, [pc, #332]	; (800b500 <RCCEx_PLL3_Config+0x15c>)
 800b3b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3b6:	f003 0303 	and.w	r3, r3, #3
 800b3ba:	2b03      	cmp	r3, #3
 800b3bc:	d101      	bne.n	800b3c2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b3be:	2301      	movs	r3, #1
 800b3c0:	e099      	b.n	800b4f6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b3c2:	4b4f      	ldr	r3, [pc, #316]	; (800b500 <RCCEx_PLL3_Config+0x15c>)
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	4a4e      	ldr	r2, [pc, #312]	; (800b500 <RCCEx_PLL3_Config+0x15c>)
 800b3c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b3cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b3ce:	f7f7 fb11 	bl	80029f4 <HAL_GetTick>
 800b3d2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b3d4:	e008      	b.n	800b3e8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b3d6:	f7f7 fb0d 	bl	80029f4 <HAL_GetTick>
 800b3da:	4602      	mov	r2, r0
 800b3dc:	68bb      	ldr	r3, [r7, #8]
 800b3de:	1ad3      	subs	r3, r2, r3
 800b3e0:	2b02      	cmp	r3, #2
 800b3e2:	d901      	bls.n	800b3e8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b3e4:	2303      	movs	r3, #3
 800b3e6:	e086      	b.n	800b4f6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b3e8:	4b45      	ldr	r3, [pc, #276]	; (800b500 <RCCEx_PLL3_Config+0x15c>)
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d1f0      	bne.n	800b3d6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b3f4:	4b42      	ldr	r3, [pc, #264]	; (800b500 <RCCEx_PLL3_Config+0x15c>)
 800b3f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3f8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	051b      	lsls	r3, r3, #20
 800b402:	493f      	ldr	r1, [pc, #252]	; (800b500 <RCCEx_PLL3_Config+0x15c>)
 800b404:	4313      	orrs	r3, r2
 800b406:	628b      	str	r3, [r1, #40]	; 0x28
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	685b      	ldr	r3, [r3, #4]
 800b40c:	3b01      	subs	r3, #1
 800b40e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	689b      	ldr	r3, [r3, #8]
 800b416:	3b01      	subs	r3, #1
 800b418:	025b      	lsls	r3, r3, #9
 800b41a:	b29b      	uxth	r3, r3
 800b41c:	431a      	orrs	r2, r3
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	68db      	ldr	r3, [r3, #12]
 800b422:	3b01      	subs	r3, #1
 800b424:	041b      	lsls	r3, r3, #16
 800b426:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b42a:	431a      	orrs	r2, r3
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	691b      	ldr	r3, [r3, #16]
 800b430:	3b01      	subs	r3, #1
 800b432:	061b      	lsls	r3, r3, #24
 800b434:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b438:	4931      	ldr	r1, [pc, #196]	; (800b500 <RCCEx_PLL3_Config+0x15c>)
 800b43a:	4313      	orrs	r3, r2
 800b43c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b43e:	4b30      	ldr	r3, [pc, #192]	; (800b500 <RCCEx_PLL3_Config+0x15c>)
 800b440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b442:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	695b      	ldr	r3, [r3, #20]
 800b44a:	492d      	ldr	r1, [pc, #180]	; (800b500 <RCCEx_PLL3_Config+0x15c>)
 800b44c:	4313      	orrs	r3, r2
 800b44e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b450:	4b2b      	ldr	r3, [pc, #172]	; (800b500 <RCCEx_PLL3_Config+0x15c>)
 800b452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b454:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	699b      	ldr	r3, [r3, #24]
 800b45c:	4928      	ldr	r1, [pc, #160]	; (800b500 <RCCEx_PLL3_Config+0x15c>)
 800b45e:	4313      	orrs	r3, r2
 800b460:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b462:	4b27      	ldr	r3, [pc, #156]	; (800b500 <RCCEx_PLL3_Config+0x15c>)
 800b464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b466:	4a26      	ldr	r2, [pc, #152]	; (800b500 <RCCEx_PLL3_Config+0x15c>)
 800b468:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b46c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b46e:	4b24      	ldr	r3, [pc, #144]	; (800b500 <RCCEx_PLL3_Config+0x15c>)
 800b470:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b472:	4b24      	ldr	r3, [pc, #144]	; (800b504 <RCCEx_PLL3_Config+0x160>)
 800b474:	4013      	ands	r3, r2
 800b476:	687a      	ldr	r2, [r7, #4]
 800b478:	69d2      	ldr	r2, [r2, #28]
 800b47a:	00d2      	lsls	r2, r2, #3
 800b47c:	4920      	ldr	r1, [pc, #128]	; (800b500 <RCCEx_PLL3_Config+0x15c>)
 800b47e:	4313      	orrs	r3, r2
 800b480:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b482:	4b1f      	ldr	r3, [pc, #124]	; (800b500 <RCCEx_PLL3_Config+0x15c>)
 800b484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b486:	4a1e      	ldr	r2, [pc, #120]	; (800b500 <RCCEx_PLL3_Config+0x15c>)
 800b488:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b48c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d106      	bne.n	800b4a2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b494:	4b1a      	ldr	r3, [pc, #104]	; (800b500 <RCCEx_PLL3_Config+0x15c>)
 800b496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b498:	4a19      	ldr	r2, [pc, #100]	; (800b500 <RCCEx_PLL3_Config+0x15c>)
 800b49a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b49e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b4a0:	e00f      	b.n	800b4c2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b4a2:	683b      	ldr	r3, [r7, #0]
 800b4a4:	2b01      	cmp	r3, #1
 800b4a6:	d106      	bne.n	800b4b6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b4a8:	4b15      	ldr	r3, [pc, #84]	; (800b500 <RCCEx_PLL3_Config+0x15c>)
 800b4aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4ac:	4a14      	ldr	r2, [pc, #80]	; (800b500 <RCCEx_PLL3_Config+0x15c>)
 800b4ae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b4b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b4b4:	e005      	b.n	800b4c2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b4b6:	4b12      	ldr	r3, [pc, #72]	; (800b500 <RCCEx_PLL3_Config+0x15c>)
 800b4b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4ba:	4a11      	ldr	r2, [pc, #68]	; (800b500 <RCCEx_PLL3_Config+0x15c>)
 800b4bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b4c0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b4c2:	4b0f      	ldr	r3, [pc, #60]	; (800b500 <RCCEx_PLL3_Config+0x15c>)
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	4a0e      	ldr	r2, [pc, #56]	; (800b500 <RCCEx_PLL3_Config+0x15c>)
 800b4c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b4cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b4ce:	f7f7 fa91 	bl	80029f4 <HAL_GetTick>
 800b4d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b4d4:	e008      	b.n	800b4e8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b4d6:	f7f7 fa8d 	bl	80029f4 <HAL_GetTick>
 800b4da:	4602      	mov	r2, r0
 800b4dc:	68bb      	ldr	r3, [r7, #8]
 800b4de:	1ad3      	subs	r3, r2, r3
 800b4e0:	2b02      	cmp	r3, #2
 800b4e2:	d901      	bls.n	800b4e8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b4e4:	2303      	movs	r3, #3
 800b4e6:	e006      	b.n	800b4f6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b4e8:	4b05      	ldr	r3, [pc, #20]	; (800b500 <RCCEx_PLL3_Config+0x15c>)
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d0f0      	beq.n	800b4d6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b4f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	3710      	adds	r7, #16
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	bd80      	pop	{r7, pc}
 800b4fe:	bf00      	nop
 800b500:	58024400 	.word	0x58024400
 800b504:	ffff0007 	.word	0xffff0007

0800b508 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b084      	sub	sp, #16
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d101      	bne.n	800b51a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b516:	2301      	movs	r3, #1
 800b518:	e10f      	b.n	800b73a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	2200      	movs	r2, #0
 800b51e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	4a87      	ldr	r2, [pc, #540]	; (800b744 <HAL_SPI_Init+0x23c>)
 800b526:	4293      	cmp	r3, r2
 800b528:	d00f      	beq.n	800b54a <HAL_SPI_Init+0x42>
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	4a86      	ldr	r2, [pc, #536]	; (800b748 <HAL_SPI_Init+0x240>)
 800b530:	4293      	cmp	r3, r2
 800b532:	d00a      	beq.n	800b54a <HAL_SPI_Init+0x42>
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	4a84      	ldr	r2, [pc, #528]	; (800b74c <HAL_SPI_Init+0x244>)
 800b53a:	4293      	cmp	r3, r2
 800b53c:	d005      	beq.n	800b54a <HAL_SPI_Init+0x42>
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	68db      	ldr	r3, [r3, #12]
 800b542:	2b0f      	cmp	r3, #15
 800b544:	d901      	bls.n	800b54a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b546:	2301      	movs	r3, #1
 800b548:	e0f7      	b.n	800b73a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b54a:	6878      	ldr	r0, [r7, #4]
 800b54c:	f000 f900 	bl	800b750 <SPI_GetPacketSize>
 800b550:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	4a7b      	ldr	r2, [pc, #492]	; (800b744 <HAL_SPI_Init+0x23c>)
 800b558:	4293      	cmp	r3, r2
 800b55a:	d00c      	beq.n	800b576 <HAL_SPI_Init+0x6e>
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	4a79      	ldr	r2, [pc, #484]	; (800b748 <HAL_SPI_Init+0x240>)
 800b562:	4293      	cmp	r3, r2
 800b564:	d007      	beq.n	800b576 <HAL_SPI_Init+0x6e>
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	4a78      	ldr	r2, [pc, #480]	; (800b74c <HAL_SPI_Init+0x244>)
 800b56c:	4293      	cmp	r3, r2
 800b56e:	d002      	beq.n	800b576 <HAL_SPI_Init+0x6e>
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	2b08      	cmp	r3, #8
 800b574:	d811      	bhi.n	800b59a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b57a:	4a72      	ldr	r2, [pc, #456]	; (800b744 <HAL_SPI_Init+0x23c>)
 800b57c:	4293      	cmp	r3, r2
 800b57e:	d009      	beq.n	800b594 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	4a70      	ldr	r2, [pc, #448]	; (800b748 <HAL_SPI_Init+0x240>)
 800b586:	4293      	cmp	r3, r2
 800b588:	d004      	beq.n	800b594 <HAL_SPI_Init+0x8c>
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	4a6f      	ldr	r2, [pc, #444]	; (800b74c <HAL_SPI_Init+0x244>)
 800b590:	4293      	cmp	r3, r2
 800b592:	d104      	bne.n	800b59e <HAL_SPI_Init+0x96>
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	2b10      	cmp	r3, #16
 800b598:	d901      	bls.n	800b59e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800b59a:	2301      	movs	r3, #1
 800b59c:	e0cd      	b.n	800b73a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b5a4:	b2db      	uxtb	r3, r3
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d106      	bne.n	800b5b8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b5b2:	6878      	ldr	r0, [r7, #4]
 800b5b4:	f7f6 fd9c 	bl	80020f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	2202      	movs	r2, #2
 800b5bc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	681a      	ldr	r2, [r3, #0]
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	f022 0201 	bic.w	r2, r2, #1
 800b5ce:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	689b      	ldr	r3, [r3, #8]
 800b5d6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800b5da:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	699b      	ldr	r3, [r3, #24]
 800b5e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b5e4:	d119      	bne.n	800b61a <HAL_SPI_Init+0x112>
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	685b      	ldr	r3, [r3, #4]
 800b5ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b5ee:	d103      	bne.n	800b5f8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d008      	beq.n	800b60a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d10c      	bne.n	800b61a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b604:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b608:	d107      	bne.n	800b61a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	681a      	ldr	r2, [r3, #0]
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b618:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	685b      	ldr	r3, [r3, #4]
 800b61e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b622:	2b00      	cmp	r3, #0
 800b624:	d00f      	beq.n	800b646 <HAL_SPI_Init+0x13e>
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	68db      	ldr	r3, [r3, #12]
 800b62a:	2b06      	cmp	r3, #6
 800b62c:	d90b      	bls.n	800b646 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	430a      	orrs	r2, r1
 800b642:	601a      	str	r2, [r3, #0]
 800b644:	e007      	b.n	800b656 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	681a      	ldr	r2, [r3, #0]
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b654:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	69da      	ldr	r2, [r3, #28]
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b65e:	431a      	orrs	r2, r3
 800b660:	68bb      	ldr	r3, [r7, #8]
 800b662:	431a      	orrs	r2, r3
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b668:	ea42 0103 	orr.w	r1, r2, r3
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	68da      	ldr	r2, [r3, #12]
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	430a      	orrs	r2, r1
 800b676:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b680:	431a      	orrs	r2, r3
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b686:	431a      	orrs	r2, r3
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	699b      	ldr	r3, [r3, #24]
 800b68c:	431a      	orrs	r2, r3
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	691b      	ldr	r3, [r3, #16]
 800b692:	431a      	orrs	r2, r3
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	695b      	ldr	r3, [r3, #20]
 800b698:	431a      	orrs	r2, r3
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	6a1b      	ldr	r3, [r3, #32]
 800b69e:	431a      	orrs	r2, r3
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	685b      	ldr	r3, [r3, #4]
 800b6a4:	431a      	orrs	r2, r3
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b6aa:	431a      	orrs	r2, r3
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	689b      	ldr	r3, [r3, #8]
 800b6b0:	431a      	orrs	r2, r3
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b6b6:	ea42 0103 	orr.w	r1, r2, r3
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	430a      	orrs	r2, r1
 800b6c4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	685b      	ldr	r3, [r3, #4]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d113      	bne.n	800b6f6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	689b      	ldr	r3, [r3, #8]
 800b6d4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b6e0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	689b      	ldr	r3, [r3, #8]
 800b6e8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b6f4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	f022 0201 	bic.w	r2, r2, #1
 800b704:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	685b      	ldr	r3, [r3, #4]
 800b70a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d00a      	beq.n	800b728 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	68db      	ldr	r3, [r3, #12]
 800b718:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	430a      	orrs	r2, r1
 800b726:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	2200      	movs	r2, #0
 800b72c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	2201      	movs	r2, #1
 800b734:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800b738:	2300      	movs	r3, #0
}
 800b73a:	4618      	mov	r0, r3
 800b73c:	3710      	adds	r7, #16
 800b73e:	46bd      	mov	sp, r7
 800b740:	bd80      	pop	{r7, pc}
 800b742:	bf00      	nop
 800b744:	40013000 	.word	0x40013000
 800b748:	40003800 	.word	0x40003800
 800b74c:	40003c00 	.word	0x40003c00

0800b750 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800b750:	b480      	push	{r7}
 800b752:	b085      	sub	sp, #20
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b75c:	095b      	lsrs	r3, r3, #5
 800b75e:	3301      	adds	r3, #1
 800b760:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	68db      	ldr	r3, [r3, #12]
 800b766:	3301      	adds	r3, #1
 800b768:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b76a:	68bb      	ldr	r3, [r7, #8]
 800b76c:	3307      	adds	r3, #7
 800b76e:	08db      	lsrs	r3, r3, #3
 800b770:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b772:	68bb      	ldr	r3, [r7, #8]
 800b774:	68fa      	ldr	r2, [r7, #12]
 800b776:	fb02 f303 	mul.w	r3, r2, r3
}
 800b77a:	4618      	mov	r0, r3
 800b77c:	3714      	adds	r7, #20
 800b77e:	46bd      	mov	sp, r7
 800b780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b784:	4770      	bx	lr

0800b786 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b786:	b580      	push	{r7, lr}
 800b788:	b082      	sub	sp, #8
 800b78a:	af00      	add	r7, sp, #0
 800b78c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d101      	bne.n	800b798 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b794:	2301      	movs	r3, #1
 800b796:	e049      	b.n	800b82c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b79e:	b2db      	uxtb	r3, r3
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d106      	bne.n	800b7b2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b7ac:	6878      	ldr	r0, [r7, #4]
 800b7ae:	f7f6 fd07 	bl	80021c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	2202      	movs	r2, #2
 800b7b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681a      	ldr	r2, [r3, #0]
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	3304      	adds	r3, #4
 800b7c2:	4619      	mov	r1, r3
 800b7c4:	4610      	mov	r0, r2
 800b7c6:	f000 fea9 	bl	800c51c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	2201      	movs	r2, #1
 800b7ce:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	2201      	movs	r2, #1
 800b7d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	2201      	movs	r2, #1
 800b7de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	2201      	movs	r2, #1
 800b7e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	2201      	movs	r2, #1
 800b7ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	2201      	movs	r2, #1
 800b7f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	2201      	movs	r2, #1
 800b7fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	2201      	movs	r2, #1
 800b806:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	2201      	movs	r2, #1
 800b80e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	2201      	movs	r2, #1
 800b816:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	2201      	movs	r2, #1
 800b81e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	2201      	movs	r2, #1
 800b826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b82a:	2300      	movs	r3, #0
}
 800b82c:	4618      	mov	r0, r3
 800b82e:	3708      	adds	r7, #8
 800b830:	46bd      	mov	sp, r7
 800b832:	bd80      	pop	{r7, pc}

0800b834 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b834:	b480      	push	{r7}
 800b836:	b085      	sub	sp, #20
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b842:	b2db      	uxtb	r3, r3
 800b844:	2b01      	cmp	r3, #1
 800b846:	d001      	beq.n	800b84c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b848:	2301      	movs	r3, #1
 800b84a:	e054      	b.n	800b8f6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	2202      	movs	r2, #2
 800b850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	68da      	ldr	r2, [r3, #12]
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	f042 0201 	orr.w	r2, r2, #1
 800b862:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	4a26      	ldr	r2, [pc, #152]	; (800b904 <HAL_TIM_Base_Start_IT+0xd0>)
 800b86a:	4293      	cmp	r3, r2
 800b86c:	d022      	beq.n	800b8b4 <HAL_TIM_Base_Start_IT+0x80>
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b876:	d01d      	beq.n	800b8b4 <HAL_TIM_Base_Start_IT+0x80>
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	4a22      	ldr	r2, [pc, #136]	; (800b908 <HAL_TIM_Base_Start_IT+0xd4>)
 800b87e:	4293      	cmp	r3, r2
 800b880:	d018      	beq.n	800b8b4 <HAL_TIM_Base_Start_IT+0x80>
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	4a21      	ldr	r2, [pc, #132]	; (800b90c <HAL_TIM_Base_Start_IT+0xd8>)
 800b888:	4293      	cmp	r3, r2
 800b88a:	d013      	beq.n	800b8b4 <HAL_TIM_Base_Start_IT+0x80>
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	4a1f      	ldr	r2, [pc, #124]	; (800b910 <HAL_TIM_Base_Start_IT+0xdc>)
 800b892:	4293      	cmp	r3, r2
 800b894:	d00e      	beq.n	800b8b4 <HAL_TIM_Base_Start_IT+0x80>
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	4a1e      	ldr	r2, [pc, #120]	; (800b914 <HAL_TIM_Base_Start_IT+0xe0>)
 800b89c:	4293      	cmp	r3, r2
 800b89e:	d009      	beq.n	800b8b4 <HAL_TIM_Base_Start_IT+0x80>
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	4a1c      	ldr	r2, [pc, #112]	; (800b918 <HAL_TIM_Base_Start_IT+0xe4>)
 800b8a6:	4293      	cmp	r3, r2
 800b8a8:	d004      	beq.n	800b8b4 <HAL_TIM_Base_Start_IT+0x80>
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	4a1b      	ldr	r2, [pc, #108]	; (800b91c <HAL_TIM_Base_Start_IT+0xe8>)
 800b8b0:	4293      	cmp	r3, r2
 800b8b2:	d115      	bne.n	800b8e0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	689a      	ldr	r2, [r3, #8]
 800b8ba:	4b19      	ldr	r3, [pc, #100]	; (800b920 <HAL_TIM_Base_Start_IT+0xec>)
 800b8bc:	4013      	ands	r3, r2
 800b8be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	2b06      	cmp	r3, #6
 800b8c4:	d015      	beq.n	800b8f2 <HAL_TIM_Base_Start_IT+0xbe>
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b8cc:	d011      	beq.n	800b8f2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	681a      	ldr	r2, [r3, #0]
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	f042 0201 	orr.w	r2, r2, #1
 800b8dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b8de:	e008      	b.n	800b8f2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	681a      	ldr	r2, [r3, #0]
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	f042 0201 	orr.w	r2, r2, #1
 800b8ee:	601a      	str	r2, [r3, #0]
 800b8f0:	e000      	b.n	800b8f4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b8f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b8f4:	2300      	movs	r3, #0
}
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	3714      	adds	r7, #20
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b900:	4770      	bx	lr
 800b902:	bf00      	nop
 800b904:	40010000 	.word	0x40010000
 800b908:	40000400 	.word	0x40000400
 800b90c:	40000800 	.word	0x40000800
 800b910:	40000c00 	.word	0x40000c00
 800b914:	40010400 	.word	0x40010400
 800b918:	40001800 	.word	0x40001800
 800b91c:	40014000 	.word	0x40014000
 800b920:	00010007 	.word	0x00010007

0800b924 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b924:	b580      	push	{r7, lr}
 800b926:	b084      	sub	sp, #16
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
 800b92c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b92e:	2300      	movs	r3, #0
 800b930:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b932:	683b      	ldr	r3, [r7, #0]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d109      	bne.n	800b94c <HAL_TIM_OC_Start_IT+0x28>
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b93e:	b2db      	uxtb	r3, r3
 800b940:	2b01      	cmp	r3, #1
 800b942:	bf14      	ite	ne
 800b944:	2301      	movne	r3, #1
 800b946:	2300      	moveq	r3, #0
 800b948:	b2db      	uxtb	r3, r3
 800b94a:	e03c      	b.n	800b9c6 <HAL_TIM_OC_Start_IT+0xa2>
 800b94c:	683b      	ldr	r3, [r7, #0]
 800b94e:	2b04      	cmp	r3, #4
 800b950:	d109      	bne.n	800b966 <HAL_TIM_OC_Start_IT+0x42>
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b958:	b2db      	uxtb	r3, r3
 800b95a:	2b01      	cmp	r3, #1
 800b95c:	bf14      	ite	ne
 800b95e:	2301      	movne	r3, #1
 800b960:	2300      	moveq	r3, #0
 800b962:	b2db      	uxtb	r3, r3
 800b964:	e02f      	b.n	800b9c6 <HAL_TIM_OC_Start_IT+0xa2>
 800b966:	683b      	ldr	r3, [r7, #0]
 800b968:	2b08      	cmp	r3, #8
 800b96a:	d109      	bne.n	800b980 <HAL_TIM_OC_Start_IT+0x5c>
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b972:	b2db      	uxtb	r3, r3
 800b974:	2b01      	cmp	r3, #1
 800b976:	bf14      	ite	ne
 800b978:	2301      	movne	r3, #1
 800b97a:	2300      	moveq	r3, #0
 800b97c:	b2db      	uxtb	r3, r3
 800b97e:	e022      	b.n	800b9c6 <HAL_TIM_OC_Start_IT+0xa2>
 800b980:	683b      	ldr	r3, [r7, #0]
 800b982:	2b0c      	cmp	r3, #12
 800b984:	d109      	bne.n	800b99a <HAL_TIM_OC_Start_IT+0x76>
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b98c:	b2db      	uxtb	r3, r3
 800b98e:	2b01      	cmp	r3, #1
 800b990:	bf14      	ite	ne
 800b992:	2301      	movne	r3, #1
 800b994:	2300      	moveq	r3, #0
 800b996:	b2db      	uxtb	r3, r3
 800b998:	e015      	b.n	800b9c6 <HAL_TIM_OC_Start_IT+0xa2>
 800b99a:	683b      	ldr	r3, [r7, #0]
 800b99c:	2b10      	cmp	r3, #16
 800b99e:	d109      	bne.n	800b9b4 <HAL_TIM_OC_Start_IT+0x90>
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b9a6:	b2db      	uxtb	r3, r3
 800b9a8:	2b01      	cmp	r3, #1
 800b9aa:	bf14      	ite	ne
 800b9ac:	2301      	movne	r3, #1
 800b9ae:	2300      	moveq	r3, #0
 800b9b0:	b2db      	uxtb	r3, r3
 800b9b2:	e008      	b.n	800b9c6 <HAL_TIM_OC_Start_IT+0xa2>
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b9ba:	b2db      	uxtb	r3, r3
 800b9bc:	2b01      	cmp	r3, #1
 800b9be:	bf14      	ite	ne
 800b9c0:	2301      	movne	r3, #1
 800b9c2:	2300      	moveq	r3, #0
 800b9c4:	b2db      	uxtb	r3, r3
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d001      	beq.n	800b9ce <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800b9ca:	2301      	movs	r3, #1
 800b9cc:	e0ec      	b.n	800bba8 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b9ce:	683b      	ldr	r3, [r7, #0]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d104      	bne.n	800b9de <HAL_TIM_OC_Start_IT+0xba>
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	2202      	movs	r2, #2
 800b9d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b9dc:	e023      	b.n	800ba26 <HAL_TIM_OC_Start_IT+0x102>
 800b9de:	683b      	ldr	r3, [r7, #0]
 800b9e0:	2b04      	cmp	r3, #4
 800b9e2:	d104      	bne.n	800b9ee <HAL_TIM_OC_Start_IT+0xca>
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	2202      	movs	r2, #2
 800b9e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b9ec:	e01b      	b.n	800ba26 <HAL_TIM_OC_Start_IT+0x102>
 800b9ee:	683b      	ldr	r3, [r7, #0]
 800b9f0:	2b08      	cmp	r3, #8
 800b9f2:	d104      	bne.n	800b9fe <HAL_TIM_OC_Start_IT+0xda>
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	2202      	movs	r2, #2
 800b9f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b9fc:	e013      	b.n	800ba26 <HAL_TIM_OC_Start_IT+0x102>
 800b9fe:	683b      	ldr	r3, [r7, #0]
 800ba00:	2b0c      	cmp	r3, #12
 800ba02:	d104      	bne.n	800ba0e <HAL_TIM_OC_Start_IT+0xea>
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	2202      	movs	r2, #2
 800ba08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ba0c:	e00b      	b.n	800ba26 <HAL_TIM_OC_Start_IT+0x102>
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	2b10      	cmp	r3, #16
 800ba12:	d104      	bne.n	800ba1e <HAL_TIM_OC_Start_IT+0xfa>
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2202      	movs	r2, #2
 800ba18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ba1c:	e003      	b.n	800ba26 <HAL_TIM_OC_Start_IT+0x102>
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	2202      	movs	r2, #2
 800ba22:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800ba26:	683b      	ldr	r3, [r7, #0]
 800ba28:	2b0c      	cmp	r3, #12
 800ba2a:	d841      	bhi.n	800bab0 <HAL_TIM_OC_Start_IT+0x18c>
 800ba2c:	a201      	add	r2, pc, #4	; (adr r2, 800ba34 <HAL_TIM_OC_Start_IT+0x110>)
 800ba2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba32:	bf00      	nop
 800ba34:	0800ba69 	.word	0x0800ba69
 800ba38:	0800bab1 	.word	0x0800bab1
 800ba3c:	0800bab1 	.word	0x0800bab1
 800ba40:	0800bab1 	.word	0x0800bab1
 800ba44:	0800ba7b 	.word	0x0800ba7b
 800ba48:	0800bab1 	.word	0x0800bab1
 800ba4c:	0800bab1 	.word	0x0800bab1
 800ba50:	0800bab1 	.word	0x0800bab1
 800ba54:	0800ba8d 	.word	0x0800ba8d
 800ba58:	0800bab1 	.word	0x0800bab1
 800ba5c:	0800bab1 	.word	0x0800bab1
 800ba60:	0800bab1 	.word	0x0800bab1
 800ba64:	0800ba9f 	.word	0x0800ba9f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	68da      	ldr	r2, [r3, #12]
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	f042 0202 	orr.w	r2, r2, #2
 800ba76:	60da      	str	r2, [r3, #12]
      break;
 800ba78:	e01d      	b.n	800bab6 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	68da      	ldr	r2, [r3, #12]
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	f042 0204 	orr.w	r2, r2, #4
 800ba88:	60da      	str	r2, [r3, #12]
      break;
 800ba8a:	e014      	b.n	800bab6 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	68da      	ldr	r2, [r3, #12]
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	f042 0208 	orr.w	r2, r2, #8
 800ba9a:	60da      	str	r2, [r3, #12]
      break;
 800ba9c:	e00b      	b.n	800bab6 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	68da      	ldr	r2, [r3, #12]
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	f042 0210 	orr.w	r2, r2, #16
 800baac:	60da      	str	r2, [r3, #12]
      break;
 800baae:	e002      	b.n	800bab6 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800bab0:	2301      	movs	r3, #1
 800bab2:	73fb      	strb	r3, [r7, #15]
      break;
 800bab4:	bf00      	nop
  }

  if (status == HAL_OK)
 800bab6:	7bfb      	ldrb	r3, [r7, #15]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d174      	bne.n	800bba6 <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	2201      	movs	r2, #1
 800bac2:	6839      	ldr	r1, [r7, #0]
 800bac4:	4618      	mov	r0, r3
 800bac6:	f001 f943 	bl	800cd50 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	4a38      	ldr	r2, [pc, #224]	; (800bbb0 <HAL_TIM_OC_Start_IT+0x28c>)
 800bad0:	4293      	cmp	r3, r2
 800bad2:	d013      	beq.n	800bafc <HAL_TIM_OC_Start_IT+0x1d8>
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	4a36      	ldr	r2, [pc, #216]	; (800bbb4 <HAL_TIM_OC_Start_IT+0x290>)
 800bada:	4293      	cmp	r3, r2
 800badc:	d00e      	beq.n	800bafc <HAL_TIM_OC_Start_IT+0x1d8>
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	4a35      	ldr	r2, [pc, #212]	; (800bbb8 <HAL_TIM_OC_Start_IT+0x294>)
 800bae4:	4293      	cmp	r3, r2
 800bae6:	d009      	beq.n	800bafc <HAL_TIM_OC_Start_IT+0x1d8>
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	4a33      	ldr	r2, [pc, #204]	; (800bbbc <HAL_TIM_OC_Start_IT+0x298>)
 800baee:	4293      	cmp	r3, r2
 800baf0:	d004      	beq.n	800bafc <HAL_TIM_OC_Start_IT+0x1d8>
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	4a32      	ldr	r2, [pc, #200]	; (800bbc0 <HAL_TIM_OC_Start_IT+0x29c>)
 800baf8:	4293      	cmp	r3, r2
 800bafa:	d101      	bne.n	800bb00 <HAL_TIM_OC_Start_IT+0x1dc>
 800bafc:	2301      	movs	r3, #1
 800bafe:	e000      	b.n	800bb02 <HAL_TIM_OC_Start_IT+0x1de>
 800bb00:	2300      	movs	r3, #0
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d007      	beq.n	800bb16 <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bb14:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	4a25      	ldr	r2, [pc, #148]	; (800bbb0 <HAL_TIM_OC_Start_IT+0x28c>)
 800bb1c:	4293      	cmp	r3, r2
 800bb1e:	d022      	beq.n	800bb66 <HAL_TIM_OC_Start_IT+0x242>
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb28:	d01d      	beq.n	800bb66 <HAL_TIM_OC_Start_IT+0x242>
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	4a25      	ldr	r2, [pc, #148]	; (800bbc4 <HAL_TIM_OC_Start_IT+0x2a0>)
 800bb30:	4293      	cmp	r3, r2
 800bb32:	d018      	beq.n	800bb66 <HAL_TIM_OC_Start_IT+0x242>
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	4a23      	ldr	r2, [pc, #140]	; (800bbc8 <HAL_TIM_OC_Start_IT+0x2a4>)
 800bb3a:	4293      	cmp	r3, r2
 800bb3c:	d013      	beq.n	800bb66 <HAL_TIM_OC_Start_IT+0x242>
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	4a22      	ldr	r2, [pc, #136]	; (800bbcc <HAL_TIM_OC_Start_IT+0x2a8>)
 800bb44:	4293      	cmp	r3, r2
 800bb46:	d00e      	beq.n	800bb66 <HAL_TIM_OC_Start_IT+0x242>
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	4a19      	ldr	r2, [pc, #100]	; (800bbb4 <HAL_TIM_OC_Start_IT+0x290>)
 800bb4e:	4293      	cmp	r3, r2
 800bb50:	d009      	beq.n	800bb66 <HAL_TIM_OC_Start_IT+0x242>
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	4a1e      	ldr	r2, [pc, #120]	; (800bbd0 <HAL_TIM_OC_Start_IT+0x2ac>)
 800bb58:	4293      	cmp	r3, r2
 800bb5a:	d004      	beq.n	800bb66 <HAL_TIM_OC_Start_IT+0x242>
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	4a15      	ldr	r2, [pc, #84]	; (800bbb8 <HAL_TIM_OC_Start_IT+0x294>)
 800bb62:	4293      	cmp	r3, r2
 800bb64:	d115      	bne.n	800bb92 <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	689a      	ldr	r2, [r3, #8]
 800bb6c:	4b19      	ldr	r3, [pc, #100]	; (800bbd4 <HAL_TIM_OC_Start_IT+0x2b0>)
 800bb6e:	4013      	ands	r3, r2
 800bb70:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bb72:	68bb      	ldr	r3, [r7, #8]
 800bb74:	2b06      	cmp	r3, #6
 800bb76:	d015      	beq.n	800bba4 <HAL_TIM_OC_Start_IT+0x280>
 800bb78:	68bb      	ldr	r3, [r7, #8]
 800bb7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb7e:	d011      	beq.n	800bba4 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	681a      	ldr	r2, [r3, #0]
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	f042 0201 	orr.w	r2, r2, #1
 800bb8e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bb90:	e008      	b.n	800bba4 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	681a      	ldr	r2, [r3, #0]
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	f042 0201 	orr.w	r2, r2, #1
 800bba0:	601a      	str	r2, [r3, #0]
 800bba2:	e000      	b.n	800bba6 <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bba4:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800bba6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bba8:	4618      	mov	r0, r3
 800bbaa:	3710      	adds	r7, #16
 800bbac:	46bd      	mov	sp, r7
 800bbae:	bd80      	pop	{r7, pc}
 800bbb0:	40010000 	.word	0x40010000
 800bbb4:	40010400 	.word	0x40010400
 800bbb8:	40014000 	.word	0x40014000
 800bbbc:	40014400 	.word	0x40014400
 800bbc0:	40014800 	.word	0x40014800
 800bbc4:	40000400 	.word	0x40000400
 800bbc8:	40000800 	.word	0x40000800
 800bbcc:	40000c00 	.word	0x40000c00
 800bbd0:	40001800 	.word	0x40001800
 800bbd4:	00010007 	.word	0x00010007

0800bbd8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b082      	sub	sp, #8
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d101      	bne.n	800bbea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800bbe6:	2301      	movs	r3, #1
 800bbe8:	e049      	b.n	800bc7e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bbf0:	b2db      	uxtb	r3, r3
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d106      	bne.n	800bc04 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800bbfe:	6878      	ldr	r0, [r7, #4]
 800bc00:	f000 f841 	bl	800bc86 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	2202      	movs	r2, #2
 800bc08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681a      	ldr	r2, [r3, #0]
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	3304      	adds	r3, #4
 800bc14:	4619      	mov	r1, r3
 800bc16:	4610      	mov	r0, r2
 800bc18:	f000 fc80 	bl	800c51c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	2201      	movs	r2, #1
 800bc20:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	2201      	movs	r2, #1
 800bc28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	2201      	movs	r2, #1
 800bc30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2201      	movs	r2, #1
 800bc38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	2201      	movs	r2, #1
 800bc40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	2201      	movs	r2, #1
 800bc48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	2201      	movs	r2, #1
 800bc50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	2201      	movs	r2, #1
 800bc58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	2201      	movs	r2, #1
 800bc60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	2201      	movs	r2, #1
 800bc68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2201      	movs	r2, #1
 800bc70:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2201      	movs	r2, #1
 800bc78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bc7c:	2300      	movs	r3, #0
}
 800bc7e:	4618      	mov	r0, r3
 800bc80:	3708      	adds	r7, #8
 800bc82:	46bd      	mov	sp, r7
 800bc84:	bd80      	pop	{r7, pc}

0800bc86 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800bc86:	b480      	push	{r7}
 800bc88:	b083      	sub	sp, #12
 800bc8a:	af00      	add	r7, sp, #0
 800bc8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800bc8e:	bf00      	nop
 800bc90:	370c      	adds	r7, #12
 800bc92:	46bd      	mov	sp, r7
 800bc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc98:	4770      	bx	lr
	...

0800bc9c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b084      	sub	sp, #16
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
 800bca4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800bca6:	683b      	ldr	r3, [r7, #0]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d109      	bne.n	800bcc0 <HAL_TIM_PWM_Start+0x24>
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bcb2:	b2db      	uxtb	r3, r3
 800bcb4:	2b01      	cmp	r3, #1
 800bcb6:	bf14      	ite	ne
 800bcb8:	2301      	movne	r3, #1
 800bcba:	2300      	moveq	r3, #0
 800bcbc:	b2db      	uxtb	r3, r3
 800bcbe:	e03c      	b.n	800bd3a <HAL_TIM_PWM_Start+0x9e>
 800bcc0:	683b      	ldr	r3, [r7, #0]
 800bcc2:	2b04      	cmp	r3, #4
 800bcc4:	d109      	bne.n	800bcda <HAL_TIM_PWM_Start+0x3e>
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800bccc:	b2db      	uxtb	r3, r3
 800bcce:	2b01      	cmp	r3, #1
 800bcd0:	bf14      	ite	ne
 800bcd2:	2301      	movne	r3, #1
 800bcd4:	2300      	moveq	r3, #0
 800bcd6:	b2db      	uxtb	r3, r3
 800bcd8:	e02f      	b.n	800bd3a <HAL_TIM_PWM_Start+0x9e>
 800bcda:	683b      	ldr	r3, [r7, #0]
 800bcdc:	2b08      	cmp	r3, #8
 800bcde:	d109      	bne.n	800bcf4 <HAL_TIM_PWM_Start+0x58>
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bce6:	b2db      	uxtb	r3, r3
 800bce8:	2b01      	cmp	r3, #1
 800bcea:	bf14      	ite	ne
 800bcec:	2301      	movne	r3, #1
 800bcee:	2300      	moveq	r3, #0
 800bcf0:	b2db      	uxtb	r3, r3
 800bcf2:	e022      	b.n	800bd3a <HAL_TIM_PWM_Start+0x9e>
 800bcf4:	683b      	ldr	r3, [r7, #0]
 800bcf6:	2b0c      	cmp	r3, #12
 800bcf8:	d109      	bne.n	800bd0e <HAL_TIM_PWM_Start+0x72>
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bd00:	b2db      	uxtb	r3, r3
 800bd02:	2b01      	cmp	r3, #1
 800bd04:	bf14      	ite	ne
 800bd06:	2301      	movne	r3, #1
 800bd08:	2300      	moveq	r3, #0
 800bd0a:	b2db      	uxtb	r3, r3
 800bd0c:	e015      	b.n	800bd3a <HAL_TIM_PWM_Start+0x9e>
 800bd0e:	683b      	ldr	r3, [r7, #0]
 800bd10:	2b10      	cmp	r3, #16
 800bd12:	d109      	bne.n	800bd28 <HAL_TIM_PWM_Start+0x8c>
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bd1a:	b2db      	uxtb	r3, r3
 800bd1c:	2b01      	cmp	r3, #1
 800bd1e:	bf14      	ite	ne
 800bd20:	2301      	movne	r3, #1
 800bd22:	2300      	moveq	r3, #0
 800bd24:	b2db      	uxtb	r3, r3
 800bd26:	e008      	b.n	800bd3a <HAL_TIM_PWM_Start+0x9e>
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bd2e:	b2db      	uxtb	r3, r3
 800bd30:	2b01      	cmp	r3, #1
 800bd32:	bf14      	ite	ne
 800bd34:	2301      	movne	r3, #1
 800bd36:	2300      	moveq	r3, #0
 800bd38:	b2db      	uxtb	r3, r3
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d001      	beq.n	800bd42 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800bd3e:	2301      	movs	r3, #1
 800bd40:	e0a1      	b.n	800be86 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800bd42:	683b      	ldr	r3, [r7, #0]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d104      	bne.n	800bd52 <HAL_TIM_PWM_Start+0xb6>
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	2202      	movs	r2, #2
 800bd4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bd50:	e023      	b.n	800bd9a <HAL_TIM_PWM_Start+0xfe>
 800bd52:	683b      	ldr	r3, [r7, #0]
 800bd54:	2b04      	cmp	r3, #4
 800bd56:	d104      	bne.n	800bd62 <HAL_TIM_PWM_Start+0xc6>
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	2202      	movs	r2, #2
 800bd5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bd60:	e01b      	b.n	800bd9a <HAL_TIM_PWM_Start+0xfe>
 800bd62:	683b      	ldr	r3, [r7, #0]
 800bd64:	2b08      	cmp	r3, #8
 800bd66:	d104      	bne.n	800bd72 <HAL_TIM_PWM_Start+0xd6>
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	2202      	movs	r2, #2
 800bd6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bd70:	e013      	b.n	800bd9a <HAL_TIM_PWM_Start+0xfe>
 800bd72:	683b      	ldr	r3, [r7, #0]
 800bd74:	2b0c      	cmp	r3, #12
 800bd76:	d104      	bne.n	800bd82 <HAL_TIM_PWM_Start+0xe6>
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	2202      	movs	r2, #2
 800bd7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bd80:	e00b      	b.n	800bd9a <HAL_TIM_PWM_Start+0xfe>
 800bd82:	683b      	ldr	r3, [r7, #0]
 800bd84:	2b10      	cmp	r3, #16
 800bd86:	d104      	bne.n	800bd92 <HAL_TIM_PWM_Start+0xf6>
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	2202      	movs	r2, #2
 800bd8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bd90:	e003      	b.n	800bd9a <HAL_TIM_PWM_Start+0xfe>
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	2202      	movs	r2, #2
 800bd96:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	2201      	movs	r2, #1
 800bda0:	6839      	ldr	r1, [r7, #0]
 800bda2:	4618      	mov	r0, r3
 800bda4:	f000 ffd4 	bl	800cd50 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	4a38      	ldr	r2, [pc, #224]	; (800be90 <HAL_TIM_PWM_Start+0x1f4>)
 800bdae:	4293      	cmp	r3, r2
 800bdb0:	d013      	beq.n	800bdda <HAL_TIM_PWM_Start+0x13e>
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	4a37      	ldr	r2, [pc, #220]	; (800be94 <HAL_TIM_PWM_Start+0x1f8>)
 800bdb8:	4293      	cmp	r3, r2
 800bdba:	d00e      	beq.n	800bdda <HAL_TIM_PWM_Start+0x13e>
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	4a35      	ldr	r2, [pc, #212]	; (800be98 <HAL_TIM_PWM_Start+0x1fc>)
 800bdc2:	4293      	cmp	r3, r2
 800bdc4:	d009      	beq.n	800bdda <HAL_TIM_PWM_Start+0x13e>
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	4a34      	ldr	r2, [pc, #208]	; (800be9c <HAL_TIM_PWM_Start+0x200>)
 800bdcc:	4293      	cmp	r3, r2
 800bdce:	d004      	beq.n	800bdda <HAL_TIM_PWM_Start+0x13e>
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	4a32      	ldr	r2, [pc, #200]	; (800bea0 <HAL_TIM_PWM_Start+0x204>)
 800bdd6:	4293      	cmp	r3, r2
 800bdd8:	d101      	bne.n	800bdde <HAL_TIM_PWM_Start+0x142>
 800bdda:	2301      	movs	r3, #1
 800bddc:	e000      	b.n	800bde0 <HAL_TIM_PWM_Start+0x144>
 800bdde:	2300      	movs	r3, #0
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d007      	beq.n	800bdf4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bdf2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	4a25      	ldr	r2, [pc, #148]	; (800be90 <HAL_TIM_PWM_Start+0x1f4>)
 800bdfa:	4293      	cmp	r3, r2
 800bdfc:	d022      	beq.n	800be44 <HAL_TIM_PWM_Start+0x1a8>
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be06:	d01d      	beq.n	800be44 <HAL_TIM_PWM_Start+0x1a8>
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	4a25      	ldr	r2, [pc, #148]	; (800bea4 <HAL_TIM_PWM_Start+0x208>)
 800be0e:	4293      	cmp	r3, r2
 800be10:	d018      	beq.n	800be44 <HAL_TIM_PWM_Start+0x1a8>
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	4a24      	ldr	r2, [pc, #144]	; (800bea8 <HAL_TIM_PWM_Start+0x20c>)
 800be18:	4293      	cmp	r3, r2
 800be1a:	d013      	beq.n	800be44 <HAL_TIM_PWM_Start+0x1a8>
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	4a22      	ldr	r2, [pc, #136]	; (800beac <HAL_TIM_PWM_Start+0x210>)
 800be22:	4293      	cmp	r3, r2
 800be24:	d00e      	beq.n	800be44 <HAL_TIM_PWM_Start+0x1a8>
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	4a1a      	ldr	r2, [pc, #104]	; (800be94 <HAL_TIM_PWM_Start+0x1f8>)
 800be2c:	4293      	cmp	r3, r2
 800be2e:	d009      	beq.n	800be44 <HAL_TIM_PWM_Start+0x1a8>
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	4a1e      	ldr	r2, [pc, #120]	; (800beb0 <HAL_TIM_PWM_Start+0x214>)
 800be36:	4293      	cmp	r3, r2
 800be38:	d004      	beq.n	800be44 <HAL_TIM_PWM_Start+0x1a8>
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	4a16      	ldr	r2, [pc, #88]	; (800be98 <HAL_TIM_PWM_Start+0x1fc>)
 800be40:	4293      	cmp	r3, r2
 800be42:	d115      	bne.n	800be70 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	689a      	ldr	r2, [r3, #8]
 800be4a:	4b1a      	ldr	r3, [pc, #104]	; (800beb4 <HAL_TIM_PWM_Start+0x218>)
 800be4c:	4013      	ands	r3, r2
 800be4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	2b06      	cmp	r3, #6
 800be54:	d015      	beq.n	800be82 <HAL_TIM_PWM_Start+0x1e6>
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be5c:	d011      	beq.n	800be82 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	681a      	ldr	r2, [r3, #0]
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	f042 0201 	orr.w	r2, r2, #1
 800be6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be6e:	e008      	b.n	800be82 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	681a      	ldr	r2, [r3, #0]
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	f042 0201 	orr.w	r2, r2, #1
 800be7e:	601a      	str	r2, [r3, #0]
 800be80:	e000      	b.n	800be84 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be82:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800be84:	2300      	movs	r3, #0
}
 800be86:	4618      	mov	r0, r3
 800be88:	3710      	adds	r7, #16
 800be8a:	46bd      	mov	sp, r7
 800be8c:	bd80      	pop	{r7, pc}
 800be8e:	bf00      	nop
 800be90:	40010000 	.word	0x40010000
 800be94:	40010400 	.word	0x40010400
 800be98:	40014000 	.word	0x40014000
 800be9c:	40014400 	.word	0x40014400
 800bea0:	40014800 	.word	0x40014800
 800bea4:	40000400 	.word	0x40000400
 800bea8:	40000800 	.word	0x40000800
 800beac:	40000c00 	.word	0x40000c00
 800beb0:	40001800 	.word	0x40001800
 800beb4:	00010007 	.word	0x00010007

0800beb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b084      	sub	sp, #16
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	68db      	ldr	r3, [r3, #12]
 800bec6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	691b      	ldr	r3, [r3, #16]
 800bece:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800bed0:	68bb      	ldr	r3, [r7, #8]
 800bed2:	f003 0302 	and.w	r3, r3, #2
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d020      	beq.n	800bf1c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	f003 0302 	and.w	r3, r3, #2
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d01b      	beq.n	800bf1c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	f06f 0202 	mvn.w	r2, #2
 800beec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	2201      	movs	r2, #1
 800bef2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	699b      	ldr	r3, [r3, #24]
 800befa:	f003 0303 	and.w	r3, r3, #3
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d003      	beq.n	800bf0a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bf02:	6878      	ldr	r0, [r7, #4]
 800bf04:	f000 faec 	bl	800c4e0 <HAL_TIM_IC_CaptureCallback>
 800bf08:	e005      	b.n	800bf16 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bf0a:	6878      	ldr	r0, [r7, #4]
 800bf0c:	f7f4 fbba 	bl	8000684 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bf10:	6878      	ldr	r0, [r7, #4]
 800bf12:	f000 faef 	bl	800c4f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	2200      	movs	r2, #0
 800bf1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800bf1c:	68bb      	ldr	r3, [r7, #8]
 800bf1e:	f003 0304 	and.w	r3, r3, #4
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d020      	beq.n	800bf68 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	f003 0304 	and.w	r3, r3, #4
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d01b      	beq.n	800bf68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	f06f 0204 	mvn.w	r2, #4
 800bf38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	2202      	movs	r2, #2
 800bf3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	699b      	ldr	r3, [r3, #24]
 800bf46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d003      	beq.n	800bf56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bf4e:	6878      	ldr	r0, [r7, #4]
 800bf50:	f000 fac6 	bl	800c4e0 <HAL_TIM_IC_CaptureCallback>
 800bf54:	e005      	b.n	800bf62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bf56:	6878      	ldr	r0, [r7, #4]
 800bf58:	f7f4 fb94 	bl	8000684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bf5c:	6878      	ldr	r0, [r7, #4]
 800bf5e:	f000 fac9 	bl	800c4f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	2200      	movs	r2, #0
 800bf66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800bf68:	68bb      	ldr	r3, [r7, #8]
 800bf6a:	f003 0308 	and.w	r3, r3, #8
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d020      	beq.n	800bfb4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	f003 0308 	and.w	r3, r3, #8
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d01b      	beq.n	800bfb4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	f06f 0208 	mvn.w	r2, #8
 800bf84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	2204      	movs	r2, #4
 800bf8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	69db      	ldr	r3, [r3, #28]
 800bf92:	f003 0303 	and.w	r3, r3, #3
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d003      	beq.n	800bfa2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bf9a:	6878      	ldr	r0, [r7, #4]
 800bf9c:	f000 faa0 	bl	800c4e0 <HAL_TIM_IC_CaptureCallback>
 800bfa0:	e005      	b.n	800bfae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bfa2:	6878      	ldr	r0, [r7, #4]
 800bfa4:	f7f4 fb6e 	bl	8000684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bfa8:	6878      	ldr	r0, [r7, #4]
 800bfaa:	f000 faa3 	bl	800c4f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	2200      	movs	r2, #0
 800bfb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800bfb4:	68bb      	ldr	r3, [r7, #8]
 800bfb6:	f003 0310 	and.w	r3, r3, #16
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d020      	beq.n	800c000 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	f003 0310 	and.w	r3, r3, #16
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d01b      	beq.n	800c000 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	f06f 0210 	mvn.w	r2, #16
 800bfd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	2208      	movs	r2, #8
 800bfd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	69db      	ldr	r3, [r3, #28]
 800bfde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d003      	beq.n	800bfee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bfe6:	6878      	ldr	r0, [r7, #4]
 800bfe8:	f000 fa7a 	bl	800c4e0 <HAL_TIM_IC_CaptureCallback>
 800bfec:	e005      	b.n	800bffa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bfee:	6878      	ldr	r0, [r7, #4]
 800bff0:	f7f4 fb48 	bl	8000684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bff4:	6878      	ldr	r0, [r7, #4]
 800bff6:	f000 fa7d 	bl	800c4f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	2200      	movs	r2, #0
 800bffe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800c000:	68bb      	ldr	r3, [r7, #8]
 800c002:	f003 0301 	and.w	r3, r3, #1
 800c006:	2b00      	cmp	r3, #0
 800c008:	d00c      	beq.n	800c024 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	f003 0301 	and.w	r3, r3, #1
 800c010:	2b00      	cmp	r3, #0
 800c012:	d007      	beq.n	800c024 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	f06f 0201 	mvn.w	r2, #1
 800c01c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c01e:	6878      	ldr	r0, [r7, #4]
 800c020:	f7f5 fe2a 	bl	8001c78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c024:	68bb      	ldr	r3, [r7, #8]
 800c026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d104      	bne.n	800c038 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800c02e:	68bb      	ldr	r3, [r7, #8]
 800c030:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c034:	2b00      	cmp	r3, #0
 800c036:	d00c      	beq.n	800c052 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d007      	beq.n	800c052 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800c04a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c04c:	6878      	ldr	r0, [r7, #4]
 800c04e:	f000 ffbb 	bl	800cfc8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800c052:	68bb      	ldr	r3, [r7, #8]
 800c054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d00c      	beq.n	800c076 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c062:	2b00      	cmp	r3, #0
 800c064:	d007      	beq.n	800c076 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c06e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c070:	6878      	ldr	r0, [r7, #4]
 800c072:	f000 ffb3 	bl	800cfdc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c076:	68bb      	ldr	r3, [r7, #8]
 800c078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d00c      	beq.n	800c09a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c086:	2b00      	cmp	r3, #0
 800c088:	d007      	beq.n	800c09a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c092:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c094:	6878      	ldr	r0, [r7, #4]
 800c096:	f000 fa37 	bl	800c508 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c09a:	68bb      	ldr	r3, [r7, #8]
 800c09c:	f003 0320 	and.w	r3, r3, #32
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d00c      	beq.n	800c0be <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	f003 0320 	and.w	r3, r3, #32
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d007      	beq.n	800c0be <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	f06f 0220 	mvn.w	r2, #32
 800c0b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c0b8:	6878      	ldr	r0, [r7, #4]
 800c0ba:	f000 ff7b 	bl	800cfb4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c0be:	bf00      	nop
 800c0c0:	3710      	adds	r7, #16
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	bd80      	pop	{r7, pc}
	...

0800c0c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	b086      	sub	sp, #24
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	60f8      	str	r0, [r7, #12]
 800c0d0:	60b9      	str	r1, [r7, #8]
 800c0d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c0de:	2b01      	cmp	r3, #1
 800c0e0:	d101      	bne.n	800c0e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c0e2:	2302      	movs	r3, #2
 800c0e4:	e0ff      	b.n	800c2e6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	2201      	movs	r2, #1
 800c0ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	2b14      	cmp	r3, #20
 800c0f2:	f200 80f0 	bhi.w	800c2d6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c0f6:	a201      	add	r2, pc, #4	; (adr r2, 800c0fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c0f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0fc:	0800c151 	.word	0x0800c151
 800c100:	0800c2d7 	.word	0x0800c2d7
 800c104:	0800c2d7 	.word	0x0800c2d7
 800c108:	0800c2d7 	.word	0x0800c2d7
 800c10c:	0800c191 	.word	0x0800c191
 800c110:	0800c2d7 	.word	0x0800c2d7
 800c114:	0800c2d7 	.word	0x0800c2d7
 800c118:	0800c2d7 	.word	0x0800c2d7
 800c11c:	0800c1d3 	.word	0x0800c1d3
 800c120:	0800c2d7 	.word	0x0800c2d7
 800c124:	0800c2d7 	.word	0x0800c2d7
 800c128:	0800c2d7 	.word	0x0800c2d7
 800c12c:	0800c213 	.word	0x0800c213
 800c130:	0800c2d7 	.word	0x0800c2d7
 800c134:	0800c2d7 	.word	0x0800c2d7
 800c138:	0800c2d7 	.word	0x0800c2d7
 800c13c:	0800c255 	.word	0x0800c255
 800c140:	0800c2d7 	.word	0x0800c2d7
 800c144:	0800c2d7 	.word	0x0800c2d7
 800c148:	0800c2d7 	.word	0x0800c2d7
 800c14c:	0800c295 	.word	0x0800c295
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	68b9      	ldr	r1, [r7, #8]
 800c156:	4618      	mov	r0, r3
 800c158:	f000 fa86 	bl	800c668 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	699a      	ldr	r2, [r3, #24]
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	f042 0208 	orr.w	r2, r2, #8
 800c16a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	699a      	ldr	r2, [r3, #24]
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	f022 0204 	bic.w	r2, r2, #4
 800c17a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	6999      	ldr	r1, [r3, #24]
 800c182:	68bb      	ldr	r3, [r7, #8]
 800c184:	691a      	ldr	r2, [r3, #16]
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	430a      	orrs	r2, r1
 800c18c:	619a      	str	r2, [r3, #24]
      break;
 800c18e:	e0a5      	b.n	800c2dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	68b9      	ldr	r1, [r7, #8]
 800c196:	4618      	mov	r0, r3
 800c198:	f000 faf6 	bl	800c788 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	699a      	ldr	r2, [r3, #24]
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c1aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	699a      	ldr	r2, [r3, #24]
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c1ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	6999      	ldr	r1, [r3, #24]
 800c1c2:	68bb      	ldr	r3, [r7, #8]
 800c1c4:	691b      	ldr	r3, [r3, #16]
 800c1c6:	021a      	lsls	r2, r3, #8
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	430a      	orrs	r2, r1
 800c1ce:	619a      	str	r2, [r3, #24]
      break;
 800c1d0:	e084      	b.n	800c2dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	68b9      	ldr	r1, [r7, #8]
 800c1d8:	4618      	mov	r0, r3
 800c1da:	f000 fb5f 	bl	800c89c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	69da      	ldr	r2, [r3, #28]
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	f042 0208 	orr.w	r2, r2, #8
 800c1ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	69da      	ldr	r2, [r3, #28]
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	f022 0204 	bic.w	r2, r2, #4
 800c1fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	69d9      	ldr	r1, [r3, #28]
 800c204:	68bb      	ldr	r3, [r7, #8]
 800c206:	691a      	ldr	r2, [r3, #16]
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	430a      	orrs	r2, r1
 800c20e:	61da      	str	r2, [r3, #28]
      break;
 800c210:	e064      	b.n	800c2dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	68b9      	ldr	r1, [r7, #8]
 800c218:	4618      	mov	r0, r3
 800c21a:	f000 fbc7 	bl	800c9ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	69da      	ldr	r2, [r3, #28]
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c22c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	69da      	ldr	r2, [r3, #28]
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c23c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	69d9      	ldr	r1, [r3, #28]
 800c244:	68bb      	ldr	r3, [r7, #8]
 800c246:	691b      	ldr	r3, [r3, #16]
 800c248:	021a      	lsls	r2, r3, #8
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	430a      	orrs	r2, r1
 800c250:	61da      	str	r2, [r3, #28]
      break;
 800c252:	e043      	b.n	800c2dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	68b9      	ldr	r1, [r7, #8]
 800c25a:	4618      	mov	r0, r3
 800c25c:	f000 fc10 	bl	800ca80 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	f042 0208 	orr.w	r2, r2, #8
 800c26e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	f022 0204 	bic.w	r2, r2, #4
 800c27e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c286:	68bb      	ldr	r3, [r7, #8]
 800c288:	691a      	ldr	r2, [r3, #16]
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	430a      	orrs	r2, r1
 800c290:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c292:	e023      	b.n	800c2dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	68b9      	ldr	r1, [r7, #8]
 800c29a:	4618      	mov	r0, r3
 800c29c:	f000 fc54 	bl	800cb48 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c2ae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c2be:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c2c6:	68bb      	ldr	r3, [r7, #8]
 800c2c8:	691b      	ldr	r3, [r3, #16]
 800c2ca:	021a      	lsls	r2, r3, #8
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	430a      	orrs	r2, r1
 800c2d2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c2d4:	e002      	b.n	800c2dc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c2d6:	2301      	movs	r3, #1
 800c2d8:	75fb      	strb	r3, [r7, #23]
      break;
 800c2da:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	2200      	movs	r2, #0
 800c2e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c2e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	3718      	adds	r7, #24
 800c2ea:	46bd      	mov	sp, r7
 800c2ec:	bd80      	pop	{r7, pc}
 800c2ee:	bf00      	nop

0800c2f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c2f0:	b580      	push	{r7, lr}
 800c2f2:	b084      	sub	sp, #16
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	6078      	str	r0, [r7, #4]
 800c2f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c304:	2b01      	cmp	r3, #1
 800c306:	d101      	bne.n	800c30c <HAL_TIM_ConfigClockSource+0x1c>
 800c308:	2302      	movs	r3, #2
 800c30a:	e0dc      	b.n	800c4c6 <HAL_TIM_ConfigClockSource+0x1d6>
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	2201      	movs	r2, #1
 800c310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	2202      	movs	r2, #2
 800c318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	689b      	ldr	r3, [r3, #8]
 800c322:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c324:	68ba      	ldr	r2, [r7, #8]
 800c326:	4b6a      	ldr	r3, [pc, #424]	; (800c4d0 <HAL_TIM_ConfigClockSource+0x1e0>)
 800c328:	4013      	ands	r3, r2
 800c32a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c32c:	68bb      	ldr	r3, [r7, #8]
 800c32e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c332:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	68ba      	ldr	r2, [r7, #8]
 800c33a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c33c:	683b      	ldr	r3, [r7, #0]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	4a64      	ldr	r2, [pc, #400]	; (800c4d4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c342:	4293      	cmp	r3, r2
 800c344:	f000 80a9 	beq.w	800c49a <HAL_TIM_ConfigClockSource+0x1aa>
 800c348:	4a62      	ldr	r2, [pc, #392]	; (800c4d4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c34a:	4293      	cmp	r3, r2
 800c34c:	f200 80ae 	bhi.w	800c4ac <HAL_TIM_ConfigClockSource+0x1bc>
 800c350:	4a61      	ldr	r2, [pc, #388]	; (800c4d8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c352:	4293      	cmp	r3, r2
 800c354:	f000 80a1 	beq.w	800c49a <HAL_TIM_ConfigClockSource+0x1aa>
 800c358:	4a5f      	ldr	r2, [pc, #380]	; (800c4d8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c35a:	4293      	cmp	r3, r2
 800c35c:	f200 80a6 	bhi.w	800c4ac <HAL_TIM_ConfigClockSource+0x1bc>
 800c360:	4a5e      	ldr	r2, [pc, #376]	; (800c4dc <HAL_TIM_ConfigClockSource+0x1ec>)
 800c362:	4293      	cmp	r3, r2
 800c364:	f000 8099 	beq.w	800c49a <HAL_TIM_ConfigClockSource+0x1aa>
 800c368:	4a5c      	ldr	r2, [pc, #368]	; (800c4dc <HAL_TIM_ConfigClockSource+0x1ec>)
 800c36a:	4293      	cmp	r3, r2
 800c36c:	f200 809e 	bhi.w	800c4ac <HAL_TIM_ConfigClockSource+0x1bc>
 800c370:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c374:	f000 8091 	beq.w	800c49a <HAL_TIM_ConfigClockSource+0x1aa>
 800c378:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c37c:	f200 8096 	bhi.w	800c4ac <HAL_TIM_ConfigClockSource+0x1bc>
 800c380:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c384:	f000 8089 	beq.w	800c49a <HAL_TIM_ConfigClockSource+0x1aa>
 800c388:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c38c:	f200 808e 	bhi.w	800c4ac <HAL_TIM_ConfigClockSource+0x1bc>
 800c390:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c394:	d03e      	beq.n	800c414 <HAL_TIM_ConfigClockSource+0x124>
 800c396:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c39a:	f200 8087 	bhi.w	800c4ac <HAL_TIM_ConfigClockSource+0x1bc>
 800c39e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c3a2:	f000 8086 	beq.w	800c4b2 <HAL_TIM_ConfigClockSource+0x1c2>
 800c3a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c3aa:	d87f      	bhi.n	800c4ac <HAL_TIM_ConfigClockSource+0x1bc>
 800c3ac:	2b70      	cmp	r3, #112	; 0x70
 800c3ae:	d01a      	beq.n	800c3e6 <HAL_TIM_ConfigClockSource+0xf6>
 800c3b0:	2b70      	cmp	r3, #112	; 0x70
 800c3b2:	d87b      	bhi.n	800c4ac <HAL_TIM_ConfigClockSource+0x1bc>
 800c3b4:	2b60      	cmp	r3, #96	; 0x60
 800c3b6:	d050      	beq.n	800c45a <HAL_TIM_ConfigClockSource+0x16a>
 800c3b8:	2b60      	cmp	r3, #96	; 0x60
 800c3ba:	d877      	bhi.n	800c4ac <HAL_TIM_ConfigClockSource+0x1bc>
 800c3bc:	2b50      	cmp	r3, #80	; 0x50
 800c3be:	d03c      	beq.n	800c43a <HAL_TIM_ConfigClockSource+0x14a>
 800c3c0:	2b50      	cmp	r3, #80	; 0x50
 800c3c2:	d873      	bhi.n	800c4ac <HAL_TIM_ConfigClockSource+0x1bc>
 800c3c4:	2b40      	cmp	r3, #64	; 0x40
 800c3c6:	d058      	beq.n	800c47a <HAL_TIM_ConfigClockSource+0x18a>
 800c3c8:	2b40      	cmp	r3, #64	; 0x40
 800c3ca:	d86f      	bhi.n	800c4ac <HAL_TIM_ConfigClockSource+0x1bc>
 800c3cc:	2b30      	cmp	r3, #48	; 0x30
 800c3ce:	d064      	beq.n	800c49a <HAL_TIM_ConfigClockSource+0x1aa>
 800c3d0:	2b30      	cmp	r3, #48	; 0x30
 800c3d2:	d86b      	bhi.n	800c4ac <HAL_TIM_ConfigClockSource+0x1bc>
 800c3d4:	2b20      	cmp	r3, #32
 800c3d6:	d060      	beq.n	800c49a <HAL_TIM_ConfigClockSource+0x1aa>
 800c3d8:	2b20      	cmp	r3, #32
 800c3da:	d867      	bhi.n	800c4ac <HAL_TIM_ConfigClockSource+0x1bc>
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d05c      	beq.n	800c49a <HAL_TIM_ConfigClockSource+0x1aa>
 800c3e0:	2b10      	cmp	r3, #16
 800c3e2:	d05a      	beq.n	800c49a <HAL_TIM_ConfigClockSource+0x1aa>
 800c3e4:	e062      	b.n	800c4ac <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	6818      	ldr	r0, [r3, #0]
 800c3ea:	683b      	ldr	r3, [r7, #0]
 800c3ec:	6899      	ldr	r1, [r3, #8]
 800c3ee:	683b      	ldr	r3, [r7, #0]
 800c3f0:	685a      	ldr	r2, [r3, #4]
 800c3f2:	683b      	ldr	r3, [r7, #0]
 800c3f4:	68db      	ldr	r3, [r3, #12]
 800c3f6:	f000 fc8b 	bl	800cd10 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	689b      	ldr	r3, [r3, #8]
 800c400:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c402:	68bb      	ldr	r3, [r7, #8]
 800c404:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c408:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	68ba      	ldr	r2, [r7, #8]
 800c410:	609a      	str	r2, [r3, #8]
      break;
 800c412:	e04f      	b.n	800c4b4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	6818      	ldr	r0, [r3, #0]
 800c418:	683b      	ldr	r3, [r7, #0]
 800c41a:	6899      	ldr	r1, [r3, #8]
 800c41c:	683b      	ldr	r3, [r7, #0]
 800c41e:	685a      	ldr	r2, [r3, #4]
 800c420:	683b      	ldr	r3, [r7, #0]
 800c422:	68db      	ldr	r3, [r3, #12]
 800c424:	f000 fc74 	bl	800cd10 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	689a      	ldr	r2, [r3, #8]
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c436:	609a      	str	r2, [r3, #8]
      break;
 800c438:	e03c      	b.n	800c4b4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	6818      	ldr	r0, [r3, #0]
 800c43e:	683b      	ldr	r3, [r7, #0]
 800c440:	6859      	ldr	r1, [r3, #4]
 800c442:	683b      	ldr	r3, [r7, #0]
 800c444:	68db      	ldr	r3, [r3, #12]
 800c446:	461a      	mov	r2, r3
 800c448:	f000 fbe4 	bl	800cc14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	2150      	movs	r1, #80	; 0x50
 800c452:	4618      	mov	r0, r3
 800c454:	f000 fc3e 	bl	800ccd4 <TIM_ITRx_SetConfig>
      break;
 800c458:	e02c      	b.n	800c4b4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	6818      	ldr	r0, [r3, #0]
 800c45e:	683b      	ldr	r3, [r7, #0]
 800c460:	6859      	ldr	r1, [r3, #4]
 800c462:	683b      	ldr	r3, [r7, #0]
 800c464:	68db      	ldr	r3, [r3, #12]
 800c466:	461a      	mov	r2, r3
 800c468:	f000 fc03 	bl	800cc72 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	2160      	movs	r1, #96	; 0x60
 800c472:	4618      	mov	r0, r3
 800c474:	f000 fc2e 	bl	800ccd4 <TIM_ITRx_SetConfig>
      break;
 800c478:	e01c      	b.n	800c4b4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	6818      	ldr	r0, [r3, #0]
 800c47e:	683b      	ldr	r3, [r7, #0]
 800c480:	6859      	ldr	r1, [r3, #4]
 800c482:	683b      	ldr	r3, [r7, #0]
 800c484:	68db      	ldr	r3, [r3, #12]
 800c486:	461a      	mov	r2, r3
 800c488:	f000 fbc4 	bl	800cc14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	2140      	movs	r1, #64	; 0x40
 800c492:	4618      	mov	r0, r3
 800c494:	f000 fc1e 	bl	800ccd4 <TIM_ITRx_SetConfig>
      break;
 800c498:	e00c      	b.n	800c4b4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	681a      	ldr	r2, [r3, #0]
 800c49e:	683b      	ldr	r3, [r7, #0]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	4619      	mov	r1, r3
 800c4a4:	4610      	mov	r0, r2
 800c4a6:	f000 fc15 	bl	800ccd4 <TIM_ITRx_SetConfig>
      break;
 800c4aa:	e003      	b.n	800c4b4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800c4ac:	2301      	movs	r3, #1
 800c4ae:	73fb      	strb	r3, [r7, #15]
      break;
 800c4b0:	e000      	b.n	800c4b4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800c4b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	2201      	movs	r2, #1
 800c4b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	2200      	movs	r2, #0
 800c4c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c4c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	3710      	adds	r7, #16
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	bd80      	pop	{r7, pc}
 800c4ce:	bf00      	nop
 800c4d0:	ffceff88 	.word	0xffceff88
 800c4d4:	00100040 	.word	0x00100040
 800c4d8:	00100030 	.word	0x00100030
 800c4dc:	00100020 	.word	0x00100020

0800c4e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c4e0:	b480      	push	{r7}
 800c4e2:	b083      	sub	sp, #12
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c4e8:	bf00      	nop
 800c4ea:	370c      	adds	r7, #12
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f2:	4770      	bx	lr

0800c4f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c4f4:	b480      	push	{r7}
 800c4f6:	b083      	sub	sp, #12
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c4fc:	bf00      	nop
 800c4fe:	370c      	adds	r7, #12
 800c500:	46bd      	mov	sp, r7
 800c502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c506:	4770      	bx	lr

0800c508 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c508:	b480      	push	{r7}
 800c50a:	b083      	sub	sp, #12
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c510:	bf00      	nop
 800c512:	370c      	adds	r7, #12
 800c514:	46bd      	mov	sp, r7
 800c516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c51a:	4770      	bx	lr

0800c51c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c51c:	b480      	push	{r7}
 800c51e:	b085      	sub	sp, #20
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
 800c524:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	4a46      	ldr	r2, [pc, #280]	; (800c648 <TIM_Base_SetConfig+0x12c>)
 800c530:	4293      	cmp	r3, r2
 800c532:	d013      	beq.n	800c55c <TIM_Base_SetConfig+0x40>
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c53a:	d00f      	beq.n	800c55c <TIM_Base_SetConfig+0x40>
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	4a43      	ldr	r2, [pc, #268]	; (800c64c <TIM_Base_SetConfig+0x130>)
 800c540:	4293      	cmp	r3, r2
 800c542:	d00b      	beq.n	800c55c <TIM_Base_SetConfig+0x40>
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	4a42      	ldr	r2, [pc, #264]	; (800c650 <TIM_Base_SetConfig+0x134>)
 800c548:	4293      	cmp	r3, r2
 800c54a:	d007      	beq.n	800c55c <TIM_Base_SetConfig+0x40>
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	4a41      	ldr	r2, [pc, #260]	; (800c654 <TIM_Base_SetConfig+0x138>)
 800c550:	4293      	cmp	r3, r2
 800c552:	d003      	beq.n	800c55c <TIM_Base_SetConfig+0x40>
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	4a40      	ldr	r2, [pc, #256]	; (800c658 <TIM_Base_SetConfig+0x13c>)
 800c558:	4293      	cmp	r3, r2
 800c55a:	d108      	bne.n	800c56e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c562:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c564:	683b      	ldr	r3, [r7, #0]
 800c566:	685b      	ldr	r3, [r3, #4]
 800c568:	68fa      	ldr	r2, [r7, #12]
 800c56a:	4313      	orrs	r3, r2
 800c56c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	4a35      	ldr	r2, [pc, #212]	; (800c648 <TIM_Base_SetConfig+0x12c>)
 800c572:	4293      	cmp	r3, r2
 800c574:	d01f      	beq.n	800c5b6 <TIM_Base_SetConfig+0x9a>
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c57c:	d01b      	beq.n	800c5b6 <TIM_Base_SetConfig+0x9a>
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	4a32      	ldr	r2, [pc, #200]	; (800c64c <TIM_Base_SetConfig+0x130>)
 800c582:	4293      	cmp	r3, r2
 800c584:	d017      	beq.n	800c5b6 <TIM_Base_SetConfig+0x9a>
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	4a31      	ldr	r2, [pc, #196]	; (800c650 <TIM_Base_SetConfig+0x134>)
 800c58a:	4293      	cmp	r3, r2
 800c58c:	d013      	beq.n	800c5b6 <TIM_Base_SetConfig+0x9a>
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	4a30      	ldr	r2, [pc, #192]	; (800c654 <TIM_Base_SetConfig+0x138>)
 800c592:	4293      	cmp	r3, r2
 800c594:	d00f      	beq.n	800c5b6 <TIM_Base_SetConfig+0x9a>
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	4a2f      	ldr	r2, [pc, #188]	; (800c658 <TIM_Base_SetConfig+0x13c>)
 800c59a:	4293      	cmp	r3, r2
 800c59c:	d00b      	beq.n	800c5b6 <TIM_Base_SetConfig+0x9a>
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	4a2e      	ldr	r2, [pc, #184]	; (800c65c <TIM_Base_SetConfig+0x140>)
 800c5a2:	4293      	cmp	r3, r2
 800c5a4:	d007      	beq.n	800c5b6 <TIM_Base_SetConfig+0x9a>
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	4a2d      	ldr	r2, [pc, #180]	; (800c660 <TIM_Base_SetConfig+0x144>)
 800c5aa:	4293      	cmp	r3, r2
 800c5ac:	d003      	beq.n	800c5b6 <TIM_Base_SetConfig+0x9a>
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	4a2c      	ldr	r2, [pc, #176]	; (800c664 <TIM_Base_SetConfig+0x148>)
 800c5b2:	4293      	cmp	r3, r2
 800c5b4:	d108      	bne.n	800c5c8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c5bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c5be:	683b      	ldr	r3, [r7, #0]
 800c5c0:	68db      	ldr	r3, [r3, #12]
 800c5c2:	68fa      	ldr	r2, [r7, #12]
 800c5c4:	4313      	orrs	r3, r2
 800c5c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c5ce:	683b      	ldr	r3, [r7, #0]
 800c5d0:	695b      	ldr	r3, [r3, #20]
 800c5d2:	4313      	orrs	r3, r2
 800c5d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	68fa      	ldr	r2, [r7, #12]
 800c5da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	689a      	ldr	r2, [r3, #8]
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c5e4:	683b      	ldr	r3, [r7, #0]
 800c5e6:	681a      	ldr	r2, [r3, #0]
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	4a16      	ldr	r2, [pc, #88]	; (800c648 <TIM_Base_SetConfig+0x12c>)
 800c5f0:	4293      	cmp	r3, r2
 800c5f2:	d00f      	beq.n	800c614 <TIM_Base_SetConfig+0xf8>
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	4a18      	ldr	r2, [pc, #96]	; (800c658 <TIM_Base_SetConfig+0x13c>)
 800c5f8:	4293      	cmp	r3, r2
 800c5fa:	d00b      	beq.n	800c614 <TIM_Base_SetConfig+0xf8>
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	4a17      	ldr	r2, [pc, #92]	; (800c65c <TIM_Base_SetConfig+0x140>)
 800c600:	4293      	cmp	r3, r2
 800c602:	d007      	beq.n	800c614 <TIM_Base_SetConfig+0xf8>
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	4a16      	ldr	r2, [pc, #88]	; (800c660 <TIM_Base_SetConfig+0x144>)
 800c608:	4293      	cmp	r3, r2
 800c60a:	d003      	beq.n	800c614 <TIM_Base_SetConfig+0xf8>
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	4a15      	ldr	r2, [pc, #84]	; (800c664 <TIM_Base_SetConfig+0x148>)
 800c610:	4293      	cmp	r3, r2
 800c612:	d103      	bne.n	800c61c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c614:	683b      	ldr	r3, [r7, #0]
 800c616:	691a      	ldr	r2, [r3, #16]
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	2201      	movs	r2, #1
 800c620:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	691b      	ldr	r3, [r3, #16]
 800c626:	f003 0301 	and.w	r3, r3, #1
 800c62a:	2b01      	cmp	r3, #1
 800c62c:	d105      	bne.n	800c63a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	691b      	ldr	r3, [r3, #16]
 800c632:	f023 0201 	bic.w	r2, r3, #1
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	611a      	str	r2, [r3, #16]
  }
}
 800c63a:	bf00      	nop
 800c63c:	3714      	adds	r7, #20
 800c63e:	46bd      	mov	sp, r7
 800c640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c644:	4770      	bx	lr
 800c646:	bf00      	nop
 800c648:	40010000 	.word	0x40010000
 800c64c:	40000400 	.word	0x40000400
 800c650:	40000800 	.word	0x40000800
 800c654:	40000c00 	.word	0x40000c00
 800c658:	40010400 	.word	0x40010400
 800c65c:	40014000 	.word	0x40014000
 800c660:	40014400 	.word	0x40014400
 800c664:	40014800 	.word	0x40014800

0800c668 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c668:	b480      	push	{r7}
 800c66a:	b087      	sub	sp, #28
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]
 800c670:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	6a1b      	ldr	r3, [r3, #32]
 800c676:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	6a1b      	ldr	r3, [r3, #32]
 800c67c:	f023 0201 	bic.w	r2, r3, #1
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	685b      	ldr	r3, [r3, #4]
 800c688:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	699b      	ldr	r3, [r3, #24]
 800c68e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c690:	68fa      	ldr	r2, [r7, #12]
 800c692:	4b37      	ldr	r3, [pc, #220]	; (800c770 <TIM_OC1_SetConfig+0x108>)
 800c694:	4013      	ands	r3, r2
 800c696:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	f023 0303 	bic.w	r3, r3, #3
 800c69e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c6a0:	683b      	ldr	r3, [r7, #0]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	68fa      	ldr	r2, [r7, #12]
 800c6a6:	4313      	orrs	r3, r2
 800c6a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c6aa:	697b      	ldr	r3, [r7, #20]
 800c6ac:	f023 0302 	bic.w	r3, r3, #2
 800c6b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c6b2:	683b      	ldr	r3, [r7, #0]
 800c6b4:	689b      	ldr	r3, [r3, #8]
 800c6b6:	697a      	ldr	r2, [r7, #20]
 800c6b8:	4313      	orrs	r3, r2
 800c6ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	4a2d      	ldr	r2, [pc, #180]	; (800c774 <TIM_OC1_SetConfig+0x10c>)
 800c6c0:	4293      	cmp	r3, r2
 800c6c2:	d00f      	beq.n	800c6e4 <TIM_OC1_SetConfig+0x7c>
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	4a2c      	ldr	r2, [pc, #176]	; (800c778 <TIM_OC1_SetConfig+0x110>)
 800c6c8:	4293      	cmp	r3, r2
 800c6ca:	d00b      	beq.n	800c6e4 <TIM_OC1_SetConfig+0x7c>
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	4a2b      	ldr	r2, [pc, #172]	; (800c77c <TIM_OC1_SetConfig+0x114>)
 800c6d0:	4293      	cmp	r3, r2
 800c6d2:	d007      	beq.n	800c6e4 <TIM_OC1_SetConfig+0x7c>
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	4a2a      	ldr	r2, [pc, #168]	; (800c780 <TIM_OC1_SetConfig+0x118>)
 800c6d8:	4293      	cmp	r3, r2
 800c6da:	d003      	beq.n	800c6e4 <TIM_OC1_SetConfig+0x7c>
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	4a29      	ldr	r2, [pc, #164]	; (800c784 <TIM_OC1_SetConfig+0x11c>)
 800c6e0:	4293      	cmp	r3, r2
 800c6e2:	d10c      	bne.n	800c6fe <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c6e4:	697b      	ldr	r3, [r7, #20]
 800c6e6:	f023 0308 	bic.w	r3, r3, #8
 800c6ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c6ec:	683b      	ldr	r3, [r7, #0]
 800c6ee:	68db      	ldr	r3, [r3, #12]
 800c6f0:	697a      	ldr	r2, [r7, #20]
 800c6f2:	4313      	orrs	r3, r2
 800c6f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c6f6:	697b      	ldr	r3, [r7, #20]
 800c6f8:	f023 0304 	bic.w	r3, r3, #4
 800c6fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	4a1c      	ldr	r2, [pc, #112]	; (800c774 <TIM_OC1_SetConfig+0x10c>)
 800c702:	4293      	cmp	r3, r2
 800c704:	d00f      	beq.n	800c726 <TIM_OC1_SetConfig+0xbe>
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	4a1b      	ldr	r2, [pc, #108]	; (800c778 <TIM_OC1_SetConfig+0x110>)
 800c70a:	4293      	cmp	r3, r2
 800c70c:	d00b      	beq.n	800c726 <TIM_OC1_SetConfig+0xbe>
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	4a1a      	ldr	r2, [pc, #104]	; (800c77c <TIM_OC1_SetConfig+0x114>)
 800c712:	4293      	cmp	r3, r2
 800c714:	d007      	beq.n	800c726 <TIM_OC1_SetConfig+0xbe>
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	4a19      	ldr	r2, [pc, #100]	; (800c780 <TIM_OC1_SetConfig+0x118>)
 800c71a:	4293      	cmp	r3, r2
 800c71c:	d003      	beq.n	800c726 <TIM_OC1_SetConfig+0xbe>
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	4a18      	ldr	r2, [pc, #96]	; (800c784 <TIM_OC1_SetConfig+0x11c>)
 800c722:	4293      	cmp	r3, r2
 800c724:	d111      	bne.n	800c74a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c726:	693b      	ldr	r3, [r7, #16]
 800c728:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c72c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c72e:	693b      	ldr	r3, [r7, #16]
 800c730:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c734:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c736:	683b      	ldr	r3, [r7, #0]
 800c738:	695b      	ldr	r3, [r3, #20]
 800c73a:	693a      	ldr	r2, [r7, #16]
 800c73c:	4313      	orrs	r3, r2
 800c73e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c740:	683b      	ldr	r3, [r7, #0]
 800c742:	699b      	ldr	r3, [r3, #24]
 800c744:	693a      	ldr	r2, [r7, #16]
 800c746:	4313      	orrs	r3, r2
 800c748:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	693a      	ldr	r2, [r7, #16]
 800c74e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	68fa      	ldr	r2, [r7, #12]
 800c754:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c756:	683b      	ldr	r3, [r7, #0]
 800c758:	685a      	ldr	r2, [r3, #4]
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	697a      	ldr	r2, [r7, #20]
 800c762:	621a      	str	r2, [r3, #32]
}
 800c764:	bf00      	nop
 800c766:	371c      	adds	r7, #28
 800c768:	46bd      	mov	sp, r7
 800c76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76e:	4770      	bx	lr
 800c770:	fffeff8f 	.word	0xfffeff8f
 800c774:	40010000 	.word	0x40010000
 800c778:	40010400 	.word	0x40010400
 800c77c:	40014000 	.word	0x40014000
 800c780:	40014400 	.word	0x40014400
 800c784:	40014800 	.word	0x40014800

0800c788 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c788:	b480      	push	{r7}
 800c78a:	b087      	sub	sp, #28
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	6078      	str	r0, [r7, #4]
 800c790:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	6a1b      	ldr	r3, [r3, #32]
 800c796:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	6a1b      	ldr	r3, [r3, #32]
 800c79c:	f023 0210 	bic.w	r2, r3, #16
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	685b      	ldr	r3, [r3, #4]
 800c7a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	699b      	ldr	r3, [r3, #24]
 800c7ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c7b0:	68fa      	ldr	r2, [r7, #12]
 800c7b2:	4b34      	ldr	r3, [pc, #208]	; (800c884 <TIM_OC2_SetConfig+0xfc>)
 800c7b4:	4013      	ands	r3, r2
 800c7b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c7be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c7c0:	683b      	ldr	r3, [r7, #0]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	021b      	lsls	r3, r3, #8
 800c7c6:	68fa      	ldr	r2, [r7, #12]
 800c7c8:	4313      	orrs	r3, r2
 800c7ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c7cc:	697b      	ldr	r3, [r7, #20]
 800c7ce:	f023 0320 	bic.w	r3, r3, #32
 800c7d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c7d4:	683b      	ldr	r3, [r7, #0]
 800c7d6:	689b      	ldr	r3, [r3, #8]
 800c7d8:	011b      	lsls	r3, r3, #4
 800c7da:	697a      	ldr	r2, [r7, #20]
 800c7dc:	4313      	orrs	r3, r2
 800c7de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	4a29      	ldr	r2, [pc, #164]	; (800c888 <TIM_OC2_SetConfig+0x100>)
 800c7e4:	4293      	cmp	r3, r2
 800c7e6:	d003      	beq.n	800c7f0 <TIM_OC2_SetConfig+0x68>
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	4a28      	ldr	r2, [pc, #160]	; (800c88c <TIM_OC2_SetConfig+0x104>)
 800c7ec:	4293      	cmp	r3, r2
 800c7ee:	d10d      	bne.n	800c80c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c7f0:	697b      	ldr	r3, [r7, #20]
 800c7f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c7f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c7f8:	683b      	ldr	r3, [r7, #0]
 800c7fa:	68db      	ldr	r3, [r3, #12]
 800c7fc:	011b      	lsls	r3, r3, #4
 800c7fe:	697a      	ldr	r2, [r7, #20]
 800c800:	4313      	orrs	r3, r2
 800c802:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c804:	697b      	ldr	r3, [r7, #20]
 800c806:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c80a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	4a1e      	ldr	r2, [pc, #120]	; (800c888 <TIM_OC2_SetConfig+0x100>)
 800c810:	4293      	cmp	r3, r2
 800c812:	d00f      	beq.n	800c834 <TIM_OC2_SetConfig+0xac>
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	4a1d      	ldr	r2, [pc, #116]	; (800c88c <TIM_OC2_SetConfig+0x104>)
 800c818:	4293      	cmp	r3, r2
 800c81a:	d00b      	beq.n	800c834 <TIM_OC2_SetConfig+0xac>
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	4a1c      	ldr	r2, [pc, #112]	; (800c890 <TIM_OC2_SetConfig+0x108>)
 800c820:	4293      	cmp	r3, r2
 800c822:	d007      	beq.n	800c834 <TIM_OC2_SetConfig+0xac>
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	4a1b      	ldr	r2, [pc, #108]	; (800c894 <TIM_OC2_SetConfig+0x10c>)
 800c828:	4293      	cmp	r3, r2
 800c82a:	d003      	beq.n	800c834 <TIM_OC2_SetConfig+0xac>
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	4a1a      	ldr	r2, [pc, #104]	; (800c898 <TIM_OC2_SetConfig+0x110>)
 800c830:	4293      	cmp	r3, r2
 800c832:	d113      	bne.n	800c85c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c834:	693b      	ldr	r3, [r7, #16]
 800c836:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c83a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c83c:	693b      	ldr	r3, [r7, #16]
 800c83e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c842:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c844:	683b      	ldr	r3, [r7, #0]
 800c846:	695b      	ldr	r3, [r3, #20]
 800c848:	009b      	lsls	r3, r3, #2
 800c84a:	693a      	ldr	r2, [r7, #16]
 800c84c:	4313      	orrs	r3, r2
 800c84e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c850:	683b      	ldr	r3, [r7, #0]
 800c852:	699b      	ldr	r3, [r3, #24]
 800c854:	009b      	lsls	r3, r3, #2
 800c856:	693a      	ldr	r2, [r7, #16]
 800c858:	4313      	orrs	r3, r2
 800c85a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	693a      	ldr	r2, [r7, #16]
 800c860:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	68fa      	ldr	r2, [r7, #12]
 800c866:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c868:	683b      	ldr	r3, [r7, #0]
 800c86a:	685a      	ldr	r2, [r3, #4]
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	697a      	ldr	r2, [r7, #20]
 800c874:	621a      	str	r2, [r3, #32]
}
 800c876:	bf00      	nop
 800c878:	371c      	adds	r7, #28
 800c87a:	46bd      	mov	sp, r7
 800c87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c880:	4770      	bx	lr
 800c882:	bf00      	nop
 800c884:	feff8fff 	.word	0xfeff8fff
 800c888:	40010000 	.word	0x40010000
 800c88c:	40010400 	.word	0x40010400
 800c890:	40014000 	.word	0x40014000
 800c894:	40014400 	.word	0x40014400
 800c898:	40014800 	.word	0x40014800

0800c89c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c89c:	b480      	push	{r7}
 800c89e:	b087      	sub	sp, #28
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
 800c8a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	6a1b      	ldr	r3, [r3, #32]
 800c8aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	6a1b      	ldr	r3, [r3, #32]
 800c8b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	685b      	ldr	r3, [r3, #4]
 800c8bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	69db      	ldr	r3, [r3, #28]
 800c8c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c8c4:	68fa      	ldr	r2, [r7, #12]
 800c8c6:	4b33      	ldr	r3, [pc, #204]	; (800c994 <TIM_OC3_SetConfig+0xf8>)
 800c8c8:	4013      	ands	r3, r2
 800c8ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	f023 0303 	bic.w	r3, r3, #3
 800c8d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c8d4:	683b      	ldr	r3, [r7, #0]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	68fa      	ldr	r2, [r7, #12]
 800c8da:	4313      	orrs	r3, r2
 800c8dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c8de:	697b      	ldr	r3, [r7, #20]
 800c8e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c8e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c8e6:	683b      	ldr	r3, [r7, #0]
 800c8e8:	689b      	ldr	r3, [r3, #8]
 800c8ea:	021b      	lsls	r3, r3, #8
 800c8ec:	697a      	ldr	r2, [r7, #20]
 800c8ee:	4313      	orrs	r3, r2
 800c8f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	4a28      	ldr	r2, [pc, #160]	; (800c998 <TIM_OC3_SetConfig+0xfc>)
 800c8f6:	4293      	cmp	r3, r2
 800c8f8:	d003      	beq.n	800c902 <TIM_OC3_SetConfig+0x66>
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	4a27      	ldr	r2, [pc, #156]	; (800c99c <TIM_OC3_SetConfig+0x100>)
 800c8fe:	4293      	cmp	r3, r2
 800c900:	d10d      	bne.n	800c91e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c902:	697b      	ldr	r3, [r7, #20]
 800c904:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c908:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c90a:	683b      	ldr	r3, [r7, #0]
 800c90c:	68db      	ldr	r3, [r3, #12]
 800c90e:	021b      	lsls	r3, r3, #8
 800c910:	697a      	ldr	r2, [r7, #20]
 800c912:	4313      	orrs	r3, r2
 800c914:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c916:	697b      	ldr	r3, [r7, #20]
 800c918:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c91c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	4a1d      	ldr	r2, [pc, #116]	; (800c998 <TIM_OC3_SetConfig+0xfc>)
 800c922:	4293      	cmp	r3, r2
 800c924:	d00f      	beq.n	800c946 <TIM_OC3_SetConfig+0xaa>
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	4a1c      	ldr	r2, [pc, #112]	; (800c99c <TIM_OC3_SetConfig+0x100>)
 800c92a:	4293      	cmp	r3, r2
 800c92c:	d00b      	beq.n	800c946 <TIM_OC3_SetConfig+0xaa>
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	4a1b      	ldr	r2, [pc, #108]	; (800c9a0 <TIM_OC3_SetConfig+0x104>)
 800c932:	4293      	cmp	r3, r2
 800c934:	d007      	beq.n	800c946 <TIM_OC3_SetConfig+0xaa>
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	4a1a      	ldr	r2, [pc, #104]	; (800c9a4 <TIM_OC3_SetConfig+0x108>)
 800c93a:	4293      	cmp	r3, r2
 800c93c:	d003      	beq.n	800c946 <TIM_OC3_SetConfig+0xaa>
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	4a19      	ldr	r2, [pc, #100]	; (800c9a8 <TIM_OC3_SetConfig+0x10c>)
 800c942:	4293      	cmp	r3, r2
 800c944:	d113      	bne.n	800c96e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c946:	693b      	ldr	r3, [r7, #16]
 800c948:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c94c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c94e:	693b      	ldr	r3, [r7, #16]
 800c950:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c954:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c956:	683b      	ldr	r3, [r7, #0]
 800c958:	695b      	ldr	r3, [r3, #20]
 800c95a:	011b      	lsls	r3, r3, #4
 800c95c:	693a      	ldr	r2, [r7, #16]
 800c95e:	4313      	orrs	r3, r2
 800c960:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c962:	683b      	ldr	r3, [r7, #0]
 800c964:	699b      	ldr	r3, [r3, #24]
 800c966:	011b      	lsls	r3, r3, #4
 800c968:	693a      	ldr	r2, [r7, #16]
 800c96a:	4313      	orrs	r3, r2
 800c96c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	693a      	ldr	r2, [r7, #16]
 800c972:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	68fa      	ldr	r2, [r7, #12]
 800c978:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c97a:	683b      	ldr	r3, [r7, #0]
 800c97c:	685a      	ldr	r2, [r3, #4]
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	697a      	ldr	r2, [r7, #20]
 800c986:	621a      	str	r2, [r3, #32]
}
 800c988:	bf00      	nop
 800c98a:	371c      	adds	r7, #28
 800c98c:	46bd      	mov	sp, r7
 800c98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c992:	4770      	bx	lr
 800c994:	fffeff8f 	.word	0xfffeff8f
 800c998:	40010000 	.word	0x40010000
 800c99c:	40010400 	.word	0x40010400
 800c9a0:	40014000 	.word	0x40014000
 800c9a4:	40014400 	.word	0x40014400
 800c9a8:	40014800 	.word	0x40014800

0800c9ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c9ac:	b480      	push	{r7}
 800c9ae:	b087      	sub	sp, #28
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	6078      	str	r0, [r7, #4]
 800c9b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	6a1b      	ldr	r3, [r3, #32]
 800c9ba:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	6a1b      	ldr	r3, [r3, #32]
 800c9c0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	685b      	ldr	r3, [r3, #4]
 800c9cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	69db      	ldr	r3, [r3, #28]
 800c9d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c9d4:	68fa      	ldr	r2, [r7, #12]
 800c9d6:	4b24      	ldr	r3, [pc, #144]	; (800ca68 <TIM_OC4_SetConfig+0xbc>)
 800c9d8:	4013      	ands	r3, r2
 800c9da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c9e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c9e4:	683b      	ldr	r3, [r7, #0]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	021b      	lsls	r3, r3, #8
 800c9ea:	68fa      	ldr	r2, [r7, #12]
 800c9ec:	4313      	orrs	r3, r2
 800c9ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c9f0:	693b      	ldr	r3, [r7, #16]
 800c9f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c9f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c9f8:	683b      	ldr	r3, [r7, #0]
 800c9fa:	689b      	ldr	r3, [r3, #8]
 800c9fc:	031b      	lsls	r3, r3, #12
 800c9fe:	693a      	ldr	r2, [r7, #16]
 800ca00:	4313      	orrs	r3, r2
 800ca02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	4a19      	ldr	r2, [pc, #100]	; (800ca6c <TIM_OC4_SetConfig+0xc0>)
 800ca08:	4293      	cmp	r3, r2
 800ca0a:	d00f      	beq.n	800ca2c <TIM_OC4_SetConfig+0x80>
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	4a18      	ldr	r2, [pc, #96]	; (800ca70 <TIM_OC4_SetConfig+0xc4>)
 800ca10:	4293      	cmp	r3, r2
 800ca12:	d00b      	beq.n	800ca2c <TIM_OC4_SetConfig+0x80>
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	4a17      	ldr	r2, [pc, #92]	; (800ca74 <TIM_OC4_SetConfig+0xc8>)
 800ca18:	4293      	cmp	r3, r2
 800ca1a:	d007      	beq.n	800ca2c <TIM_OC4_SetConfig+0x80>
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	4a16      	ldr	r2, [pc, #88]	; (800ca78 <TIM_OC4_SetConfig+0xcc>)
 800ca20:	4293      	cmp	r3, r2
 800ca22:	d003      	beq.n	800ca2c <TIM_OC4_SetConfig+0x80>
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	4a15      	ldr	r2, [pc, #84]	; (800ca7c <TIM_OC4_SetConfig+0xd0>)
 800ca28:	4293      	cmp	r3, r2
 800ca2a:	d109      	bne.n	800ca40 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ca2c:	697b      	ldr	r3, [r7, #20]
 800ca2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ca32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ca34:	683b      	ldr	r3, [r7, #0]
 800ca36:	695b      	ldr	r3, [r3, #20]
 800ca38:	019b      	lsls	r3, r3, #6
 800ca3a:	697a      	ldr	r2, [r7, #20]
 800ca3c:	4313      	orrs	r3, r2
 800ca3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	697a      	ldr	r2, [r7, #20]
 800ca44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	68fa      	ldr	r2, [r7, #12]
 800ca4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ca4c:	683b      	ldr	r3, [r7, #0]
 800ca4e:	685a      	ldr	r2, [r3, #4]
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	693a      	ldr	r2, [r7, #16]
 800ca58:	621a      	str	r2, [r3, #32]
}
 800ca5a:	bf00      	nop
 800ca5c:	371c      	adds	r7, #28
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca64:	4770      	bx	lr
 800ca66:	bf00      	nop
 800ca68:	feff8fff 	.word	0xfeff8fff
 800ca6c:	40010000 	.word	0x40010000
 800ca70:	40010400 	.word	0x40010400
 800ca74:	40014000 	.word	0x40014000
 800ca78:	40014400 	.word	0x40014400
 800ca7c:	40014800 	.word	0x40014800

0800ca80 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ca80:	b480      	push	{r7}
 800ca82:	b087      	sub	sp, #28
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
 800ca88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	6a1b      	ldr	r3, [r3, #32]
 800ca8e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	6a1b      	ldr	r3, [r3, #32]
 800ca94:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	685b      	ldr	r3, [r3, #4]
 800caa0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800caa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800caa8:	68fa      	ldr	r2, [r7, #12]
 800caaa:	4b21      	ldr	r3, [pc, #132]	; (800cb30 <TIM_OC5_SetConfig+0xb0>)
 800caac:	4013      	ands	r3, r2
 800caae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cab0:	683b      	ldr	r3, [r7, #0]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	68fa      	ldr	r2, [r7, #12]
 800cab6:	4313      	orrs	r3, r2
 800cab8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800caba:	693b      	ldr	r3, [r7, #16]
 800cabc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800cac0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800cac2:	683b      	ldr	r3, [r7, #0]
 800cac4:	689b      	ldr	r3, [r3, #8]
 800cac6:	041b      	lsls	r3, r3, #16
 800cac8:	693a      	ldr	r2, [r7, #16]
 800caca:	4313      	orrs	r3, r2
 800cacc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	4a18      	ldr	r2, [pc, #96]	; (800cb34 <TIM_OC5_SetConfig+0xb4>)
 800cad2:	4293      	cmp	r3, r2
 800cad4:	d00f      	beq.n	800caf6 <TIM_OC5_SetConfig+0x76>
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	4a17      	ldr	r2, [pc, #92]	; (800cb38 <TIM_OC5_SetConfig+0xb8>)
 800cada:	4293      	cmp	r3, r2
 800cadc:	d00b      	beq.n	800caf6 <TIM_OC5_SetConfig+0x76>
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	4a16      	ldr	r2, [pc, #88]	; (800cb3c <TIM_OC5_SetConfig+0xbc>)
 800cae2:	4293      	cmp	r3, r2
 800cae4:	d007      	beq.n	800caf6 <TIM_OC5_SetConfig+0x76>
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	4a15      	ldr	r2, [pc, #84]	; (800cb40 <TIM_OC5_SetConfig+0xc0>)
 800caea:	4293      	cmp	r3, r2
 800caec:	d003      	beq.n	800caf6 <TIM_OC5_SetConfig+0x76>
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	4a14      	ldr	r2, [pc, #80]	; (800cb44 <TIM_OC5_SetConfig+0xc4>)
 800caf2:	4293      	cmp	r3, r2
 800caf4:	d109      	bne.n	800cb0a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800caf6:	697b      	ldr	r3, [r7, #20]
 800caf8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cafc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800cafe:	683b      	ldr	r3, [r7, #0]
 800cb00:	695b      	ldr	r3, [r3, #20]
 800cb02:	021b      	lsls	r3, r3, #8
 800cb04:	697a      	ldr	r2, [r7, #20]
 800cb06:	4313      	orrs	r3, r2
 800cb08:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	697a      	ldr	r2, [r7, #20]
 800cb0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	68fa      	ldr	r2, [r7, #12]
 800cb14:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800cb16:	683b      	ldr	r3, [r7, #0]
 800cb18:	685a      	ldr	r2, [r3, #4]
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	693a      	ldr	r2, [r7, #16]
 800cb22:	621a      	str	r2, [r3, #32]
}
 800cb24:	bf00      	nop
 800cb26:	371c      	adds	r7, #28
 800cb28:	46bd      	mov	sp, r7
 800cb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2e:	4770      	bx	lr
 800cb30:	fffeff8f 	.word	0xfffeff8f
 800cb34:	40010000 	.word	0x40010000
 800cb38:	40010400 	.word	0x40010400
 800cb3c:	40014000 	.word	0x40014000
 800cb40:	40014400 	.word	0x40014400
 800cb44:	40014800 	.word	0x40014800

0800cb48 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800cb48:	b480      	push	{r7}
 800cb4a:	b087      	sub	sp, #28
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	6078      	str	r0, [r7, #4]
 800cb50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	6a1b      	ldr	r3, [r3, #32]
 800cb56:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	6a1b      	ldr	r3, [r3, #32]
 800cb5c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	685b      	ldr	r3, [r3, #4]
 800cb68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800cb70:	68fa      	ldr	r2, [r7, #12]
 800cb72:	4b22      	ldr	r3, [pc, #136]	; (800cbfc <TIM_OC6_SetConfig+0xb4>)
 800cb74:	4013      	ands	r3, r2
 800cb76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cb78:	683b      	ldr	r3, [r7, #0]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	021b      	lsls	r3, r3, #8
 800cb7e:	68fa      	ldr	r2, [r7, #12]
 800cb80:	4313      	orrs	r3, r2
 800cb82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800cb84:	693b      	ldr	r3, [r7, #16]
 800cb86:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cb8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800cb8c:	683b      	ldr	r3, [r7, #0]
 800cb8e:	689b      	ldr	r3, [r3, #8]
 800cb90:	051b      	lsls	r3, r3, #20
 800cb92:	693a      	ldr	r2, [r7, #16]
 800cb94:	4313      	orrs	r3, r2
 800cb96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	4a19      	ldr	r2, [pc, #100]	; (800cc00 <TIM_OC6_SetConfig+0xb8>)
 800cb9c:	4293      	cmp	r3, r2
 800cb9e:	d00f      	beq.n	800cbc0 <TIM_OC6_SetConfig+0x78>
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	4a18      	ldr	r2, [pc, #96]	; (800cc04 <TIM_OC6_SetConfig+0xbc>)
 800cba4:	4293      	cmp	r3, r2
 800cba6:	d00b      	beq.n	800cbc0 <TIM_OC6_SetConfig+0x78>
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	4a17      	ldr	r2, [pc, #92]	; (800cc08 <TIM_OC6_SetConfig+0xc0>)
 800cbac:	4293      	cmp	r3, r2
 800cbae:	d007      	beq.n	800cbc0 <TIM_OC6_SetConfig+0x78>
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	4a16      	ldr	r2, [pc, #88]	; (800cc0c <TIM_OC6_SetConfig+0xc4>)
 800cbb4:	4293      	cmp	r3, r2
 800cbb6:	d003      	beq.n	800cbc0 <TIM_OC6_SetConfig+0x78>
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	4a15      	ldr	r2, [pc, #84]	; (800cc10 <TIM_OC6_SetConfig+0xc8>)
 800cbbc:	4293      	cmp	r3, r2
 800cbbe:	d109      	bne.n	800cbd4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800cbc0:	697b      	ldr	r3, [r7, #20]
 800cbc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cbc6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800cbc8:	683b      	ldr	r3, [r7, #0]
 800cbca:	695b      	ldr	r3, [r3, #20]
 800cbcc:	029b      	lsls	r3, r3, #10
 800cbce:	697a      	ldr	r2, [r7, #20]
 800cbd0:	4313      	orrs	r3, r2
 800cbd2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	697a      	ldr	r2, [r7, #20]
 800cbd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	68fa      	ldr	r2, [r7, #12]
 800cbde:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800cbe0:	683b      	ldr	r3, [r7, #0]
 800cbe2:	685a      	ldr	r2, [r3, #4]
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	693a      	ldr	r2, [r7, #16]
 800cbec:	621a      	str	r2, [r3, #32]
}
 800cbee:	bf00      	nop
 800cbf0:	371c      	adds	r7, #28
 800cbf2:	46bd      	mov	sp, r7
 800cbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf8:	4770      	bx	lr
 800cbfa:	bf00      	nop
 800cbfc:	feff8fff 	.word	0xfeff8fff
 800cc00:	40010000 	.word	0x40010000
 800cc04:	40010400 	.word	0x40010400
 800cc08:	40014000 	.word	0x40014000
 800cc0c:	40014400 	.word	0x40014400
 800cc10:	40014800 	.word	0x40014800

0800cc14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cc14:	b480      	push	{r7}
 800cc16:	b087      	sub	sp, #28
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	60f8      	str	r0, [r7, #12]
 800cc1c:	60b9      	str	r1, [r7, #8]
 800cc1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	6a1b      	ldr	r3, [r3, #32]
 800cc24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	6a1b      	ldr	r3, [r3, #32]
 800cc2a:	f023 0201 	bic.w	r2, r3, #1
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	699b      	ldr	r3, [r3, #24]
 800cc36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cc38:	693b      	ldr	r3, [r7, #16]
 800cc3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cc3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	011b      	lsls	r3, r3, #4
 800cc44:	693a      	ldr	r2, [r7, #16]
 800cc46:	4313      	orrs	r3, r2
 800cc48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cc4a:	697b      	ldr	r3, [r7, #20]
 800cc4c:	f023 030a 	bic.w	r3, r3, #10
 800cc50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cc52:	697a      	ldr	r2, [r7, #20]
 800cc54:	68bb      	ldr	r3, [r7, #8]
 800cc56:	4313      	orrs	r3, r2
 800cc58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	693a      	ldr	r2, [r7, #16]
 800cc5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	697a      	ldr	r2, [r7, #20]
 800cc64:	621a      	str	r2, [r3, #32]
}
 800cc66:	bf00      	nop
 800cc68:	371c      	adds	r7, #28
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc70:	4770      	bx	lr

0800cc72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cc72:	b480      	push	{r7}
 800cc74:	b087      	sub	sp, #28
 800cc76:	af00      	add	r7, sp, #0
 800cc78:	60f8      	str	r0, [r7, #12]
 800cc7a:	60b9      	str	r1, [r7, #8]
 800cc7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	6a1b      	ldr	r3, [r3, #32]
 800cc82:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	6a1b      	ldr	r3, [r3, #32]
 800cc88:	f023 0210 	bic.w	r2, r3, #16
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	699b      	ldr	r3, [r3, #24]
 800cc94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cc96:	693b      	ldr	r3, [r7, #16]
 800cc98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cc9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	031b      	lsls	r3, r3, #12
 800cca2:	693a      	ldr	r2, [r7, #16]
 800cca4:	4313      	orrs	r3, r2
 800cca6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cca8:	697b      	ldr	r3, [r7, #20]
 800ccaa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ccae:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ccb0:	68bb      	ldr	r3, [r7, #8]
 800ccb2:	011b      	lsls	r3, r3, #4
 800ccb4:	697a      	ldr	r2, [r7, #20]
 800ccb6:	4313      	orrs	r3, r2
 800ccb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	693a      	ldr	r2, [r7, #16]
 800ccbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	697a      	ldr	r2, [r7, #20]
 800ccc4:	621a      	str	r2, [r3, #32]
}
 800ccc6:	bf00      	nop
 800ccc8:	371c      	adds	r7, #28
 800ccca:	46bd      	mov	sp, r7
 800cccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd0:	4770      	bx	lr
	...

0800ccd4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ccd4:	b480      	push	{r7}
 800ccd6:	b085      	sub	sp, #20
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	6078      	str	r0, [r7, #4]
 800ccdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	689b      	ldr	r3, [r3, #8]
 800cce2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cce4:	68fa      	ldr	r2, [r7, #12]
 800cce6:	4b09      	ldr	r3, [pc, #36]	; (800cd0c <TIM_ITRx_SetConfig+0x38>)
 800cce8:	4013      	ands	r3, r2
 800ccea:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ccec:	683a      	ldr	r2, [r7, #0]
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	4313      	orrs	r3, r2
 800ccf2:	f043 0307 	orr.w	r3, r3, #7
 800ccf6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	68fa      	ldr	r2, [r7, #12]
 800ccfc:	609a      	str	r2, [r3, #8]
}
 800ccfe:	bf00      	nop
 800cd00:	3714      	adds	r7, #20
 800cd02:	46bd      	mov	sp, r7
 800cd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd08:	4770      	bx	lr
 800cd0a:	bf00      	nop
 800cd0c:	ffcfff8f 	.word	0xffcfff8f

0800cd10 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cd10:	b480      	push	{r7}
 800cd12:	b087      	sub	sp, #28
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	60f8      	str	r0, [r7, #12]
 800cd18:	60b9      	str	r1, [r7, #8]
 800cd1a:	607a      	str	r2, [r7, #4]
 800cd1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	689b      	ldr	r3, [r3, #8]
 800cd22:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cd24:	697b      	ldr	r3, [r7, #20]
 800cd26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cd2a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cd2c:	683b      	ldr	r3, [r7, #0]
 800cd2e:	021a      	lsls	r2, r3, #8
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	431a      	orrs	r2, r3
 800cd34:	68bb      	ldr	r3, [r7, #8]
 800cd36:	4313      	orrs	r3, r2
 800cd38:	697a      	ldr	r2, [r7, #20]
 800cd3a:	4313      	orrs	r3, r2
 800cd3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	697a      	ldr	r2, [r7, #20]
 800cd42:	609a      	str	r2, [r3, #8]
}
 800cd44:	bf00      	nop
 800cd46:	371c      	adds	r7, #28
 800cd48:	46bd      	mov	sp, r7
 800cd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd4e:	4770      	bx	lr

0800cd50 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cd50:	b480      	push	{r7}
 800cd52:	b087      	sub	sp, #28
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	60f8      	str	r0, [r7, #12]
 800cd58:	60b9      	str	r1, [r7, #8]
 800cd5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cd5c:	68bb      	ldr	r3, [r7, #8]
 800cd5e:	f003 031f 	and.w	r3, r3, #31
 800cd62:	2201      	movs	r2, #1
 800cd64:	fa02 f303 	lsl.w	r3, r2, r3
 800cd68:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	6a1a      	ldr	r2, [r3, #32]
 800cd6e:	697b      	ldr	r3, [r7, #20]
 800cd70:	43db      	mvns	r3, r3
 800cd72:	401a      	ands	r2, r3
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	6a1a      	ldr	r2, [r3, #32]
 800cd7c:	68bb      	ldr	r3, [r7, #8]
 800cd7e:	f003 031f 	and.w	r3, r3, #31
 800cd82:	6879      	ldr	r1, [r7, #4]
 800cd84:	fa01 f303 	lsl.w	r3, r1, r3
 800cd88:	431a      	orrs	r2, r3
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	621a      	str	r2, [r3, #32]
}
 800cd8e:	bf00      	nop
 800cd90:	371c      	adds	r7, #28
 800cd92:	46bd      	mov	sp, r7
 800cd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd98:	4770      	bx	lr
	...

0800cd9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cd9c:	b480      	push	{r7}
 800cd9e:	b085      	sub	sp, #20
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	6078      	str	r0, [r7, #4]
 800cda4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cdac:	2b01      	cmp	r3, #1
 800cdae:	d101      	bne.n	800cdb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cdb0:	2302      	movs	r3, #2
 800cdb2:	e06d      	b.n	800ce90 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	2201      	movs	r2, #1
 800cdb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	2202      	movs	r2, #2
 800cdc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	685b      	ldr	r3, [r3, #4]
 800cdca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	689b      	ldr	r3, [r3, #8]
 800cdd2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	4a30      	ldr	r2, [pc, #192]	; (800ce9c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cdda:	4293      	cmp	r3, r2
 800cddc:	d004      	beq.n	800cde8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	4a2f      	ldr	r2, [pc, #188]	; (800cea0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800cde4:	4293      	cmp	r3, r2
 800cde6:	d108      	bne.n	800cdfa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800cdee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cdf0:	683b      	ldr	r3, [r7, #0]
 800cdf2:	685b      	ldr	r3, [r3, #4]
 800cdf4:	68fa      	ldr	r2, [r7, #12]
 800cdf6:	4313      	orrs	r3, r2
 800cdf8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ce00:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ce02:	683b      	ldr	r3, [r7, #0]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	68fa      	ldr	r2, [r7, #12]
 800ce08:	4313      	orrs	r3, r2
 800ce0a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	68fa      	ldr	r2, [r7, #12]
 800ce12:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	4a20      	ldr	r2, [pc, #128]	; (800ce9c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ce1a:	4293      	cmp	r3, r2
 800ce1c:	d022      	beq.n	800ce64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ce26:	d01d      	beq.n	800ce64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	4a1d      	ldr	r2, [pc, #116]	; (800cea4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ce2e:	4293      	cmp	r3, r2
 800ce30:	d018      	beq.n	800ce64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	4a1c      	ldr	r2, [pc, #112]	; (800cea8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ce38:	4293      	cmp	r3, r2
 800ce3a:	d013      	beq.n	800ce64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	4a1a      	ldr	r2, [pc, #104]	; (800ceac <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ce42:	4293      	cmp	r3, r2
 800ce44:	d00e      	beq.n	800ce64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	4a15      	ldr	r2, [pc, #84]	; (800cea0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ce4c:	4293      	cmp	r3, r2
 800ce4e:	d009      	beq.n	800ce64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	4a16      	ldr	r2, [pc, #88]	; (800ceb0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ce56:	4293      	cmp	r3, r2
 800ce58:	d004      	beq.n	800ce64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	4a15      	ldr	r2, [pc, #84]	; (800ceb4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ce60:	4293      	cmp	r3, r2
 800ce62:	d10c      	bne.n	800ce7e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ce64:	68bb      	ldr	r3, [r7, #8]
 800ce66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ce6a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ce6c:	683b      	ldr	r3, [r7, #0]
 800ce6e:	689b      	ldr	r3, [r3, #8]
 800ce70:	68ba      	ldr	r2, [r7, #8]
 800ce72:	4313      	orrs	r3, r2
 800ce74:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	68ba      	ldr	r2, [r7, #8]
 800ce7c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	2201      	movs	r2, #1
 800ce82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	2200      	movs	r2, #0
 800ce8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ce8e:	2300      	movs	r3, #0
}
 800ce90:	4618      	mov	r0, r3
 800ce92:	3714      	adds	r7, #20
 800ce94:	46bd      	mov	sp, r7
 800ce96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce9a:	4770      	bx	lr
 800ce9c:	40010000 	.word	0x40010000
 800cea0:	40010400 	.word	0x40010400
 800cea4:	40000400 	.word	0x40000400
 800cea8:	40000800 	.word	0x40000800
 800ceac:	40000c00 	.word	0x40000c00
 800ceb0:	40001800 	.word	0x40001800
 800ceb4:	40014000 	.word	0x40014000

0800ceb8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ceb8:	b480      	push	{r7}
 800ceba:	b085      	sub	sp, #20
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	6078      	str	r0, [r7, #4]
 800cec0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800cec2:	2300      	movs	r3, #0
 800cec4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cecc:	2b01      	cmp	r3, #1
 800cece:	d101      	bne.n	800ced4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ced0:	2302      	movs	r3, #2
 800ced2:	e065      	b.n	800cfa0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	2201      	movs	r2, #1
 800ced8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800cee2:	683b      	ldr	r3, [r7, #0]
 800cee4:	68db      	ldr	r3, [r3, #12]
 800cee6:	4313      	orrs	r3, r2
 800cee8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cef0:	683b      	ldr	r3, [r7, #0]
 800cef2:	689b      	ldr	r3, [r3, #8]
 800cef4:	4313      	orrs	r3, r2
 800cef6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800cefe:	683b      	ldr	r3, [r7, #0]
 800cf00:	685b      	ldr	r3, [r3, #4]
 800cf02:	4313      	orrs	r3, r2
 800cf04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800cf0c:	683b      	ldr	r3, [r7, #0]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	4313      	orrs	r3, r2
 800cf12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cf1a:	683b      	ldr	r3, [r7, #0]
 800cf1c:	691b      	ldr	r3, [r3, #16]
 800cf1e:	4313      	orrs	r3, r2
 800cf20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800cf28:	683b      	ldr	r3, [r7, #0]
 800cf2a:	695b      	ldr	r3, [r3, #20]
 800cf2c:	4313      	orrs	r3, r2
 800cf2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800cf36:	683b      	ldr	r3, [r7, #0]
 800cf38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf3a:	4313      	orrs	r3, r2
 800cf3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800cf44:	683b      	ldr	r3, [r7, #0]
 800cf46:	699b      	ldr	r3, [r3, #24]
 800cf48:	041b      	lsls	r3, r3, #16
 800cf4a:	4313      	orrs	r3, r2
 800cf4c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	4a16      	ldr	r2, [pc, #88]	; (800cfac <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800cf54:	4293      	cmp	r3, r2
 800cf56:	d004      	beq.n	800cf62 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	4a14      	ldr	r2, [pc, #80]	; (800cfb0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800cf5e:	4293      	cmp	r3, r2
 800cf60:	d115      	bne.n	800cf8e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800cf68:	683b      	ldr	r3, [r7, #0]
 800cf6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf6c:	051b      	lsls	r3, r3, #20
 800cf6e:	4313      	orrs	r3, r2
 800cf70:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800cf78:	683b      	ldr	r3, [r7, #0]
 800cf7a:	69db      	ldr	r3, [r3, #28]
 800cf7c:	4313      	orrs	r3, r2
 800cf7e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800cf86:	683b      	ldr	r3, [r7, #0]
 800cf88:	6a1b      	ldr	r3, [r3, #32]
 800cf8a:	4313      	orrs	r3, r2
 800cf8c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	68fa      	ldr	r2, [r7, #12]
 800cf94:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	2200      	movs	r2, #0
 800cf9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cf9e:	2300      	movs	r3, #0
}
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	3714      	adds	r7, #20
 800cfa4:	46bd      	mov	sp, r7
 800cfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfaa:	4770      	bx	lr
 800cfac:	40010000 	.word	0x40010000
 800cfb0:	40010400 	.word	0x40010400

0800cfb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cfb4:	b480      	push	{r7}
 800cfb6:	b083      	sub	sp, #12
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cfbc:	bf00      	nop
 800cfbe:	370c      	adds	r7, #12
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc6:	4770      	bx	lr

0800cfc8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cfc8:	b480      	push	{r7}
 800cfca:	b083      	sub	sp, #12
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cfd0:	bf00      	nop
 800cfd2:	370c      	adds	r7, #12
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfda:	4770      	bx	lr

0800cfdc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800cfdc:	b480      	push	{r7}
 800cfde:	b083      	sub	sp, #12
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800cfe4:	bf00      	nop
 800cfe6:	370c      	adds	r7, #12
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfee:	4770      	bx	lr

0800cff0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cff0:	b580      	push	{r7, lr}
 800cff2:	b082      	sub	sp, #8
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d101      	bne.n	800d002 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cffe:	2301      	movs	r3, #1
 800d000:	e042      	b.n	800d088 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d106      	bne.n	800d01a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	2200      	movs	r2, #0
 800d010:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d014:	6878      	ldr	r0, [r7, #4]
 800d016:	f7f5 f9b3 	bl	8002380 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	2224      	movs	r2, #36	; 0x24
 800d01e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	681a      	ldr	r2, [r3, #0]
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	f022 0201 	bic.w	r2, r2, #1
 800d030:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d036:	2b00      	cmp	r3, #0
 800d038:	d002      	beq.n	800d040 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800d03a:	6878      	ldr	r0, [r7, #4]
 800d03c:	f001 fa44 	bl	800e4c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d040:	6878      	ldr	r0, [r7, #4]
 800d042:	f000 fcd9 	bl	800d9f8 <UART_SetConfig>
 800d046:	4603      	mov	r3, r0
 800d048:	2b01      	cmp	r3, #1
 800d04a:	d101      	bne.n	800d050 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800d04c:	2301      	movs	r3, #1
 800d04e:	e01b      	b.n	800d088 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	685a      	ldr	r2, [r3, #4]
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d05e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	689a      	ldr	r2, [r3, #8]
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d06e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	681a      	ldr	r2, [r3, #0]
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	f042 0201 	orr.w	r2, r2, #1
 800d07e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d080:	6878      	ldr	r0, [r7, #4]
 800d082:	f001 fac3 	bl	800e60c <UART_CheckIdleState>
 800d086:	4603      	mov	r3, r0
}
 800d088:	4618      	mov	r0, r3
 800d08a:	3708      	adds	r7, #8
 800d08c:	46bd      	mov	sp, r7
 800d08e:	bd80      	pop	{r7, pc}

0800d090 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d090:	b580      	push	{r7, lr}
 800d092:	b08a      	sub	sp, #40	; 0x28
 800d094:	af02      	add	r7, sp, #8
 800d096:	60f8      	str	r0, [r7, #12]
 800d098:	60b9      	str	r1, [r7, #8]
 800d09a:	603b      	str	r3, [r7, #0]
 800d09c:	4613      	mov	r3, r2
 800d09e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d0a6:	2b20      	cmp	r3, #32
 800d0a8:	d17b      	bne.n	800d1a2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800d0aa:	68bb      	ldr	r3, [r7, #8]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d002      	beq.n	800d0b6 <HAL_UART_Transmit+0x26>
 800d0b0:	88fb      	ldrh	r3, [r7, #6]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d101      	bne.n	800d0ba <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800d0b6:	2301      	movs	r3, #1
 800d0b8:	e074      	b.n	800d1a4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	2200      	movs	r2, #0
 800d0be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	2221      	movs	r2, #33	; 0x21
 800d0c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d0ca:	f7f5 fc93 	bl	80029f4 <HAL_GetTick>
 800d0ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	88fa      	ldrh	r2, [r7, #6]
 800d0d4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	88fa      	ldrh	r2, [r7, #6]
 800d0dc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	689b      	ldr	r3, [r3, #8]
 800d0e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d0e8:	d108      	bne.n	800d0fc <HAL_UART_Transmit+0x6c>
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	691b      	ldr	r3, [r3, #16]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d104      	bne.n	800d0fc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d0f6:	68bb      	ldr	r3, [r7, #8]
 800d0f8:	61bb      	str	r3, [r7, #24]
 800d0fa:	e003      	b.n	800d104 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800d0fc:	68bb      	ldr	r3, [r7, #8]
 800d0fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d100:	2300      	movs	r3, #0
 800d102:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800d104:	e030      	b.n	800d168 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d106:	683b      	ldr	r3, [r7, #0]
 800d108:	9300      	str	r3, [sp, #0]
 800d10a:	697b      	ldr	r3, [r7, #20]
 800d10c:	2200      	movs	r2, #0
 800d10e:	2180      	movs	r1, #128	; 0x80
 800d110:	68f8      	ldr	r0, [r7, #12]
 800d112:	f001 fb25 	bl	800e760 <UART_WaitOnFlagUntilTimeout>
 800d116:	4603      	mov	r3, r0
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d005      	beq.n	800d128 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	2220      	movs	r2, #32
 800d120:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800d124:	2303      	movs	r3, #3
 800d126:	e03d      	b.n	800d1a4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800d128:	69fb      	ldr	r3, [r7, #28]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d10b      	bne.n	800d146 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d12e:	69bb      	ldr	r3, [r7, #24]
 800d130:	881b      	ldrh	r3, [r3, #0]
 800d132:	461a      	mov	r2, r3
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d13c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800d13e:	69bb      	ldr	r3, [r7, #24]
 800d140:	3302      	adds	r3, #2
 800d142:	61bb      	str	r3, [r7, #24]
 800d144:	e007      	b.n	800d156 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d146:	69fb      	ldr	r3, [r7, #28]
 800d148:	781a      	ldrb	r2, [r3, #0]
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d150:	69fb      	ldr	r3, [r7, #28]
 800d152:	3301      	adds	r3, #1
 800d154:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d15c:	b29b      	uxth	r3, r3
 800d15e:	3b01      	subs	r3, #1
 800d160:	b29a      	uxth	r2, r3
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d16e:	b29b      	uxth	r3, r3
 800d170:	2b00      	cmp	r3, #0
 800d172:	d1c8      	bne.n	800d106 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d174:	683b      	ldr	r3, [r7, #0]
 800d176:	9300      	str	r3, [sp, #0]
 800d178:	697b      	ldr	r3, [r7, #20]
 800d17a:	2200      	movs	r2, #0
 800d17c:	2140      	movs	r1, #64	; 0x40
 800d17e:	68f8      	ldr	r0, [r7, #12]
 800d180:	f001 faee 	bl	800e760 <UART_WaitOnFlagUntilTimeout>
 800d184:	4603      	mov	r3, r0
 800d186:	2b00      	cmp	r3, #0
 800d188:	d005      	beq.n	800d196 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	2220      	movs	r2, #32
 800d18e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800d192:	2303      	movs	r3, #3
 800d194:	e006      	b.n	800d1a4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	2220      	movs	r2, #32
 800d19a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800d19e:	2300      	movs	r3, #0
 800d1a0:	e000      	b.n	800d1a4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800d1a2:	2302      	movs	r3, #2
  }
}
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	3720      	adds	r7, #32
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	bd80      	pop	{r7, pc}

0800d1ac <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d1ac:	b580      	push	{r7, lr}
 800d1ae:	b08a      	sub	sp, #40	; 0x28
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	60f8      	str	r0, [r7, #12]
 800d1b4:	60b9      	str	r1, [r7, #8]
 800d1b6:	4613      	mov	r3, r2
 800d1b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d1c0:	2b20      	cmp	r3, #32
 800d1c2:	d137      	bne.n	800d234 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800d1c4:	68bb      	ldr	r3, [r7, #8]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d002      	beq.n	800d1d0 <HAL_UART_Receive_IT+0x24>
 800d1ca:	88fb      	ldrh	r3, [r7, #6]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d101      	bne.n	800d1d4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800d1d0:	2301      	movs	r3, #1
 800d1d2:	e030      	b.n	800d236 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	2200      	movs	r2, #0
 800d1d8:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	4a18      	ldr	r2, [pc, #96]	; (800d240 <HAL_UART_Receive_IT+0x94>)
 800d1e0:	4293      	cmp	r3, r2
 800d1e2:	d01f      	beq.n	800d224 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	685b      	ldr	r3, [r3, #4]
 800d1ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d018      	beq.n	800d224 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1f8:	697b      	ldr	r3, [r7, #20]
 800d1fa:	e853 3f00 	ldrex	r3, [r3]
 800d1fe:	613b      	str	r3, [r7, #16]
   return(result);
 800d200:	693b      	ldr	r3, [r7, #16]
 800d202:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d206:	627b      	str	r3, [r7, #36]	; 0x24
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	461a      	mov	r2, r3
 800d20e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d210:	623b      	str	r3, [r7, #32]
 800d212:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d214:	69f9      	ldr	r1, [r7, #28]
 800d216:	6a3a      	ldr	r2, [r7, #32]
 800d218:	e841 2300 	strex	r3, r2, [r1]
 800d21c:	61bb      	str	r3, [r7, #24]
   return(result);
 800d21e:	69bb      	ldr	r3, [r7, #24]
 800d220:	2b00      	cmp	r3, #0
 800d222:	d1e6      	bne.n	800d1f2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800d224:	88fb      	ldrh	r3, [r7, #6]
 800d226:	461a      	mov	r2, r3
 800d228:	68b9      	ldr	r1, [r7, #8]
 800d22a:	68f8      	ldr	r0, [r7, #12]
 800d22c:	f001 fb06 	bl	800e83c <UART_Start_Receive_IT>
 800d230:	4603      	mov	r3, r0
 800d232:	e000      	b.n	800d236 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800d234:	2302      	movs	r3, #2
  }
}
 800d236:	4618      	mov	r0, r3
 800d238:	3728      	adds	r7, #40	; 0x28
 800d23a:	46bd      	mov	sp, r7
 800d23c:	bd80      	pop	{r7, pc}
 800d23e:	bf00      	nop
 800d240:	58000c00 	.word	0x58000c00

0800d244 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d244:	b580      	push	{r7, lr}
 800d246:	b0ba      	sub	sp, #232	; 0xe8
 800d248:	af00      	add	r7, sp, #0
 800d24a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	69db      	ldr	r3, [r3, #28]
 800d252:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	689b      	ldr	r3, [r3, #8]
 800d266:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d26a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800d26e:	f640 030f 	movw	r3, #2063	; 0x80f
 800d272:	4013      	ands	r3, r2
 800d274:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800d278:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d11b      	bne.n	800d2b8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d284:	f003 0320 	and.w	r3, r3, #32
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d015      	beq.n	800d2b8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d28c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d290:	f003 0320 	and.w	r3, r3, #32
 800d294:	2b00      	cmp	r3, #0
 800d296:	d105      	bne.n	800d2a4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d298:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d29c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d009      	beq.n	800d2b8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	f000 8377 	beq.w	800d99c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d2b2:	6878      	ldr	r0, [r7, #4]
 800d2b4:	4798      	blx	r3
      }
      return;
 800d2b6:	e371      	b.n	800d99c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d2b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	f000 8123 	beq.w	800d508 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d2c2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d2c6:	4b8d      	ldr	r3, [pc, #564]	; (800d4fc <HAL_UART_IRQHandler+0x2b8>)
 800d2c8:	4013      	ands	r3, r2
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d106      	bne.n	800d2dc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d2ce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800d2d2:	4b8b      	ldr	r3, [pc, #556]	; (800d500 <HAL_UART_IRQHandler+0x2bc>)
 800d2d4:	4013      	ands	r3, r2
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	f000 8116 	beq.w	800d508 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d2dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d2e0:	f003 0301 	and.w	r3, r3, #1
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d011      	beq.n	800d30c <HAL_UART_IRQHandler+0xc8>
 800d2e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d2ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d00b      	beq.n	800d30c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	2201      	movs	r2, #1
 800d2fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d302:	f043 0201 	orr.w	r2, r3, #1
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d30c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d310:	f003 0302 	and.w	r3, r3, #2
 800d314:	2b00      	cmp	r3, #0
 800d316:	d011      	beq.n	800d33c <HAL_UART_IRQHandler+0xf8>
 800d318:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d31c:	f003 0301 	and.w	r3, r3, #1
 800d320:	2b00      	cmp	r3, #0
 800d322:	d00b      	beq.n	800d33c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	2202      	movs	r2, #2
 800d32a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d332:	f043 0204 	orr.w	r2, r3, #4
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d33c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d340:	f003 0304 	and.w	r3, r3, #4
 800d344:	2b00      	cmp	r3, #0
 800d346:	d011      	beq.n	800d36c <HAL_UART_IRQHandler+0x128>
 800d348:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d34c:	f003 0301 	and.w	r3, r3, #1
 800d350:	2b00      	cmp	r3, #0
 800d352:	d00b      	beq.n	800d36c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	2204      	movs	r2, #4
 800d35a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d362:	f043 0202 	orr.w	r2, r3, #2
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d36c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d370:	f003 0308 	and.w	r3, r3, #8
 800d374:	2b00      	cmp	r3, #0
 800d376:	d017      	beq.n	800d3a8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d378:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d37c:	f003 0320 	and.w	r3, r3, #32
 800d380:	2b00      	cmp	r3, #0
 800d382:	d105      	bne.n	800d390 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d384:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d388:	4b5c      	ldr	r3, [pc, #368]	; (800d4fc <HAL_UART_IRQHandler+0x2b8>)
 800d38a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d00b      	beq.n	800d3a8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	2208      	movs	r2, #8
 800d396:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d39e:	f043 0208 	orr.w	r2, r3, #8
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d3a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d3ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d012      	beq.n	800d3da <HAL_UART_IRQHandler+0x196>
 800d3b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d3b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d00c      	beq.n	800d3da <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d3c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d3d0:	f043 0220 	orr.w	r2, r3, #32
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	f000 82dd 	beq.w	800d9a0 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d3e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d3ea:	f003 0320 	and.w	r3, r3, #32
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d013      	beq.n	800d41a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d3f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d3f6:	f003 0320 	and.w	r3, r3, #32
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d105      	bne.n	800d40a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d3fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d406:	2b00      	cmp	r3, #0
 800d408:	d007      	beq.n	800d41a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d003      	beq.n	800d41a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d416:	6878      	ldr	r0, [r7, #4]
 800d418:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d420:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	689b      	ldr	r3, [r3, #8]
 800d42a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d42e:	2b40      	cmp	r3, #64	; 0x40
 800d430:	d005      	beq.n	800d43e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d432:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d436:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d054      	beq.n	800d4e8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d43e:	6878      	ldr	r0, [r7, #4]
 800d440:	f001 fb1e 	bl	800ea80 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	689b      	ldr	r3, [r3, #8]
 800d44a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d44e:	2b40      	cmp	r3, #64	; 0x40
 800d450:	d146      	bne.n	800d4e0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	3308      	adds	r3, #8
 800d458:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d45c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d460:	e853 3f00 	ldrex	r3, [r3]
 800d464:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d468:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d46c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d470:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	3308      	adds	r3, #8
 800d47a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d47e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d482:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d486:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d48a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d48e:	e841 2300 	strex	r3, r2, [r1]
 800d492:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d496:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d1d9      	bne.n	800d452 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d017      	beq.n	800d4d8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d4ae:	4a15      	ldr	r2, [pc, #84]	; (800d504 <HAL_UART_IRQHandler+0x2c0>)
 800d4b0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	f7f8 fa6f 	bl	800599c <HAL_DMA_Abort_IT>
 800d4be:	4603      	mov	r3, r0
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d019      	beq.n	800d4f8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d4ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d4cc:	687a      	ldr	r2, [r7, #4]
 800d4ce:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800d4d2:	4610      	mov	r0, r2
 800d4d4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d4d6:	e00f      	b.n	800d4f8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d4d8:	6878      	ldr	r0, [r7, #4]
 800d4da:	f000 fa77 	bl	800d9cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d4de:	e00b      	b.n	800d4f8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d4e0:	6878      	ldr	r0, [r7, #4]
 800d4e2:	f000 fa73 	bl	800d9cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d4e6:	e007      	b.n	800d4f8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d4e8:	6878      	ldr	r0, [r7, #4]
 800d4ea:	f000 fa6f 	bl	800d9cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	2200      	movs	r2, #0
 800d4f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800d4f6:	e253      	b.n	800d9a0 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d4f8:	bf00      	nop
    return;
 800d4fa:	e251      	b.n	800d9a0 <HAL_UART_IRQHandler+0x75c>
 800d4fc:	10000001 	.word	0x10000001
 800d500:	04000120 	.word	0x04000120
 800d504:	0800eb4d 	.word	0x0800eb4d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d50c:	2b01      	cmp	r3, #1
 800d50e:	f040 81e7 	bne.w	800d8e0 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d516:	f003 0310 	and.w	r3, r3, #16
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	f000 81e0 	beq.w	800d8e0 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d520:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d524:	f003 0310 	and.w	r3, r3, #16
 800d528:	2b00      	cmp	r3, #0
 800d52a:	f000 81d9 	beq.w	800d8e0 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	2210      	movs	r2, #16
 800d534:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	689b      	ldr	r3, [r3, #8]
 800d53c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d540:	2b40      	cmp	r3, #64	; 0x40
 800d542:	f040 8151 	bne.w	800d7e8 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	4a96      	ldr	r2, [pc, #600]	; (800d7a8 <HAL_UART_IRQHandler+0x564>)
 800d550:	4293      	cmp	r3, r2
 800d552:	d068      	beq.n	800d626 <HAL_UART_IRQHandler+0x3e2>
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	4a93      	ldr	r2, [pc, #588]	; (800d7ac <HAL_UART_IRQHandler+0x568>)
 800d55e:	4293      	cmp	r3, r2
 800d560:	d061      	beq.n	800d626 <HAL_UART_IRQHandler+0x3e2>
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	4a91      	ldr	r2, [pc, #580]	; (800d7b0 <HAL_UART_IRQHandler+0x56c>)
 800d56c:	4293      	cmp	r3, r2
 800d56e:	d05a      	beq.n	800d626 <HAL_UART_IRQHandler+0x3e2>
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	4a8e      	ldr	r2, [pc, #568]	; (800d7b4 <HAL_UART_IRQHandler+0x570>)
 800d57a:	4293      	cmp	r3, r2
 800d57c:	d053      	beq.n	800d626 <HAL_UART_IRQHandler+0x3e2>
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	4a8c      	ldr	r2, [pc, #560]	; (800d7b8 <HAL_UART_IRQHandler+0x574>)
 800d588:	4293      	cmp	r3, r2
 800d58a:	d04c      	beq.n	800d626 <HAL_UART_IRQHandler+0x3e2>
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	4a89      	ldr	r2, [pc, #548]	; (800d7bc <HAL_UART_IRQHandler+0x578>)
 800d596:	4293      	cmp	r3, r2
 800d598:	d045      	beq.n	800d626 <HAL_UART_IRQHandler+0x3e2>
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	4a87      	ldr	r2, [pc, #540]	; (800d7c0 <HAL_UART_IRQHandler+0x57c>)
 800d5a4:	4293      	cmp	r3, r2
 800d5a6:	d03e      	beq.n	800d626 <HAL_UART_IRQHandler+0x3e2>
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	4a84      	ldr	r2, [pc, #528]	; (800d7c4 <HAL_UART_IRQHandler+0x580>)
 800d5b2:	4293      	cmp	r3, r2
 800d5b4:	d037      	beq.n	800d626 <HAL_UART_IRQHandler+0x3e2>
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	4a82      	ldr	r2, [pc, #520]	; (800d7c8 <HAL_UART_IRQHandler+0x584>)
 800d5c0:	4293      	cmp	r3, r2
 800d5c2:	d030      	beq.n	800d626 <HAL_UART_IRQHandler+0x3e2>
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	4a7f      	ldr	r2, [pc, #508]	; (800d7cc <HAL_UART_IRQHandler+0x588>)
 800d5ce:	4293      	cmp	r3, r2
 800d5d0:	d029      	beq.n	800d626 <HAL_UART_IRQHandler+0x3e2>
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	4a7d      	ldr	r2, [pc, #500]	; (800d7d0 <HAL_UART_IRQHandler+0x58c>)
 800d5dc:	4293      	cmp	r3, r2
 800d5de:	d022      	beq.n	800d626 <HAL_UART_IRQHandler+0x3e2>
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	4a7a      	ldr	r2, [pc, #488]	; (800d7d4 <HAL_UART_IRQHandler+0x590>)
 800d5ea:	4293      	cmp	r3, r2
 800d5ec:	d01b      	beq.n	800d626 <HAL_UART_IRQHandler+0x3e2>
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	4a78      	ldr	r2, [pc, #480]	; (800d7d8 <HAL_UART_IRQHandler+0x594>)
 800d5f8:	4293      	cmp	r3, r2
 800d5fa:	d014      	beq.n	800d626 <HAL_UART_IRQHandler+0x3e2>
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	4a75      	ldr	r2, [pc, #468]	; (800d7dc <HAL_UART_IRQHandler+0x598>)
 800d606:	4293      	cmp	r3, r2
 800d608:	d00d      	beq.n	800d626 <HAL_UART_IRQHandler+0x3e2>
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	4a73      	ldr	r2, [pc, #460]	; (800d7e0 <HAL_UART_IRQHandler+0x59c>)
 800d614:	4293      	cmp	r3, r2
 800d616:	d006      	beq.n	800d626 <HAL_UART_IRQHandler+0x3e2>
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	4a70      	ldr	r2, [pc, #448]	; (800d7e4 <HAL_UART_IRQHandler+0x5a0>)
 800d622:	4293      	cmp	r3, r2
 800d624:	d106      	bne.n	800d634 <HAL_UART_IRQHandler+0x3f0>
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	685b      	ldr	r3, [r3, #4]
 800d630:	b29b      	uxth	r3, r3
 800d632:	e005      	b.n	800d640 <HAL_UART_IRQHandler+0x3fc>
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	685b      	ldr	r3, [r3, #4]
 800d63e:	b29b      	uxth	r3, r3
 800d640:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d644:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d648:	2b00      	cmp	r3, #0
 800d64a:	f000 81ab 	beq.w	800d9a4 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d654:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d658:	429a      	cmp	r2, r3
 800d65a:	f080 81a3 	bcs.w	800d9a4 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d664:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d66e:	69db      	ldr	r3, [r3, #28]
 800d670:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d674:	f000 8087 	beq.w	800d786 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d680:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d684:	e853 3f00 	ldrex	r3, [r3]
 800d688:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800d68c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d690:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d694:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	461a      	mov	r2, r3
 800d69e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d6a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d6a6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d6ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d6b2:	e841 2300 	strex	r3, r2, [r1]
 800d6b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800d6ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d1da      	bne.n	800d678 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	3308      	adds	r3, #8
 800d6c8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d6cc:	e853 3f00 	ldrex	r3, [r3]
 800d6d0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d6d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d6d4:	f023 0301 	bic.w	r3, r3, #1
 800d6d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	3308      	adds	r3, #8
 800d6e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d6e6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d6ea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6ec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d6ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d6f2:	e841 2300 	strex	r3, r2, [r1]
 800d6f6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d6f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d1e1      	bne.n	800d6c2 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	3308      	adds	r3, #8
 800d704:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d706:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d708:	e853 3f00 	ldrex	r3, [r3]
 800d70c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d70e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d710:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d714:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	3308      	adds	r3, #8
 800d71e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d722:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d724:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d726:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d728:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d72a:	e841 2300 	strex	r3, r2, [r1]
 800d72e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d730:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d732:	2b00      	cmp	r3, #0
 800d734:	d1e3      	bne.n	800d6fe <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	2220      	movs	r2, #32
 800d73a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	2200      	movs	r2, #0
 800d742:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d74a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d74c:	e853 3f00 	ldrex	r3, [r3]
 800d750:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d752:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d754:	f023 0310 	bic.w	r3, r3, #16
 800d758:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	461a      	mov	r2, r3
 800d762:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d766:	65bb      	str	r3, [r7, #88]	; 0x58
 800d768:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d76a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d76c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d76e:	e841 2300 	strex	r3, r2, [r1]
 800d772:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d774:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d776:	2b00      	cmp	r3, #0
 800d778:	d1e4      	bne.n	800d744 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d780:	4618      	mov	r0, r3
 800d782:	f7f7 fded 	bl	8005360 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	2202      	movs	r2, #2
 800d78a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d798:	b29b      	uxth	r3, r3
 800d79a:	1ad3      	subs	r3, r2, r3
 800d79c:	b29b      	uxth	r3, r3
 800d79e:	4619      	mov	r1, r3
 800d7a0:	6878      	ldr	r0, [r7, #4]
 800d7a2:	f000 f91d 	bl	800d9e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d7a6:	e0fd      	b.n	800d9a4 <HAL_UART_IRQHandler+0x760>
 800d7a8:	40020010 	.word	0x40020010
 800d7ac:	40020028 	.word	0x40020028
 800d7b0:	40020040 	.word	0x40020040
 800d7b4:	40020058 	.word	0x40020058
 800d7b8:	40020070 	.word	0x40020070
 800d7bc:	40020088 	.word	0x40020088
 800d7c0:	400200a0 	.word	0x400200a0
 800d7c4:	400200b8 	.word	0x400200b8
 800d7c8:	40020410 	.word	0x40020410
 800d7cc:	40020428 	.word	0x40020428
 800d7d0:	40020440 	.word	0x40020440
 800d7d4:	40020458 	.word	0x40020458
 800d7d8:	40020470 	.word	0x40020470
 800d7dc:	40020488 	.word	0x40020488
 800d7e0:	400204a0 	.word	0x400204a0
 800d7e4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d7f4:	b29b      	uxth	r3, r3
 800d7f6:	1ad3      	subs	r3, r2, r3
 800d7f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d802:	b29b      	uxth	r3, r3
 800d804:	2b00      	cmp	r3, #0
 800d806:	f000 80cf 	beq.w	800d9a8 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800d80a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d80e:	2b00      	cmp	r3, #0
 800d810:	f000 80ca 	beq.w	800d9a8 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d81a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d81c:	e853 3f00 	ldrex	r3, [r3]
 800d820:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d824:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d828:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	461a      	mov	r2, r3
 800d832:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d836:	647b      	str	r3, [r7, #68]	; 0x44
 800d838:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d83a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d83c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d83e:	e841 2300 	strex	r3, r2, [r1]
 800d842:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d846:	2b00      	cmp	r3, #0
 800d848:	d1e4      	bne.n	800d814 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	3308      	adds	r3, #8
 800d850:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d854:	e853 3f00 	ldrex	r3, [r3]
 800d858:	623b      	str	r3, [r7, #32]
   return(result);
 800d85a:	6a3a      	ldr	r2, [r7, #32]
 800d85c:	4b55      	ldr	r3, [pc, #340]	; (800d9b4 <HAL_UART_IRQHandler+0x770>)
 800d85e:	4013      	ands	r3, r2
 800d860:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	3308      	adds	r3, #8
 800d86a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d86e:	633a      	str	r2, [r7, #48]	; 0x30
 800d870:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d872:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d874:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d876:	e841 2300 	strex	r3, r2, [r1]
 800d87a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d87c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d1e3      	bne.n	800d84a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	2220      	movs	r2, #32
 800d886:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	2200      	movs	r2, #0
 800d88e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	2200      	movs	r2, #0
 800d894:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d89c:	693b      	ldr	r3, [r7, #16]
 800d89e:	e853 3f00 	ldrex	r3, [r3]
 800d8a2:	60fb      	str	r3, [r7, #12]
   return(result);
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	f023 0310 	bic.w	r3, r3, #16
 800d8aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	461a      	mov	r2, r3
 800d8b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d8b8:	61fb      	str	r3, [r7, #28]
 800d8ba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8bc:	69b9      	ldr	r1, [r7, #24]
 800d8be:	69fa      	ldr	r2, [r7, #28]
 800d8c0:	e841 2300 	strex	r3, r2, [r1]
 800d8c4:	617b      	str	r3, [r7, #20]
   return(result);
 800d8c6:	697b      	ldr	r3, [r7, #20]
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d1e4      	bne.n	800d896 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	2202      	movs	r2, #2
 800d8d0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d8d2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d8d6:	4619      	mov	r1, r3
 800d8d8:	6878      	ldr	r0, [r7, #4]
 800d8da:	f000 f881 	bl	800d9e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d8de:	e063      	b.n	800d9a8 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d8e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d8e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d00e      	beq.n	800d90a <HAL_UART_IRQHandler+0x6c6>
 800d8ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d8f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d008      	beq.n	800d90a <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800d900:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d902:	6878      	ldr	r0, [r7, #4]
 800d904:	f001 fe80 	bl	800f608 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d908:	e051      	b.n	800d9ae <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d90a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d90e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d912:	2b00      	cmp	r3, #0
 800d914:	d014      	beq.n	800d940 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d916:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d91a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d105      	bne.n	800d92e <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d922:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d926:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d008      	beq.n	800d940 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d932:	2b00      	cmp	r3, #0
 800d934:	d03a      	beq.n	800d9ac <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d93a:	6878      	ldr	r0, [r7, #4]
 800d93c:	4798      	blx	r3
    }
    return;
 800d93e:	e035      	b.n	800d9ac <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d940:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d009      	beq.n	800d960 <HAL_UART_IRQHandler+0x71c>
 800d94c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d954:	2b00      	cmp	r3, #0
 800d956:	d003      	beq.n	800d960 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800d958:	6878      	ldr	r0, [r7, #4]
 800d95a:	f001 f90d 	bl	800eb78 <UART_EndTransmit_IT>
    return;
 800d95e:	e026      	b.n	800d9ae <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d960:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d964:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d009      	beq.n	800d980 <HAL_UART_IRQHandler+0x73c>
 800d96c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d970:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d974:	2b00      	cmp	r3, #0
 800d976:	d003      	beq.n	800d980 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d978:	6878      	ldr	r0, [r7, #4]
 800d97a:	f001 fe59 	bl	800f630 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d97e:	e016      	b.n	800d9ae <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d980:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d984:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d010      	beq.n	800d9ae <HAL_UART_IRQHandler+0x76a>
 800d98c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d990:	2b00      	cmp	r3, #0
 800d992:	da0c      	bge.n	800d9ae <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d994:	6878      	ldr	r0, [r7, #4]
 800d996:	f001 fe41 	bl	800f61c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d99a:	e008      	b.n	800d9ae <HAL_UART_IRQHandler+0x76a>
      return;
 800d99c:	bf00      	nop
 800d99e:	e006      	b.n	800d9ae <HAL_UART_IRQHandler+0x76a>
    return;
 800d9a0:	bf00      	nop
 800d9a2:	e004      	b.n	800d9ae <HAL_UART_IRQHandler+0x76a>
      return;
 800d9a4:	bf00      	nop
 800d9a6:	e002      	b.n	800d9ae <HAL_UART_IRQHandler+0x76a>
      return;
 800d9a8:	bf00      	nop
 800d9aa:	e000      	b.n	800d9ae <HAL_UART_IRQHandler+0x76a>
    return;
 800d9ac:	bf00      	nop
  }
}
 800d9ae:	37e8      	adds	r7, #232	; 0xe8
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	bd80      	pop	{r7, pc}
 800d9b4:	effffffe 	.word	0xeffffffe

0800d9b8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d9b8:	b480      	push	{r7}
 800d9ba:	b083      	sub	sp, #12
 800d9bc:	af00      	add	r7, sp, #0
 800d9be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d9c0:	bf00      	nop
 800d9c2:	370c      	adds	r7, #12
 800d9c4:	46bd      	mov	sp, r7
 800d9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ca:	4770      	bx	lr

0800d9cc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d9cc:	b480      	push	{r7}
 800d9ce:	b083      	sub	sp, #12
 800d9d0:	af00      	add	r7, sp, #0
 800d9d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d9d4:	bf00      	nop
 800d9d6:	370c      	adds	r7, #12
 800d9d8:	46bd      	mov	sp, r7
 800d9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9de:	4770      	bx	lr

0800d9e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d9e0:	b480      	push	{r7}
 800d9e2:	b083      	sub	sp, #12
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	6078      	str	r0, [r7, #4]
 800d9e8:	460b      	mov	r3, r1
 800d9ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d9ec:	bf00      	nop
 800d9ee:	370c      	adds	r7, #12
 800d9f0:	46bd      	mov	sp, r7
 800d9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f6:	4770      	bx	lr

0800d9f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d9f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d9fc:	b092      	sub	sp, #72	; 0x48
 800d9fe:	af00      	add	r7, sp, #0
 800da00:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800da02:	2300      	movs	r3, #0
 800da04:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800da08:	697b      	ldr	r3, [r7, #20]
 800da0a:	689a      	ldr	r2, [r3, #8]
 800da0c:	697b      	ldr	r3, [r7, #20]
 800da0e:	691b      	ldr	r3, [r3, #16]
 800da10:	431a      	orrs	r2, r3
 800da12:	697b      	ldr	r3, [r7, #20]
 800da14:	695b      	ldr	r3, [r3, #20]
 800da16:	431a      	orrs	r2, r3
 800da18:	697b      	ldr	r3, [r7, #20]
 800da1a:	69db      	ldr	r3, [r3, #28]
 800da1c:	4313      	orrs	r3, r2
 800da1e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800da20:	697b      	ldr	r3, [r7, #20]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	681a      	ldr	r2, [r3, #0]
 800da26:	4bbe      	ldr	r3, [pc, #760]	; (800dd20 <UART_SetConfig+0x328>)
 800da28:	4013      	ands	r3, r2
 800da2a:	697a      	ldr	r2, [r7, #20]
 800da2c:	6812      	ldr	r2, [r2, #0]
 800da2e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800da30:	430b      	orrs	r3, r1
 800da32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800da34:	697b      	ldr	r3, [r7, #20]
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	685b      	ldr	r3, [r3, #4]
 800da3a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800da3e:	697b      	ldr	r3, [r7, #20]
 800da40:	68da      	ldr	r2, [r3, #12]
 800da42:	697b      	ldr	r3, [r7, #20]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	430a      	orrs	r2, r1
 800da48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800da4a:	697b      	ldr	r3, [r7, #20]
 800da4c:	699b      	ldr	r3, [r3, #24]
 800da4e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800da50:	697b      	ldr	r3, [r7, #20]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	4ab3      	ldr	r2, [pc, #716]	; (800dd24 <UART_SetConfig+0x32c>)
 800da56:	4293      	cmp	r3, r2
 800da58:	d004      	beq.n	800da64 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800da5a:	697b      	ldr	r3, [r7, #20]
 800da5c:	6a1b      	ldr	r3, [r3, #32]
 800da5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800da60:	4313      	orrs	r3, r2
 800da62:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800da64:	697b      	ldr	r3, [r7, #20]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	689a      	ldr	r2, [r3, #8]
 800da6a:	4baf      	ldr	r3, [pc, #700]	; (800dd28 <UART_SetConfig+0x330>)
 800da6c:	4013      	ands	r3, r2
 800da6e:	697a      	ldr	r2, [r7, #20]
 800da70:	6812      	ldr	r2, [r2, #0]
 800da72:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800da74:	430b      	orrs	r3, r1
 800da76:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800da78:	697b      	ldr	r3, [r7, #20]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da7e:	f023 010f 	bic.w	r1, r3, #15
 800da82:	697b      	ldr	r3, [r7, #20]
 800da84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800da86:	697b      	ldr	r3, [r7, #20]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	430a      	orrs	r2, r1
 800da8c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800da8e:	697b      	ldr	r3, [r7, #20]
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	4aa6      	ldr	r2, [pc, #664]	; (800dd2c <UART_SetConfig+0x334>)
 800da94:	4293      	cmp	r3, r2
 800da96:	d177      	bne.n	800db88 <UART_SetConfig+0x190>
 800da98:	4ba5      	ldr	r3, [pc, #660]	; (800dd30 <UART_SetConfig+0x338>)
 800da9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da9c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800daa0:	2b28      	cmp	r3, #40	; 0x28
 800daa2:	d86d      	bhi.n	800db80 <UART_SetConfig+0x188>
 800daa4:	a201      	add	r2, pc, #4	; (adr r2, 800daac <UART_SetConfig+0xb4>)
 800daa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800daaa:	bf00      	nop
 800daac:	0800db51 	.word	0x0800db51
 800dab0:	0800db81 	.word	0x0800db81
 800dab4:	0800db81 	.word	0x0800db81
 800dab8:	0800db81 	.word	0x0800db81
 800dabc:	0800db81 	.word	0x0800db81
 800dac0:	0800db81 	.word	0x0800db81
 800dac4:	0800db81 	.word	0x0800db81
 800dac8:	0800db81 	.word	0x0800db81
 800dacc:	0800db59 	.word	0x0800db59
 800dad0:	0800db81 	.word	0x0800db81
 800dad4:	0800db81 	.word	0x0800db81
 800dad8:	0800db81 	.word	0x0800db81
 800dadc:	0800db81 	.word	0x0800db81
 800dae0:	0800db81 	.word	0x0800db81
 800dae4:	0800db81 	.word	0x0800db81
 800dae8:	0800db81 	.word	0x0800db81
 800daec:	0800db61 	.word	0x0800db61
 800daf0:	0800db81 	.word	0x0800db81
 800daf4:	0800db81 	.word	0x0800db81
 800daf8:	0800db81 	.word	0x0800db81
 800dafc:	0800db81 	.word	0x0800db81
 800db00:	0800db81 	.word	0x0800db81
 800db04:	0800db81 	.word	0x0800db81
 800db08:	0800db81 	.word	0x0800db81
 800db0c:	0800db69 	.word	0x0800db69
 800db10:	0800db81 	.word	0x0800db81
 800db14:	0800db81 	.word	0x0800db81
 800db18:	0800db81 	.word	0x0800db81
 800db1c:	0800db81 	.word	0x0800db81
 800db20:	0800db81 	.word	0x0800db81
 800db24:	0800db81 	.word	0x0800db81
 800db28:	0800db81 	.word	0x0800db81
 800db2c:	0800db71 	.word	0x0800db71
 800db30:	0800db81 	.word	0x0800db81
 800db34:	0800db81 	.word	0x0800db81
 800db38:	0800db81 	.word	0x0800db81
 800db3c:	0800db81 	.word	0x0800db81
 800db40:	0800db81 	.word	0x0800db81
 800db44:	0800db81 	.word	0x0800db81
 800db48:	0800db81 	.word	0x0800db81
 800db4c:	0800db79 	.word	0x0800db79
 800db50:	2301      	movs	r3, #1
 800db52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db56:	e222      	b.n	800df9e <UART_SetConfig+0x5a6>
 800db58:	2304      	movs	r3, #4
 800db5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db5e:	e21e      	b.n	800df9e <UART_SetConfig+0x5a6>
 800db60:	2308      	movs	r3, #8
 800db62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db66:	e21a      	b.n	800df9e <UART_SetConfig+0x5a6>
 800db68:	2310      	movs	r3, #16
 800db6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db6e:	e216      	b.n	800df9e <UART_SetConfig+0x5a6>
 800db70:	2320      	movs	r3, #32
 800db72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db76:	e212      	b.n	800df9e <UART_SetConfig+0x5a6>
 800db78:	2340      	movs	r3, #64	; 0x40
 800db7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db7e:	e20e      	b.n	800df9e <UART_SetConfig+0x5a6>
 800db80:	2380      	movs	r3, #128	; 0x80
 800db82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db86:	e20a      	b.n	800df9e <UART_SetConfig+0x5a6>
 800db88:	697b      	ldr	r3, [r7, #20]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	4a69      	ldr	r2, [pc, #420]	; (800dd34 <UART_SetConfig+0x33c>)
 800db8e:	4293      	cmp	r3, r2
 800db90:	d130      	bne.n	800dbf4 <UART_SetConfig+0x1fc>
 800db92:	4b67      	ldr	r3, [pc, #412]	; (800dd30 <UART_SetConfig+0x338>)
 800db94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db96:	f003 0307 	and.w	r3, r3, #7
 800db9a:	2b05      	cmp	r3, #5
 800db9c:	d826      	bhi.n	800dbec <UART_SetConfig+0x1f4>
 800db9e:	a201      	add	r2, pc, #4	; (adr r2, 800dba4 <UART_SetConfig+0x1ac>)
 800dba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dba4:	0800dbbd 	.word	0x0800dbbd
 800dba8:	0800dbc5 	.word	0x0800dbc5
 800dbac:	0800dbcd 	.word	0x0800dbcd
 800dbb0:	0800dbd5 	.word	0x0800dbd5
 800dbb4:	0800dbdd 	.word	0x0800dbdd
 800dbb8:	0800dbe5 	.word	0x0800dbe5
 800dbbc:	2300      	movs	r3, #0
 800dbbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbc2:	e1ec      	b.n	800df9e <UART_SetConfig+0x5a6>
 800dbc4:	2304      	movs	r3, #4
 800dbc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbca:	e1e8      	b.n	800df9e <UART_SetConfig+0x5a6>
 800dbcc:	2308      	movs	r3, #8
 800dbce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbd2:	e1e4      	b.n	800df9e <UART_SetConfig+0x5a6>
 800dbd4:	2310      	movs	r3, #16
 800dbd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbda:	e1e0      	b.n	800df9e <UART_SetConfig+0x5a6>
 800dbdc:	2320      	movs	r3, #32
 800dbde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbe2:	e1dc      	b.n	800df9e <UART_SetConfig+0x5a6>
 800dbe4:	2340      	movs	r3, #64	; 0x40
 800dbe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbea:	e1d8      	b.n	800df9e <UART_SetConfig+0x5a6>
 800dbec:	2380      	movs	r3, #128	; 0x80
 800dbee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbf2:	e1d4      	b.n	800df9e <UART_SetConfig+0x5a6>
 800dbf4:	697b      	ldr	r3, [r7, #20]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	4a4f      	ldr	r2, [pc, #316]	; (800dd38 <UART_SetConfig+0x340>)
 800dbfa:	4293      	cmp	r3, r2
 800dbfc:	d130      	bne.n	800dc60 <UART_SetConfig+0x268>
 800dbfe:	4b4c      	ldr	r3, [pc, #304]	; (800dd30 <UART_SetConfig+0x338>)
 800dc00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc02:	f003 0307 	and.w	r3, r3, #7
 800dc06:	2b05      	cmp	r3, #5
 800dc08:	d826      	bhi.n	800dc58 <UART_SetConfig+0x260>
 800dc0a:	a201      	add	r2, pc, #4	; (adr r2, 800dc10 <UART_SetConfig+0x218>)
 800dc0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc10:	0800dc29 	.word	0x0800dc29
 800dc14:	0800dc31 	.word	0x0800dc31
 800dc18:	0800dc39 	.word	0x0800dc39
 800dc1c:	0800dc41 	.word	0x0800dc41
 800dc20:	0800dc49 	.word	0x0800dc49
 800dc24:	0800dc51 	.word	0x0800dc51
 800dc28:	2300      	movs	r3, #0
 800dc2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc2e:	e1b6      	b.n	800df9e <UART_SetConfig+0x5a6>
 800dc30:	2304      	movs	r3, #4
 800dc32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc36:	e1b2      	b.n	800df9e <UART_SetConfig+0x5a6>
 800dc38:	2308      	movs	r3, #8
 800dc3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc3e:	e1ae      	b.n	800df9e <UART_SetConfig+0x5a6>
 800dc40:	2310      	movs	r3, #16
 800dc42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc46:	e1aa      	b.n	800df9e <UART_SetConfig+0x5a6>
 800dc48:	2320      	movs	r3, #32
 800dc4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc4e:	e1a6      	b.n	800df9e <UART_SetConfig+0x5a6>
 800dc50:	2340      	movs	r3, #64	; 0x40
 800dc52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc56:	e1a2      	b.n	800df9e <UART_SetConfig+0x5a6>
 800dc58:	2380      	movs	r3, #128	; 0x80
 800dc5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc5e:	e19e      	b.n	800df9e <UART_SetConfig+0x5a6>
 800dc60:	697b      	ldr	r3, [r7, #20]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	4a35      	ldr	r2, [pc, #212]	; (800dd3c <UART_SetConfig+0x344>)
 800dc66:	4293      	cmp	r3, r2
 800dc68:	d130      	bne.n	800dccc <UART_SetConfig+0x2d4>
 800dc6a:	4b31      	ldr	r3, [pc, #196]	; (800dd30 <UART_SetConfig+0x338>)
 800dc6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc6e:	f003 0307 	and.w	r3, r3, #7
 800dc72:	2b05      	cmp	r3, #5
 800dc74:	d826      	bhi.n	800dcc4 <UART_SetConfig+0x2cc>
 800dc76:	a201      	add	r2, pc, #4	; (adr r2, 800dc7c <UART_SetConfig+0x284>)
 800dc78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc7c:	0800dc95 	.word	0x0800dc95
 800dc80:	0800dc9d 	.word	0x0800dc9d
 800dc84:	0800dca5 	.word	0x0800dca5
 800dc88:	0800dcad 	.word	0x0800dcad
 800dc8c:	0800dcb5 	.word	0x0800dcb5
 800dc90:	0800dcbd 	.word	0x0800dcbd
 800dc94:	2300      	movs	r3, #0
 800dc96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc9a:	e180      	b.n	800df9e <UART_SetConfig+0x5a6>
 800dc9c:	2304      	movs	r3, #4
 800dc9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dca2:	e17c      	b.n	800df9e <UART_SetConfig+0x5a6>
 800dca4:	2308      	movs	r3, #8
 800dca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcaa:	e178      	b.n	800df9e <UART_SetConfig+0x5a6>
 800dcac:	2310      	movs	r3, #16
 800dcae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcb2:	e174      	b.n	800df9e <UART_SetConfig+0x5a6>
 800dcb4:	2320      	movs	r3, #32
 800dcb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcba:	e170      	b.n	800df9e <UART_SetConfig+0x5a6>
 800dcbc:	2340      	movs	r3, #64	; 0x40
 800dcbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcc2:	e16c      	b.n	800df9e <UART_SetConfig+0x5a6>
 800dcc4:	2380      	movs	r3, #128	; 0x80
 800dcc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcca:	e168      	b.n	800df9e <UART_SetConfig+0x5a6>
 800dccc:	697b      	ldr	r3, [r7, #20]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	4a1b      	ldr	r2, [pc, #108]	; (800dd40 <UART_SetConfig+0x348>)
 800dcd2:	4293      	cmp	r3, r2
 800dcd4:	d142      	bne.n	800dd5c <UART_SetConfig+0x364>
 800dcd6:	4b16      	ldr	r3, [pc, #88]	; (800dd30 <UART_SetConfig+0x338>)
 800dcd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dcda:	f003 0307 	and.w	r3, r3, #7
 800dcde:	2b05      	cmp	r3, #5
 800dce0:	d838      	bhi.n	800dd54 <UART_SetConfig+0x35c>
 800dce2:	a201      	add	r2, pc, #4	; (adr r2, 800dce8 <UART_SetConfig+0x2f0>)
 800dce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dce8:	0800dd01 	.word	0x0800dd01
 800dcec:	0800dd09 	.word	0x0800dd09
 800dcf0:	0800dd11 	.word	0x0800dd11
 800dcf4:	0800dd19 	.word	0x0800dd19
 800dcf8:	0800dd45 	.word	0x0800dd45
 800dcfc:	0800dd4d 	.word	0x0800dd4d
 800dd00:	2300      	movs	r3, #0
 800dd02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd06:	e14a      	b.n	800df9e <UART_SetConfig+0x5a6>
 800dd08:	2304      	movs	r3, #4
 800dd0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd0e:	e146      	b.n	800df9e <UART_SetConfig+0x5a6>
 800dd10:	2308      	movs	r3, #8
 800dd12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd16:	e142      	b.n	800df9e <UART_SetConfig+0x5a6>
 800dd18:	2310      	movs	r3, #16
 800dd1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd1e:	e13e      	b.n	800df9e <UART_SetConfig+0x5a6>
 800dd20:	cfff69f3 	.word	0xcfff69f3
 800dd24:	58000c00 	.word	0x58000c00
 800dd28:	11fff4ff 	.word	0x11fff4ff
 800dd2c:	40011000 	.word	0x40011000
 800dd30:	58024400 	.word	0x58024400
 800dd34:	40004400 	.word	0x40004400
 800dd38:	40004800 	.word	0x40004800
 800dd3c:	40004c00 	.word	0x40004c00
 800dd40:	40005000 	.word	0x40005000
 800dd44:	2320      	movs	r3, #32
 800dd46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd4a:	e128      	b.n	800df9e <UART_SetConfig+0x5a6>
 800dd4c:	2340      	movs	r3, #64	; 0x40
 800dd4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd52:	e124      	b.n	800df9e <UART_SetConfig+0x5a6>
 800dd54:	2380      	movs	r3, #128	; 0x80
 800dd56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd5a:	e120      	b.n	800df9e <UART_SetConfig+0x5a6>
 800dd5c:	697b      	ldr	r3, [r7, #20]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	4acb      	ldr	r2, [pc, #812]	; (800e090 <UART_SetConfig+0x698>)
 800dd62:	4293      	cmp	r3, r2
 800dd64:	d176      	bne.n	800de54 <UART_SetConfig+0x45c>
 800dd66:	4bcb      	ldr	r3, [pc, #812]	; (800e094 <UART_SetConfig+0x69c>)
 800dd68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dd6e:	2b28      	cmp	r3, #40	; 0x28
 800dd70:	d86c      	bhi.n	800de4c <UART_SetConfig+0x454>
 800dd72:	a201      	add	r2, pc, #4	; (adr r2, 800dd78 <UART_SetConfig+0x380>)
 800dd74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd78:	0800de1d 	.word	0x0800de1d
 800dd7c:	0800de4d 	.word	0x0800de4d
 800dd80:	0800de4d 	.word	0x0800de4d
 800dd84:	0800de4d 	.word	0x0800de4d
 800dd88:	0800de4d 	.word	0x0800de4d
 800dd8c:	0800de4d 	.word	0x0800de4d
 800dd90:	0800de4d 	.word	0x0800de4d
 800dd94:	0800de4d 	.word	0x0800de4d
 800dd98:	0800de25 	.word	0x0800de25
 800dd9c:	0800de4d 	.word	0x0800de4d
 800dda0:	0800de4d 	.word	0x0800de4d
 800dda4:	0800de4d 	.word	0x0800de4d
 800dda8:	0800de4d 	.word	0x0800de4d
 800ddac:	0800de4d 	.word	0x0800de4d
 800ddb0:	0800de4d 	.word	0x0800de4d
 800ddb4:	0800de4d 	.word	0x0800de4d
 800ddb8:	0800de2d 	.word	0x0800de2d
 800ddbc:	0800de4d 	.word	0x0800de4d
 800ddc0:	0800de4d 	.word	0x0800de4d
 800ddc4:	0800de4d 	.word	0x0800de4d
 800ddc8:	0800de4d 	.word	0x0800de4d
 800ddcc:	0800de4d 	.word	0x0800de4d
 800ddd0:	0800de4d 	.word	0x0800de4d
 800ddd4:	0800de4d 	.word	0x0800de4d
 800ddd8:	0800de35 	.word	0x0800de35
 800dddc:	0800de4d 	.word	0x0800de4d
 800dde0:	0800de4d 	.word	0x0800de4d
 800dde4:	0800de4d 	.word	0x0800de4d
 800dde8:	0800de4d 	.word	0x0800de4d
 800ddec:	0800de4d 	.word	0x0800de4d
 800ddf0:	0800de4d 	.word	0x0800de4d
 800ddf4:	0800de4d 	.word	0x0800de4d
 800ddf8:	0800de3d 	.word	0x0800de3d
 800ddfc:	0800de4d 	.word	0x0800de4d
 800de00:	0800de4d 	.word	0x0800de4d
 800de04:	0800de4d 	.word	0x0800de4d
 800de08:	0800de4d 	.word	0x0800de4d
 800de0c:	0800de4d 	.word	0x0800de4d
 800de10:	0800de4d 	.word	0x0800de4d
 800de14:	0800de4d 	.word	0x0800de4d
 800de18:	0800de45 	.word	0x0800de45
 800de1c:	2301      	movs	r3, #1
 800de1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de22:	e0bc      	b.n	800df9e <UART_SetConfig+0x5a6>
 800de24:	2304      	movs	r3, #4
 800de26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de2a:	e0b8      	b.n	800df9e <UART_SetConfig+0x5a6>
 800de2c:	2308      	movs	r3, #8
 800de2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de32:	e0b4      	b.n	800df9e <UART_SetConfig+0x5a6>
 800de34:	2310      	movs	r3, #16
 800de36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de3a:	e0b0      	b.n	800df9e <UART_SetConfig+0x5a6>
 800de3c:	2320      	movs	r3, #32
 800de3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de42:	e0ac      	b.n	800df9e <UART_SetConfig+0x5a6>
 800de44:	2340      	movs	r3, #64	; 0x40
 800de46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de4a:	e0a8      	b.n	800df9e <UART_SetConfig+0x5a6>
 800de4c:	2380      	movs	r3, #128	; 0x80
 800de4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de52:	e0a4      	b.n	800df9e <UART_SetConfig+0x5a6>
 800de54:	697b      	ldr	r3, [r7, #20]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	4a8f      	ldr	r2, [pc, #572]	; (800e098 <UART_SetConfig+0x6a0>)
 800de5a:	4293      	cmp	r3, r2
 800de5c:	d130      	bne.n	800dec0 <UART_SetConfig+0x4c8>
 800de5e:	4b8d      	ldr	r3, [pc, #564]	; (800e094 <UART_SetConfig+0x69c>)
 800de60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de62:	f003 0307 	and.w	r3, r3, #7
 800de66:	2b05      	cmp	r3, #5
 800de68:	d826      	bhi.n	800deb8 <UART_SetConfig+0x4c0>
 800de6a:	a201      	add	r2, pc, #4	; (adr r2, 800de70 <UART_SetConfig+0x478>)
 800de6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de70:	0800de89 	.word	0x0800de89
 800de74:	0800de91 	.word	0x0800de91
 800de78:	0800de99 	.word	0x0800de99
 800de7c:	0800dea1 	.word	0x0800dea1
 800de80:	0800dea9 	.word	0x0800dea9
 800de84:	0800deb1 	.word	0x0800deb1
 800de88:	2300      	movs	r3, #0
 800de8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de8e:	e086      	b.n	800df9e <UART_SetConfig+0x5a6>
 800de90:	2304      	movs	r3, #4
 800de92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de96:	e082      	b.n	800df9e <UART_SetConfig+0x5a6>
 800de98:	2308      	movs	r3, #8
 800de9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de9e:	e07e      	b.n	800df9e <UART_SetConfig+0x5a6>
 800dea0:	2310      	movs	r3, #16
 800dea2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dea6:	e07a      	b.n	800df9e <UART_SetConfig+0x5a6>
 800dea8:	2320      	movs	r3, #32
 800deaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800deae:	e076      	b.n	800df9e <UART_SetConfig+0x5a6>
 800deb0:	2340      	movs	r3, #64	; 0x40
 800deb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800deb6:	e072      	b.n	800df9e <UART_SetConfig+0x5a6>
 800deb8:	2380      	movs	r3, #128	; 0x80
 800deba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800debe:	e06e      	b.n	800df9e <UART_SetConfig+0x5a6>
 800dec0:	697b      	ldr	r3, [r7, #20]
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	4a75      	ldr	r2, [pc, #468]	; (800e09c <UART_SetConfig+0x6a4>)
 800dec6:	4293      	cmp	r3, r2
 800dec8:	d130      	bne.n	800df2c <UART_SetConfig+0x534>
 800deca:	4b72      	ldr	r3, [pc, #456]	; (800e094 <UART_SetConfig+0x69c>)
 800decc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dece:	f003 0307 	and.w	r3, r3, #7
 800ded2:	2b05      	cmp	r3, #5
 800ded4:	d826      	bhi.n	800df24 <UART_SetConfig+0x52c>
 800ded6:	a201      	add	r2, pc, #4	; (adr r2, 800dedc <UART_SetConfig+0x4e4>)
 800ded8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dedc:	0800def5 	.word	0x0800def5
 800dee0:	0800defd 	.word	0x0800defd
 800dee4:	0800df05 	.word	0x0800df05
 800dee8:	0800df0d 	.word	0x0800df0d
 800deec:	0800df15 	.word	0x0800df15
 800def0:	0800df1d 	.word	0x0800df1d
 800def4:	2300      	movs	r3, #0
 800def6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800defa:	e050      	b.n	800df9e <UART_SetConfig+0x5a6>
 800defc:	2304      	movs	r3, #4
 800defe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df02:	e04c      	b.n	800df9e <UART_SetConfig+0x5a6>
 800df04:	2308      	movs	r3, #8
 800df06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df0a:	e048      	b.n	800df9e <UART_SetConfig+0x5a6>
 800df0c:	2310      	movs	r3, #16
 800df0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df12:	e044      	b.n	800df9e <UART_SetConfig+0x5a6>
 800df14:	2320      	movs	r3, #32
 800df16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df1a:	e040      	b.n	800df9e <UART_SetConfig+0x5a6>
 800df1c:	2340      	movs	r3, #64	; 0x40
 800df1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df22:	e03c      	b.n	800df9e <UART_SetConfig+0x5a6>
 800df24:	2380      	movs	r3, #128	; 0x80
 800df26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df2a:	e038      	b.n	800df9e <UART_SetConfig+0x5a6>
 800df2c:	697b      	ldr	r3, [r7, #20]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	4a5b      	ldr	r2, [pc, #364]	; (800e0a0 <UART_SetConfig+0x6a8>)
 800df32:	4293      	cmp	r3, r2
 800df34:	d130      	bne.n	800df98 <UART_SetConfig+0x5a0>
 800df36:	4b57      	ldr	r3, [pc, #348]	; (800e094 <UART_SetConfig+0x69c>)
 800df38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800df3a:	f003 0307 	and.w	r3, r3, #7
 800df3e:	2b05      	cmp	r3, #5
 800df40:	d826      	bhi.n	800df90 <UART_SetConfig+0x598>
 800df42:	a201      	add	r2, pc, #4	; (adr r2, 800df48 <UART_SetConfig+0x550>)
 800df44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df48:	0800df61 	.word	0x0800df61
 800df4c:	0800df69 	.word	0x0800df69
 800df50:	0800df71 	.word	0x0800df71
 800df54:	0800df79 	.word	0x0800df79
 800df58:	0800df81 	.word	0x0800df81
 800df5c:	0800df89 	.word	0x0800df89
 800df60:	2302      	movs	r3, #2
 800df62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df66:	e01a      	b.n	800df9e <UART_SetConfig+0x5a6>
 800df68:	2304      	movs	r3, #4
 800df6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df6e:	e016      	b.n	800df9e <UART_SetConfig+0x5a6>
 800df70:	2308      	movs	r3, #8
 800df72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df76:	e012      	b.n	800df9e <UART_SetConfig+0x5a6>
 800df78:	2310      	movs	r3, #16
 800df7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df7e:	e00e      	b.n	800df9e <UART_SetConfig+0x5a6>
 800df80:	2320      	movs	r3, #32
 800df82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df86:	e00a      	b.n	800df9e <UART_SetConfig+0x5a6>
 800df88:	2340      	movs	r3, #64	; 0x40
 800df8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df8e:	e006      	b.n	800df9e <UART_SetConfig+0x5a6>
 800df90:	2380      	movs	r3, #128	; 0x80
 800df92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df96:	e002      	b.n	800df9e <UART_SetConfig+0x5a6>
 800df98:	2380      	movs	r3, #128	; 0x80
 800df9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800df9e:	697b      	ldr	r3, [r7, #20]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	4a3f      	ldr	r2, [pc, #252]	; (800e0a0 <UART_SetConfig+0x6a8>)
 800dfa4:	4293      	cmp	r3, r2
 800dfa6:	f040 80f8 	bne.w	800e19a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800dfaa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800dfae:	2b20      	cmp	r3, #32
 800dfb0:	dc46      	bgt.n	800e040 <UART_SetConfig+0x648>
 800dfb2:	2b02      	cmp	r3, #2
 800dfb4:	f2c0 8082 	blt.w	800e0bc <UART_SetConfig+0x6c4>
 800dfb8:	3b02      	subs	r3, #2
 800dfba:	2b1e      	cmp	r3, #30
 800dfbc:	d87e      	bhi.n	800e0bc <UART_SetConfig+0x6c4>
 800dfbe:	a201      	add	r2, pc, #4	; (adr r2, 800dfc4 <UART_SetConfig+0x5cc>)
 800dfc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfc4:	0800e047 	.word	0x0800e047
 800dfc8:	0800e0bd 	.word	0x0800e0bd
 800dfcc:	0800e04f 	.word	0x0800e04f
 800dfd0:	0800e0bd 	.word	0x0800e0bd
 800dfd4:	0800e0bd 	.word	0x0800e0bd
 800dfd8:	0800e0bd 	.word	0x0800e0bd
 800dfdc:	0800e05f 	.word	0x0800e05f
 800dfe0:	0800e0bd 	.word	0x0800e0bd
 800dfe4:	0800e0bd 	.word	0x0800e0bd
 800dfe8:	0800e0bd 	.word	0x0800e0bd
 800dfec:	0800e0bd 	.word	0x0800e0bd
 800dff0:	0800e0bd 	.word	0x0800e0bd
 800dff4:	0800e0bd 	.word	0x0800e0bd
 800dff8:	0800e0bd 	.word	0x0800e0bd
 800dffc:	0800e06f 	.word	0x0800e06f
 800e000:	0800e0bd 	.word	0x0800e0bd
 800e004:	0800e0bd 	.word	0x0800e0bd
 800e008:	0800e0bd 	.word	0x0800e0bd
 800e00c:	0800e0bd 	.word	0x0800e0bd
 800e010:	0800e0bd 	.word	0x0800e0bd
 800e014:	0800e0bd 	.word	0x0800e0bd
 800e018:	0800e0bd 	.word	0x0800e0bd
 800e01c:	0800e0bd 	.word	0x0800e0bd
 800e020:	0800e0bd 	.word	0x0800e0bd
 800e024:	0800e0bd 	.word	0x0800e0bd
 800e028:	0800e0bd 	.word	0x0800e0bd
 800e02c:	0800e0bd 	.word	0x0800e0bd
 800e030:	0800e0bd 	.word	0x0800e0bd
 800e034:	0800e0bd 	.word	0x0800e0bd
 800e038:	0800e0bd 	.word	0x0800e0bd
 800e03c:	0800e0af 	.word	0x0800e0af
 800e040:	2b40      	cmp	r3, #64	; 0x40
 800e042:	d037      	beq.n	800e0b4 <UART_SetConfig+0x6bc>
 800e044:	e03a      	b.n	800e0bc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e046:	f7fc fceb 	bl	800aa20 <HAL_RCCEx_GetD3PCLK1Freq>
 800e04a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e04c:	e03c      	b.n	800e0c8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e04e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e052:	4618      	mov	r0, r3
 800e054:	f7fc fcfa 	bl	800aa4c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e05a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e05c:	e034      	b.n	800e0c8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e05e:	f107 0318 	add.w	r3, r7, #24
 800e062:	4618      	mov	r0, r3
 800e064:	f7fc fe46 	bl	800acf4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e068:	69fb      	ldr	r3, [r7, #28]
 800e06a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e06c:	e02c      	b.n	800e0c8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e06e:	4b09      	ldr	r3, [pc, #36]	; (800e094 <UART_SetConfig+0x69c>)
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	f003 0320 	and.w	r3, r3, #32
 800e076:	2b00      	cmp	r3, #0
 800e078:	d016      	beq.n	800e0a8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e07a:	4b06      	ldr	r3, [pc, #24]	; (800e094 <UART_SetConfig+0x69c>)
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	08db      	lsrs	r3, r3, #3
 800e080:	f003 0303 	and.w	r3, r3, #3
 800e084:	4a07      	ldr	r2, [pc, #28]	; (800e0a4 <UART_SetConfig+0x6ac>)
 800e086:	fa22 f303 	lsr.w	r3, r2, r3
 800e08a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e08c:	e01c      	b.n	800e0c8 <UART_SetConfig+0x6d0>
 800e08e:	bf00      	nop
 800e090:	40011400 	.word	0x40011400
 800e094:	58024400 	.word	0x58024400
 800e098:	40007800 	.word	0x40007800
 800e09c:	40007c00 	.word	0x40007c00
 800e0a0:	58000c00 	.word	0x58000c00
 800e0a4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800e0a8:	4b9d      	ldr	r3, [pc, #628]	; (800e320 <UART_SetConfig+0x928>)
 800e0aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e0ac:	e00c      	b.n	800e0c8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e0ae:	4b9d      	ldr	r3, [pc, #628]	; (800e324 <UART_SetConfig+0x92c>)
 800e0b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e0b2:	e009      	b.n	800e0c8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e0b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e0b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e0ba:	e005      	b.n	800e0c8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800e0bc:	2300      	movs	r3, #0
 800e0be:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e0c0:	2301      	movs	r3, #1
 800e0c2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e0c6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e0c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	f000 81de 	beq.w	800e48c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e0d0:	697b      	ldr	r3, [r7, #20]
 800e0d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0d4:	4a94      	ldr	r2, [pc, #592]	; (800e328 <UART_SetConfig+0x930>)
 800e0d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e0da:	461a      	mov	r2, r3
 800e0dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0de:	fbb3 f3f2 	udiv	r3, r3, r2
 800e0e2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e0e4:	697b      	ldr	r3, [r7, #20]
 800e0e6:	685a      	ldr	r2, [r3, #4]
 800e0e8:	4613      	mov	r3, r2
 800e0ea:	005b      	lsls	r3, r3, #1
 800e0ec:	4413      	add	r3, r2
 800e0ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e0f0:	429a      	cmp	r2, r3
 800e0f2:	d305      	bcc.n	800e100 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e0f4:	697b      	ldr	r3, [r7, #20]
 800e0f6:	685b      	ldr	r3, [r3, #4]
 800e0f8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e0fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e0fc:	429a      	cmp	r2, r3
 800e0fe:	d903      	bls.n	800e108 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800e100:	2301      	movs	r3, #1
 800e102:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e106:	e1c1      	b.n	800e48c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e108:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e10a:	2200      	movs	r2, #0
 800e10c:	60bb      	str	r3, [r7, #8]
 800e10e:	60fa      	str	r2, [r7, #12]
 800e110:	697b      	ldr	r3, [r7, #20]
 800e112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e114:	4a84      	ldr	r2, [pc, #528]	; (800e328 <UART_SetConfig+0x930>)
 800e116:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e11a:	b29b      	uxth	r3, r3
 800e11c:	2200      	movs	r2, #0
 800e11e:	603b      	str	r3, [r7, #0]
 800e120:	607a      	str	r2, [r7, #4]
 800e122:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e126:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e12a:	f7f2 f929 	bl	8000380 <__aeabi_uldivmod>
 800e12e:	4602      	mov	r2, r0
 800e130:	460b      	mov	r3, r1
 800e132:	4610      	mov	r0, r2
 800e134:	4619      	mov	r1, r3
 800e136:	f04f 0200 	mov.w	r2, #0
 800e13a:	f04f 0300 	mov.w	r3, #0
 800e13e:	020b      	lsls	r3, r1, #8
 800e140:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e144:	0202      	lsls	r2, r0, #8
 800e146:	6979      	ldr	r1, [r7, #20]
 800e148:	6849      	ldr	r1, [r1, #4]
 800e14a:	0849      	lsrs	r1, r1, #1
 800e14c:	2000      	movs	r0, #0
 800e14e:	460c      	mov	r4, r1
 800e150:	4605      	mov	r5, r0
 800e152:	eb12 0804 	adds.w	r8, r2, r4
 800e156:	eb43 0905 	adc.w	r9, r3, r5
 800e15a:	697b      	ldr	r3, [r7, #20]
 800e15c:	685b      	ldr	r3, [r3, #4]
 800e15e:	2200      	movs	r2, #0
 800e160:	469a      	mov	sl, r3
 800e162:	4693      	mov	fp, r2
 800e164:	4652      	mov	r2, sl
 800e166:	465b      	mov	r3, fp
 800e168:	4640      	mov	r0, r8
 800e16a:	4649      	mov	r1, r9
 800e16c:	f7f2 f908 	bl	8000380 <__aeabi_uldivmod>
 800e170:	4602      	mov	r2, r0
 800e172:	460b      	mov	r3, r1
 800e174:	4613      	mov	r3, r2
 800e176:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e17a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e17e:	d308      	bcc.n	800e192 <UART_SetConfig+0x79a>
 800e180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e182:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e186:	d204      	bcs.n	800e192 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800e188:	697b      	ldr	r3, [r7, #20]
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e18e:	60da      	str	r2, [r3, #12]
 800e190:	e17c      	b.n	800e48c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800e192:	2301      	movs	r3, #1
 800e194:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e198:	e178      	b.n	800e48c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e19a:	697b      	ldr	r3, [r7, #20]
 800e19c:	69db      	ldr	r3, [r3, #28]
 800e19e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e1a2:	f040 80c5 	bne.w	800e330 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800e1a6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e1aa:	2b20      	cmp	r3, #32
 800e1ac:	dc48      	bgt.n	800e240 <UART_SetConfig+0x848>
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	db7b      	blt.n	800e2aa <UART_SetConfig+0x8b2>
 800e1b2:	2b20      	cmp	r3, #32
 800e1b4:	d879      	bhi.n	800e2aa <UART_SetConfig+0x8b2>
 800e1b6:	a201      	add	r2, pc, #4	; (adr r2, 800e1bc <UART_SetConfig+0x7c4>)
 800e1b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1bc:	0800e247 	.word	0x0800e247
 800e1c0:	0800e24f 	.word	0x0800e24f
 800e1c4:	0800e2ab 	.word	0x0800e2ab
 800e1c8:	0800e2ab 	.word	0x0800e2ab
 800e1cc:	0800e257 	.word	0x0800e257
 800e1d0:	0800e2ab 	.word	0x0800e2ab
 800e1d4:	0800e2ab 	.word	0x0800e2ab
 800e1d8:	0800e2ab 	.word	0x0800e2ab
 800e1dc:	0800e267 	.word	0x0800e267
 800e1e0:	0800e2ab 	.word	0x0800e2ab
 800e1e4:	0800e2ab 	.word	0x0800e2ab
 800e1e8:	0800e2ab 	.word	0x0800e2ab
 800e1ec:	0800e2ab 	.word	0x0800e2ab
 800e1f0:	0800e2ab 	.word	0x0800e2ab
 800e1f4:	0800e2ab 	.word	0x0800e2ab
 800e1f8:	0800e2ab 	.word	0x0800e2ab
 800e1fc:	0800e277 	.word	0x0800e277
 800e200:	0800e2ab 	.word	0x0800e2ab
 800e204:	0800e2ab 	.word	0x0800e2ab
 800e208:	0800e2ab 	.word	0x0800e2ab
 800e20c:	0800e2ab 	.word	0x0800e2ab
 800e210:	0800e2ab 	.word	0x0800e2ab
 800e214:	0800e2ab 	.word	0x0800e2ab
 800e218:	0800e2ab 	.word	0x0800e2ab
 800e21c:	0800e2ab 	.word	0x0800e2ab
 800e220:	0800e2ab 	.word	0x0800e2ab
 800e224:	0800e2ab 	.word	0x0800e2ab
 800e228:	0800e2ab 	.word	0x0800e2ab
 800e22c:	0800e2ab 	.word	0x0800e2ab
 800e230:	0800e2ab 	.word	0x0800e2ab
 800e234:	0800e2ab 	.word	0x0800e2ab
 800e238:	0800e2ab 	.word	0x0800e2ab
 800e23c:	0800e29d 	.word	0x0800e29d
 800e240:	2b40      	cmp	r3, #64	; 0x40
 800e242:	d02e      	beq.n	800e2a2 <UART_SetConfig+0x8aa>
 800e244:	e031      	b.n	800e2aa <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e246:	f7fa fbf3 	bl	8008a30 <HAL_RCC_GetPCLK1Freq>
 800e24a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e24c:	e033      	b.n	800e2b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e24e:	f7fa fc05 	bl	8008a5c <HAL_RCC_GetPCLK2Freq>
 800e252:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e254:	e02f      	b.n	800e2b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e256:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e25a:	4618      	mov	r0, r3
 800e25c:	f7fc fbf6 	bl	800aa4c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e262:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e264:	e027      	b.n	800e2b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e266:	f107 0318 	add.w	r3, r7, #24
 800e26a:	4618      	mov	r0, r3
 800e26c:	f7fc fd42 	bl	800acf4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e270:	69fb      	ldr	r3, [r7, #28]
 800e272:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e274:	e01f      	b.n	800e2b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e276:	4b2d      	ldr	r3, [pc, #180]	; (800e32c <UART_SetConfig+0x934>)
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	f003 0320 	and.w	r3, r3, #32
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d009      	beq.n	800e296 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e282:	4b2a      	ldr	r3, [pc, #168]	; (800e32c <UART_SetConfig+0x934>)
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	08db      	lsrs	r3, r3, #3
 800e288:	f003 0303 	and.w	r3, r3, #3
 800e28c:	4a24      	ldr	r2, [pc, #144]	; (800e320 <UART_SetConfig+0x928>)
 800e28e:	fa22 f303 	lsr.w	r3, r2, r3
 800e292:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e294:	e00f      	b.n	800e2b6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800e296:	4b22      	ldr	r3, [pc, #136]	; (800e320 <UART_SetConfig+0x928>)
 800e298:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e29a:	e00c      	b.n	800e2b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e29c:	4b21      	ldr	r3, [pc, #132]	; (800e324 <UART_SetConfig+0x92c>)
 800e29e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e2a0:	e009      	b.n	800e2b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e2a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e2a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e2a8:	e005      	b.n	800e2b6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800e2aa:	2300      	movs	r3, #0
 800e2ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e2ae:	2301      	movs	r3, #1
 800e2b0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e2b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e2b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	f000 80e7 	beq.w	800e48c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e2be:	697b      	ldr	r3, [r7, #20]
 800e2c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2c2:	4a19      	ldr	r2, [pc, #100]	; (800e328 <UART_SetConfig+0x930>)
 800e2c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e2c8:	461a      	mov	r2, r3
 800e2ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2cc:	fbb3 f3f2 	udiv	r3, r3, r2
 800e2d0:	005a      	lsls	r2, r3, #1
 800e2d2:	697b      	ldr	r3, [r7, #20]
 800e2d4:	685b      	ldr	r3, [r3, #4]
 800e2d6:	085b      	lsrs	r3, r3, #1
 800e2d8:	441a      	add	r2, r3
 800e2da:	697b      	ldr	r3, [r7, #20]
 800e2dc:	685b      	ldr	r3, [r3, #4]
 800e2de:	fbb2 f3f3 	udiv	r3, r2, r3
 800e2e2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e2e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2e6:	2b0f      	cmp	r3, #15
 800e2e8:	d916      	bls.n	800e318 <UART_SetConfig+0x920>
 800e2ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e2f0:	d212      	bcs.n	800e318 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e2f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2f4:	b29b      	uxth	r3, r3
 800e2f6:	f023 030f 	bic.w	r3, r3, #15
 800e2fa:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e2fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2fe:	085b      	lsrs	r3, r3, #1
 800e300:	b29b      	uxth	r3, r3
 800e302:	f003 0307 	and.w	r3, r3, #7
 800e306:	b29a      	uxth	r2, r3
 800e308:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e30a:	4313      	orrs	r3, r2
 800e30c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800e30e:	697b      	ldr	r3, [r7, #20]
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e314:	60da      	str	r2, [r3, #12]
 800e316:	e0b9      	b.n	800e48c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e318:	2301      	movs	r3, #1
 800e31a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e31e:	e0b5      	b.n	800e48c <UART_SetConfig+0xa94>
 800e320:	03d09000 	.word	0x03d09000
 800e324:	003d0900 	.word	0x003d0900
 800e328:	0801434c 	.word	0x0801434c
 800e32c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800e330:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e334:	2b20      	cmp	r3, #32
 800e336:	dc49      	bgt.n	800e3cc <UART_SetConfig+0x9d4>
 800e338:	2b00      	cmp	r3, #0
 800e33a:	db7c      	blt.n	800e436 <UART_SetConfig+0xa3e>
 800e33c:	2b20      	cmp	r3, #32
 800e33e:	d87a      	bhi.n	800e436 <UART_SetConfig+0xa3e>
 800e340:	a201      	add	r2, pc, #4	; (adr r2, 800e348 <UART_SetConfig+0x950>)
 800e342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e346:	bf00      	nop
 800e348:	0800e3d3 	.word	0x0800e3d3
 800e34c:	0800e3db 	.word	0x0800e3db
 800e350:	0800e437 	.word	0x0800e437
 800e354:	0800e437 	.word	0x0800e437
 800e358:	0800e3e3 	.word	0x0800e3e3
 800e35c:	0800e437 	.word	0x0800e437
 800e360:	0800e437 	.word	0x0800e437
 800e364:	0800e437 	.word	0x0800e437
 800e368:	0800e3f3 	.word	0x0800e3f3
 800e36c:	0800e437 	.word	0x0800e437
 800e370:	0800e437 	.word	0x0800e437
 800e374:	0800e437 	.word	0x0800e437
 800e378:	0800e437 	.word	0x0800e437
 800e37c:	0800e437 	.word	0x0800e437
 800e380:	0800e437 	.word	0x0800e437
 800e384:	0800e437 	.word	0x0800e437
 800e388:	0800e403 	.word	0x0800e403
 800e38c:	0800e437 	.word	0x0800e437
 800e390:	0800e437 	.word	0x0800e437
 800e394:	0800e437 	.word	0x0800e437
 800e398:	0800e437 	.word	0x0800e437
 800e39c:	0800e437 	.word	0x0800e437
 800e3a0:	0800e437 	.word	0x0800e437
 800e3a4:	0800e437 	.word	0x0800e437
 800e3a8:	0800e437 	.word	0x0800e437
 800e3ac:	0800e437 	.word	0x0800e437
 800e3b0:	0800e437 	.word	0x0800e437
 800e3b4:	0800e437 	.word	0x0800e437
 800e3b8:	0800e437 	.word	0x0800e437
 800e3bc:	0800e437 	.word	0x0800e437
 800e3c0:	0800e437 	.word	0x0800e437
 800e3c4:	0800e437 	.word	0x0800e437
 800e3c8:	0800e429 	.word	0x0800e429
 800e3cc:	2b40      	cmp	r3, #64	; 0x40
 800e3ce:	d02e      	beq.n	800e42e <UART_SetConfig+0xa36>
 800e3d0:	e031      	b.n	800e436 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e3d2:	f7fa fb2d 	bl	8008a30 <HAL_RCC_GetPCLK1Freq>
 800e3d6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e3d8:	e033      	b.n	800e442 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e3da:	f7fa fb3f 	bl	8008a5c <HAL_RCC_GetPCLK2Freq>
 800e3de:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e3e0:	e02f      	b.n	800e442 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e3e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	f7fc fb30 	bl	800aa4c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e3ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e3f0:	e027      	b.n	800e442 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e3f2:	f107 0318 	add.w	r3, r7, #24
 800e3f6:	4618      	mov	r0, r3
 800e3f8:	f7fc fc7c 	bl	800acf4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e3fc:	69fb      	ldr	r3, [r7, #28]
 800e3fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e400:	e01f      	b.n	800e442 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e402:	4b2d      	ldr	r3, [pc, #180]	; (800e4b8 <UART_SetConfig+0xac0>)
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	f003 0320 	and.w	r3, r3, #32
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d009      	beq.n	800e422 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e40e:	4b2a      	ldr	r3, [pc, #168]	; (800e4b8 <UART_SetConfig+0xac0>)
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	08db      	lsrs	r3, r3, #3
 800e414:	f003 0303 	and.w	r3, r3, #3
 800e418:	4a28      	ldr	r2, [pc, #160]	; (800e4bc <UART_SetConfig+0xac4>)
 800e41a:	fa22 f303 	lsr.w	r3, r2, r3
 800e41e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e420:	e00f      	b.n	800e442 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800e422:	4b26      	ldr	r3, [pc, #152]	; (800e4bc <UART_SetConfig+0xac4>)
 800e424:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e426:	e00c      	b.n	800e442 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e428:	4b25      	ldr	r3, [pc, #148]	; (800e4c0 <UART_SetConfig+0xac8>)
 800e42a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e42c:	e009      	b.n	800e442 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e42e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e432:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e434:	e005      	b.n	800e442 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800e436:	2300      	movs	r3, #0
 800e438:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e43a:	2301      	movs	r3, #1
 800e43c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e440:	bf00      	nop
    }

    if (pclk != 0U)
 800e442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e444:	2b00      	cmp	r3, #0
 800e446:	d021      	beq.n	800e48c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e448:	697b      	ldr	r3, [r7, #20]
 800e44a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e44c:	4a1d      	ldr	r2, [pc, #116]	; (800e4c4 <UART_SetConfig+0xacc>)
 800e44e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e452:	461a      	mov	r2, r3
 800e454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e456:	fbb3 f2f2 	udiv	r2, r3, r2
 800e45a:	697b      	ldr	r3, [r7, #20]
 800e45c:	685b      	ldr	r3, [r3, #4]
 800e45e:	085b      	lsrs	r3, r3, #1
 800e460:	441a      	add	r2, r3
 800e462:	697b      	ldr	r3, [r7, #20]
 800e464:	685b      	ldr	r3, [r3, #4]
 800e466:	fbb2 f3f3 	udiv	r3, r2, r3
 800e46a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e46c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e46e:	2b0f      	cmp	r3, #15
 800e470:	d909      	bls.n	800e486 <UART_SetConfig+0xa8e>
 800e472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e474:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e478:	d205      	bcs.n	800e486 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e47a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e47c:	b29a      	uxth	r2, r3
 800e47e:	697b      	ldr	r3, [r7, #20]
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	60da      	str	r2, [r3, #12]
 800e484:	e002      	b.n	800e48c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e486:	2301      	movs	r3, #1
 800e488:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e48c:	697b      	ldr	r3, [r7, #20]
 800e48e:	2201      	movs	r2, #1
 800e490:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e494:	697b      	ldr	r3, [r7, #20]
 800e496:	2201      	movs	r2, #1
 800e498:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e49c:	697b      	ldr	r3, [r7, #20]
 800e49e:	2200      	movs	r2, #0
 800e4a0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800e4a2:	697b      	ldr	r3, [r7, #20]
 800e4a4:	2200      	movs	r2, #0
 800e4a6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800e4a8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800e4ac:	4618      	mov	r0, r3
 800e4ae:	3748      	adds	r7, #72	; 0x48
 800e4b0:	46bd      	mov	sp, r7
 800e4b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e4b6:	bf00      	nop
 800e4b8:	58024400 	.word	0x58024400
 800e4bc:	03d09000 	.word	0x03d09000
 800e4c0:	003d0900 	.word	0x003d0900
 800e4c4:	0801434c 	.word	0x0801434c

0800e4c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e4c8:	b480      	push	{r7}
 800e4ca:	b083      	sub	sp, #12
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4d4:	f003 0308 	and.w	r3, r3, #8
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d00a      	beq.n	800e4f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	685b      	ldr	r3, [r3, #4]
 800e4e2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	430a      	orrs	r2, r1
 800e4f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4f6:	f003 0301 	and.w	r3, r3, #1
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d00a      	beq.n	800e514 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	685b      	ldr	r3, [r3, #4]
 800e504:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	430a      	orrs	r2, r1
 800e512:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e518:	f003 0302 	and.w	r3, r3, #2
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d00a      	beq.n	800e536 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	685b      	ldr	r3, [r3, #4]
 800e526:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	430a      	orrs	r2, r1
 800e534:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e53a:	f003 0304 	and.w	r3, r3, #4
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d00a      	beq.n	800e558 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	685b      	ldr	r3, [r3, #4]
 800e548:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	430a      	orrs	r2, r1
 800e556:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e55c:	f003 0310 	and.w	r3, r3, #16
 800e560:	2b00      	cmp	r3, #0
 800e562:	d00a      	beq.n	800e57a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	689b      	ldr	r3, [r3, #8]
 800e56a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	430a      	orrs	r2, r1
 800e578:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e57e:	f003 0320 	and.w	r3, r3, #32
 800e582:	2b00      	cmp	r3, #0
 800e584:	d00a      	beq.n	800e59c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	689b      	ldr	r3, [r3, #8]
 800e58c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	430a      	orrs	r2, r1
 800e59a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d01a      	beq.n	800e5de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	685b      	ldr	r3, [r3, #4]
 800e5ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	430a      	orrs	r2, r1
 800e5bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e5c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e5c6:	d10a      	bne.n	800e5de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	685b      	ldr	r3, [r3, #4]
 800e5ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	430a      	orrs	r2, r1
 800e5dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d00a      	beq.n	800e600 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	685b      	ldr	r3, [r3, #4]
 800e5f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	430a      	orrs	r2, r1
 800e5fe:	605a      	str	r2, [r3, #4]
  }
}
 800e600:	bf00      	nop
 800e602:	370c      	adds	r7, #12
 800e604:	46bd      	mov	sp, r7
 800e606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e60a:	4770      	bx	lr

0800e60c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e60c:	b580      	push	{r7, lr}
 800e60e:	b098      	sub	sp, #96	; 0x60
 800e610:	af02      	add	r7, sp, #8
 800e612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	2200      	movs	r2, #0
 800e618:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e61c:	f7f4 f9ea 	bl	80029f4 <HAL_GetTick>
 800e620:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	f003 0308 	and.w	r3, r3, #8
 800e62c:	2b08      	cmp	r3, #8
 800e62e:	d12f      	bne.n	800e690 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e630:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e634:	9300      	str	r3, [sp, #0]
 800e636:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e638:	2200      	movs	r2, #0
 800e63a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e63e:	6878      	ldr	r0, [r7, #4]
 800e640:	f000 f88e 	bl	800e760 <UART_WaitOnFlagUntilTimeout>
 800e644:	4603      	mov	r3, r0
 800e646:	2b00      	cmp	r3, #0
 800e648:	d022      	beq.n	800e690 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e652:	e853 3f00 	ldrex	r3, [r3]
 800e656:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e65a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e65e:	653b      	str	r3, [r7, #80]	; 0x50
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	461a      	mov	r2, r3
 800e666:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e668:	647b      	str	r3, [r7, #68]	; 0x44
 800e66a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e66c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e66e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e670:	e841 2300 	strex	r3, r2, [r1]
 800e674:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e676:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d1e6      	bne.n	800e64a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	2220      	movs	r2, #32
 800e680:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	2200      	movs	r2, #0
 800e688:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e68c:	2303      	movs	r3, #3
 800e68e:	e063      	b.n	800e758 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	f003 0304 	and.w	r3, r3, #4
 800e69a:	2b04      	cmp	r3, #4
 800e69c:	d149      	bne.n	800e732 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e69e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e6a2:	9300      	str	r3, [sp, #0]
 800e6a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e6a6:	2200      	movs	r2, #0
 800e6a8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e6ac:	6878      	ldr	r0, [r7, #4]
 800e6ae:	f000 f857 	bl	800e760 <UART_WaitOnFlagUntilTimeout>
 800e6b2:	4603      	mov	r3, r0
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d03c      	beq.n	800e732 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6c0:	e853 3f00 	ldrex	r3, [r3]
 800e6c4:	623b      	str	r3, [r7, #32]
   return(result);
 800e6c6:	6a3b      	ldr	r3, [r7, #32]
 800e6c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e6cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	461a      	mov	r2, r3
 800e6d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e6d6:	633b      	str	r3, [r7, #48]	; 0x30
 800e6d8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e6dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e6de:	e841 2300 	strex	r3, r2, [r1]
 800e6e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e6e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d1e6      	bne.n	800e6b8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	3308      	adds	r3, #8
 800e6f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6f2:	693b      	ldr	r3, [r7, #16]
 800e6f4:	e853 3f00 	ldrex	r3, [r3]
 800e6f8:	60fb      	str	r3, [r7, #12]
   return(result);
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	f023 0301 	bic.w	r3, r3, #1
 800e700:	64bb      	str	r3, [r7, #72]	; 0x48
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	3308      	adds	r3, #8
 800e708:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e70a:	61fa      	str	r2, [r7, #28]
 800e70c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e70e:	69b9      	ldr	r1, [r7, #24]
 800e710:	69fa      	ldr	r2, [r7, #28]
 800e712:	e841 2300 	strex	r3, r2, [r1]
 800e716:	617b      	str	r3, [r7, #20]
   return(result);
 800e718:	697b      	ldr	r3, [r7, #20]
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d1e5      	bne.n	800e6ea <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	2220      	movs	r2, #32
 800e722:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	2200      	movs	r2, #0
 800e72a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e72e:	2303      	movs	r3, #3
 800e730:	e012      	b.n	800e758 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	2220      	movs	r2, #32
 800e736:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	2220      	movs	r2, #32
 800e73e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	2200      	movs	r2, #0
 800e746:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	2200      	movs	r2, #0
 800e74c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	2200      	movs	r2, #0
 800e752:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e756:	2300      	movs	r3, #0
}
 800e758:	4618      	mov	r0, r3
 800e75a:	3758      	adds	r7, #88	; 0x58
 800e75c:	46bd      	mov	sp, r7
 800e75e:	bd80      	pop	{r7, pc}

0800e760 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e760:	b580      	push	{r7, lr}
 800e762:	b084      	sub	sp, #16
 800e764:	af00      	add	r7, sp, #0
 800e766:	60f8      	str	r0, [r7, #12]
 800e768:	60b9      	str	r1, [r7, #8]
 800e76a:	603b      	str	r3, [r7, #0]
 800e76c:	4613      	mov	r3, r2
 800e76e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e770:	e04f      	b.n	800e812 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e772:	69bb      	ldr	r3, [r7, #24]
 800e774:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e778:	d04b      	beq.n	800e812 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e77a:	f7f4 f93b 	bl	80029f4 <HAL_GetTick>
 800e77e:	4602      	mov	r2, r0
 800e780:	683b      	ldr	r3, [r7, #0]
 800e782:	1ad3      	subs	r3, r2, r3
 800e784:	69ba      	ldr	r2, [r7, #24]
 800e786:	429a      	cmp	r2, r3
 800e788:	d302      	bcc.n	800e790 <UART_WaitOnFlagUntilTimeout+0x30>
 800e78a:	69bb      	ldr	r3, [r7, #24]
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d101      	bne.n	800e794 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e790:	2303      	movs	r3, #3
 800e792:	e04e      	b.n	800e832 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	f003 0304 	and.w	r3, r3, #4
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d037      	beq.n	800e812 <UART_WaitOnFlagUntilTimeout+0xb2>
 800e7a2:	68bb      	ldr	r3, [r7, #8]
 800e7a4:	2b80      	cmp	r3, #128	; 0x80
 800e7a6:	d034      	beq.n	800e812 <UART_WaitOnFlagUntilTimeout+0xb2>
 800e7a8:	68bb      	ldr	r3, [r7, #8]
 800e7aa:	2b40      	cmp	r3, #64	; 0x40
 800e7ac:	d031      	beq.n	800e812 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	69db      	ldr	r3, [r3, #28]
 800e7b4:	f003 0308 	and.w	r3, r3, #8
 800e7b8:	2b08      	cmp	r3, #8
 800e7ba:	d110      	bne.n	800e7de <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	2208      	movs	r2, #8
 800e7c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e7c4:	68f8      	ldr	r0, [r7, #12]
 800e7c6:	f000 f95b 	bl	800ea80 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	2208      	movs	r2, #8
 800e7ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	2200      	movs	r2, #0
 800e7d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800e7da:	2301      	movs	r3, #1
 800e7dc:	e029      	b.n	800e832 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	69db      	ldr	r3, [r3, #28]
 800e7e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e7e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e7ec:	d111      	bne.n	800e812 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e7f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e7f8:	68f8      	ldr	r0, [r7, #12]
 800e7fa:	f000 f941 	bl	800ea80 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	2220      	movs	r2, #32
 800e802:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	2200      	movs	r2, #0
 800e80a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800e80e:	2303      	movs	r3, #3
 800e810:	e00f      	b.n	800e832 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	69da      	ldr	r2, [r3, #28]
 800e818:	68bb      	ldr	r3, [r7, #8]
 800e81a:	4013      	ands	r3, r2
 800e81c:	68ba      	ldr	r2, [r7, #8]
 800e81e:	429a      	cmp	r2, r3
 800e820:	bf0c      	ite	eq
 800e822:	2301      	moveq	r3, #1
 800e824:	2300      	movne	r3, #0
 800e826:	b2db      	uxtb	r3, r3
 800e828:	461a      	mov	r2, r3
 800e82a:	79fb      	ldrb	r3, [r7, #7]
 800e82c:	429a      	cmp	r2, r3
 800e82e:	d0a0      	beq.n	800e772 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e830:	2300      	movs	r3, #0
}
 800e832:	4618      	mov	r0, r3
 800e834:	3710      	adds	r7, #16
 800e836:	46bd      	mov	sp, r7
 800e838:	bd80      	pop	{r7, pc}
	...

0800e83c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e83c:	b480      	push	{r7}
 800e83e:	b0a3      	sub	sp, #140	; 0x8c
 800e840:	af00      	add	r7, sp, #0
 800e842:	60f8      	str	r0, [r7, #12]
 800e844:	60b9      	str	r1, [r7, #8]
 800e846:	4613      	mov	r3, r2
 800e848:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	68ba      	ldr	r2, [r7, #8]
 800e84e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	88fa      	ldrh	r2, [r7, #6]
 800e854:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	88fa      	ldrh	r2, [r7, #6]
 800e85c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	2200      	movs	r2, #0
 800e864:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	689b      	ldr	r3, [r3, #8]
 800e86a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e86e:	d10e      	bne.n	800e88e <UART_Start_Receive_IT+0x52>
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	691b      	ldr	r3, [r3, #16]
 800e874:	2b00      	cmp	r3, #0
 800e876:	d105      	bne.n	800e884 <UART_Start_Receive_IT+0x48>
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800e87e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e882:	e02d      	b.n	800e8e0 <UART_Start_Receive_IT+0xa4>
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	22ff      	movs	r2, #255	; 0xff
 800e888:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e88c:	e028      	b.n	800e8e0 <UART_Start_Receive_IT+0xa4>
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	689b      	ldr	r3, [r3, #8]
 800e892:	2b00      	cmp	r3, #0
 800e894:	d10d      	bne.n	800e8b2 <UART_Start_Receive_IT+0x76>
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	691b      	ldr	r3, [r3, #16]
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d104      	bne.n	800e8a8 <UART_Start_Receive_IT+0x6c>
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	22ff      	movs	r2, #255	; 0xff
 800e8a2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e8a6:	e01b      	b.n	800e8e0 <UART_Start_Receive_IT+0xa4>
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	227f      	movs	r2, #127	; 0x7f
 800e8ac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e8b0:	e016      	b.n	800e8e0 <UART_Start_Receive_IT+0xa4>
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	689b      	ldr	r3, [r3, #8]
 800e8b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e8ba:	d10d      	bne.n	800e8d8 <UART_Start_Receive_IT+0x9c>
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	691b      	ldr	r3, [r3, #16]
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d104      	bne.n	800e8ce <UART_Start_Receive_IT+0x92>
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	227f      	movs	r2, #127	; 0x7f
 800e8c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e8cc:	e008      	b.n	800e8e0 <UART_Start_Receive_IT+0xa4>
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	223f      	movs	r2, #63	; 0x3f
 800e8d2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e8d6:	e003      	b.n	800e8e0 <UART_Start_Receive_IT+0xa4>
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	2200      	movs	r2, #0
 800e8dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	2200      	movs	r2, #0
 800e8e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	2222      	movs	r2, #34	; 0x22
 800e8ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	3308      	adds	r3, #8
 800e8f6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e8fa:	e853 3f00 	ldrex	r3, [r3]
 800e8fe:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800e900:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e902:	f043 0301 	orr.w	r3, r3, #1
 800e906:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	3308      	adds	r3, #8
 800e910:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800e914:	673a      	str	r2, [r7, #112]	; 0x70
 800e916:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e918:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800e91a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e91c:	e841 2300 	strex	r3, r2, [r1]
 800e920:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800e922:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e924:	2b00      	cmp	r3, #0
 800e926:	d1e3      	bne.n	800e8f0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e92c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e930:	d14f      	bne.n	800e9d2 <UART_Start_Receive_IT+0x196>
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e938:	88fa      	ldrh	r2, [r7, #6]
 800e93a:	429a      	cmp	r2, r3
 800e93c:	d349      	bcc.n	800e9d2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	689b      	ldr	r3, [r3, #8]
 800e942:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e946:	d107      	bne.n	800e958 <UART_Start_Receive_IT+0x11c>
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	691b      	ldr	r3, [r3, #16]
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d103      	bne.n	800e958 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	4a47      	ldr	r2, [pc, #284]	; (800ea70 <UART_Start_Receive_IT+0x234>)
 800e954:	675a      	str	r2, [r3, #116]	; 0x74
 800e956:	e002      	b.n	800e95e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	4a46      	ldr	r2, [pc, #280]	; (800ea74 <UART_Start_Receive_IT+0x238>)
 800e95c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	691b      	ldr	r3, [r3, #16]
 800e962:	2b00      	cmp	r3, #0
 800e964:	d01a      	beq.n	800e99c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e96c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e96e:	e853 3f00 	ldrex	r3, [r3]
 800e972:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e974:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e976:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e97a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	461a      	mov	r2, r3
 800e984:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e988:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e98a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e98c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e98e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e990:	e841 2300 	strex	r3, r2, [r1]
 800e994:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800e996:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d1e4      	bne.n	800e966 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	3308      	adds	r3, #8
 800e9a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9a6:	e853 3f00 	ldrex	r3, [r3]
 800e9aa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e9ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e9b2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	3308      	adds	r3, #8
 800e9ba:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800e9bc:	64ba      	str	r2, [r7, #72]	; 0x48
 800e9be:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9c0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e9c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e9c4:	e841 2300 	strex	r3, r2, [r1]
 800e9c8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e9ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d1e5      	bne.n	800e99c <UART_Start_Receive_IT+0x160>
 800e9d0:	e046      	b.n	800ea60 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	689b      	ldr	r3, [r3, #8]
 800e9d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e9da:	d107      	bne.n	800e9ec <UART_Start_Receive_IT+0x1b0>
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	691b      	ldr	r3, [r3, #16]
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d103      	bne.n	800e9ec <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	4a24      	ldr	r2, [pc, #144]	; (800ea78 <UART_Start_Receive_IT+0x23c>)
 800e9e8:	675a      	str	r2, [r3, #116]	; 0x74
 800e9ea:	e002      	b.n	800e9f2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	4a23      	ldr	r2, [pc, #140]	; (800ea7c <UART_Start_Receive_IT+0x240>)
 800e9f0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	691b      	ldr	r3, [r3, #16]
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d019      	beq.n	800ea2e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea02:	e853 3f00 	ldrex	r3, [r3]
 800ea06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ea08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea0a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800ea0e:	677b      	str	r3, [r7, #116]	; 0x74
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	461a      	mov	r2, r3
 800ea16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ea18:	637b      	str	r3, [r7, #52]	; 0x34
 800ea1a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ea1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ea20:	e841 2300 	strex	r3, r2, [r1]
 800ea24:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ea26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d1e6      	bne.n	800e9fa <UART_Start_Receive_IT+0x1be>
 800ea2c:	e018      	b.n	800ea60 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea34:	697b      	ldr	r3, [r7, #20]
 800ea36:	e853 3f00 	ldrex	r3, [r3]
 800ea3a:	613b      	str	r3, [r7, #16]
   return(result);
 800ea3c:	693b      	ldr	r3, [r7, #16]
 800ea3e:	f043 0320 	orr.w	r3, r3, #32
 800ea42:	67bb      	str	r3, [r7, #120]	; 0x78
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	461a      	mov	r2, r3
 800ea4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ea4c:	623b      	str	r3, [r7, #32]
 800ea4e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea50:	69f9      	ldr	r1, [r7, #28]
 800ea52:	6a3a      	ldr	r2, [r7, #32]
 800ea54:	e841 2300 	strex	r3, r2, [r1]
 800ea58:	61bb      	str	r3, [r7, #24]
   return(result);
 800ea5a:	69bb      	ldr	r3, [r7, #24]
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d1e6      	bne.n	800ea2e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800ea60:	2300      	movs	r3, #0
}
 800ea62:	4618      	mov	r0, r3
 800ea64:	378c      	adds	r7, #140	; 0x8c
 800ea66:	46bd      	mov	sp, r7
 800ea68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea6c:	4770      	bx	lr
 800ea6e:	bf00      	nop
 800ea70:	0800f2a1 	.word	0x0800f2a1
 800ea74:	0800ef41 	.word	0x0800ef41
 800ea78:	0800ed89 	.word	0x0800ed89
 800ea7c:	0800ebd1 	.word	0x0800ebd1

0800ea80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ea80:	b480      	push	{r7}
 800ea82:	b095      	sub	sp, #84	; 0x54
 800ea84:	af00      	add	r7, sp, #0
 800ea86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea90:	e853 3f00 	ldrex	r3, [r3]
 800ea94:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ea96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea98:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ea9c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	461a      	mov	r2, r3
 800eaa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eaa6:	643b      	str	r3, [r7, #64]	; 0x40
 800eaa8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eaaa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800eaac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800eaae:	e841 2300 	strex	r3, r2, [r1]
 800eab2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800eab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d1e6      	bne.n	800ea88 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	3308      	adds	r3, #8
 800eac0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eac2:	6a3b      	ldr	r3, [r7, #32]
 800eac4:	e853 3f00 	ldrex	r3, [r3]
 800eac8:	61fb      	str	r3, [r7, #28]
   return(result);
 800eaca:	69fa      	ldr	r2, [r7, #28]
 800eacc:	4b1e      	ldr	r3, [pc, #120]	; (800eb48 <UART_EndRxTransfer+0xc8>)
 800eace:	4013      	ands	r3, r2
 800ead0:	64bb      	str	r3, [r7, #72]	; 0x48
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	3308      	adds	r3, #8
 800ead8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eada:	62fa      	str	r2, [r7, #44]	; 0x2c
 800eadc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eade:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800eae0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eae2:	e841 2300 	strex	r3, r2, [r1]
 800eae6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800eae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d1e5      	bne.n	800eaba <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eaf2:	2b01      	cmp	r3, #1
 800eaf4:	d118      	bne.n	800eb28 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	e853 3f00 	ldrex	r3, [r3]
 800eb02:	60bb      	str	r3, [r7, #8]
   return(result);
 800eb04:	68bb      	ldr	r3, [r7, #8]
 800eb06:	f023 0310 	bic.w	r3, r3, #16
 800eb0a:	647b      	str	r3, [r7, #68]	; 0x44
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	461a      	mov	r2, r3
 800eb12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eb14:	61bb      	str	r3, [r7, #24]
 800eb16:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb18:	6979      	ldr	r1, [r7, #20]
 800eb1a:	69ba      	ldr	r2, [r7, #24]
 800eb1c:	e841 2300 	strex	r3, r2, [r1]
 800eb20:	613b      	str	r3, [r7, #16]
   return(result);
 800eb22:	693b      	ldr	r3, [r7, #16]
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d1e6      	bne.n	800eaf6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	2220      	movs	r2, #32
 800eb2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	2200      	movs	r2, #0
 800eb34:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	2200      	movs	r2, #0
 800eb3a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800eb3c:	bf00      	nop
 800eb3e:	3754      	adds	r7, #84	; 0x54
 800eb40:	46bd      	mov	sp, r7
 800eb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb46:	4770      	bx	lr
 800eb48:	effffffe 	.word	0xeffffffe

0800eb4c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800eb4c:	b580      	push	{r7, lr}
 800eb4e:	b084      	sub	sp, #16
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb58:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	2200      	movs	r2, #0
 800eb5e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	2200      	movs	r2, #0
 800eb66:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800eb6a:	68f8      	ldr	r0, [r7, #12]
 800eb6c:	f7fe ff2e 	bl	800d9cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eb70:	bf00      	nop
 800eb72:	3710      	adds	r7, #16
 800eb74:	46bd      	mov	sp, r7
 800eb76:	bd80      	pop	{r7, pc}

0800eb78 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800eb78:	b580      	push	{r7, lr}
 800eb7a:	b088      	sub	sp, #32
 800eb7c:	af00      	add	r7, sp, #0
 800eb7e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	e853 3f00 	ldrex	r3, [r3]
 800eb8c:	60bb      	str	r3, [r7, #8]
   return(result);
 800eb8e:	68bb      	ldr	r3, [r7, #8]
 800eb90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eb94:	61fb      	str	r3, [r7, #28]
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	461a      	mov	r2, r3
 800eb9c:	69fb      	ldr	r3, [r7, #28]
 800eb9e:	61bb      	str	r3, [r7, #24]
 800eba0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eba2:	6979      	ldr	r1, [r7, #20]
 800eba4:	69ba      	ldr	r2, [r7, #24]
 800eba6:	e841 2300 	strex	r3, r2, [r1]
 800ebaa:	613b      	str	r3, [r7, #16]
   return(result);
 800ebac:	693b      	ldr	r3, [r7, #16]
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d1e6      	bne.n	800eb80 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	2220      	movs	r2, #32
 800ebb6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	2200      	movs	r2, #0
 800ebbe:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ebc0:	6878      	ldr	r0, [r7, #4]
 800ebc2:	f7fe fef9 	bl	800d9b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ebc6:	bf00      	nop
 800ebc8:	3720      	adds	r7, #32
 800ebca:	46bd      	mov	sp, r7
 800ebcc:	bd80      	pop	{r7, pc}
	...

0800ebd0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ebd0:	b580      	push	{r7, lr}
 800ebd2:	b09c      	sub	sp, #112	; 0x70
 800ebd4:	af00      	add	r7, sp, #0
 800ebd6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ebde:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ebe8:	2b22      	cmp	r3, #34	; 0x22
 800ebea:	f040 80be 	bne.w	800ed6a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebf4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ebf8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800ebfc:	b2d9      	uxtb	r1, r3
 800ebfe:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800ec02:	b2da      	uxtb	r2, r3
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ec08:	400a      	ands	r2, r1
 800ec0a:	b2d2      	uxtb	r2, r2
 800ec0c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ec12:	1c5a      	adds	r2, r3, #1
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ec1e:	b29b      	uxth	r3, r3
 800ec20:	3b01      	subs	r3, #1
 800ec22:	b29a      	uxth	r2, r3
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ec30:	b29b      	uxth	r3, r3
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	f040 80a1 	bne.w	800ed7a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ec40:	e853 3f00 	ldrex	r3, [r3]
 800ec44:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ec46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ec48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ec4c:	66bb      	str	r3, [r7, #104]	; 0x68
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	461a      	mov	r2, r3
 800ec54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ec56:	65bb      	str	r3, [r7, #88]	; 0x58
 800ec58:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec5a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ec5c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ec5e:	e841 2300 	strex	r3, r2, [r1]
 800ec62:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ec64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d1e6      	bne.n	800ec38 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	3308      	adds	r3, #8
 800ec70:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec74:	e853 3f00 	ldrex	r3, [r3]
 800ec78:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ec7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec7c:	f023 0301 	bic.w	r3, r3, #1
 800ec80:	667b      	str	r3, [r7, #100]	; 0x64
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	3308      	adds	r3, #8
 800ec88:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ec8a:	647a      	str	r2, [r7, #68]	; 0x44
 800ec8c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec8e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ec90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ec92:	e841 2300 	strex	r3, r2, [r1]
 800ec96:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ec98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d1e5      	bne.n	800ec6a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	2220      	movs	r2, #32
 800eca2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	2200      	movs	r2, #0
 800ecaa:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	2200      	movs	r2, #0
 800ecb0:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	4a33      	ldr	r2, [pc, #204]	; (800ed84 <UART_RxISR_8BIT+0x1b4>)
 800ecb8:	4293      	cmp	r3, r2
 800ecba:	d01f      	beq.n	800ecfc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	685b      	ldr	r3, [r3, #4]
 800ecc2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d018      	beq.n	800ecfc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecd2:	e853 3f00 	ldrex	r3, [r3]
 800ecd6:	623b      	str	r3, [r7, #32]
   return(result);
 800ecd8:	6a3b      	ldr	r3, [r7, #32]
 800ecda:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ecde:	663b      	str	r3, [r7, #96]	; 0x60
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	461a      	mov	r2, r3
 800ece6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ece8:	633b      	str	r3, [r7, #48]	; 0x30
 800ecea:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ecee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ecf0:	e841 2300 	strex	r3, r2, [r1]
 800ecf4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ecf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d1e6      	bne.n	800ecca <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed00:	2b01      	cmp	r3, #1
 800ed02:	d12e      	bne.n	800ed62 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	2200      	movs	r2, #0
 800ed08:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed10:	693b      	ldr	r3, [r7, #16]
 800ed12:	e853 3f00 	ldrex	r3, [r3]
 800ed16:	60fb      	str	r3, [r7, #12]
   return(result);
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	f023 0310 	bic.w	r3, r3, #16
 800ed1e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	461a      	mov	r2, r3
 800ed26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ed28:	61fb      	str	r3, [r7, #28]
 800ed2a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed2c:	69b9      	ldr	r1, [r7, #24]
 800ed2e:	69fa      	ldr	r2, [r7, #28]
 800ed30:	e841 2300 	strex	r3, r2, [r1]
 800ed34:	617b      	str	r3, [r7, #20]
   return(result);
 800ed36:	697b      	ldr	r3, [r7, #20]
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d1e6      	bne.n	800ed0a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	69db      	ldr	r3, [r3, #28]
 800ed42:	f003 0310 	and.w	r3, r3, #16
 800ed46:	2b10      	cmp	r3, #16
 800ed48:	d103      	bne.n	800ed52 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	2210      	movs	r2, #16
 800ed50:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ed58:	4619      	mov	r1, r3
 800ed5a:	6878      	ldr	r0, [r7, #4]
 800ed5c:	f7fe fe40 	bl	800d9e0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ed60:	e00b      	b.n	800ed7a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800ed62:	6878      	ldr	r0, [r7, #4]
 800ed64:	f7f1 fcc4 	bl	80006f0 <HAL_UART_RxCpltCallback>
}
 800ed68:	e007      	b.n	800ed7a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	699a      	ldr	r2, [r3, #24]
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	f042 0208 	orr.w	r2, r2, #8
 800ed78:	619a      	str	r2, [r3, #24]
}
 800ed7a:	bf00      	nop
 800ed7c:	3770      	adds	r7, #112	; 0x70
 800ed7e:	46bd      	mov	sp, r7
 800ed80:	bd80      	pop	{r7, pc}
 800ed82:	bf00      	nop
 800ed84:	58000c00 	.word	0x58000c00

0800ed88 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800ed88:	b580      	push	{r7, lr}
 800ed8a:	b09c      	sub	sp, #112	; 0x70
 800ed8c:	af00      	add	r7, sp, #0
 800ed8e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ed96:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eda0:	2b22      	cmp	r3, #34	; 0x22
 800eda2:	f040 80be 	bne.w	800ef22 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edac:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800edb4:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800edb6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800edba:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800edbe:	4013      	ands	r3, r2
 800edc0:	b29a      	uxth	r2, r3
 800edc2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800edc4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800edca:	1c9a      	adds	r2, r3, #2
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800edd6:	b29b      	uxth	r3, r3
 800edd8:	3b01      	subs	r3, #1
 800edda:	b29a      	uxth	r2, r3
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ede8:	b29b      	uxth	r3, r3
 800edea:	2b00      	cmp	r3, #0
 800edec:	f040 80a1 	bne.w	800ef32 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800edf8:	e853 3f00 	ldrex	r3, [r3]
 800edfc:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800edfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee00:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ee04:	667b      	str	r3, [r7, #100]	; 0x64
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	461a      	mov	r2, r3
 800ee0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ee0e:	657b      	str	r3, [r7, #84]	; 0x54
 800ee10:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee12:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ee14:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ee16:	e841 2300 	strex	r3, r2, [r1]
 800ee1a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ee1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d1e6      	bne.n	800edf0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	3308      	adds	r3, #8
 800ee28:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee2c:	e853 3f00 	ldrex	r3, [r3]
 800ee30:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ee32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee34:	f023 0301 	bic.w	r3, r3, #1
 800ee38:	663b      	str	r3, [r7, #96]	; 0x60
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	3308      	adds	r3, #8
 800ee40:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ee42:	643a      	str	r2, [r7, #64]	; 0x40
 800ee44:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee46:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ee48:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ee4a:	e841 2300 	strex	r3, r2, [r1]
 800ee4e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ee50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d1e5      	bne.n	800ee22 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	2220      	movs	r2, #32
 800ee5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	2200      	movs	r2, #0
 800ee62:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	2200      	movs	r2, #0
 800ee68:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	4a33      	ldr	r2, [pc, #204]	; (800ef3c <UART_RxISR_16BIT+0x1b4>)
 800ee70:	4293      	cmp	r3, r2
 800ee72:	d01f      	beq.n	800eeb4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	685b      	ldr	r3, [r3, #4]
 800ee7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d018      	beq.n	800eeb4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee88:	6a3b      	ldr	r3, [r7, #32]
 800ee8a:	e853 3f00 	ldrex	r3, [r3]
 800ee8e:	61fb      	str	r3, [r7, #28]
   return(result);
 800ee90:	69fb      	ldr	r3, [r7, #28]
 800ee92:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ee96:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	461a      	mov	r2, r3
 800ee9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eea0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eea2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eea4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800eea6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eea8:	e841 2300 	strex	r3, r2, [r1]
 800eeac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800eeae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d1e6      	bne.n	800ee82 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eeb8:	2b01      	cmp	r3, #1
 800eeba:	d12e      	bne.n	800ef1a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	2200      	movs	r2, #0
 800eec0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	e853 3f00 	ldrex	r3, [r3]
 800eece:	60bb      	str	r3, [r7, #8]
   return(result);
 800eed0:	68bb      	ldr	r3, [r7, #8]
 800eed2:	f023 0310 	bic.w	r3, r3, #16
 800eed6:	65bb      	str	r3, [r7, #88]	; 0x58
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	461a      	mov	r2, r3
 800eede:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800eee0:	61bb      	str	r3, [r7, #24]
 800eee2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eee4:	6979      	ldr	r1, [r7, #20]
 800eee6:	69ba      	ldr	r2, [r7, #24]
 800eee8:	e841 2300 	strex	r3, r2, [r1]
 800eeec:	613b      	str	r3, [r7, #16]
   return(result);
 800eeee:	693b      	ldr	r3, [r7, #16]
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d1e6      	bne.n	800eec2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	69db      	ldr	r3, [r3, #28]
 800eefa:	f003 0310 	and.w	r3, r3, #16
 800eefe:	2b10      	cmp	r3, #16
 800ef00:	d103      	bne.n	800ef0a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	2210      	movs	r2, #16
 800ef08:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ef10:	4619      	mov	r1, r3
 800ef12:	6878      	ldr	r0, [r7, #4]
 800ef14:	f7fe fd64 	bl	800d9e0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ef18:	e00b      	b.n	800ef32 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800ef1a:	6878      	ldr	r0, [r7, #4]
 800ef1c:	f7f1 fbe8 	bl	80006f0 <HAL_UART_RxCpltCallback>
}
 800ef20:	e007      	b.n	800ef32 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	699a      	ldr	r2, [r3, #24]
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	f042 0208 	orr.w	r2, r2, #8
 800ef30:	619a      	str	r2, [r3, #24]
}
 800ef32:	bf00      	nop
 800ef34:	3770      	adds	r7, #112	; 0x70
 800ef36:	46bd      	mov	sp, r7
 800ef38:	bd80      	pop	{r7, pc}
 800ef3a:	bf00      	nop
 800ef3c:	58000c00 	.word	0x58000c00

0800ef40 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ef40:	b580      	push	{r7, lr}
 800ef42:	b0ac      	sub	sp, #176	; 0xb0
 800ef44:	af00      	add	r7, sp, #0
 800ef46:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ef4e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	69db      	ldr	r3, [r3, #28]
 800ef58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	689b      	ldr	r3, [r3, #8]
 800ef6c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ef76:	2b22      	cmp	r3, #34	; 0x22
 800ef78:	f040 8180 	bne.w	800f27c <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ef82:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ef86:	e123      	b.n	800f1d0 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef8e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ef92:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800ef96:	b2d9      	uxtb	r1, r3
 800ef98:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800ef9c:	b2da      	uxtb	r2, r3
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800efa2:	400a      	ands	r2, r1
 800efa4:	b2d2      	uxtb	r2, r2
 800efa6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800efac:	1c5a      	adds	r2, r3, #1
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800efb8:	b29b      	uxth	r3, r3
 800efba:	3b01      	subs	r3, #1
 800efbc:	b29a      	uxth	r2, r3
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	69db      	ldr	r3, [r3, #28]
 800efca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800efce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800efd2:	f003 0307 	and.w	r3, r3, #7
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d053      	beq.n	800f082 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800efda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800efde:	f003 0301 	and.w	r3, r3, #1
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d011      	beq.n	800f00a <UART_RxISR_8BIT_FIFOEN+0xca>
 800efe6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800efea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d00b      	beq.n	800f00a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	2201      	movs	r2, #1
 800eff8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f000:	f043 0201 	orr.w	r2, r3, #1
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f00a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f00e:	f003 0302 	and.w	r3, r3, #2
 800f012:	2b00      	cmp	r3, #0
 800f014:	d011      	beq.n	800f03a <UART_RxISR_8BIT_FIFOEN+0xfa>
 800f016:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f01a:	f003 0301 	and.w	r3, r3, #1
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d00b      	beq.n	800f03a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	2202      	movs	r2, #2
 800f028:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f030:	f043 0204 	orr.w	r2, r3, #4
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f03a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f03e:	f003 0304 	and.w	r3, r3, #4
 800f042:	2b00      	cmp	r3, #0
 800f044:	d011      	beq.n	800f06a <UART_RxISR_8BIT_FIFOEN+0x12a>
 800f046:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f04a:	f003 0301 	and.w	r3, r3, #1
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d00b      	beq.n	800f06a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	2204      	movs	r2, #4
 800f058:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f060:	f043 0202 	orr.w	r2, r3, #2
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f070:	2b00      	cmp	r3, #0
 800f072:	d006      	beq.n	800f082 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f074:	6878      	ldr	r0, [r7, #4]
 800f076:	f7fe fca9 	bl	800d9cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	2200      	movs	r2, #0
 800f07e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f088:	b29b      	uxth	r3, r3
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	f040 80a0 	bne.w	800f1d0 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f096:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f098:	e853 3f00 	ldrex	r3, [r3]
 800f09c:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800f09e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f0a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f0a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	461a      	mov	r2, r3
 800f0ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f0b2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f0b4:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0b6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800f0b8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f0ba:	e841 2300 	strex	r3, r2, [r1]
 800f0be:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800f0c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d1e4      	bne.n	800f090 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	3308      	adds	r3, #8
 800f0cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f0d0:	e853 3f00 	ldrex	r3, [r3]
 800f0d4:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800f0d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f0d8:	4b6e      	ldr	r3, [pc, #440]	; (800f294 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800f0da:	4013      	ands	r3, r2
 800f0dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	3308      	adds	r3, #8
 800f0e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800f0ea:	66ba      	str	r2, [r7, #104]	; 0x68
 800f0ec:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0ee:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800f0f0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f0f2:	e841 2300 	strex	r3, r2, [r1]
 800f0f6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800f0f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d1e3      	bne.n	800f0c6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	2220      	movs	r2, #32
 800f102:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	2200      	movs	r2, #0
 800f10a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	2200      	movs	r2, #0
 800f110:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	4a60      	ldr	r2, [pc, #384]	; (800f298 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800f118:	4293      	cmp	r3, r2
 800f11a:	d021      	beq.n	800f160 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	685b      	ldr	r3, [r3, #4]
 800f122:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f126:	2b00      	cmp	r3, #0
 800f128:	d01a      	beq.n	800f160 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f130:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f132:	e853 3f00 	ldrex	r3, [r3]
 800f136:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800f138:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f13a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f13e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	461a      	mov	r2, r3
 800f148:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f14c:	657b      	str	r3, [r7, #84]	; 0x54
 800f14e:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f150:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f152:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f154:	e841 2300 	strex	r3, r2, [r1]
 800f158:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f15a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d1e4      	bne.n	800f12a <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f164:	2b01      	cmp	r3, #1
 800f166:	d130      	bne.n	800f1ca <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	2200      	movs	r2, #0
 800f16c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f176:	e853 3f00 	ldrex	r3, [r3]
 800f17a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f17c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f17e:	f023 0310 	bic.w	r3, r3, #16
 800f182:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	461a      	mov	r2, r3
 800f18c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f190:	643b      	str	r3, [r7, #64]	; 0x40
 800f192:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f194:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f196:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f198:	e841 2300 	strex	r3, r2, [r1]
 800f19c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f19e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d1e4      	bne.n	800f16e <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	69db      	ldr	r3, [r3, #28]
 800f1aa:	f003 0310 	and.w	r3, r3, #16
 800f1ae:	2b10      	cmp	r3, #16
 800f1b0:	d103      	bne.n	800f1ba <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	2210      	movs	r2, #16
 800f1b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f1c0:	4619      	mov	r1, r3
 800f1c2:	6878      	ldr	r0, [r7, #4]
 800f1c4:	f7fe fc0c 	bl	800d9e0 <HAL_UARTEx_RxEventCallback>
 800f1c8:	e002      	b.n	800f1d0 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800f1ca:	6878      	ldr	r0, [r7, #4]
 800f1cc:	f7f1 fa90 	bl	80006f0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f1d0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d006      	beq.n	800f1e6 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800f1d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f1dc:	f003 0320 	and.w	r3, r3, #32
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	f47f aed1 	bne.w	800ef88 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f1ec:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f1f0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d049      	beq.n	800f28c <UART_RxISR_8BIT_FIFOEN+0x34c>
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f1fe:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800f202:	429a      	cmp	r2, r3
 800f204:	d242      	bcs.n	800f28c <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	3308      	adds	r3, #8
 800f20c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f20e:	6a3b      	ldr	r3, [r7, #32]
 800f210:	e853 3f00 	ldrex	r3, [r3]
 800f214:	61fb      	str	r3, [r7, #28]
   return(result);
 800f216:	69fb      	ldr	r3, [r7, #28]
 800f218:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f21c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	3308      	adds	r3, #8
 800f226:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800f22a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f22c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f22e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f230:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f232:	e841 2300 	strex	r3, r2, [r1]
 800f236:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d1e3      	bne.n	800f206 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	4a16      	ldr	r2, [pc, #88]	; (800f29c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800f242:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	e853 3f00 	ldrex	r3, [r3]
 800f250:	60bb      	str	r3, [r7, #8]
   return(result);
 800f252:	68bb      	ldr	r3, [r7, #8]
 800f254:	f043 0320 	orr.w	r3, r3, #32
 800f258:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	461a      	mov	r2, r3
 800f262:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f266:	61bb      	str	r3, [r7, #24]
 800f268:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f26a:	6979      	ldr	r1, [r7, #20]
 800f26c:	69ba      	ldr	r2, [r7, #24]
 800f26e:	e841 2300 	strex	r3, r2, [r1]
 800f272:	613b      	str	r3, [r7, #16]
   return(result);
 800f274:	693b      	ldr	r3, [r7, #16]
 800f276:	2b00      	cmp	r3, #0
 800f278:	d1e4      	bne.n	800f244 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f27a:	e007      	b.n	800f28c <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	699a      	ldr	r2, [r3, #24]
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	f042 0208 	orr.w	r2, r2, #8
 800f28a:	619a      	str	r2, [r3, #24]
}
 800f28c:	bf00      	nop
 800f28e:	37b0      	adds	r7, #176	; 0xb0
 800f290:	46bd      	mov	sp, r7
 800f292:	bd80      	pop	{r7, pc}
 800f294:	effffffe 	.word	0xeffffffe
 800f298:	58000c00 	.word	0x58000c00
 800f29c:	0800ebd1 	.word	0x0800ebd1

0800f2a0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f2a0:	b580      	push	{r7, lr}
 800f2a2:	b0ae      	sub	sp, #184	; 0xb8
 800f2a4:	af00      	add	r7, sp, #0
 800f2a6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f2ae:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	69db      	ldr	r3, [r3, #28]
 800f2b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	689b      	ldr	r3, [r3, #8]
 800f2cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f2d6:	2b22      	cmp	r3, #34	; 0x22
 800f2d8:	f040 8184 	bne.w	800f5e4 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f2e2:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f2e6:	e127      	b.n	800f538 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2ee:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f2f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800f2fa:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800f2fe:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800f302:	4013      	ands	r3, r2
 800f304:	b29a      	uxth	r2, r3
 800f306:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f30a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f310:	1c9a      	adds	r2, r3, #2
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f31c:	b29b      	uxth	r3, r3
 800f31e:	3b01      	subs	r3, #1
 800f320:	b29a      	uxth	r2, r3
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	69db      	ldr	r3, [r3, #28]
 800f32e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f332:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f336:	f003 0307 	and.w	r3, r3, #7
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d053      	beq.n	800f3e6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f33e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f342:	f003 0301 	and.w	r3, r3, #1
 800f346:	2b00      	cmp	r3, #0
 800f348:	d011      	beq.n	800f36e <UART_RxISR_16BIT_FIFOEN+0xce>
 800f34a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f34e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f352:	2b00      	cmp	r3, #0
 800f354:	d00b      	beq.n	800f36e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	2201      	movs	r2, #1
 800f35c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f364:	f043 0201 	orr.w	r2, r3, #1
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f36e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f372:	f003 0302 	and.w	r3, r3, #2
 800f376:	2b00      	cmp	r3, #0
 800f378:	d011      	beq.n	800f39e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800f37a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f37e:	f003 0301 	and.w	r3, r3, #1
 800f382:	2b00      	cmp	r3, #0
 800f384:	d00b      	beq.n	800f39e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	2202      	movs	r2, #2
 800f38c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f394:	f043 0204 	orr.w	r2, r3, #4
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f39e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f3a2:	f003 0304 	and.w	r3, r3, #4
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d011      	beq.n	800f3ce <UART_RxISR_16BIT_FIFOEN+0x12e>
 800f3aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f3ae:	f003 0301 	and.w	r3, r3, #1
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d00b      	beq.n	800f3ce <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	2204      	movs	r2, #4
 800f3bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f3c4:	f043 0202 	orr.w	r2, r3, #2
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d006      	beq.n	800f3e6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f3d8:	6878      	ldr	r0, [r7, #4]
 800f3da:	f7fe faf7 	bl	800d9cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	2200      	movs	r2, #0
 800f3e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f3ec:	b29b      	uxth	r3, r3
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	f040 80a2 	bne.w	800f538 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f3fc:	e853 3f00 	ldrex	r3, [r3]
 800f400:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800f402:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f404:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f408:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	461a      	mov	r2, r3
 800f412:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f416:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f41a:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f41c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800f41e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f422:	e841 2300 	strex	r3, r2, [r1]
 800f426:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800f428:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d1e2      	bne.n	800f3f4 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	3308      	adds	r3, #8
 800f434:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f436:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f438:	e853 3f00 	ldrex	r3, [r3]
 800f43c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800f43e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f440:	4b6e      	ldr	r3, [pc, #440]	; (800f5fc <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800f442:	4013      	ands	r3, r2
 800f444:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	3308      	adds	r3, #8
 800f44e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800f452:	66fa      	str	r2, [r7, #108]	; 0x6c
 800f454:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f456:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f458:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f45a:	e841 2300 	strex	r3, r2, [r1]
 800f45e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800f460:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f462:	2b00      	cmp	r3, #0
 800f464:	d1e3      	bne.n	800f42e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	2220      	movs	r2, #32
 800f46a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	2200      	movs	r2, #0
 800f472:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	2200      	movs	r2, #0
 800f478:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	4a60      	ldr	r2, [pc, #384]	; (800f600 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800f480:	4293      	cmp	r3, r2
 800f482:	d021      	beq.n	800f4c8 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	685b      	ldr	r3, [r3, #4]
 800f48a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d01a      	beq.n	800f4c8 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f498:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f49a:	e853 3f00 	ldrex	r3, [r3]
 800f49e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f4a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f4a2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f4a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	461a      	mov	r2, r3
 800f4b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f4b4:	65bb      	str	r3, [r7, #88]	; 0x58
 800f4b6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f4ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f4bc:	e841 2300 	strex	r3, r2, [r1]
 800f4c0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f4c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d1e4      	bne.n	800f492 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f4cc:	2b01      	cmp	r3, #1
 800f4ce:	d130      	bne.n	800f532 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	2200      	movs	r2, #0
 800f4d4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4de:	e853 3f00 	ldrex	r3, [r3]
 800f4e2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f4e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4e6:	f023 0310 	bic.w	r3, r3, #16
 800f4ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	461a      	mov	r2, r3
 800f4f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f4f8:	647b      	str	r3, [r7, #68]	; 0x44
 800f4fa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4fc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f4fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f500:	e841 2300 	strex	r3, r2, [r1]
 800f504:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f506:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d1e4      	bne.n	800f4d6 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	69db      	ldr	r3, [r3, #28]
 800f512:	f003 0310 	and.w	r3, r3, #16
 800f516:	2b10      	cmp	r3, #16
 800f518:	d103      	bne.n	800f522 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	2210      	movs	r2, #16
 800f520:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f528:	4619      	mov	r1, r3
 800f52a:	6878      	ldr	r0, [r7, #4]
 800f52c:	f7fe fa58 	bl	800d9e0 <HAL_UARTEx_RxEventCallback>
 800f530:	e002      	b.n	800f538 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800f532:	6878      	ldr	r0, [r7, #4]
 800f534:	f7f1 f8dc 	bl	80006f0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f538:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d006      	beq.n	800f54e <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800f540:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f544:	f003 0320 	and.w	r3, r3, #32
 800f548:	2b00      	cmp	r3, #0
 800f54a:	f47f aecd 	bne.w	800f2e8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f554:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f558:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d049      	beq.n	800f5f4 <UART_RxISR_16BIT_FIFOEN+0x354>
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f566:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800f56a:	429a      	cmp	r2, r3
 800f56c:	d242      	bcs.n	800f5f4 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	3308      	adds	r3, #8
 800f574:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f578:	e853 3f00 	ldrex	r3, [r3]
 800f57c:	623b      	str	r3, [r7, #32]
   return(result);
 800f57e:	6a3b      	ldr	r3, [r7, #32]
 800f580:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f584:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	3308      	adds	r3, #8
 800f58e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800f592:	633a      	str	r2, [r7, #48]	; 0x30
 800f594:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f596:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f598:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f59a:	e841 2300 	strex	r3, r2, [r1]
 800f59e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f5a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d1e3      	bne.n	800f56e <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	4a16      	ldr	r2, [pc, #88]	; (800f604 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800f5aa:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5b2:	693b      	ldr	r3, [r7, #16]
 800f5b4:	e853 3f00 	ldrex	r3, [r3]
 800f5b8:	60fb      	str	r3, [r7, #12]
   return(result);
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	f043 0320 	orr.w	r3, r3, #32
 800f5c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	461a      	mov	r2, r3
 800f5ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f5ce:	61fb      	str	r3, [r7, #28]
 800f5d0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5d2:	69b9      	ldr	r1, [r7, #24]
 800f5d4:	69fa      	ldr	r2, [r7, #28]
 800f5d6:	e841 2300 	strex	r3, r2, [r1]
 800f5da:	617b      	str	r3, [r7, #20]
   return(result);
 800f5dc:	697b      	ldr	r3, [r7, #20]
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d1e4      	bne.n	800f5ac <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f5e2:	e007      	b.n	800f5f4 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	699a      	ldr	r2, [r3, #24]
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	f042 0208 	orr.w	r2, r2, #8
 800f5f2:	619a      	str	r2, [r3, #24]
}
 800f5f4:	bf00      	nop
 800f5f6:	37b8      	adds	r7, #184	; 0xb8
 800f5f8:	46bd      	mov	sp, r7
 800f5fa:	bd80      	pop	{r7, pc}
 800f5fc:	effffffe 	.word	0xeffffffe
 800f600:	58000c00 	.word	0x58000c00
 800f604:	0800ed89 	.word	0x0800ed89

0800f608 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f608:	b480      	push	{r7}
 800f60a:	b083      	sub	sp, #12
 800f60c:	af00      	add	r7, sp, #0
 800f60e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f610:	bf00      	nop
 800f612:	370c      	adds	r7, #12
 800f614:	46bd      	mov	sp, r7
 800f616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f61a:	4770      	bx	lr

0800f61c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f61c:	b480      	push	{r7}
 800f61e:	b083      	sub	sp, #12
 800f620:	af00      	add	r7, sp, #0
 800f622:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f624:	bf00      	nop
 800f626:	370c      	adds	r7, #12
 800f628:	46bd      	mov	sp, r7
 800f62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f62e:	4770      	bx	lr

0800f630 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f630:	b480      	push	{r7}
 800f632:	b083      	sub	sp, #12
 800f634:	af00      	add	r7, sp, #0
 800f636:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f638:	bf00      	nop
 800f63a:	370c      	adds	r7, #12
 800f63c:	46bd      	mov	sp, r7
 800f63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f642:	4770      	bx	lr

0800f644 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f644:	b480      	push	{r7}
 800f646:	b085      	sub	sp, #20
 800f648:	af00      	add	r7, sp, #0
 800f64a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f652:	2b01      	cmp	r3, #1
 800f654:	d101      	bne.n	800f65a <HAL_UARTEx_DisableFifoMode+0x16>
 800f656:	2302      	movs	r3, #2
 800f658:	e027      	b.n	800f6aa <HAL_UARTEx_DisableFifoMode+0x66>
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	2201      	movs	r2, #1
 800f65e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	2224      	movs	r2, #36	; 0x24
 800f666:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	681a      	ldr	r2, [r3, #0]
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	f022 0201 	bic.w	r2, r2, #1
 800f680:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800f688:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	2200      	movs	r2, #0
 800f68e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	68fa      	ldr	r2, [r7, #12]
 800f696:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	2220      	movs	r2, #32
 800f69c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	2200      	movs	r2, #0
 800f6a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f6a8:	2300      	movs	r3, #0
}
 800f6aa:	4618      	mov	r0, r3
 800f6ac:	3714      	adds	r7, #20
 800f6ae:	46bd      	mov	sp, r7
 800f6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6b4:	4770      	bx	lr

0800f6b6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f6b6:	b580      	push	{r7, lr}
 800f6b8:	b084      	sub	sp, #16
 800f6ba:	af00      	add	r7, sp, #0
 800f6bc:	6078      	str	r0, [r7, #4]
 800f6be:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f6c6:	2b01      	cmp	r3, #1
 800f6c8:	d101      	bne.n	800f6ce <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f6ca:	2302      	movs	r3, #2
 800f6cc:	e02d      	b.n	800f72a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	2201      	movs	r2, #1
 800f6d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	2224      	movs	r2, #36	; 0x24
 800f6da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	681a      	ldr	r2, [r3, #0]
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	f022 0201 	bic.w	r2, r2, #1
 800f6f4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	689b      	ldr	r3, [r3, #8]
 800f6fc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	683a      	ldr	r2, [r7, #0]
 800f706:	430a      	orrs	r2, r1
 800f708:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f70a:	6878      	ldr	r0, [r7, #4]
 800f70c:	f000 f850 	bl	800f7b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	68fa      	ldr	r2, [r7, #12]
 800f716:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	2220      	movs	r2, #32
 800f71c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	2200      	movs	r2, #0
 800f724:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f728:	2300      	movs	r3, #0
}
 800f72a:	4618      	mov	r0, r3
 800f72c:	3710      	adds	r7, #16
 800f72e:	46bd      	mov	sp, r7
 800f730:	bd80      	pop	{r7, pc}

0800f732 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f732:	b580      	push	{r7, lr}
 800f734:	b084      	sub	sp, #16
 800f736:	af00      	add	r7, sp, #0
 800f738:	6078      	str	r0, [r7, #4]
 800f73a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f742:	2b01      	cmp	r3, #1
 800f744:	d101      	bne.n	800f74a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f746:	2302      	movs	r3, #2
 800f748:	e02d      	b.n	800f7a6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	2201      	movs	r2, #1
 800f74e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	2224      	movs	r2, #36	; 0x24
 800f756:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	681a      	ldr	r2, [r3, #0]
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	f022 0201 	bic.w	r2, r2, #1
 800f770:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	689b      	ldr	r3, [r3, #8]
 800f778:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	683a      	ldr	r2, [r7, #0]
 800f782:	430a      	orrs	r2, r1
 800f784:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f786:	6878      	ldr	r0, [r7, #4]
 800f788:	f000 f812 	bl	800f7b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	68fa      	ldr	r2, [r7, #12]
 800f792:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	2220      	movs	r2, #32
 800f798:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	2200      	movs	r2, #0
 800f7a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f7a4:	2300      	movs	r3, #0
}
 800f7a6:	4618      	mov	r0, r3
 800f7a8:	3710      	adds	r7, #16
 800f7aa:	46bd      	mov	sp, r7
 800f7ac:	bd80      	pop	{r7, pc}
	...

0800f7b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f7b0:	b480      	push	{r7}
 800f7b2:	b085      	sub	sp, #20
 800f7b4:	af00      	add	r7, sp, #0
 800f7b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d108      	bne.n	800f7d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	2201      	movs	r2, #1
 800f7c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	2201      	movs	r2, #1
 800f7cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f7d0:	e031      	b.n	800f836 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f7d2:	2310      	movs	r3, #16
 800f7d4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f7d6:	2310      	movs	r3, #16
 800f7d8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	689b      	ldr	r3, [r3, #8]
 800f7e0:	0e5b      	lsrs	r3, r3, #25
 800f7e2:	b2db      	uxtb	r3, r3
 800f7e4:	f003 0307 	and.w	r3, r3, #7
 800f7e8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	689b      	ldr	r3, [r3, #8]
 800f7f0:	0f5b      	lsrs	r3, r3, #29
 800f7f2:	b2db      	uxtb	r3, r3
 800f7f4:	f003 0307 	and.w	r3, r3, #7
 800f7f8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f7fa:	7bbb      	ldrb	r3, [r7, #14]
 800f7fc:	7b3a      	ldrb	r2, [r7, #12]
 800f7fe:	4911      	ldr	r1, [pc, #68]	; (800f844 <UARTEx_SetNbDataToProcess+0x94>)
 800f800:	5c8a      	ldrb	r2, [r1, r2]
 800f802:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f806:	7b3a      	ldrb	r2, [r7, #12]
 800f808:	490f      	ldr	r1, [pc, #60]	; (800f848 <UARTEx_SetNbDataToProcess+0x98>)
 800f80a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f80c:	fb93 f3f2 	sdiv	r3, r3, r2
 800f810:	b29a      	uxth	r2, r3
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f818:	7bfb      	ldrb	r3, [r7, #15]
 800f81a:	7b7a      	ldrb	r2, [r7, #13]
 800f81c:	4909      	ldr	r1, [pc, #36]	; (800f844 <UARTEx_SetNbDataToProcess+0x94>)
 800f81e:	5c8a      	ldrb	r2, [r1, r2]
 800f820:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f824:	7b7a      	ldrb	r2, [r7, #13]
 800f826:	4908      	ldr	r1, [pc, #32]	; (800f848 <UARTEx_SetNbDataToProcess+0x98>)
 800f828:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f82a:	fb93 f3f2 	sdiv	r3, r3, r2
 800f82e:	b29a      	uxth	r2, r3
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800f836:	bf00      	nop
 800f838:	3714      	adds	r7, #20
 800f83a:	46bd      	mov	sp, r7
 800f83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f840:	4770      	bx	lr
 800f842:	bf00      	nop
 800f844:	08014364 	.word	0x08014364
 800f848:	0801436c 	.word	0x0801436c

0800f84c <__NVIC_SetPriority>:
{
 800f84c:	b480      	push	{r7}
 800f84e:	b083      	sub	sp, #12
 800f850:	af00      	add	r7, sp, #0
 800f852:	4603      	mov	r3, r0
 800f854:	6039      	str	r1, [r7, #0]
 800f856:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800f858:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	db0a      	blt.n	800f876 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f860:	683b      	ldr	r3, [r7, #0]
 800f862:	b2da      	uxtb	r2, r3
 800f864:	490c      	ldr	r1, [pc, #48]	; (800f898 <__NVIC_SetPriority+0x4c>)
 800f866:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f86a:	0112      	lsls	r2, r2, #4
 800f86c:	b2d2      	uxtb	r2, r2
 800f86e:	440b      	add	r3, r1
 800f870:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800f874:	e00a      	b.n	800f88c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f876:	683b      	ldr	r3, [r7, #0]
 800f878:	b2da      	uxtb	r2, r3
 800f87a:	4908      	ldr	r1, [pc, #32]	; (800f89c <__NVIC_SetPriority+0x50>)
 800f87c:	88fb      	ldrh	r3, [r7, #6]
 800f87e:	f003 030f 	and.w	r3, r3, #15
 800f882:	3b04      	subs	r3, #4
 800f884:	0112      	lsls	r2, r2, #4
 800f886:	b2d2      	uxtb	r2, r2
 800f888:	440b      	add	r3, r1
 800f88a:	761a      	strb	r2, [r3, #24]
}
 800f88c:	bf00      	nop
 800f88e:	370c      	adds	r7, #12
 800f890:	46bd      	mov	sp, r7
 800f892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f896:	4770      	bx	lr
 800f898:	e000e100 	.word	0xe000e100
 800f89c:	e000ed00 	.word	0xe000ed00

0800f8a0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800f8a0:	b580      	push	{r7, lr}
 800f8a2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800f8a4:	4b05      	ldr	r3, [pc, #20]	; (800f8bc <SysTick_Handler+0x1c>)
 800f8a6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800f8a8:	f002 fada 	bl	8011e60 <xTaskGetSchedulerState>
 800f8ac:	4603      	mov	r3, r0
 800f8ae:	2b01      	cmp	r3, #1
 800f8b0:	d001      	beq.n	800f8b6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800f8b2:	f003 f8f9 	bl	8012aa8 <xPortSysTickHandler>
  }
}
 800f8b6:	bf00      	nop
 800f8b8:	bd80      	pop	{r7, pc}
 800f8ba:	bf00      	nop
 800f8bc:	e000e010 	.word	0xe000e010

0800f8c0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800f8c0:	b580      	push	{r7, lr}
 800f8c2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800f8c4:	2100      	movs	r1, #0
 800f8c6:	f06f 0004 	mvn.w	r0, #4
 800f8ca:	f7ff ffbf 	bl	800f84c <__NVIC_SetPriority>
#endif
}
 800f8ce:	bf00      	nop
 800f8d0:	bd80      	pop	{r7, pc}
	...

0800f8d4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800f8d4:	b480      	push	{r7}
 800f8d6:	b083      	sub	sp, #12
 800f8d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f8da:	f3ef 8305 	mrs	r3, IPSR
 800f8de:	603b      	str	r3, [r7, #0]
  return(result);
 800f8e0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d003      	beq.n	800f8ee <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800f8e6:	f06f 0305 	mvn.w	r3, #5
 800f8ea:	607b      	str	r3, [r7, #4]
 800f8ec:	e00c      	b.n	800f908 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800f8ee:	4b0a      	ldr	r3, [pc, #40]	; (800f918 <osKernelInitialize+0x44>)
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d105      	bne.n	800f902 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800f8f6:	4b08      	ldr	r3, [pc, #32]	; (800f918 <osKernelInitialize+0x44>)
 800f8f8:	2201      	movs	r2, #1
 800f8fa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800f8fc:	2300      	movs	r3, #0
 800f8fe:	607b      	str	r3, [r7, #4]
 800f900:	e002      	b.n	800f908 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800f902:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f906:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800f908:	687b      	ldr	r3, [r7, #4]
}
 800f90a:	4618      	mov	r0, r3
 800f90c:	370c      	adds	r7, #12
 800f90e:	46bd      	mov	sp, r7
 800f910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f914:	4770      	bx	lr
 800f916:	bf00      	nop
 800f918:	2400063c 	.word	0x2400063c

0800f91c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800f91c:	b580      	push	{r7, lr}
 800f91e:	b082      	sub	sp, #8
 800f920:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f922:	f3ef 8305 	mrs	r3, IPSR
 800f926:	603b      	str	r3, [r7, #0]
  return(result);
 800f928:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d003      	beq.n	800f936 <osKernelStart+0x1a>
    stat = osErrorISR;
 800f92e:	f06f 0305 	mvn.w	r3, #5
 800f932:	607b      	str	r3, [r7, #4]
 800f934:	e010      	b.n	800f958 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800f936:	4b0b      	ldr	r3, [pc, #44]	; (800f964 <osKernelStart+0x48>)
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	2b01      	cmp	r3, #1
 800f93c:	d109      	bne.n	800f952 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800f93e:	f7ff ffbf 	bl	800f8c0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800f942:	4b08      	ldr	r3, [pc, #32]	; (800f964 <osKernelStart+0x48>)
 800f944:	2202      	movs	r2, #2
 800f946:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800f948:	f001 fda4 	bl	8011494 <vTaskStartScheduler>
      stat = osOK;
 800f94c:	2300      	movs	r3, #0
 800f94e:	607b      	str	r3, [r7, #4]
 800f950:	e002      	b.n	800f958 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800f952:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f956:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800f958:	687b      	ldr	r3, [r7, #4]
}
 800f95a:	4618      	mov	r0, r3
 800f95c:	3708      	adds	r7, #8
 800f95e:	46bd      	mov	sp, r7
 800f960:	bd80      	pop	{r7, pc}
 800f962:	bf00      	nop
 800f964:	2400063c 	.word	0x2400063c

0800f968 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800f968:	b580      	push	{r7, lr}
 800f96a:	b08e      	sub	sp, #56	; 0x38
 800f96c:	af04      	add	r7, sp, #16
 800f96e:	60f8      	str	r0, [r7, #12]
 800f970:	60b9      	str	r1, [r7, #8]
 800f972:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800f974:	2300      	movs	r3, #0
 800f976:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f978:	f3ef 8305 	mrs	r3, IPSR
 800f97c:	617b      	str	r3, [r7, #20]
  return(result);
 800f97e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800f980:	2b00      	cmp	r3, #0
 800f982:	d17e      	bne.n	800fa82 <osThreadNew+0x11a>
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	2b00      	cmp	r3, #0
 800f988:	d07b      	beq.n	800fa82 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800f98a:	2380      	movs	r3, #128	; 0x80
 800f98c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800f98e:	2318      	movs	r3, #24
 800f990:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800f992:	2300      	movs	r3, #0
 800f994:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800f996:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f99a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d045      	beq.n	800fa2e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d002      	beq.n	800f9b0 <osThreadNew+0x48>
        name = attr->name;
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	699b      	ldr	r3, [r3, #24]
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d002      	beq.n	800f9be <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	699b      	ldr	r3, [r3, #24]
 800f9bc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800f9be:	69fb      	ldr	r3, [r7, #28]
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d008      	beq.n	800f9d6 <osThreadNew+0x6e>
 800f9c4:	69fb      	ldr	r3, [r7, #28]
 800f9c6:	2b38      	cmp	r3, #56	; 0x38
 800f9c8:	d805      	bhi.n	800f9d6 <osThreadNew+0x6e>
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	685b      	ldr	r3, [r3, #4]
 800f9ce:	f003 0301 	and.w	r3, r3, #1
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d001      	beq.n	800f9da <osThreadNew+0x72>
        return (NULL);
 800f9d6:	2300      	movs	r3, #0
 800f9d8:	e054      	b.n	800fa84 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	695b      	ldr	r3, [r3, #20]
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d003      	beq.n	800f9ea <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	695b      	ldr	r3, [r3, #20]
 800f9e6:	089b      	lsrs	r3, r3, #2
 800f9e8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	689b      	ldr	r3, [r3, #8]
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d00e      	beq.n	800fa10 <osThreadNew+0xa8>
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	68db      	ldr	r3, [r3, #12]
 800f9f6:	2b5b      	cmp	r3, #91	; 0x5b
 800f9f8:	d90a      	bls.n	800fa10 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d006      	beq.n	800fa10 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	695b      	ldr	r3, [r3, #20]
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d002      	beq.n	800fa10 <osThreadNew+0xa8>
        mem = 1;
 800fa0a:	2301      	movs	r3, #1
 800fa0c:	61bb      	str	r3, [r7, #24]
 800fa0e:	e010      	b.n	800fa32 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	689b      	ldr	r3, [r3, #8]
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d10c      	bne.n	800fa32 <osThreadNew+0xca>
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	68db      	ldr	r3, [r3, #12]
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d108      	bne.n	800fa32 <osThreadNew+0xca>
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	691b      	ldr	r3, [r3, #16]
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d104      	bne.n	800fa32 <osThreadNew+0xca>
          mem = 0;
 800fa28:	2300      	movs	r3, #0
 800fa2a:	61bb      	str	r3, [r7, #24]
 800fa2c:	e001      	b.n	800fa32 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800fa2e:	2300      	movs	r3, #0
 800fa30:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800fa32:	69bb      	ldr	r3, [r7, #24]
 800fa34:	2b01      	cmp	r3, #1
 800fa36:	d110      	bne.n	800fa5a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800fa3c:	687a      	ldr	r2, [r7, #4]
 800fa3e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800fa40:	9202      	str	r2, [sp, #8]
 800fa42:	9301      	str	r3, [sp, #4]
 800fa44:	69fb      	ldr	r3, [r7, #28]
 800fa46:	9300      	str	r3, [sp, #0]
 800fa48:	68bb      	ldr	r3, [r7, #8]
 800fa4a:	6a3a      	ldr	r2, [r7, #32]
 800fa4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fa4e:	68f8      	ldr	r0, [r7, #12]
 800fa50:	f001 fb4a 	bl	80110e8 <xTaskCreateStatic>
 800fa54:	4603      	mov	r3, r0
 800fa56:	613b      	str	r3, [r7, #16]
 800fa58:	e013      	b.n	800fa82 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800fa5a:	69bb      	ldr	r3, [r7, #24]
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d110      	bne.n	800fa82 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800fa60:	6a3b      	ldr	r3, [r7, #32]
 800fa62:	b29a      	uxth	r2, r3
 800fa64:	f107 0310 	add.w	r3, r7, #16
 800fa68:	9301      	str	r3, [sp, #4]
 800fa6a:	69fb      	ldr	r3, [r7, #28]
 800fa6c:	9300      	str	r3, [sp, #0]
 800fa6e:	68bb      	ldr	r3, [r7, #8]
 800fa70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fa72:	68f8      	ldr	r0, [r7, #12]
 800fa74:	f001 fb95 	bl	80111a2 <xTaskCreate>
 800fa78:	4603      	mov	r3, r0
 800fa7a:	2b01      	cmp	r3, #1
 800fa7c:	d001      	beq.n	800fa82 <osThreadNew+0x11a>
            hTask = NULL;
 800fa7e:	2300      	movs	r3, #0
 800fa80:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800fa82:	693b      	ldr	r3, [r7, #16]
}
 800fa84:	4618      	mov	r0, r3
 800fa86:	3728      	adds	r7, #40	; 0x28
 800fa88:	46bd      	mov	sp, r7
 800fa8a:	bd80      	pop	{r7, pc}

0800fa8c <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 800fa8c:	b480      	push	{r7}
 800fa8e:	b083      	sub	sp, #12
 800fa90:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fa92:	f3ef 8305 	mrs	r3, IPSR
 800fa96:	603b      	str	r3, [r7, #0]
  return(result);
 800fa98:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d003      	beq.n	800faa6 <osThreadYield+0x1a>
    stat = osErrorISR;
 800fa9e:	f06f 0305 	mvn.w	r3, #5
 800faa2:	607b      	str	r3, [r7, #4]
 800faa4:	e009      	b.n	800faba <osThreadYield+0x2e>
  } else {
    stat = osOK;
 800faa6:	2300      	movs	r3, #0
 800faa8:	607b      	str	r3, [r7, #4]
    taskYIELD();
 800faaa:	4b07      	ldr	r3, [pc, #28]	; (800fac8 <osThreadYield+0x3c>)
 800faac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fab0:	601a      	str	r2, [r3, #0]
 800fab2:	f3bf 8f4f 	dsb	sy
 800fab6:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 800faba:	687b      	ldr	r3, [r7, #4]
}
 800fabc:	4618      	mov	r0, r3
 800fabe:	370c      	adds	r7, #12
 800fac0:	46bd      	mov	sp, r7
 800fac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fac6:	4770      	bx	lr
 800fac8:	e000ed04 	.word	0xe000ed04

0800facc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800facc:	b580      	push	{r7, lr}
 800face:	b084      	sub	sp, #16
 800fad0:	af00      	add	r7, sp, #0
 800fad2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fad4:	f3ef 8305 	mrs	r3, IPSR
 800fad8:	60bb      	str	r3, [r7, #8]
  return(result);
 800fada:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d003      	beq.n	800fae8 <osDelay+0x1c>
    stat = osErrorISR;
 800fae0:	f06f 0305 	mvn.w	r3, #5
 800fae4:	60fb      	str	r3, [r7, #12]
 800fae6:	e007      	b.n	800faf8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800fae8:	2300      	movs	r3, #0
 800faea:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d002      	beq.n	800faf8 <osDelay+0x2c>
      vTaskDelay(ticks);
 800faf2:	6878      	ldr	r0, [r7, #4]
 800faf4:	f001 fc9a 	bl	801142c <vTaskDelay>
    }
  }

  return (stat);
 800faf8:	68fb      	ldr	r3, [r7, #12]
}
 800fafa:	4618      	mov	r0, r3
 800fafc:	3710      	adds	r7, #16
 800fafe:	46bd      	mov	sp, r7
 800fb00:	bd80      	pop	{r7, pc}

0800fb02 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800fb02:	b580      	push	{r7, lr}
 800fb04:	b086      	sub	sp, #24
 800fb06:	af00      	add	r7, sp, #0
 800fb08:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800fb0a:	2300      	movs	r3, #0
 800fb0c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fb0e:	f3ef 8305 	mrs	r3, IPSR
 800fb12:	60fb      	str	r3, [r7, #12]
  return(result);
 800fb14:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d12d      	bne.n	800fb76 <osEventFlagsNew+0x74>
    mem = -1;
 800fb1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fb1e:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d015      	beq.n	800fb52 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	689b      	ldr	r3, [r3, #8]
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d006      	beq.n	800fb3c <osEventFlagsNew+0x3a>
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	68db      	ldr	r3, [r3, #12]
 800fb32:	2b1f      	cmp	r3, #31
 800fb34:	d902      	bls.n	800fb3c <osEventFlagsNew+0x3a>
        mem = 1;
 800fb36:	2301      	movs	r3, #1
 800fb38:	613b      	str	r3, [r7, #16]
 800fb3a:	e00c      	b.n	800fb56 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	689b      	ldr	r3, [r3, #8]
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d108      	bne.n	800fb56 <osEventFlagsNew+0x54>
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	68db      	ldr	r3, [r3, #12]
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d104      	bne.n	800fb56 <osEventFlagsNew+0x54>
          mem = 0;
 800fb4c:	2300      	movs	r3, #0
 800fb4e:	613b      	str	r3, [r7, #16]
 800fb50:	e001      	b.n	800fb56 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 800fb52:	2300      	movs	r3, #0
 800fb54:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800fb56:	693b      	ldr	r3, [r7, #16]
 800fb58:	2b01      	cmp	r3, #1
 800fb5a:	d106      	bne.n	800fb6a <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	689b      	ldr	r3, [r3, #8]
 800fb60:	4618      	mov	r0, r3
 800fb62:	f000 fa3d 	bl	800ffe0 <xEventGroupCreateStatic>
 800fb66:	6178      	str	r0, [r7, #20]
 800fb68:	e005      	b.n	800fb76 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 800fb6a:	693b      	ldr	r3, [r7, #16]
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d102      	bne.n	800fb76 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 800fb70:	f000 fa6d 	bl	801004e <xEventGroupCreate>
 800fb74:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800fb76:	697b      	ldr	r3, [r7, #20]
}
 800fb78:	4618      	mov	r0, r3
 800fb7a:	3718      	adds	r7, #24
 800fb7c:	46bd      	mov	sp, r7
 800fb7e:	bd80      	pop	{r7, pc}

0800fb80 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 800fb80:	b580      	push	{r7, lr}
 800fb82:	b086      	sub	sp, #24
 800fb84:	af00      	add	r7, sp, #0
 800fb86:	6078      	str	r0, [r7, #4]
 800fb88:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800fb8e:	693b      	ldr	r3, [r7, #16]
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d004      	beq.n	800fb9e <osEventFlagsSet+0x1e>
 800fb94:	683b      	ldr	r3, [r7, #0]
 800fb96:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d003      	beq.n	800fba6 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 800fb9e:	f06f 0303 	mvn.w	r3, #3
 800fba2:	617b      	str	r3, [r7, #20]
 800fba4:	e028      	b.n	800fbf8 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fba6:	f3ef 8305 	mrs	r3, IPSR
 800fbaa:	60fb      	str	r3, [r7, #12]
  return(result);
 800fbac:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d01d      	beq.n	800fbee <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 800fbb2:	2300      	movs	r3, #0
 800fbb4:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800fbb6:	f107 0308 	add.w	r3, r7, #8
 800fbba:	461a      	mov	r2, r3
 800fbbc:	6839      	ldr	r1, [r7, #0]
 800fbbe:	6938      	ldr	r0, [r7, #16]
 800fbc0:	f000 fbe8 	bl	8010394 <xEventGroupSetBitsFromISR>
 800fbc4:	4603      	mov	r3, r0
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d103      	bne.n	800fbd2 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 800fbca:	f06f 0302 	mvn.w	r3, #2
 800fbce:	617b      	str	r3, [r7, #20]
 800fbd0:	e012      	b.n	800fbf8 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 800fbd2:	683b      	ldr	r3, [r7, #0]
 800fbd4:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 800fbd6:	68bb      	ldr	r3, [r7, #8]
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d00d      	beq.n	800fbf8 <osEventFlagsSet+0x78>
 800fbdc:	4b09      	ldr	r3, [pc, #36]	; (800fc04 <osEventFlagsSet+0x84>)
 800fbde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fbe2:	601a      	str	r2, [r3, #0]
 800fbe4:	f3bf 8f4f 	dsb	sy
 800fbe8:	f3bf 8f6f 	isb	sy
 800fbec:	e004      	b.n	800fbf8 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800fbee:	6839      	ldr	r1, [r7, #0]
 800fbf0:	6938      	ldr	r0, [r7, #16]
 800fbf2:	f000 fb15 	bl	8010220 <xEventGroupSetBits>
 800fbf6:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 800fbf8:	697b      	ldr	r3, [r7, #20]
}
 800fbfa:	4618      	mov	r0, r3
 800fbfc:	3718      	adds	r7, #24
 800fbfe:	46bd      	mov	sp, r7
 800fc00:	bd80      	pop	{r7, pc}
 800fc02:	bf00      	nop
 800fc04:	e000ed04 	.word	0xe000ed04

0800fc08 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 800fc08:	b580      	push	{r7, lr}
 800fc0a:	b08c      	sub	sp, #48	; 0x30
 800fc0c:	af02      	add	r7, sp, #8
 800fc0e:	60f8      	str	r0, [r7, #12]
 800fc10:	60b9      	str	r1, [r7, #8]
 800fc12:	607a      	str	r2, [r7, #4]
 800fc14:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800fc1a:	69bb      	ldr	r3, [r7, #24]
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d004      	beq.n	800fc2a <osEventFlagsWait+0x22>
 800fc20:	68bb      	ldr	r3, [r7, #8]
 800fc22:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d003      	beq.n	800fc32 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 800fc2a:	f06f 0303 	mvn.w	r3, #3
 800fc2e:	61fb      	str	r3, [r7, #28]
 800fc30:	e04b      	b.n	800fcca <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fc32:	f3ef 8305 	mrs	r3, IPSR
 800fc36:	617b      	str	r3, [r7, #20]
  return(result);
 800fc38:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d003      	beq.n	800fc46 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 800fc3e:	f06f 0305 	mvn.w	r3, #5
 800fc42:	61fb      	str	r3, [r7, #28]
 800fc44:	e041      	b.n	800fcca <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	f003 0301 	and.w	r3, r3, #1
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d002      	beq.n	800fc56 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 800fc50:	2301      	movs	r3, #1
 800fc52:	627b      	str	r3, [r7, #36]	; 0x24
 800fc54:	e001      	b.n	800fc5a <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 800fc56:	2300      	movs	r3, #0
 800fc58:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	f003 0302 	and.w	r3, r3, #2
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d002      	beq.n	800fc6a <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 800fc64:	2300      	movs	r3, #0
 800fc66:	623b      	str	r3, [r7, #32]
 800fc68:	e001      	b.n	800fc6e <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 800fc6a:	2301      	movs	r3, #1
 800fc6c:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800fc6e:	683b      	ldr	r3, [r7, #0]
 800fc70:	9300      	str	r3, [sp, #0]
 800fc72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc74:	6a3a      	ldr	r2, [r7, #32]
 800fc76:	68b9      	ldr	r1, [r7, #8]
 800fc78:	69b8      	ldr	r0, [r7, #24]
 800fc7a:	f000 fa03 	bl	8010084 <xEventGroupWaitBits>
 800fc7e:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	f003 0301 	and.w	r3, r3, #1
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d010      	beq.n	800fcac <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 800fc8a:	68ba      	ldr	r2, [r7, #8]
 800fc8c:	69fb      	ldr	r3, [r7, #28]
 800fc8e:	4013      	ands	r3, r2
 800fc90:	68ba      	ldr	r2, [r7, #8]
 800fc92:	429a      	cmp	r2, r3
 800fc94:	d019      	beq.n	800fcca <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800fc96:	683b      	ldr	r3, [r7, #0]
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d003      	beq.n	800fca4 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 800fc9c:	f06f 0301 	mvn.w	r3, #1
 800fca0:	61fb      	str	r3, [r7, #28]
 800fca2:	e012      	b.n	800fcca <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800fca4:	f06f 0302 	mvn.w	r3, #2
 800fca8:	61fb      	str	r3, [r7, #28]
 800fcaa:	e00e      	b.n	800fcca <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 800fcac:	68ba      	ldr	r2, [r7, #8]
 800fcae:	69fb      	ldr	r3, [r7, #28]
 800fcb0:	4013      	ands	r3, r2
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d109      	bne.n	800fcca <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800fcb6:	683b      	ldr	r3, [r7, #0]
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d003      	beq.n	800fcc4 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 800fcbc:	f06f 0301 	mvn.w	r3, #1
 800fcc0:	61fb      	str	r3, [r7, #28]
 800fcc2:	e002      	b.n	800fcca <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800fcc4:	f06f 0302 	mvn.w	r3, #2
 800fcc8:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 800fcca:	69fb      	ldr	r3, [r7, #28]
}
 800fccc:	4618      	mov	r0, r3
 800fcce:	3728      	adds	r7, #40	; 0x28
 800fcd0:	46bd      	mov	sp, r7
 800fcd2:	bd80      	pop	{r7, pc}

0800fcd4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800fcd4:	b580      	push	{r7, lr}
 800fcd6:	b08a      	sub	sp, #40	; 0x28
 800fcd8:	af02      	add	r7, sp, #8
 800fcda:	60f8      	str	r0, [r7, #12]
 800fcdc:	60b9      	str	r1, [r7, #8]
 800fcde:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800fce0:	2300      	movs	r3, #0
 800fce2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fce4:	f3ef 8305 	mrs	r3, IPSR
 800fce8:	613b      	str	r3, [r7, #16]
  return(result);
 800fcea:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d15f      	bne.n	800fdb0 <osMessageQueueNew+0xdc>
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d05c      	beq.n	800fdb0 <osMessageQueueNew+0xdc>
 800fcf6:	68bb      	ldr	r3, [r7, #8]
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d059      	beq.n	800fdb0 <osMessageQueueNew+0xdc>
    mem = -1;
 800fcfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fd00:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d029      	beq.n	800fd5c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	689b      	ldr	r3, [r3, #8]
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d012      	beq.n	800fd36 <osMessageQueueNew+0x62>
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	68db      	ldr	r3, [r3, #12]
 800fd14:	2b4f      	cmp	r3, #79	; 0x4f
 800fd16:	d90e      	bls.n	800fd36 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d00a      	beq.n	800fd36 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	695a      	ldr	r2, [r3, #20]
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	68b9      	ldr	r1, [r7, #8]
 800fd28:	fb01 f303 	mul.w	r3, r1, r3
 800fd2c:	429a      	cmp	r2, r3
 800fd2e:	d302      	bcc.n	800fd36 <osMessageQueueNew+0x62>
        mem = 1;
 800fd30:	2301      	movs	r3, #1
 800fd32:	61bb      	str	r3, [r7, #24]
 800fd34:	e014      	b.n	800fd60 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	689b      	ldr	r3, [r3, #8]
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d110      	bne.n	800fd60 <osMessageQueueNew+0x8c>
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	68db      	ldr	r3, [r3, #12]
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d10c      	bne.n	800fd60 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d108      	bne.n	800fd60 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	695b      	ldr	r3, [r3, #20]
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d104      	bne.n	800fd60 <osMessageQueueNew+0x8c>
          mem = 0;
 800fd56:	2300      	movs	r3, #0
 800fd58:	61bb      	str	r3, [r7, #24]
 800fd5a:	e001      	b.n	800fd60 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800fd5c:	2300      	movs	r3, #0
 800fd5e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800fd60:	69bb      	ldr	r3, [r7, #24]
 800fd62:	2b01      	cmp	r3, #1
 800fd64:	d10b      	bne.n	800fd7e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	691a      	ldr	r2, [r3, #16]
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	689b      	ldr	r3, [r3, #8]
 800fd6e:	2100      	movs	r1, #0
 800fd70:	9100      	str	r1, [sp, #0]
 800fd72:	68b9      	ldr	r1, [r7, #8]
 800fd74:	68f8      	ldr	r0, [r7, #12]
 800fd76:	f000 fc3d 	bl	80105f4 <xQueueGenericCreateStatic>
 800fd7a:	61f8      	str	r0, [r7, #28]
 800fd7c:	e008      	b.n	800fd90 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800fd7e:	69bb      	ldr	r3, [r7, #24]
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d105      	bne.n	800fd90 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800fd84:	2200      	movs	r2, #0
 800fd86:	68b9      	ldr	r1, [r7, #8]
 800fd88:	68f8      	ldr	r0, [r7, #12]
 800fd8a:	f000 fcab 	bl	80106e4 <xQueueGenericCreate>
 800fd8e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800fd90:	69fb      	ldr	r3, [r7, #28]
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d00c      	beq.n	800fdb0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d003      	beq.n	800fda4 <osMessageQueueNew+0xd0>
        name = attr->name;
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	617b      	str	r3, [r7, #20]
 800fda2:	e001      	b.n	800fda8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800fda4:	2300      	movs	r3, #0
 800fda6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800fda8:	6979      	ldr	r1, [r7, #20]
 800fdaa:	69f8      	ldr	r0, [r7, #28]
 800fdac:	f001 f93e 	bl	801102c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800fdb0:	69fb      	ldr	r3, [r7, #28]
}
 800fdb2:	4618      	mov	r0, r3
 800fdb4:	3720      	adds	r7, #32
 800fdb6:	46bd      	mov	sp, r7
 800fdb8:	bd80      	pop	{r7, pc}
	...

0800fdbc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800fdbc:	b580      	push	{r7, lr}
 800fdbe:	b088      	sub	sp, #32
 800fdc0:	af00      	add	r7, sp, #0
 800fdc2:	60f8      	str	r0, [r7, #12]
 800fdc4:	60b9      	str	r1, [r7, #8]
 800fdc6:	603b      	str	r3, [r7, #0]
 800fdc8:	4613      	mov	r3, r2
 800fdca:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800fdd0:	2300      	movs	r3, #0
 800fdd2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fdd4:	f3ef 8305 	mrs	r3, IPSR
 800fdd8:	617b      	str	r3, [r7, #20]
  return(result);
 800fdda:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d028      	beq.n	800fe32 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800fde0:	69bb      	ldr	r3, [r7, #24]
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d005      	beq.n	800fdf2 <osMessageQueuePut+0x36>
 800fde6:	68bb      	ldr	r3, [r7, #8]
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d002      	beq.n	800fdf2 <osMessageQueuePut+0x36>
 800fdec:	683b      	ldr	r3, [r7, #0]
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d003      	beq.n	800fdfa <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800fdf2:	f06f 0303 	mvn.w	r3, #3
 800fdf6:	61fb      	str	r3, [r7, #28]
 800fdf8:	e038      	b.n	800fe6c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800fdfa:	2300      	movs	r3, #0
 800fdfc:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800fdfe:	f107 0210 	add.w	r2, r7, #16
 800fe02:	2300      	movs	r3, #0
 800fe04:	68b9      	ldr	r1, [r7, #8]
 800fe06:	69b8      	ldr	r0, [r7, #24]
 800fe08:	f000 fdc8 	bl	801099c <xQueueGenericSendFromISR>
 800fe0c:	4603      	mov	r3, r0
 800fe0e:	2b01      	cmp	r3, #1
 800fe10:	d003      	beq.n	800fe1a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800fe12:	f06f 0302 	mvn.w	r3, #2
 800fe16:	61fb      	str	r3, [r7, #28]
 800fe18:	e028      	b.n	800fe6c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800fe1a:	693b      	ldr	r3, [r7, #16]
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d025      	beq.n	800fe6c <osMessageQueuePut+0xb0>
 800fe20:	4b15      	ldr	r3, [pc, #84]	; (800fe78 <osMessageQueuePut+0xbc>)
 800fe22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fe26:	601a      	str	r2, [r3, #0]
 800fe28:	f3bf 8f4f 	dsb	sy
 800fe2c:	f3bf 8f6f 	isb	sy
 800fe30:	e01c      	b.n	800fe6c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800fe32:	69bb      	ldr	r3, [r7, #24]
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d002      	beq.n	800fe3e <osMessageQueuePut+0x82>
 800fe38:	68bb      	ldr	r3, [r7, #8]
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d103      	bne.n	800fe46 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800fe3e:	f06f 0303 	mvn.w	r3, #3
 800fe42:	61fb      	str	r3, [r7, #28]
 800fe44:	e012      	b.n	800fe6c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800fe46:	2300      	movs	r3, #0
 800fe48:	683a      	ldr	r2, [r7, #0]
 800fe4a:	68b9      	ldr	r1, [r7, #8]
 800fe4c:	69b8      	ldr	r0, [r7, #24]
 800fe4e:	f000 fca7 	bl	80107a0 <xQueueGenericSend>
 800fe52:	4603      	mov	r3, r0
 800fe54:	2b01      	cmp	r3, #1
 800fe56:	d009      	beq.n	800fe6c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800fe58:	683b      	ldr	r3, [r7, #0]
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d003      	beq.n	800fe66 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800fe5e:	f06f 0301 	mvn.w	r3, #1
 800fe62:	61fb      	str	r3, [r7, #28]
 800fe64:	e002      	b.n	800fe6c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800fe66:	f06f 0302 	mvn.w	r3, #2
 800fe6a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800fe6c:	69fb      	ldr	r3, [r7, #28]
}
 800fe6e:	4618      	mov	r0, r3
 800fe70:	3720      	adds	r7, #32
 800fe72:	46bd      	mov	sp, r7
 800fe74:	bd80      	pop	{r7, pc}
 800fe76:	bf00      	nop
 800fe78:	e000ed04 	.word	0xe000ed04

0800fe7c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800fe7c:	b580      	push	{r7, lr}
 800fe7e:	b088      	sub	sp, #32
 800fe80:	af00      	add	r7, sp, #0
 800fe82:	60f8      	str	r0, [r7, #12]
 800fe84:	60b9      	str	r1, [r7, #8]
 800fe86:	607a      	str	r2, [r7, #4]
 800fe88:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800fe8e:	2300      	movs	r3, #0
 800fe90:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fe92:	f3ef 8305 	mrs	r3, IPSR
 800fe96:	617b      	str	r3, [r7, #20]
  return(result);
 800fe98:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d028      	beq.n	800fef0 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800fe9e:	69bb      	ldr	r3, [r7, #24]
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d005      	beq.n	800feb0 <osMessageQueueGet+0x34>
 800fea4:	68bb      	ldr	r3, [r7, #8]
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d002      	beq.n	800feb0 <osMessageQueueGet+0x34>
 800feaa:	683b      	ldr	r3, [r7, #0]
 800feac:	2b00      	cmp	r3, #0
 800feae:	d003      	beq.n	800feb8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800feb0:	f06f 0303 	mvn.w	r3, #3
 800feb4:	61fb      	str	r3, [r7, #28]
 800feb6:	e037      	b.n	800ff28 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800feb8:	2300      	movs	r3, #0
 800feba:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800febc:	f107 0310 	add.w	r3, r7, #16
 800fec0:	461a      	mov	r2, r3
 800fec2:	68b9      	ldr	r1, [r7, #8]
 800fec4:	69b8      	ldr	r0, [r7, #24]
 800fec6:	f000 fee5 	bl	8010c94 <xQueueReceiveFromISR>
 800feca:	4603      	mov	r3, r0
 800fecc:	2b01      	cmp	r3, #1
 800fece:	d003      	beq.n	800fed8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800fed0:	f06f 0302 	mvn.w	r3, #2
 800fed4:	61fb      	str	r3, [r7, #28]
 800fed6:	e027      	b.n	800ff28 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800fed8:	693b      	ldr	r3, [r7, #16]
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d024      	beq.n	800ff28 <osMessageQueueGet+0xac>
 800fede:	4b15      	ldr	r3, [pc, #84]	; (800ff34 <osMessageQueueGet+0xb8>)
 800fee0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fee4:	601a      	str	r2, [r3, #0]
 800fee6:	f3bf 8f4f 	dsb	sy
 800feea:	f3bf 8f6f 	isb	sy
 800feee:	e01b      	b.n	800ff28 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800fef0:	69bb      	ldr	r3, [r7, #24]
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d002      	beq.n	800fefc <osMessageQueueGet+0x80>
 800fef6:	68bb      	ldr	r3, [r7, #8]
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d103      	bne.n	800ff04 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800fefc:	f06f 0303 	mvn.w	r3, #3
 800ff00:	61fb      	str	r3, [r7, #28]
 800ff02:	e011      	b.n	800ff28 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ff04:	683a      	ldr	r2, [r7, #0]
 800ff06:	68b9      	ldr	r1, [r7, #8]
 800ff08:	69b8      	ldr	r0, [r7, #24]
 800ff0a:	f000 fde3 	bl	8010ad4 <xQueueReceive>
 800ff0e:	4603      	mov	r3, r0
 800ff10:	2b01      	cmp	r3, #1
 800ff12:	d009      	beq.n	800ff28 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800ff14:	683b      	ldr	r3, [r7, #0]
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d003      	beq.n	800ff22 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800ff1a:	f06f 0301 	mvn.w	r3, #1
 800ff1e:	61fb      	str	r3, [r7, #28]
 800ff20:	e002      	b.n	800ff28 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800ff22:	f06f 0302 	mvn.w	r3, #2
 800ff26:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800ff28:	69fb      	ldr	r3, [r7, #28]
}
 800ff2a:	4618      	mov	r0, r3
 800ff2c:	3720      	adds	r7, #32
 800ff2e:	46bd      	mov	sp, r7
 800ff30:	bd80      	pop	{r7, pc}
 800ff32:	bf00      	nop
 800ff34:	e000ed04 	.word	0xe000ed04

0800ff38 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 800ff38:	b580      	push	{r7, lr}
 800ff3a:	b086      	sub	sp, #24
 800ff3c:	af00      	add	r7, sp, #0
 800ff3e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 800ff44:	693b      	ldr	r3, [r7, #16]
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d102      	bne.n	800ff50 <osMessageQueueGetCount+0x18>
    count = 0U;
 800ff4a:	2300      	movs	r3, #0
 800ff4c:	617b      	str	r3, [r7, #20]
 800ff4e:	e00e      	b.n	800ff6e <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ff50:	f3ef 8305 	mrs	r3, IPSR
 800ff54:	60fb      	str	r3, [r7, #12]
  return(result);
 800ff56:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d004      	beq.n	800ff66 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 800ff5c:	6938      	ldr	r0, [r7, #16]
 800ff5e:	f000 ff37 	bl	8010dd0 <uxQueueMessagesWaitingFromISR>
 800ff62:	6178      	str	r0, [r7, #20]
 800ff64:	e003      	b.n	800ff6e <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 800ff66:	6938      	ldr	r0, [r7, #16]
 800ff68:	f000 ff14 	bl	8010d94 <uxQueueMessagesWaiting>
 800ff6c:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 800ff6e:	697b      	ldr	r3, [r7, #20]
}
 800ff70:	4618      	mov	r0, r3
 800ff72:	3718      	adds	r7, #24
 800ff74:	46bd      	mov	sp, r7
 800ff76:	bd80      	pop	{r7, pc}

0800ff78 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ff78:	b480      	push	{r7}
 800ff7a:	b085      	sub	sp, #20
 800ff7c:	af00      	add	r7, sp, #0
 800ff7e:	60f8      	str	r0, [r7, #12]
 800ff80:	60b9      	str	r1, [r7, #8]
 800ff82:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	4a07      	ldr	r2, [pc, #28]	; (800ffa4 <vApplicationGetIdleTaskMemory+0x2c>)
 800ff88:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ff8a:	68bb      	ldr	r3, [r7, #8]
 800ff8c:	4a06      	ldr	r2, [pc, #24]	; (800ffa8 <vApplicationGetIdleTaskMemory+0x30>)
 800ff8e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	2280      	movs	r2, #128	; 0x80
 800ff94:	601a      	str	r2, [r3, #0]
}
 800ff96:	bf00      	nop
 800ff98:	3714      	adds	r7, #20
 800ff9a:	46bd      	mov	sp, r7
 800ff9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffa0:	4770      	bx	lr
 800ffa2:	bf00      	nop
 800ffa4:	24000640 	.word	0x24000640
 800ffa8:	2400069c 	.word	0x2400069c

0800ffac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ffac:	b480      	push	{r7}
 800ffae:	b085      	sub	sp, #20
 800ffb0:	af00      	add	r7, sp, #0
 800ffb2:	60f8      	str	r0, [r7, #12]
 800ffb4:	60b9      	str	r1, [r7, #8]
 800ffb6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	4a07      	ldr	r2, [pc, #28]	; (800ffd8 <vApplicationGetTimerTaskMemory+0x2c>)
 800ffbc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ffbe:	68bb      	ldr	r3, [r7, #8]
 800ffc0:	4a06      	ldr	r2, [pc, #24]	; (800ffdc <vApplicationGetTimerTaskMemory+0x30>)
 800ffc2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ffca:	601a      	str	r2, [r3, #0]
}
 800ffcc:	bf00      	nop
 800ffce:	3714      	adds	r7, #20
 800ffd0:	46bd      	mov	sp, r7
 800ffd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffd6:	4770      	bx	lr
 800ffd8:	2400089c 	.word	0x2400089c
 800ffdc:	240008f8 	.word	0x240008f8

0800ffe0 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800ffe0:	b580      	push	{r7, lr}
 800ffe2:	b086      	sub	sp, #24
 800ffe4:	af00      	add	r7, sp, #0
 800ffe6:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d10a      	bne.n	8010004 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ffee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fff2:	f383 8811 	msr	BASEPRI, r3
 800fff6:	f3bf 8f6f 	isb	sy
 800fffa:	f3bf 8f4f 	dsb	sy
 800fffe:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8010000:	bf00      	nop
 8010002:	e7fe      	b.n	8010002 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8010004:	2320      	movs	r3, #32
 8010006:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8010008:	68bb      	ldr	r3, [r7, #8]
 801000a:	2b20      	cmp	r3, #32
 801000c:	d00a      	beq.n	8010024 <xEventGroupCreateStatic+0x44>
	__asm volatile
 801000e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010012:	f383 8811 	msr	BASEPRI, r3
 8010016:	f3bf 8f6f 	isb	sy
 801001a:	f3bf 8f4f 	dsb	sy
 801001e:	60fb      	str	r3, [r7, #12]
}
 8010020:	bf00      	nop
 8010022:	e7fe      	b.n	8010022 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8010028:	697b      	ldr	r3, [r7, #20]
 801002a:	2b00      	cmp	r3, #0
 801002c:	d00a      	beq.n	8010044 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 801002e:	697b      	ldr	r3, [r7, #20]
 8010030:	2200      	movs	r2, #0
 8010032:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8010034:	697b      	ldr	r3, [r7, #20]
 8010036:	3304      	adds	r3, #4
 8010038:	4618      	mov	r0, r3
 801003a:	f000 f9bf 	bl	80103bc <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 801003e:	697b      	ldr	r3, [r7, #20]
 8010040:	2201      	movs	r2, #1
 8010042:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8010044:	697b      	ldr	r3, [r7, #20]
	}
 8010046:	4618      	mov	r0, r3
 8010048:	3718      	adds	r7, #24
 801004a:	46bd      	mov	sp, r7
 801004c:	bd80      	pop	{r7, pc}

0801004e <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 801004e:	b580      	push	{r7, lr}
 8010050:	b082      	sub	sp, #8
 8010052:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8010054:	2020      	movs	r0, #32
 8010056:	f002 fdb7 	bl	8012bc8 <pvPortMalloc>
 801005a:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	2b00      	cmp	r3, #0
 8010060:	d00a      	beq.n	8010078 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	2200      	movs	r2, #0
 8010066:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	3304      	adds	r3, #4
 801006c:	4618      	mov	r0, r3
 801006e:	f000 f9a5 	bl	80103bc <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	2200      	movs	r2, #0
 8010076:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8010078:	687b      	ldr	r3, [r7, #4]
	}
 801007a:	4618      	mov	r0, r3
 801007c:	3708      	adds	r7, #8
 801007e:	46bd      	mov	sp, r7
 8010080:	bd80      	pop	{r7, pc}
	...

08010084 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8010084:	b580      	push	{r7, lr}
 8010086:	b090      	sub	sp, #64	; 0x40
 8010088:	af00      	add	r7, sp, #0
 801008a:	60f8      	str	r0, [r7, #12]
 801008c:	60b9      	str	r1, [r7, #8]
 801008e:	607a      	str	r2, [r7, #4]
 8010090:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8010096:	2300      	movs	r3, #0
 8010098:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 801009a:	2300      	movs	r3, #0
 801009c:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d10a      	bne.n	80100ba <xEventGroupWaitBits+0x36>
	__asm volatile
 80100a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100a8:	f383 8811 	msr	BASEPRI, r3
 80100ac:	f3bf 8f6f 	isb	sy
 80100b0:	f3bf 8f4f 	dsb	sy
 80100b4:	623b      	str	r3, [r7, #32]
}
 80100b6:	bf00      	nop
 80100b8:	e7fe      	b.n	80100b8 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80100ba:	68bb      	ldr	r3, [r7, #8]
 80100bc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d00a      	beq.n	80100da <xEventGroupWaitBits+0x56>
	__asm volatile
 80100c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100c8:	f383 8811 	msr	BASEPRI, r3
 80100cc:	f3bf 8f6f 	isb	sy
 80100d0:	f3bf 8f4f 	dsb	sy
 80100d4:	61fb      	str	r3, [r7, #28]
}
 80100d6:	bf00      	nop
 80100d8:	e7fe      	b.n	80100d8 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 80100da:	68bb      	ldr	r3, [r7, #8]
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d10a      	bne.n	80100f6 <xEventGroupWaitBits+0x72>
	__asm volatile
 80100e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100e4:	f383 8811 	msr	BASEPRI, r3
 80100e8:	f3bf 8f6f 	isb	sy
 80100ec:	f3bf 8f4f 	dsb	sy
 80100f0:	61bb      	str	r3, [r7, #24]
}
 80100f2:	bf00      	nop
 80100f4:	e7fe      	b.n	80100f4 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80100f6:	f001 feb3 	bl	8011e60 <xTaskGetSchedulerState>
 80100fa:	4603      	mov	r3, r0
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d102      	bne.n	8010106 <xEventGroupWaitBits+0x82>
 8010100:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010102:	2b00      	cmp	r3, #0
 8010104:	d101      	bne.n	801010a <xEventGroupWaitBits+0x86>
 8010106:	2301      	movs	r3, #1
 8010108:	e000      	b.n	801010c <xEventGroupWaitBits+0x88>
 801010a:	2300      	movs	r3, #0
 801010c:	2b00      	cmp	r3, #0
 801010e:	d10a      	bne.n	8010126 <xEventGroupWaitBits+0xa2>
	__asm volatile
 8010110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010114:	f383 8811 	msr	BASEPRI, r3
 8010118:	f3bf 8f6f 	isb	sy
 801011c:	f3bf 8f4f 	dsb	sy
 8010120:	617b      	str	r3, [r7, #20]
}
 8010122:	bf00      	nop
 8010124:	e7fe      	b.n	8010124 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8010126:	f001 fa1b 	bl	8011560 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 801012a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8010130:	683a      	ldr	r2, [r7, #0]
 8010132:	68b9      	ldr	r1, [r7, #8]
 8010134:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010136:	f000 f90b 	bl	8010350 <prvTestWaitCondition>
 801013a:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 801013c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801013e:	2b00      	cmp	r3, #0
 8010140:	d00e      	beq.n	8010160 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8010142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010144:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8010146:	2300      	movs	r3, #0
 8010148:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	2b00      	cmp	r3, #0
 801014e:	d028      	beq.n	80101a2 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8010150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010152:	681a      	ldr	r2, [r3, #0]
 8010154:	68bb      	ldr	r3, [r7, #8]
 8010156:	43db      	mvns	r3, r3
 8010158:	401a      	ands	r2, r3
 801015a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801015c:	601a      	str	r2, [r3, #0]
 801015e:	e020      	b.n	80101a2 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8010160:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010162:	2b00      	cmp	r3, #0
 8010164:	d104      	bne.n	8010170 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8010166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010168:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 801016a:	2301      	movs	r3, #1
 801016c:	633b      	str	r3, [r7, #48]	; 0x30
 801016e:	e018      	b.n	80101a2 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	2b00      	cmp	r3, #0
 8010174:	d003      	beq.n	801017e <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8010176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010178:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801017c:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 801017e:	683b      	ldr	r3, [r7, #0]
 8010180:	2b00      	cmp	r3, #0
 8010182:	d003      	beq.n	801018c <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8010184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010186:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801018a:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 801018c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801018e:	1d18      	adds	r0, r3, #4
 8010190:	68ba      	ldr	r2, [r7, #8]
 8010192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010194:	4313      	orrs	r3, r2
 8010196:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010198:	4619      	mov	r1, r3
 801019a:	f001 fbd9 	bl	8011950 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 801019e:	2300      	movs	r3, #0
 80101a0:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80101a2:	f001 f9eb 	bl	801157c <xTaskResumeAll>
 80101a6:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 80101a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d031      	beq.n	8010212 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 80101ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d107      	bne.n	80101c4 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 80101b4:	4b19      	ldr	r3, [pc, #100]	; (801021c <xEventGroupWaitBits+0x198>)
 80101b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80101ba:	601a      	str	r2, [r3, #0]
 80101bc:	f3bf 8f4f 	dsb	sy
 80101c0:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80101c4:	f001 fed8 	bl	8011f78 <uxTaskResetEventItemValue>
 80101c8:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80101ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80101cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d11a      	bne.n	801020a <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 80101d4:	f002 fbd6 	bl	8012984 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80101d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101da:	681b      	ldr	r3, [r3, #0]
 80101dc:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80101de:	683a      	ldr	r2, [r7, #0]
 80101e0:	68b9      	ldr	r1, [r7, #8]
 80101e2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80101e4:	f000 f8b4 	bl	8010350 <prvTestWaitCondition>
 80101e8:	4603      	mov	r3, r0
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d009      	beq.n	8010202 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d006      	beq.n	8010202 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80101f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101f6:	681a      	ldr	r2, [r3, #0]
 80101f8:	68bb      	ldr	r3, [r7, #8]
 80101fa:	43db      	mvns	r3, r3
 80101fc:	401a      	ands	r2, r3
 80101fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010200:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8010202:	2301      	movs	r3, #1
 8010204:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8010206:	f002 fbed 	bl	80129e4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 801020a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801020c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8010210:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8010212:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8010214:	4618      	mov	r0, r3
 8010216:	3740      	adds	r7, #64	; 0x40
 8010218:	46bd      	mov	sp, r7
 801021a:	bd80      	pop	{r7, pc}
 801021c:	e000ed04 	.word	0xe000ed04

08010220 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8010220:	b580      	push	{r7, lr}
 8010222:	b08e      	sub	sp, #56	; 0x38
 8010224:	af00      	add	r7, sp, #0
 8010226:	6078      	str	r0, [r7, #4]
 8010228:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 801022a:	2300      	movs	r3, #0
 801022c:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8010232:	2300      	movs	r3, #0
 8010234:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	2b00      	cmp	r3, #0
 801023a:	d10a      	bne.n	8010252 <xEventGroupSetBits+0x32>
	__asm volatile
 801023c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010240:	f383 8811 	msr	BASEPRI, r3
 8010244:	f3bf 8f6f 	isb	sy
 8010248:	f3bf 8f4f 	dsb	sy
 801024c:	613b      	str	r3, [r7, #16]
}
 801024e:	bf00      	nop
 8010250:	e7fe      	b.n	8010250 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8010252:	683b      	ldr	r3, [r7, #0]
 8010254:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8010258:	2b00      	cmp	r3, #0
 801025a:	d00a      	beq.n	8010272 <xEventGroupSetBits+0x52>
	__asm volatile
 801025c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010260:	f383 8811 	msr	BASEPRI, r3
 8010264:	f3bf 8f6f 	isb	sy
 8010268:	f3bf 8f4f 	dsb	sy
 801026c:	60fb      	str	r3, [r7, #12]
}
 801026e:	bf00      	nop
 8010270:	e7fe      	b.n	8010270 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8010272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010274:	3304      	adds	r3, #4
 8010276:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801027a:	3308      	adds	r3, #8
 801027c:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 801027e:	f001 f96f 	bl	8011560 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8010282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010284:	68db      	ldr	r3, [r3, #12]
 8010286:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8010288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801028a:	681a      	ldr	r2, [r3, #0]
 801028c:	683b      	ldr	r3, [r7, #0]
 801028e:	431a      	orrs	r2, r3
 8010290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010292:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8010294:	e03c      	b.n	8010310 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8010296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010298:	685b      	ldr	r3, [r3, #4]
 801029a:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 801029c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801029e:	681b      	ldr	r3, [r3, #0]
 80102a0:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80102a2:	2300      	movs	r3, #0
 80102a4:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80102a6:	69bb      	ldr	r3, [r7, #24]
 80102a8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80102ac:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80102ae:	69bb      	ldr	r3, [r7, #24]
 80102b0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80102b4:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80102b6:	697b      	ldr	r3, [r7, #20]
 80102b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d108      	bne.n	80102d2 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80102c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102c2:	681a      	ldr	r2, [r3, #0]
 80102c4:	69bb      	ldr	r3, [r7, #24]
 80102c6:	4013      	ands	r3, r2
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d00b      	beq.n	80102e4 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 80102cc:	2301      	movs	r3, #1
 80102ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80102d0:	e008      	b.n	80102e4 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80102d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102d4:	681a      	ldr	r2, [r3, #0]
 80102d6:	69bb      	ldr	r3, [r7, #24]
 80102d8:	4013      	ands	r3, r2
 80102da:	69ba      	ldr	r2, [r7, #24]
 80102dc:	429a      	cmp	r2, r3
 80102de:	d101      	bne.n	80102e4 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80102e0:	2301      	movs	r3, #1
 80102e2:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80102e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d010      	beq.n	801030c <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80102ea:	697b      	ldr	r3, [r7, #20]
 80102ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d003      	beq.n	80102fc <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80102f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80102f6:	69bb      	ldr	r3, [r7, #24]
 80102f8:	4313      	orrs	r3, r2
 80102fa:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80102fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102fe:	681b      	ldr	r3, [r3, #0]
 8010300:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8010304:	4619      	mov	r1, r3
 8010306:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010308:	f001 fbee 	bl	8011ae8 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 801030c:	69fb      	ldr	r3, [r7, #28]
 801030e:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8010310:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010312:	6a3b      	ldr	r3, [r7, #32]
 8010314:	429a      	cmp	r2, r3
 8010316:	d1be      	bne.n	8010296 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8010318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801031a:	681a      	ldr	r2, [r3, #0]
 801031c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801031e:	43db      	mvns	r3, r3
 8010320:	401a      	ands	r2, r3
 8010322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010324:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8010326:	f001 f929 	bl	801157c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 801032a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801032c:	681b      	ldr	r3, [r3, #0]
}
 801032e:	4618      	mov	r0, r3
 8010330:	3738      	adds	r7, #56	; 0x38
 8010332:	46bd      	mov	sp, r7
 8010334:	bd80      	pop	{r7, pc}

08010336 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8010336:	b580      	push	{r7, lr}
 8010338:	b082      	sub	sp, #8
 801033a:	af00      	add	r7, sp, #0
 801033c:	6078      	str	r0, [r7, #4]
 801033e:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8010340:	6839      	ldr	r1, [r7, #0]
 8010342:	6878      	ldr	r0, [r7, #4]
 8010344:	f7ff ff6c 	bl	8010220 <xEventGroupSetBits>
}
 8010348:	bf00      	nop
 801034a:	3708      	adds	r7, #8
 801034c:	46bd      	mov	sp, r7
 801034e:	bd80      	pop	{r7, pc}

08010350 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8010350:	b480      	push	{r7}
 8010352:	b087      	sub	sp, #28
 8010354:	af00      	add	r7, sp, #0
 8010356:	60f8      	str	r0, [r7, #12]
 8010358:	60b9      	str	r1, [r7, #8]
 801035a:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 801035c:	2300      	movs	r3, #0
 801035e:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	2b00      	cmp	r3, #0
 8010364:	d107      	bne.n	8010376 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8010366:	68fa      	ldr	r2, [r7, #12]
 8010368:	68bb      	ldr	r3, [r7, #8]
 801036a:	4013      	ands	r3, r2
 801036c:	2b00      	cmp	r3, #0
 801036e:	d00a      	beq.n	8010386 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8010370:	2301      	movs	r3, #1
 8010372:	617b      	str	r3, [r7, #20]
 8010374:	e007      	b.n	8010386 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8010376:	68fa      	ldr	r2, [r7, #12]
 8010378:	68bb      	ldr	r3, [r7, #8]
 801037a:	4013      	ands	r3, r2
 801037c:	68ba      	ldr	r2, [r7, #8]
 801037e:	429a      	cmp	r2, r3
 8010380:	d101      	bne.n	8010386 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8010382:	2301      	movs	r3, #1
 8010384:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8010386:	697b      	ldr	r3, [r7, #20]
}
 8010388:	4618      	mov	r0, r3
 801038a:	371c      	adds	r7, #28
 801038c:	46bd      	mov	sp, r7
 801038e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010392:	4770      	bx	lr

08010394 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8010394:	b580      	push	{r7, lr}
 8010396:	b086      	sub	sp, #24
 8010398:	af00      	add	r7, sp, #0
 801039a:	60f8      	str	r0, [r7, #12]
 801039c:	60b9      	str	r1, [r7, #8]
 801039e:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	68ba      	ldr	r2, [r7, #8]
 80103a4:	68f9      	ldr	r1, [r7, #12]
 80103a6:	4804      	ldr	r0, [pc, #16]	; (80103b8 <xEventGroupSetBitsFromISR+0x24>)
 80103a8:	f002 f9a0 	bl	80126ec <xTimerPendFunctionCallFromISR>
 80103ac:	6178      	str	r0, [r7, #20]

		return xReturn;
 80103ae:	697b      	ldr	r3, [r7, #20]
	}
 80103b0:	4618      	mov	r0, r3
 80103b2:	3718      	adds	r7, #24
 80103b4:	46bd      	mov	sp, r7
 80103b6:	bd80      	pop	{r7, pc}
 80103b8:	08010337 	.word	0x08010337

080103bc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80103bc:	b480      	push	{r7}
 80103be:	b083      	sub	sp, #12
 80103c0:	af00      	add	r7, sp, #0
 80103c2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	f103 0208 	add.w	r2, r3, #8
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80103d4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	f103 0208 	add.w	r2, r3, #8
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	f103 0208 	add.w	r2, r3, #8
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	2200      	movs	r2, #0
 80103ee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80103f0:	bf00      	nop
 80103f2:	370c      	adds	r7, #12
 80103f4:	46bd      	mov	sp, r7
 80103f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103fa:	4770      	bx	lr

080103fc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80103fc:	b480      	push	{r7}
 80103fe:	b083      	sub	sp, #12
 8010400:	af00      	add	r7, sp, #0
 8010402:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	2200      	movs	r2, #0
 8010408:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801040a:	bf00      	nop
 801040c:	370c      	adds	r7, #12
 801040e:	46bd      	mov	sp, r7
 8010410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010414:	4770      	bx	lr

08010416 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010416:	b480      	push	{r7}
 8010418:	b085      	sub	sp, #20
 801041a:	af00      	add	r7, sp, #0
 801041c:	6078      	str	r0, [r7, #4]
 801041e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	685b      	ldr	r3, [r3, #4]
 8010424:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8010426:	683b      	ldr	r3, [r7, #0]
 8010428:	68fa      	ldr	r2, [r7, #12]
 801042a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801042c:	68fb      	ldr	r3, [r7, #12]
 801042e:	689a      	ldr	r2, [r3, #8]
 8010430:	683b      	ldr	r3, [r7, #0]
 8010432:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	689b      	ldr	r3, [r3, #8]
 8010438:	683a      	ldr	r2, [r7, #0]
 801043a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801043c:	68fb      	ldr	r3, [r7, #12]
 801043e:	683a      	ldr	r2, [r7, #0]
 8010440:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8010442:	683b      	ldr	r3, [r7, #0]
 8010444:	687a      	ldr	r2, [r7, #4]
 8010446:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	1c5a      	adds	r2, r3, #1
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	601a      	str	r2, [r3, #0]
}
 8010452:	bf00      	nop
 8010454:	3714      	adds	r7, #20
 8010456:	46bd      	mov	sp, r7
 8010458:	f85d 7b04 	ldr.w	r7, [sp], #4
 801045c:	4770      	bx	lr

0801045e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801045e:	b480      	push	{r7}
 8010460:	b085      	sub	sp, #20
 8010462:	af00      	add	r7, sp, #0
 8010464:	6078      	str	r0, [r7, #4]
 8010466:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010468:	683b      	ldr	r3, [r7, #0]
 801046a:	681b      	ldr	r3, [r3, #0]
 801046c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801046e:	68bb      	ldr	r3, [r7, #8]
 8010470:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010474:	d103      	bne.n	801047e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	691b      	ldr	r3, [r3, #16]
 801047a:	60fb      	str	r3, [r7, #12]
 801047c:	e00c      	b.n	8010498 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	3308      	adds	r3, #8
 8010482:	60fb      	str	r3, [r7, #12]
 8010484:	e002      	b.n	801048c <vListInsert+0x2e>
 8010486:	68fb      	ldr	r3, [r7, #12]
 8010488:	685b      	ldr	r3, [r3, #4]
 801048a:	60fb      	str	r3, [r7, #12]
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	685b      	ldr	r3, [r3, #4]
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	68ba      	ldr	r2, [r7, #8]
 8010494:	429a      	cmp	r2, r3
 8010496:	d2f6      	bcs.n	8010486 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	685a      	ldr	r2, [r3, #4]
 801049c:	683b      	ldr	r3, [r7, #0]
 801049e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80104a0:	683b      	ldr	r3, [r7, #0]
 80104a2:	685b      	ldr	r3, [r3, #4]
 80104a4:	683a      	ldr	r2, [r7, #0]
 80104a6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80104a8:	683b      	ldr	r3, [r7, #0]
 80104aa:	68fa      	ldr	r2, [r7, #12]
 80104ac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80104ae:	68fb      	ldr	r3, [r7, #12]
 80104b0:	683a      	ldr	r2, [r7, #0]
 80104b2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80104b4:	683b      	ldr	r3, [r7, #0]
 80104b6:	687a      	ldr	r2, [r7, #4]
 80104b8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	1c5a      	adds	r2, r3, #1
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	601a      	str	r2, [r3, #0]
}
 80104c4:	bf00      	nop
 80104c6:	3714      	adds	r7, #20
 80104c8:	46bd      	mov	sp, r7
 80104ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ce:	4770      	bx	lr

080104d0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80104d0:	b480      	push	{r7}
 80104d2:	b085      	sub	sp, #20
 80104d4:	af00      	add	r7, sp, #0
 80104d6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	691b      	ldr	r3, [r3, #16]
 80104dc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	685b      	ldr	r3, [r3, #4]
 80104e2:	687a      	ldr	r2, [r7, #4]
 80104e4:	6892      	ldr	r2, [r2, #8]
 80104e6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	689b      	ldr	r3, [r3, #8]
 80104ec:	687a      	ldr	r2, [r7, #4]
 80104ee:	6852      	ldr	r2, [r2, #4]
 80104f0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80104f2:	68fb      	ldr	r3, [r7, #12]
 80104f4:	685b      	ldr	r3, [r3, #4]
 80104f6:	687a      	ldr	r2, [r7, #4]
 80104f8:	429a      	cmp	r2, r3
 80104fa:	d103      	bne.n	8010504 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	689a      	ldr	r2, [r3, #8]
 8010500:	68fb      	ldr	r3, [r7, #12]
 8010502:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	2200      	movs	r2, #0
 8010508:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801050a:	68fb      	ldr	r3, [r7, #12]
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	1e5a      	subs	r2, r3, #1
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	681b      	ldr	r3, [r3, #0]
}
 8010518:	4618      	mov	r0, r3
 801051a:	3714      	adds	r7, #20
 801051c:	46bd      	mov	sp, r7
 801051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010522:	4770      	bx	lr

08010524 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8010524:	b580      	push	{r7, lr}
 8010526:	b084      	sub	sp, #16
 8010528:	af00      	add	r7, sp, #0
 801052a:	6078      	str	r0, [r7, #4]
 801052c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010532:	68fb      	ldr	r3, [r7, #12]
 8010534:	2b00      	cmp	r3, #0
 8010536:	d10a      	bne.n	801054e <xQueueGenericReset+0x2a>
	__asm volatile
 8010538:	f04f 0350 	mov.w	r3, #80	; 0x50
 801053c:	f383 8811 	msr	BASEPRI, r3
 8010540:	f3bf 8f6f 	isb	sy
 8010544:	f3bf 8f4f 	dsb	sy
 8010548:	60bb      	str	r3, [r7, #8]
}
 801054a:	bf00      	nop
 801054c:	e7fe      	b.n	801054c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801054e:	f002 fa19 	bl	8012984 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	681a      	ldr	r2, [r3, #0]
 8010556:	68fb      	ldr	r3, [r7, #12]
 8010558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801055a:	68f9      	ldr	r1, [r7, #12]
 801055c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801055e:	fb01 f303 	mul.w	r3, r1, r3
 8010562:	441a      	add	r2, r3
 8010564:	68fb      	ldr	r3, [r7, #12]
 8010566:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010568:	68fb      	ldr	r3, [r7, #12]
 801056a:	2200      	movs	r2, #0
 801056c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801056e:	68fb      	ldr	r3, [r7, #12]
 8010570:	681a      	ldr	r2, [r3, #0]
 8010572:	68fb      	ldr	r3, [r7, #12]
 8010574:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	681a      	ldr	r2, [r3, #0]
 801057a:	68fb      	ldr	r3, [r7, #12]
 801057c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801057e:	3b01      	subs	r3, #1
 8010580:	68f9      	ldr	r1, [r7, #12]
 8010582:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010584:	fb01 f303 	mul.w	r3, r1, r3
 8010588:	441a      	add	r2, r3
 801058a:	68fb      	ldr	r3, [r7, #12]
 801058c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801058e:	68fb      	ldr	r3, [r7, #12]
 8010590:	22ff      	movs	r2, #255	; 0xff
 8010592:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	22ff      	movs	r2, #255	; 0xff
 801059a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801059e:	683b      	ldr	r3, [r7, #0]
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d114      	bne.n	80105ce <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80105a4:	68fb      	ldr	r3, [r7, #12]
 80105a6:	691b      	ldr	r3, [r3, #16]
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d01a      	beq.n	80105e2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	3310      	adds	r3, #16
 80105b0:	4618      	mov	r0, r3
 80105b2:	f001 fa35 	bl	8011a20 <xTaskRemoveFromEventList>
 80105b6:	4603      	mov	r3, r0
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d012      	beq.n	80105e2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80105bc:	4b0c      	ldr	r3, [pc, #48]	; (80105f0 <xQueueGenericReset+0xcc>)
 80105be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80105c2:	601a      	str	r2, [r3, #0]
 80105c4:	f3bf 8f4f 	dsb	sy
 80105c8:	f3bf 8f6f 	isb	sy
 80105cc:	e009      	b.n	80105e2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80105ce:	68fb      	ldr	r3, [r7, #12]
 80105d0:	3310      	adds	r3, #16
 80105d2:	4618      	mov	r0, r3
 80105d4:	f7ff fef2 	bl	80103bc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	3324      	adds	r3, #36	; 0x24
 80105dc:	4618      	mov	r0, r3
 80105de:	f7ff feed 	bl	80103bc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80105e2:	f002 f9ff 	bl	80129e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80105e6:	2301      	movs	r3, #1
}
 80105e8:	4618      	mov	r0, r3
 80105ea:	3710      	adds	r7, #16
 80105ec:	46bd      	mov	sp, r7
 80105ee:	bd80      	pop	{r7, pc}
 80105f0:	e000ed04 	.word	0xe000ed04

080105f4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80105f4:	b580      	push	{r7, lr}
 80105f6:	b08e      	sub	sp, #56	; 0x38
 80105f8:	af02      	add	r7, sp, #8
 80105fa:	60f8      	str	r0, [r7, #12]
 80105fc:	60b9      	str	r1, [r7, #8]
 80105fe:	607a      	str	r2, [r7, #4]
 8010600:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010602:	68fb      	ldr	r3, [r7, #12]
 8010604:	2b00      	cmp	r3, #0
 8010606:	d10a      	bne.n	801061e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8010608:	f04f 0350 	mov.w	r3, #80	; 0x50
 801060c:	f383 8811 	msr	BASEPRI, r3
 8010610:	f3bf 8f6f 	isb	sy
 8010614:	f3bf 8f4f 	dsb	sy
 8010618:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801061a:	bf00      	nop
 801061c:	e7fe      	b.n	801061c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801061e:	683b      	ldr	r3, [r7, #0]
 8010620:	2b00      	cmp	r3, #0
 8010622:	d10a      	bne.n	801063a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8010624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010628:	f383 8811 	msr	BASEPRI, r3
 801062c:	f3bf 8f6f 	isb	sy
 8010630:	f3bf 8f4f 	dsb	sy
 8010634:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010636:	bf00      	nop
 8010638:	e7fe      	b.n	8010638 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	2b00      	cmp	r3, #0
 801063e:	d002      	beq.n	8010646 <xQueueGenericCreateStatic+0x52>
 8010640:	68bb      	ldr	r3, [r7, #8]
 8010642:	2b00      	cmp	r3, #0
 8010644:	d001      	beq.n	801064a <xQueueGenericCreateStatic+0x56>
 8010646:	2301      	movs	r3, #1
 8010648:	e000      	b.n	801064c <xQueueGenericCreateStatic+0x58>
 801064a:	2300      	movs	r3, #0
 801064c:	2b00      	cmp	r3, #0
 801064e:	d10a      	bne.n	8010666 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8010650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010654:	f383 8811 	msr	BASEPRI, r3
 8010658:	f3bf 8f6f 	isb	sy
 801065c:	f3bf 8f4f 	dsb	sy
 8010660:	623b      	str	r3, [r7, #32]
}
 8010662:	bf00      	nop
 8010664:	e7fe      	b.n	8010664 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	2b00      	cmp	r3, #0
 801066a:	d102      	bne.n	8010672 <xQueueGenericCreateStatic+0x7e>
 801066c:	68bb      	ldr	r3, [r7, #8]
 801066e:	2b00      	cmp	r3, #0
 8010670:	d101      	bne.n	8010676 <xQueueGenericCreateStatic+0x82>
 8010672:	2301      	movs	r3, #1
 8010674:	e000      	b.n	8010678 <xQueueGenericCreateStatic+0x84>
 8010676:	2300      	movs	r3, #0
 8010678:	2b00      	cmp	r3, #0
 801067a:	d10a      	bne.n	8010692 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 801067c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010680:	f383 8811 	msr	BASEPRI, r3
 8010684:	f3bf 8f6f 	isb	sy
 8010688:	f3bf 8f4f 	dsb	sy
 801068c:	61fb      	str	r3, [r7, #28]
}
 801068e:	bf00      	nop
 8010690:	e7fe      	b.n	8010690 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8010692:	2350      	movs	r3, #80	; 0x50
 8010694:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8010696:	697b      	ldr	r3, [r7, #20]
 8010698:	2b50      	cmp	r3, #80	; 0x50
 801069a:	d00a      	beq.n	80106b2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 801069c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106a0:	f383 8811 	msr	BASEPRI, r3
 80106a4:	f3bf 8f6f 	isb	sy
 80106a8:	f3bf 8f4f 	dsb	sy
 80106ac:	61bb      	str	r3, [r7, #24]
}
 80106ae:	bf00      	nop
 80106b0:	e7fe      	b.n	80106b0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80106b2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80106b4:	683b      	ldr	r3, [r7, #0]
 80106b6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80106b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	d00d      	beq.n	80106da <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80106be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106c0:	2201      	movs	r2, #1
 80106c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80106c6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80106ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106cc:	9300      	str	r3, [sp, #0]
 80106ce:	4613      	mov	r3, r2
 80106d0:	687a      	ldr	r2, [r7, #4]
 80106d2:	68b9      	ldr	r1, [r7, #8]
 80106d4:	68f8      	ldr	r0, [r7, #12]
 80106d6:	f000 f83f 	bl	8010758 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80106da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80106dc:	4618      	mov	r0, r3
 80106de:	3730      	adds	r7, #48	; 0x30
 80106e0:	46bd      	mov	sp, r7
 80106e2:	bd80      	pop	{r7, pc}

080106e4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80106e4:	b580      	push	{r7, lr}
 80106e6:	b08a      	sub	sp, #40	; 0x28
 80106e8:	af02      	add	r7, sp, #8
 80106ea:	60f8      	str	r0, [r7, #12]
 80106ec:	60b9      	str	r1, [r7, #8]
 80106ee:	4613      	mov	r3, r2
 80106f0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80106f2:	68fb      	ldr	r3, [r7, #12]
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d10a      	bne.n	801070e <xQueueGenericCreate+0x2a>
	__asm volatile
 80106f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106fc:	f383 8811 	msr	BASEPRI, r3
 8010700:	f3bf 8f6f 	isb	sy
 8010704:	f3bf 8f4f 	dsb	sy
 8010708:	613b      	str	r3, [r7, #16]
}
 801070a:	bf00      	nop
 801070c:	e7fe      	b.n	801070c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	68ba      	ldr	r2, [r7, #8]
 8010712:	fb02 f303 	mul.w	r3, r2, r3
 8010716:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8010718:	69fb      	ldr	r3, [r7, #28]
 801071a:	3350      	adds	r3, #80	; 0x50
 801071c:	4618      	mov	r0, r3
 801071e:	f002 fa53 	bl	8012bc8 <pvPortMalloc>
 8010722:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8010724:	69bb      	ldr	r3, [r7, #24]
 8010726:	2b00      	cmp	r3, #0
 8010728:	d011      	beq.n	801074e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801072a:	69bb      	ldr	r3, [r7, #24]
 801072c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801072e:	697b      	ldr	r3, [r7, #20]
 8010730:	3350      	adds	r3, #80	; 0x50
 8010732:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8010734:	69bb      	ldr	r3, [r7, #24]
 8010736:	2200      	movs	r2, #0
 8010738:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801073c:	79fa      	ldrb	r2, [r7, #7]
 801073e:	69bb      	ldr	r3, [r7, #24]
 8010740:	9300      	str	r3, [sp, #0]
 8010742:	4613      	mov	r3, r2
 8010744:	697a      	ldr	r2, [r7, #20]
 8010746:	68b9      	ldr	r1, [r7, #8]
 8010748:	68f8      	ldr	r0, [r7, #12]
 801074a:	f000 f805 	bl	8010758 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801074e:	69bb      	ldr	r3, [r7, #24]
	}
 8010750:	4618      	mov	r0, r3
 8010752:	3720      	adds	r7, #32
 8010754:	46bd      	mov	sp, r7
 8010756:	bd80      	pop	{r7, pc}

08010758 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8010758:	b580      	push	{r7, lr}
 801075a:	b084      	sub	sp, #16
 801075c:	af00      	add	r7, sp, #0
 801075e:	60f8      	str	r0, [r7, #12]
 8010760:	60b9      	str	r1, [r7, #8]
 8010762:	607a      	str	r2, [r7, #4]
 8010764:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8010766:	68bb      	ldr	r3, [r7, #8]
 8010768:	2b00      	cmp	r3, #0
 801076a:	d103      	bne.n	8010774 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801076c:	69bb      	ldr	r3, [r7, #24]
 801076e:	69ba      	ldr	r2, [r7, #24]
 8010770:	601a      	str	r2, [r3, #0]
 8010772:	e002      	b.n	801077a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8010774:	69bb      	ldr	r3, [r7, #24]
 8010776:	687a      	ldr	r2, [r7, #4]
 8010778:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801077a:	69bb      	ldr	r3, [r7, #24]
 801077c:	68fa      	ldr	r2, [r7, #12]
 801077e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010780:	69bb      	ldr	r3, [r7, #24]
 8010782:	68ba      	ldr	r2, [r7, #8]
 8010784:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010786:	2101      	movs	r1, #1
 8010788:	69b8      	ldr	r0, [r7, #24]
 801078a:	f7ff fecb 	bl	8010524 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801078e:	69bb      	ldr	r3, [r7, #24]
 8010790:	78fa      	ldrb	r2, [r7, #3]
 8010792:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8010796:	bf00      	nop
 8010798:	3710      	adds	r7, #16
 801079a:	46bd      	mov	sp, r7
 801079c:	bd80      	pop	{r7, pc}
	...

080107a0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80107a0:	b580      	push	{r7, lr}
 80107a2:	b08e      	sub	sp, #56	; 0x38
 80107a4:	af00      	add	r7, sp, #0
 80107a6:	60f8      	str	r0, [r7, #12]
 80107a8:	60b9      	str	r1, [r7, #8]
 80107aa:	607a      	str	r2, [r7, #4]
 80107ac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80107ae:	2300      	movs	r3, #0
 80107b0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80107b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d10a      	bne.n	80107d2 <xQueueGenericSend+0x32>
	__asm volatile
 80107bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107c0:	f383 8811 	msr	BASEPRI, r3
 80107c4:	f3bf 8f6f 	isb	sy
 80107c8:	f3bf 8f4f 	dsb	sy
 80107cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80107ce:	bf00      	nop
 80107d0:	e7fe      	b.n	80107d0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80107d2:	68bb      	ldr	r3, [r7, #8]
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d103      	bne.n	80107e0 <xQueueGenericSend+0x40>
 80107d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d101      	bne.n	80107e4 <xQueueGenericSend+0x44>
 80107e0:	2301      	movs	r3, #1
 80107e2:	e000      	b.n	80107e6 <xQueueGenericSend+0x46>
 80107e4:	2300      	movs	r3, #0
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d10a      	bne.n	8010800 <xQueueGenericSend+0x60>
	__asm volatile
 80107ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107ee:	f383 8811 	msr	BASEPRI, r3
 80107f2:	f3bf 8f6f 	isb	sy
 80107f6:	f3bf 8f4f 	dsb	sy
 80107fa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80107fc:	bf00      	nop
 80107fe:	e7fe      	b.n	80107fe <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010800:	683b      	ldr	r3, [r7, #0]
 8010802:	2b02      	cmp	r3, #2
 8010804:	d103      	bne.n	801080e <xQueueGenericSend+0x6e>
 8010806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801080a:	2b01      	cmp	r3, #1
 801080c:	d101      	bne.n	8010812 <xQueueGenericSend+0x72>
 801080e:	2301      	movs	r3, #1
 8010810:	e000      	b.n	8010814 <xQueueGenericSend+0x74>
 8010812:	2300      	movs	r3, #0
 8010814:	2b00      	cmp	r3, #0
 8010816:	d10a      	bne.n	801082e <xQueueGenericSend+0x8e>
	__asm volatile
 8010818:	f04f 0350 	mov.w	r3, #80	; 0x50
 801081c:	f383 8811 	msr	BASEPRI, r3
 8010820:	f3bf 8f6f 	isb	sy
 8010824:	f3bf 8f4f 	dsb	sy
 8010828:	623b      	str	r3, [r7, #32]
}
 801082a:	bf00      	nop
 801082c:	e7fe      	b.n	801082c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801082e:	f001 fb17 	bl	8011e60 <xTaskGetSchedulerState>
 8010832:	4603      	mov	r3, r0
 8010834:	2b00      	cmp	r3, #0
 8010836:	d102      	bne.n	801083e <xQueueGenericSend+0x9e>
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	2b00      	cmp	r3, #0
 801083c:	d101      	bne.n	8010842 <xQueueGenericSend+0xa2>
 801083e:	2301      	movs	r3, #1
 8010840:	e000      	b.n	8010844 <xQueueGenericSend+0xa4>
 8010842:	2300      	movs	r3, #0
 8010844:	2b00      	cmp	r3, #0
 8010846:	d10a      	bne.n	801085e <xQueueGenericSend+0xbe>
	__asm volatile
 8010848:	f04f 0350 	mov.w	r3, #80	; 0x50
 801084c:	f383 8811 	msr	BASEPRI, r3
 8010850:	f3bf 8f6f 	isb	sy
 8010854:	f3bf 8f4f 	dsb	sy
 8010858:	61fb      	str	r3, [r7, #28]
}
 801085a:	bf00      	nop
 801085c:	e7fe      	b.n	801085c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801085e:	f002 f891 	bl	8012984 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010864:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801086a:	429a      	cmp	r2, r3
 801086c:	d302      	bcc.n	8010874 <xQueueGenericSend+0xd4>
 801086e:	683b      	ldr	r3, [r7, #0]
 8010870:	2b02      	cmp	r3, #2
 8010872:	d129      	bne.n	80108c8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010874:	683a      	ldr	r2, [r7, #0]
 8010876:	68b9      	ldr	r1, [r7, #8]
 8010878:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801087a:	f000 fac7 	bl	8010e0c <prvCopyDataToQueue>
 801087e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010884:	2b00      	cmp	r3, #0
 8010886:	d010      	beq.n	80108aa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801088a:	3324      	adds	r3, #36	; 0x24
 801088c:	4618      	mov	r0, r3
 801088e:	f001 f8c7 	bl	8011a20 <xTaskRemoveFromEventList>
 8010892:	4603      	mov	r3, r0
 8010894:	2b00      	cmp	r3, #0
 8010896:	d013      	beq.n	80108c0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010898:	4b3f      	ldr	r3, [pc, #252]	; (8010998 <xQueueGenericSend+0x1f8>)
 801089a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801089e:	601a      	str	r2, [r3, #0]
 80108a0:	f3bf 8f4f 	dsb	sy
 80108a4:	f3bf 8f6f 	isb	sy
 80108a8:	e00a      	b.n	80108c0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80108aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d007      	beq.n	80108c0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80108b0:	4b39      	ldr	r3, [pc, #228]	; (8010998 <xQueueGenericSend+0x1f8>)
 80108b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80108b6:	601a      	str	r2, [r3, #0]
 80108b8:	f3bf 8f4f 	dsb	sy
 80108bc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80108c0:	f002 f890 	bl	80129e4 <vPortExitCritical>
				return pdPASS;
 80108c4:	2301      	movs	r3, #1
 80108c6:	e063      	b.n	8010990 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d103      	bne.n	80108d6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80108ce:	f002 f889 	bl	80129e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80108d2:	2300      	movs	r3, #0
 80108d4:	e05c      	b.n	8010990 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80108d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d106      	bne.n	80108ea <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80108dc:	f107 0314 	add.w	r3, r7, #20
 80108e0:	4618      	mov	r0, r3
 80108e2:	f001 f963 	bl	8011bac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80108e6:	2301      	movs	r3, #1
 80108e8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80108ea:	f002 f87b 	bl	80129e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80108ee:	f000 fe37 	bl	8011560 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80108f2:	f002 f847 	bl	8012984 <vPortEnterCritical>
 80108f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80108fc:	b25b      	sxtb	r3, r3
 80108fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010902:	d103      	bne.n	801090c <xQueueGenericSend+0x16c>
 8010904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010906:	2200      	movs	r2, #0
 8010908:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801090c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801090e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010912:	b25b      	sxtb	r3, r3
 8010914:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010918:	d103      	bne.n	8010922 <xQueueGenericSend+0x182>
 801091a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801091c:	2200      	movs	r2, #0
 801091e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010922:	f002 f85f 	bl	80129e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010926:	1d3a      	adds	r2, r7, #4
 8010928:	f107 0314 	add.w	r3, r7, #20
 801092c:	4611      	mov	r1, r2
 801092e:	4618      	mov	r0, r3
 8010930:	f001 f952 	bl	8011bd8 <xTaskCheckForTimeOut>
 8010934:	4603      	mov	r3, r0
 8010936:	2b00      	cmp	r3, #0
 8010938:	d124      	bne.n	8010984 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801093a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801093c:	f000 fb5e 	bl	8010ffc <prvIsQueueFull>
 8010940:	4603      	mov	r3, r0
 8010942:	2b00      	cmp	r3, #0
 8010944:	d018      	beq.n	8010978 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010948:	3310      	adds	r3, #16
 801094a:	687a      	ldr	r2, [r7, #4]
 801094c:	4611      	mov	r1, r2
 801094e:	4618      	mov	r0, r3
 8010950:	f000 ffda 	bl	8011908 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010954:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010956:	f000 fae9 	bl	8010f2c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801095a:	f000 fe0f 	bl	801157c <xTaskResumeAll>
 801095e:	4603      	mov	r3, r0
 8010960:	2b00      	cmp	r3, #0
 8010962:	f47f af7c 	bne.w	801085e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8010966:	4b0c      	ldr	r3, [pc, #48]	; (8010998 <xQueueGenericSend+0x1f8>)
 8010968:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801096c:	601a      	str	r2, [r3, #0]
 801096e:	f3bf 8f4f 	dsb	sy
 8010972:	f3bf 8f6f 	isb	sy
 8010976:	e772      	b.n	801085e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010978:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801097a:	f000 fad7 	bl	8010f2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801097e:	f000 fdfd 	bl	801157c <xTaskResumeAll>
 8010982:	e76c      	b.n	801085e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8010984:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010986:	f000 fad1 	bl	8010f2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801098a:	f000 fdf7 	bl	801157c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801098e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8010990:	4618      	mov	r0, r3
 8010992:	3738      	adds	r7, #56	; 0x38
 8010994:	46bd      	mov	sp, r7
 8010996:	bd80      	pop	{r7, pc}
 8010998:	e000ed04 	.word	0xe000ed04

0801099c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801099c:	b580      	push	{r7, lr}
 801099e:	b090      	sub	sp, #64	; 0x40
 80109a0:	af00      	add	r7, sp, #0
 80109a2:	60f8      	str	r0, [r7, #12]
 80109a4:	60b9      	str	r1, [r7, #8]
 80109a6:	607a      	str	r2, [r7, #4]
 80109a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80109ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d10a      	bne.n	80109ca <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80109b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109b8:	f383 8811 	msr	BASEPRI, r3
 80109bc:	f3bf 8f6f 	isb	sy
 80109c0:	f3bf 8f4f 	dsb	sy
 80109c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80109c6:	bf00      	nop
 80109c8:	e7fe      	b.n	80109c8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80109ca:	68bb      	ldr	r3, [r7, #8]
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d103      	bne.n	80109d8 <xQueueGenericSendFromISR+0x3c>
 80109d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d101      	bne.n	80109dc <xQueueGenericSendFromISR+0x40>
 80109d8:	2301      	movs	r3, #1
 80109da:	e000      	b.n	80109de <xQueueGenericSendFromISR+0x42>
 80109dc:	2300      	movs	r3, #0
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d10a      	bne.n	80109f8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80109e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109e6:	f383 8811 	msr	BASEPRI, r3
 80109ea:	f3bf 8f6f 	isb	sy
 80109ee:	f3bf 8f4f 	dsb	sy
 80109f2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80109f4:	bf00      	nop
 80109f6:	e7fe      	b.n	80109f6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80109f8:	683b      	ldr	r3, [r7, #0]
 80109fa:	2b02      	cmp	r3, #2
 80109fc:	d103      	bne.n	8010a06 <xQueueGenericSendFromISR+0x6a>
 80109fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010a02:	2b01      	cmp	r3, #1
 8010a04:	d101      	bne.n	8010a0a <xQueueGenericSendFromISR+0x6e>
 8010a06:	2301      	movs	r3, #1
 8010a08:	e000      	b.n	8010a0c <xQueueGenericSendFromISR+0x70>
 8010a0a:	2300      	movs	r3, #0
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d10a      	bne.n	8010a26 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8010a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a14:	f383 8811 	msr	BASEPRI, r3
 8010a18:	f3bf 8f6f 	isb	sy
 8010a1c:	f3bf 8f4f 	dsb	sy
 8010a20:	623b      	str	r3, [r7, #32]
}
 8010a22:	bf00      	nop
 8010a24:	e7fe      	b.n	8010a24 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010a26:	f002 f88f 	bl	8012b48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8010a2a:	f3ef 8211 	mrs	r2, BASEPRI
 8010a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a32:	f383 8811 	msr	BASEPRI, r3
 8010a36:	f3bf 8f6f 	isb	sy
 8010a3a:	f3bf 8f4f 	dsb	sy
 8010a3e:	61fa      	str	r2, [r7, #28]
 8010a40:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8010a42:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010a44:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010a4e:	429a      	cmp	r2, r3
 8010a50:	d302      	bcc.n	8010a58 <xQueueGenericSendFromISR+0xbc>
 8010a52:	683b      	ldr	r3, [r7, #0]
 8010a54:	2b02      	cmp	r3, #2
 8010a56:	d12f      	bne.n	8010ab8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010a5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a66:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010a68:	683a      	ldr	r2, [r7, #0]
 8010a6a:	68b9      	ldr	r1, [r7, #8]
 8010a6c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010a6e:	f000 f9cd 	bl	8010e0c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010a72:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8010a76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010a7a:	d112      	bne.n	8010aa2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d016      	beq.n	8010ab2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a86:	3324      	adds	r3, #36	; 0x24
 8010a88:	4618      	mov	r0, r3
 8010a8a:	f000 ffc9 	bl	8011a20 <xTaskRemoveFromEventList>
 8010a8e:	4603      	mov	r3, r0
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d00e      	beq.n	8010ab2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d00b      	beq.n	8010ab2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	2201      	movs	r2, #1
 8010a9e:	601a      	str	r2, [r3, #0]
 8010aa0:	e007      	b.n	8010ab2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010aa2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010aa6:	3301      	adds	r3, #1
 8010aa8:	b2db      	uxtb	r3, r3
 8010aaa:	b25a      	sxtb	r2, r3
 8010aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010aae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010ab2:	2301      	movs	r3, #1
 8010ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8010ab6:	e001      	b.n	8010abc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010ab8:	2300      	movs	r3, #0
 8010aba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010abe:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010ac0:	697b      	ldr	r3, [r7, #20]
 8010ac2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8010ac6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010ac8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8010aca:	4618      	mov	r0, r3
 8010acc:	3740      	adds	r7, #64	; 0x40
 8010ace:	46bd      	mov	sp, r7
 8010ad0:	bd80      	pop	{r7, pc}
	...

08010ad4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010ad4:	b580      	push	{r7, lr}
 8010ad6:	b08c      	sub	sp, #48	; 0x30
 8010ad8:	af00      	add	r7, sp, #0
 8010ada:	60f8      	str	r0, [r7, #12]
 8010adc:	60b9      	str	r1, [r7, #8]
 8010ade:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8010ae0:	2300      	movs	r3, #0
 8010ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d10a      	bne.n	8010b04 <xQueueReceive+0x30>
	__asm volatile
 8010aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010af2:	f383 8811 	msr	BASEPRI, r3
 8010af6:	f3bf 8f6f 	isb	sy
 8010afa:	f3bf 8f4f 	dsb	sy
 8010afe:	623b      	str	r3, [r7, #32]
}
 8010b00:	bf00      	nop
 8010b02:	e7fe      	b.n	8010b02 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010b04:	68bb      	ldr	r3, [r7, #8]
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	d103      	bne.n	8010b12 <xQueueReceive+0x3e>
 8010b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d101      	bne.n	8010b16 <xQueueReceive+0x42>
 8010b12:	2301      	movs	r3, #1
 8010b14:	e000      	b.n	8010b18 <xQueueReceive+0x44>
 8010b16:	2300      	movs	r3, #0
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d10a      	bne.n	8010b32 <xQueueReceive+0x5e>
	__asm volatile
 8010b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b20:	f383 8811 	msr	BASEPRI, r3
 8010b24:	f3bf 8f6f 	isb	sy
 8010b28:	f3bf 8f4f 	dsb	sy
 8010b2c:	61fb      	str	r3, [r7, #28]
}
 8010b2e:	bf00      	nop
 8010b30:	e7fe      	b.n	8010b30 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010b32:	f001 f995 	bl	8011e60 <xTaskGetSchedulerState>
 8010b36:	4603      	mov	r3, r0
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d102      	bne.n	8010b42 <xQueueReceive+0x6e>
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d101      	bne.n	8010b46 <xQueueReceive+0x72>
 8010b42:	2301      	movs	r3, #1
 8010b44:	e000      	b.n	8010b48 <xQueueReceive+0x74>
 8010b46:	2300      	movs	r3, #0
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d10a      	bne.n	8010b62 <xQueueReceive+0x8e>
	__asm volatile
 8010b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b50:	f383 8811 	msr	BASEPRI, r3
 8010b54:	f3bf 8f6f 	isb	sy
 8010b58:	f3bf 8f4f 	dsb	sy
 8010b5c:	61bb      	str	r3, [r7, #24]
}
 8010b5e:	bf00      	nop
 8010b60:	e7fe      	b.n	8010b60 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010b62:	f001 ff0f 	bl	8012984 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b6a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d01f      	beq.n	8010bb2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010b72:	68b9      	ldr	r1, [r7, #8]
 8010b74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010b76:	f000 f9b3 	bl	8010ee0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b7c:	1e5a      	subs	r2, r3, #1
 8010b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b80:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b84:	691b      	ldr	r3, [r3, #16]
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d00f      	beq.n	8010baa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b8c:	3310      	adds	r3, #16
 8010b8e:	4618      	mov	r0, r3
 8010b90:	f000 ff46 	bl	8011a20 <xTaskRemoveFromEventList>
 8010b94:	4603      	mov	r3, r0
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d007      	beq.n	8010baa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010b9a:	4b3d      	ldr	r3, [pc, #244]	; (8010c90 <xQueueReceive+0x1bc>)
 8010b9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010ba0:	601a      	str	r2, [r3, #0]
 8010ba2:	f3bf 8f4f 	dsb	sy
 8010ba6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010baa:	f001 ff1b 	bl	80129e4 <vPortExitCritical>
				return pdPASS;
 8010bae:	2301      	movs	r3, #1
 8010bb0:	e069      	b.n	8010c86 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d103      	bne.n	8010bc0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010bb8:	f001 ff14 	bl	80129e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010bbc:	2300      	movs	r3, #0
 8010bbe:	e062      	b.n	8010c86 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d106      	bne.n	8010bd4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010bc6:	f107 0310 	add.w	r3, r7, #16
 8010bca:	4618      	mov	r0, r3
 8010bcc:	f000 ffee 	bl	8011bac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010bd0:	2301      	movs	r3, #1
 8010bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010bd4:	f001 ff06 	bl	80129e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010bd8:	f000 fcc2 	bl	8011560 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010bdc:	f001 fed2 	bl	8012984 <vPortEnterCritical>
 8010be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010be2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010be6:	b25b      	sxtb	r3, r3
 8010be8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010bec:	d103      	bne.n	8010bf6 <xQueueReceive+0x122>
 8010bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bf0:	2200      	movs	r2, #0
 8010bf2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bf8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010bfc:	b25b      	sxtb	r3, r3
 8010bfe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010c02:	d103      	bne.n	8010c0c <xQueueReceive+0x138>
 8010c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c06:	2200      	movs	r2, #0
 8010c08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010c0c:	f001 feea 	bl	80129e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010c10:	1d3a      	adds	r2, r7, #4
 8010c12:	f107 0310 	add.w	r3, r7, #16
 8010c16:	4611      	mov	r1, r2
 8010c18:	4618      	mov	r0, r3
 8010c1a:	f000 ffdd 	bl	8011bd8 <xTaskCheckForTimeOut>
 8010c1e:	4603      	mov	r3, r0
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	d123      	bne.n	8010c6c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010c24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010c26:	f000 f9d3 	bl	8010fd0 <prvIsQueueEmpty>
 8010c2a:	4603      	mov	r3, r0
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d017      	beq.n	8010c60 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c32:	3324      	adds	r3, #36	; 0x24
 8010c34:	687a      	ldr	r2, [r7, #4]
 8010c36:	4611      	mov	r1, r2
 8010c38:	4618      	mov	r0, r3
 8010c3a:	f000 fe65 	bl	8011908 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010c3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010c40:	f000 f974 	bl	8010f2c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010c44:	f000 fc9a 	bl	801157c <xTaskResumeAll>
 8010c48:	4603      	mov	r3, r0
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d189      	bne.n	8010b62 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8010c4e:	4b10      	ldr	r3, [pc, #64]	; (8010c90 <xQueueReceive+0x1bc>)
 8010c50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010c54:	601a      	str	r2, [r3, #0]
 8010c56:	f3bf 8f4f 	dsb	sy
 8010c5a:	f3bf 8f6f 	isb	sy
 8010c5e:	e780      	b.n	8010b62 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8010c60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010c62:	f000 f963 	bl	8010f2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010c66:	f000 fc89 	bl	801157c <xTaskResumeAll>
 8010c6a:	e77a      	b.n	8010b62 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8010c6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010c6e:	f000 f95d 	bl	8010f2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010c72:	f000 fc83 	bl	801157c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010c76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010c78:	f000 f9aa 	bl	8010fd0 <prvIsQueueEmpty>
 8010c7c:	4603      	mov	r3, r0
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	f43f af6f 	beq.w	8010b62 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010c84:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010c86:	4618      	mov	r0, r3
 8010c88:	3730      	adds	r7, #48	; 0x30
 8010c8a:	46bd      	mov	sp, r7
 8010c8c:	bd80      	pop	{r7, pc}
 8010c8e:	bf00      	nop
 8010c90:	e000ed04 	.word	0xe000ed04

08010c94 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010c94:	b580      	push	{r7, lr}
 8010c96:	b08e      	sub	sp, #56	; 0x38
 8010c98:	af00      	add	r7, sp, #0
 8010c9a:	60f8      	str	r0, [r7, #12]
 8010c9c:	60b9      	str	r1, [r7, #8]
 8010c9e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010ca0:	68fb      	ldr	r3, [r7, #12]
 8010ca2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d10a      	bne.n	8010cc0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8010caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cae:	f383 8811 	msr	BASEPRI, r3
 8010cb2:	f3bf 8f6f 	isb	sy
 8010cb6:	f3bf 8f4f 	dsb	sy
 8010cba:	623b      	str	r3, [r7, #32]
}
 8010cbc:	bf00      	nop
 8010cbe:	e7fe      	b.n	8010cbe <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010cc0:	68bb      	ldr	r3, [r7, #8]
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d103      	bne.n	8010cce <xQueueReceiveFromISR+0x3a>
 8010cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d101      	bne.n	8010cd2 <xQueueReceiveFromISR+0x3e>
 8010cce:	2301      	movs	r3, #1
 8010cd0:	e000      	b.n	8010cd4 <xQueueReceiveFromISR+0x40>
 8010cd2:	2300      	movs	r3, #0
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d10a      	bne.n	8010cee <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8010cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cdc:	f383 8811 	msr	BASEPRI, r3
 8010ce0:	f3bf 8f6f 	isb	sy
 8010ce4:	f3bf 8f4f 	dsb	sy
 8010ce8:	61fb      	str	r3, [r7, #28]
}
 8010cea:	bf00      	nop
 8010cec:	e7fe      	b.n	8010cec <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010cee:	f001 ff2b 	bl	8012b48 <vPortValidateInterruptPriority>
	__asm volatile
 8010cf2:	f3ef 8211 	mrs	r2, BASEPRI
 8010cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cfa:	f383 8811 	msr	BASEPRI, r3
 8010cfe:	f3bf 8f6f 	isb	sy
 8010d02:	f3bf 8f4f 	dsb	sy
 8010d06:	61ba      	str	r2, [r7, #24]
 8010d08:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8010d0a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d12:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	d02f      	beq.n	8010d7a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8010d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010d20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010d24:	68b9      	ldr	r1, [r7, #8]
 8010d26:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010d28:	f000 f8da 	bl	8010ee0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d2e:	1e5a      	subs	r2, r3, #1
 8010d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d32:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8010d34:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010d38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010d3c:	d112      	bne.n	8010d64 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d40:	691b      	ldr	r3, [r3, #16]
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d016      	beq.n	8010d74 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d48:	3310      	adds	r3, #16
 8010d4a:	4618      	mov	r0, r3
 8010d4c:	f000 fe68 	bl	8011a20 <xTaskRemoveFromEventList>
 8010d50:	4603      	mov	r3, r0
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d00e      	beq.n	8010d74 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d00b      	beq.n	8010d74 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	2201      	movs	r2, #1
 8010d60:	601a      	str	r2, [r3, #0]
 8010d62:	e007      	b.n	8010d74 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8010d64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010d68:	3301      	adds	r3, #1
 8010d6a:	b2db      	uxtb	r3, r3
 8010d6c:	b25a      	sxtb	r2, r3
 8010d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8010d74:	2301      	movs	r3, #1
 8010d76:	637b      	str	r3, [r7, #52]	; 0x34
 8010d78:	e001      	b.n	8010d7e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8010d7a:	2300      	movs	r3, #0
 8010d7c:	637b      	str	r3, [r7, #52]	; 0x34
 8010d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d80:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010d82:	693b      	ldr	r3, [r7, #16]
 8010d84:	f383 8811 	msr	BASEPRI, r3
}
 8010d88:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010d8c:	4618      	mov	r0, r3
 8010d8e:	3738      	adds	r7, #56	; 0x38
 8010d90:	46bd      	mov	sp, r7
 8010d92:	bd80      	pop	{r7, pc}

08010d94 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8010d94:	b580      	push	{r7, lr}
 8010d96:	b084      	sub	sp, #16
 8010d98:	af00      	add	r7, sp, #0
 8010d9a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d10a      	bne.n	8010db8 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8010da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010da6:	f383 8811 	msr	BASEPRI, r3
 8010daa:	f3bf 8f6f 	isb	sy
 8010dae:	f3bf 8f4f 	dsb	sy
 8010db2:	60bb      	str	r3, [r7, #8]
}
 8010db4:	bf00      	nop
 8010db6:	e7fe      	b.n	8010db6 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8010db8:	f001 fde4 	bl	8012984 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010dc0:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8010dc2:	f001 fe0f 	bl	80129e4 <vPortExitCritical>

	return uxReturn;
 8010dc6:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8010dc8:	4618      	mov	r0, r3
 8010dca:	3710      	adds	r7, #16
 8010dcc:	46bd      	mov	sp, r7
 8010dce:	bd80      	pop	{r7, pc}

08010dd0 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8010dd0:	b480      	push	{r7}
 8010dd2:	b087      	sub	sp, #28
 8010dd4:	af00      	add	r7, sp, #0
 8010dd6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8010ddc:	697b      	ldr	r3, [r7, #20]
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d10a      	bne.n	8010df8 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8010de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010de6:	f383 8811 	msr	BASEPRI, r3
 8010dea:	f3bf 8f6f 	isb	sy
 8010dee:	f3bf 8f4f 	dsb	sy
 8010df2:	60fb      	str	r3, [r7, #12]
}
 8010df4:	bf00      	nop
 8010df6:	e7fe      	b.n	8010df6 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8010df8:	697b      	ldr	r3, [r7, #20]
 8010dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010dfc:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8010dfe:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8010e00:	4618      	mov	r0, r3
 8010e02:	371c      	adds	r7, #28
 8010e04:	46bd      	mov	sp, r7
 8010e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e0a:	4770      	bx	lr

08010e0c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8010e0c:	b580      	push	{r7, lr}
 8010e0e:	b086      	sub	sp, #24
 8010e10:	af00      	add	r7, sp, #0
 8010e12:	60f8      	str	r0, [r7, #12]
 8010e14:	60b9      	str	r1, [r7, #8]
 8010e16:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010e18:	2300      	movs	r3, #0
 8010e1a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010e1c:	68fb      	ldr	r3, [r7, #12]
 8010e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e20:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010e22:	68fb      	ldr	r3, [r7, #12]
 8010e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d10d      	bne.n	8010e46 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010e2a:	68fb      	ldr	r3, [r7, #12]
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d14d      	bne.n	8010ece <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010e32:	68fb      	ldr	r3, [r7, #12]
 8010e34:	689b      	ldr	r3, [r3, #8]
 8010e36:	4618      	mov	r0, r3
 8010e38:	f001 f830 	bl	8011e9c <xTaskPriorityDisinherit>
 8010e3c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8010e3e:	68fb      	ldr	r3, [r7, #12]
 8010e40:	2200      	movs	r2, #0
 8010e42:	609a      	str	r2, [r3, #8]
 8010e44:	e043      	b.n	8010ece <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d119      	bne.n	8010e80 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010e4c:	68fb      	ldr	r3, [r7, #12]
 8010e4e:	6858      	ldr	r0, [r3, #4]
 8010e50:	68fb      	ldr	r3, [r7, #12]
 8010e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e54:	461a      	mov	r2, r3
 8010e56:	68b9      	ldr	r1, [r7, #8]
 8010e58:	f002 f8da 	bl	8013010 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010e5c:	68fb      	ldr	r3, [r7, #12]
 8010e5e:	685a      	ldr	r2, [r3, #4]
 8010e60:	68fb      	ldr	r3, [r7, #12]
 8010e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e64:	441a      	add	r2, r3
 8010e66:	68fb      	ldr	r3, [r7, #12]
 8010e68:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010e6a:	68fb      	ldr	r3, [r7, #12]
 8010e6c:	685a      	ldr	r2, [r3, #4]
 8010e6e:	68fb      	ldr	r3, [r7, #12]
 8010e70:	689b      	ldr	r3, [r3, #8]
 8010e72:	429a      	cmp	r2, r3
 8010e74:	d32b      	bcc.n	8010ece <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010e76:	68fb      	ldr	r3, [r7, #12]
 8010e78:	681a      	ldr	r2, [r3, #0]
 8010e7a:	68fb      	ldr	r3, [r7, #12]
 8010e7c:	605a      	str	r2, [r3, #4]
 8010e7e:	e026      	b.n	8010ece <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010e80:	68fb      	ldr	r3, [r7, #12]
 8010e82:	68d8      	ldr	r0, [r3, #12]
 8010e84:	68fb      	ldr	r3, [r7, #12]
 8010e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e88:	461a      	mov	r2, r3
 8010e8a:	68b9      	ldr	r1, [r7, #8]
 8010e8c:	f002 f8c0 	bl	8013010 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010e90:	68fb      	ldr	r3, [r7, #12]
 8010e92:	68da      	ldr	r2, [r3, #12]
 8010e94:	68fb      	ldr	r3, [r7, #12]
 8010e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e98:	425b      	negs	r3, r3
 8010e9a:	441a      	add	r2, r3
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010ea0:	68fb      	ldr	r3, [r7, #12]
 8010ea2:	68da      	ldr	r2, [r3, #12]
 8010ea4:	68fb      	ldr	r3, [r7, #12]
 8010ea6:	681b      	ldr	r3, [r3, #0]
 8010ea8:	429a      	cmp	r2, r3
 8010eaa:	d207      	bcs.n	8010ebc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8010eac:	68fb      	ldr	r3, [r7, #12]
 8010eae:	689a      	ldr	r2, [r3, #8]
 8010eb0:	68fb      	ldr	r3, [r7, #12]
 8010eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010eb4:	425b      	negs	r3, r3
 8010eb6:	441a      	add	r2, r3
 8010eb8:	68fb      	ldr	r3, [r7, #12]
 8010eba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	2b02      	cmp	r3, #2
 8010ec0:	d105      	bne.n	8010ece <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010ec2:	693b      	ldr	r3, [r7, #16]
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d002      	beq.n	8010ece <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8010ec8:	693b      	ldr	r3, [r7, #16]
 8010eca:	3b01      	subs	r3, #1
 8010ecc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010ece:	693b      	ldr	r3, [r7, #16]
 8010ed0:	1c5a      	adds	r2, r3, #1
 8010ed2:	68fb      	ldr	r3, [r7, #12]
 8010ed4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8010ed6:	697b      	ldr	r3, [r7, #20]
}
 8010ed8:	4618      	mov	r0, r3
 8010eda:	3718      	adds	r7, #24
 8010edc:	46bd      	mov	sp, r7
 8010ede:	bd80      	pop	{r7, pc}

08010ee0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8010ee0:	b580      	push	{r7, lr}
 8010ee2:	b082      	sub	sp, #8
 8010ee4:	af00      	add	r7, sp, #0
 8010ee6:	6078      	str	r0, [r7, #4]
 8010ee8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d018      	beq.n	8010f24 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	68da      	ldr	r2, [r3, #12]
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010efa:	441a      	add	r2, r3
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	68da      	ldr	r2, [r3, #12]
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	689b      	ldr	r3, [r3, #8]
 8010f08:	429a      	cmp	r2, r3
 8010f0a:	d303      	bcc.n	8010f14 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	681a      	ldr	r2, [r3, #0]
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	68d9      	ldr	r1, [r3, #12]
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f1c:	461a      	mov	r2, r3
 8010f1e:	6838      	ldr	r0, [r7, #0]
 8010f20:	f002 f876 	bl	8013010 <memcpy>
	}
}
 8010f24:	bf00      	nop
 8010f26:	3708      	adds	r7, #8
 8010f28:	46bd      	mov	sp, r7
 8010f2a:	bd80      	pop	{r7, pc}

08010f2c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8010f2c:	b580      	push	{r7, lr}
 8010f2e:	b084      	sub	sp, #16
 8010f30:	af00      	add	r7, sp, #0
 8010f32:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010f34:	f001 fd26 	bl	8012984 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010f3e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010f40:	e011      	b.n	8010f66 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d012      	beq.n	8010f70 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	3324      	adds	r3, #36	; 0x24
 8010f4e:	4618      	mov	r0, r3
 8010f50:	f000 fd66 	bl	8011a20 <xTaskRemoveFromEventList>
 8010f54:	4603      	mov	r3, r0
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d001      	beq.n	8010f5e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010f5a:	f000 fe9f 	bl	8011c9c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8010f5e:	7bfb      	ldrb	r3, [r7, #15]
 8010f60:	3b01      	subs	r3, #1
 8010f62:	b2db      	uxtb	r3, r3
 8010f64:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	dce9      	bgt.n	8010f42 <prvUnlockQueue+0x16>
 8010f6e:	e000      	b.n	8010f72 <prvUnlockQueue+0x46>
					break;
 8010f70:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	22ff      	movs	r2, #255	; 0xff
 8010f76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8010f7a:	f001 fd33 	bl	80129e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010f7e:	f001 fd01 	bl	8012984 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010f88:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010f8a:	e011      	b.n	8010fb0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	691b      	ldr	r3, [r3, #16]
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d012      	beq.n	8010fba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	3310      	adds	r3, #16
 8010f98:	4618      	mov	r0, r3
 8010f9a:	f000 fd41 	bl	8011a20 <xTaskRemoveFromEventList>
 8010f9e:	4603      	mov	r3, r0
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d001      	beq.n	8010fa8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010fa4:	f000 fe7a 	bl	8011c9c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8010fa8:	7bbb      	ldrb	r3, [r7, #14]
 8010faa:	3b01      	subs	r3, #1
 8010fac:	b2db      	uxtb	r3, r3
 8010fae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010fb0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	dce9      	bgt.n	8010f8c <prvUnlockQueue+0x60>
 8010fb8:	e000      	b.n	8010fbc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8010fba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	22ff      	movs	r2, #255	; 0xff
 8010fc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8010fc4:	f001 fd0e 	bl	80129e4 <vPortExitCritical>
}
 8010fc8:	bf00      	nop
 8010fca:	3710      	adds	r7, #16
 8010fcc:	46bd      	mov	sp, r7
 8010fce:	bd80      	pop	{r7, pc}

08010fd0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010fd0:	b580      	push	{r7, lr}
 8010fd2:	b084      	sub	sp, #16
 8010fd4:	af00      	add	r7, sp, #0
 8010fd6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010fd8:	f001 fcd4 	bl	8012984 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d102      	bne.n	8010fea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8010fe4:	2301      	movs	r3, #1
 8010fe6:	60fb      	str	r3, [r7, #12]
 8010fe8:	e001      	b.n	8010fee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010fea:	2300      	movs	r3, #0
 8010fec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010fee:	f001 fcf9 	bl	80129e4 <vPortExitCritical>

	return xReturn;
 8010ff2:	68fb      	ldr	r3, [r7, #12]
}
 8010ff4:	4618      	mov	r0, r3
 8010ff6:	3710      	adds	r7, #16
 8010ff8:	46bd      	mov	sp, r7
 8010ffa:	bd80      	pop	{r7, pc}

08010ffc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010ffc:	b580      	push	{r7, lr}
 8010ffe:	b084      	sub	sp, #16
 8011000:	af00      	add	r7, sp, #0
 8011002:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011004:	f001 fcbe 	bl	8012984 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011010:	429a      	cmp	r2, r3
 8011012:	d102      	bne.n	801101a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8011014:	2301      	movs	r3, #1
 8011016:	60fb      	str	r3, [r7, #12]
 8011018:	e001      	b.n	801101e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801101a:	2300      	movs	r3, #0
 801101c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801101e:	f001 fce1 	bl	80129e4 <vPortExitCritical>

	return xReturn;
 8011022:	68fb      	ldr	r3, [r7, #12]
}
 8011024:	4618      	mov	r0, r3
 8011026:	3710      	adds	r7, #16
 8011028:	46bd      	mov	sp, r7
 801102a:	bd80      	pop	{r7, pc}

0801102c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801102c:	b480      	push	{r7}
 801102e:	b085      	sub	sp, #20
 8011030:	af00      	add	r7, sp, #0
 8011032:	6078      	str	r0, [r7, #4]
 8011034:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011036:	2300      	movs	r3, #0
 8011038:	60fb      	str	r3, [r7, #12]
 801103a:	e014      	b.n	8011066 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801103c:	4a0f      	ldr	r2, [pc, #60]	; (801107c <vQueueAddToRegistry+0x50>)
 801103e:	68fb      	ldr	r3, [r7, #12]
 8011040:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011044:	2b00      	cmp	r3, #0
 8011046:	d10b      	bne.n	8011060 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8011048:	490c      	ldr	r1, [pc, #48]	; (801107c <vQueueAddToRegistry+0x50>)
 801104a:	68fb      	ldr	r3, [r7, #12]
 801104c:	683a      	ldr	r2, [r7, #0]
 801104e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8011052:	4a0a      	ldr	r2, [pc, #40]	; (801107c <vQueueAddToRegistry+0x50>)
 8011054:	68fb      	ldr	r3, [r7, #12]
 8011056:	00db      	lsls	r3, r3, #3
 8011058:	4413      	add	r3, r2
 801105a:	687a      	ldr	r2, [r7, #4]
 801105c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801105e:	e006      	b.n	801106e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011060:	68fb      	ldr	r3, [r7, #12]
 8011062:	3301      	adds	r3, #1
 8011064:	60fb      	str	r3, [r7, #12]
 8011066:	68fb      	ldr	r3, [r7, #12]
 8011068:	2b07      	cmp	r3, #7
 801106a:	d9e7      	bls.n	801103c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801106c:	bf00      	nop
 801106e:	bf00      	nop
 8011070:	3714      	adds	r7, #20
 8011072:	46bd      	mov	sp, r7
 8011074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011078:	4770      	bx	lr
 801107a:	bf00      	nop
 801107c:	24000cf8 	.word	0x24000cf8

08011080 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011080:	b580      	push	{r7, lr}
 8011082:	b086      	sub	sp, #24
 8011084:	af00      	add	r7, sp, #0
 8011086:	60f8      	str	r0, [r7, #12]
 8011088:	60b9      	str	r1, [r7, #8]
 801108a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 801108c:	68fb      	ldr	r3, [r7, #12]
 801108e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8011090:	f001 fc78 	bl	8012984 <vPortEnterCritical>
 8011094:	697b      	ldr	r3, [r7, #20]
 8011096:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801109a:	b25b      	sxtb	r3, r3
 801109c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80110a0:	d103      	bne.n	80110aa <vQueueWaitForMessageRestricted+0x2a>
 80110a2:	697b      	ldr	r3, [r7, #20]
 80110a4:	2200      	movs	r2, #0
 80110a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80110aa:	697b      	ldr	r3, [r7, #20]
 80110ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80110b0:	b25b      	sxtb	r3, r3
 80110b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80110b6:	d103      	bne.n	80110c0 <vQueueWaitForMessageRestricted+0x40>
 80110b8:	697b      	ldr	r3, [r7, #20]
 80110ba:	2200      	movs	r2, #0
 80110bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80110c0:	f001 fc90 	bl	80129e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80110c4:	697b      	ldr	r3, [r7, #20]
 80110c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	d106      	bne.n	80110da <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80110cc:	697b      	ldr	r3, [r7, #20]
 80110ce:	3324      	adds	r3, #36	; 0x24
 80110d0:	687a      	ldr	r2, [r7, #4]
 80110d2:	68b9      	ldr	r1, [r7, #8]
 80110d4:	4618      	mov	r0, r3
 80110d6:	f000 fc77 	bl	80119c8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80110da:	6978      	ldr	r0, [r7, #20]
 80110dc:	f7ff ff26 	bl	8010f2c <prvUnlockQueue>
	}
 80110e0:	bf00      	nop
 80110e2:	3718      	adds	r7, #24
 80110e4:	46bd      	mov	sp, r7
 80110e6:	bd80      	pop	{r7, pc}

080110e8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80110e8:	b580      	push	{r7, lr}
 80110ea:	b08e      	sub	sp, #56	; 0x38
 80110ec:	af04      	add	r7, sp, #16
 80110ee:	60f8      	str	r0, [r7, #12]
 80110f0:	60b9      	str	r1, [r7, #8]
 80110f2:	607a      	str	r2, [r7, #4]
 80110f4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80110f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d10a      	bne.n	8011112 <xTaskCreateStatic+0x2a>
	__asm volatile
 80110fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011100:	f383 8811 	msr	BASEPRI, r3
 8011104:	f3bf 8f6f 	isb	sy
 8011108:	f3bf 8f4f 	dsb	sy
 801110c:	623b      	str	r3, [r7, #32]
}
 801110e:	bf00      	nop
 8011110:	e7fe      	b.n	8011110 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8011112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011114:	2b00      	cmp	r3, #0
 8011116:	d10a      	bne.n	801112e <xTaskCreateStatic+0x46>
	__asm volatile
 8011118:	f04f 0350 	mov.w	r3, #80	; 0x50
 801111c:	f383 8811 	msr	BASEPRI, r3
 8011120:	f3bf 8f6f 	isb	sy
 8011124:	f3bf 8f4f 	dsb	sy
 8011128:	61fb      	str	r3, [r7, #28]
}
 801112a:	bf00      	nop
 801112c:	e7fe      	b.n	801112c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801112e:	235c      	movs	r3, #92	; 0x5c
 8011130:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8011132:	693b      	ldr	r3, [r7, #16]
 8011134:	2b5c      	cmp	r3, #92	; 0x5c
 8011136:	d00a      	beq.n	801114e <xTaskCreateStatic+0x66>
	__asm volatile
 8011138:	f04f 0350 	mov.w	r3, #80	; 0x50
 801113c:	f383 8811 	msr	BASEPRI, r3
 8011140:	f3bf 8f6f 	isb	sy
 8011144:	f3bf 8f4f 	dsb	sy
 8011148:	61bb      	str	r3, [r7, #24]
}
 801114a:	bf00      	nop
 801114c:	e7fe      	b.n	801114c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801114e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8011150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011152:	2b00      	cmp	r3, #0
 8011154:	d01e      	beq.n	8011194 <xTaskCreateStatic+0xac>
 8011156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011158:	2b00      	cmp	r3, #0
 801115a:	d01b      	beq.n	8011194 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801115c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801115e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8011160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011162:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011164:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011168:	2202      	movs	r2, #2
 801116a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801116e:	2300      	movs	r3, #0
 8011170:	9303      	str	r3, [sp, #12]
 8011172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011174:	9302      	str	r3, [sp, #8]
 8011176:	f107 0314 	add.w	r3, r7, #20
 801117a:	9301      	str	r3, [sp, #4]
 801117c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801117e:	9300      	str	r3, [sp, #0]
 8011180:	683b      	ldr	r3, [r7, #0]
 8011182:	687a      	ldr	r2, [r7, #4]
 8011184:	68b9      	ldr	r1, [r7, #8]
 8011186:	68f8      	ldr	r0, [r7, #12]
 8011188:	f000 f850 	bl	801122c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801118c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801118e:	f000 f8dd 	bl	801134c <prvAddNewTaskToReadyList>
 8011192:	e001      	b.n	8011198 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8011194:	2300      	movs	r3, #0
 8011196:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8011198:	697b      	ldr	r3, [r7, #20]
	}
 801119a:	4618      	mov	r0, r3
 801119c:	3728      	adds	r7, #40	; 0x28
 801119e:	46bd      	mov	sp, r7
 80111a0:	bd80      	pop	{r7, pc}

080111a2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80111a2:	b580      	push	{r7, lr}
 80111a4:	b08c      	sub	sp, #48	; 0x30
 80111a6:	af04      	add	r7, sp, #16
 80111a8:	60f8      	str	r0, [r7, #12]
 80111aa:	60b9      	str	r1, [r7, #8]
 80111ac:	603b      	str	r3, [r7, #0]
 80111ae:	4613      	mov	r3, r2
 80111b0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80111b2:	88fb      	ldrh	r3, [r7, #6]
 80111b4:	009b      	lsls	r3, r3, #2
 80111b6:	4618      	mov	r0, r3
 80111b8:	f001 fd06 	bl	8012bc8 <pvPortMalloc>
 80111bc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80111be:	697b      	ldr	r3, [r7, #20]
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d00e      	beq.n	80111e2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80111c4:	205c      	movs	r0, #92	; 0x5c
 80111c6:	f001 fcff 	bl	8012bc8 <pvPortMalloc>
 80111ca:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80111cc:	69fb      	ldr	r3, [r7, #28]
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d003      	beq.n	80111da <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80111d2:	69fb      	ldr	r3, [r7, #28]
 80111d4:	697a      	ldr	r2, [r7, #20]
 80111d6:	631a      	str	r2, [r3, #48]	; 0x30
 80111d8:	e005      	b.n	80111e6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80111da:	6978      	ldr	r0, [r7, #20]
 80111dc:	f001 fdc0 	bl	8012d60 <vPortFree>
 80111e0:	e001      	b.n	80111e6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80111e2:	2300      	movs	r3, #0
 80111e4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80111e6:	69fb      	ldr	r3, [r7, #28]
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d017      	beq.n	801121c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80111ec:	69fb      	ldr	r3, [r7, #28]
 80111ee:	2200      	movs	r2, #0
 80111f0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80111f4:	88fa      	ldrh	r2, [r7, #6]
 80111f6:	2300      	movs	r3, #0
 80111f8:	9303      	str	r3, [sp, #12]
 80111fa:	69fb      	ldr	r3, [r7, #28]
 80111fc:	9302      	str	r3, [sp, #8]
 80111fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011200:	9301      	str	r3, [sp, #4]
 8011202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011204:	9300      	str	r3, [sp, #0]
 8011206:	683b      	ldr	r3, [r7, #0]
 8011208:	68b9      	ldr	r1, [r7, #8]
 801120a:	68f8      	ldr	r0, [r7, #12]
 801120c:	f000 f80e 	bl	801122c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011210:	69f8      	ldr	r0, [r7, #28]
 8011212:	f000 f89b 	bl	801134c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8011216:	2301      	movs	r3, #1
 8011218:	61bb      	str	r3, [r7, #24]
 801121a:	e002      	b.n	8011222 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801121c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011220:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8011222:	69bb      	ldr	r3, [r7, #24]
	}
 8011224:	4618      	mov	r0, r3
 8011226:	3720      	adds	r7, #32
 8011228:	46bd      	mov	sp, r7
 801122a:	bd80      	pop	{r7, pc}

0801122c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801122c:	b580      	push	{r7, lr}
 801122e:	b088      	sub	sp, #32
 8011230:	af00      	add	r7, sp, #0
 8011232:	60f8      	str	r0, [r7, #12]
 8011234:	60b9      	str	r1, [r7, #8]
 8011236:	607a      	str	r2, [r7, #4]
 8011238:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801123a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801123c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	009b      	lsls	r3, r3, #2
 8011242:	461a      	mov	r2, r3
 8011244:	21a5      	movs	r1, #165	; 0xa5
 8011246:	f001 fef1 	bl	801302c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801124a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801124c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801124e:	6879      	ldr	r1, [r7, #4]
 8011250:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8011254:	440b      	add	r3, r1
 8011256:	009b      	lsls	r3, r3, #2
 8011258:	4413      	add	r3, r2
 801125a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801125c:	69bb      	ldr	r3, [r7, #24]
 801125e:	f023 0307 	bic.w	r3, r3, #7
 8011262:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8011264:	69bb      	ldr	r3, [r7, #24]
 8011266:	f003 0307 	and.w	r3, r3, #7
 801126a:	2b00      	cmp	r3, #0
 801126c:	d00a      	beq.n	8011284 <prvInitialiseNewTask+0x58>
	__asm volatile
 801126e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011272:	f383 8811 	msr	BASEPRI, r3
 8011276:	f3bf 8f6f 	isb	sy
 801127a:	f3bf 8f4f 	dsb	sy
 801127e:	617b      	str	r3, [r7, #20]
}
 8011280:	bf00      	nop
 8011282:	e7fe      	b.n	8011282 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8011284:	68bb      	ldr	r3, [r7, #8]
 8011286:	2b00      	cmp	r3, #0
 8011288:	d01f      	beq.n	80112ca <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801128a:	2300      	movs	r3, #0
 801128c:	61fb      	str	r3, [r7, #28]
 801128e:	e012      	b.n	80112b6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8011290:	68ba      	ldr	r2, [r7, #8]
 8011292:	69fb      	ldr	r3, [r7, #28]
 8011294:	4413      	add	r3, r2
 8011296:	7819      	ldrb	r1, [r3, #0]
 8011298:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801129a:	69fb      	ldr	r3, [r7, #28]
 801129c:	4413      	add	r3, r2
 801129e:	3334      	adds	r3, #52	; 0x34
 80112a0:	460a      	mov	r2, r1
 80112a2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80112a4:	68ba      	ldr	r2, [r7, #8]
 80112a6:	69fb      	ldr	r3, [r7, #28]
 80112a8:	4413      	add	r3, r2
 80112aa:	781b      	ldrb	r3, [r3, #0]
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d006      	beq.n	80112be <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80112b0:	69fb      	ldr	r3, [r7, #28]
 80112b2:	3301      	adds	r3, #1
 80112b4:	61fb      	str	r3, [r7, #28]
 80112b6:	69fb      	ldr	r3, [r7, #28]
 80112b8:	2b0f      	cmp	r3, #15
 80112ba:	d9e9      	bls.n	8011290 <prvInitialiseNewTask+0x64>
 80112bc:	e000      	b.n	80112c0 <prvInitialiseNewTask+0x94>
			{
				break;
 80112be:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80112c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112c2:	2200      	movs	r2, #0
 80112c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80112c8:	e003      	b.n	80112d2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80112ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112cc:	2200      	movs	r2, #0
 80112ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80112d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112d4:	2b37      	cmp	r3, #55	; 0x37
 80112d6:	d901      	bls.n	80112dc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80112d8:	2337      	movs	r3, #55	; 0x37
 80112da:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80112dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80112e0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80112e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80112e6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80112e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112ea:	2200      	movs	r2, #0
 80112ec:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80112ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112f0:	3304      	adds	r3, #4
 80112f2:	4618      	mov	r0, r3
 80112f4:	f7ff f882 	bl	80103fc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80112f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112fa:	3318      	adds	r3, #24
 80112fc:	4618      	mov	r0, r3
 80112fe:	f7ff f87d 	bl	80103fc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8011302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011304:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011306:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801130a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801130e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011310:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8011312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011314:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011316:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8011318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801131a:	2200      	movs	r2, #0
 801131c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801131e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011320:	2200      	movs	r2, #0
 8011322:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011326:	683a      	ldr	r2, [r7, #0]
 8011328:	68f9      	ldr	r1, [r7, #12]
 801132a:	69b8      	ldr	r0, [r7, #24]
 801132c:	f001 f9fe 	bl	801272c <pxPortInitialiseStack>
 8011330:	4602      	mov	r2, r0
 8011332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011334:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8011336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011338:	2b00      	cmp	r3, #0
 801133a:	d002      	beq.n	8011342 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801133c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801133e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011340:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011342:	bf00      	nop
 8011344:	3720      	adds	r7, #32
 8011346:	46bd      	mov	sp, r7
 8011348:	bd80      	pop	{r7, pc}
	...

0801134c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801134c:	b580      	push	{r7, lr}
 801134e:	b082      	sub	sp, #8
 8011350:	af00      	add	r7, sp, #0
 8011352:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011354:	f001 fb16 	bl	8012984 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8011358:	4b2d      	ldr	r3, [pc, #180]	; (8011410 <prvAddNewTaskToReadyList+0xc4>)
 801135a:	681b      	ldr	r3, [r3, #0]
 801135c:	3301      	adds	r3, #1
 801135e:	4a2c      	ldr	r2, [pc, #176]	; (8011410 <prvAddNewTaskToReadyList+0xc4>)
 8011360:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8011362:	4b2c      	ldr	r3, [pc, #176]	; (8011414 <prvAddNewTaskToReadyList+0xc8>)
 8011364:	681b      	ldr	r3, [r3, #0]
 8011366:	2b00      	cmp	r3, #0
 8011368:	d109      	bne.n	801137e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801136a:	4a2a      	ldr	r2, [pc, #168]	; (8011414 <prvAddNewTaskToReadyList+0xc8>)
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8011370:	4b27      	ldr	r3, [pc, #156]	; (8011410 <prvAddNewTaskToReadyList+0xc4>)
 8011372:	681b      	ldr	r3, [r3, #0]
 8011374:	2b01      	cmp	r3, #1
 8011376:	d110      	bne.n	801139a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8011378:	f000 fcb4 	bl	8011ce4 <prvInitialiseTaskLists>
 801137c:	e00d      	b.n	801139a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801137e:	4b26      	ldr	r3, [pc, #152]	; (8011418 <prvAddNewTaskToReadyList+0xcc>)
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	2b00      	cmp	r3, #0
 8011384:	d109      	bne.n	801139a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8011386:	4b23      	ldr	r3, [pc, #140]	; (8011414 <prvAddNewTaskToReadyList+0xc8>)
 8011388:	681b      	ldr	r3, [r3, #0]
 801138a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011390:	429a      	cmp	r2, r3
 8011392:	d802      	bhi.n	801139a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8011394:	4a1f      	ldr	r2, [pc, #124]	; (8011414 <prvAddNewTaskToReadyList+0xc8>)
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801139a:	4b20      	ldr	r3, [pc, #128]	; (801141c <prvAddNewTaskToReadyList+0xd0>)
 801139c:	681b      	ldr	r3, [r3, #0]
 801139e:	3301      	adds	r3, #1
 80113a0:	4a1e      	ldr	r2, [pc, #120]	; (801141c <prvAddNewTaskToReadyList+0xd0>)
 80113a2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80113a4:	4b1d      	ldr	r3, [pc, #116]	; (801141c <prvAddNewTaskToReadyList+0xd0>)
 80113a6:	681a      	ldr	r2, [r3, #0]
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80113b0:	4b1b      	ldr	r3, [pc, #108]	; (8011420 <prvAddNewTaskToReadyList+0xd4>)
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	429a      	cmp	r2, r3
 80113b6:	d903      	bls.n	80113c0 <prvAddNewTaskToReadyList+0x74>
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113bc:	4a18      	ldr	r2, [pc, #96]	; (8011420 <prvAddNewTaskToReadyList+0xd4>)
 80113be:	6013      	str	r3, [r2, #0]
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80113c4:	4613      	mov	r3, r2
 80113c6:	009b      	lsls	r3, r3, #2
 80113c8:	4413      	add	r3, r2
 80113ca:	009b      	lsls	r3, r3, #2
 80113cc:	4a15      	ldr	r2, [pc, #84]	; (8011424 <prvAddNewTaskToReadyList+0xd8>)
 80113ce:	441a      	add	r2, r3
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	3304      	adds	r3, #4
 80113d4:	4619      	mov	r1, r3
 80113d6:	4610      	mov	r0, r2
 80113d8:	f7ff f81d 	bl	8010416 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80113dc:	f001 fb02 	bl	80129e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80113e0:	4b0d      	ldr	r3, [pc, #52]	; (8011418 <prvAddNewTaskToReadyList+0xcc>)
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	d00e      	beq.n	8011406 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80113e8:	4b0a      	ldr	r3, [pc, #40]	; (8011414 <prvAddNewTaskToReadyList+0xc8>)
 80113ea:	681b      	ldr	r3, [r3, #0]
 80113ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113f2:	429a      	cmp	r2, r3
 80113f4:	d207      	bcs.n	8011406 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80113f6:	4b0c      	ldr	r3, [pc, #48]	; (8011428 <prvAddNewTaskToReadyList+0xdc>)
 80113f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80113fc:	601a      	str	r2, [r3, #0]
 80113fe:	f3bf 8f4f 	dsb	sy
 8011402:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011406:	bf00      	nop
 8011408:	3708      	adds	r7, #8
 801140a:	46bd      	mov	sp, r7
 801140c:	bd80      	pop	{r7, pc}
 801140e:	bf00      	nop
 8011410:	2400120c 	.word	0x2400120c
 8011414:	24000d38 	.word	0x24000d38
 8011418:	24001218 	.word	0x24001218
 801141c:	24001228 	.word	0x24001228
 8011420:	24001214 	.word	0x24001214
 8011424:	24000d3c 	.word	0x24000d3c
 8011428:	e000ed04 	.word	0xe000ed04

0801142c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801142c:	b580      	push	{r7, lr}
 801142e:	b084      	sub	sp, #16
 8011430:	af00      	add	r7, sp, #0
 8011432:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8011434:	2300      	movs	r3, #0
 8011436:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	2b00      	cmp	r3, #0
 801143c:	d017      	beq.n	801146e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801143e:	4b13      	ldr	r3, [pc, #76]	; (801148c <vTaskDelay+0x60>)
 8011440:	681b      	ldr	r3, [r3, #0]
 8011442:	2b00      	cmp	r3, #0
 8011444:	d00a      	beq.n	801145c <vTaskDelay+0x30>
	__asm volatile
 8011446:	f04f 0350 	mov.w	r3, #80	; 0x50
 801144a:	f383 8811 	msr	BASEPRI, r3
 801144e:	f3bf 8f6f 	isb	sy
 8011452:	f3bf 8f4f 	dsb	sy
 8011456:	60bb      	str	r3, [r7, #8]
}
 8011458:	bf00      	nop
 801145a:	e7fe      	b.n	801145a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 801145c:	f000 f880 	bl	8011560 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8011460:	2100      	movs	r1, #0
 8011462:	6878      	ldr	r0, [r7, #4]
 8011464:	f000 fda0 	bl	8011fa8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8011468:	f000 f888 	bl	801157c <xTaskResumeAll>
 801146c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801146e:	68fb      	ldr	r3, [r7, #12]
 8011470:	2b00      	cmp	r3, #0
 8011472:	d107      	bne.n	8011484 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8011474:	4b06      	ldr	r3, [pc, #24]	; (8011490 <vTaskDelay+0x64>)
 8011476:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801147a:	601a      	str	r2, [r3, #0]
 801147c:	f3bf 8f4f 	dsb	sy
 8011480:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011484:	bf00      	nop
 8011486:	3710      	adds	r7, #16
 8011488:	46bd      	mov	sp, r7
 801148a:	bd80      	pop	{r7, pc}
 801148c:	24001234 	.word	0x24001234
 8011490:	e000ed04 	.word	0xe000ed04

08011494 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8011494:	b580      	push	{r7, lr}
 8011496:	b08a      	sub	sp, #40	; 0x28
 8011498:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801149a:	2300      	movs	r3, #0
 801149c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801149e:	2300      	movs	r3, #0
 80114a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80114a2:	463a      	mov	r2, r7
 80114a4:	1d39      	adds	r1, r7, #4
 80114a6:	f107 0308 	add.w	r3, r7, #8
 80114aa:	4618      	mov	r0, r3
 80114ac:	f7fe fd64 	bl	800ff78 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80114b0:	6839      	ldr	r1, [r7, #0]
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	68ba      	ldr	r2, [r7, #8]
 80114b6:	9202      	str	r2, [sp, #8]
 80114b8:	9301      	str	r3, [sp, #4]
 80114ba:	2300      	movs	r3, #0
 80114bc:	9300      	str	r3, [sp, #0]
 80114be:	2300      	movs	r3, #0
 80114c0:	460a      	mov	r2, r1
 80114c2:	4921      	ldr	r1, [pc, #132]	; (8011548 <vTaskStartScheduler+0xb4>)
 80114c4:	4821      	ldr	r0, [pc, #132]	; (801154c <vTaskStartScheduler+0xb8>)
 80114c6:	f7ff fe0f 	bl	80110e8 <xTaskCreateStatic>
 80114ca:	4603      	mov	r3, r0
 80114cc:	4a20      	ldr	r2, [pc, #128]	; (8011550 <vTaskStartScheduler+0xbc>)
 80114ce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80114d0:	4b1f      	ldr	r3, [pc, #124]	; (8011550 <vTaskStartScheduler+0xbc>)
 80114d2:	681b      	ldr	r3, [r3, #0]
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d002      	beq.n	80114de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80114d8:	2301      	movs	r3, #1
 80114da:	617b      	str	r3, [r7, #20]
 80114dc:	e001      	b.n	80114e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80114de:	2300      	movs	r3, #0
 80114e0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80114e2:	697b      	ldr	r3, [r7, #20]
 80114e4:	2b01      	cmp	r3, #1
 80114e6:	d102      	bne.n	80114ee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80114e8:	f000 fdb2 	bl	8012050 <xTimerCreateTimerTask>
 80114ec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80114ee:	697b      	ldr	r3, [r7, #20]
 80114f0:	2b01      	cmp	r3, #1
 80114f2:	d116      	bne.n	8011522 <vTaskStartScheduler+0x8e>
	__asm volatile
 80114f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114f8:	f383 8811 	msr	BASEPRI, r3
 80114fc:	f3bf 8f6f 	isb	sy
 8011500:	f3bf 8f4f 	dsb	sy
 8011504:	613b      	str	r3, [r7, #16]
}
 8011506:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8011508:	4b12      	ldr	r3, [pc, #72]	; (8011554 <vTaskStartScheduler+0xc0>)
 801150a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801150e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8011510:	4b11      	ldr	r3, [pc, #68]	; (8011558 <vTaskStartScheduler+0xc4>)
 8011512:	2201      	movs	r2, #1
 8011514:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8011516:	4b11      	ldr	r3, [pc, #68]	; (801155c <vTaskStartScheduler+0xc8>)
 8011518:	2200      	movs	r2, #0
 801151a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801151c:	f001 f990 	bl	8012840 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8011520:	e00e      	b.n	8011540 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011522:	697b      	ldr	r3, [r7, #20]
 8011524:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011528:	d10a      	bne.n	8011540 <vTaskStartScheduler+0xac>
	__asm volatile
 801152a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801152e:	f383 8811 	msr	BASEPRI, r3
 8011532:	f3bf 8f6f 	isb	sy
 8011536:	f3bf 8f4f 	dsb	sy
 801153a:	60fb      	str	r3, [r7, #12]
}
 801153c:	bf00      	nop
 801153e:	e7fe      	b.n	801153e <vTaskStartScheduler+0xaa>
}
 8011540:	bf00      	nop
 8011542:	3718      	adds	r7, #24
 8011544:	46bd      	mov	sp, r7
 8011546:	bd80      	pop	{r7, pc}
 8011548:	08014268 	.word	0x08014268
 801154c:	08011cb5 	.word	0x08011cb5
 8011550:	24001230 	.word	0x24001230
 8011554:	2400122c 	.word	0x2400122c
 8011558:	24001218 	.word	0x24001218
 801155c:	24001210 	.word	0x24001210

08011560 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011560:	b480      	push	{r7}
 8011562:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8011564:	4b04      	ldr	r3, [pc, #16]	; (8011578 <vTaskSuspendAll+0x18>)
 8011566:	681b      	ldr	r3, [r3, #0]
 8011568:	3301      	adds	r3, #1
 801156a:	4a03      	ldr	r2, [pc, #12]	; (8011578 <vTaskSuspendAll+0x18>)
 801156c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801156e:	bf00      	nop
 8011570:	46bd      	mov	sp, r7
 8011572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011576:	4770      	bx	lr
 8011578:	24001234 	.word	0x24001234

0801157c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801157c:	b580      	push	{r7, lr}
 801157e:	b084      	sub	sp, #16
 8011580:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8011582:	2300      	movs	r3, #0
 8011584:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8011586:	2300      	movs	r3, #0
 8011588:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801158a:	4b42      	ldr	r3, [pc, #264]	; (8011694 <xTaskResumeAll+0x118>)
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	2b00      	cmp	r3, #0
 8011590:	d10a      	bne.n	80115a8 <xTaskResumeAll+0x2c>
	__asm volatile
 8011592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011596:	f383 8811 	msr	BASEPRI, r3
 801159a:	f3bf 8f6f 	isb	sy
 801159e:	f3bf 8f4f 	dsb	sy
 80115a2:	603b      	str	r3, [r7, #0]
}
 80115a4:	bf00      	nop
 80115a6:	e7fe      	b.n	80115a6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80115a8:	f001 f9ec 	bl	8012984 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80115ac:	4b39      	ldr	r3, [pc, #228]	; (8011694 <xTaskResumeAll+0x118>)
 80115ae:	681b      	ldr	r3, [r3, #0]
 80115b0:	3b01      	subs	r3, #1
 80115b2:	4a38      	ldr	r2, [pc, #224]	; (8011694 <xTaskResumeAll+0x118>)
 80115b4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80115b6:	4b37      	ldr	r3, [pc, #220]	; (8011694 <xTaskResumeAll+0x118>)
 80115b8:	681b      	ldr	r3, [r3, #0]
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d162      	bne.n	8011684 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80115be:	4b36      	ldr	r3, [pc, #216]	; (8011698 <xTaskResumeAll+0x11c>)
 80115c0:	681b      	ldr	r3, [r3, #0]
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	d05e      	beq.n	8011684 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80115c6:	e02f      	b.n	8011628 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80115c8:	4b34      	ldr	r3, [pc, #208]	; (801169c <xTaskResumeAll+0x120>)
 80115ca:	68db      	ldr	r3, [r3, #12]
 80115cc:	68db      	ldr	r3, [r3, #12]
 80115ce:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80115d0:	68fb      	ldr	r3, [r7, #12]
 80115d2:	3318      	adds	r3, #24
 80115d4:	4618      	mov	r0, r3
 80115d6:	f7fe ff7b 	bl	80104d0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80115da:	68fb      	ldr	r3, [r7, #12]
 80115dc:	3304      	adds	r3, #4
 80115de:	4618      	mov	r0, r3
 80115e0:	f7fe ff76 	bl	80104d0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80115e4:	68fb      	ldr	r3, [r7, #12]
 80115e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80115e8:	4b2d      	ldr	r3, [pc, #180]	; (80116a0 <xTaskResumeAll+0x124>)
 80115ea:	681b      	ldr	r3, [r3, #0]
 80115ec:	429a      	cmp	r2, r3
 80115ee:	d903      	bls.n	80115f8 <xTaskResumeAll+0x7c>
 80115f0:	68fb      	ldr	r3, [r7, #12]
 80115f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115f4:	4a2a      	ldr	r2, [pc, #168]	; (80116a0 <xTaskResumeAll+0x124>)
 80115f6:	6013      	str	r3, [r2, #0]
 80115f8:	68fb      	ldr	r3, [r7, #12]
 80115fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80115fc:	4613      	mov	r3, r2
 80115fe:	009b      	lsls	r3, r3, #2
 8011600:	4413      	add	r3, r2
 8011602:	009b      	lsls	r3, r3, #2
 8011604:	4a27      	ldr	r2, [pc, #156]	; (80116a4 <xTaskResumeAll+0x128>)
 8011606:	441a      	add	r2, r3
 8011608:	68fb      	ldr	r3, [r7, #12]
 801160a:	3304      	adds	r3, #4
 801160c:	4619      	mov	r1, r3
 801160e:	4610      	mov	r0, r2
 8011610:	f7fe ff01 	bl	8010416 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011614:	68fb      	ldr	r3, [r7, #12]
 8011616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011618:	4b23      	ldr	r3, [pc, #140]	; (80116a8 <xTaskResumeAll+0x12c>)
 801161a:	681b      	ldr	r3, [r3, #0]
 801161c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801161e:	429a      	cmp	r2, r3
 8011620:	d302      	bcc.n	8011628 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8011622:	4b22      	ldr	r3, [pc, #136]	; (80116ac <xTaskResumeAll+0x130>)
 8011624:	2201      	movs	r2, #1
 8011626:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011628:	4b1c      	ldr	r3, [pc, #112]	; (801169c <xTaskResumeAll+0x120>)
 801162a:	681b      	ldr	r3, [r3, #0]
 801162c:	2b00      	cmp	r3, #0
 801162e:	d1cb      	bne.n	80115c8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011630:	68fb      	ldr	r3, [r7, #12]
 8011632:	2b00      	cmp	r3, #0
 8011634:	d001      	beq.n	801163a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8011636:	f000 fbf3 	bl	8011e20 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801163a:	4b1d      	ldr	r3, [pc, #116]	; (80116b0 <xTaskResumeAll+0x134>)
 801163c:	681b      	ldr	r3, [r3, #0]
 801163e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	2b00      	cmp	r3, #0
 8011644:	d010      	beq.n	8011668 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8011646:	f000 f847 	bl	80116d8 <xTaskIncrementTick>
 801164a:	4603      	mov	r3, r0
 801164c:	2b00      	cmp	r3, #0
 801164e:	d002      	beq.n	8011656 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8011650:	4b16      	ldr	r3, [pc, #88]	; (80116ac <xTaskResumeAll+0x130>)
 8011652:	2201      	movs	r2, #1
 8011654:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	3b01      	subs	r3, #1
 801165a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	2b00      	cmp	r3, #0
 8011660:	d1f1      	bne.n	8011646 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8011662:	4b13      	ldr	r3, [pc, #76]	; (80116b0 <xTaskResumeAll+0x134>)
 8011664:	2200      	movs	r2, #0
 8011666:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8011668:	4b10      	ldr	r3, [pc, #64]	; (80116ac <xTaskResumeAll+0x130>)
 801166a:	681b      	ldr	r3, [r3, #0]
 801166c:	2b00      	cmp	r3, #0
 801166e:	d009      	beq.n	8011684 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011670:	2301      	movs	r3, #1
 8011672:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011674:	4b0f      	ldr	r3, [pc, #60]	; (80116b4 <xTaskResumeAll+0x138>)
 8011676:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801167a:	601a      	str	r2, [r3, #0]
 801167c:	f3bf 8f4f 	dsb	sy
 8011680:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011684:	f001 f9ae 	bl	80129e4 <vPortExitCritical>

	return xAlreadyYielded;
 8011688:	68bb      	ldr	r3, [r7, #8]
}
 801168a:	4618      	mov	r0, r3
 801168c:	3710      	adds	r7, #16
 801168e:	46bd      	mov	sp, r7
 8011690:	bd80      	pop	{r7, pc}
 8011692:	bf00      	nop
 8011694:	24001234 	.word	0x24001234
 8011698:	2400120c 	.word	0x2400120c
 801169c:	240011cc 	.word	0x240011cc
 80116a0:	24001214 	.word	0x24001214
 80116a4:	24000d3c 	.word	0x24000d3c
 80116a8:	24000d38 	.word	0x24000d38
 80116ac:	24001220 	.word	0x24001220
 80116b0:	2400121c 	.word	0x2400121c
 80116b4:	e000ed04 	.word	0xe000ed04

080116b8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80116b8:	b480      	push	{r7}
 80116ba:	b083      	sub	sp, #12
 80116bc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80116be:	4b05      	ldr	r3, [pc, #20]	; (80116d4 <xTaskGetTickCount+0x1c>)
 80116c0:	681b      	ldr	r3, [r3, #0]
 80116c2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80116c4:	687b      	ldr	r3, [r7, #4]
}
 80116c6:	4618      	mov	r0, r3
 80116c8:	370c      	adds	r7, #12
 80116ca:	46bd      	mov	sp, r7
 80116cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116d0:	4770      	bx	lr
 80116d2:	bf00      	nop
 80116d4:	24001210 	.word	0x24001210

080116d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80116d8:	b580      	push	{r7, lr}
 80116da:	b086      	sub	sp, #24
 80116dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80116de:	2300      	movs	r3, #0
 80116e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80116e2:	4b4f      	ldr	r3, [pc, #316]	; (8011820 <xTaskIncrementTick+0x148>)
 80116e4:	681b      	ldr	r3, [r3, #0]
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	f040 808f 	bne.w	801180a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80116ec:	4b4d      	ldr	r3, [pc, #308]	; (8011824 <xTaskIncrementTick+0x14c>)
 80116ee:	681b      	ldr	r3, [r3, #0]
 80116f0:	3301      	adds	r3, #1
 80116f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80116f4:	4a4b      	ldr	r2, [pc, #300]	; (8011824 <xTaskIncrementTick+0x14c>)
 80116f6:	693b      	ldr	r3, [r7, #16]
 80116f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80116fa:	693b      	ldr	r3, [r7, #16]
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	d120      	bne.n	8011742 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8011700:	4b49      	ldr	r3, [pc, #292]	; (8011828 <xTaskIncrementTick+0x150>)
 8011702:	681b      	ldr	r3, [r3, #0]
 8011704:	681b      	ldr	r3, [r3, #0]
 8011706:	2b00      	cmp	r3, #0
 8011708:	d00a      	beq.n	8011720 <xTaskIncrementTick+0x48>
	__asm volatile
 801170a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801170e:	f383 8811 	msr	BASEPRI, r3
 8011712:	f3bf 8f6f 	isb	sy
 8011716:	f3bf 8f4f 	dsb	sy
 801171a:	603b      	str	r3, [r7, #0]
}
 801171c:	bf00      	nop
 801171e:	e7fe      	b.n	801171e <xTaskIncrementTick+0x46>
 8011720:	4b41      	ldr	r3, [pc, #260]	; (8011828 <xTaskIncrementTick+0x150>)
 8011722:	681b      	ldr	r3, [r3, #0]
 8011724:	60fb      	str	r3, [r7, #12]
 8011726:	4b41      	ldr	r3, [pc, #260]	; (801182c <xTaskIncrementTick+0x154>)
 8011728:	681b      	ldr	r3, [r3, #0]
 801172a:	4a3f      	ldr	r2, [pc, #252]	; (8011828 <xTaskIncrementTick+0x150>)
 801172c:	6013      	str	r3, [r2, #0]
 801172e:	4a3f      	ldr	r2, [pc, #252]	; (801182c <xTaskIncrementTick+0x154>)
 8011730:	68fb      	ldr	r3, [r7, #12]
 8011732:	6013      	str	r3, [r2, #0]
 8011734:	4b3e      	ldr	r3, [pc, #248]	; (8011830 <xTaskIncrementTick+0x158>)
 8011736:	681b      	ldr	r3, [r3, #0]
 8011738:	3301      	adds	r3, #1
 801173a:	4a3d      	ldr	r2, [pc, #244]	; (8011830 <xTaskIncrementTick+0x158>)
 801173c:	6013      	str	r3, [r2, #0]
 801173e:	f000 fb6f 	bl	8011e20 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011742:	4b3c      	ldr	r3, [pc, #240]	; (8011834 <xTaskIncrementTick+0x15c>)
 8011744:	681b      	ldr	r3, [r3, #0]
 8011746:	693a      	ldr	r2, [r7, #16]
 8011748:	429a      	cmp	r2, r3
 801174a:	d349      	bcc.n	80117e0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801174c:	4b36      	ldr	r3, [pc, #216]	; (8011828 <xTaskIncrementTick+0x150>)
 801174e:	681b      	ldr	r3, [r3, #0]
 8011750:	681b      	ldr	r3, [r3, #0]
 8011752:	2b00      	cmp	r3, #0
 8011754:	d104      	bne.n	8011760 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011756:	4b37      	ldr	r3, [pc, #220]	; (8011834 <xTaskIncrementTick+0x15c>)
 8011758:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801175c:	601a      	str	r2, [r3, #0]
					break;
 801175e:	e03f      	b.n	80117e0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011760:	4b31      	ldr	r3, [pc, #196]	; (8011828 <xTaskIncrementTick+0x150>)
 8011762:	681b      	ldr	r3, [r3, #0]
 8011764:	68db      	ldr	r3, [r3, #12]
 8011766:	68db      	ldr	r3, [r3, #12]
 8011768:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801176a:	68bb      	ldr	r3, [r7, #8]
 801176c:	685b      	ldr	r3, [r3, #4]
 801176e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011770:	693a      	ldr	r2, [r7, #16]
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	429a      	cmp	r2, r3
 8011776:	d203      	bcs.n	8011780 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011778:	4a2e      	ldr	r2, [pc, #184]	; (8011834 <xTaskIncrementTick+0x15c>)
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801177e:	e02f      	b.n	80117e0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011780:	68bb      	ldr	r3, [r7, #8]
 8011782:	3304      	adds	r3, #4
 8011784:	4618      	mov	r0, r3
 8011786:	f7fe fea3 	bl	80104d0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801178a:	68bb      	ldr	r3, [r7, #8]
 801178c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801178e:	2b00      	cmp	r3, #0
 8011790:	d004      	beq.n	801179c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011792:	68bb      	ldr	r3, [r7, #8]
 8011794:	3318      	adds	r3, #24
 8011796:	4618      	mov	r0, r3
 8011798:	f7fe fe9a 	bl	80104d0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801179c:	68bb      	ldr	r3, [r7, #8]
 801179e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80117a0:	4b25      	ldr	r3, [pc, #148]	; (8011838 <xTaskIncrementTick+0x160>)
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	429a      	cmp	r2, r3
 80117a6:	d903      	bls.n	80117b0 <xTaskIncrementTick+0xd8>
 80117a8:	68bb      	ldr	r3, [r7, #8]
 80117aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80117ac:	4a22      	ldr	r2, [pc, #136]	; (8011838 <xTaskIncrementTick+0x160>)
 80117ae:	6013      	str	r3, [r2, #0]
 80117b0:	68bb      	ldr	r3, [r7, #8]
 80117b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80117b4:	4613      	mov	r3, r2
 80117b6:	009b      	lsls	r3, r3, #2
 80117b8:	4413      	add	r3, r2
 80117ba:	009b      	lsls	r3, r3, #2
 80117bc:	4a1f      	ldr	r2, [pc, #124]	; (801183c <xTaskIncrementTick+0x164>)
 80117be:	441a      	add	r2, r3
 80117c0:	68bb      	ldr	r3, [r7, #8]
 80117c2:	3304      	adds	r3, #4
 80117c4:	4619      	mov	r1, r3
 80117c6:	4610      	mov	r0, r2
 80117c8:	f7fe fe25 	bl	8010416 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80117cc:	68bb      	ldr	r3, [r7, #8]
 80117ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80117d0:	4b1b      	ldr	r3, [pc, #108]	; (8011840 <xTaskIncrementTick+0x168>)
 80117d2:	681b      	ldr	r3, [r3, #0]
 80117d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80117d6:	429a      	cmp	r2, r3
 80117d8:	d3b8      	bcc.n	801174c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80117da:	2301      	movs	r3, #1
 80117dc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80117de:	e7b5      	b.n	801174c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80117e0:	4b17      	ldr	r3, [pc, #92]	; (8011840 <xTaskIncrementTick+0x168>)
 80117e2:	681b      	ldr	r3, [r3, #0]
 80117e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80117e6:	4915      	ldr	r1, [pc, #84]	; (801183c <xTaskIncrementTick+0x164>)
 80117e8:	4613      	mov	r3, r2
 80117ea:	009b      	lsls	r3, r3, #2
 80117ec:	4413      	add	r3, r2
 80117ee:	009b      	lsls	r3, r3, #2
 80117f0:	440b      	add	r3, r1
 80117f2:	681b      	ldr	r3, [r3, #0]
 80117f4:	2b01      	cmp	r3, #1
 80117f6:	d901      	bls.n	80117fc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80117f8:	2301      	movs	r3, #1
 80117fa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80117fc:	4b11      	ldr	r3, [pc, #68]	; (8011844 <xTaskIncrementTick+0x16c>)
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	2b00      	cmp	r3, #0
 8011802:	d007      	beq.n	8011814 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8011804:	2301      	movs	r3, #1
 8011806:	617b      	str	r3, [r7, #20]
 8011808:	e004      	b.n	8011814 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801180a:	4b0f      	ldr	r3, [pc, #60]	; (8011848 <xTaskIncrementTick+0x170>)
 801180c:	681b      	ldr	r3, [r3, #0]
 801180e:	3301      	adds	r3, #1
 8011810:	4a0d      	ldr	r2, [pc, #52]	; (8011848 <xTaskIncrementTick+0x170>)
 8011812:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8011814:	697b      	ldr	r3, [r7, #20]
}
 8011816:	4618      	mov	r0, r3
 8011818:	3718      	adds	r7, #24
 801181a:	46bd      	mov	sp, r7
 801181c:	bd80      	pop	{r7, pc}
 801181e:	bf00      	nop
 8011820:	24001234 	.word	0x24001234
 8011824:	24001210 	.word	0x24001210
 8011828:	240011c4 	.word	0x240011c4
 801182c:	240011c8 	.word	0x240011c8
 8011830:	24001224 	.word	0x24001224
 8011834:	2400122c 	.word	0x2400122c
 8011838:	24001214 	.word	0x24001214
 801183c:	24000d3c 	.word	0x24000d3c
 8011840:	24000d38 	.word	0x24000d38
 8011844:	24001220 	.word	0x24001220
 8011848:	2400121c 	.word	0x2400121c

0801184c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801184c:	b480      	push	{r7}
 801184e:	b085      	sub	sp, #20
 8011850:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011852:	4b28      	ldr	r3, [pc, #160]	; (80118f4 <vTaskSwitchContext+0xa8>)
 8011854:	681b      	ldr	r3, [r3, #0]
 8011856:	2b00      	cmp	r3, #0
 8011858:	d003      	beq.n	8011862 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801185a:	4b27      	ldr	r3, [pc, #156]	; (80118f8 <vTaskSwitchContext+0xac>)
 801185c:	2201      	movs	r2, #1
 801185e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011860:	e041      	b.n	80118e6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8011862:	4b25      	ldr	r3, [pc, #148]	; (80118f8 <vTaskSwitchContext+0xac>)
 8011864:	2200      	movs	r2, #0
 8011866:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011868:	4b24      	ldr	r3, [pc, #144]	; (80118fc <vTaskSwitchContext+0xb0>)
 801186a:	681b      	ldr	r3, [r3, #0]
 801186c:	60fb      	str	r3, [r7, #12]
 801186e:	e010      	b.n	8011892 <vTaskSwitchContext+0x46>
 8011870:	68fb      	ldr	r3, [r7, #12]
 8011872:	2b00      	cmp	r3, #0
 8011874:	d10a      	bne.n	801188c <vTaskSwitchContext+0x40>
	__asm volatile
 8011876:	f04f 0350 	mov.w	r3, #80	; 0x50
 801187a:	f383 8811 	msr	BASEPRI, r3
 801187e:	f3bf 8f6f 	isb	sy
 8011882:	f3bf 8f4f 	dsb	sy
 8011886:	607b      	str	r3, [r7, #4]
}
 8011888:	bf00      	nop
 801188a:	e7fe      	b.n	801188a <vTaskSwitchContext+0x3e>
 801188c:	68fb      	ldr	r3, [r7, #12]
 801188e:	3b01      	subs	r3, #1
 8011890:	60fb      	str	r3, [r7, #12]
 8011892:	491b      	ldr	r1, [pc, #108]	; (8011900 <vTaskSwitchContext+0xb4>)
 8011894:	68fa      	ldr	r2, [r7, #12]
 8011896:	4613      	mov	r3, r2
 8011898:	009b      	lsls	r3, r3, #2
 801189a:	4413      	add	r3, r2
 801189c:	009b      	lsls	r3, r3, #2
 801189e:	440b      	add	r3, r1
 80118a0:	681b      	ldr	r3, [r3, #0]
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	d0e4      	beq.n	8011870 <vTaskSwitchContext+0x24>
 80118a6:	68fa      	ldr	r2, [r7, #12]
 80118a8:	4613      	mov	r3, r2
 80118aa:	009b      	lsls	r3, r3, #2
 80118ac:	4413      	add	r3, r2
 80118ae:	009b      	lsls	r3, r3, #2
 80118b0:	4a13      	ldr	r2, [pc, #76]	; (8011900 <vTaskSwitchContext+0xb4>)
 80118b2:	4413      	add	r3, r2
 80118b4:	60bb      	str	r3, [r7, #8]
 80118b6:	68bb      	ldr	r3, [r7, #8]
 80118b8:	685b      	ldr	r3, [r3, #4]
 80118ba:	685a      	ldr	r2, [r3, #4]
 80118bc:	68bb      	ldr	r3, [r7, #8]
 80118be:	605a      	str	r2, [r3, #4]
 80118c0:	68bb      	ldr	r3, [r7, #8]
 80118c2:	685a      	ldr	r2, [r3, #4]
 80118c4:	68bb      	ldr	r3, [r7, #8]
 80118c6:	3308      	adds	r3, #8
 80118c8:	429a      	cmp	r2, r3
 80118ca:	d104      	bne.n	80118d6 <vTaskSwitchContext+0x8a>
 80118cc:	68bb      	ldr	r3, [r7, #8]
 80118ce:	685b      	ldr	r3, [r3, #4]
 80118d0:	685a      	ldr	r2, [r3, #4]
 80118d2:	68bb      	ldr	r3, [r7, #8]
 80118d4:	605a      	str	r2, [r3, #4]
 80118d6:	68bb      	ldr	r3, [r7, #8]
 80118d8:	685b      	ldr	r3, [r3, #4]
 80118da:	68db      	ldr	r3, [r3, #12]
 80118dc:	4a09      	ldr	r2, [pc, #36]	; (8011904 <vTaskSwitchContext+0xb8>)
 80118de:	6013      	str	r3, [r2, #0]
 80118e0:	4a06      	ldr	r2, [pc, #24]	; (80118fc <vTaskSwitchContext+0xb0>)
 80118e2:	68fb      	ldr	r3, [r7, #12]
 80118e4:	6013      	str	r3, [r2, #0]
}
 80118e6:	bf00      	nop
 80118e8:	3714      	adds	r7, #20
 80118ea:	46bd      	mov	sp, r7
 80118ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118f0:	4770      	bx	lr
 80118f2:	bf00      	nop
 80118f4:	24001234 	.word	0x24001234
 80118f8:	24001220 	.word	0x24001220
 80118fc:	24001214 	.word	0x24001214
 8011900:	24000d3c 	.word	0x24000d3c
 8011904:	24000d38 	.word	0x24000d38

08011908 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011908:	b580      	push	{r7, lr}
 801190a:	b084      	sub	sp, #16
 801190c:	af00      	add	r7, sp, #0
 801190e:	6078      	str	r0, [r7, #4]
 8011910:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	2b00      	cmp	r3, #0
 8011916:	d10a      	bne.n	801192e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8011918:	f04f 0350 	mov.w	r3, #80	; 0x50
 801191c:	f383 8811 	msr	BASEPRI, r3
 8011920:	f3bf 8f6f 	isb	sy
 8011924:	f3bf 8f4f 	dsb	sy
 8011928:	60fb      	str	r3, [r7, #12]
}
 801192a:	bf00      	nop
 801192c:	e7fe      	b.n	801192c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801192e:	4b07      	ldr	r3, [pc, #28]	; (801194c <vTaskPlaceOnEventList+0x44>)
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	3318      	adds	r3, #24
 8011934:	4619      	mov	r1, r3
 8011936:	6878      	ldr	r0, [r7, #4]
 8011938:	f7fe fd91 	bl	801045e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801193c:	2101      	movs	r1, #1
 801193e:	6838      	ldr	r0, [r7, #0]
 8011940:	f000 fb32 	bl	8011fa8 <prvAddCurrentTaskToDelayedList>
}
 8011944:	bf00      	nop
 8011946:	3710      	adds	r7, #16
 8011948:	46bd      	mov	sp, r7
 801194a:	bd80      	pop	{r7, pc}
 801194c:	24000d38 	.word	0x24000d38

08011950 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8011950:	b580      	push	{r7, lr}
 8011952:	b086      	sub	sp, #24
 8011954:	af00      	add	r7, sp, #0
 8011956:	60f8      	str	r0, [r7, #12]
 8011958:	60b9      	str	r1, [r7, #8]
 801195a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 801195c:	68fb      	ldr	r3, [r7, #12]
 801195e:	2b00      	cmp	r3, #0
 8011960:	d10a      	bne.n	8011978 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8011962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011966:	f383 8811 	msr	BASEPRI, r3
 801196a:	f3bf 8f6f 	isb	sy
 801196e:	f3bf 8f4f 	dsb	sy
 8011972:	617b      	str	r3, [r7, #20]
}
 8011974:	bf00      	nop
 8011976:	e7fe      	b.n	8011976 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8011978:	4b11      	ldr	r3, [pc, #68]	; (80119c0 <vTaskPlaceOnUnorderedEventList+0x70>)
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	2b00      	cmp	r3, #0
 801197e:	d10a      	bne.n	8011996 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8011980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011984:	f383 8811 	msr	BASEPRI, r3
 8011988:	f3bf 8f6f 	isb	sy
 801198c:	f3bf 8f4f 	dsb	sy
 8011990:	613b      	str	r3, [r7, #16]
}
 8011992:	bf00      	nop
 8011994:	e7fe      	b.n	8011994 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8011996:	4b0b      	ldr	r3, [pc, #44]	; (80119c4 <vTaskPlaceOnUnorderedEventList+0x74>)
 8011998:	681b      	ldr	r3, [r3, #0]
 801199a:	68ba      	ldr	r2, [r7, #8]
 801199c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80119a0:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80119a2:	4b08      	ldr	r3, [pc, #32]	; (80119c4 <vTaskPlaceOnUnorderedEventList+0x74>)
 80119a4:	681b      	ldr	r3, [r3, #0]
 80119a6:	3318      	adds	r3, #24
 80119a8:	4619      	mov	r1, r3
 80119aa:	68f8      	ldr	r0, [r7, #12]
 80119ac:	f7fe fd33 	bl	8010416 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80119b0:	2101      	movs	r1, #1
 80119b2:	6878      	ldr	r0, [r7, #4]
 80119b4:	f000 faf8 	bl	8011fa8 <prvAddCurrentTaskToDelayedList>
}
 80119b8:	bf00      	nop
 80119ba:	3718      	adds	r7, #24
 80119bc:	46bd      	mov	sp, r7
 80119be:	bd80      	pop	{r7, pc}
 80119c0:	24001234 	.word	0x24001234
 80119c4:	24000d38 	.word	0x24000d38

080119c8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80119c8:	b580      	push	{r7, lr}
 80119ca:	b086      	sub	sp, #24
 80119cc:	af00      	add	r7, sp, #0
 80119ce:	60f8      	str	r0, [r7, #12]
 80119d0:	60b9      	str	r1, [r7, #8]
 80119d2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80119d4:	68fb      	ldr	r3, [r7, #12]
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d10a      	bne.n	80119f0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80119da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119de:	f383 8811 	msr	BASEPRI, r3
 80119e2:	f3bf 8f6f 	isb	sy
 80119e6:	f3bf 8f4f 	dsb	sy
 80119ea:	617b      	str	r3, [r7, #20]
}
 80119ec:	bf00      	nop
 80119ee:	e7fe      	b.n	80119ee <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80119f0:	4b0a      	ldr	r3, [pc, #40]	; (8011a1c <vTaskPlaceOnEventListRestricted+0x54>)
 80119f2:	681b      	ldr	r3, [r3, #0]
 80119f4:	3318      	adds	r3, #24
 80119f6:	4619      	mov	r1, r3
 80119f8:	68f8      	ldr	r0, [r7, #12]
 80119fa:	f7fe fd0c 	bl	8010416 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d002      	beq.n	8011a0a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8011a04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011a08:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8011a0a:	6879      	ldr	r1, [r7, #4]
 8011a0c:	68b8      	ldr	r0, [r7, #8]
 8011a0e:	f000 facb 	bl	8011fa8 <prvAddCurrentTaskToDelayedList>
	}
 8011a12:	bf00      	nop
 8011a14:	3718      	adds	r7, #24
 8011a16:	46bd      	mov	sp, r7
 8011a18:	bd80      	pop	{r7, pc}
 8011a1a:	bf00      	nop
 8011a1c:	24000d38 	.word	0x24000d38

08011a20 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011a20:	b580      	push	{r7, lr}
 8011a22:	b086      	sub	sp, #24
 8011a24:	af00      	add	r7, sp, #0
 8011a26:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	68db      	ldr	r3, [r3, #12]
 8011a2c:	68db      	ldr	r3, [r3, #12]
 8011a2e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011a30:	693b      	ldr	r3, [r7, #16]
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d10a      	bne.n	8011a4c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8011a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a3a:	f383 8811 	msr	BASEPRI, r3
 8011a3e:	f3bf 8f6f 	isb	sy
 8011a42:	f3bf 8f4f 	dsb	sy
 8011a46:	60fb      	str	r3, [r7, #12]
}
 8011a48:	bf00      	nop
 8011a4a:	e7fe      	b.n	8011a4a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011a4c:	693b      	ldr	r3, [r7, #16]
 8011a4e:	3318      	adds	r3, #24
 8011a50:	4618      	mov	r0, r3
 8011a52:	f7fe fd3d 	bl	80104d0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011a56:	4b1e      	ldr	r3, [pc, #120]	; (8011ad0 <xTaskRemoveFromEventList+0xb0>)
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d11d      	bne.n	8011a9a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011a5e:	693b      	ldr	r3, [r7, #16]
 8011a60:	3304      	adds	r3, #4
 8011a62:	4618      	mov	r0, r3
 8011a64:	f7fe fd34 	bl	80104d0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011a68:	693b      	ldr	r3, [r7, #16]
 8011a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a6c:	4b19      	ldr	r3, [pc, #100]	; (8011ad4 <xTaskRemoveFromEventList+0xb4>)
 8011a6e:	681b      	ldr	r3, [r3, #0]
 8011a70:	429a      	cmp	r2, r3
 8011a72:	d903      	bls.n	8011a7c <xTaskRemoveFromEventList+0x5c>
 8011a74:	693b      	ldr	r3, [r7, #16]
 8011a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a78:	4a16      	ldr	r2, [pc, #88]	; (8011ad4 <xTaskRemoveFromEventList+0xb4>)
 8011a7a:	6013      	str	r3, [r2, #0]
 8011a7c:	693b      	ldr	r3, [r7, #16]
 8011a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a80:	4613      	mov	r3, r2
 8011a82:	009b      	lsls	r3, r3, #2
 8011a84:	4413      	add	r3, r2
 8011a86:	009b      	lsls	r3, r3, #2
 8011a88:	4a13      	ldr	r2, [pc, #76]	; (8011ad8 <xTaskRemoveFromEventList+0xb8>)
 8011a8a:	441a      	add	r2, r3
 8011a8c:	693b      	ldr	r3, [r7, #16]
 8011a8e:	3304      	adds	r3, #4
 8011a90:	4619      	mov	r1, r3
 8011a92:	4610      	mov	r0, r2
 8011a94:	f7fe fcbf 	bl	8010416 <vListInsertEnd>
 8011a98:	e005      	b.n	8011aa6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011a9a:	693b      	ldr	r3, [r7, #16]
 8011a9c:	3318      	adds	r3, #24
 8011a9e:	4619      	mov	r1, r3
 8011aa0:	480e      	ldr	r0, [pc, #56]	; (8011adc <xTaskRemoveFromEventList+0xbc>)
 8011aa2:	f7fe fcb8 	bl	8010416 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011aa6:	693b      	ldr	r3, [r7, #16]
 8011aa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011aaa:	4b0d      	ldr	r3, [pc, #52]	; (8011ae0 <xTaskRemoveFromEventList+0xc0>)
 8011aac:	681b      	ldr	r3, [r3, #0]
 8011aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ab0:	429a      	cmp	r2, r3
 8011ab2:	d905      	bls.n	8011ac0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011ab4:	2301      	movs	r3, #1
 8011ab6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011ab8:	4b0a      	ldr	r3, [pc, #40]	; (8011ae4 <xTaskRemoveFromEventList+0xc4>)
 8011aba:	2201      	movs	r2, #1
 8011abc:	601a      	str	r2, [r3, #0]
 8011abe:	e001      	b.n	8011ac4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8011ac0:	2300      	movs	r3, #0
 8011ac2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8011ac4:	697b      	ldr	r3, [r7, #20]
}
 8011ac6:	4618      	mov	r0, r3
 8011ac8:	3718      	adds	r7, #24
 8011aca:	46bd      	mov	sp, r7
 8011acc:	bd80      	pop	{r7, pc}
 8011ace:	bf00      	nop
 8011ad0:	24001234 	.word	0x24001234
 8011ad4:	24001214 	.word	0x24001214
 8011ad8:	24000d3c 	.word	0x24000d3c
 8011adc:	240011cc 	.word	0x240011cc
 8011ae0:	24000d38 	.word	0x24000d38
 8011ae4:	24001220 	.word	0x24001220

08011ae8 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8011ae8:	b580      	push	{r7, lr}
 8011aea:	b086      	sub	sp, #24
 8011aec:	af00      	add	r7, sp, #0
 8011aee:	6078      	str	r0, [r7, #4]
 8011af0:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8011af2:	4b29      	ldr	r3, [pc, #164]	; (8011b98 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8011af4:	681b      	ldr	r3, [r3, #0]
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d10a      	bne.n	8011b10 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8011afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011afe:	f383 8811 	msr	BASEPRI, r3
 8011b02:	f3bf 8f6f 	isb	sy
 8011b06:	f3bf 8f4f 	dsb	sy
 8011b0a:	613b      	str	r3, [r7, #16]
}
 8011b0c:	bf00      	nop
 8011b0e:	e7fe      	b.n	8011b0e <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8011b10:	683b      	ldr	r3, [r7, #0]
 8011b12:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	68db      	ldr	r3, [r3, #12]
 8011b1e:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8011b20:	697b      	ldr	r3, [r7, #20]
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d10a      	bne.n	8011b3c <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8011b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b2a:	f383 8811 	msr	BASEPRI, r3
 8011b2e:	f3bf 8f6f 	isb	sy
 8011b32:	f3bf 8f4f 	dsb	sy
 8011b36:	60fb      	str	r3, [r7, #12]
}
 8011b38:	bf00      	nop
 8011b3a:	e7fe      	b.n	8011b3a <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8011b3c:	6878      	ldr	r0, [r7, #4]
 8011b3e:	f7fe fcc7 	bl	80104d0 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011b42:	697b      	ldr	r3, [r7, #20]
 8011b44:	3304      	adds	r3, #4
 8011b46:	4618      	mov	r0, r3
 8011b48:	f7fe fcc2 	bl	80104d0 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8011b4c:	697b      	ldr	r3, [r7, #20]
 8011b4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b50:	4b12      	ldr	r3, [pc, #72]	; (8011b9c <vTaskRemoveFromUnorderedEventList+0xb4>)
 8011b52:	681b      	ldr	r3, [r3, #0]
 8011b54:	429a      	cmp	r2, r3
 8011b56:	d903      	bls.n	8011b60 <vTaskRemoveFromUnorderedEventList+0x78>
 8011b58:	697b      	ldr	r3, [r7, #20]
 8011b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b5c:	4a0f      	ldr	r2, [pc, #60]	; (8011b9c <vTaskRemoveFromUnorderedEventList+0xb4>)
 8011b5e:	6013      	str	r3, [r2, #0]
 8011b60:	697b      	ldr	r3, [r7, #20]
 8011b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b64:	4613      	mov	r3, r2
 8011b66:	009b      	lsls	r3, r3, #2
 8011b68:	4413      	add	r3, r2
 8011b6a:	009b      	lsls	r3, r3, #2
 8011b6c:	4a0c      	ldr	r2, [pc, #48]	; (8011ba0 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8011b6e:	441a      	add	r2, r3
 8011b70:	697b      	ldr	r3, [r7, #20]
 8011b72:	3304      	adds	r3, #4
 8011b74:	4619      	mov	r1, r3
 8011b76:	4610      	mov	r0, r2
 8011b78:	f7fe fc4d 	bl	8010416 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011b7c:	697b      	ldr	r3, [r7, #20]
 8011b7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b80:	4b08      	ldr	r3, [pc, #32]	; (8011ba4 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8011b82:	681b      	ldr	r3, [r3, #0]
 8011b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b86:	429a      	cmp	r2, r3
 8011b88:	d902      	bls.n	8011b90 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8011b8a:	4b07      	ldr	r3, [pc, #28]	; (8011ba8 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8011b8c:	2201      	movs	r2, #1
 8011b8e:	601a      	str	r2, [r3, #0]
	}
}
 8011b90:	bf00      	nop
 8011b92:	3718      	adds	r7, #24
 8011b94:	46bd      	mov	sp, r7
 8011b96:	bd80      	pop	{r7, pc}
 8011b98:	24001234 	.word	0x24001234
 8011b9c:	24001214 	.word	0x24001214
 8011ba0:	24000d3c 	.word	0x24000d3c
 8011ba4:	24000d38 	.word	0x24000d38
 8011ba8:	24001220 	.word	0x24001220

08011bac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011bac:	b480      	push	{r7}
 8011bae:	b083      	sub	sp, #12
 8011bb0:	af00      	add	r7, sp, #0
 8011bb2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011bb4:	4b06      	ldr	r3, [pc, #24]	; (8011bd0 <vTaskInternalSetTimeOutState+0x24>)
 8011bb6:	681a      	ldr	r2, [r3, #0]
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011bbc:	4b05      	ldr	r3, [pc, #20]	; (8011bd4 <vTaskInternalSetTimeOutState+0x28>)
 8011bbe:	681a      	ldr	r2, [r3, #0]
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	605a      	str	r2, [r3, #4]
}
 8011bc4:	bf00      	nop
 8011bc6:	370c      	adds	r7, #12
 8011bc8:	46bd      	mov	sp, r7
 8011bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bce:	4770      	bx	lr
 8011bd0:	24001224 	.word	0x24001224
 8011bd4:	24001210 	.word	0x24001210

08011bd8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011bd8:	b580      	push	{r7, lr}
 8011bda:	b088      	sub	sp, #32
 8011bdc:	af00      	add	r7, sp, #0
 8011bde:	6078      	str	r0, [r7, #4]
 8011be0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d10a      	bne.n	8011bfe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8011be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bec:	f383 8811 	msr	BASEPRI, r3
 8011bf0:	f3bf 8f6f 	isb	sy
 8011bf4:	f3bf 8f4f 	dsb	sy
 8011bf8:	613b      	str	r3, [r7, #16]
}
 8011bfa:	bf00      	nop
 8011bfc:	e7fe      	b.n	8011bfc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8011bfe:	683b      	ldr	r3, [r7, #0]
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d10a      	bne.n	8011c1a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8011c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c08:	f383 8811 	msr	BASEPRI, r3
 8011c0c:	f3bf 8f6f 	isb	sy
 8011c10:	f3bf 8f4f 	dsb	sy
 8011c14:	60fb      	str	r3, [r7, #12]
}
 8011c16:	bf00      	nop
 8011c18:	e7fe      	b.n	8011c18 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8011c1a:	f000 feb3 	bl	8012984 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011c1e:	4b1d      	ldr	r3, [pc, #116]	; (8011c94 <xTaskCheckForTimeOut+0xbc>)
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	685b      	ldr	r3, [r3, #4]
 8011c28:	69ba      	ldr	r2, [r7, #24]
 8011c2a:	1ad3      	subs	r3, r2, r3
 8011c2c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011c2e:	683b      	ldr	r3, [r7, #0]
 8011c30:	681b      	ldr	r3, [r3, #0]
 8011c32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011c36:	d102      	bne.n	8011c3e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011c38:	2300      	movs	r3, #0
 8011c3a:	61fb      	str	r3, [r7, #28]
 8011c3c:	e023      	b.n	8011c86 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	681a      	ldr	r2, [r3, #0]
 8011c42:	4b15      	ldr	r3, [pc, #84]	; (8011c98 <xTaskCheckForTimeOut+0xc0>)
 8011c44:	681b      	ldr	r3, [r3, #0]
 8011c46:	429a      	cmp	r2, r3
 8011c48:	d007      	beq.n	8011c5a <xTaskCheckForTimeOut+0x82>
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	685b      	ldr	r3, [r3, #4]
 8011c4e:	69ba      	ldr	r2, [r7, #24]
 8011c50:	429a      	cmp	r2, r3
 8011c52:	d302      	bcc.n	8011c5a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011c54:	2301      	movs	r3, #1
 8011c56:	61fb      	str	r3, [r7, #28]
 8011c58:	e015      	b.n	8011c86 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011c5a:	683b      	ldr	r3, [r7, #0]
 8011c5c:	681b      	ldr	r3, [r3, #0]
 8011c5e:	697a      	ldr	r2, [r7, #20]
 8011c60:	429a      	cmp	r2, r3
 8011c62:	d20b      	bcs.n	8011c7c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011c64:	683b      	ldr	r3, [r7, #0]
 8011c66:	681a      	ldr	r2, [r3, #0]
 8011c68:	697b      	ldr	r3, [r7, #20]
 8011c6a:	1ad2      	subs	r2, r2, r3
 8011c6c:	683b      	ldr	r3, [r7, #0]
 8011c6e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011c70:	6878      	ldr	r0, [r7, #4]
 8011c72:	f7ff ff9b 	bl	8011bac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8011c76:	2300      	movs	r3, #0
 8011c78:	61fb      	str	r3, [r7, #28]
 8011c7a:	e004      	b.n	8011c86 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8011c7c:	683b      	ldr	r3, [r7, #0]
 8011c7e:	2200      	movs	r2, #0
 8011c80:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8011c82:	2301      	movs	r3, #1
 8011c84:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8011c86:	f000 fead 	bl	80129e4 <vPortExitCritical>

	return xReturn;
 8011c8a:	69fb      	ldr	r3, [r7, #28]
}
 8011c8c:	4618      	mov	r0, r3
 8011c8e:	3720      	adds	r7, #32
 8011c90:	46bd      	mov	sp, r7
 8011c92:	bd80      	pop	{r7, pc}
 8011c94:	24001210 	.word	0x24001210
 8011c98:	24001224 	.word	0x24001224

08011c9c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011c9c:	b480      	push	{r7}
 8011c9e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011ca0:	4b03      	ldr	r3, [pc, #12]	; (8011cb0 <vTaskMissedYield+0x14>)
 8011ca2:	2201      	movs	r2, #1
 8011ca4:	601a      	str	r2, [r3, #0]
}
 8011ca6:	bf00      	nop
 8011ca8:	46bd      	mov	sp, r7
 8011caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cae:	4770      	bx	lr
 8011cb0:	24001220 	.word	0x24001220

08011cb4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011cb4:	b580      	push	{r7, lr}
 8011cb6:	b082      	sub	sp, #8
 8011cb8:	af00      	add	r7, sp, #0
 8011cba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011cbc:	f000 f852 	bl	8011d64 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011cc0:	4b06      	ldr	r3, [pc, #24]	; (8011cdc <prvIdleTask+0x28>)
 8011cc2:	681b      	ldr	r3, [r3, #0]
 8011cc4:	2b01      	cmp	r3, #1
 8011cc6:	d9f9      	bls.n	8011cbc <prvIdleTask+0x8>
			{
				taskYIELD();
 8011cc8:	4b05      	ldr	r3, [pc, #20]	; (8011ce0 <prvIdleTask+0x2c>)
 8011cca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011cce:	601a      	str	r2, [r3, #0]
 8011cd0:	f3bf 8f4f 	dsb	sy
 8011cd4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8011cd8:	e7f0      	b.n	8011cbc <prvIdleTask+0x8>
 8011cda:	bf00      	nop
 8011cdc:	24000d3c 	.word	0x24000d3c
 8011ce0:	e000ed04 	.word	0xe000ed04

08011ce4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011ce4:	b580      	push	{r7, lr}
 8011ce6:	b082      	sub	sp, #8
 8011ce8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011cea:	2300      	movs	r3, #0
 8011cec:	607b      	str	r3, [r7, #4]
 8011cee:	e00c      	b.n	8011d0a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011cf0:	687a      	ldr	r2, [r7, #4]
 8011cf2:	4613      	mov	r3, r2
 8011cf4:	009b      	lsls	r3, r3, #2
 8011cf6:	4413      	add	r3, r2
 8011cf8:	009b      	lsls	r3, r3, #2
 8011cfa:	4a12      	ldr	r2, [pc, #72]	; (8011d44 <prvInitialiseTaskLists+0x60>)
 8011cfc:	4413      	add	r3, r2
 8011cfe:	4618      	mov	r0, r3
 8011d00:	f7fe fb5c 	bl	80103bc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	3301      	adds	r3, #1
 8011d08:	607b      	str	r3, [r7, #4]
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	2b37      	cmp	r3, #55	; 0x37
 8011d0e:	d9ef      	bls.n	8011cf0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011d10:	480d      	ldr	r0, [pc, #52]	; (8011d48 <prvInitialiseTaskLists+0x64>)
 8011d12:	f7fe fb53 	bl	80103bc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011d16:	480d      	ldr	r0, [pc, #52]	; (8011d4c <prvInitialiseTaskLists+0x68>)
 8011d18:	f7fe fb50 	bl	80103bc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011d1c:	480c      	ldr	r0, [pc, #48]	; (8011d50 <prvInitialiseTaskLists+0x6c>)
 8011d1e:	f7fe fb4d 	bl	80103bc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011d22:	480c      	ldr	r0, [pc, #48]	; (8011d54 <prvInitialiseTaskLists+0x70>)
 8011d24:	f7fe fb4a 	bl	80103bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011d28:	480b      	ldr	r0, [pc, #44]	; (8011d58 <prvInitialiseTaskLists+0x74>)
 8011d2a:	f7fe fb47 	bl	80103bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011d2e:	4b0b      	ldr	r3, [pc, #44]	; (8011d5c <prvInitialiseTaskLists+0x78>)
 8011d30:	4a05      	ldr	r2, [pc, #20]	; (8011d48 <prvInitialiseTaskLists+0x64>)
 8011d32:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011d34:	4b0a      	ldr	r3, [pc, #40]	; (8011d60 <prvInitialiseTaskLists+0x7c>)
 8011d36:	4a05      	ldr	r2, [pc, #20]	; (8011d4c <prvInitialiseTaskLists+0x68>)
 8011d38:	601a      	str	r2, [r3, #0]
}
 8011d3a:	bf00      	nop
 8011d3c:	3708      	adds	r7, #8
 8011d3e:	46bd      	mov	sp, r7
 8011d40:	bd80      	pop	{r7, pc}
 8011d42:	bf00      	nop
 8011d44:	24000d3c 	.word	0x24000d3c
 8011d48:	2400119c 	.word	0x2400119c
 8011d4c:	240011b0 	.word	0x240011b0
 8011d50:	240011cc 	.word	0x240011cc
 8011d54:	240011e0 	.word	0x240011e0
 8011d58:	240011f8 	.word	0x240011f8
 8011d5c:	240011c4 	.word	0x240011c4
 8011d60:	240011c8 	.word	0x240011c8

08011d64 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011d64:	b580      	push	{r7, lr}
 8011d66:	b082      	sub	sp, #8
 8011d68:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011d6a:	e019      	b.n	8011da0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011d6c:	f000 fe0a 	bl	8012984 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011d70:	4b10      	ldr	r3, [pc, #64]	; (8011db4 <prvCheckTasksWaitingTermination+0x50>)
 8011d72:	68db      	ldr	r3, [r3, #12]
 8011d74:	68db      	ldr	r3, [r3, #12]
 8011d76:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	3304      	adds	r3, #4
 8011d7c:	4618      	mov	r0, r3
 8011d7e:	f7fe fba7 	bl	80104d0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011d82:	4b0d      	ldr	r3, [pc, #52]	; (8011db8 <prvCheckTasksWaitingTermination+0x54>)
 8011d84:	681b      	ldr	r3, [r3, #0]
 8011d86:	3b01      	subs	r3, #1
 8011d88:	4a0b      	ldr	r2, [pc, #44]	; (8011db8 <prvCheckTasksWaitingTermination+0x54>)
 8011d8a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011d8c:	4b0b      	ldr	r3, [pc, #44]	; (8011dbc <prvCheckTasksWaitingTermination+0x58>)
 8011d8e:	681b      	ldr	r3, [r3, #0]
 8011d90:	3b01      	subs	r3, #1
 8011d92:	4a0a      	ldr	r2, [pc, #40]	; (8011dbc <prvCheckTasksWaitingTermination+0x58>)
 8011d94:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8011d96:	f000 fe25 	bl	80129e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8011d9a:	6878      	ldr	r0, [r7, #4]
 8011d9c:	f000 f810 	bl	8011dc0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011da0:	4b06      	ldr	r3, [pc, #24]	; (8011dbc <prvCheckTasksWaitingTermination+0x58>)
 8011da2:	681b      	ldr	r3, [r3, #0]
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d1e1      	bne.n	8011d6c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011da8:	bf00      	nop
 8011daa:	bf00      	nop
 8011dac:	3708      	adds	r7, #8
 8011dae:	46bd      	mov	sp, r7
 8011db0:	bd80      	pop	{r7, pc}
 8011db2:	bf00      	nop
 8011db4:	240011e0 	.word	0x240011e0
 8011db8:	2400120c 	.word	0x2400120c
 8011dbc:	240011f4 	.word	0x240011f4

08011dc0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011dc0:	b580      	push	{r7, lr}
 8011dc2:	b084      	sub	sp, #16
 8011dc4:	af00      	add	r7, sp, #0
 8011dc6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d108      	bne.n	8011de4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011dd6:	4618      	mov	r0, r3
 8011dd8:	f000 ffc2 	bl	8012d60 <vPortFree>
				vPortFree( pxTCB );
 8011ddc:	6878      	ldr	r0, [r7, #4]
 8011dde:	f000 ffbf 	bl	8012d60 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011de2:	e018      	b.n	8011e16 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8011dea:	2b01      	cmp	r3, #1
 8011dec:	d103      	bne.n	8011df6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8011dee:	6878      	ldr	r0, [r7, #4]
 8011df0:	f000 ffb6 	bl	8012d60 <vPortFree>
	}
 8011df4:	e00f      	b.n	8011e16 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8011dfc:	2b02      	cmp	r3, #2
 8011dfe:	d00a      	beq.n	8011e16 <prvDeleteTCB+0x56>
	__asm volatile
 8011e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e04:	f383 8811 	msr	BASEPRI, r3
 8011e08:	f3bf 8f6f 	isb	sy
 8011e0c:	f3bf 8f4f 	dsb	sy
 8011e10:	60fb      	str	r3, [r7, #12]
}
 8011e12:	bf00      	nop
 8011e14:	e7fe      	b.n	8011e14 <prvDeleteTCB+0x54>
	}
 8011e16:	bf00      	nop
 8011e18:	3710      	adds	r7, #16
 8011e1a:	46bd      	mov	sp, r7
 8011e1c:	bd80      	pop	{r7, pc}
	...

08011e20 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011e20:	b480      	push	{r7}
 8011e22:	b083      	sub	sp, #12
 8011e24:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011e26:	4b0c      	ldr	r3, [pc, #48]	; (8011e58 <prvResetNextTaskUnblockTime+0x38>)
 8011e28:	681b      	ldr	r3, [r3, #0]
 8011e2a:	681b      	ldr	r3, [r3, #0]
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d104      	bne.n	8011e3a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011e30:	4b0a      	ldr	r3, [pc, #40]	; (8011e5c <prvResetNextTaskUnblockTime+0x3c>)
 8011e32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011e36:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011e38:	e008      	b.n	8011e4c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011e3a:	4b07      	ldr	r3, [pc, #28]	; (8011e58 <prvResetNextTaskUnblockTime+0x38>)
 8011e3c:	681b      	ldr	r3, [r3, #0]
 8011e3e:	68db      	ldr	r3, [r3, #12]
 8011e40:	68db      	ldr	r3, [r3, #12]
 8011e42:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	685b      	ldr	r3, [r3, #4]
 8011e48:	4a04      	ldr	r2, [pc, #16]	; (8011e5c <prvResetNextTaskUnblockTime+0x3c>)
 8011e4a:	6013      	str	r3, [r2, #0]
}
 8011e4c:	bf00      	nop
 8011e4e:	370c      	adds	r7, #12
 8011e50:	46bd      	mov	sp, r7
 8011e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e56:	4770      	bx	lr
 8011e58:	240011c4 	.word	0x240011c4
 8011e5c:	2400122c 	.word	0x2400122c

08011e60 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011e60:	b480      	push	{r7}
 8011e62:	b083      	sub	sp, #12
 8011e64:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011e66:	4b0b      	ldr	r3, [pc, #44]	; (8011e94 <xTaskGetSchedulerState+0x34>)
 8011e68:	681b      	ldr	r3, [r3, #0]
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	d102      	bne.n	8011e74 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011e6e:	2301      	movs	r3, #1
 8011e70:	607b      	str	r3, [r7, #4]
 8011e72:	e008      	b.n	8011e86 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011e74:	4b08      	ldr	r3, [pc, #32]	; (8011e98 <xTaskGetSchedulerState+0x38>)
 8011e76:	681b      	ldr	r3, [r3, #0]
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	d102      	bne.n	8011e82 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011e7c:	2302      	movs	r3, #2
 8011e7e:	607b      	str	r3, [r7, #4]
 8011e80:	e001      	b.n	8011e86 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8011e82:	2300      	movs	r3, #0
 8011e84:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011e86:	687b      	ldr	r3, [r7, #4]
	}
 8011e88:	4618      	mov	r0, r3
 8011e8a:	370c      	adds	r7, #12
 8011e8c:	46bd      	mov	sp, r7
 8011e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e92:	4770      	bx	lr
 8011e94:	24001218 	.word	0x24001218
 8011e98:	24001234 	.word	0x24001234

08011e9c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011e9c:	b580      	push	{r7, lr}
 8011e9e:	b086      	sub	sp, #24
 8011ea0:	af00      	add	r7, sp, #0
 8011ea2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011ea8:	2300      	movs	r3, #0
 8011eaa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	d056      	beq.n	8011f60 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8011eb2:	4b2e      	ldr	r3, [pc, #184]	; (8011f6c <xTaskPriorityDisinherit+0xd0>)
 8011eb4:	681b      	ldr	r3, [r3, #0]
 8011eb6:	693a      	ldr	r2, [r7, #16]
 8011eb8:	429a      	cmp	r2, r3
 8011eba:	d00a      	beq.n	8011ed2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8011ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ec0:	f383 8811 	msr	BASEPRI, r3
 8011ec4:	f3bf 8f6f 	isb	sy
 8011ec8:	f3bf 8f4f 	dsb	sy
 8011ecc:	60fb      	str	r3, [r7, #12]
}
 8011ece:	bf00      	nop
 8011ed0:	e7fe      	b.n	8011ed0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8011ed2:	693b      	ldr	r3, [r7, #16]
 8011ed4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d10a      	bne.n	8011ef0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8011eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ede:	f383 8811 	msr	BASEPRI, r3
 8011ee2:	f3bf 8f6f 	isb	sy
 8011ee6:	f3bf 8f4f 	dsb	sy
 8011eea:	60bb      	str	r3, [r7, #8]
}
 8011eec:	bf00      	nop
 8011eee:	e7fe      	b.n	8011eee <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8011ef0:	693b      	ldr	r3, [r7, #16]
 8011ef2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011ef4:	1e5a      	subs	r2, r3, #1
 8011ef6:	693b      	ldr	r3, [r7, #16]
 8011ef8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011efa:	693b      	ldr	r3, [r7, #16]
 8011efc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011efe:	693b      	ldr	r3, [r7, #16]
 8011f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011f02:	429a      	cmp	r2, r3
 8011f04:	d02c      	beq.n	8011f60 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011f06:	693b      	ldr	r3, [r7, #16]
 8011f08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	d128      	bne.n	8011f60 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011f0e:	693b      	ldr	r3, [r7, #16]
 8011f10:	3304      	adds	r3, #4
 8011f12:	4618      	mov	r0, r3
 8011f14:	f7fe fadc 	bl	80104d0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011f18:	693b      	ldr	r3, [r7, #16]
 8011f1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011f1c:	693b      	ldr	r3, [r7, #16]
 8011f1e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011f20:	693b      	ldr	r3, [r7, #16]
 8011f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f24:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011f28:	693b      	ldr	r3, [r7, #16]
 8011f2a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011f2c:	693b      	ldr	r3, [r7, #16]
 8011f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f30:	4b0f      	ldr	r3, [pc, #60]	; (8011f70 <xTaskPriorityDisinherit+0xd4>)
 8011f32:	681b      	ldr	r3, [r3, #0]
 8011f34:	429a      	cmp	r2, r3
 8011f36:	d903      	bls.n	8011f40 <xTaskPriorityDisinherit+0xa4>
 8011f38:	693b      	ldr	r3, [r7, #16]
 8011f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f3c:	4a0c      	ldr	r2, [pc, #48]	; (8011f70 <xTaskPriorityDisinherit+0xd4>)
 8011f3e:	6013      	str	r3, [r2, #0]
 8011f40:	693b      	ldr	r3, [r7, #16]
 8011f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f44:	4613      	mov	r3, r2
 8011f46:	009b      	lsls	r3, r3, #2
 8011f48:	4413      	add	r3, r2
 8011f4a:	009b      	lsls	r3, r3, #2
 8011f4c:	4a09      	ldr	r2, [pc, #36]	; (8011f74 <xTaskPriorityDisinherit+0xd8>)
 8011f4e:	441a      	add	r2, r3
 8011f50:	693b      	ldr	r3, [r7, #16]
 8011f52:	3304      	adds	r3, #4
 8011f54:	4619      	mov	r1, r3
 8011f56:	4610      	mov	r0, r2
 8011f58:	f7fe fa5d 	bl	8010416 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011f5c:	2301      	movs	r3, #1
 8011f5e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011f60:	697b      	ldr	r3, [r7, #20]
	}
 8011f62:	4618      	mov	r0, r3
 8011f64:	3718      	adds	r7, #24
 8011f66:	46bd      	mov	sp, r7
 8011f68:	bd80      	pop	{r7, pc}
 8011f6a:	bf00      	nop
 8011f6c:	24000d38 	.word	0x24000d38
 8011f70:	24001214 	.word	0x24001214
 8011f74:	24000d3c 	.word	0x24000d3c

08011f78 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8011f78:	b480      	push	{r7}
 8011f7a:	b083      	sub	sp, #12
 8011f7c:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8011f7e:	4b09      	ldr	r3, [pc, #36]	; (8011fa4 <uxTaskResetEventItemValue+0x2c>)
 8011f80:	681b      	ldr	r3, [r3, #0]
 8011f82:	699b      	ldr	r3, [r3, #24]
 8011f84:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011f86:	4b07      	ldr	r3, [pc, #28]	; (8011fa4 <uxTaskResetEventItemValue+0x2c>)
 8011f88:	681b      	ldr	r3, [r3, #0]
 8011f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f8c:	4b05      	ldr	r3, [pc, #20]	; (8011fa4 <uxTaskResetEventItemValue+0x2c>)
 8011f8e:	681b      	ldr	r3, [r3, #0]
 8011f90:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8011f94:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8011f96:	687b      	ldr	r3, [r7, #4]
}
 8011f98:	4618      	mov	r0, r3
 8011f9a:	370c      	adds	r7, #12
 8011f9c:	46bd      	mov	sp, r7
 8011f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fa2:	4770      	bx	lr
 8011fa4:	24000d38 	.word	0x24000d38

08011fa8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011fa8:	b580      	push	{r7, lr}
 8011faa:	b084      	sub	sp, #16
 8011fac:	af00      	add	r7, sp, #0
 8011fae:	6078      	str	r0, [r7, #4]
 8011fb0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011fb2:	4b21      	ldr	r3, [pc, #132]	; (8012038 <prvAddCurrentTaskToDelayedList+0x90>)
 8011fb4:	681b      	ldr	r3, [r3, #0]
 8011fb6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011fb8:	4b20      	ldr	r3, [pc, #128]	; (801203c <prvAddCurrentTaskToDelayedList+0x94>)
 8011fba:	681b      	ldr	r3, [r3, #0]
 8011fbc:	3304      	adds	r3, #4
 8011fbe:	4618      	mov	r0, r3
 8011fc0:	f7fe fa86 	bl	80104d0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011fca:	d10a      	bne.n	8011fe2 <prvAddCurrentTaskToDelayedList+0x3a>
 8011fcc:	683b      	ldr	r3, [r7, #0]
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	d007      	beq.n	8011fe2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011fd2:	4b1a      	ldr	r3, [pc, #104]	; (801203c <prvAddCurrentTaskToDelayedList+0x94>)
 8011fd4:	681b      	ldr	r3, [r3, #0]
 8011fd6:	3304      	adds	r3, #4
 8011fd8:	4619      	mov	r1, r3
 8011fda:	4819      	ldr	r0, [pc, #100]	; (8012040 <prvAddCurrentTaskToDelayedList+0x98>)
 8011fdc:	f7fe fa1b 	bl	8010416 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011fe0:	e026      	b.n	8012030 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011fe2:	68fa      	ldr	r2, [r7, #12]
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	4413      	add	r3, r2
 8011fe8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011fea:	4b14      	ldr	r3, [pc, #80]	; (801203c <prvAddCurrentTaskToDelayedList+0x94>)
 8011fec:	681b      	ldr	r3, [r3, #0]
 8011fee:	68ba      	ldr	r2, [r7, #8]
 8011ff0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011ff2:	68ba      	ldr	r2, [r7, #8]
 8011ff4:	68fb      	ldr	r3, [r7, #12]
 8011ff6:	429a      	cmp	r2, r3
 8011ff8:	d209      	bcs.n	801200e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011ffa:	4b12      	ldr	r3, [pc, #72]	; (8012044 <prvAddCurrentTaskToDelayedList+0x9c>)
 8011ffc:	681a      	ldr	r2, [r3, #0]
 8011ffe:	4b0f      	ldr	r3, [pc, #60]	; (801203c <prvAddCurrentTaskToDelayedList+0x94>)
 8012000:	681b      	ldr	r3, [r3, #0]
 8012002:	3304      	adds	r3, #4
 8012004:	4619      	mov	r1, r3
 8012006:	4610      	mov	r0, r2
 8012008:	f7fe fa29 	bl	801045e <vListInsert>
}
 801200c:	e010      	b.n	8012030 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801200e:	4b0e      	ldr	r3, [pc, #56]	; (8012048 <prvAddCurrentTaskToDelayedList+0xa0>)
 8012010:	681a      	ldr	r2, [r3, #0]
 8012012:	4b0a      	ldr	r3, [pc, #40]	; (801203c <prvAddCurrentTaskToDelayedList+0x94>)
 8012014:	681b      	ldr	r3, [r3, #0]
 8012016:	3304      	adds	r3, #4
 8012018:	4619      	mov	r1, r3
 801201a:	4610      	mov	r0, r2
 801201c:	f7fe fa1f 	bl	801045e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8012020:	4b0a      	ldr	r3, [pc, #40]	; (801204c <prvAddCurrentTaskToDelayedList+0xa4>)
 8012022:	681b      	ldr	r3, [r3, #0]
 8012024:	68ba      	ldr	r2, [r7, #8]
 8012026:	429a      	cmp	r2, r3
 8012028:	d202      	bcs.n	8012030 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801202a:	4a08      	ldr	r2, [pc, #32]	; (801204c <prvAddCurrentTaskToDelayedList+0xa4>)
 801202c:	68bb      	ldr	r3, [r7, #8]
 801202e:	6013      	str	r3, [r2, #0]
}
 8012030:	bf00      	nop
 8012032:	3710      	adds	r7, #16
 8012034:	46bd      	mov	sp, r7
 8012036:	bd80      	pop	{r7, pc}
 8012038:	24001210 	.word	0x24001210
 801203c:	24000d38 	.word	0x24000d38
 8012040:	240011f8 	.word	0x240011f8
 8012044:	240011c8 	.word	0x240011c8
 8012048:	240011c4 	.word	0x240011c4
 801204c:	2400122c 	.word	0x2400122c

08012050 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8012050:	b580      	push	{r7, lr}
 8012052:	b08a      	sub	sp, #40	; 0x28
 8012054:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8012056:	2300      	movs	r3, #0
 8012058:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801205a:	f000 fb07 	bl	801266c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801205e:	4b1c      	ldr	r3, [pc, #112]	; (80120d0 <xTimerCreateTimerTask+0x80>)
 8012060:	681b      	ldr	r3, [r3, #0]
 8012062:	2b00      	cmp	r3, #0
 8012064:	d021      	beq.n	80120aa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8012066:	2300      	movs	r3, #0
 8012068:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801206a:	2300      	movs	r3, #0
 801206c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801206e:	1d3a      	adds	r2, r7, #4
 8012070:	f107 0108 	add.w	r1, r7, #8
 8012074:	f107 030c 	add.w	r3, r7, #12
 8012078:	4618      	mov	r0, r3
 801207a:	f7fd ff97 	bl	800ffac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801207e:	6879      	ldr	r1, [r7, #4]
 8012080:	68bb      	ldr	r3, [r7, #8]
 8012082:	68fa      	ldr	r2, [r7, #12]
 8012084:	9202      	str	r2, [sp, #8]
 8012086:	9301      	str	r3, [sp, #4]
 8012088:	2302      	movs	r3, #2
 801208a:	9300      	str	r3, [sp, #0]
 801208c:	2300      	movs	r3, #0
 801208e:	460a      	mov	r2, r1
 8012090:	4910      	ldr	r1, [pc, #64]	; (80120d4 <xTimerCreateTimerTask+0x84>)
 8012092:	4811      	ldr	r0, [pc, #68]	; (80120d8 <xTimerCreateTimerTask+0x88>)
 8012094:	f7ff f828 	bl	80110e8 <xTaskCreateStatic>
 8012098:	4603      	mov	r3, r0
 801209a:	4a10      	ldr	r2, [pc, #64]	; (80120dc <xTimerCreateTimerTask+0x8c>)
 801209c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801209e:	4b0f      	ldr	r3, [pc, #60]	; (80120dc <xTimerCreateTimerTask+0x8c>)
 80120a0:	681b      	ldr	r3, [r3, #0]
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	d001      	beq.n	80120aa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80120a6:	2301      	movs	r3, #1
 80120a8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80120aa:	697b      	ldr	r3, [r7, #20]
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d10a      	bne.n	80120c6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80120b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120b4:	f383 8811 	msr	BASEPRI, r3
 80120b8:	f3bf 8f6f 	isb	sy
 80120bc:	f3bf 8f4f 	dsb	sy
 80120c0:	613b      	str	r3, [r7, #16]
}
 80120c2:	bf00      	nop
 80120c4:	e7fe      	b.n	80120c4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80120c6:	697b      	ldr	r3, [r7, #20]
}
 80120c8:	4618      	mov	r0, r3
 80120ca:	3718      	adds	r7, #24
 80120cc:	46bd      	mov	sp, r7
 80120ce:	bd80      	pop	{r7, pc}
 80120d0:	24001268 	.word	0x24001268
 80120d4:	08014270 	.word	0x08014270
 80120d8:	08012215 	.word	0x08012215
 80120dc:	2400126c 	.word	0x2400126c

080120e0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80120e0:	b580      	push	{r7, lr}
 80120e2:	b08a      	sub	sp, #40	; 0x28
 80120e4:	af00      	add	r7, sp, #0
 80120e6:	60f8      	str	r0, [r7, #12]
 80120e8:	60b9      	str	r1, [r7, #8]
 80120ea:	607a      	str	r2, [r7, #4]
 80120ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80120ee:	2300      	movs	r3, #0
 80120f0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80120f2:	68fb      	ldr	r3, [r7, #12]
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d10a      	bne.n	801210e <xTimerGenericCommand+0x2e>
	__asm volatile
 80120f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120fc:	f383 8811 	msr	BASEPRI, r3
 8012100:	f3bf 8f6f 	isb	sy
 8012104:	f3bf 8f4f 	dsb	sy
 8012108:	623b      	str	r3, [r7, #32]
}
 801210a:	bf00      	nop
 801210c:	e7fe      	b.n	801210c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801210e:	4b1a      	ldr	r3, [pc, #104]	; (8012178 <xTimerGenericCommand+0x98>)
 8012110:	681b      	ldr	r3, [r3, #0]
 8012112:	2b00      	cmp	r3, #0
 8012114:	d02a      	beq.n	801216c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8012116:	68bb      	ldr	r3, [r7, #8]
 8012118:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801211e:	68fb      	ldr	r3, [r7, #12]
 8012120:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8012122:	68bb      	ldr	r3, [r7, #8]
 8012124:	2b05      	cmp	r3, #5
 8012126:	dc18      	bgt.n	801215a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8012128:	f7ff fe9a 	bl	8011e60 <xTaskGetSchedulerState>
 801212c:	4603      	mov	r3, r0
 801212e:	2b02      	cmp	r3, #2
 8012130:	d109      	bne.n	8012146 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8012132:	4b11      	ldr	r3, [pc, #68]	; (8012178 <xTimerGenericCommand+0x98>)
 8012134:	6818      	ldr	r0, [r3, #0]
 8012136:	f107 0110 	add.w	r1, r7, #16
 801213a:	2300      	movs	r3, #0
 801213c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801213e:	f7fe fb2f 	bl	80107a0 <xQueueGenericSend>
 8012142:	6278      	str	r0, [r7, #36]	; 0x24
 8012144:	e012      	b.n	801216c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8012146:	4b0c      	ldr	r3, [pc, #48]	; (8012178 <xTimerGenericCommand+0x98>)
 8012148:	6818      	ldr	r0, [r3, #0]
 801214a:	f107 0110 	add.w	r1, r7, #16
 801214e:	2300      	movs	r3, #0
 8012150:	2200      	movs	r2, #0
 8012152:	f7fe fb25 	bl	80107a0 <xQueueGenericSend>
 8012156:	6278      	str	r0, [r7, #36]	; 0x24
 8012158:	e008      	b.n	801216c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801215a:	4b07      	ldr	r3, [pc, #28]	; (8012178 <xTimerGenericCommand+0x98>)
 801215c:	6818      	ldr	r0, [r3, #0]
 801215e:	f107 0110 	add.w	r1, r7, #16
 8012162:	2300      	movs	r3, #0
 8012164:	683a      	ldr	r2, [r7, #0]
 8012166:	f7fe fc19 	bl	801099c <xQueueGenericSendFromISR>
 801216a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801216c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801216e:	4618      	mov	r0, r3
 8012170:	3728      	adds	r7, #40	; 0x28
 8012172:	46bd      	mov	sp, r7
 8012174:	bd80      	pop	{r7, pc}
 8012176:	bf00      	nop
 8012178:	24001268 	.word	0x24001268

0801217c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801217c:	b580      	push	{r7, lr}
 801217e:	b088      	sub	sp, #32
 8012180:	af02      	add	r7, sp, #8
 8012182:	6078      	str	r0, [r7, #4]
 8012184:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012186:	4b22      	ldr	r3, [pc, #136]	; (8012210 <prvProcessExpiredTimer+0x94>)
 8012188:	681b      	ldr	r3, [r3, #0]
 801218a:	68db      	ldr	r3, [r3, #12]
 801218c:	68db      	ldr	r3, [r3, #12]
 801218e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012190:	697b      	ldr	r3, [r7, #20]
 8012192:	3304      	adds	r3, #4
 8012194:	4618      	mov	r0, r3
 8012196:	f7fe f99b 	bl	80104d0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801219a:	697b      	ldr	r3, [r7, #20]
 801219c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80121a0:	f003 0304 	and.w	r3, r3, #4
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	d022      	beq.n	80121ee <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80121a8:	697b      	ldr	r3, [r7, #20]
 80121aa:	699a      	ldr	r2, [r3, #24]
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	18d1      	adds	r1, r2, r3
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	683a      	ldr	r2, [r7, #0]
 80121b4:	6978      	ldr	r0, [r7, #20]
 80121b6:	f000 f8d1 	bl	801235c <prvInsertTimerInActiveList>
 80121ba:	4603      	mov	r3, r0
 80121bc:	2b00      	cmp	r3, #0
 80121be:	d01f      	beq.n	8012200 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80121c0:	2300      	movs	r3, #0
 80121c2:	9300      	str	r3, [sp, #0]
 80121c4:	2300      	movs	r3, #0
 80121c6:	687a      	ldr	r2, [r7, #4]
 80121c8:	2100      	movs	r1, #0
 80121ca:	6978      	ldr	r0, [r7, #20]
 80121cc:	f7ff ff88 	bl	80120e0 <xTimerGenericCommand>
 80121d0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80121d2:	693b      	ldr	r3, [r7, #16]
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d113      	bne.n	8012200 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80121d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121dc:	f383 8811 	msr	BASEPRI, r3
 80121e0:	f3bf 8f6f 	isb	sy
 80121e4:	f3bf 8f4f 	dsb	sy
 80121e8:	60fb      	str	r3, [r7, #12]
}
 80121ea:	bf00      	nop
 80121ec:	e7fe      	b.n	80121ec <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80121ee:	697b      	ldr	r3, [r7, #20]
 80121f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80121f4:	f023 0301 	bic.w	r3, r3, #1
 80121f8:	b2da      	uxtb	r2, r3
 80121fa:	697b      	ldr	r3, [r7, #20]
 80121fc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012200:	697b      	ldr	r3, [r7, #20]
 8012202:	6a1b      	ldr	r3, [r3, #32]
 8012204:	6978      	ldr	r0, [r7, #20]
 8012206:	4798      	blx	r3
}
 8012208:	bf00      	nop
 801220a:	3718      	adds	r7, #24
 801220c:	46bd      	mov	sp, r7
 801220e:	bd80      	pop	{r7, pc}
 8012210:	24001260 	.word	0x24001260

08012214 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8012214:	b580      	push	{r7, lr}
 8012216:	b084      	sub	sp, #16
 8012218:	af00      	add	r7, sp, #0
 801221a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801221c:	f107 0308 	add.w	r3, r7, #8
 8012220:	4618      	mov	r0, r3
 8012222:	f000 f857 	bl	80122d4 <prvGetNextExpireTime>
 8012226:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8012228:	68bb      	ldr	r3, [r7, #8]
 801222a:	4619      	mov	r1, r3
 801222c:	68f8      	ldr	r0, [r7, #12]
 801222e:	f000 f803 	bl	8012238 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8012232:	f000 f8d5 	bl	80123e0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012236:	e7f1      	b.n	801221c <prvTimerTask+0x8>

08012238 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8012238:	b580      	push	{r7, lr}
 801223a:	b084      	sub	sp, #16
 801223c:	af00      	add	r7, sp, #0
 801223e:	6078      	str	r0, [r7, #4]
 8012240:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8012242:	f7ff f98d 	bl	8011560 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012246:	f107 0308 	add.w	r3, r7, #8
 801224a:	4618      	mov	r0, r3
 801224c:	f000 f866 	bl	801231c <prvSampleTimeNow>
 8012250:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8012252:	68bb      	ldr	r3, [r7, #8]
 8012254:	2b00      	cmp	r3, #0
 8012256:	d130      	bne.n	80122ba <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8012258:	683b      	ldr	r3, [r7, #0]
 801225a:	2b00      	cmp	r3, #0
 801225c:	d10a      	bne.n	8012274 <prvProcessTimerOrBlockTask+0x3c>
 801225e:	687a      	ldr	r2, [r7, #4]
 8012260:	68fb      	ldr	r3, [r7, #12]
 8012262:	429a      	cmp	r2, r3
 8012264:	d806      	bhi.n	8012274 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8012266:	f7ff f989 	bl	801157c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801226a:	68f9      	ldr	r1, [r7, #12]
 801226c:	6878      	ldr	r0, [r7, #4]
 801226e:	f7ff ff85 	bl	801217c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8012272:	e024      	b.n	80122be <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8012274:	683b      	ldr	r3, [r7, #0]
 8012276:	2b00      	cmp	r3, #0
 8012278:	d008      	beq.n	801228c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801227a:	4b13      	ldr	r3, [pc, #76]	; (80122c8 <prvProcessTimerOrBlockTask+0x90>)
 801227c:	681b      	ldr	r3, [r3, #0]
 801227e:	681b      	ldr	r3, [r3, #0]
 8012280:	2b00      	cmp	r3, #0
 8012282:	d101      	bne.n	8012288 <prvProcessTimerOrBlockTask+0x50>
 8012284:	2301      	movs	r3, #1
 8012286:	e000      	b.n	801228a <prvProcessTimerOrBlockTask+0x52>
 8012288:	2300      	movs	r3, #0
 801228a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801228c:	4b0f      	ldr	r3, [pc, #60]	; (80122cc <prvProcessTimerOrBlockTask+0x94>)
 801228e:	6818      	ldr	r0, [r3, #0]
 8012290:	687a      	ldr	r2, [r7, #4]
 8012292:	68fb      	ldr	r3, [r7, #12]
 8012294:	1ad3      	subs	r3, r2, r3
 8012296:	683a      	ldr	r2, [r7, #0]
 8012298:	4619      	mov	r1, r3
 801229a:	f7fe fef1 	bl	8011080 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801229e:	f7ff f96d 	bl	801157c <xTaskResumeAll>
 80122a2:	4603      	mov	r3, r0
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	d10a      	bne.n	80122be <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80122a8:	4b09      	ldr	r3, [pc, #36]	; (80122d0 <prvProcessTimerOrBlockTask+0x98>)
 80122aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80122ae:	601a      	str	r2, [r3, #0]
 80122b0:	f3bf 8f4f 	dsb	sy
 80122b4:	f3bf 8f6f 	isb	sy
}
 80122b8:	e001      	b.n	80122be <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80122ba:	f7ff f95f 	bl	801157c <xTaskResumeAll>
}
 80122be:	bf00      	nop
 80122c0:	3710      	adds	r7, #16
 80122c2:	46bd      	mov	sp, r7
 80122c4:	bd80      	pop	{r7, pc}
 80122c6:	bf00      	nop
 80122c8:	24001264 	.word	0x24001264
 80122cc:	24001268 	.word	0x24001268
 80122d0:	e000ed04 	.word	0xe000ed04

080122d4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80122d4:	b480      	push	{r7}
 80122d6:	b085      	sub	sp, #20
 80122d8:	af00      	add	r7, sp, #0
 80122da:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80122dc:	4b0e      	ldr	r3, [pc, #56]	; (8012318 <prvGetNextExpireTime+0x44>)
 80122de:	681b      	ldr	r3, [r3, #0]
 80122e0:	681b      	ldr	r3, [r3, #0]
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d101      	bne.n	80122ea <prvGetNextExpireTime+0x16>
 80122e6:	2201      	movs	r2, #1
 80122e8:	e000      	b.n	80122ec <prvGetNextExpireTime+0x18>
 80122ea:	2200      	movs	r2, #0
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	681b      	ldr	r3, [r3, #0]
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	d105      	bne.n	8012304 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80122f8:	4b07      	ldr	r3, [pc, #28]	; (8012318 <prvGetNextExpireTime+0x44>)
 80122fa:	681b      	ldr	r3, [r3, #0]
 80122fc:	68db      	ldr	r3, [r3, #12]
 80122fe:	681b      	ldr	r3, [r3, #0]
 8012300:	60fb      	str	r3, [r7, #12]
 8012302:	e001      	b.n	8012308 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8012304:	2300      	movs	r3, #0
 8012306:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8012308:	68fb      	ldr	r3, [r7, #12]
}
 801230a:	4618      	mov	r0, r3
 801230c:	3714      	adds	r7, #20
 801230e:	46bd      	mov	sp, r7
 8012310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012314:	4770      	bx	lr
 8012316:	bf00      	nop
 8012318:	24001260 	.word	0x24001260

0801231c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801231c:	b580      	push	{r7, lr}
 801231e:	b084      	sub	sp, #16
 8012320:	af00      	add	r7, sp, #0
 8012322:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8012324:	f7ff f9c8 	bl	80116b8 <xTaskGetTickCount>
 8012328:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801232a:	4b0b      	ldr	r3, [pc, #44]	; (8012358 <prvSampleTimeNow+0x3c>)
 801232c:	681b      	ldr	r3, [r3, #0]
 801232e:	68fa      	ldr	r2, [r7, #12]
 8012330:	429a      	cmp	r2, r3
 8012332:	d205      	bcs.n	8012340 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8012334:	f000 f936 	bl	80125a4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	2201      	movs	r2, #1
 801233c:	601a      	str	r2, [r3, #0]
 801233e:	e002      	b.n	8012346 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	2200      	movs	r2, #0
 8012344:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8012346:	4a04      	ldr	r2, [pc, #16]	; (8012358 <prvSampleTimeNow+0x3c>)
 8012348:	68fb      	ldr	r3, [r7, #12]
 801234a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801234c:	68fb      	ldr	r3, [r7, #12]
}
 801234e:	4618      	mov	r0, r3
 8012350:	3710      	adds	r7, #16
 8012352:	46bd      	mov	sp, r7
 8012354:	bd80      	pop	{r7, pc}
 8012356:	bf00      	nop
 8012358:	24001270 	.word	0x24001270

0801235c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801235c:	b580      	push	{r7, lr}
 801235e:	b086      	sub	sp, #24
 8012360:	af00      	add	r7, sp, #0
 8012362:	60f8      	str	r0, [r7, #12]
 8012364:	60b9      	str	r1, [r7, #8]
 8012366:	607a      	str	r2, [r7, #4]
 8012368:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801236a:	2300      	movs	r3, #0
 801236c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801236e:	68fb      	ldr	r3, [r7, #12]
 8012370:	68ba      	ldr	r2, [r7, #8]
 8012372:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012374:	68fb      	ldr	r3, [r7, #12]
 8012376:	68fa      	ldr	r2, [r7, #12]
 8012378:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801237a:	68ba      	ldr	r2, [r7, #8]
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	429a      	cmp	r2, r3
 8012380:	d812      	bhi.n	80123a8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012382:	687a      	ldr	r2, [r7, #4]
 8012384:	683b      	ldr	r3, [r7, #0]
 8012386:	1ad2      	subs	r2, r2, r3
 8012388:	68fb      	ldr	r3, [r7, #12]
 801238a:	699b      	ldr	r3, [r3, #24]
 801238c:	429a      	cmp	r2, r3
 801238e:	d302      	bcc.n	8012396 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8012390:	2301      	movs	r3, #1
 8012392:	617b      	str	r3, [r7, #20]
 8012394:	e01b      	b.n	80123ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8012396:	4b10      	ldr	r3, [pc, #64]	; (80123d8 <prvInsertTimerInActiveList+0x7c>)
 8012398:	681a      	ldr	r2, [r3, #0]
 801239a:	68fb      	ldr	r3, [r7, #12]
 801239c:	3304      	adds	r3, #4
 801239e:	4619      	mov	r1, r3
 80123a0:	4610      	mov	r0, r2
 80123a2:	f7fe f85c 	bl	801045e <vListInsert>
 80123a6:	e012      	b.n	80123ce <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80123a8:	687a      	ldr	r2, [r7, #4]
 80123aa:	683b      	ldr	r3, [r7, #0]
 80123ac:	429a      	cmp	r2, r3
 80123ae:	d206      	bcs.n	80123be <prvInsertTimerInActiveList+0x62>
 80123b0:	68ba      	ldr	r2, [r7, #8]
 80123b2:	683b      	ldr	r3, [r7, #0]
 80123b4:	429a      	cmp	r2, r3
 80123b6:	d302      	bcc.n	80123be <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80123b8:	2301      	movs	r3, #1
 80123ba:	617b      	str	r3, [r7, #20]
 80123bc:	e007      	b.n	80123ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80123be:	4b07      	ldr	r3, [pc, #28]	; (80123dc <prvInsertTimerInActiveList+0x80>)
 80123c0:	681a      	ldr	r2, [r3, #0]
 80123c2:	68fb      	ldr	r3, [r7, #12]
 80123c4:	3304      	adds	r3, #4
 80123c6:	4619      	mov	r1, r3
 80123c8:	4610      	mov	r0, r2
 80123ca:	f7fe f848 	bl	801045e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80123ce:	697b      	ldr	r3, [r7, #20]
}
 80123d0:	4618      	mov	r0, r3
 80123d2:	3718      	adds	r7, #24
 80123d4:	46bd      	mov	sp, r7
 80123d6:	bd80      	pop	{r7, pc}
 80123d8:	24001264 	.word	0x24001264
 80123dc:	24001260 	.word	0x24001260

080123e0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80123e0:	b580      	push	{r7, lr}
 80123e2:	b08e      	sub	sp, #56	; 0x38
 80123e4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80123e6:	e0ca      	b.n	801257e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	da18      	bge.n	8012420 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80123ee:	1d3b      	adds	r3, r7, #4
 80123f0:	3304      	adds	r3, #4
 80123f2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80123f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	d10a      	bne.n	8012410 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80123fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123fe:	f383 8811 	msr	BASEPRI, r3
 8012402:	f3bf 8f6f 	isb	sy
 8012406:	f3bf 8f4f 	dsb	sy
 801240a:	61fb      	str	r3, [r7, #28]
}
 801240c:	bf00      	nop
 801240e:	e7fe      	b.n	801240e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8012410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012412:	681b      	ldr	r3, [r3, #0]
 8012414:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012416:	6850      	ldr	r0, [r2, #4]
 8012418:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801241a:	6892      	ldr	r2, [r2, #8]
 801241c:	4611      	mov	r1, r2
 801241e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	2b00      	cmp	r3, #0
 8012424:	f2c0 80aa 	blt.w	801257c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8012428:	68fb      	ldr	r3, [r7, #12]
 801242a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801242c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801242e:	695b      	ldr	r3, [r3, #20]
 8012430:	2b00      	cmp	r3, #0
 8012432:	d004      	beq.n	801243e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012436:	3304      	adds	r3, #4
 8012438:	4618      	mov	r0, r3
 801243a:	f7fe f849 	bl	80104d0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801243e:	463b      	mov	r3, r7
 8012440:	4618      	mov	r0, r3
 8012442:	f7ff ff6b 	bl	801231c <prvSampleTimeNow>
 8012446:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	2b09      	cmp	r3, #9
 801244c:	f200 8097 	bhi.w	801257e <prvProcessReceivedCommands+0x19e>
 8012450:	a201      	add	r2, pc, #4	; (adr r2, 8012458 <prvProcessReceivedCommands+0x78>)
 8012452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012456:	bf00      	nop
 8012458:	08012481 	.word	0x08012481
 801245c:	08012481 	.word	0x08012481
 8012460:	08012481 	.word	0x08012481
 8012464:	080124f5 	.word	0x080124f5
 8012468:	08012509 	.word	0x08012509
 801246c:	08012553 	.word	0x08012553
 8012470:	08012481 	.word	0x08012481
 8012474:	08012481 	.word	0x08012481
 8012478:	080124f5 	.word	0x080124f5
 801247c:	08012509 	.word	0x08012509
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012482:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012486:	f043 0301 	orr.w	r3, r3, #1
 801248a:	b2da      	uxtb	r2, r3
 801248c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801248e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8012492:	68ba      	ldr	r2, [r7, #8]
 8012494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012496:	699b      	ldr	r3, [r3, #24]
 8012498:	18d1      	adds	r1, r2, r3
 801249a:	68bb      	ldr	r3, [r7, #8]
 801249c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801249e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80124a0:	f7ff ff5c 	bl	801235c <prvInsertTimerInActiveList>
 80124a4:	4603      	mov	r3, r0
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	d069      	beq.n	801257e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80124aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124ac:	6a1b      	ldr	r3, [r3, #32]
 80124ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80124b0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80124b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80124b8:	f003 0304 	and.w	r3, r3, #4
 80124bc:	2b00      	cmp	r3, #0
 80124be:	d05e      	beq.n	801257e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80124c0:	68ba      	ldr	r2, [r7, #8]
 80124c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124c4:	699b      	ldr	r3, [r3, #24]
 80124c6:	441a      	add	r2, r3
 80124c8:	2300      	movs	r3, #0
 80124ca:	9300      	str	r3, [sp, #0]
 80124cc:	2300      	movs	r3, #0
 80124ce:	2100      	movs	r1, #0
 80124d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80124d2:	f7ff fe05 	bl	80120e0 <xTimerGenericCommand>
 80124d6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80124d8:	6a3b      	ldr	r3, [r7, #32]
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d14f      	bne.n	801257e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80124de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124e2:	f383 8811 	msr	BASEPRI, r3
 80124e6:	f3bf 8f6f 	isb	sy
 80124ea:	f3bf 8f4f 	dsb	sy
 80124ee:	61bb      	str	r3, [r7, #24]
}
 80124f0:	bf00      	nop
 80124f2:	e7fe      	b.n	80124f2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80124f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80124fa:	f023 0301 	bic.w	r3, r3, #1
 80124fe:	b2da      	uxtb	r2, r3
 8012500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012502:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8012506:	e03a      	b.n	801257e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801250a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801250e:	f043 0301 	orr.w	r3, r3, #1
 8012512:	b2da      	uxtb	r2, r3
 8012514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012516:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801251a:	68ba      	ldr	r2, [r7, #8]
 801251c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801251e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8012520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012522:	699b      	ldr	r3, [r3, #24]
 8012524:	2b00      	cmp	r3, #0
 8012526:	d10a      	bne.n	801253e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8012528:	f04f 0350 	mov.w	r3, #80	; 0x50
 801252c:	f383 8811 	msr	BASEPRI, r3
 8012530:	f3bf 8f6f 	isb	sy
 8012534:	f3bf 8f4f 	dsb	sy
 8012538:	617b      	str	r3, [r7, #20]
}
 801253a:	bf00      	nop
 801253c:	e7fe      	b.n	801253c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801253e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012540:	699a      	ldr	r2, [r3, #24]
 8012542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012544:	18d1      	adds	r1, r2, r3
 8012546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801254a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801254c:	f7ff ff06 	bl	801235c <prvInsertTimerInActiveList>
					break;
 8012550:	e015      	b.n	801257e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8012552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012554:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012558:	f003 0302 	and.w	r3, r3, #2
 801255c:	2b00      	cmp	r3, #0
 801255e:	d103      	bne.n	8012568 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8012560:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012562:	f000 fbfd 	bl	8012d60 <vPortFree>
 8012566:	e00a      	b.n	801257e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801256a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801256e:	f023 0301 	bic.w	r3, r3, #1
 8012572:	b2da      	uxtb	r2, r3
 8012574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012576:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801257a:	e000      	b.n	801257e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 801257c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801257e:	4b08      	ldr	r3, [pc, #32]	; (80125a0 <prvProcessReceivedCommands+0x1c0>)
 8012580:	681b      	ldr	r3, [r3, #0]
 8012582:	1d39      	adds	r1, r7, #4
 8012584:	2200      	movs	r2, #0
 8012586:	4618      	mov	r0, r3
 8012588:	f7fe faa4 	bl	8010ad4 <xQueueReceive>
 801258c:	4603      	mov	r3, r0
 801258e:	2b00      	cmp	r3, #0
 8012590:	f47f af2a 	bne.w	80123e8 <prvProcessReceivedCommands+0x8>
	}
}
 8012594:	bf00      	nop
 8012596:	bf00      	nop
 8012598:	3730      	adds	r7, #48	; 0x30
 801259a:	46bd      	mov	sp, r7
 801259c:	bd80      	pop	{r7, pc}
 801259e:	bf00      	nop
 80125a0:	24001268 	.word	0x24001268

080125a4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80125a4:	b580      	push	{r7, lr}
 80125a6:	b088      	sub	sp, #32
 80125a8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80125aa:	e048      	b.n	801263e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80125ac:	4b2d      	ldr	r3, [pc, #180]	; (8012664 <prvSwitchTimerLists+0xc0>)
 80125ae:	681b      	ldr	r3, [r3, #0]
 80125b0:	68db      	ldr	r3, [r3, #12]
 80125b2:	681b      	ldr	r3, [r3, #0]
 80125b4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80125b6:	4b2b      	ldr	r3, [pc, #172]	; (8012664 <prvSwitchTimerLists+0xc0>)
 80125b8:	681b      	ldr	r3, [r3, #0]
 80125ba:	68db      	ldr	r3, [r3, #12]
 80125bc:	68db      	ldr	r3, [r3, #12]
 80125be:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80125c0:	68fb      	ldr	r3, [r7, #12]
 80125c2:	3304      	adds	r3, #4
 80125c4:	4618      	mov	r0, r3
 80125c6:	f7fd ff83 	bl	80104d0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80125ca:	68fb      	ldr	r3, [r7, #12]
 80125cc:	6a1b      	ldr	r3, [r3, #32]
 80125ce:	68f8      	ldr	r0, [r7, #12]
 80125d0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80125d2:	68fb      	ldr	r3, [r7, #12]
 80125d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80125d8:	f003 0304 	and.w	r3, r3, #4
 80125dc:	2b00      	cmp	r3, #0
 80125de:	d02e      	beq.n	801263e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80125e0:	68fb      	ldr	r3, [r7, #12]
 80125e2:	699b      	ldr	r3, [r3, #24]
 80125e4:	693a      	ldr	r2, [r7, #16]
 80125e6:	4413      	add	r3, r2
 80125e8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80125ea:	68ba      	ldr	r2, [r7, #8]
 80125ec:	693b      	ldr	r3, [r7, #16]
 80125ee:	429a      	cmp	r2, r3
 80125f0:	d90e      	bls.n	8012610 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80125f2:	68fb      	ldr	r3, [r7, #12]
 80125f4:	68ba      	ldr	r2, [r7, #8]
 80125f6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80125f8:	68fb      	ldr	r3, [r7, #12]
 80125fa:	68fa      	ldr	r2, [r7, #12]
 80125fc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80125fe:	4b19      	ldr	r3, [pc, #100]	; (8012664 <prvSwitchTimerLists+0xc0>)
 8012600:	681a      	ldr	r2, [r3, #0]
 8012602:	68fb      	ldr	r3, [r7, #12]
 8012604:	3304      	adds	r3, #4
 8012606:	4619      	mov	r1, r3
 8012608:	4610      	mov	r0, r2
 801260a:	f7fd ff28 	bl	801045e <vListInsert>
 801260e:	e016      	b.n	801263e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012610:	2300      	movs	r3, #0
 8012612:	9300      	str	r3, [sp, #0]
 8012614:	2300      	movs	r3, #0
 8012616:	693a      	ldr	r2, [r7, #16]
 8012618:	2100      	movs	r1, #0
 801261a:	68f8      	ldr	r0, [r7, #12]
 801261c:	f7ff fd60 	bl	80120e0 <xTimerGenericCommand>
 8012620:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	2b00      	cmp	r3, #0
 8012626:	d10a      	bne.n	801263e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8012628:	f04f 0350 	mov.w	r3, #80	; 0x50
 801262c:	f383 8811 	msr	BASEPRI, r3
 8012630:	f3bf 8f6f 	isb	sy
 8012634:	f3bf 8f4f 	dsb	sy
 8012638:	603b      	str	r3, [r7, #0]
}
 801263a:	bf00      	nop
 801263c:	e7fe      	b.n	801263c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801263e:	4b09      	ldr	r3, [pc, #36]	; (8012664 <prvSwitchTimerLists+0xc0>)
 8012640:	681b      	ldr	r3, [r3, #0]
 8012642:	681b      	ldr	r3, [r3, #0]
 8012644:	2b00      	cmp	r3, #0
 8012646:	d1b1      	bne.n	80125ac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8012648:	4b06      	ldr	r3, [pc, #24]	; (8012664 <prvSwitchTimerLists+0xc0>)
 801264a:	681b      	ldr	r3, [r3, #0]
 801264c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801264e:	4b06      	ldr	r3, [pc, #24]	; (8012668 <prvSwitchTimerLists+0xc4>)
 8012650:	681b      	ldr	r3, [r3, #0]
 8012652:	4a04      	ldr	r2, [pc, #16]	; (8012664 <prvSwitchTimerLists+0xc0>)
 8012654:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8012656:	4a04      	ldr	r2, [pc, #16]	; (8012668 <prvSwitchTimerLists+0xc4>)
 8012658:	697b      	ldr	r3, [r7, #20]
 801265a:	6013      	str	r3, [r2, #0]
}
 801265c:	bf00      	nop
 801265e:	3718      	adds	r7, #24
 8012660:	46bd      	mov	sp, r7
 8012662:	bd80      	pop	{r7, pc}
 8012664:	24001260 	.word	0x24001260
 8012668:	24001264 	.word	0x24001264

0801266c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801266c:	b580      	push	{r7, lr}
 801266e:	b082      	sub	sp, #8
 8012670:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8012672:	f000 f987 	bl	8012984 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8012676:	4b15      	ldr	r3, [pc, #84]	; (80126cc <prvCheckForValidListAndQueue+0x60>)
 8012678:	681b      	ldr	r3, [r3, #0]
 801267a:	2b00      	cmp	r3, #0
 801267c:	d120      	bne.n	80126c0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801267e:	4814      	ldr	r0, [pc, #80]	; (80126d0 <prvCheckForValidListAndQueue+0x64>)
 8012680:	f7fd fe9c 	bl	80103bc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8012684:	4813      	ldr	r0, [pc, #76]	; (80126d4 <prvCheckForValidListAndQueue+0x68>)
 8012686:	f7fd fe99 	bl	80103bc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801268a:	4b13      	ldr	r3, [pc, #76]	; (80126d8 <prvCheckForValidListAndQueue+0x6c>)
 801268c:	4a10      	ldr	r2, [pc, #64]	; (80126d0 <prvCheckForValidListAndQueue+0x64>)
 801268e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8012690:	4b12      	ldr	r3, [pc, #72]	; (80126dc <prvCheckForValidListAndQueue+0x70>)
 8012692:	4a10      	ldr	r2, [pc, #64]	; (80126d4 <prvCheckForValidListAndQueue+0x68>)
 8012694:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8012696:	2300      	movs	r3, #0
 8012698:	9300      	str	r3, [sp, #0]
 801269a:	4b11      	ldr	r3, [pc, #68]	; (80126e0 <prvCheckForValidListAndQueue+0x74>)
 801269c:	4a11      	ldr	r2, [pc, #68]	; (80126e4 <prvCheckForValidListAndQueue+0x78>)
 801269e:	2110      	movs	r1, #16
 80126a0:	200a      	movs	r0, #10
 80126a2:	f7fd ffa7 	bl	80105f4 <xQueueGenericCreateStatic>
 80126a6:	4603      	mov	r3, r0
 80126a8:	4a08      	ldr	r2, [pc, #32]	; (80126cc <prvCheckForValidListAndQueue+0x60>)
 80126aa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80126ac:	4b07      	ldr	r3, [pc, #28]	; (80126cc <prvCheckForValidListAndQueue+0x60>)
 80126ae:	681b      	ldr	r3, [r3, #0]
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	d005      	beq.n	80126c0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80126b4:	4b05      	ldr	r3, [pc, #20]	; (80126cc <prvCheckForValidListAndQueue+0x60>)
 80126b6:	681b      	ldr	r3, [r3, #0]
 80126b8:	490b      	ldr	r1, [pc, #44]	; (80126e8 <prvCheckForValidListAndQueue+0x7c>)
 80126ba:	4618      	mov	r0, r3
 80126bc:	f7fe fcb6 	bl	801102c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80126c0:	f000 f990 	bl	80129e4 <vPortExitCritical>
}
 80126c4:	bf00      	nop
 80126c6:	46bd      	mov	sp, r7
 80126c8:	bd80      	pop	{r7, pc}
 80126ca:	bf00      	nop
 80126cc:	24001268 	.word	0x24001268
 80126d0:	24001238 	.word	0x24001238
 80126d4:	2400124c 	.word	0x2400124c
 80126d8:	24001260 	.word	0x24001260
 80126dc:	24001264 	.word	0x24001264
 80126e0:	24001314 	.word	0x24001314
 80126e4:	24001274 	.word	0x24001274
 80126e8:	08014278 	.word	0x08014278

080126ec <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80126ec:	b580      	push	{r7, lr}
 80126ee:	b08a      	sub	sp, #40	; 0x28
 80126f0:	af00      	add	r7, sp, #0
 80126f2:	60f8      	str	r0, [r7, #12]
 80126f4:	60b9      	str	r1, [r7, #8]
 80126f6:	607a      	str	r2, [r7, #4]
 80126f8:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 80126fa:	f06f 0301 	mvn.w	r3, #1
 80126fe:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8012700:	68fb      	ldr	r3, [r7, #12]
 8012702:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8012704:	68bb      	ldr	r3, [r7, #8]
 8012706:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801270c:	4b06      	ldr	r3, [pc, #24]	; (8012728 <xTimerPendFunctionCallFromISR+0x3c>)
 801270e:	6818      	ldr	r0, [r3, #0]
 8012710:	f107 0114 	add.w	r1, r7, #20
 8012714:	2300      	movs	r3, #0
 8012716:	683a      	ldr	r2, [r7, #0]
 8012718:	f7fe f940 	bl	801099c <xQueueGenericSendFromISR>
 801271c:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 801271e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8012720:	4618      	mov	r0, r3
 8012722:	3728      	adds	r7, #40	; 0x28
 8012724:	46bd      	mov	sp, r7
 8012726:	bd80      	pop	{r7, pc}
 8012728:	24001268 	.word	0x24001268

0801272c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801272c:	b480      	push	{r7}
 801272e:	b085      	sub	sp, #20
 8012730:	af00      	add	r7, sp, #0
 8012732:	60f8      	str	r0, [r7, #12]
 8012734:	60b9      	str	r1, [r7, #8]
 8012736:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012738:	68fb      	ldr	r3, [r7, #12]
 801273a:	3b04      	subs	r3, #4
 801273c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801273e:	68fb      	ldr	r3, [r7, #12]
 8012740:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8012744:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012746:	68fb      	ldr	r3, [r7, #12]
 8012748:	3b04      	subs	r3, #4
 801274a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801274c:	68bb      	ldr	r3, [r7, #8]
 801274e:	f023 0201 	bic.w	r2, r3, #1
 8012752:	68fb      	ldr	r3, [r7, #12]
 8012754:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012756:	68fb      	ldr	r3, [r7, #12]
 8012758:	3b04      	subs	r3, #4
 801275a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801275c:	4a0c      	ldr	r2, [pc, #48]	; (8012790 <pxPortInitialiseStack+0x64>)
 801275e:	68fb      	ldr	r3, [r7, #12]
 8012760:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8012762:	68fb      	ldr	r3, [r7, #12]
 8012764:	3b14      	subs	r3, #20
 8012766:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012768:	687a      	ldr	r2, [r7, #4]
 801276a:	68fb      	ldr	r3, [r7, #12]
 801276c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801276e:	68fb      	ldr	r3, [r7, #12]
 8012770:	3b04      	subs	r3, #4
 8012772:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8012774:	68fb      	ldr	r3, [r7, #12]
 8012776:	f06f 0202 	mvn.w	r2, #2
 801277a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801277c:	68fb      	ldr	r3, [r7, #12]
 801277e:	3b20      	subs	r3, #32
 8012780:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8012782:	68fb      	ldr	r3, [r7, #12]
}
 8012784:	4618      	mov	r0, r3
 8012786:	3714      	adds	r7, #20
 8012788:	46bd      	mov	sp, r7
 801278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801278e:	4770      	bx	lr
 8012790:	08012795 	.word	0x08012795

08012794 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012794:	b480      	push	{r7}
 8012796:	b085      	sub	sp, #20
 8012798:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801279a:	2300      	movs	r3, #0
 801279c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801279e:	4b12      	ldr	r3, [pc, #72]	; (80127e8 <prvTaskExitError+0x54>)
 80127a0:	681b      	ldr	r3, [r3, #0]
 80127a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80127a6:	d00a      	beq.n	80127be <prvTaskExitError+0x2a>
	__asm volatile
 80127a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127ac:	f383 8811 	msr	BASEPRI, r3
 80127b0:	f3bf 8f6f 	isb	sy
 80127b4:	f3bf 8f4f 	dsb	sy
 80127b8:	60fb      	str	r3, [r7, #12]
}
 80127ba:	bf00      	nop
 80127bc:	e7fe      	b.n	80127bc <prvTaskExitError+0x28>
	__asm volatile
 80127be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127c2:	f383 8811 	msr	BASEPRI, r3
 80127c6:	f3bf 8f6f 	isb	sy
 80127ca:	f3bf 8f4f 	dsb	sy
 80127ce:	60bb      	str	r3, [r7, #8]
}
 80127d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80127d2:	bf00      	nop
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d0fc      	beq.n	80127d4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80127da:	bf00      	nop
 80127dc:	bf00      	nop
 80127de:	3714      	adds	r7, #20
 80127e0:	46bd      	mov	sp, r7
 80127e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127e6:	4770      	bx	lr
 80127e8:	24000010 	.word	0x24000010
 80127ec:	00000000 	.word	0x00000000

080127f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80127f0:	4b07      	ldr	r3, [pc, #28]	; (8012810 <pxCurrentTCBConst2>)
 80127f2:	6819      	ldr	r1, [r3, #0]
 80127f4:	6808      	ldr	r0, [r1, #0]
 80127f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127fa:	f380 8809 	msr	PSP, r0
 80127fe:	f3bf 8f6f 	isb	sy
 8012802:	f04f 0000 	mov.w	r0, #0
 8012806:	f380 8811 	msr	BASEPRI, r0
 801280a:	4770      	bx	lr
 801280c:	f3af 8000 	nop.w

08012810 <pxCurrentTCBConst2>:
 8012810:	24000d38 	.word	0x24000d38
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012814:	bf00      	nop
 8012816:	bf00      	nop

08012818 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012818:	4808      	ldr	r0, [pc, #32]	; (801283c <prvPortStartFirstTask+0x24>)
 801281a:	6800      	ldr	r0, [r0, #0]
 801281c:	6800      	ldr	r0, [r0, #0]
 801281e:	f380 8808 	msr	MSP, r0
 8012822:	f04f 0000 	mov.w	r0, #0
 8012826:	f380 8814 	msr	CONTROL, r0
 801282a:	b662      	cpsie	i
 801282c:	b661      	cpsie	f
 801282e:	f3bf 8f4f 	dsb	sy
 8012832:	f3bf 8f6f 	isb	sy
 8012836:	df00      	svc	0
 8012838:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801283a:	bf00      	nop
 801283c:	e000ed08 	.word	0xe000ed08

08012840 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012840:	b580      	push	{r7, lr}
 8012842:	b086      	sub	sp, #24
 8012844:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8012846:	4b46      	ldr	r3, [pc, #280]	; (8012960 <xPortStartScheduler+0x120>)
 8012848:	681b      	ldr	r3, [r3, #0]
 801284a:	4a46      	ldr	r2, [pc, #280]	; (8012964 <xPortStartScheduler+0x124>)
 801284c:	4293      	cmp	r3, r2
 801284e:	d10a      	bne.n	8012866 <xPortStartScheduler+0x26>
	__asm volatile
 8012850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012854:	f383 8811 	msr	BASEPRI, r3
 8012858:	f3bf 8f6f 	isb	sy
 801285c:	f3bf 8f4f 	dsb	sy
 8012860:	613b      	str	r3, [r7, #16]
}
 8012862:	bf00      	nop
 8012864:	e7fe      	b.n	8012864 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8012866:	4b3e      	ldr	r3, [pc, #248]	; (8012960 <xPortStartScheduler+0x120>)
 8012868:	681b      	ldr	r3, [r3, #0]
 801286a:	4a3f      	ldr	r2, [pc, #252]	; (8012968 <xPortStartScheduler+0x128>)
 801286c:	4293      	cmp	r3, r2
 801286e:	d10a      	bne.n	8012886 <xPortStartScheduler+0x46>
	__asm volatile
 8012870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012874:	f383 8811 	msr	BASEPRI, r3
 8012878:	f3bf 8f6f 	isb	sy
 801287c:	f3bf 8f4f 	dsb	sy
 8012880:	60fb      	str	r3, [r7, #12]
}
 8012882:	bf00      	nop
 8012884:	e7fe      	b.n	8012884 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012886:	4b39      	ldr	r3, [pc, #228]	; (801296c <xPortStartScheduler+0x12c>)
 8012888:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801288a:	697b      	ldr	r3, [r7, #20]
 801288c:	781b      	ldrb	r3, [r3, #0]
 801288e:	b2db      	uxtb	r3, r3
 8012890:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012892:	697b      	ldr	r3, [r7, #20]
 8012894:	22ff      	movs	r2, #255	; 0xff
 8012896:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012898:	697b      	ldr	r3, [r7, #20]
 801289a:	781b      	ldrb	r3, [r3, #0]
 801289c:	b2db      	uxtb	r3, r3
 801289e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80128a0:	78fb      	ldrb	r3, [r7, #3]
 80128a2:	b2db      	uxtb	r3, r3
 80128a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80128a8:	b2da      	uxtb	r2, r3
 80128aa:	4b31      	ldr	r3, [pc, #196]	; (8012970 <xPortStartScheduler+0x130>)
 80128ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80128ae:	4b31      	ldr	r3, [pc, #196]	; (8012974 <xPortStartScheduler+0x134>)
 80128b0:	2207      	movs	r2, #7
 80128b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80128b4:	e009      	b.n	80128ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80128b6:	4b2f      	ldr	r3, [pc, #188]	; (8012974 <xPortStartScheduler+0x134>)
 80128b8:	681b      	ldr	r3, [r3, #0]
 80128ba:	3b01      	subs	r3, #1
 80128bc:	4a2d      	ldr	r2, [pc, #180]	; (8012974 <xPortStartScheduler+0x134>)
 80128be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80128c0:	78fb      	ldrb	r3, [r7, #3]
 80128c2:	b2db      	uxtb	r3, r3
 80128c4:	005b      	lsls	r3, r3, #1
 80128c6:	b2db      	uxtb	r3, r3
 80128c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80128ca:	78fb      	ldrb	r3, [r7, #3]
 80128cc:	b2db      	uxtb	r3, r3
 80128ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80128d2:	2b80      	cmp	r3, #128	; 0x80
 80128d4:	d0ef      	beq.n	80128b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80128d6:	4b27      	ldr	r3, [pc, #156]	; (8012974 <xPortStartScheduler+0x134>)
 80128d8:	681b      	ldr	r3, [r3, #0]
 80128da:	f1c3 0307 	rsb	r3, r3, #7
 80128de:	2b04      	cmp	r3, #4
 80128e0:	d00a      	beq.n	80128f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80128e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128e6:	f383 8811 	msr	BASEPRI, r3
 80128ea:	f3bf 8f6f 	isb	sy
 80128ee:	f3bf 8f4f 	dsb	sy
 80128f2:	60bb      	str	r3, [r7, #8]
}
 80128f4:	bf00      	nop
 80128f6:	e7fe      	b.n	80128f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80128f8:	4b1e      	ldr	r3, [pc, #120]	; (8012974 <xPortStartScheduler+0x134>)
 80128fa:	681b      	ldr	r3, [r3, #0]
 80128fc:	021b      	lsls	r3, r3, #8
 80128fe:	4a1d      	ldr	r2, [pc, #116]	; (8012974 <xPortStartScheduler+0x134>)
 8012900:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012902:	4b1c      	ldr	r3, [pc, #112]	; (8012974 <xPortStartScheduler+0x134>)
 8012904:	681b      	ldr	r3, [r3, #0]
 8012906:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801290a:	4a1a      	ldr	r2, [pc, #104]	; (8012974 <xPortStartScheduler+0x134>)
 801290c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	b2da      	uxtb	r2, r3
 8012912:	697b      	ldr	r3, [r7, #20]
 8012914:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012916:	4b18      	ldr	r3, [pc, #96]	; (8012978 <xPortStartScheduler+0x138>)
 8012918:	681b      	ldr	r3, [r3, #0]
 801291a:	4a17      	ldr	r2, [pc, #92]	; (8012978 <xPortStartScheduler+0x138>)
 801291c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012920:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012922:	4b15      	ldr	r3, [pc, #84]	; (8012978 <xPortStartScheduler+0x138>)
 8012924:	681b      	ldr	r3, [r3, #0]
 8012926:	4a14      	ldr	r2, [pc, #80]	; (8012978 <xPortStartScheduler+0x138>)
 8012928:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801292c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801292e:	f000 f8dd 	bl	8012aec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012932:	4b12      	ldr	r3, [pc, #72]	; (801297c <xPortStartScheduler+0x13c>)
 8012934:	2200      	movs	r2, #0
 8012936:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8012938:	f000 f8fc 	bl	8012b34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801293c:	4b10      	ldr	r3, [pc, #64]	; (8012980 <xPortStartScheduler+0x140>)
 801293e:	681b      	ldr	r3, [r3, #0]
 8012940:	4a0f      	ldr	r2, [pc, #60]	; (8012980 <xPortStartScheduler+0x140>)
 8012942:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8012946:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8012948:	f7ff ff66 	bl	8012818 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801294c:	f7fe ff7e 	bl	801184c <vTaskSwitchContext>
	prvTaskExitError();
 8012950:	f7ff ff20 	bl	8012794 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012954:	2300      	movs	r3, #0
}
 8012956:	4618      	mov	r0, r3
 8012958:	3718      	adds	r7, #24
 801295a:	46bd      	mov	sp, r7
 801295c:	bd80      	pop	{r7, pc}
 801295e:	bf00      	nop
 8012960:	e000ed00 	.word	0xe000ed00
 8012964:	410fc271 	.word	0x410fc271
 8012968:	410fc270 	.word	0x410fc270
 801296c:	e000e400 	.word	0xe000e400
 8012970:	24001364 	.word	0x24001364
 8012974:	24001368 	.word	0x24001368
 8012978:	e000ed20 	.word	0xe000ed20
 801297c:	24000010 	.word	0x24000010
 8012980:	e000ef34 	.word	0xe000ef34

08012984 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012984:	b480      	push	{r7}
 8012986:	b083      	sub	sp, #12
 8012988:	af00      	add	r7, sp, #0
	__asm volatile
 801298a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801298e:	f383 8811 	msr	BASEPRI, r3
 8012992:	f3bf 8f6f 	isb	sy
 8012996:	f3bf 8f4f 	dsb	sy
 801299a:	607b      	str	r3, [r7, #4]
}
 801299c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801299e:	4b0f      	ldr	r3, [pc, #60]	; (80129dc <vPortEnterCritical+0x58>)
 80129a0:	681b      	ldr	r3, [r3, #0]
 80129a2:	3301      	adds	r3, #1
 80129a4:	4a0d      	ldr	r2, [pc, #52]	; (80129dc <vPortEnterCritical+0x58>)
 80129a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80129a8:	4b0c      	ldr	r3, [pc, #48]	; (80129dc <vPortEnterCritical+0x58>)
 80129aa:	681b      	ldr	r3, [r3, #0]
 80129ac:	2b01      	cmp	r3, #1
 80129ae:	d10f      	bne.n	80129d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80129b0:	4b0b      	ldr	r3, [pc, #44]	; (80129e0 <vPortEnterCritical+0x5c>)
 80129b2:	681b      	ldr	r3, [r3, #0]
 80129b4:	b2db      	uxtb	r3, r3
 80129b6:	2b00      	cmp	r3, #0
 80129b8:	d00a      	beq.n	80129d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80129ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129be:	f383 8811 	msr	BASEPRI, r3
 80129c2:	f3bf 8f6f 	isb	sy
 80129c6:	f3bf 8f4f 	dsb	sy
 80129ca:	603b      	str	r3, [r7, #0]
}
 80129cc:	bf00      	nop
 80129ce:	e7fe      	b.n	80129ce <vPortEnterCritical+0x4a>
	}
}
 80129d0:	bf00      	nop
 80129d2:	370c      	adds	r7, #12
 80129d4:	46bd      	mov	sp, r7
 80129d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129da:	4770      	bx	lr
 80129dc:	24000010 	.word	0x24000010
 80129e0:	e000ed04 	.word	0xe000ed04

080129e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80129e4:	b480      	push	{r7}
 80129e6:	b083      	sub	sp, #12
 80129e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80129ea:	4b12      	ldr	r3, [pc, #72]	; (8012a34 <vPortExitCritical+0x50>)
 80129ec:	681b      	ldr	r3, [r3, #0]
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	d10a      	bne.n	8012a08 <vPortExitCritical+0x24>
	__asm volatile
 80129f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129f6:	f383 8811 	msr	BASEPRI, r3
 80129fa:	f3bf 8f6f 	isb	sy
 80129fe:	f3bf 8f4f 	dsb	sy
 8012a02:	607b      	str	r3, [r7, #4]
}
 8012a04:	bf00      	nop
 8012a06:	e7fe      	b.n	8012a06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8012a08:	4b0a      	ldr	r3, [pc, #40]	; (8012a34 <vPortExitCritical+0x50>)
 8012a0a:	681b      	ldr	r3, [r3, #0]
 8012a0c:	3b01      	subs	r3, #1
 8012a0e:	4a09      	ldr	r2, [pc, #36]	; (8012a34 <vPortExitCritical+0x50>)
 8012a10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8012a12:	4b08      	ldr	r3, [pc, #32]	; (8012a34 <vPortExitCritical+0x50>)
 8012a14:	681b      	ldr	r3, [r3, #0]
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d105      	bne.n	8012a26 <vPortExitCritical+0x42>
 8012a1a:	2300      	movs	r3, #0
 8012a1c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012a1e:	683b      	ldr	r3, [r7, #0]
 8012a20:	f383 8811 	msr	BASEPRI, r3
}
 8012a24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8012a26:	bf00      	nop
 8012a28:	370c      	adds	r7, #12
 8012a2a:	46bd      	mov	sp, r7
 8012a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a30:	4770      	bx	lr
 8012a32:	bf00      	nop
 8012a34:	24000010 	.word	0x24000010
	...

08012a40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012a40:	f3ef 8009 	mrs	r0, PSP
 8012a44:	f3bf 8f6f 	isb	sy
 8012a48:	4b15      	ldr	r3, [pc, #84]	; (8012aa0 <pxCurrentTCBConst>)
 8012a4a:	681a      	ldr	r2, [r3, #0]
 8012a4c:	f01e 0f10 	tst.w	lr, #16
 8012a50:	bf08      	it	eq
 8012a52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012a56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a5a:	6010      	str	r0, [r2, #0]
 8012a5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012a60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012a64:	f380 8811 	msr	BASEPRI, r0
 8012a68:	f3bf 8f4f 	dsb	sy
 8012a6c:	f3bf 8f6f 	isb	sy
 8012a70:	f7fe feec 	bl	801184c <vTaskSwitchContext>
 8012a74:	f04f 0000 	mov.w	r0, #0
 8012a78:	f380 8811 	msr	BASEPRI, r0
 8012a7c:	bc09      	pop	{r0, r3}
 8012a7e:	6819      	ldr	r1, [r3, #0]
 8012a80:	6808      	ldr	r0, [r1, #0]
 8012a82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a86:	f01e 0f10 	tst.w	lr, #16
 8012a8a:	bf08      	it	eq
 8012a8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012a90:	f380 8809 	msr	PSP, r0
 8012a94:	f3bf 8f6f 	isb	sy
 8012a98:	4770      	bx	lr
 8012a9a:	bf00      	nop
 8012a9c:	f3af 8000 	nop.w

08012aa0 <pxCurrentTCBConst>:
 8012aa0:	24000d38 	.word	0x24000d38
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012aa4:	bf00      	nop
 8012aa6:	bf00      	nop

08012aa8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012aa8:	b580      	push	{r7, lr}
 8012aaa:	b082      	sub	sp, #8
 8012aac:	af00      	add	r7, sp, #0
	__asm volatile
 8012aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ab2:	f383 8811 	msr	BASEPRI, r3
 8012ab6:	f3bf 8f6f 	isb	sy
 8012aba:	f3bf 8f4f 	dsb	sy
 8012abe:	607b      	str	r3, [r7, #4]
}
 8012ac0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012ac2:	f7fe fe09 	bl	80116d8 <xTaskIncrementTick>
 8012ac6:	4603      	mov	r3, r0
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	d003      	beq.n	8012ad4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8012acc:	4b06      	ldr	r3, [pc, #24]	; (8012ae8 <xPortSysTickHandler+0x40>)
 8012ace:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012ad2:	601a      	str	r2, [r3, #0]
 8012ad4:	2300      	movs	r3, #0
 8012ad6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012ad8:	683b      	ldr	r3, [r7, #0]
 8012ada:	f383 8811 	msr	BASEPRI, r3
}
 8012ade:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012ae0:	bf00      	nop
 8012ae2:	3708      	adds	r7, #8
 8012ae4:	46bd      	mov	sp, r7
 8012ae6:	bd80      	pop	{r7, pc}
 8012ae8:	e000ed04 	.word	0xe000ed04

08012aec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8012aec:	b480      	push	{r7}
 8012aee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012af0:	4b0b      	ldr	r3, [pc, #44]	; (8012b20 <vPortSetupTimerInterrupt+0x34>)
 8012af2:	2200      	movs	r2, #0
 8012af4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012af6:	4b0b      	ldr	r3, [pc, #44]	; (8012b24 <vPortSetupTimerInterrupt+0x38>)
 8012af8:	2200      	movs	r2, #0
 8012afa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8012afc:	4b0a      	ldr	r3, [pc, #40]	; (8012b28 <vPortSetupTimerInterrupt+0x3c>)
 8012afe:	681b      	ldr	r3, [r3, #0]
 8012b00:	4a0a      	ldr	r2, [pc, #40]	; (8012b2c <vPortSetupTimerInterrupt+0x40>)
 8012b02:	fba2 2303 	umull	r2, r3, r2, r3
 8012b06:	099b      	lsrs	r3, r3, #6
 8012b08:	4a09      	ldr	r2, [pc, #36]	; (8012b30 <vPortSetupTimerInterrupt+0x44>)
 8012b0a:	3b01      	subs	r3, #1
 8012b0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8012b0e:	4b04      	ldr	r3, [pc, #16]	; (8012b20 <vPortSetupTimerInterrupt+0x34>)
 8012b10:	2207      	movs	r2, #7
 8012b12:	601a      	str	r2, [r3, #0]
}
 8012b14:	bf00      	nop
 8012b16:	46bd      	mov	sp, r7
 8012b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b1c:	4770      	bx	lr
 8012b1e:	bf00      	nop
 8012b20:	e000e010 	.word	0xe000e010
 8012b24:	e000e018 	.word	0xe000e018
 8012b28:	24000000 	.word	0x24000000
 8012b2c:	10624dd3 	.word	0x10624dd3
 8012b30:	e000e014 	.word	0xe000e014

08012b34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012b34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8012b44 <vPortEnableVFP+0x10>
 8012b38:	6801      	ldr	r1, [r0, #0]
 8012b3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8012b3e:	6001      	str	r1, [r0, #0]
 8012b40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012b42:	bf00      	nop
 8012b44:	e000ed88 	.word	0xe000ed88

08012b48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012b48:	b480      	push	{r7}
 8012b4a:	b085      	sub	sp, #20
 8012b4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8012b4e:	f3ef 8305 	mrs	r3, IPSR
 8012b52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012b54:	68fb      	ldr	r3, [r7, #12]
 8012b56:	2b0f      	cmp	r3, #15
 8012b58:	d914      	bls.n	8012b84 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8012b5a:	4a17      	ldr	r2, [pc, #92]	; (8012bb8 <vPortValidateInterruptPriority+0x70>)
 8012b5c:	68fb      	ldr	r3, [r7, #12]
 8012b5e:	4413      	add	r3, r2
 8012b60:	781b      	ldrb	r3, [r3, #0]
 8012b62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012b64:	4b15      	ldr	r3, [pc, #84]	; (8012bbc <vPortValidateInterruptPriority+0x74>)
 8012b66:	781b      	ldrb	r3, [r3, #0]
 8012b68:	7afa      	ldrb	r2, [r7, #11]
 8012b6a:	429a      	cmp	r2, r3
 8012b6c:	d20a      	bcs.n	8012b84 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8012b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b72:	f383 8811 	msr	BASEPRI, r3
 8012b76:	f3bf 8f6f 	isb	sy
 8012b7a:	f3bf 8f4f 	dsb	sy
 8012b7e:	607b      	str	r3, [r7, #4]
}
 8012b80:	bf00      	nop
 8012b82:	e7fe      	b.n	8012b82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012b84:	4b0e      	ldr	r3, [pc, #56]	; (8012bc0 <vPortValidateInterruptPriority+0x78>)
 8012b86:	681b      	ldr	r3, [r3, #0]
 8012b88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8012b8c:	4b0d      	ldr	r3, [pc, #52]	; (8012bc4 <vPortValidateInterruptPriority+0x7c>)
 8012b8e:	681b      	ldr	r3, [r3, #0]
 8012b90:	429a      	cmp	r2, r3
 8012b92:	d90a      	bls.n	8012baa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8012b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b98:	f383 8811 	msr	BASEPRI, r3
 8012b9c:	f3bf 8f6f 	isb	sy
 8012ba0:	f3bf 8f4f 	dsb	sy
 8012ba4:	603b      	str	r3, [r7, #0]
}
 8012ba6:	bf00      	nop
 8012ba8:	e7fe      	b.n	8012ba8 <vPortValidateInterruptPriority+0x60>
	}
 8012baa:	bf00      	nop
 8012bac:	3714      	adds	r7, #20
 8012bae:	46bd      	mov	sp, r7
 8012bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bb4:	4770      	bx	lr
 8012bb6:	bf00      	nop
 8012bb8:	e000e3f0 	.word	0xe000e3f0
 8012bbc:	24001364 	.word	0x24001364
 8012bc0:	e000ed0c 	.word	0xe000ed0c
 8012bc4:	24001368 	.word	0x24001368

08012bc8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012bc8:	b580      	push	{r7, lr}
 8012bca:	b08a      	sub	sp, #40	; 0x28
 8012bcc:	af00      	add	r7, sp, #0
 8012bce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012bd0:	2300      	movs	r3, #0
 8012bd2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012bd4:	f7fe fcc4 	bl	8011560 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8012bd8:	4b5b      	ldr	r3, [pc, #364]	; (8012d48 <pvPortMalloc+0x180>)
 8012bda:	681b      	ldr	r3, [r3, #0]
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	d101      	bne.n	8012be4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012be0:	f000 f920 	bl	8012e24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012be4:	4b59      	ldr	r3, [pc, #356]	; (8012d4c <pvPortMalloc+0x184>)
 8012be6:	681a      	ldr	r2, [r3, #0]
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	4013      	ands	r3, r2
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	f040 8093 	bne.w	8012d18 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	d01d      	beq.n	8012c34 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8012bf8:	2208      	movs	r2, #8
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	4413      	add	r3, r2
 8012bfe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	f003 0307 	and.w	r3, r3, #7
 8012c06:	2b00      	cmp	r3, #0
 8012c08:	d014      	beq.n	8012c34 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	f023 0307 	bic.w	r3, r3, #7
 8012c10:	3308      	adds	r3, #8
 8012c12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	f003 0307 	and.w	r3, r3, #7
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	d00a      	beq.n	8012c34 <pvPortMalloc+0x6c>
	__asm volatile
 8012c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c22:	f383 8811 	msr	BASEPRI, r3
 8012c26:	f3bf 8f6f 	isb	sy
 8012c2a:	f3bf 8f4f 	dsb	sy
 8012c2e:	617b      	str	r3, [r7, #20]
}
 8012c30:	bf00      	nop
 8012c32:	e7fe      	b.n	8012c32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	2b00      	cmp	r3, #0
 8012c38:	d06e      	beq.n	8012d18 <pvPortMalloc+0x150>
 8012c3a:	4b45      	ldr	r3, [pc, #276]	; (8012d50 <pvPortMalloc+0x188>)
 8012c3c:	681b      	ldr	r3, [r3, #0]
 8012c3e:	687a      	ldr	r2, [r7, #4]
 8012c40:	429a      	cmp	r2, r3
 8012c42:	d869      	bhi.n	8012d18 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8012c44:	4b43      	ldr	r3, [pc, #268]	; (8012d54 <pvPortMalloc+0x18c>)
 8012c46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8012c48:	4b42      	ldr	r3, [pc, #264]	; (8012d54 <pvPortMalloc+0x18c>)
 8012c4a:	681b      	ldr	r3, [r3, #0]
 8012c4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012c4e:	e004      	b.n	8012c5a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8012c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8012c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c56:	681b      	ldr	r3, [r3, #0]
 8012c58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c5c:	685b      	ldr	r3, [r3, #4]
 8012c5e:	687a      	ldr	r2, [r7, #4]
 8012c60:	429a      	cmp	r2, r3
 8012c62:	d903      	bls.n	8012c6c <pvPortMalloc+0xa4>
 8012c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c66:	681b      	ldr	r3, [r3, #0]
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	d1f1      	bne.n	8012c50 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8012c6c:	4b36      	ldr	r3, [pc, #216]	; (8012d48 <pvPortMalloc+0x180>)
 8012c6e:	681b      	ldr	r3, [r3, #0]
 8012c70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012c72:	429a      	cmp	r2, r3
 8012c74:	d050      	beq.n	8012d18 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012c76:	6a3b      	ldr	r3, [r7, #32]
 8012c78:	681b      	ldr	r3, [r3, #0]
 8012c7a:	2208      	movs	r2, #8
 8012c7c:	4413      	add	r3, r2
 8012c7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c82:	681a      	ldr	r2, [r3, #0]
 8012c84:	6a3b      	ldr	r3, [r7, #32]
 8012c86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c8a:	685a      	ldr	r2, [r3, #4]
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	1ad2      	subs	r2, r2, r3
 8012c90:	2308      	movs	r3, #8
 8012c92:	005b      	lsls	r3, r3, #1
 8012c94:	429a      	cmp	r2, r3
 8012c96:	d91f      	bls.n	8012cd8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012c98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	4413      	add	r3, r2
 8012c9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012ca0:	69bb      	ldr	r3, [r7, #24]
 8012ca2:	f003 0307 	and.w	r3, r3, #7
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	d00a      	beq.n	8012cc0 <pvPortMalloc+0xf8>
	__asm volatile
 8012caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cae:	f383 8811 	msr	BASEPRI, r3
 8012cb2:	f3bf 8f6f 	isb	sy
 8012cb6:	f3bf 8f4f 	dsb	sy
 8012cba:	613b      	str	r3, [r7, #16]
}
 8012cbc:	bf00      	nop
 8012cbe:	e7fe      	b.n	8012cbe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cc2:	685a      	ldr	r2, [r3, #4]
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	1ad2      	subs	r2, r2, r3
 8012cc8:	69bb      	ldr	r3, [r7, #24]
 8012cca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8012ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cce:	687a      	ldr	r2, [r7, #4]
 8012cd0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8012cd2:	69b8      	ldr	r0, [r7, #24]
 8012cd4:	f000 f908 	bl	8012ee8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012cd8:	4b1d      	ldr	r3, [pc, #116]	; (8012d50 <pvPortMalloc+0x188>)
 8012cda:	681a      	ldr	r2, [r3, #0]
 8012cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cde:	685b      	ldr	r3, [r3, #4]
 8012ce0:	1ad3      	subs	r3, r2, r3
 8012ce2:	4a1b      	ldr	r2, [pc, #108]	; (8012d50 <pvPortMalloc+0x188>)
 8012ce4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012ce6:	4b1a      	ldr	r3, [pc, #104]	; (8012d50 <pvPortMalloc+0x188>)
 8012ce8:	681a      	ldr	r2, [r3, #0]
 8012cea:	4b1b      	ldr	r3, [pc, #108]	; (8012d58 <pvPortMalloc+0x190>)
 8012cec:	681b      	ldr	r3, [r3, #0]
 8012cee:	429a      	cmp	r2, r3
 8012cf0:	d203      	bcs.n	8012cfa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012cf2:	4b17      	ldr	r3, [pc, #92]	; (8012d50 <pvPortMalloc+0x188>)
 8012cf4:	681b      	ldr	r3, [r3, #0]
 8012cf6:	4a18      	ldr	r2, [pc, #96]	; (8012d58 <pvPortMalloc+0x190>)
 8012cf8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8012cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cfc:	685a      	ldr	r2, [r3, #4]
 8012cfe:	4b13      	ldr	r3, [pc, #76]	; (8012d4c <pvPortMalloc+0x184>)
 8012d00:	681b      	ldr	r3, [r3, #0]
 8012d02:	431a      	orrs	r2, r3
 8012d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d06:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d0a:	2200      	movs	r2, #0
 8012d0c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8012d0e:	4b13      	ldr	r3, [pc, #76]	; (8012d5c <pvPortMalloc+0x194>)
 8012d10:	681b      	ldr	r3, [r3, #0]
 8012d12:	3301      	adds	r3, #1
 8012d14:	4a11      	ldr	r2, [pc, #68]	; (8012d5c <pvPortMalloc+0x194>)
 8012d16:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012d18:	f7fe fc30 	bl	801157c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8012d1c:	69fb      	ldr	r3, [r7, #28]
 8012d1e:	f003 0307 	and.w	r3, r3, #7
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	d00a      	beq.n	8012d3c <pvPortMalloc+0x174>
	__asm volatile
 8012d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d2a:	f383 8811 	msr	BASEPRI, r3
 8012d2e:	f3bf 8f6f 	isb	sy
 8012d32:	f3bf 8f4f 	dsb	sy
 8012d36:	60fb      	str	r3, [r7, #12]
}
 8012d38:	bf00      	nop
 8012d3a:	e7fe      	b.n	8012d3a <pvPortMalloc+0x172>
	return pvReturn;
 8012d3c:	69fb      	ldr	r3, [r7, #28]
}
 8012d3e:	4618      	mov	r0, r3
 8012d40:	3728      	adds	r7, #40	; 0x28
 8012d42:	46bd      	mov	sp, r7
 8012d44:	bd80      	pop	{r7, pc}
 8012d46:	bf00      	nop
 8012d48:	24004f74 	.word	0x24004f74
 8012d4c:	24004f88 	.word	0x24004f88
 8012d50:	24004f78 	.word	0x24004f78
 8012d54:	24004f6c 	.word	0x24004f6c
 8012d58:	24004f7c 	.word	0x24004f7c
 8012d5c:	24004f80 	.word	0x24004f80

08012d60 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012d60:	b580      	push	{r7, lr}
 8012d62:	b086      	sub	sp, #24
 8012d64:	af00      	add	r7, sp, #0
 8012d66:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	2b00      	cmp	r3, #0
 8012d70:	d04d      	beq.n	8012e0e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8012d72:	2308      	movs	r3, #8
 8012d74:	425b      	negs	r3, r3
 8012d76:	697a      	ldr	r2, [r7, #20]
 8012d78:	4413      	add	r3, r2
 8012d7a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8012d7c:	697b      	ldr	r3, [r7, #20]
 8012d7e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012d80:	693b      	ldr	r3, [r7, #16]
 8012d82:	685a      	ldr	r2, [r3, #4]
 8012d84:	4b24      	ldr	r3, [pc, #144]	; (8012e18 <vPortFree+0xb8>)
 8012d86:	681b      	ldr	r3, [r3, #0]
 8012d88:	4013      	ands	r3, r2
 8012d8a:	2b00      	cmp	r3, #0
 8012d8c:	d10a      	bne.n	8012da4 <vPortFree+0x44>
	__asm volatile
 8012d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d92:	f383 8811 	msr	BASEPRI, r3
 8012d96:	f3bf 8f6f 	isb	sy
 8012d9a:	f3bf 8f4f 	dsb	sy
 8012d9e:	60fb      	str	r3, [r7, #12]
}
 8012da0:	bf00      	nop
 8012da2:	e7fe      	b.n	8012da2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012da4:	693b      	ldr	r3, [r7, #16]
 8012da6:	681b      	ldr	r3, [r3, #0]
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	d00a      	beq.n	8012dc2 <vPortFree+0x62>
	__asm volatile
 8012dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012db0:	f383 8811 	msr	BASEPRI, r3
 8012db4:	f3bf 8f6f 	isb	sy
 8012db8:	f3bf 8f4f 	dsb	sy
 8012dbc:	60bb      	str	r3, [r7, #8]
}
 8012dbe:	bf00      	nop
 8012dc0:	e7fe      	b.n	8012dc0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8012dc2:	693b      	ldr	r3, [r7, #16]
 8012dc4:	685a      	ldr	r2, [r3, #4]
 8012dc6:	4b14      	ldr	r3, [pc, #80]	; (8012e18 <vPortFree+0xb8>)
 8012dc8:	681b      	ldr	r3, [r3, #0]
 8012dca:	4013      	ands	r3, r2
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	d01e      	beq.n	8012e0e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012dd0:	693b      	ldr	r3, [r7, #16]
 8012dd2:	681b      	ldr	r3, [r3, #0]
 8012dd4:	2b00      	cmp	r3, #0
 8012dd6:	d11a      	bne.n	8012e0e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012dd8:	693b      	ldr	r3, [r7, #16]
 8012dda:	685a      	ldr	r2, [r3, #4]
 8012ddc:	4b0e      	ldr	r3, [pc, #56]	; (8012e18 <vPortFree+0xb8>)
 8012dde:	681b      	ldr	r3, [r3, #0]
 8012de0:	43db      	mvns	r3, r3
 8012de2:	401a      	ands	r2, r3
 8012de4:	693b      	ldr	r3, [r7, #16]
 8012de6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012de8:	f7fe fbba 	bl	8011560 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8012dec:	693b      	ldr	r3, [r7, #16]
 8012dee:	685a      	ldr	r2, [r3, #4]
 8012df0:	4b0a      	ldr	r3, [pc, #40]	; (8012e1c <vPortFree+0xbc>)
 8012df2:	681b      	ldr	r3, [r3, #0]
 8012df4:	4413      	add	r3, r2
 8012df6:	4a09      	ldr	r2, [pc, #36]	; (8012e1c <vPortFree+0xbc>)
 8012df8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8012dfa:	6938      	ldr	r0, [r7, #16]
 8012dfc:	f000 f874 	bl	8012ee8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8012e00:	4b07      	ldr	r3, [pc, #28]	; (8012e20 <vPortFree+0xc0>)
 8012e02:	681b      	ldr	r3, [r3, #0]
 8012e04:	3301      	adds	r3, #1
 8012e06:	4a06      	ldr	r2, [pc, #24]	; (8012e20 <vPortFree+0xc0>)
 8012e08:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8012e0a:	f7fe fbb7 	bl	801157c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8012e0e:	bf00      	nop
 8012e10:	3718      	adds	r7, #24
 8012e12:	46bd      	mov	sp, r7
 8012e14:	bd80      	pop	{r7, pc}
 8012e16:	bf00      	nop
 8012e18:	24004f88 	.word	0x24004f88
 8012e1c:	24004f78 	.word	0x24004f78
 8012e20:	24004f84 	.word	0x24004f84

08012e24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012e24:	b480      	push	{r7}
 8012e26:	b085      	sub	sp, #20
 8012e28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8012e2a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8012e2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8012e30:	4b27      	ldr	r3, [pc, #156]	; (8012ed0 <prvHeapInit+0xac>)
 8012e32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012e34:	68fb      	ldr	r3, [r7, #12]
 8012e36:	f003 0307 	and.w	r3, r3, #7
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	d00c      	beq.n	8012e58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8012e3e:	68fb      	ldr	r3, [r7, #12]
 8012e40:	3307      	adds	r3, #7
 8012e42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012e44:	68fb      	ldr	r3, [r7, #12]
 8012e46:	f023 0307 	bic.w	r3, r3, #7
 8012e4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8012e4c:	68ba      	ldr	r2, [r7, #8]
 8012e4e:	68fb      	ldr	r3, [r7, #12]
 8012e50:	1ad3      	subs	r3, r2, r3
 8012e52:	4a1f      	ldr	r2, [pc, #124]	; (8012ed0 <prvHeapInit+0xac>)
 8012e54:	4413      	add	r3, r2
 8012e56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012e58:	68fb      	ldr	r3, [r7, #12]
 8012e5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8012e5c:	4a1d      	ldr	r2, [pc, #116]	; (8012ed4 <prvHeapInit+0xb0>)
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8012e62:	4b1c      	ldr	r3, [pc, #112]	; (8012ed4 <prvHeapInit+0xb0>)
 8012e64:	2200      	movs	r2, #0
 8012e66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	68ba      	ldr	r2, [r7, #8]
 8012e6c:	4413      	add	r3, r2
 8012e6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8012e70:	2208      	movs	r2, #8
 8012e72:	68fb      	ldr	r3, [r7, #12]
 8012e74:	1a9b      	subs	r3, r3, r2
 8012e76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012e78:	68fb      	ldr	r3, [r7, #12]
 8012e7a:	f023 0307 	bic.w	r3, r3, #7
 8012e7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8012e80:	68fb      	ldr	r3, [r7, #12]
 8012e82:	4a15      	ldr	r2, [pc, #84]	; (8012ed8 <prvHeapInit+0xb4>)
 8012e84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012e86:	4b14      	ldr	r3, [pc, #80]	; (8012ed8 <prvHeapInit+0xb4>)
 8012e88:	681b      	ldr	r3, [r3, #0]
 8012e8a:	2200      	movs	r2, #0
 8012e8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8012e8e:	4b12      	ldr	r3, [pc, #72]	; (8012ed8 <prvHeapInit+0xb4>)
 8012e90:	681b      	ldr	r3, [r3, #0]
 8012e92:	2200      	movs	r2, #0
 8012e94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8012e9a:	683b      	ldr	r3, [r7, #0]
 8012e9c:	68fa      	ldr	r2, [r7, #12]
 8012e9e:	1ad2      	subs	r2, r2, r3
 8012ea0:	683b      	ldr	r3, [r7, #0]
 8012ea2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012ea4:	4b0c      	ldr	r3, [pc, #48]	; (8012ed8 <prvHeapInit+0xb4>)
 8012ea6:	681a      	ldr	r2, [r3, #0]
 8012ea8:	683b      	ldr	r3, [r7, #0]
 8012eaa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012eac:	683b      	ldr	r3, [r7, #0]
 8012eae:	685b      	ldr	r3, [r3, #4]
 8012eb0:	4a0a      	ldr	r2, [pc, #40]	; (8012edc <prvHeapInit+0xb8>)
 8012eb2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012eb4:	683b      	ldr	r3, [r7, #0]
 8012eb6:	685b      	ldr	r3, [r3, #4]
 8012eb8:	4a09      	ldr	r2, [pc, #36]	; (8012ee0 <prvHeapInit+0xbc>)
 8012eba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012ebc:	4b09      	ldr	r3, [pc, #36]	; (8012ee4 <prvHeapInit+0xc0>)
 8012ebe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8012ec2:	601a      	str	r2, [r3, #0]
}
 8012ec4:	bf00      	nop
 8012ec6:	3714      	adds	r7, #20
 8012ec8:	46bd      	mov	sp, r7
 8012eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ece:	4770      	bx	lr
 8012ed0:	2400136c 	.word	0x2400136c
 8012ed4:	24004f6c 	.word	0x24004f6c
 8012ed8:	24004f74 	.word	0x24004f74
 8012edc:	24004f7c 	.word	0x24004f7c
 8012ee0:	24004f78 	.word	0x24004f78
 8012ee4:	24004f88 	.word	0x24004f88

08012ee8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012ee8:	b480      	push	{r7}
 8012eea:	b085      	sub	sp, #20
 8012eec:	af00      	add	r7, sp, #0
 8012eee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012ef0:	4b28      	ldr	r3, [pc, #160]	; (8012f94 <prvInsertBlockIntoFreeList+0xac>)
 8012ef2:	60fb      	str	r3, [r7, #12]
 8012ef4:	e002      	b.n	8012efc <prvInsertBlockIntoFreeList+0x14>
 8012ef6:	68fb      	ldr	r3, [r7, #12]
 8012ef8:	681b      	ldr	r3, [r3, #0]
 8012efa:	60fb      	str	r3, [r7, #12]
 8012efc:	68fb      	ldr	r3, [r7, #12]
 8012efe:	681b      	ldr	r3, [r3, #0]
 8012f00:	687a      	ldr	r2, [r7, #4]
 8012f02:	429a      	cmp	r2, r3
 8012f04:	d8f7      	bhi.n	8012ef6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012f06:	68fb      	ldr	r3, [r7, #12]
 8012f08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8012f0a:	68fb      	ldr	r3, [r7, #12]
 8012f0c:	685b      	ldr	r3, [r3, #4]
 8012f0e:	68ba      	ldr	r2, [r7, #8]
 8012f10:	4413      	add	r3, r2
 8012f12:	687a      	ldr	r2, [r7, #4]
 8012f14:	429a      	cmp	r2, r3
 8012f16:	d108      	bne.n	8012f2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012f18:	68fb      	ldr	r3, [r7, #12]
 8012f1a:	685a      	ldr	r2, [r3, #4]
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	685b      	ldr	r3, [r3, #4]
 8012f20:	441a      	add	r2, r3
 8012f22:	68fb      	ldr	r3, [r7, #12]
 8012f24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012f26:	68fb      	ldr	r3, [r7, #12]
 8012f28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	685b      	ldr	r3, [r3, #4]
 8012f32:	68ba      	ldr	r2, [r7, #8]
 8012f34:	441a      	add	r2, r3
 8012f36:	68fb      	ldr	r3, [r7, #12]
 8012f38:	681b      	ldr	r3, [r3, #0]
 8012f3a:	429a      	cmp	r2, r3
 8012f3c:	d118      	bne.n	8012f70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8012f3e:	68fb      	ldr	r3, [r7, #12]
 8012f40:	681a      	ldr	r2, [r3, #0]
 8012f42:	4b15      	ldr	r3, [pc, #84]	; (8012f98 <prvInsertBlockIntoFreeList+0xb0>)
 8012f44:	681b      	ldr	r3, [r3, #0]
 8012f46:	429a      	cmp	r2, r3
 8012f48:	d00d      	beq.n	8012f66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	685a      	ldr	r2, [r3, #4]
 8012f4e:	68fb      	ldr	r3, [r7, #12]
 8012f50:	681b      	ldr	r3, [r3, #0]
 8012f52:	685b      	ldr	r3, [r3, #4]
 8012f54:	441a      	add	r2, r3
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8012f5a:	68fb      	ldr	r3, [r7, #12]
 8012f5c:	681b      	ldr	r3, [r3, #0]
 8012f5e:	681a      	ldr	r2, [r3, #0]
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	601a      	str	r2, [r3, #0]
 8012f64:	e008      	b.n	8012f78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012f66:	4b0c      	ldr	r3, [pc, #48]	; (8012f98 <prvInsertBlockIntoFreeList+0xb0>)
 8012f68:	681a      	ldr	r2, [r3, #0]
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	601a      	str	r2, [r3, #0]
 8012f6e:	e003      	b.n	8012f78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012f70:	68fb      	ldr	r3, [r7, #12]
 8012f72:	681a      	ldr	r2, [r3, #0]
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012f78:	68fa      	ldr	r2, [r7, #12]
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	429a      	cmp	r2, r3
 8012f7e:	d002      	beq.n	8012f86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012f80:	68fb      	ldr	r3, [r7, #12]
 8012f82:	687a      	ldr	r2, [r7, #4]
 8012f84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012f86:	bf00      	nop
 8012f88:	3714      	adds	r7, #20
 8012f8a:	46bd      	mov	sp, r7
 8012f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f90:	4770      	bx	lr
 8012f92:	bf00      	nop
 8012f94:	24004f6c 	.word	0x24004f6c
 8012f98:	24004f74 	.word	0x24004f74

08012f9c <__errno>:
 8012f9c:	4b01      	ldr	r3, [pc, #4]	; (8012fa4 <__errno+0x8>)
 8012f9e:	6818      	ldr	r0, [r3, #0]
 8012fa0:	4770      	bx	lr
 8012fa2:	bf00      	nop
 8012fa4:	24000014 	.word	0x24000014

08012fa8 <__libc_init_array>:
 8012fa8:	b570      	push	{r4, r5, r6, lr}
 8012faa:	4d0d      	ldr	r5, [pc, #52]	; (8012fe0 <__libc_init_array+0x38>)
 8012fac:	4c0d      	ldr	r4, [pc, #52]	; (8012fe4 <__libc_init_array+0x3c>)
 8012fae:	1b64      	subs	r4, r4, r5
 8012fb0:	10a4      	asrs	r4, r4, #2
 8012fb2:	2600      	movs	r6, #0
 8012fb4:	42a6      	cmp	r6, r4
 8012fb6:	d109      	bne.n	8012fcc <__libc_init_array+0x24>
 8012fb8:	4d0b      	ldr	r5, [pc, #44]	; (8012fe8 <__libc_init_array+0x40>)
 8012fba:	4c0c      	ldr	r4, [pc, #48]	; (8012fec <__libc_init_array+0x44>)
 8012fbc:	f001 f842 	bl	8014044 <_init>
 8012fc0:	1b64      	subs	r4, r4, r5
 8012fc2:	10a4      	asrs	r4, r4, #2
 8012fc4:	2600      	movs	r6, #0
 8012fc6:	42a6      	cmp	r6, r4
 8012fc8:	d105      	bne.n	8012fd6 <__libc_init_array+0x2e>
 8012fca:	bd70      	pop	{r4, r5, r6, pc}
 8012fcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8012fd0:	4798      	blx	r3
 8012fd2:	3601      	adds	r6, #1
 8012fd4:	e7ee      	b.n	8012fb4 <__libc_init_array+0xc>
 8012fd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8012fda:	4798      	blx	r3
 8012fdc:	3601      	adds	r6, #1
 8012fde:	e7f2      	b.n	8012fc6 <__libc_init_array+0x1e>
 8012fe0:	08014414 	.word	0x08014414
 8012fe4:	08014414 	.word	0x08014414
 8012fe8:	08014414 	.word	0x08014414
 8012fec:	08014418 	.word	0x08014418

08012ff0 <malloc>:
 8012ff0:	4b02      	ldr	r3, [pc, #8]	; (8012ffc <malloc+0xc>)
 8012ff2:	4601      	mov	r1, r0
 8012ff4:	6818      	ldr	r0, [r3, #0]
 8012ff6:	f000 b88d 	b.w	8013114 <_malloc_r>
 8012ffa:	bf00      	nop
 8012ffc:	24000014 	.word	0x24000014

08013000 <free>:
 8013000:	4b02      	ldr	r3, [pc, #8]	; (801300c <free+0xc>)
 8013002:	4601      	mov	r1, r0
 8013004:	6818      	ldr	r0, [r3, #0]
 8013006:	f000 b819 	b.w	801303c <_free_r>
 801300a:	bf00      	nop
 801300c:	24000014 	.word	0x24000014

08013010 <memcpy>:
 8013010:	440a      	add	r2, r1
 8013012:	4291      	cmp	r1, r2
 8013014:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8013018:	d100      	bne.n	801301c <memcpy+0xc>
 801301a:	4770      	bx	lr
 801301c:	b510      	push	{r4, lr}
 801301e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013022:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013026:	4291      	cmp	r1, r2
 8013028:	d1f9      	bne.n	801301e <memcpy+0xe>
 801302a:	bd10      	pop	{r4, pc}

0801302c <memset>:
 801302c:	4402      	add	r2, r0
 801302e:	4603      	mov	r3, r0
 8013030:	4293      	cmp	r3, r2
 8013032:	d100      	bne.n	8013036 <memset+0xa>
 8013034:	4770      	bx	lr
 8013036:	f803 1b01 	strb.w	r1, [r3], #1
 801303a:	e7f9      	b.n	8013030 <memset+0x4>

0801303c <_free_r>:
 801303c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801303e:	2900      	cmp	r1, #0
 8013040:	d044      	beq.n	80130cc <_free_r+0x90>
 8013042:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013046:	9001      	str	r0, [sp, #4]
 8013048:	2b00      	cmp	r3, #0
 801304a:	f1a1 0404 	sub.w	r4, r1, #4
 801304e:	bfb8      	it	lt
 8013050:	18e4      	addlt	r4, r4, r3
 8013052:	f000 fc51 	bl	80138f8 <__malloc_lock>
 8013056:	4a1e      	ldr	r2, [pc, #120]	; (80130d0 <_free_r+0x94>)
 8013058:	9801      	ldr	r0, [sp, #4]
 801305a:	6813      	ldr	r3, [r2, #0]
 801305c:	b933      	cbnz	r3, 801306c <_free_r+0x30>
 801305e:	6063      	str	r3, [r4, #4]
 8013060:	6014      	str	r4, [r2, #0]
 8013062:	b003      	add	sp, #12
 8013064:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013068:	f000 bc4c 	b.w	8013904 <__malloc_unlock>
 801306c:	42a3      	cmp	r3, r4
 801306e:	d908      	bls.n	8013082 <_free_r+0x46>
 8013070:	6825      	ldr	r5, [r4, #0]
 8013072:	1961      	adds	r1, r4, r5
 8013074:	428b      	cmp	r3, r1
 8013076:	bf01      	itttt	eq
 8013078:	6819      	ldreq	r1, [r3, #0]
 801307a:	685b      	ldreq	r3, [r3, #4]
 801307c:	1949      	addeq	r1, r1, r5
 801307e:	6021      	streq	r1, [r4, #0]
 8013080:	e7ed      	b.n	801305e <_free_r+0x22>
 8013082:	461a      	mov	r2, r3
 8013084:	685b      	ldr	r3, [r3, #4]
 8013086:	b10b      	cbz	r3, 801308c <_free_r+0x50>
 8013088:	42a3      	cmp	r3, r4
 801308a:	d9fa      	bls.n	8013082 <_free_r+0x46>
 801308c:	6811      	ldr	r1, [r2, #0]
 801308e:	1855      	adds	r5, r2, r1
 8013090:	42a5      	cmp	r5, r4
 8013092:	d10b      	bne.n	80130ac <_free_r+0x70>
 8013094:	6824      	ldr	r4, [r4, #0]
 8013096:	4421      	add	r1, r4
 8013098:	1854      	adds	r4, r2, r1
 801309a:	42a3      	cmp	r3, r4
 801309c:	6011      	str	r1, [r2, #0]
 801309e:	d1e0      	bne.n	8013062 <_free_r+0x26>
 80130a0:	681c      	ldr	r4, [r3, #0]
 80130a2:	685b      	ldr	r3, [r3, #4]
 80130a4:	6053      	str	r3, [r2, #4]
 80130a6:	4421      	add	r1, r4
 80130a8:	6011      	str	r1, [r2, #0]
 80130aa:	e7da      	b.n	8013062 <_free_r+0x26>
 80130ac:	d902      	bls.n	80130b4 <_free_r+0x78>
 80130ae:	230c      	movs	r3, #12
 80130b0:	6003      	str	r3, [r0, #0]
 80130b2:	e7d6      	b.n	8013062 <_free_r+0x26>
 80130b4:	6825      	ldr	r5, [r4, #0]
 80130b6:	1961      	adds	r1, r4, r5
 80130b8:	428b      	cmp	r3, r1
 80130ba:	bf04      	itt	eq
 80130bc:	6819      	ldreq	r1, [r3, #0]
 80130be:	685b      	ldreq	r3, [r3, #4]
 80130c0:	6063      	str	r3, [r4, #4]
 80130c2:	bf04      	itt	eq
 80130c4:	1949      	addeq	r1, r1, r5
 80130c6:	6021      	streq	r1, [r4, #0]
 80130c8:	6054      	str	r4, [r2, #4]
 80130ca:	e7ca      	b.n	8013062 <_free_r+0x26>
 80130cc:	b003      	add	sp, #12
 80130ce:	bd30      	pop	{r4, r5, pc}
 80130d0:	24004f8c 	.word	0x24004f8c

080130d4 <sbrk_aligned>:
 80130d4:	b570      	push	{r4, r5, r6, lr}
 80130d6:	4e0e      	ldr	r6, [pc, #56]	; (8013110 <sbrk_aligned+0x3c>)
 80130d8:	460c      	mov	r4, r1
 80130da:	6831      	ldr	r1, [r6, #0]
 80130dc:	4605      	mov	r5, r0
 80130de:	b911      	cbnz	r1, 80130e6 <sbrk_aligned+0x12>
 80130e0:	f000 f91a 	bl	8013318 <_sbrk_r>
 80130e4:	6030      	str	r0, [r6, #0]
 80130e6:	4621      	mov	r1, r4
 80130e8:	4628      	mov	r0, r5
 80130ea:	f000 f915 	bl	8013318 <_sbrk_r>
 80130ee:	1c43      	adds	r3, r0, #1
 80130f0:	d00a      	beq.n	8013108 <sbrk_aligned+0x34>
 80130f2:	1cc4      	adds	r4, r0, #3
 80130f4:	f024 0403 	bic.w	r4, r4, #3
 80130f8:	42a0      	cmp	r0, r4
 80130fa:	d007      	beq.n	801310c <sbrk_aligned+0x38>
 80130fc:	1a21      	subs	r1, r4, r0
 80130fe:	4628      	mov	r0, r5
 8013100:	f000 f90a 	bl	8013318 <_sbrk_r>
 8013104:	3001      	adds	r0, #1
 8013106:	d101      	bne.n	801310c <sbrk_aligned+0x38>
 8013108:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801310c:	4620      	mov	r0, r4
 801310e:	bd70      	pop	{r4, r5, r6, pc}
 8013110:	24004f90 	.word	0x24004f90

08013114 <_malloc_r>:
 8013114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013118:	1ccd      	adds	r5, r1, #3
 801311a:	f025 0503 	bic.w	r5, r5, #3
 801311e:	3508      	adds	r5, #8
 8013120:	2d0c      	cmp	r5, #12
 8013122:	bf38      	it	cc
 8013124:	250c      	movcc	r5, #12
 8013126:	2d00      	cmp	r5, #0
 8013128:	4607      	mov	r7, r0
 801312a:	db01      	blt.n	8013130 <_malloc_r+0x1c>
 801312c:	42a9      	cmp	r1, r5
 801312e:	d905      	bls.n	801313c <_malloc_r+0x28>
 8013130:	230c      	movs	r3, #12
 8013132:	603b      	str	r3, [r7, #0]
 8013134:	2600      	movs	r6, #0
 8013136:	4630      	mov	r0, r6
 8013138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801313c:	4e2e      	ldr	r6, [pc, #184]	; (80131f8 <_malloc_r+0xe4>)
 801313e:	f000 fbdb 	bl	80138f8 <__malloc_lock>
 8013142:	6833      	ldr	r3, [r6, #0]
 8013144:	461c      	mov	r4, r3
 8013146:	bb34      	cbnz	r4, 8013196 <_malloc_r+0x82>
 8013148:	4629      	mov	r1, r5
 801314a:	4638      	mov	r0, r7
 801314c:	f7ff ffc2 	bl	80130d4 <sbrk_aligned>
 8013150:	1c43      	adds	r3, r0, #1
 8013152:	4604      	mov	r4, r0
 8013154:	d14d      	bne.n	80131f2 <_malloc_r+0xde>
 8013156:	6834      	ldr	r4, [r6, #0]
 8013158:	4626      	mov	r6, r4
 801315a:	2e00      	cmp	r6, #0
 801315c:	d140      	bne.n	80131e0 <_malloc_r+0xcc>
 801315e:	6823      	ldr	r3, [r4, #0]
 8013160:	4631      	mov	r1, r6
 8013162:	4638      	mov	r0, r7
 8013164:	eb04 0803 	add.w	r8, r4, r3
 8013168:	f000 f8d6 	bl	8013318 <_sbrk_r>
 801316c:	4580      	cmp	r8, r0
 801316e:	d13a      	bne.n	80131e6 <_malloc_r+0xd2>
 8013170:	6821      	ldr	r1, [r4, #0]
 8013172:	3503      	adds	r5, #3
 8013174:	1a6d      	subs	r5, r5, r1
 8013176:	f025 0503 	bic.w	r5, r5, #3
 801317a:	3508      	adds	r5, #8
 801317c:	2d0c      	cmp	r5, #12
 801317e:	bf38      	it	cc
 8013180:	250c      	movcc	r5, #12
 8013182:	4629      	mov	r1, r5
 8013184:	4638      	mov	r0, r7
 8013186:	f7ff ffa5 	bl	80130d4 <sbrk_aligned>
 801318a:	3001      	adds	r0, #1
 801318c:	d02b      	beq.n	80131e6 <_malloc_r+0xd2>
 801318e:	6823      	ldr	r3, [r4, #0]
 8013190:	442b      	add	r3, r5
 8013192:	6023      	str	r3, [r4, #0]
 8013194:	e00e      	b.n	80131b4 <_malloc_r+0xa0>
 8013196:	6822      	ldr	r2, [r4, #0]
 8013198:	1b52      	subs	r2, r2, r5
 801319a:	d41e      	bmi.n	80131da <_malloc_r+0xc6>
 801319c:	2a0b      	cmp	r2, #11
 801319e:	d916      	bls.n	80131ce <_malloc_r+0xba>
 80131a0:	1961      	adds	r1, r4, r5
 80131a2:	42a3      	cmp	r3, r4
 80131a4:	6025      	str	r5, [r4, #0]
 80131a6:	bf18      	it	ne
 80131a8:	6059      	strne	r1, [r3, #4]
 80131aa:	6863      	ldr	r3, [r4, #4]
 80131ac:	bf08      	it	eq
 80131ae:	6031      	streq	r1, [r6, #0]
 80131b0:	5162      	str	r2, [r4, r5]
 80131b2:	604b      	str	r3, [r1, #4]
 80131b4:	4638      	mov	r0, r7
 80131b6:	f104 060b 	add.w	r6, r4, #11
 80131ba:	f000 fba3 	bl	8013904 <__malloc_unlock>
 80131be:	f026 0607 	bic.w	r6, r6, #7
 80131c2:	1d23      	adds	r3, r4, #4
 80131c4:	1af2      	subs	r2, r6, r3
 80131c6:	d0b6      	beq.n	8013136 <_malloc_r+0x22>
 80131c8:	1b9b      	subs	r3, r3, r6
 80131ca:	50a3      	str	r3, [r4, r2]
 80131cc:	e7b3      	b.n	8013136 <_malloc_r+0x22>
 80131ce:	6862      	ldr	r2, [r4, #4]
 80131d0:	42a3      	cmp	r3, r4
 80131d2:	bf0c      	ite	eq
 80131d4:	6032      	streq	r2, [r6, #0]
 80131d6:	605a      	strne	r2, [r3, #4]
 80131d8:	e7ec      	b.n	80131b4 <_malloc_r+0xa0>
 80131da:	4623      	mov	r3, r4
 80131dc:	6864      	ldr	r4, [r4, #4]
 80131de:	e7b2      	b.n	8013146 <_malloc_r+0x32>
 80131e0:	4634      	mov	r4, r6
 80131e2:	6876      	ldr	r6, [r6, #4]
 80131e4:	e7b9      	b.n	801315a <_malloc_r+0x46>
 80131e6:	230c      	movs	r3, #12
 80131e8:	603b      	str	r3, [r7, #0]
 80131ea:	4638      	mov	r0, r7
 80131ec:	f000 fb8a 	bl	8013904 <__malloc_unlock>
 80131f0:	e7a1      	b.n	8013136 <_malloc_r+0x22>
 80131f2:	6025      	str	r5, [r4, #0]
 80131f4:	e7de      	b.n	80131b4 <_malloc_r+0xa0>
 80131f6:	bf00      	nop
 80131f8:	24004f8c 	.word	0x24004f8c

080131fc <iprintf>:
 80131fc:	b40f      	push	{r0, r1, r2, r3}
 80131fe:	4b0a      	ldr	r3, [pc, #40]	; (8013228 <iprintf+0x2c>)
 8013200:	b513      	push	{r0, r1, r4, lr}
 8013202:	681c      	ldr	r4, [r3, #0]
 8013204:	b124      	cbz	r4, 8013210 <iprintf+0x14>
 8013206:	69a3      	ldr	r3, [r4, #24]
 8013208:	b913      	cbnz	r3, 8013210 <iprintf+0x14>
 801320a:	4620      	mov	r0, r4
 801320c:	f000 fa6e 	bl	80136ec <__sinit>
 8013210:	ab05      	add	r3, sp, #20
 8013212:	9a04      	ldr	r2, [sp, #16]
 8013214:	68a1      	ldr	r1, [r4, #8]
 8013216:	9301      	str	r3, [sp, #4]
 8013218:	4620      	mov	r0, r4
 801321a:	f000 fba3 	bl	8013964 <_vfiprintf_r>
 801321e:	b002      	add	sp, #8
 8013220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013224:	b004      	add	sp, #16
 8013226:	4770      	bx	lr
 8013228:	24000014 	.word	0x24000014

0801322c <_puts_r>:
 801322c:	b570      	push	{r4, r5, r6, lr}
 801322e:	460e      	mov	r6, r1
 8013230:	4605      	mov	r5, r0
 8013232:	b118      	cbz	r0, 801323c <_puts_r+0x10>
 8013234:	6983      	ldr	r3, [r0, #24]
 8013236:	b90b      	cbnz	r3, 801323c <_puts_r+0x10>
 8013238:	f000 fa58 	bl	80136ec <__sinit>
 801323c:	69ab      	ldr	r3, [r5, #24]
 801323e:	68ac      	ldr	r4, [r5, #8]
 8013240:	b913      	cbnz	r3, 8013248 <_puts_r+0x1c>
 8013242:	4628      	mov	r0, r5
 8013244:	f000 fa52 	bl	80136ec <__sinit>
 8013248:	4b2c      	ldr	r3, [pc, #176]	; (80132fc <_puts_r+0xd0>)
 801324a:	429c      	cmp	r4, r3
 801324c:	d120      	bne.n	8013290 <_puts_r+0x64>
 801324e:	686c      	ldr	r4, [r5, #4]
 8013250:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013252:	07db      	lsls	r3, r3, #31
 8013254:	d405      	bmi.n	8013262 <_puts_r+0x36>
 8013256:	89a3      	ldrh	r3, [r4, #12]
 8013258:	0598      	lsls	r0, r3, #22
 801325a:	d402      	bmi.n	8013262 <_puts_r+0x36>
 801325c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801325e:	f000 fae3 	bl	8013828 <__retarget_lock_acquire_recursive>
 8013262:	89a3      	ldrh	r3, [r4, #12]
 8013264:	0719      	lsls	r1, r3, #28
 8013266:	d51d      	bpl.n	80132a4 <_puts_r+0x78>
 8013268:	6923      	ldr	r3, [r4, #16]
 801326a:	b1db      	cbz	r3, 80132a4 <_puts_r+0x78>
 801326c:	3e01      	subs	r6, #1
 801326e:	68a3      	ldr	r3, [r4, #8]
 8013270:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8013274:	3b01      	subs	r3, #1
 8013276:	60a3      	str	r3, [r4, #8]
 8013278:	bb39      	cbnz	r1, 80132ca <_puts_r+0x9e>
 801327a:	2b00      	cmp	r3, #0
 801327c:	da38      	bge.n	80132f0 <_puts_r+0xc4>
 801327e:	4622      	mov	r2, r4
 8013280:	210a      	movs	r1, #10
 8013282:	4628      	mov	r0, r5
 8013284:	f000 f858 	bl	8013338 <__swbuf_r>
 8013288:	3001      	adds	r0, #1
 801328a:	d011      	beq.n	80132b0 <_puts_r+0x84>
 801328c:	250a      	movs	r5, #10
 801328e:	e011      	b.n	80132b4 <_puts_r+0x88>
 8013290:	4b1b      	ldr	r3, [pc, #108]	; (8013300 <_puts_r+0xd4>)
 8013292:	429c      	cmp	r4, r3
 8013294:	d101      	bne.n	801329a <_puts_r+0x6e>
 8013296:	68ac      	ldr	r4, [r5, #8]
 8013298:	e7da      	b.n	8013250 <_puts_r+0x24>
 801329a:	4b1a      	ldr	r3, [pc, #104]	; (8013304 <_puts_r+0xd8>)
 801329c:	429c      	cmp	r4, r3
 801329e:	bf08      	it	eq
 80132a0:	68ec      	ldreq	r4, [r5, #12]
 80132a2:	e7d5      	b.n	8013250 <_puts_r+0x24>
 80132a4:	4621      	mov	r1, r4
 80132a6:	4628      	mov	r0, r5
 80132a8:	f000 f898 	bl	80133dc <__swsetup_r>
 80132ac:	2800      	cmp	r0, #0
 80132ae:	d0dd      	beq.n	801326c <_puts_r+0x40>
 80132b0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80132b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80132b6:	07da      	lsls	r2, r3, #31
 80132b8:	d405      	bmi.n	80132c6 <_puts_r+0x9a>
 80132ba:	89a3      	ldrh	r3, [r4, #12]
 80132bc:	059b      	lsls	r3, r3, #22
 80132be:	d402      	bmi.n	80132c6 <_puts_r+0x9a>
 80132c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80132c2:	f000 fab2 	bl	801382a <__retarget_lock_release_recursive>
 80132c6:	4628      	mov	r0, r5
 80132c8:	bd70      	pop	{r4, r5, r6, pc}
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	da04      	bge.n	80132d8 <_puts_r+0xac>
 80132ce:	69a2      	ldr	r2, [r4, #24]
 80132d0:	429a      	cmp	r2, r3
 80132d2:	dc06      	bgt.n	80132e2 <_puts_r+0xb6>
 80132d4:	290a      	cmp	r1, #10
 80132d6:	d004      	beq.n	80132e2 <_puts_r+0xb6>
 80132d8:	6823      	ldr	r3, [r4, #0]
 80132da:	1c5a      	adds	r2, r3, #1
 80132dc:	6022      	str	r2, [r4, #0]
 80132de:	7019      	strb	r1, [r3, #0]
 80132e0:	e7c5      	b.n	801326e <_puts_r+0x42>
 80132e2:	4622      	mov	r2, r4
 80132e4:	4628      	mov	r0, r5
 80132e6:	f000 f827 	bl	8013338 <__swbuf_r>
 80132ea:	3001      	adds	r0, #1
 80132ec:	d1bf      	bne.n	801326e <_puts_r+0x42>
 80132ee:	e7df      	b.n	80132b0 <_puts_r+0x84>
 80132f0:	6823      	ldr	r3, [r4, #0]
 80132f2:	250a      	movs	r5, #10
 80132f4:	1c5a      	adds	r2, r3, #1
 80132f6:	6022      	str	r2, [r4, #0]
 80132f8:	701d      	strb	r5, [r3, #0]
 80132fa:	e7db      	b.n	80132b4 <_puts_r+0x88>
 80132fc:	08014398 	.word	0x08014398
 8013300:	080143b8 	.word	0x080143b8
 8013304:	08014378 	.word	0x08014378

08013308 <puts>:
 8013308:	4b02      	ldr	r3, [pc, #8]	; (8013314 <puts+0xc>)
 801330a:	4601      	mov	r1, r0
 801330c:	6818      	ldr	r0, [r3, #0]
 801330e:	f7ff bf8d 	b.w	801322c <_puts_r>
 8013312:	bf00      	nop
 8013314:	24000014 	.word	0x24000014

08013318 <_sbrk_r>:
 8013318:	b538      	push	{r3, r4, r5, lr}
 801331a:	4d06      	ldr	r5, [pc, #24]	; (8013334 <_sbrk_r+0x1c>)
 801331c:	2300      	movs	r3, #0
 801331e:	4604      	mov	r4, r0
 8013320:	4608      	mov	r0, r1
 8013322:	602b      	str	r3, [r5, #0]
 8013324:	f7ef fa2e 	bl	8002784 <_sbrk>
 8013328:	1c43      	adds	r3, r0, #1
 801332a:	d102      	bne.n	8013332 <_sbrk_r+0x1a>
 801332c:	682b      	ldr	r3, [r5, #0]
 801332e:	b103      	cbz	r3, 8013332 <_sbrk_r+0x1a>
 8013330:	6023      	str	r3, [r4, #0]
 8013332:	bd38      	pop	{r3, r4, r5, pc}
 8013334:	24004f98 	.word	0x24004f98

08013338 <__swbuf_r>:
 8013338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801333a:	460e      	mov	r6, r1
 801333c:	4614      	mov	r4, r2
 801333e:	4605      	mov	r5, r0
 8013340:	b118      	cbz	r0, 801334a <__swbuf_r+0x12>
 8013342:	6983      	ldr	r3, [r0, #24]
 8013344:	b90b      	cbnz	r3, 801334a <__swbuf_r+0x12>
 8013346:	f000 f9d1 	bl	80136ec <__sinit>
 801334a:	4b21      	ldr	r3, [pc, #132]	; (80133d0 <__swbuf_r+0x98>)
 801334c:	429c      	cmp	r4, r3
 801334e:	d12b      	bne.n	80133a8 <__swbuf_r+0x70>
 8013350:	686c      	ldr	r4, [r5, #4]
 8013352:	69a3      	ldr	r3, [r4, #24]
 8013354:	60a3      	str	r3, [r4, #8]
 8013356:	89a3      	ldrh	r3, [r4, #12]
 8013358:	071a      	lsls	r2, r3, #28
 801335a:	d52f      	bpl.n	80133bc <__swbuf_r+0x84>
 801335c:	6923      	ldr	r3, [r4, #16]
 801335e:	b36b      	cbz	r3, 80133bc <__swbuf_r+0x84>
 8013360:	6923      	ldr	r3, [r4, #16]
 8013362:	6820      	ldr	r0, [r4, #0]
 8013364:	1ac0      	subs	r0, r0, r3
 8013366:	6963      	ldr	r3, [r4, #20]
 8013368:	b2f6      	uxtb	r6, r6
 801336a:	4283      	cmp	r3, r0
 801336c:	4637      	mov	r7, r6
 801336e:	dc04      	bgt.n	801337a <__swbuf_r+0x42>
 8013370:	4621      	mov	r1, r4
 8013372:	4628      	mov	r0, r5
 8013374:	f000 f926 	bl	80135c4 <_fflush_r>
 8013378:	bb30      	cbnz	r0, 80133c8 <__swbuf_r+0x90>
 801337a:	68a3      	ldr	r3, [r4, #8]
 801337c:	3b01      	subs	r3, #1
 801337e:	60a3      	str	r3, [r4, #8]
 8013380:	6823      	ldr	r3, [r4, #0]
 8013382:	1c5a      	adds	r2, r3, #1
 8013384:	6022      	str	r2, [r4, #0]
 8013386:	701e      	strb	r6, [r3, #0]
 8013388:	6963      	ldr	r3, [r4, #20]
 801338a:	3001      	adds	r0, #1
 801338c:	4283      	cmp	r3, r0
 801338e:	d004      	beq.n	801339a <__swbuf_r+0x62>
 8013390:	89a3      	ldrh	r3, [r4, #12]
 8013392:	07db      	lsls	r3, r3, #31
 8013394:	d506      	bpl.n	80133a4 <__swbuf_r+0x6c>
 8013396:	2e0a      	cmp	r6, #10
 8013398:	d104      	bne.n	80133a4 <__swbuf_r+0x6c>
 801339a:	4621      	mov	r1, r4
 801339c:	4628      	mov	r0, r5
 801339e:	f000 f911 	bl	80135c4 <_fflush_r>
 80133a2:	b988      	cbnz	r0, 80133c8 <__swbuf_r+0x90>
 80133a4:	4638      	mov	r0, r7
 80133a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80133a8:	4b0a      	ldr	r3, [pc, #40]	; (80133d4 <__swbuf_r+0x9c>)
 80133aa:	429c      	cmp	r4, r3
 80133ac:	d101      	bne.n	80133b2 <__swbuf_r+0x7a>
 80133ae:	68ac      	ldr	r4, [r5, #8]
 80133b0:	e7cf      	b.n	8013352 <__swbuf_r+0x1a>
 80133b2:	4b09      	ldr	r3, [pc, #36]	; (80133d8 <__swbuf_r+0xa0>)
 80133b4:	429c      	cmp	r4, r3
 80133b6:	bf08      	it	eq
 80133b8:	68ec      	ldreq	r4, [r5, #12]
 80133ba:	e7ca      	b.n	8013352 <__swbuf_r+0x1a>
 80133bc:	4621      	mov	r1, r4
 80133be:	4628      	mov	r0, r5
 80133c0:	f000 f80c 	bl	80133dc <__swsetup_r>
 80133c4:	2800      	cmp	r0, #0
 80133c6:	d0cb      	beq.n	8013360 <__swbuf_r+0x28>
 80133c8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80133cc:	e7ea      	b.n	80133a4 <__swbuf_r+0x6c>
 80133ce:	bf00      	nop
 80133d0:	08014398 	.word	0x08014398
 80133d4:	080143b8 	.word	0x080143b8
 80133d8:	08014378 	.word	0x08014378

080133dc <__swsetup_r>:
 80133dc:	4b32      	ldr	r3, [pc, #200]	; (80134a8 <__swsetup_r+0xcc>)
 80133de:	b570      	push	{r4, r5, r6, lr}
 80133e0:	681d      	ldr	r5, [r3, #0]
 80133e2:	4606      	mov	r6, r0
 80133e4:	460c      	mov	r4, r1
 80133e6:	b125      	cbz	r5, 80133f2 <__swsetup_r+0x16>
 80133e8:	69ab      	ldr	r3, [r5, #24]
 80133ea:	b913      	cbnz	r3, 80133f2 <__swsetup_r+0x16>
 80133ec:	4628      	mov	r0, r5
 80133ee:	f000 f97d 	bl	80136ec <__sinit>
 80133f2:	4b2e      	ldr	r3, [pc, #184]	; (80134ac <__swsetup_r+0xd0>)
 80133f4:	429c      	cmp	r4, r3
 80133f6:	d10f      	bne.n	8013418 <__swsetup_r+0x3c>
 80133f8:	686c      	ldr	r4, [r5, #4]
 80133fa:	89a3      	ldrh	r3, [r4, #12]
 80133fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013400:	0719      	lsls	r1, r3, #28
 8013402:	d42c      	bmi.n	801345e <__swsetup_r+0x82>
 8013404:	06dd      	lsls	r5, r3, #27
 8013406:	d411      	bmi.n	801342c <__swsetup_r+0x50>
 8013408:	2309      	movs	r3, #9
 801340a:	6033      	str	r3, [r6, #0]
 801340c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013410:	81a3      	strh	r3, [r4, #12]
 8013412:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013416:	e03e      	b.n	8013496 <__swsetup_r+0xba>
 8013418:	4b25      	ldr	r3, [pc, #148]	; (80134b0 <__swsetup_r+0xd4>)
 801341a:	429c      	cmp	r4, r3
 801341c:	d101      	bne.n	8013422 <__swsetup_r+0x46>
 801341e:	68ac      	ldr	r4, [r5, #8]
 8013420:	e7eb      	b.n	80133fa <__swsetup_r+0x1e>
 8013422:	4b24      	ldr	r3, [pc, #144]	; (80134b4 <__swsetup_r+0xd8>)
 8013424:	429c      	cmp	r4, r3
 8013426:	bf08      	it	eq
 8013428:	68ec      	ldreq	r4, [r5, #12]
 801342a:	e7e6      	b.n	80133fa <__swsetup_r+0x1e>
 801342c:	0758      	lsls	r0, r3, #29
 801342e:	d512      	bpl.n	8013456 <__swsetup_r+0x7a>
 8013430:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013432:	b141      	cbz	r1, 8013446 <__swsetup_r+0x6a>
 8013434:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013438:	4299      	cmp	r1, r3
 801343a:	d002      	beq.n	8013442 <__swsetup_r+0x66>
 801343c:	4630      	mov	r0, r6
 801343e:	f7ff fdfd 	bl	801303c <_free_r>
 8013442:	2300      	movs	r3, #0
 8013444:	6363      	str	r3, [r4, #52]	; 0x34
 8013446:	89a3      	ldrh	r3, [r4, #12]
 8013448:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801344c:	81a3      	strh	r3, [r4, #12]
 801344e:	2300      	movs	r3, #0
 8013450:	6063      	str	r3, [r4, #4]
 8013452:	6923      	ldr	r3, [r4, #16]
 8013454:	6023      	str	r3, [r4, #0]
 8013456:	89a3      	ldrh	r3, [r4, #12]
 8013458:	f043 0308 	orr.w	r3, r3, #8
 801345c:	81a3      	strh	r3, [r4, #12]
 801345e:	6923      	ldr	r3, [r4, #16]
 8013460:	b94b      	cbnz	r3, 8013476 <__swsetup_r+0x9a>
 8013462:	89a3      	ldrh	r3, [r4, #12]
 8013464:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013468:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801346c:	d003      	beq.n	8013476 <__swsetup_r+0x9a>
 801346e:	4621      	mov	r1, r4
 8013470:	4630      	mov	r0, r6
 8013472:	f000 fa01 	bl	8013878 <__smakebuf_r>
 8013476:	89a0      	ldrh	r0, [r4, #12]
 8013478:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801347c:	f010 0301 	ands.w	r3, r0, #1
 8013480:	d00a      	beq.n	8013498 <__swsetup_r+0xbc>
 8013482:	2300      	movs	r3, #0
 8013484:	60a3      	str	r3, [r4, #8]
 8013486:	6963      	ldr	r3, [r4, #20]
 8013488:	425b      	negs	r3, r3
 801348a:	61a3      	str	r3, [r4, #24]
 801348c:	6923      	ldr	r3, [r4, #16]
 801348e:	b943      	cbnz	r3, 80134a2 <__swsetup_r+0xc6>
 8013490:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013494:	d1ba      	bne.n	801340c <__swsetup_r+0x30>
 8013496:	bd70      	pop	{r4, r5, r6, pc}
 8013498:	0781      	lsls	r1, r0, #30
 801349a:	bf58      	it	pl
 801349c:	6963      	ldrpl	r3, [r4, #20]
 801349e:	60a3      	str	r3, [r4, #8]
 80134a0:	e7f4      	b.n	801348c <__swsetup_r+0xb0>
 80134a2:	2000      	movs	r0, #0
 80134a4:	e7f7      	b.n	8013496 <__swsetup_r+0xba>
 80134a6:	bf00      	nop
 80134a8:	24000014 	.word	0x24000014
 80134ac:	08014398 	.word	0x08014398
 80134b0:	080143b8 	.word	0x080143b8
 80134b4:	08014378 	.word	0x08014378

080134b8 <__sflush_r>:
 80134b8:	898a      	ldrh	r2, [r1, #12]
 80134ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80134be:	4605      	mov	r5, r0
 80134c0:	0710      	lsls	r0, r2, #28
 80134c2:	460c      	mov	r4, r1
 80134c4:	d458      	bmi.n	8013578 <__sflush_r+0xc0>
 80134c6:	684b      	ldr	r3, [r1, #4]
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	dc05      	bgt.n	80134d8 <__sflush_r+0x20>
 80134cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80134ce:	2b00      	cmp	r3, #0
 80134d0:	dc02      	bgt.n	80134d8 <__sflush_r+0x20>
 80134d2:	2000      	movs	r0, #0
 80134d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80134d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80134da:	2e00      	cmp	r6, #0
 80134dc:	d0f9      	beq.n	80134d2 <__sflush_r+0x1a>
 80134de:	2300      	movs	r3, #0
 80134e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80134e4:	682f      	ldr	r7, [r5, #0]
 80134e6:	602b      	str	r3, [r5, #0]
 80134e8:	d032      	beq.n	8013550 <__sflush_r+0x98>
 80134ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80134ec:	89a3      	ldrh	r3, [r4, #12]
 80134ee:	075a      	lsls	r2, r3, #29
 80134f0:	d505      	bpl.n	80134fe <__sflush_r+0x46>
 80134f2:	6863      	ldr	r3, [r4, #4]
 80134f4:	1ac0      	subs	r0, r0, r3
 80134f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80134f8:	b10b      	cbz	r3, 80134fe <__sflush_r+0x46>
 80134fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80134fc:	1ac0      	subs	r0, r0, r3
 80134fe:	2300      	movs	r3, #0
 8013500:	4602      	mov	r2, r0
 8013502:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013504:	6a21      	ldr	r1, [r4, #32]
 8013506:	4628      	mov	r0, r5
 8013508:	47b0      	blx	r6
 801350a:	1c43      	adds	r3, r0, #1
 801350c:	89a3      	ldrh	r3, [r4, #12]
 801350e:	d106      	bne.n	801351e <__sflush_r+0x66>
 8013510:	6829      	ldr	r1, [r5, #0]
 8013512:	291d      	cmp	r1, #29
 8013514:	d82c      	bhi.n	8013570 <__sflush_r+0xb8>
 8013516:	4a2a      	ldr	r2, [pc, #168]	; (80135c0 <__sflush_r+0x108>)
 8013518:	40ca      	lsrs	r2, r1
 801351a:	07d6      	lsls	r6, r2, #31
 801351c:	d528      	bpl.n	8013570 <__sflush_r+0xb8>
 801351e:	2200      	movs	r2, #0
 8013520:	6062      	str	r2, [r4, #4]
 8013522:	04d9      	lsls	r1, r3, #19
 8013524:	6922      	ldr	r2, [r4, #16]
 8013526:	6022      	str	r2, [r4, #0]
 8013528:	d504      	bpl.n	8013534 <__sflush_r+0x7c>
 801352a:	1c42      	adds	r2, r0, #1
 801352c:	d101      	bne.n	8013532 <__sflush_r+0x7a>
 801352e:	682b      	ldr	r3, [r5, #0]
 8013530:	b903      	cbnz	r3, 8013534 <__sflush_r+0x7c>
 8013532:	6560      	str	r0, [r4, #84]	; 0x54
 8013534:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013536:	602f      	str	r7, [r5, #0]
 8013538:	2900      	cmp	r1, #0
 801353a:	d0ca      	beq.n	80134d2 <__sflush_r+0x1a>
 801353c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013540:	4299      	cmp	r1, r3
 8013542:	d002      	beq.n	801354a <__sflush_r+0x92>
 8013544:	4628      	mov	r0, r5
 8013546:	f7ff fd79 	bl	801303c <_free_r>
 801354a:	2000      	movs	r0, #0
 801354c:	6360      	str	r0, [r4, #52]	; 0x34
 801354e:	e7c1      	b.n	80134d4 <__sflush_r+0x1c>
 8013550:	6a21      	ldr	r1, [r4, #32]
 8013552:	2301      	movs	r3, #1
 8013554:	4628      	mov	r0, r5
 8013556:	47b0      	blx	r6
 8013558:	1c41      	adds	r1, r0, #1
 801355a:	d1c7      	bne.n	80134ec <__sflush_r+0x34>
 801355c:	682b      	ldr	r3, [r5, #0]
 801355e:	2b00      	cmp	r3, #0
 8013560:	d0c4      	beq.n	80134ec <__sflush_r+0x34>
 8013562:	2b1d      	cmp	r3, #29
 8013564:	d001      	beq.n	801356a <__sflush_r+0xb2>
 8013566:	2b16      	cmp	r3, #22
 8013568:	d101      	bne.n	801356e <__sflush_r+0xb6>
 801356a:	602f      	str	r7, [r5, #0]
 801356c:	e7b1      	b.n	80134d2 <__sflush_r+0x1a>
 801356e:	89a3      	ldrh	r3, [r4, #12]
 8013570:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013574:	81a3      	strh	r3, [r4, #12]
 8013576:	e7ad      	b.n	80134d4 <__sflush_r+0x1c>
 8013578:	690f      	ldr	r7, [r1, #16]
 801357a:	2f00      	cmp	r7, #0
 801357c:	d0a9      	beq.n	80134d2 <__sflush_r+0x1a>
 801357e:	0793      	lsls	r3, r2, #30
 8013580:	680e      	ldr	r6, [r1, #0]
 8013582:	bf08      	it	eq
 8013584:	694b      	ldreq	r3, [r1, #20]
 8013586:	600f      	str	r7, [r1, #0]
 8013588:	bf18      	it	ne
 801358a:	2300      	movne	r3, #0
 801358c:	eba6 0807 	sub.w	r8, r6, r7
 8013590:	608b      	str	r3, [r1, #8]
 8013592:	f1b8 0f00 	cmp.w	r8, #0
 8013596:	dd9c      	ble.n	80134d2 <__sflush_r+0x1a>
 8013598:	6a21      	ldr	r1, [r4, #32]
 801359a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801359c:	4643      	mov	r3, r8
 801359e:	463a      	mov	r2, r7
 80135a0:	4628      	mov	r0, r5
 80135a2:	47b0      	blx	r6
 80135a4:	2800      	cmp	r0, #0
 80135a6:	dc06      	bgt.n	80135b6 <__sflush_r+0xfe>
 80135a8:	89a3      	ldrh	r3, [r4, #12]
 80135aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80135ae:	81a3      	strh	r3, [r4, #12]
 80135b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80135b4:	e78e      	b.n	80134d4 <__sflush_r+0x1c>
 80135b6:	4407      	add	r7, r0
 80135b8:	eba8 0800 	sub.w	r8, r8, r0
 80135bc:	e7e9      	b.n	8013592 <__sflush_r+0xda>
 80135be:	bf00      	nop
 80135c0:	20400001 	.word	0x20400001

080135c4 <_fflush_r>:
 80135c4:	b538      	push	{r3, r4, r5, lr}
 80135c6:	690b      	ldr	r3, [r1, #16]
 80135c8:	4605      	mov	r5, r0
 80135ca:	460c      	mov	r4, r1
 80135cc:	b913      	cbnz	r3, 80135d4 <_fflush_r+0x10>
 80135ce:	2500      	movs	r5, #0
 80135d0:	4628      	mov	r0, r5
 80135d2:	bd38      	pop	{r3, r4, r5, pc}
 80135d4:	b118      	cbz	r0, 80135de <_fflush_r+0x1a>
 80135d6:	6983      	ldr	r3, [r0, #24]
 80135d8:	b90b      	cbnz	r3, 80135de <_fflush_r+0x1a>
 80135da:	f000 f887 	bl	80136ec <__sinit>
 80135de:	4b14      	ldr	r3, [pc, #80]	; (8013630 <_fflush_r+0x6c>)
 80135e0:	429c      	cmp	r4, r3
 80135e2:	d11b      	bne.n	801361c <_fflush_r+0x58>
 80135e4:	686c      	ldr	r4, [r5, #4]
 80135e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	d0ef      	beq.n	80135ce <_fflush_r+0xa>
 80135ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80135f0:	07d0      	lsls	r0, r2, #31
 80135f2:	d404      	bmi.n	80135fe <_fflush_r+0x3a>
 80135f4:	0599      	lsls	r1, r3, #22
 80135f6:	d402      	bmi.n	80135fe <_fflush_r+0x3a>
 80135f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80135fa:	f000 f915 	bl	8013828 <__retarget_lock_acquire_recursive>
 80135fe:	4628      	mov	r0, r5
 8013600:	4621      	mov	r1, r4
 8013602:	f7ff ff59 	bl	80134b8 <__sflush_r>
 8013606:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013608:	07da      	lsls	r2, r3, #31
 801360a:	4605      	mov	r5, r0
 801360c:	d4e0      	bmi.n	80135d0 <_fflush_r+0xc>
 801360e:	89a3      	ldrh	r3, [r4, #12]
 8013610:	059b      	lsls	r3, r3, #22
 8013612:	d4dd      	bmi.n	80135d0 <_fflush_r+0xc>
 8013614:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013616:	f000 f908 	bl	801382a <__retarget_lock_release_recursive>
 801361a:	e7d9      	b.n	80135d0 <_fflush_r+0xc>
 801361c:	4b05      	ldr	r3, [pc, #20]	; (8013634 <_fflush_r+0x70>)
 801361e:	429c      	cmp	r4, r3
 8013620:	d101      	bne.n	8013626 <_fflush_r+0x62>
 8013622:	68ac      	ldr	r4, [r5, #8]
 8013624:	e7df      	b.n	80135e6 <_fflush_r+0x22>
 8013626:	4b04      	ldr	r3, [pc, #16]	; (8013638 <_fflush_r+0x74>)
 8013628:	429c      	cmp	r4, r3
 801362a:	bf08      	it	eq
 801362c:	68ec      	ldreq	r4, [r5, #12]
 801362e:	e7da      	b.n	80135e6 <_fflush_r+0x22>
 8013630:	08014398 	.word	0x08014398
 8013634:	080143b8 	.word	0x080143b8
 8013638:	08014378 	.word	0x08014378

0801363c <std>:
 801363c:	2300      	movs	r3, #0
 801363e:	b510      	push	{r4, lr}
 8013640:	4604      	mov	r4, r0
 8013642:	e9c0 3300 	strd	r3, r3, [r0]
 8013646:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801364a:	6083      	str	r3, [r0, #8]
 801364c:	8181      	strh	r1, [r0, #12]
 801364e:	6643      	str	r3, [r0, #100]	; 0x64
 8013650:	81c2      	strh	r2, [r0, #14]
 8013652:	6183      	str	r3, [r0, #24]
 8013654:	4619      	mov	r1, r3
 8013656:	2208      	movs	r2, #8
 8013658:	305c      	adds	r0, #92	; 0x5c
 801365a:	f7ff fce7 	bl	801302c <memset>
 801365e:	4b05      	ldr	r3, [pc, #20]	; (8013674 <std+0x38>)
 8013660:	6263      	str	r3, [r4, #36]	; 0x24
 8013662:	4b05      	ldr	r3, [pc, #20]	; (8013678 <std+0x3c>)
 8013664:	62a3      	str	r3, [r4, #40]	; 0x28
 8013666:	4b05      	ldr	r3, [pc, #20]	; (801367c <std+0x40>)
 8013668:	62e3      	str	r3, [r4, #44]	; 0x2c
 801366a:	4b05      	ldr	r3, [pc, #20]	; (8013680 <std+0x44>)
 801366c:	6224      	str	r4, [r4, #32]
 801366e:	6323      	str	r3, [r4, #48]	; 0x30
 8013670:	bd10      	pop	{r4, pc}
 8013672:	bf00      	nop
 8013674:	08013eed 	.word	0x08013eed
 8013678:	08013f0f 	.word	0x08013f0f
 801367c:	08013f47 	.word	0x08013f47
 8013680:	08013f6b 	.word	0x08013f6b

08013684 <_cleanup_r>:
 8013684:	4901      	ldr	r1, [pc, #4]	; (801368c <_cleanup_r+0x8>)
 8013686:	f000 b8af 	b.w	80137e8 <_fwalk_reent>
 801368a:	bf00      	nop
 801368c:	080135c5 	.word	0x080135c5

08013690 <__sfmoreglue>:
 8013690:	b570      	push	{r4, r5, r6, lr}
 8013692:	2268      	movs	r2, #104	; 0x68
 8013694:	1e4d      	subs	r5, r1, #1
 8013696:	4355      	muls	r5, r2
 8013698:	460e      	mov	r6, r1
 801369a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801369e:	f7ff fd39 	bl	8013114 <_malloc_r>
 80136a2:	4604      	mov	r4, r0
 80136a4:	b140      	cbz	r0, 80136b8 <__sfmoreglue+0x28>
 80136a6:	2100      	movs	r1, #0
 80136a8:	e9c0 1600 	strd	r1, r6, [r0]
 80136ac:	300c      	adds	r0, #12
 80136ae:	60a0      	str	r0, [r4, #8]
 80136b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80136b4:	f7ff fcba 	bl	801302c <memset>
 80136b8:	4620      	mov	r0, r4
 80136ba:	bd70      	pop	{r4, r5, r6, pc}

080136bc <__sfp_lock_acquire>:
 80136bc:	4801      	ldr	r0, [pc, #4]	; (80136c4 <__sfp_lock_acquire+0x8>)
 80136be:	f000 b8b3 	b.w	8013828 <__retarget_lock_acquire_recursive>
 80136c2:	bf00      	nop
 80136c4:	24004f95 	.word	0x24004f95

080136c8 <__sfp_lock_release>:
 80136c8:	4801      	ldr	r0, [pc, #4]	; (80136d0 <__sfp_lock_release+0x8>)
 80136ca:	f000 b8ae 	b.w	801382a <__retarget_lock_release_recursive>
 80136ce:	bf00      	nop
 80136d0:	24004f95 	.word	0x24004f95

080136d4 <__sinit_lock_acquire>:
 80136d4:	4801      	ldr	r0, [pc, #4]	; (80136dc <__sinit_lock_acquire+0x8>)
 80136d6:	f000 b8a7 	b.w	8013828 <__retarget_lock_acquire_recursive>
 80136da:	bf00      	nop
 80136dc:	24004f96 	.word	0x24004f96

080136e0 <__sinit_lock_release>:
 80136e0:	4801      	ldr	r0, [pc, #4]	; (80136e8 <__sinit_lock_release+0x8>)
 80136e2:	f000 b8a2 	b.w	801382a <__retarget_lock_release_recursive>
 80136e6:	bf00      	nop
 80136e8:	24004f96 	.word	0x24004f96

080136ec <__sinit>:
 80136ec:	b510      	push	{r4, lr}
 80136ee:	4604      	mov	r4, r0
 80136f0:	f7ff fff0 	bl	80136d4 <__sinit_lock_acquire>
 80136f4:	69a3      	ldr	r3, [r4, #24]
 80136f6:	b11b      	cbz	r3, 8013700 <__sinit+0x14>
 80136f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80136fc:	f7ff bff0 	b.w	80136e0 <__sinit_lock_release>
 8013700:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013704:	6523      	str	r3, [r4, #80]	; 0x50
 8013706:	4b13      	ldr	r3, [pc, #76]	; (8013754 <__sinit+0x68>)
 8013708:	4a13      	ldr	r2, [pc, #76]	; (8013758 <__sinit+0x6c>)
 801370a:	681b      	ldr	r3, [r3, #0]
 801370c:	62a2      	str	r2, [r4, #40]	; 0x28
 801370e:	42a3      	cmp	r3, r4
 8013710:	bf04      	itt	eq
 8013712:	2301      	moveq	r3, #1
 8013714:	61a3      	streq	r3, [r4, #24]
 8013716:	4620      	mov	r0, r4
 8013718:	f000 f820 	bl	801375c <__sfp>
 801371c:	6060      	str	r0, [r4, #4]
 801371e:	4620      	mov	r0, r4
 8013720:	f000 f81c 	bl	801375c <__sfp>
 8013724:	60a0      	str	r0, [r4, #8]
 8013726:	4620      	mov	r0, r4
 8013728:	f000 f818 	bl	801375c <__sfp>
 801372c:	2200      	movs	r2, #0
 801372e:	60e0      	str	r0, [r4, #12]
 8013730:	2104      	movs	r1, #4
 8013732:	6860      	ldr	r0, [r4, #4]
 8013734:	f7ff ff82 	bl	801363c <std>
 8013738:	68a0      	ldr	r0, [r4, #8]
 801373a:	2201      	movs	r2, #1
 801373c:	2109      	movs	r1, #9
 801373e:	f7ff ff7d 	bl	801363c <std>
 8013742:	68e0      	ldr	r0, [r4, #12]
 8013744:	2202      	movs	r2, #2
 8013746:	2112      	movs	r1, #18
 8013748:	f7ff ff78 	bl	801363c <std>
 801374c:	2301      	movs	r3, #1
 801374e:	61a3      	str	r3, [r4, #24]
 8013750:	e7d2      	b.n	80136f8 <__sinit+0xc>
 8013752:	bf00      	nop
 8013754:	08014374 	.word	0x08014374
 8013758:	08013685 	.word	0x08013685

0801375c <__sfp>:
 801375c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801375e:	4607      	mov	r7, r0
 8013760:	f7ff ffac 	bl	80136bc <__sfp_lock_acquire>
 8013764:	4b1e      	ldr	r3, [pc, #120]	; (80137e0 <__sfp+0x84>)
 8013766:	681e      	ldr	r6, [r3, #0]
 8013768:	69b3      	ldr	r3, [r6, #24]
 801376a:	b913      	cbnz	r3, 8013772 <__sfp+0x16>
 801376c:	4630      	mov	r0, r6
 801376e:	f7ff ffbd 	bl	80136ec <__sinit>
 8013772:	3648      	adds	r6, #72	; 0x48
 8013774:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013778:	3b01      	subs	r3, #1
 801377a:	d503      	bpl.n	8013784 <__sfp+0x28>
 801377c:	6833      	ldr	r3, [r6, #0]
 801377e:	b30b      	cbz	r3, 80137c4 <__sfp+0x68>
 8013780:	6836      	ldr	r6, [r6, #0]
 8013782:	e7f7      	b.n	8013774 <__sfp+0x18>
 8013784:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013788:	b9d5      	cbnz	r5, 80137c0 <__sfp+0x64>
 801378a:	4b16      	ldr	r3, [pc, #88]	; (80137e4 <__sfp+0x88>)
 801378c:	60e3      	str	r3, [r4, #12]
 801378e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013792:	6665      	str	r5, [r4, #100]	; 0x64
 8013794:	f000 f847 	bl	8013826 <__retarget_lock_init_recursive>
 8013798:	f7ff ff96 	bl	80136c8 <__sfp_lock_release>
 801379c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80137a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80137a4:	6025      	str	r5, [r4, #0]
 80137a6:	61a5      	str	r5, [r4, #24]
 80137a8:	2208      	movs	r2, #8
 80137aa:	4629      	mov	r1, r5
 80137ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80137b0:	f7ff fc3c 	bl	801302c <memset>
 80137b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80137b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80137bc:	4620      	mov	r0, r4
 80137be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80137c0:	3468      	adds	r4, #104	; 0x68
 80137c2:	e7d9      	b.n	8013778 <__sfp+0x1c>
 80137c4:	2104      	movs	r1, #4
 80137c6:	4638      	mov	r0, r7
 80137c8:	f7ff ff62 	bl	8013690 <__sfmoreglue>
 80137cc:	4604      	mov	r4, r0
 80137ce:	6030      	str	r0, [r6, #0]
 80137d0:	2800      	cmp	r0, #0
 80137d2:	d1d5      	bne.n	8013780 <__sfp+0x24>
 80137d4:	f7ff ff78 	bl	80136c8 <__sfp_lock_release>
 80137d8:	230c      	movs	r3, #12
 80137da:	603b      	str	r3, [r7, #0]
 80137dc:	e7ee      	b.n	80137bc <__sfp+0x60>
 80137de:	bf00      	nop
 80137e0:	08014374 	.word	0x08014374
 80137e4:	ffff0001 	.word	0xffff0001

080137e8 <_fwalk_reent>:
 80137e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80137ec:	4606      	mov	r6, r0
 80137ee:	4688      	mov	r8, r1
 80137f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80137f4:	2700      	movs	r7, #0
 80137f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80137fa:	f1b9 0901 	subs.w	r9, r9, #1
 80137fe:	d505      	bpl.n	801380c <_fwalk_reent+0x24>
 8013800:	6824      	ldr	r4, [r4, #0]
 8013802:	2c00      	cmp	r4, #0
 8013804:	d1f7      	bne.n	80137f6 <_fwalk_reent+0xe>
 8013806:	4638      	mov	r0, r7
 8013808:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801380c:	89ab      	ldrh	r3, [r5, #12]
 801380e:	2b01      	cmp	r3, #1
 8013810:	d907      	bls.n	8013822 <_fwalk_reent+0x3a>
 8013812:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013816:	3301      	adds	r3, #1
 8013818:	d003      	beq.n	8013822 <_fwalk_reent+0x3a>
 801381a:	4629      	mov	r1, r5
 801381c:	4630      	mov	r0, r6
 801381e:	47c0      	blx	r8
 8013820:	4307      	orrs	r7, r0
 8013822:	3568      	adds	r5, #104	; 0x68
 8013824:	e7e9      	b.n	80137fa <_fwalk_reent+0x12>

08013826 <__retarget_lock_init_recursive>:
 8013826:	4770      	bx	lr

08013828 <__retarget_lock_acquire_recursive>:
 8013828:	4770      	bx	lr

0801382a <__retarget_lock_release_recursive>:
 801382a:	4770      	bx	lr

0801382c <__swhatbuf_r>:
 801382c:	b570      	push	{r4, r5, r6, lr}
 801382e:	460e      	mov	r6, r1
 8013830:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013834:	2900      	cmp	r1, #0
 8013836:	b096      	sub	sp, #88	; 0x58
 8013838:	4614      	mov	r4, r2
 801383a:	461d      	mov	r5, r3
 801383c:	da08      	bge.n	8013850 <__swhatbuf_r+0x24>
 801383e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8013842:	2200      	movs	r2, #0
 8013844:	602a      	str	r2, [r5, #0]
 8013846:	061a      	lsls	r2, r3, #24
 8013848:	d410      	bmi.n	801386c <__swhatbuf_r+0x40>
 801384a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801384e:	e00e      	b.n	801386e <__swhatbuf_r+0x42>
 8013850:	466a      	mov	r2, sp
 8013852:	f000 fbb1 	bl	8013fb8 <_fstat_r>
 8013856:	2800      	cmp	r0, #0
 8013858:	dbf1      	blt.n	801383e <__swhatbuf_r+0x12>
 801385a:	9a01      	ldr	r2, [sp, #4]
 801385c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013860:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013864:	425a      	negs	r2, r3
 8013866:	415a      	adcs	r2, r3
 8013868:	602a      	str	r2, [r5, #0]
 801386a:	e7ee      	b.n	801384a <__swhatbuf_r+0x1e>
 801386c:	2340      	movs	r3, #64	; 0x40
 801386e:	2000      	movs	r0, #0
 8013870:	6023      	str	r3, [r4, #0]
 8013872:	b016      	add	sp, #88	; 0x58
 8013874:	bd70      	pop	{r4, r5, r6, pc}
	...

08013878 <__smakebuf_r>:
 8013878:	898b      	ldrh	r3, [r1, #12]
 801387a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801387c:	079d      	lsls	r5, r3, #30
 801387e:	4606      	mov	r6, r0
 8013880:	460c      	mov	r4, r1
 8013882:	d507      	bpl.n	8013894 <__smakebuf_r+0x1c>
 8013884:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013888:	6023      	str	r3, [r4, #0]
 801388a:	6123      	str	r3, [r4, #16]
 801388c:	2301      	movs	r3, #1
 801388e:	6163      	str	r3, [r4, #20]
 8013890:	b002      	add	sp, #8
 8013892:	bd70      	pop	{r4, r5, r6, pc}
 8013894:	ab01      	add	r3, sp, #4
 8013896:	466a      	mov	r2, sp
 8013898:	f7ff ffc8 	bl	801382c <__swhatbuf_r>
 801389c:	9900      	ldr	r1, [sp, #0]
 801389e:	4605      	mov	r5, r0
 80138a0:	4630      	mov	r0, r6
 80138a2:	f7ff fc37 	bl	8013114 <_malloc_r>
 80138a6:	b948      	cbnz	r0, 80138bc <__smakebuf_r+0x44>
 80138a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80138ac:	059a      	lsls	r2, r3, #22
 80138ae:	d4ef      	bmi.n	8013890 <__smakebuf_r+0x18>
 80138b0:	f023 0303 	bic.w	r3, r3, #3
 80138b4:	f043 0302 	orr.w	r3, r3, #2
 80138b8:	81a3      	strh	r3, [r4, #12]
 80138ba:	e7e3      	b.n	8013884 <__smakebuf_r+0xc>
 80138bc:	4b0d      	ldr	r3, [pc, #52]	; (80138f4 <__smakebuf_r+0x7c>)
 80138be:	62b3      	str	r3, [r6, #40]	; 0x28
 80138c0:	89a3      	ldrh	r3, [r4, #12]
 80138c2:	6020      	str	r0, [r4, #0]
 80138c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80138c8:	81a3      	strh	r3, [r4, #12]
 80138ca:	9b00      	ldr	r3, [sp, #0]
 80138cc:	6163      	str	r3, [r4, #20]
 80138ce:	9b01      	ldr	r3, [sp, #4]
 80138d0:	6120      	str	r0, [r4, #16]
 80138d2:	b15b      	cbz	r3, 80138ec <__smakebuf_r+0x74>
 80138d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80138d8:	4630      	mov	r0, r6
 80138da:	f000 fb7f 	bl	8013fdc <_isatty_r>
 80138de:	b128      	cbz	r0, 80138ec <__smakebuf_r+0x74>
 80138e0:	89a3      	ldrh	r3, [r4, #12]
 80138e2:	f023 0303 	bic.w	r3, r3, #3
 80138e6:	f043 0301 	orr.w	r3, r3, #1
 80138ea:	81a3      	strh	r3, [r4, #12]
 80138ec:	89a0      	ldrh	r0, [r4, #12]
 80138ee:	4305      	orrs	r5, r0
 80138f0:	81a5      	strh	r5, [r4, #12]
 80138f2:	e7cd      	b.n	8013890 <__smakebuf_r+0x18>
 80138f4:	08013685 	.word	0x08013685

080138f8 <__malloc_lock>:
 80138f8:	4801      	ldr	r0, [pc, #4]	; (8013900 <__malloc_lock+0x8>)
 80138fa:	f7ff bf95 	b.w	8013828 <__retarget_lock_acquire_recursive>
 80138fe:	bf00      	nop
 8013900:	24004f94 	.word	0x24004f94

08013904 <__malloc_unlock>:
 8013904:	4801      	ldr	r0, [pc, #4]	; (801390c <__malloc_unlock+0x8>)
 8013906:	f7ff bf90 	b.w	801382a <__retarget_lock_release_recursive>
 801390a:	bf00      	nop
 801390c:	24004f94 	.word	0x24004f94

08013910 <__sfputc_r>:
 8013910:	6893      	ldr	r3, [r2, #8]
 8013912:	3b01      	subs	r3, #1
 8013914:	2b00      	cmp	r3, #0
 8013916:	b410      	push	{r4}
 8013918:	6093      	str	r3, [r2, #8]
 801391a:	da08      	bge.n	801392e <__sfputc_r+0x1e>
 801391c:	6994      	ldr	r4, [r2, #24]
 801391e:	42a3      	cmp	r3, r4
 8013920:	db01      	blt.n	8013926 <__sfputc_r+0x16>
 8013922:	290a      	cmp	r1, #10
 8013924:	d103      	bne.n	801392e <__sfputc_r+0x1e>
 8013926:	f85d 4b04 	ldr.w	r4, [sp], #4
 801392a:	f7ff bd05 	b.w	8013338 <__swbuf_r>
 801392e:	6813      	ldr	r3, [r2, #0]
 8013930:	1c58      	adds	r0, r3, #1
 8013932:	6010      	str	r0, [r2, #0]
 8013934:	7019      	strb	r1, [r3, #0]
 8013936:	4608      	mov	r0, r1
 8013938:	f85d 4b04 	ldr.w	r4, [sp], #4
 801393c:	4770      	bx	lr

0801393e <__sfputs_r>:
 801393e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013940:	4606      	mov	r6, r0
 8013942:	460f      	mov	r7, r1
 8013944:	4614      	mov	r4, r2
 8013946:	18d5      	adds	r5, r2, r3
 8013948:	42ac      	cmp	r4, r5
 801394a:	d101      	bne.n	8013950 <__sfputs_r+0x12>
 801394c:	2000      	movs	r0, #0
 801394e:	e007      	b.n	8013960 <__sfputs_r+0x22>
 8013950:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013954:	463a      	mov	r2, r7
 8013956:	4630      	mov	r0, r6
 8013958:	f7ff ffda 	bl	8013910 <__sfputc_r>
 801395c:	1c43      	adds	r3, r0, #1
 801395e:	d1f3      	bne.n	8013948 <__sfputs_r+0xa>
 8013960:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013964 <_vfiprintf_r>:
 8013964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013968:	460d      	mov	r5, r1
 801396a:	b09d      	sub	sp, #116	; 0x74
 801396c:	4614      	mov	r4, r2
 801396e:	4698      	mov	r8, r3
 8013970:	4606      	mov	r6, r0
 8013972:	b118      	cbz	r0, 801397c <_vfiprintf_r+0x18>
 8013974:	6983      	ldr	r3, [r0, #24]
 8013976:	b90b      	cbnz	r3, 801397c <_vfiprintf_r+0x18>
 8013978:	f7ff feb8 	bl	80136ec <__sinit>
 801397c:	4b89      	ldr	r3, [pc, #548]	; (8013ba4 <_vfiprintf_r+0x240>)
 801397e:	429d      	cmp	r5, r3
 8013980:	d11b      	bne.n	80139ba <_vfiprintf_r+0x56>
 8013982:	6875      	ldr	r5, [r6, #4]
 8013984:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013986:	07d9      	lsls	r1, r3, #31
 8013988:	d405      	bmi.n	8013996 <_vfiprintf_r+0x32>
 801398a:	89ab      	ldrh	r3, [r5, #12]
 801398c:	059a      	lsls	r2, r3, #22
 801398e:	d402      	bmi.n	8013996 <_vfiprintf_r+0x32>
 8013990:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013992:	f7ff ff49 	bl	8013828 <__retarget_lock_acquire_recursive>
 8013996:	89ab      	ldrh	r3, [r5, #12]
 8013998:	071b      	lsls	r3, r3, #28
 801399a:	d501      	bpl.n	80139a0 <_vfiprintf_r+0x3c>
 801399c:	692b      	ldr	r3, [r5, #16]
 801399e:	b9eb      	cbnz	r3, 80139dc <_vfiprintf_r+0x78>
 80139a0:	4629      	mov	r1, r5
 80139a2:	4630      	mov	r0, r6
 80139a4:	f7ff fd1a 	bl	80133dc <__swsetup_r>
 80139a8:	b1c0      	cbz	r0, 80139dc <_vfiprintf_r+0x78>
 80139aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80139ac:	07dc      	lsls	r4, r3, #31
 80139ae:	d50e      	bpl.n	80139ce <_vfiprintf_r+0x6a>
 80139b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80139b4:	b01d      	add	sp, #116	; 0x74
 80139b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139ba:	4b7b      	ldr	r3, [pc, #492]	; (8013ba8 <_vfiprintf_r+0x244>)
 80139bc:	429d      	cmp	r5, r3
 80139be:	d101      	bne.n	80139c4 <_vfiprintf_r+0x60>
 80139c0:	68b5      	ldr	r5, [r6, #8]
 80139c2:	e7df      	b.n	8013984 <_vfiprintf_r+0x20>
 80139c4:	4b79      	ldr	r3, [pc, #484]	; (8013bac <_vfiprintf_r+0x248>)
 80139c6:	429d      	cmp	r5, r3
 80139c8:	bf08      	it	eq
 80139ca:	68f5      	ldreq	r5, [r6, #12]
 80139cc:	e7da      	b.n	8013984 <_vfiprintf_r+0x20>
 80139ce:	89ab      	ldrh	r3, [r5, #12]
 80139d0:	0598      	lsls	r0, r3, #22
 80139d2:	d4ed      	bmi.n	80139b0 <_vfiprintf_r+0x4c>
 80139d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80139d6:	f7ff ff28 	bl	801382a <__retarget_lock_release_recursive>
 80139da:	e7e9      	b.n	80139b0 <_vfiprintf_r+0x4c>
 80139dc:	2300      	movs	r3, #0
 80139de:	9309      	str	r3, [sp, #36]	; 0x24
 80139e0:	2320      	movs	r3, #32
 80139e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80139e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80139ea:	2330      	movs	r3, #48	; 0x30
 80139ec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013bb0 <_vfiprintf_r+0x24c>
 80139f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80139f4:	f04f 0901 	mov.w	r9, #1
 80139f8:	4623      	mov	r3, r4
 80139fa:	469a      	mov	sl, r3
 80139fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013a00:	b10a      	cbz	r2, 8013a06 <_vfiprintf_r+0xa2>
 8013a02:	2a25      	cmp	r2, #37	; 0x25
 8013a04:	d1f9      	bne.n	80139fa <_vfiprintf_r+0x96>
 8013a06:	ebba 0b04 	subs.w	fp, sl, r4
 8013a0a:	d00b      	beq.n	8013a24 <_vfiprintf_r+0xc0>
 8013a0c:	465b      	mov	r3, fp
 8013a0e:	4622      	mov	r2, r4
 8013a10:	4629      	mov	r1, r5
 8013a12:	4630      	mov	r0, r6
 8013a14:	f7ff ff93 	bl	801393e <__sfputs_r>
 8013a18:	3001      	adds	r0, #1
 8013a1a:	f000 80aa 	beq.w	8013b72 <_vfiprintf_r+0x20e>
 8013a1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013a20:	445a      	add	r2, fp
 8013a22:	9209      	str	r2, [sp, #36]	; 0x24
 8013a24:	f89a 3000 	ldrb.w	r3, [sl]
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	f000 80a2 	beq.w	8013b72 <_vfiprintf_r+0x20e>
 8013a2e:	2300      	movs	r3, #0
 8013a30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013a34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013a38:	f10a 0a01 	add.w	sl, sl, #1
 8013a3c:	9304      	str	r3, [sp, #16]
 8013a3e:	9307      	str	r3, [sp, #28]
 8013a40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013a44:	931a      	str	r3, [sp, #104]	; 0x68
 8013a46:	4654      	mov	r4, sl
 8013a48:	2205      	movs	r2, #5
 8013a4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013a4e:	4858      	ldr	r0, [pc, #352]	; (8013bb0 <_vfiprintf_r+0x24c>)
 8013a50:	f7ec fc46 	bl	80002e0 <memchr>
 8013a54:	9a04      	ldr	r2, [sp, #16]
 8013a56:	b9d8      	cbnz	r0, 8013a90 <_vfiprintf_r+0x12c>
 8013a58:	06d1      	lsls	r1, r2, #27
 8013a5a:	bf44      	itt	mi
 8013a5c:	2320      	movmi	r3, #32
 8013a5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013a62:	0713      	lsls	r3, r2, #28
 8013a64:	bf44      	itt	mi
 8013a66:	232b      	movmi	r3, #43	; 0x2b
 8013a68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013a6c:	f89a 3000 	ldrb.w	r3, [sl]
 8013a70:	2b2a      	cmp	r3, #42	; 0x2a
 8013a72:	d015      	beq.n	8013aa0 <_vfiprintf_r+0x13c>
 8013a74:	9a07      	ldr	r2, [sp, #28]
 8013a76:	4654      	mov	r4, sl
 8013a78:	2000      	movs	r0, #0
 8013a7a:	f04f 0c0a 	mov.w	ip, #10
 8013a7e:	4621      	mov	r1, r4
 8013a80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013a84:	3b30      	subs	r3, #48	; 0x30
 8013a86:	2b09      	cmp	r3, #9
 8013a88:	d94e      	bls.n	8013b28 <_vfiprintf_r+0x1c4>
 8013a8a:	b1b0      	cbz	r0, 8013aba <_vfiprintf_r+0x156>
 8013a8c:	9207      	str	r2, [sp, #28]
 8013a8e:	e014      	b.n	8013aba <_vfiprintf_r+0x156>
 8013a90:	eba0 0308 	sub.w	r3, r0, r8
 8013a94:	fa09 f303 	lsl.w	r3, r9, r3
 8013a98:	4313      	orrs	r3, r2
 8013a9a:	9304      	str	r3, [sp, #16]
 8013a9c:	46a2      	mov	sl, r4
 8013a9e:	e7d2      	b.n	8013a46 <_vfiprintf_r+0xe2>
 8013aa0:	9b03      	ldr	r3, [sp, #12]
 8013aa2:	1d19      	adds	r1, r3, #4
 8013aa4:	681b      	ldr	r3, [r3, #0]
 8013aa6:	9103      	str	r1, [sp, #12]
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	bfbb      	ittet	lt
 8013aac:	425b      	neglt	r3, r3
 8013aae:	f042 0202 	orrlt.w	r2, r2, #2
 8013ab2:	9307      	strge	r3, [sp, #28]
 8013ab4:	9307      	strlt	r3, [sp, #28]
 8013ab6:	bfb8      	it	lt
 8013ab8:	9204      	strlt	r2, [sp, #16]
 8013aba:	7823      	ldrb	r3, [r4, #0]
 8013abc:	2b2e      	cmp	r3, #46	; 0x2e
 8013abe:	d10c      	bne.n	8013ada <_vfiprintf_r+0x176>
 8013ac0:	7863      	ldrb	r3, [r4, #1]
 8013ac2:	2b2a      	cmp	r3, #42	; 0x2a
 8013ac4:	d135      	bne.n	8013b32 <_vfiprintf_r+0x1ce>
 8013ac6:	9b03      	ldr	r3, [sp, #12]
 8013ac8:	1d1a      	adds	r2, r3, #4
 8013aca:	681b      	ldr	r3, [r3, #0]
 8013acc:	9203      	str	r2, [sp, #12]
 8013ace:	2b00      	cmp	r3, #0
 8013ad0:	bfb8      	it	lt
 8013ad2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8013ad6:	3402      	adds	r4, #2
 8013ad8:	9305      	str	r3, [sp, #20]
 8013ada:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013bc0 <_vfiprintf_r+0x25c>
 8013ade:	7821      	ldrb	r1, [r4, #0]
 8013ae0:	2203      	movs	r2, #3
 8013ae2:	4650      	mov	r0, sl
 8013ae4:	f7ec fbfc 	bl	80002e0 <memchr>
 8013ae8:	b140      	cbz	r0, 8013afc <_vfiprintf_r+0x198>
 8013aea:	2340      	movs	r3, #64	; 0x40
 8013aec:	eba0 000a 	sub.w	r0, r0, sl
 8013af0:	fa03 f000 	lsl.w	r0, r3, r0
 8013af4:	9b04      	ldr	r3, [sp, #16]
 8013af6:	4303      	orrs	r3, r0
 8013af8:	3401      	adds	r4, #1
 8013afa:	9304      	str	r3, [sp, #16]
 8013afc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013b00:	482c      	ldr	r0, [pc, #176]	; (8013bb4 <_vfiprintf_r+0x250>)
 8013b02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013b06:	2206      	movs	r2, #6
 8013b08:	f7ec fbea 	bl	80002e0 <memchr>
 8013b0c:	2800      	cmp	r0, #0
 8013b0e:	d03f      	beq.n	8013b90 <_vfiprintf_r+0x22c>
 8013b10:	4b29      	ldr	r3, [pc, #164]	; (8013bb8 <_vfiprintf_r+0x254>)
 8013b12:	bb1b      	cbnz	r3, 8013b5c <_vfiprintf_r+0x1f8>
 8013b14:	9b03      	ldr	r3, [sp, #12]
 8013b16:	3307      	adds	r3, #7
 8013b18:	f023 0307 	bic.w	r3, r3, #7
 8013b1c:	3308      	adds	r3, #8
 8013b1e:	9303      	str	r3, [sp, #12]
 8013b20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013b22:	443b      	add	r3, r7
 8013b24:	9309      	str	r3, [sp, #36]	; 0x24
 8013b26:	e767      	b.n	80139f8 <_vfiprintf_r+0x94>
 8013b28:	fb0c 3202 	mla	r2, ip, r2, r3
 8013b2c:	460c      	mov	r4, r1
 8013b2e:	2001      	movs	r0, #1
 8013b30:	e7a5      	b.n	8013a7e <_vfiprintf_r+0x11a>
 8013b32:	2300      	movs	r3, #0
 8013b34:	3401      	adds	r4, #1
 8013b36:	9305      	str	r3, [sp, #20]
 8013b38:	4619      	mov	r1, r3
 8013b3a:	f04f 0c0a 	mov.w	ip, #10
 8013b3e:	4620      	mov	r0, r4
 8013b40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013b44:	3a30      	subs	r2, #48	; 0x30
 8013b46:	2a09      	cmp	r2, #9
 8013b48:	d903      	bls.n	8013b52 <_vfiprintf_r+0x1ee>
 8013b4a:	2b00      	cmp	r3, #0
 8013b4c:	d0c5      	beq.n	8013ada <_vfiprintf_r+0x176>
 8013b4e:	9105      	str	r1, [sp, #20]
 8013b50:	e7c3      	b.n	8013ada <_vfiprintf_r+0x176>
 8013b52:	fb0c 2101 	mla	r1, ip, r1, r2
 8013b56:	4604      	mov	r4, r0
 8013b58:	2301      	movs	r3, #1
 8013b5a:	e7f0      	b.n	8013b3e <_vfiprintf_r+0x1da>
 8013b5c:	ab03      	add	r3, sp, #12
 8013b5e:	9300      	str	r3, [sp, #0]
 8013b60:	462a      	mov	r2, r5
 8013b62:	4b16      	ldr	r3, [pc, #88]	; (8013bbc <_vfiprintf_r+0x258>)
 8013b64:	a904      	add	r1, sp, #16
 8013b66:	4630      	mov	r0, r6
 8013b68:	f3af 8000 	nop.w
 8013b6c:	4607      	mov	r7, r0
 8013b6e:	1c78      	adds	r0, r7, #1
 8013b70:	d1d6      	bne.n	8013b20 <_vfiprintf_r+0x1bc>
 8013b72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013b74:	07d9      	lsls	r1, r3, #31
 8013b76:	d405      	bmi.n	8013b84 <_vfiprintf_r+0x220>
 8013b78:	89ab      	ldrh	r3, [r5, #12]
 8013b7a:	059a      	lsls	r2, r3, #22
 8013b7c:	d402      	bmi.n	8013b84 <_vfiprintf_r+0x220>
 8013b7e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013b80:	f7ff fe53 	bl	801382a <__retarget_lock_release_recursive>
 8013b84:	89ab      	ldrh	r3, [r5, #12]
 8013b86:	065b      	lsls	r3, r3, #25
 8013b88:	f53f af12 	bmi.w	80139b0 <_vfiprintf_r+0x4c>
 8013b8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013b8e:	e711      	b.n	80139b4 <_vfiprintf_r+0x50>
 8013b90:	ab03      	add	r3, sp, #12
 8013b92:	9300      	str	r3, [sp, #0]
 8013b94:	462a      	mov	r2, r5
 8013b96:	4b09      	ldr	r3, [pc, #36]	; (8013bbc <_vfiprintf_r+0x258>)
 8013b98:	a904      	add	r1, sp, #16
 8013b9a:	4630      	mov	r0, r6
 8013b9c:	f000 f880 	bl	8013ca0 <_printf_i>
 8013ba0:	e7e4      	b.n	8013b6c <_vfiprintf_r+0x208>
 8013ba2:	bf00      	nop
 8013ba4:	08014398 	.word	0x08014398
 8013ba8:	080143b8 	.word	0x080143b8
 8013bac:	08014378 	.word	0x08014378
 8013bb0:	080143d8 	.word	0x080143d8
 8013bb4:	080143e2 	.word	0x080143e2
 8013bb8:	00000000 	.word	0x00000000
 8013bbc:	0801393f 	.word	0x0801393f
 8013bc0:	080143de 	.word	0x080143de

08013bc4 <_printf_common>:
 8013bc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013bc8:	4616      	mov	r6, r2
 8013bca:	4699      	mov	r9, r3
 8013bcc:	688a      	ldr	r2, [r1, #8]
 8013bce:	690b      	ldr	r3, [r1, #16]
 8013bd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013bd4:	4293      	cmp	r3, r2
 8013bd6:	bfb8      	it	lt
 8013bd8:	4613      	movlt	r3, r2
 8013bda:	6033      	str	r3, [r6, #0]
 8013bdc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013be0:	4607      	mov	r7, r0
 8013be2:	460c      	mov	r4, r1
 8013be4:	b10a      	cbz	r2, 8013bea <_printf_common+0x26>
 8013be6:	3301      	adds	r3, #1
 8013be8:	6033      	str	r3, [r6, #0]
 8013bea:	6823      	ldr	r3, [r4, #0]
 8013bec:	0699      	lsls	r1, r3, #26
 8013bee:	bf42      	ittt	mi
 8013bf0:	6833      	ldrmi	r3, [r6, #0]
 8013bf2:	3302      	addmi	r3, #2
 8013bf4:	6033      	strmi	r3, [r6, #0]
 8013bf6:	6825      	ldr	r5, [r4, #0]
 8013bf8:	f015 0506 	ands.w	r5, r5, #6
 8013bfc:	d106      	bne.n	8013c0c <_printf_common+0x48>
 8013bfe:	f104 0a19 	add.w	sl, r4, #25
 8013c02:	68e3      	ldr	r3, [r4, #12]
 8013c04:	6832      	ldr	r2, [r6, #0]
 8013c06:	1a9b      	subs	r3, r3, r2
 8013c08:	42ab      	cmp	r3, r5
 8013c0a:	dc26      	bgt.n	8013c5a <_printf_common+0x96>
 8013c0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013c10:	1e13      	subs	r3, r2, #0
 8013c12:	6822      	ldr	r2, [r4, #0]
 8013c14:	bf18      	it	ne
 8013c16:	2301      	movne	r3, #1
 8013c18:	0692      	lsls	r2, r2, #26
 8013c1a:	d42b      	bmi.n	8013c74 <_printf_common+0xb0>
 8013c1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013c20:	4649      	mov	r1, r9
 8013c22:	4638      	mov	r0, r7
 8013c24:	47c0      	blx	r8
 8013c26:	3001      	adds	r0, #1
 8013c28:	d01e      	beq.n	8013c68 <_printf_common+0xa4>
 8013c2a:	6823      	ldr	r3, [r4, #0]
 8013c2c:	68e5      	ldr	r5, [r4, #12]
 8013c2e:	6832      	ldr	r2, [r6, #0]
 8013c30:	f003 0306 	and.w	r3, r3, #6
 8013c34:	2b04      	cmp	r3, #4
 8013c36:	bf08      	it	eq
 8013c38:	1aad      	subeq	r5, r5, r2
 8013c3a:	68a3      	ldr	r3, [r4, #8]
 8013c3c:	6922      	ldr	r2, [r4, #16]
 8013c3e:	bf0c      	ite	eq
 8013c40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013c44:	2500      	movne	r5, #0
 8013c46:	4293      	cmp	r3, r2
 8013c48:	bfc4      	itt	gt
 8013c4a:	1a9b      	subgt	r3, r3, r2
 8013c4c:	18ed      	addgt	r5, r5, r3
 8013c4e:	2600      	movs	r6, #0
 8013c50:	341a      	adds	r4, #26
 8013c52:	42b5      	cmp	r5, r6
 8013c54:	d11a      	bne.n	8013c8c <_printf_common+0xc8>
 8013c56:	2000      	movs	r0, #0
 8013c58:	e008      	b.n	8013c6c <_printf_common+0xa8>
 8013c5a:	2301      	movs	r3, #1
 8013c5c:	4652      	mov	r2, sl
 8013c5e:	4649      	mov	r1, r9
 8013c60:	4638      	mov	r0, r7
 8013c62:	47c0      	blx	r8
 8013c64:	3001      	adds	r0, #1
 8013c66:	d103      	bne.n	8013c70 <_printf_common+0xac>
 8013c68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013c6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013c70:	3501      	adds	r5, #1
 8013c72:	e7c6      	b.n	8013c02 <_printf_common+0x3e>
 8013c74:	18e1      	adds	r1, r4, r3
 8013c76:	1c5a      	adds	r2, r3, #1
 8013c78:	2030      	movs	r0, #48	; 0x30
 8013c7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013c7e:	4422      	add	r2, r4
 8013c80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013c84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013c88:	3302      	adds	r3, #2
 8013c8a:	e7c7      	b.n	8013c1c <_printf_common+0x58>
 8013c8c:	2301      	movs	r3, #1
 8013c8e:	4622      	mov	r2, r4
 8013c90:	4649      	mov	r1, r9
 8013c92:	4638      	mov	r0, r7
 8013c94:	47c0      	blx	r8
 8013c96:	3001      	adds	r0, #1
 8013c98:	d0e6      	beq.n	8013c68 <_printf_common+0xa4>
 8013c9a:	3601      	adds	r6, #1
 8013c9c:	e7d9      	b.n	8013c52 <_printf_common+0x8e>
	...

08013ca0 <_printf_i>:
 8013ca0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013ca4:	7e0f      	ldrb	r7, [r1, #24]
 8013ca6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013ca8:	2f78      	cmp	r7, #120	; 0x78
 8013caa:	4691      	mov	r9, r2
 8013cac:	4680      	mov	r8, r0
 8013cae:	460c      	mov	r4, r1
 8013cb0:	469a      	mov	sl, r3
 8013cb2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8013cb6:	d807      	bhi.n	8013cc8 <_printf_i+0x28>
 8013cb8:	2f62      	cmp	r7, #98	; 0x62
 8013cba:	d80a      	bhi.n	8013cd2 <_printf_i+0x32>
 8013cbc:	2f00      	cmp	r7, #0
 8013cbe:	f000 80d8 	beq.w	8013e72 <_printf_i+0x1d2>
 8013cc2:	2f58      	cmp	r7, #88	; 0x58
 8013cc4:	f000 80a3 	beq.w	8013e0e <_printf_i+0x16e>
 8013cc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013ccc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013cd0:	e03a      	b.n	8013d48 <_printf_i+0xa8>
 8013cd2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013cd6:	2b15      	cmp	r3, #21
 8013cd8:	d8f6      	bhi.n	8013cc8 <_printf_i+0x28>
 8013cda:	a101      	add	r1, pc, #4	; (adr r1, 8013ce0 <_printf_i+0x40>)
 8013cdc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013ce0:	08013d39 	.word	0x08013d39
 8013ce4:	08013d4d 	.word	0x08013d4d
 8013ce8:	08013cc9 	.word	0x08013cc9
 8013cec:	08013cc9 	.word	0x08013cc9
 8013cf0:	08013cc9 	.word	0x08013cc9
 8013cf4:	08013cc9 	.word	0x08013cc9
 8013cf8:	08013d4d 	.word	0x08013d4d
 8013cfc:	08013cc9 	.word	0x08013cc9
 8013d00:	08013cc9 	.word	0x08013cc9
 8013d04:	08013cc9 	.word	0x08013cc9
 8013d08:	08013cc9 	.word	0x08013cc9
 8013d0c:	08013e59 	.word	0x08013e59
 8013d10:	08013d7d 	.word	0x08013d7d
 8013d14:	08013e3b 	.word	0x08013e3b
 8013d18:	08013cc9 	.word	0x08013cc9
 8013d1c:	08013cc9 	.word	0x08013cc9
 8013d20:	08013e7b 	.word	0x08013e7b
 8013d24:	08013cc9 	.word	0x08013cc9
 8013d28:	08013d7d 	.word	0x08013d7d
 8013d2c:	08013cc9 	.word	0x08013cc9
 8013d30:	08013cc9 	.word	0x08013cc9
 8013d34:	08013e43 	.word	0x08013e43
 8013d38:	682b      	ldr	r3, [r5, #0]
 8013d3a:	1d1a      	adds	r2, r3, #4
 8013d3c:	681b      	ldr	r3, [r3, #0]
 8013d3e:	602a      	str	r2, [r5, #0]
 8013d40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013d44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013d48:	2301      	movs	r3, #1
 8013d4a:	e0a3      	b.n	8013e94 <_printf_i+0x1f4>
 8013d4c:	6820      	ldr	r0, [r4, #0]
 8013d4e:	6829      	ldr	r1, [r5, #0]
 8013d50:	0606      	lsls	r6, r0, #24
 8013d52:	f101 0304 	add.w	r3, r1, #4
 8013d56:	d50a      	bpl.n	8013d6e <_printf_i+0xce>
 8013d58:	680e      	ldr	r6, [r1, #0]
 8013d5a:	602b      	str	r3, [r5, #0]
 8013d5c:	2e00      	cmp	r6, #0
 8013d5e:	da03      	bge.n	8013d68 <_printf_i+0xc8>
 8013d60:	232d      	movs	r3, #45	; 0x2d
 8013d62:	4276      	negs	r6, r6
 8013d64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013d68:	485e      	ldr	r0, [pc, #376]	; (8013ee4 <_printf_i+0x244>)
 8013d6a:	230a      	movs	r3, #10
 8013d6c:	e019      	b.n	8013da2 <_printf_i+0x102>
 8013d6e:	680e      	ldr	r6, [r1, #0]
 8013d70:	602b      	str	r3, [r5, #0]
 8013d72:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013d76:	bf18      	it	ne
 8013d78:	b236      	sxthne	r6, r6
 8013d7a:	e7ef      	b.n	8013d5c <_printf_i+0xbc>
 8013d7c:	682b      	ldr	r3, [r5, #0]
 8013d7e:	6820      	ldr	r0, [r4, #0]
 8013d80:	1d19      	adds	r1, r3, #4
 8013d82:	6029      	str	r1, [r5, #0]
 8013d84:	0601      	lsls	r1, r0, #24
 8013d86:	d501      	bpl.n	8013d8c <_printf_i+0xec>
 8013d88:	681e      	ldr	r6, [r3, #0]
 8013d8a:	e002      	b.n	8013d92 <_printf_i+0xf2>
 8013d8c:	0646      	lsls	r6, r0, #25
 8013d8e:	d5fb      	bpl.n	8013d88 <_printf_i+0xe8>
 8013d90:	881e      	ldrh	r6, [r3, #0]
 8013d92:	4854      	ldr	r0, [pc, #336]	; (8013ee4 <_printf_i+0x244>)
 8013d94:	2f6f      	cmp	r7, #111	; 0x6f
 8013d96:	bf0c      	ite	eq
 8013d98:	2308      	moveq	r3, #8
 8013d9a:	230a      	movne	r3, #10
 8013d9c:	2100      	movs	r1, #0
 8013d9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013da2:	6865      	ldr	r5, [r4, #4]
 8013da4:	60a5      	str	r5, [r4, #8]
 8013da6:	2d00      	cmp	r5, #0
 8013da8:	bfa2      	ittt	ge
 8013daa:	6821      	ldrge	r1, [r4, #0]
 8013dac:	f021 0104 	bicge.w	r1, r1, #4
 8013db0:	6021      	strge	r1, [r4, #0]
 8013db2:	b90e      	cbnz	r6, 8013db8 <_printf_i+0x118>
 8013db4:	2d00      	cmp	r5, #0
 8013db6:	d04d      	beq.n	8013e54 <_printf_i+0x1b4>
 8013db8:	4615      	mov	r5, r2
 8013dba:	fbb6 f1f3 	udiv	r1, r6, r3
 8013dbe:	fb03 6711 	mls	r7, r3, r1, r6
 8013dc2:	5dc7      	ldrb	r7, [r0, r7]
 8013dc4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8013dc8:	4637      	mov	r7, r6
 8013dca:	42bb      	cmp	r3, r7
 8013dcc:	460e      	mov	r6, r1
 8013dce:	d9f4      	bls.n	8013dba <_printf_i+0x11a>
 8013dd0:	2b08      	cmp	r3, #8
 8013dd2:	d10b      	bne.n	8013dec <_printf_i+0x14c>
 8013dd4:	6823      	ldr	r3, [r4, #0]
 8013dd6:	07de      	lsls	r6, r3, #31
 8013dd8:	d508      	bpl.n	8013dec <_printf_i+0x14c>
 8013dda:	6923      	ldr	r3, [r4, #16]
 8013ddc:	6861      	ldr	r1, [r4, #4]
 8013dde:	4299      	cmp	r1, r3
 8013de0:	bfde      	ittt	le
 8013de2:	2330      	movle	r3, #48	; 0x30
 8013de4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013de8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8013dec:	1b52      	subs	r2, r2, r5
 8013dee:	6122      	str	r2, [r4, #16]
 8013df0:	f8cd a000 	str.w	sl, [sp]
 8013df4:	464b      	mov	r3, r9
 8013df6:	aa03      	add	r2, sp, #12
 8013df8:	4621      	mov	r1, r4
 8013dfa:	4640      	mov	r0, r8
 8013dfc:	f7ff fee2 	bl	8013bc4 <_printf_common>
 8013e00:	3001      	adds	r0, #1
 8013e02:	d14c      	bne.n	8013e9e <_printf_i+0x1fe>
 8013e04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013e08:	b004      	add	sp, #16
 8013e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013e0e:	4835      	ldr	r0, [pc, #212]	; (8013ee4 <_printf_i+0x244>)
 8013e10:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8013e14:	6829      	ldr	r1, [r5, #0]
 8013e16:	6823      	ldr	r3, [r4, #0]
 8013e18:	f851 6b04 	ldr.w	r6, [r1], #4
 8013e1c:	6029      	str	r1, [r5, #0]
 8013e1e:	061d      	lsls	r5, r3, #24
 8013e20:	d514      	bpl.n	8013e4c <_printf_i+0x1ac>
 8013e22:	07df      	lsls	r7, r3, #31
 8013e24:	bf44      	itt	mi
 8013e26:	f043 0320 	orrmi.w	r3, r3, #32
 8013e2a:	6023      	strmi	r3, [r4, #0]
 8013e2c:	b91e      	cbnz	r6, 8013e36 <_printf_i+0x196>
 8013e2e:	6823      	ldr	r3, [r4, #0]
 8013e30:	f023 0320 	bic.w	r3, r3, #32
 8013e34:	6023      	str	r3, [r4, #0]
 8013e36:	2310      	movs	r3, #16
 8013e38:	e7b0      	b.n	8013d9c <_printf_i+0xfc>
 8013e3a:	6823      	ldr	r3, [r4, #0]
 8013e3c:	f043 0320 	orr.w	r3, r3, #32
 8013e40:	6023      	str	r3, [r4, #0]
 8013e42:	2378      	movs	r3, #120	; 0x78
 8013e44:	4828      	ldr	r0, [pc, #160]	; (8013ee8 <_printf_i+0x248>)
 8013e46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013e4a:	e7e3      	b.n	8013e14 <_printf_i+0x174>
 8013e4c:	0659      	lsls	r1, r3, #25
 8013e4e:	bf48      	it	mi
 8013e50:	b2b6      	uxthmi	r6, r6
 8013e52:	e7e6      	b.n	8013e22 <_printf_i+0x182>
 8013e54:	4615      	mov	r5, r2
 8013e56:	e7bb      	b.n	8013dd0 <_printf_i+0x130>
 8013e58:	682b      	ldr	r3, [r5, #0]
 8013e5a:	6826      	ldr	r6, [r4, #0]
 8013e5c:	6961      	ldr	r1, [r4, #20]
 8013e5e:	1d18      	adds	r0, r3, #4
 8013e60:	6028      	str	r0, [r5, #0]
 8013e62:	0635      	lsls	r5, r6, #24
 8013e64:	681b      	ldr	r3, [r3, #0]
 8013e66:	d501      	bpl.n	8013e6c <_printf_i+0x1cc>
 8013e68:	6019      	str	r1, [r3, #0]
 8013e6a:	e002      	b.n	8013e72 <_printf_i+0x1d2>
 8013e6c:	0670      	lsls	r0, r6, #25
 8013e6e:	d5fb      	bpl.n	8013e68 <_printf_i+0x1c8>
 8013e70:	8019      	strh	r1, [r3, #0]
 8013e72:	2300      	movs	r3, #0
 8013e74:	6123      	str	r3, [r4, #16]
 8013e76:	4615      	mov	r5, r2
 8013e78:	e7ba      	b.n	8013df0 <_printf_i+0x150>
 8013e7a:	682b      	ldr	r3, [r5, #0]
 8013e7c:	1d1a      	adds	r2, r3, #4
 8013e7e:	602a      	str	r2, [r5, #0]
 8013e80:	681d      	ldr	r5, [r3, #0]
 8013e82:	6862      	ldr	r2, [r4, #4]
 8013e84:	2100      	movs	r1, #0
 8013e86:	4628      	mov	r0, r5
 8013e88:	f7ec fa2a 	bl	80002e0 <memchr>
 8013e8c:	b108      	cbz	r0, 8013e92 <_printf_i+0x1f2>
 8013e8e:	1b40      	subs	r0, r0, r5
 8013e90:	6060      	str	r0, [r4, #4]
 8013e92:	6863      	ldr	r3, [r4, #4]
 8013e94:	6123      	str	r3, [r4, #16]
 8013e96:	2300      	movs	r3, #0
 8013e98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013e9c:	e7a8      	b.n	8013df0 <_printf_i+0x150>
 8013e9e:	6923      	ldr	r3, [r4, #16]
 8013ea0:	462a      	mov	r2, r5
 8013ea2:	4649      	mov	r1, r9
 8013ea4:	4640      	mov	r0, r8
 8013ea6:	47d0      	blx	sl
 8013ea8:	3001      	adds	r0, #1
 8013eaa:	d0ab      	beq.n	8013e04 <_printf_i+0x164>
 8013eac:	6823      	ldr	r3, [r4, #0]
 8013eae:	079b      	lsls	r3, r3, #30
 8013eb0:	d413      	bmi.n	8013eda <_printf_i+0x23a>
 8013eb2:	68e0      	ldr	r0, [r4, #12]
 8013eb4:	9b03      	ldr	r3, [sp, #12]
 8013eb6:	4298      	cmp	r0, r3
 8013eb8:	bfb8      	it	lt
 8013eba:	4618      	movlt	r0, r3
 8013ebc:	e7a4      	b.n	8013e08 <_printf_i+0x168>
 8013ebe:	2301      	movs	r3, #1
 8013ec0:	4632      	mov	r2, r6
 8013ec2:	4649      	mov	r1, r9
 8013ec4:	4640      	mov	r0, r8
 8013ec6:	47d0      	blx	sl
 8013ec8:	3001      	adds	r0, #1
 8013eca:	d09b      	beq.n	8013e04 <_printf_i+0x164>
 8013ecc:	3501      	adds	r5, #1
 8013ece:	68e3      	ldr	r3, [r4, #12]
 8013ed0:	9903      	ldr	r1, [sp, #12]
 8013ed2:	1a5b      	subs	r3, r3, r1
 8013ed4:	42ab      	cmp	r3, r5
 8013ed6:	dcf2      	bgt.n	8013ebe <_printf_i+0x21e>
 8013ed8:	e7eb      	b.n	8013eb2 <_printf_i+0x212>
 8013eda:	2500      	movs	r5, #0
 8013edc:	f104 0619 	add.w	r6, r4, #25
 8013ee0:	e7f5      	b.n	8013ece <_printf_i+0x22e>
 8013ee2:	bf00      	nop
 8013ee4:	080143e9 	.word	0x080143e9
 8013ee8:	080143fa 	.word	0x080143fa

08013eec <__sread>:
 8013eec:	b510      	push	{r4, lr}
 8013eee:	460c      	mov	r4, r1
 8013ef0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013ef4:	f000 f894 	bl	8014020 <_read_r>
 8013ef8:	2800      	cmp	r0, #0
 8013efa:	bfab      	itete	ge
 8013efc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013efe:	89a3      	ldrhlt	r3, [r4, #12]
 8013f00:	181b      	addge	r3, r3, r0
 8013f02:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013f06:	bfac      	ite	ge
 8013f08:	6563      	strge	r3, [r4, #84]	; 0x54
 8013f0a:	81a3      	strhlt	r3, [r4, #12]
 8013f0c:	bd10      	pop	{r4, pc}

08013f0e <__swrite>:
 8013f0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f12:	461f      	mov	r7, r3
 8013f14:	898b      	ldrh	r3, [r1, #12]
 8013f16:	05db      	lsls	r3, r3, #23
 8013f18:	4605      	mov	r5, r0
 8013f1a:	460c      	mov	r4, r1
 8013f1c:	4616      	mov	r6, r2
 8013f1e:	d505      	bpl.n	8013f2c <__swrite+0x1e>
 8013f20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013f24:	2302      	movs	r3, #2
 8013f26:	2200      	movs	r2, #0
 8013f28:	f000 f868 	bl	8013ffc <_lseek_r>
 8013f2c:	89a3      	ldrh	r3, [r4, #12]
 8013f2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013f32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013f36:	81a3      	strh	r3, [r4, #12]
 8013f38:	4632      	mov	r2, r6
 8013f3a:	463b      	mov	r3, r7
 8013f3c:	4628      	mov	r0, r5
 8013f3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013f42:	f000 b817 	b.w	8013f74 <_write_r>

08013f46 <__sseek>:
 8013f46:	b510      	push	{r4, lr}
 8013f48:	460c      	mov	r4, r1
 8013f4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013f4e:	f000 f855 	bl	8013ffc <_lseek_r>
 8013f52:	1c43      	adds	r3, r0, #1
 8013f54:	89a3      	ldrh	r3, [r4, #12]
 8013f56:	bf15      	itete	ne
 8013f58:	6560      	strne	r0, [r4, #84]	; 0x54
 8013f5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013f5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013f62:	81a3      	strheq	r3, [r4, #12]
 8013f64:	bf18      	it	ne
 8013f66:	81a3      	strhne	r3, [r4, #12]
 8013f68:	bd10      	pop	{r4, pc}

08013f6a <__sclose>:
 8013f6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013f6e:	f000 b813 	b.w	8013f98 <_close_r>
	...

08013f74 <_write_r>:
 8013f74:	b538      	push	{r3, r4, r5, lr}
 8013f76:	4d07      	ldr	r5, [pc, #28]	; (8013f94 <_write_r+0x20>)
 8013f78:	4604      	mov	r4, r0
 8013f7a:	4608      	mov	r0, r1
 8013f7c:	4611      	mov	r1, r2
 8013f7e:	2200      	movs	r2, #0
 8013f80:	602a      	str	r2, [r5, #0]
 8013f82:	461a      	mov	r2, r3
 8013f84:	f7ee fbad 	bl	80026e2 <_write>
 8013f88:	1c43      	adds	r3, r0, #1
 8013f8a:	d102      	bne.n	8013f92 <_write_r+0x1e>
 8013f8c:	682b      	ldr	r3, [r5, #0]
 8013f8e:	b103      	cbz	r3, 8013f92 <_write_r+0x1e>
 8013f90:	6023      	str	r3, [r4, #0]
 8013f92:	bd38      	pop	{r3, r4, r5, pc}
 8013f94:	24004f98 	.word	0x24004f98

08013f98 <_close_r>:
 8013f98:	b538      	push	{r3, r4, r5, lr}
 8013f9a:	4d06      	ldr	r5, [pc, #24]	; (8013fb4 <_close_r+0x1c>)
 8013f9c:	2300      	movs	r3, #0
 8013f9e:	4604      	mov	r4, r0
 8013fa0:	4608      	mov	r0, r1
 8013fa2:	602b      	str	r3, [r5, #0]
 8013fa4:	f7ee fbb9 	bl	800271a <_close>
 8013fa8:	1c43      	adds	r3, r0, #1
 8013faa:	d102      	bne.n	8013fb2 <_close_r+0x1a>
 8013fac:	682b      	ldr	r3, [r5, #0]
 8013fae:	b103      	cbz	r3, 8013fb2 <_close_r+0x1a>
 8013fb0:	6023      	str	r3, [r4, #0]
 8013fb2:	bd38      	pop	{r3, r4, r5, pc}
 8013fb4:	24004f98 	.word	0x24004f98

08013fb8 <_fstat_r>:
 8013fb8:	b538      	push	{r3, r4, r5, lr}
 8013fba:	4d07      	ldr	r5, [pc, #28]	; (8013fd8 <_fstat_r+0x20>)
 8013fbc:	2300      	movs	r3, #0
 8013fbe:	4604      	mov	r4, r0
 8013fc0:	4608      	mov	r0, r1
 8013fc2:	4611      	mov	r1, r2
 8013fc4:	602b      	str	r3, [r5, #0]
 8013fc6:	f7ee fbb4 	bl	8002732 <_fstat>
 8013fca:	1c43      	adds	r3, r0, #1
 8013fcc:	d102      	bne.n	8013fd4 <_fstat_r+0x1c>
 8013fce:	682b      	ldr	r3, [r5, #0]
 8013fd0:	b103      	cbz	r3, 8013fd4 <_fstat_r+0x1c>
 8013fd2:	6023      	str	r3, [r4, #0]
 8013fd4:	bd38      	pop	{r3, r4, r5, pc}
 8013fd6:	bf00      	nop
 8013fd8:	24004f98 	.word	0x24004f98

08013fdc <_isatty_r>:
 8013fdc:	b538      	push	{r3, r4, r5, lr}
 8013fde:	4d06      	ldr	r5, [pc, #24]	; (8013ff8 <_isatty_r+0x1c>)
 8013fe0:	2300      	movs	r3, #0
 8013fe2:	4604      	mov	r4, r0
 8013fe4:	4608      	mov	r0, r1
 8013fe6:	602b      	str	r3, [r5, #0]
 8013fe8:	f7ee fbb3 	bl	8002752 <_isatty>
 8013fec:	1c43      	adds	r3, r0, #1
 8013fee:	d102      	bne.n	8013ff6 <_isatty_r+0x1a>
 8013ff0:	682b      	ldr	r3, [r5, #0]
 8013ff2:	b103      	cbz	r3, 8013ff6 <_isatty_r+0x1a>
 8013ff4:	6023      	str	r3, [r4, #0]
 8013ff6:	bd38      	pop	{r3, r4, r5, pc}
 8013ff8:	24004f98 	.word	0x24004f98

08013ffc <_lseek_r>:
 8013ffc:	b538      	push	{r3, r4, r5, lr}
 8013ffe:	4d07      	ldr	r5, [pc, #28]	; (801401c <_lseek_r+0x20>)
 8014000:	4604      	mov	r4, r0
 8014002:	4608      	mov	r0, r1
 8014004:	4611      	mov	r1, r2
 8014006:	2200      	movs	r2, #0
 8014008:	602a      	str	r2, [r5, #0]
 801400a:	461a      	mov	r2, r3
 801400c:	f7ee fbac 	bl	8002768 <_lseek>
 8014010:	1c43      	adds	r3, r0, #1
 8014012:	d102      	bne.n	801401a <_lseek_r+0x1e>
 8014014:	682b      	ldr	r3, [r5, #0]
 8014016:	b103      	cbz	r3, 801401a <_lseek_r+0x1e>
 8014018:	6023      	str	r3, [r4, #0]
 801401a:	bd38      	pop	{r3, r4, r5, pc}
 801401c:	24004f98 	.word	0x24004f98

08014020 <_read_r>:
 8014020:	b538      	push	{r3, r4, r5, lr}
 8014022:	4d07      	ldr	r5, [pc, #28]	; (8014040 <_read_r+0x20>)
 8014024:	4604      	mov	r4, r0
 8014026:	4608      	mov	r0, r1
 8014028:	4611      	mov	r1, r2
 801402a:	2200      	movs	r2, #0
 801402c:	602a      	str	r2, [r5, #0]
 801402e:	461a      	mov	r2, r3
 8014030:	f7ee fb3a 	bl	80026a8 <_read>
 8014034:	1c43      	adds	r3, r0, #1
 8014036:	d102      	bne.n	801403e <_read_r+0x1e>
 8014038:	682b      	ldr	r3, [r5, #0]
 801403a:	b103      	cbz	r3, 801403e <_read_r+0x1e>
 801403c:	6023      	str	r3, [r4, #0]
 801403e:	bd38      	pop	{r3, r4, r5, pc}
 8014040:	24004f98 	.word	0x24004f98

08014044 <_init>:
 8014044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014046:	bf00      	nop
 8014048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801404a:	bc08      	pop	{r3}
 801404c:	469e      	mov	lr, r3
 801404e:	4770      	bx	lr

08014050 <_fini>:
 8014050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014052:	bf00      	nop
 8014054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014056:	bc08      	pop	{r3}
 8014058:	469e      	mov	lr, r3
 801405a:	4770      	bx	lr
