
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014470  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000494  08014710  08014710  00024710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08014ba4  08014ba4  00024ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08014bac  08014bac  00024bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08014bb0  08014bb0  00024bb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000100  24000000  08014bb4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000050f0  24000100  08014cb4  00030100  2**5
                  ALLOC
  8 ._user_heap_stack 00000600  240051f0  08014cb4  000351f0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030100  2**0
                  CONTENTS, READONLY
 10 .debug_info   000372c8  00000000  00000000  0003012e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000068c8  00000000  00000000  000673f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002750  00000000  00000000  0006dcc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002498  00000000  00000000  00070410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000433a7  00000000  00000000  000728a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00038e7c  00000000  00000000  000b5c4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00194775  00000000  00000000  000eeacb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00283240  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000ac54  00000000  00000000  00283290  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000100 	.word	0x24000100
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080146f8 	.word	0x080146f8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000104 	.word	0x24000104
 80002dc:	080146f8 	.word	0x080146f8

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08a      	sub	sp, #40	; 0x28
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005ea:	f107 031c 	add.w	r3, r7, #28
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005f6:	463b      	mov	r3, r7
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
 8000604:	615a      	str	r2, [r3, #20]
 8000606:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000608:	4b7a      	ldr	r3, [pc, #488]	; (80007f4 <MX_ADC1_Init+0x210>)
 800060a:	4a7b      	ldr	r2, [pc, #492]	; (80007f8 <MX_ADC1_Init+0x214>)
 800060c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800060e:	4b79      	ldr	r3, [pc, #484]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000610:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000614:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000616:	4b77      	ldr	r3, [pc, #476]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000618:	2208      	movs	r2, #8
 800061a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800061c:	4b75      	ldr	r3, [pc, #468]	; (80007f4 <MX_ADC1_Init+0x210>)
 800061e:	2201      	movs	r2, #1
 8000620:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000622:	4b74      	ldr	r3, [pc, #464]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000624:	2204      	movs	r2, #4
 8000626:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000628:	4b72      	ldr	r3, [pc, #456]	; (80007f4 <MX_ADC1_Init+0x210>)
 800062a:	2200      	movs	r2, #0
 800062c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800062e:	4b71      	ldr	r3, [pc, #452]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000630:	2201      	movs	r2, #1
 8000632:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 8000634:	4b6f      	ldr	r3, [pc, #444]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000636:	220b      	movs	r2, #11
 8000638:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063a:	4b6e      	ldr	r3, [pc, #440]	; (80007f4 <MX_ADC1_Init+0x210>)
 800063c:	2200      	movs	r2, #0
 800063e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000640:	4b6c      	ldr	r3, [pc, #432]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000642:	2200      	movs	r2, #0
 8000644:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000646:	4b6b      	ldr	r3, [pc, #428]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000648:	2200      	movs	r2, #0
 800064a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800064c:	4b69      	ldr	r3, [pc, #420]	; (80007f4 <MX_ADC1_Init+0x210>)
 800064e:	2203      	movs	r2, #3
 8000650:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000652:	4b68      	ldr	r3, [pc, #416]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000654:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000658:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800065a:	4b66      	ldr	r3, [pc, #408]	; (80007f4 <MX_ADC1_Init+0x210>)
 800065c:	2200      	movs	r2, #0
 800065e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000660:	4b64      	ldr	r3, [pc, #400]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000662:	2200      	movs	r2, #0
 8000664:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000668:	4862      	ldr	r0, [pc, #392]	; (80007f4 <MX_ADC1_Init+0x210>)
 800066a:	f002 ffa7 	bl	80035bc <HAL_ADC_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000674:	f001 fb1a 	bl	8001cac <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000678:	2300      	movs	r3, #0
 800067a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800067c:	f107 031c 	add.w	r3, r7, #28
 8000680:	4619      	mov	r1, r3
 8000682:	485c      	ldr	r0, [pc, #368]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000684:	f004 f8c2 	bl	800480c <HAL_ADCEx_MultiModeConfigChannel>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800068e:	f001 fb0d 	bl	8001cac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000692:	4b5a      	ldr	r3, [pc, #360]	; (80007fc <MX_ADC1_Init+0x218>)
 8000694:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000696:	2306      	movs	r3, #6
 8000698:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800069a:	2307      	movs	r3, #7
 800069c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800069e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80006a2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006a4:	2304      	movs	r3, #4
 80006a6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80006ac:	2300      	movs	r3, #0
 80006ae:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b0:	463b      	mov	r3, r7
 80006b2:	4619      	mov	r1, r3
 80006b4:	484f      	ldr	r0, [pc, #316]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006b6:	f003 fa05 	bl	8003ac4 <HAL_ADC_ConfigChannel>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80006c0:	f001 faf4 	bl	8001cac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80006c4:	4b4e      	ldr	r3, [pc, #312]	; (8000800 <MX_ADC1_Init+0x21c>)
 80006c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006c8:	230c      	movs	r3, #12
 80006ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006cc:	463b      	mov	r3, r7
 80006ce:	4619      	mov	r1, r3
 80006d0:	4848      	ldr	r0, [pc, #288]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006d2:	f003 f9f7 	bl	8003ac4 <HAL_ADC_ConfigChannel>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 80006dc:	f001 fae6 	bl	8001cac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006e0:	4b48      	ldr	r3, [pc, #288]	; (8000804 <MX_ADC1_Init+0x220>)
 80006e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006e4:	2312      	movs	r3, #18
 80006e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e8:	463b      	mov	r3, r7
 80006ea:	4619      	mov	r1, r3
 80006ec:	4841      	ldr	r0, [pc, #260]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006ee:	f003 f9e9 	bl	8003ac4 <HAL_ADC_ConfigChannel>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 80006f8:	f001 fad8 	bl	8001cac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80006fc:	4b42      	ldr	r3, [pc, #264]	; (8000808 <MX_ADC1_Init+0x224>)
 80006fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000700:	2318      	movs	r3, #24
 8000702:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000704:	463b      	mov	r3, r7
 8000706:	4619      	mov	r1, r3
 8000708:	483a      	ldr	r0, [pc, #232]	; (80007f4 <MX_ADC1_Init+0x210>)
 800070a:	f003 f9db 	bl	8003ac4 <HAL_ADC_ConfigChannel>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8000714:	f001 faca 	bl	8001cac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000718:	4b3c      	ldr	r3, [pc, #240]	; (800080c <MX_ADC1_Init+0x228>)
 800071a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800071c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000720:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000722:	463b      	mov	r3, r7
 8000724:	4619      	mov	r1, r3
 8000726:	4833      	ldr	r0, [pc, #204]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000728:	f003 f9cc 	bl	8003ac4 <HAL_ADC_ConfigChannel>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8000732:	f001 fabb 	bl	8001cac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000736:	4b36      	ldr	r3, [pc, #216]	; (8000810 <MX_ADC1_Init+0x22c>)
 8000738:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800073a:	f44f 7383 	mov.w	r3, #262	; 0x106
 800073e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000740:	463b      	mov	r3, r7
 8000742:	4619      	mov	r1, r3
 8000744:	482b      	ldr	r0, [pc, #172]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000746:	f003 f9bd 	bl	8003ac4 <HAL_ADC_ConfigChannel>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8000750:	f001 faac 	bl	8001cac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000754:	4b2f      	ldr	r3, [pc, #188]	; (8000814 <MX_ADC1_Init+0x230>)
 8000756:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000758:	f44f 7386 	mov.w	r3, #268	; 0x10c
 800075c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800075e:	463b      	mov	r3, r7
 8000760:	4619      	mov	r1, r3
 8000762:	4824      	ldr	r0, [pc, #144]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000764:	f003 f9ae 	bl	8003ac4 <HAL_ADC_ConfigChannel>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 800076e:	f001 fa9d 	bl	8001cac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000772:	4b29      	ldr	r3, [pc, #164]	; (8000818 <MX_ADC1_Init+0x234>)
 8000774:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000776:	f44f 7389 	mov.w	r3, #274	; 0x112
 800077a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800077c:	463b      	mov	r3, r7
 800077e:	4619      	mov	r1, r3
 8000780:	481c      	ldr	r0, [pc, #112]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000782:	f003 f99f 	bl	8003ac4 <HAL_ADC_ConfigChannel>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 800078c:	f001 fa8e 	bl	8001cac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000790:	4b22      	ldr	r3, [pc, #136]	; (800081c <MX_ADC1_Init+0x238>)
 8000792:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000794:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000798:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800079a:	463b      	mov	r3, r7
 800079c:	4619      	mov	r1, r3
 800079e:	4815      	ldr	r0, [pc, #84]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007a0:	f003 f990 	bl	8003ac4 <HAL_ADC_ConfigChannel>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 80007aa:	f001 fa7f 	bl	8001cac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80007ae:	4b1c      	ldr	r3, [pc, #112]	; (8000820 <MX_ADC1_Init+0x23c>)
 80007b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80007b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b8:	463b      	mov	r3, r7
 80007ba:	4619      	mov	r1, r3
 80007bc:	480d      	ldr	r0, [pc, #52]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007be:	f003 f981 	bl	8003ac4 <HAL_ADC_ConfigChannel>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 80007c8:	f001 fa70 	bl	8001cac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80007cc:	4b15      	ldr	r3, [pc, #84]	; (8000824 <MX_ADC1_Init+0x240>)
 80007ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80007d0:	f240 2306 	movw	r3, #518	; 0x206
 80007d4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d6:	463b      	mov	r3, r7
 80007d8:	4619      	mov	r1, r3
 80007da:	4806      	ldr	r0, [pc, #24]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007dc:	f003 f972 	bl	8003ac4 <HAL_ADC_ConfigChannel>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 80007e6:	f001 fa61 	bl	8001cac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	3728      	adds	r7, #40	; 0x28
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	2400011c 	.word	0x2400011c
 80007f8:	40022000 	.word	0x40022000
 80007fc:	0c900008 	.word	0x0c900008
 8000800:	10c00010 	.word	0x10c00010
 8000804:	14f00020 	.word	0x14f00020
 8000808:	1d500080 	.word	0x1d500080
 800080c:	21800100 	.word	0x21800100
 8000810:	25b00200 	.word	0x25b00200
 8000814:	2a000400 	.word	0x2a000400
 8000818:	2e300800 	.word	0x2e300800
 800081c:	3ac04000 	.word	0x3ac04000
 8000820:	3ef08000 	.word	0x3ef08000
 8000824:	47520000 	.word	0x47520000

08000828 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b088      	sub	sp, #32
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
 800083c:	615a      	str	r2, [r3, #20]
 800083e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000840:	4b3d      	ldr	r3, [pc, #244]	; (8000938 <MX_ADC3_Init+0x110>)
 8000842:	4a3e      	ldr	r2, [pc, #248]	; (800093c <MX_ADC3_Init+0x114>)
 8000844:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000846:	4b3c      	ldr	r3, [pc, #240]	; (8000938 <MX_ADC3_Init+0x110>)
 8000848:	2208      	movs	r2, #8
 800084a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800084c:	4b3a      	ldr	r3, [pc, #232]	; (8000938 <MX_ADC3_Init+0x110>)
 800084e:	2201      	movs	r2, #1
 8000850:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000852:	4b39      	ldr	r3, [pc, #228]	; (8000938 <MX_ADC3_Init+0x110>)
 8000854:	2204      	movs	r2, #4
 8000856:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000858:	4b37      	ldr	r3, [pc, #220]	; (8000938 <MX_ADC3_Init+0x110>)
 800085a:	2200      	movs	r2, #0
 800085c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800085e:	4b36      	ldr	r3, [pc, #216]	; (8000938 <MX_ADC3_Init+0x110>)
 8000860:	2201      	movs	r2, #1
 8000862:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 8000864:	4b34      	ldr	r3, [pc, #208]	; (8000938 <MX_ADC3_Init+0x110>)
 8000866:	2204      	movs	r2, #4
 8000868:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800086a:	4b33      	ldr	r3, [pc, #204]	; (8000938 <MX_ADC3_Init+0x110>)
 800086c:	2200      	movs	r2, #0
 800086e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000870:	4b31      	ldr	r3, [pc, #196]	; (8000938 <MX_ADC3_Init+0x110>)
 8000872:	2200      	movs	r2, #0
 8000874:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000876:	4b30      	ldr	r3, [pc, #192]	; (8000938 <MX_ADC3_Init+0x110>)
 8000878:	2200      	movs	r2, #0
 800087a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800087c:	4b2e      	ldr	r3, [pc, #184]	; (8000938 <MX_ADC3_Init+0x110>)
 800087e:	2203      	movs	r2, #3
 8000880:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000882:	4b2d      	ldr	r3, [pc, #180]	; (8000938 <MX_ADC3_Init+0x110>)
 8000884:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000888:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800088a:	4b2b      	ldr	r3, [pc, #172]	; (8000938 <MX_ADC3_Init+0x110>)
 800088c:	2200      	movs	r2, #0
 800088e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000890:	4b29      	ldr	r3, [pc, #164]	; (8000938 <MX_ADC3_Init+0x110>)
 8000892:	2200      	movs	r2, #0
 8000894:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000898:	4827      	ldr	r0, [pc, #156]	; (8000938 <MX_ADC3_Init+0x110>)
 800089a:	f002 fe8f 	bl	80035bc <HAL_ADC_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 80008a4:	f001 fa02 	bl	8001cac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80008a8:	4b25      	ldr	r3, [pc, #148]	; (8000940 <MX_ADC3_Init+0x118>)
 80008aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008ac:	2306      	movs	r3, #6
 80008ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80008b0:	2307      	movs	r3, #7
 80008b2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008b4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008b8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008ba:	2304      	movs	r3, #4
 80008bc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	4619      	mov	r1, r3
 80008ca:	481b      	ldr	r0, [pc, #108]	; (8000938 <MX_ADC3_Init+0x110>)
 80008cc:	f003 f8fa 	bl	8003ac4 <HAL_ADC_ConfigChannel>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80008d6:	f001 f9e9 	bl	8001cac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80008da:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <MX_ADC3_Init+0x11c>)
 80008dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008de:	230c      	movs	r3, #12
 80008e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	4619      	mov	r1, r3
 80008e6:	4814      	ldr	r0, [pc, #80]	; (8000938 <MX_ADC3_Init+0x110>)
 80008e8:	f003 f8ec 	bl	8003ac4 <HAL_ADC_ConfigChannel>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 80008f2:	f001 f9db 	bl	8001cac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008f6:	2301      	movs	r3, #1
 80008f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80008fa:	2312      	movs	r3, #18
 80008fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	4619      	mov	r1, r3
 8000902:	480d      	ldr	r0, [pc, #52]	; (8000938 <MX_ADC3_Init+0x110>)
 8000904:	f003 f8de 	bl	8003ac4 <HAL_ADC_ConfigChannel>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 800090e:	f001 f9cd 	bl	8001cac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000912:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <MX_ADC3_Init+0x120>)
 8000914:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000916:	2318      	movs	r3, #24
 8000918:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	4619      	mov	r1, r3
 800091e:	4806      	ldr	r0, [pc, #24]	; (8000938 <MX_ADC3_Init+0x110>)
 8000920:	f003 f8d0 	bl	8003ac4 <HAL_ADC_ConfigChannel>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 800092a:	f001 f9bf 	bl	8001cac <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	3720      	adds	r7, #32
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	24000180 	.word	0x24000180
 800093c:	58026000 	.word	0x58026000
 8000940:	cb840000 	.word	0xcb840000
 8000944:	cfb80000 	.word	0xcfb80000
 8000948:	04300002 	.word	0x04300002

0800094c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08e      	sub	sp, #56	; 0x38
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a7b      	ldr	r2, [pc, #492]	; (8000b58 <HAL_ADC_MspInit+0x20c>)
 800096a:	4293      	cmp	r3, r2
 800096c:	f040 8091 	bne.w	8000a92 <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000970:	4b7a      	ldr	r3, [pc, #488]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000972:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000976:	4a79      	ldr	r2, [pc, #484]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000978:	f043 0320 	orr.w	r3, r3, #32
 800097c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000980:	4b76      	ldr	r3, [pc, #472]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000982:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000986:	f003 0320 	and.w	r3, r3, #32
 800098a:	623b      	str	r3, [r7, #32]
 800098c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800098e:	4b73      	ldr	r3, [pc, #460]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000994:	4a71      	ldr	r2, [pc, #452]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000996:	f043 0304 	orr.w	r3, r3, #4
 800099a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800099e:	4b6f      	ldr	r3, [pc, #444]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a4:	f003 0304 	and.w	r3, r3, #4
 80009a8:	61fb      	str	r3, [r7, #28]
 80009aa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ac:	4b6b      	ldr	r3, [pc, #428]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b2:	4a6a      	ldr	r2, [pc, #424]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009bc:	4b67      	ldr	r3, [pc, #412]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	61bb      	str	r3, [r7, #24]
 80009c8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ca:	4b64      	ldr	r3, [pc, #400]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d0:	4a62      	ldr	r2, [pc, #392]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009d2:	f043 0302 	orr.w	r3, r3, #2
 80009d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009da:	4b60      	ldr	r3, [pc, #384]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e0:	f003 0302 	and.w	r3, r3, #2
 80009e4:	617b      	str	r3, [r7, #20]
 80009e6:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80009e8:	2333      	movs	r3, #51	; 0x33
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ec:	2303      	movs	r3, #3
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f8:	4619      	mov	r1, r3
 80009fa:	4859      	ldr	r0, [pc, #356]	; (8000b60 <HAL_ADC_MspInit+0x214>)
 80009fc:	f007 fb12 	bl	8008024 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8000a00:	23ce      	movs	r3, #206	; 0xce
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a04:	2303      	movs	r3, #3
 8000a06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a10:	4619      	mov	r1, r3
 8000a12:	4854      	ldr	r0, [pc, #336]	; (8000b64 <HAL_ADC_MspInit+0x218>)
 8000a14:	f007 fb06 	bl	8008024 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a28:	4619      	mov	r1, r3
 8000a2a:	484f      	ldr	r0, [pc, #316]	; (8000b68 <HAL_ADC_MspInit+0x21c>)
 8000a2c:	f007 fafa 	bl	8008024 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000a30:	4b4e      	ldr	r3, [pc, #312]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a32:	4a4f      	ldr	r2, [pc, #316]	; (8000b70 <HAL_ADC_MspInit+0x224>)
 8000a34:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000a36:	4b4d      	ldr	r3, [pc, #308]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a38:	2209      	movs	r2, #9
 8000a3a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a3c:	4b4b      	ldr	r3, [pc, #300]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a42:	4b4a      	ldr	r3, [pc, #296]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a48:	4b48      	ldr	r3, [pc, #288]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a4e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a50:	4b46      	ldr	r3, [pc, #280]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a56:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a58:	4b44      	ldr	r3, [pc, #272]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a5e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000a60:	4b42      	ldr	r3, [pc, #264]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a66:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000a68:	4b40      	ldr	r3, [pc, #256]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a6e:	4b3f      	ldr	r3, [pc, #252]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a74:	483d      	ldr	r0, [pc, #244]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a76:	f004 fc8d 	bl	8005394 <HAL_DMA_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8000a80:	f001 f914 	bl	8001cac <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a39      	ldr	r2, [pc, #228]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a88:	64da      	str	r2, [r3, #76]	; 0x4c
 8000a8a:	4a38      	ldr	r2, [pc, #224]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000a90:	e05e      	b.n	8000b50 <HAL_ADC_MspInit+0x204>
  else if(adcHandle->Instance==ADC3)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a37      	ldr	r2, [pc, #220]	; (8000b74 <HAL_ADC_MspInit+0x228>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d159      	bne.n	8000b50 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000a9c:	4b2f      	ldr	r3, [pc, #188]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa2:	4a2e      	ldr	r2, [pc, #184]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aa4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000aa8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aac:	4b2b      	ldr	r3, [pc, #172]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aba:	4b28      	ldr	r3, [pc, #160]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac0:	4a26      	ldr	r2, [pc, #152]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000ac2:	f043 0304 	orr.w	r3, r3, #4
 8000ac6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aca:	4b24      	ldr	r3, [pc, #144]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad0:	f003 0304 	and.w	r3, r3, #4
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000ad8:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000adc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000ae0:	f002 fb48 	bl	8003174 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8000ae4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000ae8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8000aec:	f002 fb42 	bl	8003174 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8000af0:	4b21      	ldr	r3, [pc, #132]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af2:	4a22      	ldr	r2, [pc, #136]	; (8000b7c <HAL_ADC_MspInit+0x230>)
 8000af4:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000af6:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af8:	2273      	movs	r2, #115	; 0x73
 8000afa:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000afc:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b02:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000b08:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b0e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b10:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b16:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b18:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b1e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000b20:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b26:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000b28:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b2e:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000b34:	4810      	ldr	r0, [pc, #64]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b36:	f004 fc2d 	bl	8005394 <HAL_DMA_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8000b40:	f001 f8b4 	bl	8001cac <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a0c      	ldr	r2, [pc, #48]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b48:	64da      	str	r2, [r3, #76]	; 0x4c
 8000b4a:	4a0b      	ldr	r2, [pc, #44]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000b50:	bf00      	nop
 8000b52:	3738      	adds	r7, #56	; 0x38
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40022000 	.word	0x40022000
 8000b5c:	58024400 	.word	0x58024400
 8000b60:	58020800 	.word	0x58020800
 8000b64:	58020000 	.word	0x58020000
 8000b68:	58020400 	.word	0x58020400
 8000b6c:	240001e4 	.word	0x240001e4
 8000b70:	40020010 	.word	0x40020010
 8000b74:	58026000 	.word	0x58026000
 8000b78:	2400025c 	.word	0x2400025c
 8000b7c:	40020028 	.word	0x40020028

08000b80 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	; 0x28
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	2224      	movs	r2, #36	; 0x24
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f013 f8ad 	bl	8013cec <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000b92:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b94:	4a12      	ldr	r2, [pc, #72]	; (8000be0 <MX_DAC1_Init+0x60>)
 8000b96:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000b98:	4810      	ldr	r0, [pc, #64]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b9a:	f003 fff5 	bl	8004b88 <HAL_DAC_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000ba4:	f001 f882 	bl	8001cac <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000bac:	230a      	movs	r3, #10
 8000bae:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4806      	ldr	r0, [pc, #24]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000bc4:	f004 fa10 	bl	8004fe8 <HAL_DAC_ConfigChannel>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000bce:	f001 f86d 	bl	8001cac <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000bd2:	bf00      	nop
 8000bd4:	3728      	adds	r7, #40	; 0x28
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	240002d4 	.word	0x240002d4
 8000be0:	40007400 	.word	0x40007400

08000be4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	; 0x28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a34      	ldr	r2, [pc, #208]	; (8000cd4 <HAL_DAC_MspInit+0xf0>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d161      	bne.n	8000cca <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000c06:	4b34      	ldr	r3, [pc, #208]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c0c:	4a32      	ldr	r2, [pc, #200]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c12:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c16:	4b30      	ldr	r3, [pc, #192]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c24:	4b2c      	ldr	r3, [pc, #176]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2a:	4a2b      	ldr	r2, [pc, #172]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c34:	4b28      	ldr	r3, [pc, #160]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c42:	2310      	movs	r3, #16
 8000c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c46:	2303      	movs	r3, #3
 8000c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4619      	mov	r1, r3
 8000c54:	4821      	ldr	r0, [pc, #132]	; (8000cdc <HAL_DAC_MspInit+0xf8>)
 8000c56:	f007 f9e5 	bl	8008024 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8000c5a:	4b21      	ldr	r3, [pc, #132]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c5c:	4a21      	ldr	r2, [pc, #132]	; (8000ce4 <HAL_DAC_MspInit+0x100>)
 8000c5e:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8000c60:	4b1f      	ldr	r3, [pc, #124]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c62:	2243      	movs	r2, #67	; 0x43
 8000c64:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c66:	4b1e      	ldr	r3, [pc, #120]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c68:	2240      	movs	r2, #64	; 0x40
 8000c6a:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000c72:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c78:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c7a:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c80:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c82:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c84:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c88:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c90:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000c92:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000c9e:	4810      	ldr	r0, [pc, #64]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000ca0:	f004 fb78 	bl	8005394 <HAL_DMA_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8000caa:	f000 ffff 	bl	8001cac <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4a0b      	ldr	r2, [pc, #44]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2105      	movs	r1, #5
 8000cbe:	2036      	movs	r0, #54	; 0x36
 8000cc0:	f003 ff3a 	bl	8004b38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cc4:	2036      	movs	r0, #54	; 0x36
 8000cc6:	f003 ff51 	bl	8004b6c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000cca:	bf00      	nop
 8000ccc:	3728      	adds	r7, #40	; 0x28
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40007400 	.word	0x40007400
 8000cd8:	58024400 	.word	0x58024400
 8000cdc:	58020000 	.word	0x58020000
 8000ce0:	240002e8 	.word	0x240002e8
 8000ce4:	40020088 	.word	0x40020088

08000ce8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cee:	4b19      	ldr	r3, [pc, #100]	; (8000d54 <MX_DMA_Init+0x6c>)
 8000cf0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cf4:	4a17      	ldr	r2, [pc, #92]	; (8000d54 <MX_DMA_Init+0x6c>)
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cfe:	4b15      	ldr	r3, [pc, #84]	; (8000d54 <MX_DMA_Init+0x6c>)
 8000d00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d04:	f003 0301 	and.w	r3, r3, #1
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2105      	movs	r1, #5
 8000d10:	200b      	movs	r0, #11
 8000d12:	f003 ff11 	bl	8004b38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d16:	200b      	movs	r0, #11
 8000d18:	f003 ff28 	bl	8004b6c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2105      	movs	r1, #5
 8000d20:	200c      	movs	r0, #12
 8000d22:	f003 ff09 	bl	8004b38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d26:	200c      	movs	r0, #12
 8000d28:	f003 ff20 	bl	8004b6c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2105      	movs	r1, #5
 8000d30:	200d      	movs	r0, #13
 8000d32:	f003 ff01 	bl	8004b38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000d36:	200d      	movs	r0, #13
 8000d38:	f003 ff18 	bl	8004b6c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2105      	movs	r1, #5
 8000d40:	2010      	movs	r0, #16
 8000d42:	f003 fef9 	bl	8004b38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000d46:	2010      	movs	r0, #16
 8000d48:	f003 ff10 	bl	8004b6c <HAL_NVIC_EnableIRQ>

}
 8000d4c:	bf00      	nop
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	58024400 	.word	0x58024400

08000d58 <vApplicationTickHook>:
/* Hook prototypes */
void vApplicationTickHook(void);

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
	...

08000d68 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 8000d6c:	4a28      	ldr	r2, [pc, #160]	; (8000e10 <MX_FREERTOS_Init+0xa8>)
 8000d6e:	2100      	movs	r1, #0
 8000d70:	4828      	ldr	r0, [pc, #160]	; (8000e14 <MX_FREERTOS_Init+0xac>)
 8000d72:	f00f ffc3 	bl	8010cfc <osThreadNew>
 8000d76:	4603      	mov	r3, r0
 8000d78:	4a27      	ldr	r2, [pc, #156]	; (8000e18 <MX_FREERTOS_Init+0xb0>)
 8000d7a:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 8000d7c:	4a27      	ldr	r2, [pc, #156]	; (8000e1c <MX_FREERTOS_Init+0xb4>)
 8000d7e:	2100      	movs	r1, #0
 8000d80:	4827      	ldr	r0, [pc, #156]	; (8000e20 <MX_FREERTOS_Init+0xb8>)
 8000d82:	f00f ffbb 	bl	8010cfc <osThreadNew>
 8000d86:	4603      	mov	r3, r0
 8000d88:	4a26      	ldr	r2, [pc, #152]	; (8000e24 <MX_FREERTOS_Init+0xbc>)
 8000d8a:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 8000d8c:	4a26      	ldr	r2, [pc, #152]	; (8000e28 <MX_FREERTOS_Init+0xc0>)
 8000d8e:	2100      	movs	r1, #0
 8000d90:	4826      	ldr	r0, [pc, #152]	; (8000e2c <MX_FREERTOS_Init+0xc4>)
 8000d92:	f00f ffb3 	bl	8010cfc <osThreadNew>
 8000d96:	4603      	mov	r3, r0
 8000d98:	4a25      	ldr	r2, [pc, #148]	; (8000e30 <MX_FREERTOS_Init+0xc8>)
 8000d9a:	6013      	str	r3, [r2, #0]

  /* creation of AUTOINIT_task */
  AUTOINIT_taskHandle = osThreadNew(AUTOINIT_init, NULL, &AUTOINIT_task_attributes);
 8000d9c:	4a25      	ldr	r2, [pc, #148]	; (8000e34 <MX_FREERTOS_Init+0xcc>)
 8000d9e:	2100      	movs	r1, #0
 8000da0:	4825      	ldr	r0, [pc, #148]	; (8000e38 <MX_FREERTOS_Init+0xd0>)
 8000da2:	f00f ffab 	bl	8010cfc <osThreadNew>
 8000da6:	4603      	mov	r3, r0
 8000da8:	4a24      	ldr	r2, [pc, #144]	; (8000e3c <MX_FREERTOS_Init+0xd4>)
 8000daa:	6013      	str	r3, [r2, #0]

  /* creation of AUTODEINIT_task */
  AUTODEINIT_taskHandle = osThreadNew(AUTODEINIT_init, NULL, &AUTODEINIT_task_attributes);
 8000dac:	4a24      	ldr	r2, [pc, #144]	; (8000e40 <MX_FREERTOS_Init+0xd8>)
 8000dae:	2100      	movs	r1, #0
 8000db0:	4824      	ldr	r0, [pc, #144]	; (8000e44 <MX_FREERTOS_Init+0xdc>)
 8000db2:	f00f ffa3 	bl	8010cfc <osThreadNew>
 8000db6:	4603      	mov	r3, r0
 8000db8:	4a23      	ldr	r2, [pc, #140]	; (8000e48 <MX_FREERTOS_Init+0xe0>)
 8000dba:	6013      	str	r3, [r2, #0]

  /* creation of UART_TX_task */
  UART_TX_taskHandle = osThreadNew(UART_TX_init, NULL, &UART_TX_task_attributes);
 8000dbc:	4a23      	ldr	r2, [pc, #140]	; (8000e4c <MX_FREERTOS_Init+0xe4>)
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	4823      	ldr	r0, [pc, #140]	; (8000e50 <MX_FREERTOS_Init+0xe8>)
 8000dc2:	f00f ff9b 	bl	8010cfc <osThreadNew>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	4a22      	ldr	r2, [pc, #136]	; (8000e54 <MX_FREERTOS_Init+0xec>)
 8000dca:	6013      	str	r3, [r2, #0]

  /* creation of Voltage_Monitor */
  Voltage_MonitorHandle = osThreadNew(Voltage_Monitor_init, NULL, &Voltage_Monitor_attributes);
 8000dcc:	4a22      	ldr	r2, [pc, #136]	; (8000e58 <MX_FREERTOS_Init+0xf0>)
 8000dce:	2100      	movs	r1, #0
 8000dd0:	4822      	ldr	r0, [pc, #136]	; (8000e5c <MX_FREERTOS_Init+0xf4>)
 8000dd2:	f00f ff93 	bl	8010cfc <osThreadNew>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	4a21      	ldr	r2, [pc, #132]	; (8000e60 <MX_FREERTOS_Init+0xf8>)
 8000dda:	6013      	str	r3, [r2, #0]

  /* creation of STOP_task */
  STOP_taskHandle = osThreadNew(STOP_init, NULL, &STOP_task_attributes);
 8000ddc:	4a21      	ldr	r2, [pc, #132]	; (8000e64 <MX_FREERTOS_Init+0xfc>)
 8000dde:	2100      	movs	r1, #0
 8000de0:	4821      	ldr	r0, [pc, #132]	; (8000e68 <MX_FREERTOS_Init+0x100>)
 8000de2:	f00f ff8b 	bl	8010cfc <osThreadNew>
 8000de6:	4603      	mov	r3, r0
 8000de8:	4a20      	ldr	r2, [pc, #128]	; (8000e6c <MX_FREERTOS_Init+0x104>)
 8000dea:	6013      	str	r3, [r2, #0]

  /* creation of Science_task */
  Science_taskHandle = osThreadNew(Science_init, NULL, &Science_task_attributes);
 8000dec:	4a20      	ldr	r2, [pc, #128]	; (8000e70 <MX_FREERTOS_Init+0x108>)
 8000dee:	2100      	movs	r1, #0
 8000df0:	4820      	ldr	r0, [pc, #128]	; (8000e74 <MX_FREERTOS_Init+0x10c>)
 8000df2:	f00f ff83 	bl	8010cfc <osThreadNew>
 8000df6:	4603      	mov	r3, r0
 8000df8:	4a1f      	ldr	r2, [pc, #124]	; (8000e78 <MX_FREERTOS_Init+0x110>)
 8000dfa:	6013      	str	r3, [r2, #0]

  /* creation of Idle_task */
  Idle_taskHandle = osThreadNew(Idle_init, NULL, &Idle_task_attributes);
 8000dfc:	4a1f      	ldr	r2, [pc, #124]	; (8000e7c <MX_FREERTOS_Init+0x114>)
 8000dfe:	2100      	movs	r1, #0
 8000e00:	481f      	ldr	r0, [pc, #124]	; (8000e80 <MX_FREERTOS_Init+0x118>)
 8000e02:	f00f ff7b 	bl	8010cfc <osThreadNew>
 8000e06:	4603      	mov	r3, r0
 8000e08:	4a1e      	ldr	r2, [pc, #120]	; (8000e84 <MX_FREERTOS_Init+0x11c>)
 8000e0a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000e0c:	bf00      	nop
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	08014950 	.word	0x08014950
 8000e14:	08000e89 	.word	0x08000e89
 8000e18:	24000360 	.word	0x24000360
 8000e1c:	08014974 	.word	0x08014974
 8000e20:	08000e99 	.word	0x08000e99
 8000e24:	24000364 	.word	0x24000364
 8000e28:	08014998 	.word	0x08014998
 8000e2c:	08000ea9 	.word	0x08000ea9
 8000e30:	24000368 	.word	0x24000368
 8000e34:	080149bc 	.word	0x080149bc
 8000e38:	08000eb9 	.word	0x08000eb9
 8000e3c:	2400036c 	.word	0x2400036c
 8000e40:	080149e0 	.word	0x080149e0
 8000e44:	08000ec9 	.word	0x08000ec9
 8000e48:	24000370 	.word	0x24000370
 8000e4c:	08014a04 	.word	0x08014a04
 8000e50:	08000ed9 	.word	0x08000ed9
 8000e54:	24000374 	.word	0x24000374
 8000e58:	08014a28 	.word	0x08014a28
 8000e5c:	08000ee9 	.word	0x08000ee9
 8000e60:	24000378 	.word	0x24000378
 8000e64:	08014a4c 	.word	0x08014a4c
 8000e68:	08000ef9 	.word	0x08000ef9
 8000e6c:	2400037c 	.word	0x2400037c
 8000e70:	08014a70 	.word	0x08014a70
 8000e74:	08000f09 	.word	0x08000f09
 8000e78:	24000380 	.word	0x24000380
 8000e7c:	08014a94 	.word	0x08014a94
 8000e80:	08000f19 	.word	0x08000f19
 8000e84:	24000384 	.word	0x24000384

08000e88 <PMT_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PMT_init */
  /* Infinite loop */
	for (;;) {
		osDelay(1);
 8000e90:	2001      	movs	r0, #1
 8000e92:	f00f ffc5 	bl	8010e20 <osDelay>
 8000e96:	e7fb      	b.n	8000e90 <PMT_init+0x8>

08000e98 <ERPA_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */
  /* Infinite loop */
	for (;;) {
		osDelay(1);
 8000ea0:	2001      	movs	r0, #1
 8000ea2:	f00f ffbd 	bl	8010e20 <osDelay>
 8000ea6:	e7fb      	b.n	8000ea0 <ERPA_init+0x8>

08000ea8 <HK_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */
  /* Infinite loop */
	for (;;) {
		osDelay(1);
 8000eb0:	2001      	movs	r0, #1
 8000eb2:	f00f ffb5 	bl	8010e20 <osDelay>
 8000eb6:	e7fb      	b.n	8000eb0 <HK_init+0x8>

08000eb8 <AUTOINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTOINIT_init */
void AUTOINIT_init(void *argument)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTOINIT_init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ec0:	2001      	movs	r0, #1
 8000ec2:	f00f ffad 	bl	8010e20 <osDelay>
 8000ec6:	e7fb      	b.n	8000ec0 <AUTOINIT_init+0x8>

08000ec8 <AUTODEINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTODEINIT_init */
void AUTODEINIT_init(void *argument)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTODEINIT_init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ed0:	2001      	movs	r0, #1
 8000ed2:	f00f ffa5 	bl	8010e20 <osDelay>
 8000ed6:	e7fb      	b.n	8000ed0 <AUTODEINIT_init+0x8>

08000ed8 <UART_TX_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UART_TX_init */
void UART_TX_init(void *argument)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART_TX_init */
	for (;;) {
		osDelay(1);
 8000ee0:	2001      	movs	r0, #1
 8000ee2:	f00f ff9d 	bl	8010e20 <osDelay>
 8000ee6:	e7fb      	b.n	8000ee0 <UART_TX_init+0x8>

08000ee8 <Voltage_Monitor_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Voltage_Monitor_init */
void Voltage_Monitor_init(void *argument)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Voltage_Monitor_init */
	for (;;) {
		osDelay(1);
 8000ef0:	2001      	movs	r0, #1
 8000ef2:	f00f ff95 	bl	8010e20 <osDelay>
 8000ef6:	e7fb      	b.n	8000ef0 <Voltage_Monitor_init+0x8>

08000ef8 <STOP_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_STOP_init */
void STOP_init(void *argument)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN STOP_init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f00:	2001      	movs	r0, #1
 8000f02:	f00f ff8d 	bl	8010e20 <osDelay>
 8000f06:	e7fb      	b.n	8000f00 <STOP_init+0x8>

08000f08 <Science_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Science_init */
void Science_init(void *argument)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Science_init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f10:	2001      	movs	r0, #1
 8000f12:	f00f ff85 	bl	8010e20 <osDelay>
 8000f16:	e7fb      	b.n	8000f10 <Science_init+0x8>

08000f18 <Idle_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Idle_init */
void Idle_init(void *argument)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Idle_init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f20:	2001      	movs	r0, #1
 8000f22:	f00f ff7d 	bl	8010e20 <osDelay>
 8000f26:	e7fb      	b.n	8000f20 <Idle_init+0x8>

08000f28 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b08a      	sub	sp, #40	; 0x28
 8000f2c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2e:	f107 0314 	add.w	r3, r7, #20
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	605a      	str	r2, [r3, #4]
 8000f38:	609a      	str	r2, [r3, #8]
 8000f3a:	60da      	str	r2, [r3, #12]
 8000f3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f3e:	4b34      	ldr	r3, [pc, #208]	; (8001010 <MX_GPIO_Init+0xe8>)
 8000f40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f44:	4a32      	ldr	r2, [pc, #200]	; (8001010 <MX_GPIO_Init+0xe8>)
 8000f46:	f043 0304 	orr.w	r3, r3, #4
 8000f4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f4e:	4b30      	ldr	r3, [pc, #192]	; (8001010 <MX_GPIO_Init+0xe8>)
 8000f50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f54:	f003 0304 	and.w	r3, r3, #4
 8000f58:	613b      	str	r3, [r7, #16]
 8000f5a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f5c:	4b2c      	ldr	r3, [pc, #176]	; (8001010 <MX_GPIO_Init+0xe8>)
 8000f5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f62:	4a2b      	ldr	r2, [pc, #172]	; (8001010 <MX_GPIO_Init+0xe8>)
 8000f64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f6c:	4b28      	ldr	r3, [pc, #160]	; (8001010 <MX_GPIO_Init+0xe8>)
 8000f6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f76:	60fb      	str	r3, [r7, #12]
 8000f78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7a:	4b25      	ldr	r3, [pc, #148]	; (8001010 <MX_GPIO_Init+0xe8>)
 8000f7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f80:	4a23      	ldr	r2, [pc, #140]	; (8001010 <MX_GPIO_Init+0xe8>)
 8000f82:	f043 0301 	orr.w	r3, r3, #1
 8000f86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f8a:	4b21      	ldr	r3, [pc, #132]	; (8001010 <MX_GPIO_Init+0xe8>)
 8000f8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f90:	f003 0301 	and.w	r3, r3, #1
 8000f94:	60bb      	str	r3, [r7, #8]
 8000f96:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f98:	4b1d      	ldr	r3, [pc, #116]	; (8001010 <MX_GPIO_Init+0xe8>)
 8000f9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f9e:	4a1c      	ldr	r2, [pc, #112]	; (8001010 <MX_GPIO_Init+0xe8>)
 8000fa0:	f043 0302 	orr.w	r3, r3, #2
 8000fa4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fa8:	4b19      	ldr	r3, [pc, #100]	; (8001010 <MX_GPIO_Init+0xe8>)
 8000faa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fae:	f003 0302 	and.w	r3, r3, #2
 8000fb2:	607b      	str	r3, [r7, #4]
 8000fb4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8000fbc:	4815      	ldr	r0, [pc, #84]	; (8001014 <MX_GPIO_Init+0xec>)
 8000fbe:	f007 f9e1 	bl	8008384 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	2164      	movs	r1, #100	; 0x64
 8000fc6:	4814      	ldr	r0, [pc, #80]	; (8001018 <MX_GPIO_Init+0xf0>)
 8000fc8:	f007 f9dc 	bl	8008384 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8000fcc:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8000fd0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fde:	f107 0314 	add.w	r3, r7, #20
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	480b      	ldr	r0, [pc, #44]	; (8001014 <MX_GPIO_Init+0xec>)
 8000fe6:	f007 f81d 	bl	8008024 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8000fea:	2364      	movs	r3, #100	; 0x64
 8000fec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ffa:	f107 0314 	add.w	r3, r7, #20
 8000ffe:	4619      	mov	r1, r3
 8001000:	4805      	ldr	r0, [pc, #20]	; (8001018 <MX_GPIO_Init+0xf0>)
 8001002:	f007 f80f 	bl	8008024 <HAL_GPIO_Init>

}
 8001006:	bf00      	nop
 8001008:	3728      	adds	r7, #40	; 0x28
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	58024400 	.word	0x58024400
 8001014:	58020800 	.word	0x58020800
 8001018:	58020400 	.word	0x58020400

0800101c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001020:	4b1c      	ldr	r3, [pc, #112]	; (8001094 <MX_I2C1_Init+0x78>)
 8001022:	4a1d      	ldr	r2, [pc, #116]	; (8001098 <MX_I2C1_Init+0x7c>)
 8001024:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0020081F;
 8001026:	4b1b      	ldr	r3, [pc, #108]	; (8001094 <MX_I2C1_Init+0x78>)
 8001028:	4a1c      	ldr	r2, [pc, #112]	; (800109c <MX_I2C1_Init+0x80>)
 800102a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800102c:	4b19      	ldr	r3, [pc, #100]	; (8001094 <MX_I2C1_Init+0x78>)
 800102e:	2200      	movs	r2, #0
 8001030:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001032:	4b18      	ldr	r3, [pc, #96]	; (8001094 <MX_I2C1_Init+0x78>)
 8001034:	2201      	movs	r2, #1
 8001036:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001038:	4b16      	ldr	r3, [pc, #88]	; (8001094 <MX_I2C1_Init+0x78>)
 800103a:	2200      	movs	r2, #0
 800103c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800103e:	4b15      	ldr	r3, [pc, #84]	; (8001094 <MX_I2C1_Init+0x78>)
 8001040:	2200      	movs	r2, #0
 8001042:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001044:	4b13      	ldr	r3, [pc, #76]	; (8001094 <MX_I2C1_Init+0x78>)
 8001046:	2200      	movs	r2, #0
 8001048:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800104a:	4b12      	ldr	r3, [pc, #72]	; (8001094 <MX_I2C1_Init+0x78>)
 800104c:	2200      	movs	r2, #0
 800104e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001050:	4b10      	ldr	r3, [pc, #64]	; (8001094 <MX_I2C1_Init+0x78>)
 8001052:	2200      	movs	r2, #0
 8001054:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001056:	480f      	ldr	r0, [pc, #60]	; (8001094 <MX_I2C1_Init+0x78>)
 8001058:	f007 f9ae 	bl	80083b8 <HAL_I2C_Init>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001062:	f000 fe23 	bl	8001cac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001066:	2100      	movs	r1, #0
 8001068:	480a      	ldr	r0, [pc, #40]	; (8001094 <MX_I2C1_Init+0x78>)
 800106a:	f007 fa41 	bl	80084f0 <HAL_I2CEx_ConfigAnalogFilter>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001074:	f000 fe1a 	bl	8001cac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001078:	2100      	movs	r1, #0
 800107a:	4806      	ldr	r0, [pc, #24]	; (8001094 <MX_I2C1_Init+0x78>)
 800107c:	f007 fa83 	bl	8008586 <HAL_I2CEx_ConfigDigitalFilter>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001086:	f000 fe11 	bl	8001cac <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 800108a:	2001      	movs	r0, #1
 800108c:	f007 fac8 	bl	8008620 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001090:	bf00      	nop
 8001092:	bd80      	pop	{r7, pc}
 8001094:	24000388 	.word	0x24000388
 8001098:	40005400 	.word	0x40005400
 800109c:	0020081f 	.word	0x0020081f

080010a0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b0ba      	sub	sp, #232	; 0xe8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010b8:	f107 0310 	add.w	r3, r7, #16
 80010bc:	22c0      	movs	r2, #192	; 0xc0
 80010be:	2100      	movs	r1, #0
 80010c0:	4618      	mov	r0, r3
 80010c2:	f012 fe13 	bl	8013cec <memset>
  if(i2cHandle->Instance==I2C1)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a27      	ldr	r2, [pc, #156]	; (8001168 <HAL_I2C_MspInit+0xc8>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d146      	bne.n	800115e <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80010d0:	f04f 0208 	mov.w	r2, #8
 80010d4:	f04f 0300 	mov.w	r3, #0
 80010d8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80010dc:	2300      	movs	r3, #0
 80010de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010e2:	f107 0310 	add.w	r3, r7, #16
 80010e6:	4618      	mov	r0, r3
 80010e8:	f008 fb20 	bl	800972c <HAL_RCCEx_PeriphCLKConfig>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80010f2:	f000 fddb 	bl	8001cac <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f6:	4b1d      	ldr	r3, [pc, #116]	; (800116c <HAL_I2C_MspInit+0xcc>)
 80010f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010fc:	4a1b      	ldr	r2, [pc, #108]	; (800116c <HAL_I2C_MspInit+0xcc>)
 80010fe:	f043 0302 	orr.w	r3, r3, #2
 8001102:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001106:	4b19      	ldr	r3, [pc, #100]	; (800116c <HAL_I2C_MspInit+0xcc>)
 8001108:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800110c:	f003 0302 	and.w	r3, r3, #2
 8001110:	60fb      	str	r3, [r7, #12]
 8001112:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001114:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001118:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800111c:	2312      	movs	r3, #18
 800111e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001128:	2300      	movs	r3, #0
 800112a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800112e:	2304      	movs	r3, #4
 8001130:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001134:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001138:	4619      	mov	r1, r3
 800113a:	480d      	ldr	r0, [pc, #52]	; (8001170 <HAL_I2C_MspInit+0xd0>)
 800113c:	f006 ff72 	bl	8008024 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001140:	4b0a      	ldr	r3, [pc, #40]	; (800116c <HAL_I2C_MspInit+0xcc>)
 8001142:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001146:	4a09      	ldr	r2, [pc, #36]	; (800116c <HAL_I2C_MspInit+0xcc>)
 8001148:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800114c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001150:	4b06      	ldr	r3, [pc, #24]	; (800116c <HAL_I2C_MspInit+0xcc>)
 8001152:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001156:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800115a:	60bb      	str	r3, [r7, #8]
 800115c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800115e:	bf00      	nop
 8001160:	37e8      	adds	r7, #232	; 0xe8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40005400 	.word	0x40005400
 800116c:	58024400 	.word	0x58024400
 8001170:	58020400 	.word	0x58020400

08001174 <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001174:	b580      	push	{r7, lr}
 8001176:	b088      	sub	sp, #32
 8001178:	af02      	add	r7, sp, #8
 800117a:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 800117c:	2201      	movs	r2, #1
 800117e:	49f2      	ldr	r1, [pc, #968]	; (8001548 <HAL_UART_RxCpltCallback+0x3d4>)
 8001180:	48f2      	ldr	r0, [pc, #968]	; (800154c <HAL_UART_RxCpltCallback+0x3d8>)
 8001182:	f00d f927 	bl	800e3d4 <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 8001186:	4bf0      	ldr	r3, [pc, #960]	; (8001548 <HAL_UART_RxCpltCallback+0x3d4>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 800118c:	7bfb      	ldrb	r3, [r7, #15]
 800118e:	2be0      	cmp	r3, #224	; 0xe0
 8001190:	f200 83ff 	bhi.w	8001992 <HAL_UART_RxCpltCallback+0x81e>
 8001194:	a201      	add	r2, pc, #4	; (adr r2, 800119c <HAL_UART_RxCpltCallback+0x28>)
 8001196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800119a:	bf00      	nop
 800119c:	08001535 	.word	0x08001535
 80011a0:	08001579 	.word	0x08001579
 80011a4:	080015e9 	.word	0x080015e9
 80011a8:	08001623 	.word	0x08001623
 80011ac:	0800165b 	.word	0x0800165b
 80011b0:	08001695 	.word	0x08001695
 80011b4:	080016d1 	.word	0x080016d1
 80011b8:	0800170d 	.word	0x0800170d
 80011bc:	08001747 	.word	0x08001747
 80011c0:	0800177b 	.word	0x0800177b
 80011c4:	080017a7 	.word	0x080017a7
 80011c8:	080017d3 	.word	0x080017d3
 80011cc:	080017fd 	.word	0x080017fd
 80011d0:	080018d9 	.word	0x080018d9
 80011d4:	08001941 	.word	0x08001941
 80011d8:	08001969 	.word	0x08001969
 80011dc:	08001521 	.word	0x08001521
 80011e0:	0800155d 	.word	0x0800155d
 80011e4:	080015cb 	.word	0x080015cb
 80011e8:	08001607 	.word	0x08001607
 80011ec:	0800163f 	.word	0x0800163f
 80011f0:	08001677 	.word	0x08001677
 80011f4:	080016b3 	.word	0x080016b3
 80011f8:	080016ef 	.word	0x080016ef
 80011fc:	0800172b 	.word	0x0800172b
 8001200:	08001763 	.word	0x08001763
 8001204:	0800178b 	.word	0x0800178b
 8001208:	080017b7 	.word	0x080017b7
 800120c:	080017e3 	.word	0x080017e3
 8001210:	0800180b 	.word	0x0800180b
 8001214:	08001919 	.word	0x08001919
 8001218:	08001993 	.word	0x08001993
 800121c:	08001993 	.word	0x08001993
 8001220:	08001993 	.word	0x08001993
 8001224:	08001993 	.word	0x08001993
 8001228:	08001993 	.word	0x08001993
 800122c:	08001993 	.word	0x08001993
 8001230:	08001993 	.word	0x08001993
 8001234:	08001993 	.word	0x08001993
 8001238:	08001993 	.word	0x08001993
 800123c:	08001993 	.word	0x08001993
 8001240:	08001993 	.word	0x08001993
 8001244:	08001993 	.word	0x08001993
 8001248:	08001993 	.word	0x08001993
 800124c:	08001993 	.word	0x08001993
 8001250:	08001993 	.word	0x08001993
 8001254:	08001993 	.word	0x08001993
 8001258:	08001993 	.word	0x08001993
 800125c:	08001993 	.word	0x08001993
 8001260:	08001993 	.word	0x08001993
 8001264:	08001993 	.word	0x08001993
 8001268:	08001993 	.word	0x08001993
 800126c:	08001993 	.word	0x08001993
 8001270:	08001993 	.word	0x08001993
 8001274:	08001993 	.word	0x08001993
 8001278:	08001993 	.word	0x08001993
 800127c:	08001993 	.word	0x08001993
 8001280:	08001993 	.word	0x08001993
 8001284:	08001993 	.word	0x08001993
 8001288:	08001993 	.word	0x08001993
 800128c:	08001993 	.word	0x08001993
 8001290:	08001993 	.word	0x08001993
 8001294:	08001993 	.word	0x08001993
 8001298:	08001993 	.word	0x08001993
 800129c:	08001993 	.word	0x08001993
 80012a0:	08001993 	.word	0x08001993
 80012a4:	08001993 	.word	0x08001993
 80012a8:	08001993 	.word	0x08001993
 80012ac:	08001993 	.word	0x08001993
 80012b0:	08001993 	.word	0x08001993
 80012b4:	08001993 	.word	0x08001993
 80012b8:	08001993 	.word	0x08001993
 80012bc:	08001993 	.word	0x08001993
 80012c0:	08001993 	.word	0x08001993
 80012c4:	08001993 	.word	0x08001993
 80012c8:	08001993 	.word	0x08001993
 80012cc:	08001993 	.word	0x08001993
 80012d0:	08001993 	.word	0x08001993
 80012d4:	08001993 	.word	0x08001993
 80012d8:	08001993 	.word	0x08001993
 80012dc:	08001993 	.word	0x08001993
 80012e0:	08001993 	.word	0x08001993
 80012e4:	08001993 	.word	0x08001993
 80012e8:	08001993 	.word	0x08001993
 80012ec:	08001993 	.word	0x08001993
 80012f0:	08001993 	.word	0x08001993
 80012f4:	08001993 	.word	0x08001993
 80012f8:	08001993 	.word	0x08001993
 80012fc:	08001993 	.word	0x08001993
 8001300:	08001993 	.word	0x08001993
 8001304:	08001993 	.word	0x08001993
 8001308:	08001993 	.word	0x08001993
 800130c:	08001993 	.word	0x08001993
 8001310:	08001993 	.word	0x08001993
 8001314:	08001993 	.word	0x08001993
 8001318:	08001993 	.word	0x08001993
 800131c:	08001993 	.word	0x08001993
 8001320:	08001993 	.word	0x08001993
 8001324:	08001993 	.word	0x08001993
 8001328:	08001993 	.word	0x08001993
 800132c:	08001993 	.word	0x08001993
 8001330:	08001993 	.word	0x08001993
 8001334:	08001993 	.word	0x08001993
 8001338:	08001993 	.word	0x08001993
 800133c:	08001993 	.word	0x08001993
 8001340:	08001993 	.word	0x08001993
 8001344:	08001993 	.word	0x08001993
 8001348:	08001993 	.word	0x08001993
 800134c:	08001993 	.word	0x08001993
 8001350:	08001993 	.word	0x08001993
 8001354:	08001993 	.word	0x08001993
 8001358:	08001993 	.word	0x08001993
 800135c:	08001993 	.word	0x08001993
 8001360:	08001993 	.word	0x08001993
 8001364:	08001993 	.word	0x08001993
 8001368:	08001993 	.word	0x08001993
 800136c:	08001993 	.word	0x08001993
 8001370:	08001993 	.word	0x08001993
 8001374:	08001993 	.word	0x08001993
 8001378:	08001993 	.word	0x08001993
 800137c:	08001993 	.word	0x08001993
 8001380:	08001993 	.word	0x08001993
 8001384:	08001993 	.word	0x08001993
 8001388:	08001993 	.word	0x08001993
 800138c:	08001993 	.word	0x08001993
 8001390:	08001993 	.word	0x08001993
 8001394:	08001993 	.word	0x08001993
 8001398:	08001993 	.word	0x08001993
 800139c:	08001993 	.word	0x08001993
 80013a0:	08001993 	.word	0x08001993
 80013a4:	08001993 	.word	0x08001993
 80013a8:	08001993 	.word	0x08001993
 80013ac:	08001993 	.word	0x08001993
 80013b0:	08001993 	.word	0x08001993
 80013b4:	08001993 	.word	0x08001993
 80013b8:	08001993 	.word	0x08001993
 80013bc:	08001993 	.word	0x08001993
 80013c0:	08001993 	.word	0x08001993
 80013c4:	08001993 	.word	0x08001993
 80013c8:	08001993 	.word	0x08001993
 80013cc:	08001993 	.word	0x08001993
 80013d0:	08001993 	.word	0x08001993
 80013d4:	08001993 	.word	0x08001993
 80013d8:	08001993 	.word	0x08001993
 80013dc:	08001993 	.word	0x08001993
 80013e0:	08001993 	.word	0x08001993
 80013e4:	08001993 	.word	0x08001993
 80013e8:	08001993 	.word	0x08001993
 80013ec:	08001993 	.word	0x08001993
 80013f0:	08001993 	.word	0x08001993
 80013f4:	08001993 	.word	0x08001993
 80013f8:	08001993 	.word	0x08001993
 80013fc:	08001993 	.word	0x08001993
 8001400:	08001993 	.word	0x08001993
 8001404:	08001993 	.word	0x08001993
 8001408:	08001993 	.word	0x08001993
 800140c:	08001993 	.word	0x08001993
 8001410:	08001993 	.word	0x08001993
 8001414:	08001993 	.word	0x08001993
 8001418:	08001993 	.word	0x08001993
 800141c:	08001993 	.word	0x08001993
 8001420:	08001993 	.word	0x08001993
 8001424:	08001993 	.word	0x08001993
 8001428:	08001993 	.word	0x08001993
 800142c:	08001993 	.word	0x08001993
 8001430:	08001993 	.word	0x08001993
 8001434:	08001993 	.word	0x08001993
 8001438:	08001993 	.word	0x08001993
 800143c:	08001993 	.word	0x08001993
 8001440:	08001993 	.word	0x08001993
 8001444:	08001993 	.word	0x08001993
 8001448:	08001993 	.word	0x08001993
 800144c:	08001993 	.word	0x08001993
 8001450:	08001993 	.word	0x08001993
 8001454:	08001993 	.word	0x08001993
 8001458:	0800198d 	.word	0x0800198d
 800145c:	08001993 	.word	0x08001993
 8001460:	08001993 	.word	0x08001993
 8001464:	08001993 	.word	0x08001993
 8001468:	08001993 	.word	0x08001993
 800146c:	08001993 	.word	0x08001993
 8001470:	08001993 	.word	0x08001993
 8001474:	08001993 	.word	0x08001993
 8001478:	08001993 	.word	0x08001993
 800147c:	08001993 	.word	0x08001993
 8001480:	08001993 	.word	0x08001993
 8001484:	08001993 	.word	0x08001993
 8001488:	08001993 	.word	0x08001993
 800148c:	08001993 	.word	0x08001993
 8001490:	08001993 	.word	0x08001993
 8001494:	08001993 	.word	0x08001993
 8001498:	0800199b 	.word	0x0800199b
 800149c:	08001993 	.word	0x08001993
 80014a0:	08001993 	.word	0x08001993
 80014a4:	08001993 	.word	0x08001993
 80014a8:	08001993 	.word	0x08001993
 80014ac:	08001993 	.word	0x08001993
 80014b0:	08001993 	.word	0x08001993
 80014b4:	08001993 	.word	0x08001993
 80014b8:	08001993 	.word	0x08001993
 80014bc:	08001993 	.word	0x08001993
 80014c0:	08001993 	.word	0x08001993
 80014c4:	08001993 	.word	0x08001993
 80014c8:	08001993 	.word	0x08001993
 80014cc:	08001993 	.word	0x08001993
 80014d0:	08001993 	.word	0x08001993
 80014d4:	08001993 	.word	0x08001993
 80014d8:	0800199b 	.word	0x0800199b
 80014dc:	08001985 	.word	0x08001985
 80014e0:	08001993 	.word	0x08001993
 80014e4:	08001993 	.word	0x08001993
 80014e8:	08001993 	.word	0x08001993
 80014ec:	08001993 	.word	0x08001993
 80014f0:	08001993 	.word	0x08001993
 80014f4:	08001993 	.word	0x08001993
 80014f8:	08001993 	.word	0x08001993
 80014fc:	08001993 	.word	0x08001993
 8001500:	08001993 	.word	0x08001993
 8001504:	08001993 	.word	0x08001993
 8001508:	08001993 	.word	0x08001993
 800150c:	08001993 	.word	0x08001993
 8001510:	08001993 	.word	0x08001993
 8001514:	08001993 	.word	0x08001993
 8001518:	08001993 	.word	0x08001993
 800151c:	0800197d 	.word	0x0800197d
	case 0x10: {
		printf("SDN1 ON\n");
 8001520:	480b      	ldr	r0, [pc, #44]	; (8001550 <HAL_UART_RxCpltCallback+0x3dc>)
 8001522:	f012 fc59 	bl	8013dd8 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8001526:	4b0b      	ldr	r3, [pc, #44]	; (8001554 <HAL_UART_RxCpltCallback+0x3e0>)
 8001528:	2104      	movs	r1, #4
 800152a:	2201      	movs	r2, #1
 800152c:	4618      	mov	r0, r3
 800152e:	f006 ff29 	bl	8008384 <HAL_GPIO_WritePin>
		break;
 8001532:	e23b      	b.n	80019ac <HAL_UART_RxCpltCallback+0x838>
	}
	case 0x00: {
		printf("SDN1 OFF\n");
 8001534:	4808      	ldr	r0, [pc, #32]	; (8001558 <HAL_UART_RxCpltCallback+0x3e4>)
 8001536:	f012 fc4f 	bl	8013dd8 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 800153a:	4b06      	ldr	r3, [pc, #24]	; (8001554 <HAL_UART_RxCpltCallback+0x3e0>)
 800153c:	2104      	movs	r1, #4
 800153e:	2200      	movs	r2, #0
 8001540:	4618      	mov	r0, r3
 8001542:	f006 ff1f 	bl	8008384 <HAL_GPIO_WritePin>
		break;
 8001546:	e231      	b.n	80019ac <HAL_UART_RxCpltCallback+0x838>
 8001548:	240003e4 	.word	0x240003e4
 800154c:	240006cc 	.word	0x240006cc
 8001550:	08014798 	.word	0x08014798
 8001554:	58020400 	.word	0x58020400
 8001558:	080147a0 	.word	0x080147a0
	}
	case 0x11: {
		printf("SYS ON PB5\n");
 800155c:	48bb      	ldr	r0, [pc, #748]	; (800184c <HAL_UART_RxCpltCallback+0x6d8>)
 800155e:	f012 fc3b 	bl	8013dd8 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8001562:	4bbb      	ldr	r3, [pc, #748]	; (8001850 <HAL_UART_RxCpltCallback+0x6dc>)
 8001564:	2120      	movs	r1, #32
 8001566:	2201      	movs	r2, #1
 8001568:	4618      	mov	r0, r3
 800156a:	f006 ff0b 	bl	8008384 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_2v5, 1);
 800156e:	2101      	movs	r1, #1
 8001570:	2008      	movs	r0, #8
 8001572:	f001 fd4d 	bl	8003010 <set_rail_monitor_enable>
		break;
 8001576:	e219      	b.n	80019ac <HAL_UART_RxCpltCallback+0x838>
	}
	case 0x01: {
		printf("SYS OFF PB5\n");
 8001578:	48b6      	ldr	r0, [pc, #728]	; (8001854 <HAL_UART_RxCpltCallback+0x6e0>)
 800157a:	f012 fc2d 	bl	8013dd8 <puts>

		// Turning off all voltage enables (including high voltages) in order from highest to lowest, including SYS_ON
		for (int i = 8; i > 0; i--) {
 800157e:	2308      	movs	r3, #8
 8001580:	617b      	str	r3, [r7, #20]
 8001582:	e00f      	b.n	80015a4 <HAL_UART_RxCpltCallback+0x430>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 8001584:	4ab4      	ldr	r2, [pc, #720]	; (8001858 <HAL_UART_RxCpltCallback+0x6e4>)
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800158c:	4ab2      	ldr	r2, [pc, #712]	; (8001858 <HAL_UART_RxCpltCallback+0x6e4>)
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	00db      	lsls	r3, r3, #3
 8001592:	4413      	add	r3, r2
 8001594:	889b      	ldrh	r3, [r3, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	4619      	mov	r1, r3
 800159a:	f006 fef3 	bl	8008384 <HAL_GPIO_WritePin>
		for (int i = 8; i > 0; i--) {
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	3b01      	subs	r3, #1
 80015a2:	617b      	str	r3, [r7, #20]
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	dcec      	bgt.n	8001584 <HAL_UART_RxCpltCallback+0x410>
		}

		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 80015aa:	2310      	movs	r3, #16
 80015ac:	613b      	str	r3, [r7, #16]
 80015ae:	e008      	b.n	80015c2 <HAL_UART_RxCpltCallback+0x44e>
			set_rail_monitor_enable(i, 0);
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	2100      	movs	r1, #0
 80015b6:	4618      	mov	r0, r3
 80015b8:	f001 fd2a 	bl	8003010 <set_rail_monitor_enable>
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	3b01      	subs	r3, #1
 80015c0:	613b      	str	r3, [r7, #16]
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	2b07      	cmp	r3, #7
 80015c6:	dcf3      	bgt.n	80015b0 <HAL_UART_RxCpltCallback+0x43c>
		}

		break;
 80015c8:	e1f0      	b.n	80019ac <HAL_UART_RxCpltCallback+0x838>
	}
	case 0x12: {
		printf("3v3 ON PC10\n");
 80015ca:	48a4      	ldr	r0, [pc, #656]	; (800185c <HAL_UART_RxCpltCallback+0x6e8>)
 80015cc:	f012 fc04 	bl	8013dd8 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 80015d0:	4ba3      	ldr	r3, [pc, #652]	; (8001860 <HAL_UART_RxCpltCallback+0x6ec>)
 80015d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015d6:	2201      	movs	r2, #1
 80015d8:	4618      	mov	r0, r3
 80015da:	f006 fed3 	bl	8008384 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, 1);
 80015de:	2101      	movs	r1, #1
 80015e0:	2009      	movs	r0, #9
 80015e2:	f001 fd15 	bl	8003010 <set_rail_monitor_enable>

		break;
 80015e6:	e1e1      	b.n	80019ac <HAL_UART_RxCpltCallback+0x838>
	}
	case 0x02: {
		printf("3v3 OFF PC10\n");
 80015e8:	489e      	ldr	r0, [pc, #632]	; (8001864 <HAL_UART_RxCpltCallback+0x6f0>)
 80015ea:	f012 fbf5 	bl	8013dd8 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 80015ee:	4b9c      	ldr	r3, [pc, #624]	; (8001860 <HAL_UART_RxCpltCallback+0x6ec>)
 80015f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015f4:	2200      	movs	r2, #0
 80015f6:	4618      	mov	r0, r3
 80015f8:	f006 fec4 	bl	8008384 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, 0);
 80015fc:	2100      	movs	r1, #0
 80015fe:	2009      	movs	r0, #9
 8001600:	f001 fd06 	bl	8003010 <set_rail_monitor_enable>
		break;
 8001604:	e1d2      	b.n	80019ac <HAL_UART_RxCpltCallback+0x838>
	}
	case 0x13: {
		printf("5v ON PC7\n");
 8001606:	4898      	ldr	r0, [pc, #608]	; (8001868 <HAL_UART_RxCpltCallback+0x6f4>)
 8001608:	f012 fbe6 	bl	8013dd8 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 800160c:	4b94      	ldr	r3, [pc, #592]	; (8001860 <HAL_UART_RxCpltCallback+0x6ec>)
 800160e:	2180      	movs	r1, #128	; 0x80
 8001610:	2201      	movs	r2, #1
 8001612:	4618      	mov	r0, r3
 8001614:	f006 feb6 	bl	8008384 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, 1);
 8001618:	2101      	movs	r1, #1
 800161a:	200a      	movs	r0, #10
 800161c:	f001 fcf8 	bl	8003010 <set_rail_monitor_enable>

		break;
 8001620:	e1c4      	b.n	80019ac <HAL_UART_RxCpltCallback+0x838>
	}
	case 0x03: {
		printf("5v OFF PC7\n");
 8001622:	4892      	ldr	r0, [pc, #584]	; (800186c <HAL_UART_RxCpltCallback+0x6f8>)
 8001624:	f012 fbd8 	bl	8013dd8 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8001628:	4b8d      	ldr	r3, [pc, #564]	; (8001860 <HAL_UART_RxCpltCallback+0x6ec>)
 800162a:	2180      	movs	r1, #128	; 0x80
 800162c:	2200      	movs	r2, #0
 800162e:	4618      	mov	r0, r3
 8001630:	f006 fea8 	bl	8008384 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, 0);
 8001634:	2100      	movs	r1, #0
 8001636:	200a      	movs	r0, #10
 8001638:	f001 fcea 	bl	8003010 <set_rail_monitor_enable>
		break;
 800163c:	e1b6      	b.n	80019ac <HAL_UART_RxCpltCallback+0x838>
	}
	case 0x14: {
		printf("n3v3 ON PC6\n");
 800163e:	488c      	ldr	r0, [pc, #560]	; (8001870 <HAL_UART_RxCpltCallback+0x6fc>)
 8001640:	f012 fbca 	bl	8013dd8 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8001644:	4b86      	ldr	r3, [pc, #536]	; (8001860 <HAL_UART_RxCpltCallback+0x6ec>)
 8001646:	2140      	movs	r1, #64	; 0x40
 8001648:	2201      	movs	r2, #1
 800164a:	4618      	mov	r0, r3
 800164c:	f006 fe9a 	bl	8008384 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, 1);
 8001650:	2101      	movs	r1, #1
 8001652:	200b      	movs	r0, #11
 8001654:	f001 fcdc 	bl	8003010 <set_rail_monitor_enable>

		break;
 8001658:	e1a8      	b.n	80019ac <HAL_UART_RxCpltCallback+0x838>
	}
	case 0x04: {
		printf("n3v3 OFF PC6\n");
 800165a:	4886      	ldr	r0, [pc, #536]	; (8001874 <HAL_UART_RxCpltCallback+0x700>)
 800165c:	f012 fbbc 	bl	8013dd8 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8001660:	4b7f      	ldr	r3, [pc, #508]	; (8001860 <HAL_UART_RxCpltCallback+0x6ec>)
 8001662:	2140      	movs	r1, #64	; 0x40
 8001664:	2200      	movs	r2, #0
 8001666:	4618      	mov	r0, r3
 8001668:	f006 fe8c 	bl	8008384 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, 0);
 800166c:	2100      	movs	r1, #0
 800166e:	200b      	movs	r0, #11
 8001670:	f001 fcce 	bl	8003010 <set_rail_monitor_enable>
		break;
 8001674:	e19a      	b.n	80019ac <HAL_UART_RxCpltCallback+0x838>
	}
	case 0x15: {
		printf("n5v ON PC8\n");
 8001676:	4880      	ldr	r0, [pc, #512]	; (8001878 <HAL_UART_RxCpltCallback+0x704>)
 8001678:	f012 fbae 	bl	8013dd8 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 800167c:	4b78      	ldr	r3, [pc, #480]	; (8001860 <HAL_UART_RxCpltCallback+0x6ec>)
 800167e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001682:	2201      	movs	r2, #1
 8001684:	4618      	mov	r0, r3
 8001686:	f006 fe7d 	bl	8008384 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, 1);
 800168a:	2101      	movs	r1, #1
 800168c:	200c      	movs	r0, #12
 800168e:	f001 fcbf 	bl	8003010 <set_rail_monitor_enable>

		break;
 8001692:	e18b      	b.n	80019ac <HAL_UART_RxCpltCallback+0x838>
	}
	case 0x05: {
		printf("n5v OFF PC8\n");
 8001694:	4879      	ldr	r0, [pc, #484]	; (800187c <HAL_UART_RxCpltCallback+0x708>)
 8001696:	f012 fb9f 	bl	8013dd8 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 800169a:	4b71      	ldr	r3, [pc, #452]	; (8001860 <HAL_UART_RxCpltCallback+0x6ec>)
 800169c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016a0:	2200      	movs	r2, #0
 80016a2:	4618      	mov	r0, r3
 80016a4:	f006 fe6e 	bl	8008384 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, 0);
 80016a8:	2100      	movs	r1, #0
 80016aa:	200c      	movs	r0, #12
 80016ac:	f001 fcb0 	bl	8003010 <set_rail_monitor_enable>
		break;
 80016b0:	e17c      	b.n	80019ac <HAL_UART_RxCpltCallback+0x838>
	}
	case 0x16: {
		printf("15v ON PC9\n");
 80016b2:	4873      	ldr	r0, [pc, #460]	; (8001880 <HAL_UART_RxCpltCallback+0x70c>)
 80016b4:	f012 fb90 	bl	8013dd8 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 80016b8:	4b69      	ldr	r3, [pc, #420]	; (8001860 <HAL_UART_RxCpltCallback+0x6ec>)
 80016ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016be:	2201      	movs	r2, #1
 80016c0:	4618      	mov	r0, r3
 80016c2:	f006 fe5f 	bl	8008384 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, 1);
 80016c6:	2101      	movs	r1, #1
 80016c8:	200d      	movs	r0, #13
 80016ca:	f001 fca1 	bl	8003010 <set_rail_monitor_enable>

		break;
 80016ce:	e16d      	b.n	80019ac <HAL_UART_RxCpltCallback+0x838>
	}
	case 0x06: {
		printf("15v OFF PC9\n");
 80016d0:	486c      	ldr	r0, [pc, #432]	; (8001884 <HAL_UART_RxCpltCallback+0x710>)
 80016d2:	f012 fb81 	bl	8013dd8 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 80016d6:	4b62      	ldr	r3, [pc, #392]	; (8001860 <HAL_UART_RxCpltCallback+0x6ec>)
 80016d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016dc:	2200      	movs	r2, #0
 80016de:	4618      	mov	r0, r3
 80016e0:	f006 fe50 	bl	8008384 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, 0);
 80016e4:	2100      	movs	r1, #0
 80016e6:	200d      	movs	r0, #13
 80016e8:	f001 fc92 	bl	8003010 <set_rail_monitor_enable>
		break;
 80016ec:	e15e      	b.n	80019ac <HAL_UART_RxCpltCallback+0x838>
	}
	case 0x17: {
		printf("n200v ON PC13\n");
 80016ee:	4866      	ldr	r0, [pc, #408]	; (8001888 <HAL_UART_RxCpltCallback+0x714>)
 80016f0:	f012 fb72 	bl	8013dd8 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 80016f4:	4b5a      	ldr	r3, [pc, #360]	; (8001860 <HAL_UART_RxCpltCallback+0x6ec>)
 80016f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016fa:	2201      	movs	r2, #1
 80016fc:	4618      	mov	r0, r3
 80016fe:	f006 fe41 	bl	8008384 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, 1);
 8001702:	2101      	movs	r1, #1
 8001704:	200f      	movs	r0, #15
 8001706:	f001 fc83 	bl	8003010 <set_rail_monitor_enable>

		break;
 800170a:	e14f      	b.n	80019ac <HAL_UART_RxCpltCallback+0x838>
	}
	case 0x07: {
		printf("n200v OFF PC13\n");
 800170c:	485f      	ldr	r0, [pc, #380]	; (800188c <HAL_UART_RxCpltCallback+0x718>)
 800170e:	f012 fb63 	bl	8013dd8 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8001712:	4b53      	ldr	r3, [pc, #332]	; (8001860 <HAL_UART_RxCpltCallback+0x6ec>)
 8001714:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001718:	2200      	movs	r2, #0
 800171a:	4618      	mov	r0, r3
 800171c:	f006 fe32 	bl	8008384 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, 0);
 8001720:	2100      	movs	r1, #0
 8001722:	200f      	movs	r0, #15
 8001724:	f001 fc74 	bl	8003010 <set_rail_monitor_enable>
		break;
 8001728:	e140      	b.n	80019ac <HAL_UART_RxCpltCallback+0x838>
	}
	case 0x18: {
		printf("800v ON PB6\n");
 800172a:	4859      	ldr	r0, [pc, #356]	; (8001890 <HAL_UART_RxCpltCallback+0x71c>)
 800172c:	f012 fb54 	bl	8013dd8 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8001730:	4b47      	ldr	r3, [pc, #284]	; (8001850 <HAL_UART_RxCpltCallback+0x6dc>)
 8001732:	2140      	movs	r1, #64	; 0x40
 8001734:	2201      	movs	r2, #1
 8001736:	4618      	mov	r0, r3
 8001738:	f006 fe24 	bl	8008384 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, 1);
 800173c:	2101      	movs	r1, #1
 800173e:	2010      	movs	r0, #16
 8001740:	f001 fc66 	bl	8003010 <set_rail_monitor_enable>

		break;
 8001744:	e132      	b.n	80019ac <HAL_UART_RxCpltCallback+0x838>
	}
	case 0x08: {
		printf("800v OFF PB6\n");
 8001746:	4853      	ldr	r0, [pc, #332]	; (8001894 <HAL_UART_RxCpltCallback+0x720>)
 8001748:	f012 fb46 	bl	8013dd8 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 800174c:	4b40      	ldr	r3, [pc, #256]	; (8001850 <HAL_UART_RxCpltCallback+0x6dc>)
 800174e:	2140      	movs	r1, #64	; 0x40
 8001750:	2200      	movs	r2, #0
 8001752:	4618      	mov	r0, r3
 8001754:	f006 fe16 	bl	8008384 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, 0);
 8001758:	2100      	movs	r1, #0
 800175a:	2010      	movs	r0, #16
 800175c:	f001 fc58 	bl	8003010 <set_rail_monitor_enable>
		break;
 8001760:	e124      	b.n	80019ac <HAL_UART_RxCpltCallback+0x838>
	}
	case 0x19: {
		printf("AUTOSWEEP ON\n");
 8001762:	484d      	ldr	r0, [pc, #308]	; (8001898 <HAL_UART_RxCpltCallback+0x724>)
 8001764:	f012 fb38 	bl	8013dd8 <puts>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 8001768:	2300      	movs	r3, #0
 800176a:	9300      	str	r3, [sp, #0]
 800176c:	2320      	movs	r3, #32
 800176e:	4a4b      	ldr	r2, [pc, #300]	; (800189c <HAL_UART_RxCpltCallback+0x728>)
 8001770:	2100      	movs	r1, #0
 8001772:	484b      	ldr	r0, [pc, #300]	; (80018a0 <HAL_UART_RxCpltCallback+0x72c>)
 8001774:	f003 fa82 	bl	8004c7c <HAL_DAC_Start_DMA>
		break;
 8001778:	e118      	b.n	80019ac <HAL_UART_RxCpltCallback+0x838>
	}
	case 0x09: {
		printf("AUTOSWEEP OFF\n");
 800177a:	484a      	ldr	r0, [pc, #296]	; (80018a4 <HAL_UART_RxCpltCallback+0x730>)
 800177c:	f012 fb2c 	bl	8013dd8 <puts>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8001780:	2100      	movs	r1, #0
 8001782:	4847      	ldr	r0, [pc, #284]	; (80018a0 <HAL_UART_RxCpltCallback+0x72c>)
 8001784:	f003 fb3a 	bl	8004dfc <HAL_DAC_Stop_DMA>
		break;
 8001788:	e110      	b.n	80019ac <HAL_UART_RxCpltCallback+0x838>
	}
	case 0x1A: {
		printf("ERPA ON\n");
 800178a:	4847      	ldr	r0, [pc, #284]	; (80018a8 <HAL_UART_RxCpltCallback+0x734>)
 800178c:	f012 fb24 	bl	8013dd8 <puts>
		HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8001790:	210c      	movs	r1, #12
 8001792:	4846      	ldr	r0, [pc, #280]	; (80018ac <HAL_UART_RxCpltCallback+0x738>)
 8001794:	f00b f934 	bl	800ca00 <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(event_flags, ERPA_FLAG_ID);
 8001798:	4b45      	ldr	r3, [pc, #276]	; (80018b0 <HAL_UART_RxCpltCallback+0x73c>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2102      	movs	r1, #2
 800179e:	4618      	mov	r0, r3
 80017a0:	f00f fb98 	bl	8010ed4 <osEventFlagsSet>
		break;
 80017a4:	e102      	b.n	80019ac <HAL_UART_RxCpltCallback+0x838>
	}
	case 0x0A: {
		printf("ERPA OFF\n");
 80017a6:	4843      	ldr	r0, [pc, #268]	; (80018b4 <HAL_UART_RxCpltCallback+0x740>)
 80017a8:	f012 fb16 	bl	8013dd8 <puts>
		HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);
 80017ac:	210c      	movs	r1, #12
 80017ae:	483f      	ldr	r0, [pc, #252]	; (80018ac <HAL_UART_RxCpltCallback+0x738>)
 80017b0:	f00b fa80 	bl	800ccb4 <HAL_TIM_OC_Stop_IT>
		break;
 80017b4:	e0fa      	b.n	80019ac <HAL_UART_RxCpltCallback+0x838>
	}
	case 0x1B: {
		printf("PMT ON\n");
 80017b6:	4840      	ldr	r0, [pc, #256]	; (80018b8 <HAL_UART_RxCpltCallback+0x744>)
 80017b8:	f012 fb0e 	bl	8013dd8 <puts>
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 80017bc:	2100      	movs	r1, #0
 80017be:	483f      	ldr	r0, [pc, #252]	; (80018bc <HAL_UART_RxCpltCallback+0x748>)
 80017c0:	f00b f91e 	bl	800ca00 <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(event_flags, PMT_FLAG_ID);
 80017c4:	4b3a      	ldr	r3, [pc, #232]	; (80018b0 <HAL_UART_RxCpltCallback+0x73c>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2101      	movs	r1, #1
 80017ca:	4618      	mov	r0, r3
 80017cc:	f00f fb82 	bl	8010ed4 <osEventFlagsSet>
		break;
 80017d0:	e0ec      	b.n	80019ac <HAL_UART_RxCpltCallback+0x838>
	}
	case 0x0B: {
		printf("PMT OFF\n");
 80017d2:	483b      	ldr	r0, [pc, #236]	; (80018c0 <HAL_UART_RxCpltCallback+0x74c>)
 80017d4:	f012 fb00 	bl	8013dd8 <puts>
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 80017d8:	2100      	movs	r1, #0
 80017da:	4838      	ldr	r0, [pc, #224]	; (80018bc <HAL_UART_RxCpltCallback+0x748>)
 80017dc:	f00b fa6a 	bl	800ccb4 <HAL_TIM_OC_Stop_IT>
		break;
 80017e0:	e0e4      	b.n	80019ac <HAL_UART_RxCpltCallback+0x838>
	}
	case 0x1C: {
		printf("HK ON \n");
 80017e2:	4838      	ldr	r0, [pc, #224]	; (80018c4 <HAL_UART_RxCpltCallback+0x750>)
 80017e4:	f012 faf8 	bl	8013dd8 <puts>
		osEventFlagsSet(event_flags, HK_FLAG_ID);
 80017e8:	4b31      	ldr	r3, [pc, #196]	; (80018b0 <HAL_UART_RxCpltCallback+0x73c>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2104      	movs	r1, #4
 80017ee:	4618      	mov	r0, r3
 80017f0:	f00f fb70 	bl	8010ed4 <osEventFlagsSet>
		HK_ENABLED = 1;
 80017f4:	4b34      	ldr	r3, [pc, #208]	; (80018c8 <HAL_UART_RxCpltCallback+0x754>)
 80017f6:	2201      	movs	r2, #1
 80017f8:	701a      	strb	r2, [r3, #0]
		break;
 80017fa:	e0d7      	b.n	80019ac <HAL_UART_RxCpltCallback+0x838>
	}
	case 0x0C: {
		printf("HK OFF\n");
 80017fc:	4833      	ldr	r0, [pc, #204]	; (80018cc <HAL_UART_RxCpltCallback+0x758>)
 80017fe:	f012 faeb 	bl	8013dd8 <puts>
		HK_ENABLED = 0;
 8001802:	4b31      	ldr	r3, [pc, #196]	; (80018c8 <HAL_UART_RxCpltCallback+0x754>)
 8001804:	2200      	movs	r2, #0
 8001806:	701a      	strb	r2, [r3, #0]
		break;
 8001808:	e0d0      	b.n	80019ac <HAL_UART_RxCpltCallback+0x838>
	}
	case 0x1D: {
		printf("Step Up\n");
 800180a:	4831      	ldr	r0, [pc, #196]	; (80018d0 <HAL_UART_RxCpltCallback+0x75c>)
 800180c:	f012 fae4 	bl	8013dd8 <puts>
		if (step < 17) {
 8001810:	4b30      	ldr	r3, [pc, #192]	; (80018d4 <HAL_UART_RxCpltCallback+0x760>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	b2db      	uxtb	r3, r3
 8001816:	2b10      	cmp	r3, #16
 8001818:	f200 80c1 	bhi.w	800199e <HAL_UART_RxCpltCallback+0x82a>
			step += 2;
 800181c:	4b2d      	ldr	r3, [pc, #180]	; (80018d4 <HAL_UART_RxCpltCallback+0x760>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	b2db      	uxtb	r3, r3
 8001822:	3302      	adds	r3, #2
 8001824:	b2da      	uxtb	r2, r3
 8001826:	4b2b      	ldr	r3, [pc, #172]	; (80018d4 <HAL_UART_RxCpltCallback+0x760>)
 8001828:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 800182a:	4b2a      	ldr	r3, [pc, #168]	; (80018d4 <HAL_UART_RxCpltCallback+0x760>)
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	b2db      	uxtb	r3, r3
 8001830:	461a      	mov	r2, r3
 8001832:	4b1a      	ldr	r3, [pc, #104]	; (800189c <HAL_UART_RxCpltCallback+0x728>)
 8001834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001838:	2200      	movs	r2, #0
 800183a:	2100      	movs	r1, #0
 800183c:	4818      	ldr	r0, [pc, #96]	; (80018a0 <HAL_UART_RxCpltCallback+0x72c>)
 800183e:	f003 fb80 	bl	8004f42 <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8001842:	2100      	movs	r1, #0
 8001844:	4816      	ldr	r0, [pc, #88]	; (80018a0 <HAL_UART_RxCpltCallback+0x72c>)
 8001846:	f003 f9c1 	bl	8004bcc <HAL_DAC_Start>
		}
		break;
 800184a:	e0a8      	b.n	800199e <HAL_UART_RxCpltCallback+0x82a>
 800184c:	080147ac 	.word	0x080147ac
 8001850:	58020400 	.word	0x58020400
 8001854:	080147b8 	.word	0x080147b8
 8001858:	08014ab8 	.word	0x08014ab8
 800185c:	080147c4 	.word	0x080147c4
 8001860:	58020800 	.word	0x58020800
 8001864:	080147d0 	.word	0x080147d0
 8001868:	080147e0 	.word	0x080147e0
 800186c:	080147ec 	.word	0x080147ec
 8001870:	080147f8 	.word	0x080147f8
 8001874:	08014804 	.word	0x08014804
 8001878:	08014814 	.word	0x08014814
 800187c:	08014820 	.word	0x08014820
 8001880:	0801482c 	.word	0x0801482c
 8001884:	08014838 	.word	0x08014838
 8001888:	08014844 	.word	0x08014844
 800188c:	08014854 	.word	0x08014854
 8001890:	08014864 	.word	0x08014864
 8001894:	08014870 	.word	0x08014870
 8001898:	08014880 	.word	0x08014880
 800189c:	24000000 	.word	0x24000000
 80018a0:	240002d4 	.word	0x240002d4
 80018a4:	08014890 	.word	0x08014890
 80018a8:	080148a0 	.word	0x080148a0
 80018ac:	24000634 	.word	0x24000634
 80018b0:	240003dc 	.word	0x240003dc
 80018b4:	080148a8 	.word	0x080148a8
 80018b8:	080148b4 	.word	0x080148b4
 80018bc:	240005e8 	.word	0x240005e8
 80018c0:	080148bc 	.word	0x080148bc
 80018c4:	080148c4 	.word	0x080148c4
 80018c8:	24000424 	.word	0x24000424
 80018cc:	080148cc 	.word	0x080148cc
 80018d0:	080148d4 	.word	0x080148d4
 80018d4:	24000080 	.word	0x24000080
	}
	case 0x0D: {
		printf("Step Down\n");
 80018d8:	4836      	ldr	r0, [pc, #216]	; (80019b4 <HAL_UART_RxCpltCallback+0x840>)
 80018da:	f012 fa7d 	bl	8013dd8 <puts>
		if (step > 3) {
 80018de:	4b36      	ldr	r3, [pc, #216]	; (80019b8 <HAL_UART_RxCpltCallback+0x844>)
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	2b03      	cmp	r3, #3
 80018e6:	d95c      	bls.n	80019a2 <HAL_UART_RxCpltCallback+0x82e>
			step -= 2;
 80018e8:	4b33      	ldr	r3, [pc, #204]	; (80019b8 <HAL_UART_RxCpltCallback+0x844>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	3b02      	subs	r3, #2
 80018f0:	b2da      	uxtb	r2, r3
 80018f2:	4b31      	ldr	r3, [pc, #196]	; (80019b8 <HAL_UART_RxCpltCallback+0x844>)
 80018f4:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 80018f6:	4b30      	ldr	r3, [pc, #192]	; (80019b8 <HAL_UART_RxCpltCallback+0x844>)
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	461a      	mov	r2, r3
 80018fe:	4b2f      	ldr	r3, [pc, #188]	; (80019bc <HAL_UART_RxCpltCallback+0x848>)
 8001900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001904:	2200      	movs	r2, #0
 8001906:	2100      	movs	r1, #0
 8001908:	482d      	ldr	r0, [pc, #180]	; (80019c0 <HAL_UART_RxCpltCallback+0x84c>)
 800190a:	f003 fb1a 	bl	8004f42 <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800190e:	2100      	movs	r1, #0
 8001910:	482b      	ldr	r0, [pc, #172]	; (80019c0 <HAL_UART_RxCpltCallback+0x84c>)
 8001912:	f003 f95b 	bl	8004bcc <HAL_DAC_Start>
		}
		break;
 8001916:	e044      	b.n	80019a2 <HAL_UART_RxCpltCallback+0x82e>
	}
	case 0x1E: {
		printf("Factor Up\n");
 8001918:	482a      	ldr	r0, [pc, #168]	; (80019c4 <HAL_UART_RxCpltCallback+0x850>)
 800191a:	f012 fa5d 	bl	8013dd8 <puts>
		if (cadence <= 50000) {
 800191e:	4b2a      	ldr	r3, [pc, #168]	; (80019c8 <HAL_UART_RxCpltCallback+0x854>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001926:	4293      	cmp	r3, r2
 8001928:	d83d      	bhi.n	80019a6 <HAL_UART_RxCpltCallback+0x832>
			cadence *= 2;
 800192a:	4b27      	ldr	r3, [pc, #156]	; (80019c8 <HAL_UART_RxCpltCallback+0x854>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	4a25      	ldr	r2, [pc, #148]	; (80019c8 <HAL_UART_RxCpltCallback+0x854>)
 8001932:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8001934:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001938:	4b23      	ldr	r3, [pc, #140]	; (80019c8 <HAL_UART_RxCpltCallback+0x854>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 800193e:	e032      	b.n	80019a6 <HAL_UART_RxCpltCallback+0x832>
	}
	case 0x0E: {
		printf("Factor Down\n");
 8001940:	4822      	ldr	r0, [pc, #136]	; (80019cc <HAL_UART_RxCpltCallback+0x858>)
 8001942:	f012 fa49 	bl	8013dd8 <puts>
		if (cadence >= 6250) {
 8001946:	4b20      	ldr	r3, [pc, #128]	; (80019c8 <HAL_UART_RxCpltCallback+0x854>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f641 0269 	movw	r2, #6249	; 0x1869
 800194e:	4293      	cmp	r3, r2
 8001950:	d92b      	bls.n	80019aa <HAL_UART_RxCpltCallback+0x836>
			cadence /= 2;
 8001952:	4b1d      	ldr	r3, [pc, #116]	; (80019c8 <HAL_UART_RxCpltCallback+0x854>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	085b      	lsrs	r3, r3, #1
 8001958:	4a1b      	ldr	r2, [pc, #108]	; (80019c8 <HAL_UART_RxCpltCallback+0x854>)
 800195a:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 800195c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001960:	4b19      	ldr	r3, [pc, #100]	; (80019c8 <HAL_UART_RxCpltCallback+0x854>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8001966:	e020      	b.n	80019aa <HAL_UART_RxCpltCallback+0x836>
	}
	case 0x0F: {
		printf("Enter STOP mode\n");
 8001968:	4819      	ldr	r0, [pc, #100]	; (80019d0 <HAL_UART_RxCpltCallback+0x85c>)
 800196a:	f012 fa35 	bl	8013dd8 <puts>
		osEventFlagsSet(event_flags, STOP_FLAG);
 800196e:	4b19      	ldr	r3, [pc, #100]	; (80019d4 <HAL_UART_RxCpltCallback+0x860>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2116      	movs	r1, #22
 8001974:	4618      	mov	r0, r3
 8001976:	f00f faad 	bl	8010ed4 <osEventFlagsSet>
		break;
 800197a:	e017      	b.n	80019ac <HAL_UART_RxCpltCallback+0x838>
	}
	case 0xE0: {
		printf("Auto Init\n");
 800197c:	4816      	ldr	r0, [pc, #88]	; (80019d8 <HAL_UART_RxCpltCallback+0x864>)
 800197e:	f012 fa2b 	bl	8013dd8 <puts>
		// TODO: set a flag to start it
		break;
 8001982:	e013      	b.n	80019ac <HAL_UART_RxCpltCallback+0x838>
	}
	case 0xD0: {
		printf("Auto Deinit\n");
 8001984:	4815      	ldr	r0, [pc, #84]	; (80019dc <HAL_UART_RxCpltCallback+0x868>)
 8001986:	f012 fa27 	bl	8013dd8 <puts>
		// TODO: set a flag to start it
		break;
 800198a:	e00f      	b.n	80019ac <HAL_UART_RxCpltCallback+0x838>
	}
	case 0xAF: {
		sync();
 800198c:	f000 f946 	bl	8001c1c <sync>
		break;
 8001990:	e00c      	b.n	80019ac <HAL_UART_RxCpltCallback+0x838>
	case 0xCF: {
		// TODO: set a flag to start idle mode
		break;
	}
	default: {
		printf("Unknown Command\n");
 8001992:	4813      	ldr	r0, [pc, #76]	; (80019e0 <HAL_UART_RxCpltCallback+0x86c>)
 8001994:	f012 fa20 	bl	8013dd8 <puts>
		break;
 8001998:	e008      	b.n	80019ac <HAL_UART_RxCpltCallback+0x838>
		break;
 800199a:	bf00      	nop
 800199c:	e006      	b.n	80019ac <HAL_UART_RxCpltCallback+0x838>
		break;
 800199e:	bf00      	nop
 80019a0:	e004      	b.n	80019ac <HAL_UART_RxCpltCallback+0x838>
		break;
 80019a2:	bf00      	nop
 80019a4:	e002      	b.n	80019ac <HAL_UART_RxCpltCallback+0x838>
		break;
 80019a6:	bf00      	nop
 80019a8:	e000      	b.n	80019ac <HAL_UART_RxCpltCallback+0x838>
		break;
 80019aa:	bf00      	nop
	}
	}
}
 80019ac:	bf00      	nop
 80019ae:	3718      	adds	r7, #24
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	080148dc 	.word	0x080148dc
 80019b8:	24000080 	.word	0x24000080
 80019bc:	24000000 	.word	0x24000000
 80019c0:	240002d4 	.word	0x240002d4
 80019c4:	080148e8 	.word	0x080148e8
 80019c8:	24000084 	.word	0x24000084
 80019cc:	080148f4 	.word	0x080148f4
 80019d0:	08014900 	.word	0x08014900
 80019d4:	240003dc 	.word	0x240003dc
 80019d8:	08014910 	.word	0x08014910
 80019dc:	0801491c 	.word	0x0801491c
 80019e0:	08014928 	.word	0x08014928

080019e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019e8:	f001 fb5c 	bl	80030a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019ec:	f000 f826 	bl	8001a3c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80019f0:	f000 f8a4 	bl	8001b3c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019f4:	f7ff fa98 	bl	8000f28 <MX_GPIO_Init>
  MX_DMA_Init();
 80019f8:	f7ff f976 	bl	8000ce8 <MX_DMA_Init>
  MX_TIM3_Init();
 80019fc:	f000 ff2e 	bl	800285c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001a00:	f001 f85a 	bl	8002ab8 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001a04:	f7ff fb0a 	bl	800101c <MX_I2C1_Init>
  MX_SPI2_Init();
 8001a08:	f000 fa80 	bl	8001f0c <MX_SPI2_Init>
  MX_TIM2_Init();
 8001a0c:	f000 feb0 	bl	8002770 <MX_TIM2_Init>
  MX_TIM1_Init();
 8001a10:	f000 fe00 	bl	8002614 <MX_TIM1_Init>
  MX_ADC3_Init();
 8001a14:	f7fe ff08 	bl	8000828 <MX_ADC3_Init>
  MX_ADC1_Init();
 8001a18:	f7fe fde4 	bl	80005e4 <MX_ADC1_Init>
  MX_DAC1_Init();
 8001a1c:	f7ff f8b0 	bl	8000b80 <MX_DAC1_Init>
  MX_SPI1_Init();
 8001a20:	f000 fa1c 	bl	8001e5c <MX_SPI1_Init>
  MX_RTC_Init();
 8001a24:	f000 f948 	bl	8001cb8 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  system_setup();
 8001a28:	f000 f8b8 	bl	8001b9c <system_setup>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001a2c:	f00f f91c 	bl	8010c68 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001a30:	f7ff f99a 	bl	8000d68 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001a34:	f00f f93c 	bl	8010cb0 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8001a38:	e7fe      	b.n	8001a38 <main+0x54>
	...

08001a3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b09c      	sub	sp, #112	; 0x70
 8001a40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a46:	224c      	movs	r2, #76	; 0x4c
 8001a48:	2100      	movs	r1, #0
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f012 f94e 	bl	8013cec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a50:	1d3b      	adds	r3, r7, #4
 8001a52:	2220      	movs	r2, #32
 8001a54:	2100      	movs	r1, #0
 8001a56:	4618      	mov	r0, r3
 8001a58:	f012 f948 	bl	8013cec <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001a5c:	2002      	movs	r0, #2
 8001a5e:	f006 fe03 	bl	8008668 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001a62:	2300      	movs	r3, #0
 8001a64:	603b      	str	r3, [r7, #0]
 8001a66:	4b33      	ldr	r3, [pc, #204]	; (8001b34 <SystemClock_Config+0xf8>)
 8001a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a6a:	4a32      	ldr	r2, [pc, #200]	; (8001b34 <SystemClock_Config+0xf8>)
 8001a6c:	f023 0301 	bic.w	r3, r3, #1
 8001a70:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001a72:	4b30      	ldr	r3, [pc, #192]	; (8001b34 <SystemClock_Config+0xf8>)
 8001a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	603b      	str	r3, [r7, #0]
 8001a7c:	4b2e      	ldr	r3, [pc, #184]	; (8001b38 <SystemClock_Config+0xfc>)
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001a84:	4a2c      	ldr	r2, [pc, #176]	; (8001b38 <SystemClock_Config+0xfc>)
 8001a86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a8a:	6193      	str	r3, [r2, #24]
 8001a8c:	4b2a      	ldr	r3, [pc, #168]	; (8001b38 <SystemClock_Config+0xfc>)
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a94:	603b      	str	r3, [r7, #0]
 8001a96:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001a98:	bf00      	nop
 8001a9a:	4b27      	ldr	r3, [pc, #156]	; (8001b38 <SystemClock_Config+0xfc>)
 8001a9c:	699b      	ldr	r3, [r3, #24]
 8001a9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001aa2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001aa6:	d1f8      	bne.n	8001a9a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001aac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ab0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV2;
 8001ab2:	2309      	movs	r3, #9
 8001ab4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ab6:	2340      	movs	r3, #64	; 0x40
 8001ab8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001aba:	2302      	movs	r3, #2
 8001abc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001abe:	2302      	movs	r3, #2
 8001ac0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001ac2:	2304      	movs	r3, #4
 8001ac4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 32;
 8001ac6:	2320      	movs	r3, #32
 8001ac8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 4;
 8001aca:	2304      	movs	r3, #4
 8001acc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001ace:	2304      	movs	r3, #4
 8001ad0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001ad6:	2308      	movs	r3, #8
 8001ad8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001ada:	2300      	movs	r3, #0
 8001adc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ae2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f006 fdf8 	bl	80086dc <HAL_RCC_OscConfig>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8001af2:	f000 f8db 	bl	8001cac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001af6:	233f      	movs	r3, #63	; 0x3f
 8001af8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001afa:	2303      	movs	r3, #3
 8001afc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001afe:	2300      	movs	r3, #0
 8001b00:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001b02:	2300      	movs	r3, #0
 8001b04:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001b06:	2300      	movs	r3, #0
 8001b08:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001b12:	2300      	movs	r3, #0
 8001b14:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001b16:	1d3b      	adds	r3, r7, #4
 8001b18:	2101      	movs	r1, #1
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f007 fa38 	bl	8008f90 <HAL_RCC_ClockConfig>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <SystemClock_Config+0xee>
  {
    Error_Handler();
 8001b26:	f000 f8c1 	bl	8001cac <Error_Handler>
  }
}
 8001b2a:	bf00      	nop
 8001b2c:	3770      	adds	r7, #112	; 0x70
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	58000400 	.word	0x58000400
 8001b38:	58024800 	.word	0x58024800

08001b3c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b0b0      	sub	sp, #192	; 0xc0
 8001b40:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b42:	463b      	mov	r3, r7
 8001b44:	22c0      	movs	r2, #192	; 0xc0
 8001b46:	2100      	movs	r1, #0
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f012 f8cf 	bl	8013cec <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001b4e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001b52:	f04f 0300 	mov.w	r3, #0
 8001b56:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001b5a:	2304      	movs	r3, #4
 8001b5c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 32;
 8001b5e:	2320      	movs	r3, #32
 8001b60:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
 8001b62:	2308      	movs	r3, #8
 8001b64:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 4;
 8001b66:	2304      	movs	r3, #4
 8001b68:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8001b6e:	2380      	movs	r3, #128	; 0x80
 8001b70:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001b72:	2300      	movs	r3, #0
 8001b74:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001b76:	2300      	movs	r3, #0
 8001b78:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b80:	463b      	mov	r3, r7
 8001b82:	4618      	mov	r0, r3
 8001b84:	f007 fdd2 	bl	800972c <HAL_RCCEx_PeriphCLKConfig>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8001b8e:	f000 f88d 	bl	8001cac <Error_Handler>
  }
}
 8001b92:	bf00      	nop
 8001b94:	37c0      	adds	r7, #192	; 0xc0
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
	...

08001b9c <system_setup>:

/* USER CODE BEGIN 4 */
void system_setup() {
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
	// 6 -- Init ADC DMA
	// 7 -- Start UART receive interrupts


	// ---- 1 ---- //
	event_flags = osEventFlagsNew(NULL);
 8001ba0:	2000      	movs	r0, #0
 8001ba2:	f00f f958 	bl	8010e56 <osEventFlagsNew>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	4a17      	ldr	r2, [pc, #92]	; (8001c08 <system_setup+0x6c>)
 8001baa:	6013      	str	r3, [r2, #0]
    if (event_flags == NULL) {
 8001bac:	4b16      	ldr	r3, [pc, #88]	; (8001c08 <system_setup+0x6c>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d100      	bne.n	8001bb6 <system_setup+0x1a>
        while (1);
 8001bb4:	e7fe      	b.n	8001bb4 <system_setup+0x18>
    }

	// ---- 2 ---- //
	mid_MsgQueue = osMessageQueueNew(MSGQUEUE_SIZE, sizeof(packet_t), NULL);
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	2108      	movs	r1, #8
 8001bba:	2080      	movs	r0, #128	; 0x80
 8001bbc:	f00f f9ce 	bl	8010f5c <osMessageQueueNew>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	4a12      	ldr	r2, [pc, #72]	; (8001c0c <system_setup+0x70>)
 8001bc4:	6013      	str	r3, [r2, #0]
	if (mid_MsgQueue == NULL) {
 8001bc6:	4b11      	ldr	r3, [pc, #68]	; (8001c0c <system_setup+0x70>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d100      	bne.n	8001bd0 <system_setup+0x34>
		while (1);
 8001bce:	e7fe      	b.n	8001bce <system_setup+0x32>
	}

	// ---- 3 ---- //
	if (!voltage_monitor_init()) {
 8001bd0:	f001 f860 	bl	8002c94 <voltage_monitor_init>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d100      	bne.n	8001bdc <system_setup+0x40>
		while (1);
 8001bda:	e7fe      	b.n	8001bda <system_setup+0x3e>
	}

	// ---- 4 ---- //
	HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8001bdc:	2100      	movs	r1, #0
 8001bde:	480c      	ldr	r0, [pc, #48]	; (8001c10 <system_setup+0x74>)
 8001be0:	f00a ff0e 	bl	800ca00 <HAL_TIM_OC_Start_IT>

	// ---- 5 ---- //
	TIM2->CCR4 = 312;
 8001be4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001be8:	f44f 729c 	mov.w	r2, #312	; 0x138
 8001bec:	641a      	str	r2, [r3, #64]	; 0x40

	// ---- 6 ---- //
	if (!init_adc_dma()) {
 8001bee:	f000 f8f5 	bl	8001ddc <init_adc_dma>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d100      	bne.n	8001bfa <system_setup+0x5e>
		while (1);
 8001bf8:	e7fe      	b.n	8001bf8 <system_setup+0x5c>
	}

	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	4905      	ldr	r1, [pc, #20]	; (8001c14 <system_setup+0x78>)
 8001bfe:	4806      	ldr	r0, [pc, #24]	; (8001c18 <system_setup+0x7c>)
 8001c00:	f00c fbe8 	bl	800e3d4 <HAL_UART_Receive_IT>

}
 8001c04:	bf00      	nop
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	240003dc 	.word	0x240003dc
 8001c0c:	240003e0 	.word	0x240003e0
 8001c10:	24000680 	.word	0x24000680
 8001c14:	240003e4 	.word	0x240003e4
 8001c18:	240006cc 	.word	0x240006cc

08001c1c <sync>:

void sync() {
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
	send_ACK();
 8001c22:	f000 f81f 	bl	8001c64 <send_ACK>

	uint8_t key;

	// Wait for 0xFF to be received
	HAL_UART_AbortReceive(&huart1);
 8001c26:	480d      	ldr	r0, [pc, #52]	; (8001c5c <sync+0x40>)
 8001c28:	f00c fc20 	bl	800e46c <HAL_UART_AbortReceive>
	do {
		HAL_UART_Receive(&huart1, UART_RX_BUFFER, 9, 100);
 8001c2c:	2364      	movs	r3, #100	; 0x64
 8001c2e:	2209      	movs	r2, #9
 8001c30:	490b      	ldr	r1, [pc, #44]	; (8001c60 <sync+0x44>)
 8001c32:	480a      	ldr	r0, [pc, #40]	; (8001c5c <sync+0x40>)
 8001c34:	f00c fb06 	bl	800e244 <HAL_UART_Receive>
		key = UART_RX_BUFFER[0];
 8001c38:	4b09      	ldr	r3, [pc, #36]	; (8001c60 <sync+0x44>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	71fb      	strb	r3, [r7, #7]
	} while (key != 0xFF);
 8001c3e:	79fb      	ldrb	r3, [r7, #7]
 8001c40:	2bff      	cmp	r3, #255	; 0xff
 8001c42:	d1f3      	bne.n	8001c2c <sync+0x10>

	//calibrateRTC(UART_RX_BUFFER); // TODO: calibrate rtc
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8001c44:	2201      	movs	r2, #1
 8001c46:	4906      	ldr	r1, [pc, #24]	; (8001c60 <sync+0x44>)
 8001c48:	4804      	ldr	r0, [pc, #16]	; (8001c5c <sync+0x40>)
 8001c4a:	f00c fbc3 	bl	800e3d4 <HAL_UART_Receive_IT>

	send_ACK();
 8001c4e:	f000 f809 	bl	8001c64 <send_ACK>
}
 8001c52:	bf00      	nop
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	240006cc 	.word	0x240006cc
 8001c60:	240003e4 	.word	0x240003e4

08001c64 <send_ACK>:

void send_ACK() {
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
	static uint8_t tx_buffer[1];

	tx_buffer[0] = ACK;
 8001c68:	4b05      	ldr	r3, [pc, #20]	; (8001c80 <send_ACK+0x1c>)
 8001c6a:	22ff      	movs	r2, #255	; 0xff
 8001c6c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);
 8001c6e:	2364      	movs	r3, #100	; 0x64
 8001c70:	2201      	movs	r2, #1
 8001c72:	4903      	ldr	r1, [pc, #12]	; (8001c80 <send_ACK+0x1c>)
 8001c74:	4803      	ldr	r0, [pc, #12]	; (8001c84 <send_ACK+0x20>)
 8001c76:	f00c fa57 	bl	800e128 <HAL_UART_Transmit>
}
 8001c7a:	bf00      	nop
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	24000428 	.word	0x24000428
 8001c84:	240006cc 	.word	0x240006cc

08001c88 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a04      	ldr	r2, [pc, #16]	; (8001ca8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d101      	bne.n	8001c9e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001c9a:	f001 fa3f 	bl	800311c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001c9e:	bf00      	nop
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	40001000 	.word	0x40001000

08001cac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cb0:	b672      	cpsid	i
}
 8001cb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001cb4:	e7fe      	b.n	8001cb4 <Error_Handler+0x8>
	...

08001cb8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001cbe:	1d3b      	adds	r3, r7, #4
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	605a      	str	r2, [r3, #4]
 8001cc6:	609a      	str	r2, [r3, #8]
 8001cc8:	60da      	str	r2, [r3, #12]
 8001cca:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001ccc:	2300      	movs	r3, #0
 8001cce:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001cd0:	4b26      	ldr	r3, [pc, #152]	; (8001d6c <MX_RTC_Init+0xb4>)
 8001cd2:	4a27      	ldr	r2, [pc, #156]	; (8001d70 <MX_RTC_Init+0xb8>)
 8001cd4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001cd6:	4b25      	ldr	r3, [pc, #148]	; (8001d6c <MX_RTC_Init+0xb4>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 100-1;
 8001cdc:	4b23      	ldr	r3, [pc, #140]	; (8001d6c <MX_RTC_Init+0xb4>)
 8001cde:	2263      	movs	r2, #99	; 0x63
 8001ce0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 10000-1;
 8001ce2:	4b22      	ldr	r3, [pc, #136]	; (8001d6c <MX_RTC_Init+0xb4>)
 8001ce4:	f242 720f 	movw	r2, #9999	; 0x270f
 8001ce8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001cea:	4b20      	ldr	r3, [pc, #128]	; (8001d6c <MX_RTC_Init+0xb4>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001cf0:	4b1e      	ldr	r3, [pc, #120]	; (8001d6c <MX_RTC_Init+0xb4>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001cf6:	4b1d      	ldr	r3, [pc, #116]	; (8001d6c <MX_RTC_Init+0xb4>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001cfc:	4b1b      	ldr	r3, [pc, #108]	; (8001d6c <MX_RTC_Init+0xb4>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001d02:	481a      	ldr	r0, [pc, #104]	; (8001d6c <MX_RTC_Init+0xb4>)
 8001d04:	f00a fa10 	bl	800c128 <HAL_RTC_Init>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8001d0e:	f7ff ffcd 	bl	8001cac <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001d12:	2300      	movs	r3, #0
 8001d14:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001d16:	2300      	movs	r3, #0
 8001d18:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001d22:	2300      	movs	r3, #0
 8001d24:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001d26:	1d3b      	adds	r3, r7, #4
 8001d28:	2201      	movs	r2, #1
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	480f      	ldr	r0, [pc, #60]	; (8001d6c <MX_RTC_Init+0xb4>)
 8001d2e:	f00a fa7d 	bl	800c22c <HAL_RTC_SetTime>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8001d38:	f7ff ffb8 	bl	8001cac <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001d40:	2301      	movs	r3, #1
 8001d42:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001d44:	2301      	movs	r3, #1
 8001d46:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001d4c:	463b      	mov	r3, r7
 8001d4e:	2201      	movs	r2, #1
 8001d50:	4619      	mov	r1, r3
 8001d52:	4806      	ldr	r0, [pc, #24]	; (8001d6c <MX_RTC_Init+0xb4>)
 8001d54:	f00a fb08 	bl	800c368 <HAL_RTC_SetDate>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 8001d5e:	f7ff ffa5 	bl	8001cac <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001d62:	bf00      	nop
 8001d64:	3718      	adds	r7, #24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	2400042c 	.word	0x2400042c
 8001d70:	58004000 	.word	0x58004000

08001d74 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b0b2      	sub	sp, #200	; 0xc8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d7c:	f107 0308 	add.w	r3, r7, #8
 8001d80:	22c0      	movs	r2, #192	; 0xc0
 8001d82:	2100      	movs	r1, #0
 8001d84:	4618      	mov	r0, r3
 8001d86:	f011 ffb1 	bl	8013cec <memset>
  if(rtcHandle->Instance==RTC)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a10      	ldr	r2, [pc, #64]	; (8001dd0 <HAL_RTC_MspInit+0x5c>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d118      	bne.n	8001dc6 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001d94:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001d98:	f04f 0300 	mov.w	r3, #0
 8001d9c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 8001da0:	4b0c      	ldr	r3, [pc, #48]	; (8001dd4 <HAL_RTC_MspInit+0x60>)
 8001da2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001da6:	f107 0308 	add.w	r3, r7, #8
 8001daa:	4618      	mov	r0, r3
 8001dac:	f007 fcbe 	bl	800972c <HAL_RCCEx_PeriphCLKConfig>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <HAL_RTC_MspInit+0x46>
    {
      Error_Handler();
 8001db6:	f7ff ff79 	bl	8001cac <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001dba:	4b07      	ldr	r3, [pc, #28]	; (8001dd8 <HAL_RTC_MspInit+0x64>)
 8001dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dbe:	4a06      	ldr	r2, [pc, #24]	; (8001dd8 <HAL_RTC_MspInit+0x64>)
 8001dc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dc4:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001dc6:	bf00      	nop
 8001dc8:	37c8      	adds	r7, #200	; 0xc8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	58004000 	.word	0x58004000
 8001dd4:	00019300 	.word	0x00019300
 8001dd8:	58024400 	.word	0x58024400

08001ddc <init_adc_dma>:

ALIGN_32BYTES(static uint16_t ADC1_raw_data[ADC1_NUM_CHANNELS]);
ALIGN_32BYTES(static uint16_t ADC3_raw_data[ADC3_NUM_CHANNELS]);

// Public Functions
uint8_t init_adc_dma() {
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8001de2:	2300      	movs	r3, #0
 8001de4:	71fb      	strb	r3, [r7, #7]

	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 8001de6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001dea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001dee:	4817      	ldr	r0, [pc, #92]	; (8001e4c <init_adc_dma+0x70>)
 8001df0:	f002 fca8 	bl	8004744 <HAL_ADCEx_Calibration_Start>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <init_adc_dma+0x22>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 8001dfa:	f7ff ff57 	bl	8001cac <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 8001dfe:	220b      	movs	r2, #11
 8001e00:	4913      	ldr	r1, [pc, #76]	; (8001e50 <init_adc_dma+0x74>)
 8001e02:	4812      	ldr	r0, [pc, #72]	; (8001e4c <init_adc_dma+0x70>)
 8001e04:	f001 fd7c 	bl	8003900 <HAL_ADC_Start_DMA>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <init_adc_dma+0x36>
	ADC1_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8001e0e:	f7ff ff4d 	bl	8001cac <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 8001e12:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001e16:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e1a:	480e      	ldr	r0, [pc, #56]	; (8001e54 <init_adc_dma+0x78>)
 8001e1c:	f002 fc92 	bl	8004744 <HAL_ADCEx_Calibration_Start>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <init_adc_dma+0x4e>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 8001e26:	f7ff ff41 	bl	8001cac <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 8001e2a:	2204      	movs	r2, #4
 8001e2c:	490a      	ldr	r1, [pc, #40]	; (8001e58 <init_adc_dma+0x7c>)
 8001e2e:	4809      	ldr	r0, [pc, #36]	; (8001e54 <init_adc_dma+0x78>)
 8001e30:	f001 fd66 	bl	8003900 <HAL_ADC_Start_DMA>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <init_adc_dma+0x62>
	ADC3_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8001e3a:	f7ff ff37 	bl	8001cac <Error_Handler>
	}
	status = 1;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	71fb      	strb	r3, [r7, #7]

	return status;
 8001e42:	79fb      	ldrb	r3, [r7, #7]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3708      	adds	r7, #8
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	2400011c 	.word	0x2400011c
 8001e50:	24000460 	.word	0x24000460
 8001e54:	24000180 	.word	0x24000180
 8001e58:	24000480 	.word	0x24000480

08001e5c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001e60:	4b28      	ldr	r3, [pc, #160]	; (8001f04 <MX_SPI1_Init+0xa8>)
 8001e62:	4a29      	ldr	r2, [pc, #164]	; (8001f08 <MX_SPI1_Init+0xac>)
 8001e64:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e66:	4b27      	ldr	r3, [pc, #156]	; (8001f04 <MX_SPI1_Init+0xa8>)
 8001e68:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001e6c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001e6e:	4b25      	ldr	r3, [pc, #148]	; (8001f04 <MX_SPI1_Init+0xa8>)
 8001e70:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001e74:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001e76:	4b23      	ldr	r3, [pc, #140]	; (8001f04 <MX_SPI1_Init+0xa8>)
 8001e78:	220f      	movs	r2, #15
 8001e7a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e7c:	4b21      	ldr	r3, [pc, #132]	; (8001f04 <MX_SPI1_Init+0xa8>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e82:	4b20      	ldr	r3, [pc, #128]	; (8001f04 <MX_SPI1_Init+0xa8>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001e88:	4b1e      	ldr	r3, [pc, #120]	; (8001f04 <MX_SPI1_Init+0xa8>)
 8001e8a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001e8e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001e90:	4b1c      	ldr	r3, [pc, #112]	; (8001f04 <MX_SPI1_Init+0xa8>)
 8001e92:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8001e96:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e98:	4b1a      	ldr	r3, [pc, #104]	; (8001f04 <MX_SPI1_Init+0xa8>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e9e:	4b19      	ldr	r3, [pc, #100]	; (8001f04 <MX_SPI1_Init+0xa8>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ea4:	4b17      	ldr	r3, [pc, #92]	; (8001f04 <MX_SPI1_Init+0xa8>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001eaa:	4b16      	ldr	r3, [pc, #88]	; (8001f04 <MX_SPI1_Init+0xa8>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001eb0:	4b14      	ldr	r3, [pc, #80]	; (8001f04 <MX_SPI1_Init+0xa8>)
 8001eb2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001eb6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001eb8:	4b12      	ldr	r3, [pc, #72]	; (8001f04 <MX_SPI1_Init+0xa8>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001ebe:	4b11      	ldr	r3, [pc, #68]	; (8001f04 <MX_SPI1_Init+0xa8>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001ec4:	4b0f      	ldr	r3, [pc, #60]	; (8001f04 <MX_SPI1_Init+0xa8>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001eca:	4b0e      	ldr	r3, [pc, #56]	; (8001f04 <MX_SPI1_Init+0xa8>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001ed0:	4b0c      	ldr	r3, [pc, #48]	; (8001f04 <MX_SPI1_Init+0xa8>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001ed6:	4b0b      	ldr	r3, [pc, #44]	; (8001f04 <MX_SPI1_Init+0xa8>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001edc:	4b09      	ldr	r3, [pc, #36]	; (8001f04 <MX_SPI1_Init+0xa8>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001ee2:	4b08      	ldr	r3, [pc, #32]	; (8001f04 <MX_SPI1_Init+0xa8>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001ee8:	4b06      	ldr	r3, [pc, #24]	; (8001f04 <MX_SPI1_Init+0xa8>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001eee:	4805      	ldr	r0, [pc, #20]	; (8001f04 <MX_SPI1_Init+0xa8>)
 8001ef0:	f00a fb78 	bl	800c5e4 <HAL_SPI_Init>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8001efa:	f7ff fed7 	bl	8001cac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001efe:	bf00      	nop
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	24000488 	.word	0x24000488
 8001f08:	40013000 	.word	0x40013000

08001f0c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001f10:	4b28      	ldr	r3, [pc, #160]	; (8001fb4 <MX_SPI2_Init+0xa8>)
 8001f12:	4a29      	ldr	r2, [pc, #164]	; (8001fb8 <MX_SPI2_Init+0xac>)
 8001f14:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001f16:	4b27      	ldr	r3, [pc, #156]	; (8001fb4 <MX_SPI2_Init+0xa8>)
 8001f18:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001f1c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001f1e:	4b25      	ldr	r3, [pc, #148]	; (8001fb4 <MX_SPI2_Init+0xa8>)
 8001f20:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001f24:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8001f26:	4b23      	ldr	r3, [pc, #140]	; (8001fb4 <MX_SPI2_Init+0xa8>)
 8001f28:	220f      	movs	r2, #15
 8001f2a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f2c:	4b21      	ldr	r3, [pc, #132]	; (8001fb4 <MX_SPI2_Init+0xa8>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f32:	4b20      	ldr	r3, [pc, #128]	; (8001fb4 <MX_SPI2_Init+0xa8>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001f38:	4b1e      	ldr	r3, [pc, #120]	; (8001fb4 <MX_SPI2_Init+0xa8>)
 8001f3a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001f3e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001f40:	4b1c      	ldr	r3, [pc, #112]	; (8001fb4 <MX_SPI2_Init+0xa8>)
 8001f42:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8001f46:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f48:	4b1a      	ldr	r3, [pc, #104]	; (8001fb4 <MX_SPI2_Init+0xa8>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f4e:	4b19      	ldr	r3, [pc, #100]	; (8001fb4 <MX_SPI2_Init+0xa8>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f54:	4b17      	ldr	r3, [pc, #92]	; (8001fb4 <MX_SPI2_Init+0xa8>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001f5a:	4b16      	ldr	r3, [pc, #88]	; (8001fb4 <MX_SPI2_Init+0xa8>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001f60:	4b14      	ldr	r3, [pc, #80]	; (8001fb4 <MX_SPI2_Init+0xa8>)
 8001f62:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f66:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001f68:	4b12      	ldr	r3, [pc, #72]	; (8001fb4 <MX_SPI2_Init+0xa8>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001f6e:	4b11      	ldr	r3, [pc, #68]	; (8001fb4 <MX_SPI2_Init+0xa8>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001f74:	4b0f      	ldr	r3, [pc, #60]	; (8001fb4 <MX_SPI2_Init+0xa8>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001f7a:	4b0e      	ldr	r3, [pc, #56]	; (8001fb4 <MX_SPI2_Init+0xa8>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001f80:	4b0c      	ldr	r3, [pc, #48]	; (8001fb4 <MX_SPI2_Init+0xa8>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001f86:	4b0b      	ldr	r3, [pc, #44]	; (8001fb4 <MX_SPI2_Init+0xa8>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001f8c:	4b09      	ldr	r3, [pc, #36]	; (8001fb4 <MX_SPI2_Init+0xa8>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001f92:	4b08      	ldr	r3, [pc, #32]	; (8001fb4 <MX_SPI2_Init+0xa8>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001f98:	4b06      	ldr	r3, [pc, #24]	; (8001fb4 <MX_SPI2_Init+0xa8>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001f9e:	4805      	ldr	r0, [pc, #20]	; (8001fb4 <MX_SPI2_Init+0xa8>)
 8001fa0:	f00a fb20 	bl	800c5e4 <HAL_SPI_Init>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 8001faa:	f7ff fe7f 	bl	8001cac <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001fae:	bf00      	nop
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	24000510 	.word	0x24000510
 8001fb8:	40003800 	.word	0x40003800

08001fbc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b0bc      	sub	sp, #240	; 0xf0
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	605a      	str	r2, [r3, #4]
 8001fce:	609a      	str	r2, [r3, #8]
 8001fd0:	60da      	str	r2, [r3, #12]
 8001fd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fd4:	f107 0318 	add.w	r3, r7, #24
 8001fd8:	22c0      	movs	r2, #192	; 0xc0
 8001fda:	2100      	movs	r1, #0
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f011 fe85 	bl	8013cec <memset>
  if(spiHandle->Instance==SPI1)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a4c      	ldr	r2, [pc, #304]	; (8002118 <HAL_SPI_MspInit+0x15c>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d145      	bne.n	8002078 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001fec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ff0:	f04f 0300 	mov.w	r3, #0
 8001ff4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ffc:	f107 0318 	add.w	r3, r7, #24
 8002000:	4618      	mov	r0, r3
 8002002:	f007 fb93 	bl	800972c <HAL_RCCEx_PeriphCLKConfig>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 800200c:	f7ff fe4e 	bl	8001cac <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002010:	4b42      	ldr	r3, [pc, #264]	; (800211c <HAL_SPI_MspInit+0x160>)
 8002012:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002016:	4a41      	ldr	r2, [pc, #260]	; (800211c <HAL_SPI_MspInit+0x160>)
 8002018:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800201c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002020:	4b3e      	ldr	r3, [pc, #248]	; (800211c <HAL_SPI_MspInit+0x160>)
 8002022:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002026:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800202a:	617b      	str	r3, [r7, #20]
 800202c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800202e:	4b3b      	ldr	r3, [pc, #236]	; (800211c <HAL_SPI_MspInit+0x160>)
 8002030:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002034:	4a39      	ldr	r2, [pc, #228]	; (800211c <HAL_SPI_MspInit+0x160>)
 8002036:	f043 0302 	orr.w	r3, r3, #2
 800203a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800203e:	4b37      	ldr	r3, [pc, #220]	; (800211c <HAL_SPI_MspInit+0x160>)
 8002040:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002044:	f003 0302 	and.w	r3, r3, #2
 8002048:	613b      	str	r3, [r7, #16]
 800204a:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800204c:	2318      	movs	r3, #24
 800204e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002052:	2302      	movs	r3, #2
 8002054:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002058:	2300      	movs	r3, #0
 800205a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800205e:	2300      	movs	r3, #0
 8002060:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002064:	2305      	movs	r3, #5
 8002066:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800206a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800206e:	4619      	mov	r1, r3
 8002070:	482b      	ldr	r0, [pc, #172]	; (8002120 <HAL_SPI_MspInit+0x164>)
 8002072:	f005 ffd7 	bl	8008024 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002076:	e04a      	b.n	800210e <HAL_SPI_MspInit+0x152>
  else if(spiHandle->Instance==SPI2)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a29      	ldr	r2, [pc, #164]	; (8002124 <HAL_SPI_MspInit+0x168>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d145      	bne.n	800210e <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002082:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002086:	f04f 0300 	mov.w	r3, #0
 800208a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800208e:	2300      	movs	r3, #0
 8002090:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002092:	f107 0318 	add.w	r3, r7, #24
 8002096:	4618      	mov	r0, r3
 8002098:	f007 fb48 	bl	800972c <HAL_RCCEx_PeriphCLKConfig>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <HAL_SPI_MspInit+0xea>
      Error_Handler();
 80020a2:	f7ff fe03 	bl	8001cac <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80020a6:	4b1d      	ldr	r3, [pc, #116]	; (800211c <HAL_SPI_MspInit+0x160>)
 80020a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80020ac:	4a1b      	ldr	r2, [pc, #108]	; (800211c <HAL_SPI_MspInit+0x160>)
 80020ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020b2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80020b6:	4b19      	ldr	r3, [pc, #100]	; (800211c <HAL_SPI_MspInit+0x160>)
 80020b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80020bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020c0:	60fb      	str	r3, [r7, #12]
 80020c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020c4:	4b15      	ldr	r3, [pc, #84]	; (800211c <HAL_SPI_MspInit+0x160>)
 80020c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020ca:	4a14      	ldr	r2, [pc, #80]	; (800211c <HAL_SPI_MspInit+0x160>)
 80020cc:	f043 0302 	orr.w	r3, r3, #2
 80020d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020d4:	4b11      	ldr	r3, [pc, #68]	; (800211c <HAL_SPI_MspInit+0x160>)
 80020d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	60bb      	str	r3, [r7, #8]
 80020e0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80020e2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80020e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ea:	2302      	movs	r3, #2
 80020ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f0:	2300      	movs	r3, #0
 80020f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f6:	2300      	movs	r3, #0
 80020f8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80020fc:	2305      	movs	r3, #5
 80020fe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002102:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002106:	4619      	mov	r1, r3
 8002108:	4805      	ldr	r0, [pc, #20]	; (8002120 <HAL_SPI_MspInit+0x164>)
 800210a:	f005 ff8b 	bl	8008024 <HAL_GPIO_Init>
}
 800210e:	bf00      	nop
 8002110:	37f0      	adds	r7, #240	; 0xf0
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	40013000 	.word	0x40013000
 800211c:	58024400 	.word	0x58024400
 8002120:	58020400 	.word	0x58020400
 8002124:	40003800 	.word	0x40003800

08002128 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800212e:	4b0c      	ldr	r3, [pc, #48]	; (8002160 <HAL_MspInit+0x38>)
 8002130:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002134:	4a0a      	ldr	r2, [pc, #40]	; (8002160 <HAL_MspInit+0x38>)
 8002136:	f043 0302 	orr.w	r3, r3, #2
 800213a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800213e:	4b08      	ldr	r3, [pc, #32]	; (8002160 <HAL_MspInit+0x38>)
 8002140:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002144:	f003 0302 	and.w	r3, r3, #2
 8002148:	607b      	str	r3, [r7, #4]
 800214a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800214c:	2200      	movs	r2, #0
 800214e:	210f      	movs	r1, #15
 8002150:	f06f 0001 	mvn.w	r0, #1
 8002154:	f002 fcf0 	bl	8004b38 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002158:	bf00      	nop
 800215a:	3708      	adds	r7, #8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	58024400 	.word	0x58024400

08002164 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b090      	sub	sp, #64	; 0x40
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2b0f      	cmp	r3, #15
 8002170:	d827      	bhi.n	80021c2 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8002172:	2200      	movs	r2, #0
 8002174:	6879      	ldr	r1, [r7, #4]
 8002176:	2036      	movs	r0, #54	; 0x36
 8002178:	f002 fcde 	bl	8004b38 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800217c:	2036      	movs	r0, #54	; 0x36
 800217e:	f002 fcf5 	bl	8004b6c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8002182:	4a29      	ldr	r2, [pc, #164]	; (8002228 <HAL_InitTick+0xc4>)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002188:	4b28      	ldr	r3, [pc, #160]	; (800222c <HAL_InitTick+0xc8>)
 800218a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800218e:	4a27      	ldr	r2, [pc, #156]	; (800222c <HAL_InitTick+0xc8>)
 8002190:	f043 0310 	orr.w	r3, r3, #16
 8002194:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002198:	4b24      	ldr	r3, [pc, #144]	; (800222c <HAL_InitTick+0xc8>)
 800219a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800219e:	f003 0310 	and.w	r3, r3, #16
 80021a2:	60fb      	str	r3, [r7, #12]
 80021a4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80021a6:	f107 0210 	add.w	r2, r7, #16
 80021aa:	f107 0314 	add.w	r3, r7, #20
 80021ae:	4611      	mov	r1, r2
 80021b0:	4618      	mov	r0, r3
 80021b2:	f007 fa79 	bl	80096a8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80021b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021b8:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80021ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d106      	bne.n	80021ce <HAL_InitTick+0x6a>
 80021c0:	e001      	b.n	80021c6 <HAL_InitTick+0x62>
    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e02b      	b.n	800221e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80021c6:	f007 fa43 	bl	8009650 <HAL_RCC_GetPCLK1Freq>
 80021ca:	63f8      	str	r0, [r7, #60]	; 0x3c
 80021cc:	e004      	b.n	80021d8 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80021ce:	f007 fa3f 	bl	8009650 <HAL_RCC_GetPCLK1Freq>
 80021d2:	4603      	mov	r3, r0
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80021d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021da:	4a15      	ldr	r2, [pc, #84]	; (8002230 <HAL_InitTick+0xcc>)
 80021dc:	fba2 2303 	umull	r2, r3, r2, r3
 80021e0:	0c9b      	lsrs	r3, r3, #18
 80021e2:	3b01      	subs	r3, #1
 80021e4:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80021e6:	4b13      	ldr	r3, [pc, #76]	; (8002234 <HAL_InitTick+0xd0>)
 80021e8:	4a13      	ldr	r2, [pc, #76]	; (8002238 <HAL_InitTick+0xd4>)
 80021ea:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80021ec:	4b11      	ldr	r3, [pc, #68]	; (8002234 <HAL_InitTick+0xd0>)
 80021ee:	f240 32e7 	movw	r2, #999	; 0x3e7
 80021f2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80021f4:	4a0f      	ldr	r2, [pc, #60]	; (8002234 <HAL_InitTick+0xd0>)
 80021f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021f8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80021fa:	4b0e      	ldr	r3, [pc, #56]	; (8002234 <HAL_InitTick+0xd0>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002200:	4b0c      	ldr	r3, [pc, #48]	; (8002234 <HAL_InitTick+0xd0>)
 8002202:	2200      	movs	r2, #0
 8002204:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002206:	480b      	ldr	r0, [pc, #44]	; (8002234 <HAL_InitTick+0xd0>)
 8002208:	f00a fb2b 	bl	800c862 <HAL_TIM_Base_Init>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d104      	bne.n	800221c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002212:	4808      	ldr	r0, [pc, #32]	; (8002234 <HAL_InitTick+0xd0>)
 8002214:	f00a fb7c 	bl	800c910 <HAL_TIM_Base_Start_IT>
 8002218:	4603      	mov	r3, r0
 800221a:	e000      	b.n	800221e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
}
 800221e:	4618      	mov	r0, r3
 8002220:	3740      	adds	r7, #64	; 0x40
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	24000090 	.word	0x24000090
 800222c:	58024400 	.word	0x58024400
 8002230:	431bde83 	.word	0x431bde83
 8002234:	24000598 	.word	0x24000598
 8002238:	40001000 	.word	0x40001000

0800223c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8002240:	e7fe      	b.n	8002240 <NMI_Handler+0x4>

08002242 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002242:	b480      	push	{r7}
 8002244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002246:	e7fe      	b.n	8002246 <HardFault_Handler+0x4>

08002248 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800224c:	e7fe      	b.n	800224c <MemManage_Handler+0x4>

0800224e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800224e:	b480      	push	{r7}
 8002250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002252:	e7fe      	b.n	8002252 <BusFault_Handler+0x4>

08002254 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002258:	e7fe      	b.n	8002258 <UsageFault_Handler+0x4>

0800225a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800225a:	b480      	push	{r7}
 800225c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800225e:	bf00      	nop
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800226c:	4802      	ldr	r0, [pc, #8]	; (8002278 <DMA1_Stream0_IRQHandler+0x10>)
 800226e:	f004 fbbb 	bl	80069e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002272:	bf00      	nop
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	240001e4 	.word	0x240001e4

0800227c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002280:	4802      	ldr	r0, [pc, #8]	; (800228c <DMA1_Stream1_IRQHandler+0x10>)
 8002282:	f004 fbb1 	bl	80069e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002286:	bf00      	nop
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	2400025c 	.word	0x2400025c

08002290 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002294:	4802      	ldr	r0, [pc, #8]	; (80022a0 <DMA1_Stream2_IRQHandler+0x10>)
 8002296:	f004 fba7 	bl	80069e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800229a:	bf00      	nop
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	24000760 	.word	0x24000760

080022a4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80022a8:	4802      	ldr	r0, [pc, #8]	; (80022b4 <DMA1_Stream5_IRQHandler+0x10>)
 80022aa:	f004 fb9d 	bl	80069e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80022ae:	bf00      	nop
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	240002e8 	.word	0x240002e8

080022b8 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80022bc:	4802      	ldr	r0, [pc, #8]	; (80022c8 <TIM1_BRK_IRQHandler+0x10>)
 80022be:	f00a fe3e 	bl	800cf3e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80022c2:	bf00      	nop
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	240005e8 	.word	0x240005e8

080022cc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80022d0:	4802      	ldr	r0, [pc, #8]	; (80022dc <TIM1_UP_IRQHandler+0x10>)
 80022d2:	f00a fe34 	bl	800cf3e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80022d6:	bf00      	nop
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	240005e8 	.word	0x240005e8

080022e0 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80022e4:	4802      	ldr	r0, [pc, #8]	; (80022f0 <TIM1_TRG_COM_IRQHandler+0x10>)
 80022e6:	f00a fe2a 	bl	800cf3e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80022ea:	bf00      	nop
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	240005e8 	.word	0x240005e8

080022f4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80022f8:	4802      	ldr	r0, [pc, #8]	; (8002304 <TIM1_CC_IRQHandler+0x10>)
 80022fa:	f00a fe20 	bl	800cf3e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80022fe:	bf00      	nop
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	240005e8 	.word	0x240005e8

08002308 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800230c:	4802      	ldr	r0, [pc, #8]	; (8002318 <TIM2_IRQHandler+0x10>)
 800230e:	f00a fe16 	bl	800cf3e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002312:	bf00      	nop
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	24000634 	.word	0x24000634

0800231c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002320:	4802      	ldr	r0, [pc, #8]	; (800232c <TIM3_IRQHandler+0x10>)
 8002322:	f00a fe0c 	bl	800cf3e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002326:	bf00      	nop
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	24000680 	.word	0x24000680

08002330 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002334:	4802      	ldr	r0, [pc, #8]	; (8002340 <USART1_IRQHandler+0x10>)
 8002336:	f00c f94f 	bl	800e5d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800233a:	bf00      	nop
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	240006cc 	.word	0x240006cc

08002344 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 8002348:	4b06      	ldr	r3, [pc, #24]	; (8002364 <TIM6_DAC_IRQHandler+0x20>)
 800234a:	791b      	ldrb	r3, [r3, #4]
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b00      	cmp	r3, #0
 8002350:	d002      	beq.n	8002358 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 8002352:	4804      	ldr	r0, [pc, #16]	; (8002364 <TIM6_DAC_IRQHandler+0x20>)
 8002354:	f002 fd9f 	bl	8004e96 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8002358:	4803      	ldr	r0, [pc, #12]	; (8002368 <TIM6_DAC_IRQHandler+0x24>)
 800235a:	f00a fdf0 	bl	800cf3e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800235e:	bf00      	nop
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	240002d4 	.word	0x240002d4
 8002368:	24000598 	.word	0x24000598

0800236c <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	4603      	mov	r3, r0
 8002374:	71fb      	strb	r3, [r7, #7]
	DEMCR |= (1 << 24);
 8002376:	4b0f      	ldr	r3, [pc, #60]	; (80023b4 <ITM_SendChar+0x48>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a0e      	ldr	r2, [pc, #56]	; (80023b4 <ITM_SendChar+0x48>)
 800237c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002380:	6013      	str	r3, [r2, #0]

	ITM_TRACE_EN |= (1 << 0);
 8002382:	4b0d      	ldr	r3, [pc, #52]	; (80023b8 <ITM_SendChar+0x4c>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a0c      	ldr	r2, [pc, #48]	; (80023b8 <ITM_SendChar+0x4c>)
 8002388:	f043 0301 	orr.w	r3, r3, #1
 800238c:	6013      	str	r3, [r2, #0]

	while (!(ITM_STIMULUS_PORT0 & 1))
 800238e:	bf00      	nop
 8002390:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	2b00      	cmp	r3, #0
 800239c:	d0f8      	beq.n	8002390 <ITM_SendChar+0x24>
		;

	ITM_STIMULUS_PORT0 = ch;
 800239e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80023a2:	79fb      	ldrb	r3, [r7, #7]
 80023a4:	6013      	str	r3, [r2, #0]
}
 80023a6:	bf00      	nop
 80023a8:	370c      	adds	r7, #12
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	e000edfc 	.word	0xe000edfc
 80023b8:	e0000e00 	.word	0xe0000e00

080023bc <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 80023bc:	b580      	push	{r7, lr}
 80023be:	b086      	sub	sp, #24
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	60b9      	str	r1, [r7, #8]
 80023c6:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80023c8:	2300      	movs	r3, #0
 80023ca:	617b      	str	r3, [r7, #20]
 80023cc:	e00a      	b.n	80023e4 <_read+0x28>
		*ptr++ = __io_getchar();
 80023ce:	f3af 8000 	nop.w
 80023d2:	4601      	mov	r1, r0
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	1c5a      	adds	r2, r3, #1
 80023d8:	60ba      	str	r2, [r7, #8]
 80023da:	b2ca      	uxtb	r2, r1
 80023dc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	3301      	adds	r3, #1
 80023e2:	617b      	str	r3, [r7, #20]
 80023e4:	697a      	ldr	r2, [r7, #20]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	dbf0      	blt.n	80023ce <_read+0x12>
	}

	return len;
 80023ec:	687b      	ldr	r3, [r7, #4]
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3718      	adds	r7, #24
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b086      	sub	sp, #24
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	60f8      	str	r0, [r7, #12]
 80023fe:	60b9      	str	r1, [r7, #8]
 8002400:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002402:	2300      	movs	r3, #0
 8002404:	617b      	str	r3, [r7, #20]
 8002406:	e009      	b.n	800241c <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	1c5a      	adds	r2, r3, #1
 800240c:	60ba      	str	r2, [r7, #8]
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	4618      	mov	r0, r3
 8002412:	f7ff ffab 	bl	800236c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	3301      	adds	r3, #1
 800241a:	617b      	str	r3, [r7, #20]
 800241c:	697a      	ldr	r2, [r7, #20]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	429a      	cmp	r2, r3
 8002422:	dbf1      	blt.n	8002408 <_write+0x12>
	}
	return len;
 8002424:	687b      	ldr	r3, [r7, #4]
}
 8002426:	4618      	mov	r0, r3
 8002428:	3718      	adds	r7, #24
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <_close>:

int _close(int file) {
 800242e:	b480      	push	{r7}
 8002430:	b083      	sub	sp, #12
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8002436:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800243a:	4618      	mov	r0, r3
 800243c:	370c      	adds	r7, #12
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr

08002446 <_fstat>:

int _fstat(int file, struct stat *st) {
 8002446:	b480      	push	{r7}
 8002448:	b083      	sub	sp, #12
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
 800244e:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002456:	605a      	str	r2, [r3, #4]
	return 0;
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr

08002466 <_isatty>:

int _isatty(int file) {
 8002466:	b480      	push	{r7}
 8002468:	b083      	sub	sp, #12
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 800246e:	2301      	movs	r3, #1
}
 8002470:	4618      	mov	r0, r3
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <_lseek>:

int _lseek(int file, int ptr, int dir) {
 800247c:	b480      	push	{r7}
 800247e:	b085      	sub	sp, #20
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	3714      	adds	r7, #20
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
	...

08002498 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8002498:	b580      	push	{r7, lr}
 800249a:	b086      	sub	sp, #24
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 80024a0:	4a14      	ldr	r2, [pc, #80]	; (80024f4 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 80024a2:	4b15      	ldr	r3, [pc, #84]	; (80024f8 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 80024ac:	4b13      	ldr	r3, [pc, #76]	; (80024fc <_sbrk+0x64>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d102      	bne.n	80024ba <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 80024b4:	4b11      	ldr	r3, [pc, #68]	; (80024fc <_sbrk+0x64>)
 80024b6:	4a12      	ldr	r2, [pc, #72]	; (8002500 <_sbrk+0x68>)
 80024b8:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 80024ba:	4b10      	ldr	r3, [pc, #64]	; (80024fc <_sbrk+0x64>)
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4413      	add	r3, r2
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d207      	bcs.n	80024d8 <_sbrk+0x40>
		errno = ENOMEM;
 80024c8:	f011 fbd8 	bl	8013c7c <__errno>
 80024cc:	4603      	mov	r3, r0
 80024ce:	220c      	movs	r2, #12
 80024d0:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 80024d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024d6:	e009      	b.n	80024ec <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 80024d8:	4b08      	ldr	r3, [pc, #32]	; (80024fc <_sbrk+0x64>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 80024de:	4b07      	ldr	r3, [pc, #28]	; (80024fc <_sbrk+0x64>)
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4413      	add	r3, r2
 80024e6:	4a05      	ldr	r2, [pc, #20]	; (80024fc <_sbrk+0x64>)
 80024e8:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 80024ea:	68fb      	ldr	r3, [r7, #12]
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3718      	adds	r7, #24
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	24080000 	.word	0x24080000
 80024f8:	00000400 	.word	0x00000400
 80024fc:	240005e4 	.word	0x240005e4
 8002500:	240051f0 	.word	0x240051f0

08002504 <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8002508:	4b37      	ldr	r3, [pc, #220]	; (80025e8 <SystemInit+0xe4>)
 800250a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800250e:	4a36      	ldr	r2, [pc, #216]	; (80025e8 <SystemInit+0xe4>)
 8002510:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002514:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8002518:	4b34      	ldr	r3, [pc, #208]	; (80025ec <SystemInit+0xe8>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 030f 	and.w	r3, r3, #15
 8002520:	2b06      	cmp	r3, #6
 8002522:	d807      	bhi.n	8002534 <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8002524:	4b31      	ldr	r3, [pc, #196]	; (80025ec <SystemInit+0xe8>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f023 030f 	bic.w	r3, r3, #15
 800252c:	4a2f      	ldr	r2, [pc, #188]	; (80025ec <SystemInit+0xe8>)
 800252e:	f043 0307 	orr.w	r3, r3, #7
 8002532:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 8002534:	4b2e      	ldr	r3, [pc, #184]	; (80025f0 <SystemInit+0xec>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a2d      	ldr	r2, [pc, #180]	; (80025f0 <SystemInit+0xec>)
 800253a:	f043 0301 	orr.w	r3, r3, #1
 800253e:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8002540:	4b2b      	ldr	r3, [pc, #172]	; (80025f0 <SystemInit+0xec>)
 8002542:	2200      	movs	r2, #0
 8002544:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 8002546:	4b2a      	ldr	r3, [pc, #168]	; (80025f0 <SystemInit+0xec>)
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	4929      	ldr	r1, [pc, #164]	; (80025f0 <SystemInit+0xec>)
 800254c:	4b29      	ldr	r3, [pc, #164]	; (80025f4 <SystemInit+0xf0>)
 800254e:	4013      	ands	r3, r2
 8002550:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8002552:	4b26      	ldr	r3, [pc, #152]	; (80025ec <SystemInit+0xe8>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0308 	and.w	r3, r3, #8
 800255a:	2b00      	cmp	r3, #0
 800255c:	d007      	beq.n	800256e <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 800255e:	4b23      	ldr	r3, [pc, #140]	; (80025ec <SystemInit+0xe8>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f023 030f 	bic.w	r3, r3, #15
 8002566:	4a21      	ldr	r2, [pc, #132]	; (80025ec <SystemInit+0xe8>)
 8002568:	f043 0307 	orr.w	r3, r3, #7
 800256c:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 800256e:	4b20      	ldr	r3, [pc, #128]	; (80025f0 <SystemInit+0xec>)
 8002570:	2200      	movs	r2, #0
 8002572:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8002574:	4b1e      	ldr	r3, [pc, #120]	; (80025f0 <SystemInit+0xec>)
 8002576:	2200      	movs	r2, #0
 8002578:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 800257a:	4b1d      	ldr	r3, [pc, #116]	; (80025f0 <SystemInit+0xec>)
 800257c:	2200      	movs	r2, #0
 800257e:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8002580:	4b1b      	ldr	r3, [pc, #108]	; (80025f0 <SystemInit+0xec>)
 8002582:	4a1d      	ldr	r2, [pc, #116]	; (80025f8 <SystemInit+0xf4>)
 8002584:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 8002586:	4b1a      	ldr	r3, [pc, #104]	; (80025f0 <SystemInit+0xec>)
 8002588:	4a1c      	ldr	r2, [pc, #112]	; (80025fc <SystemInit+0xf8>)
 800258a:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 800258c:	4b18      	ldr	r3, [pc, #96]	; (80025f0 <SystemInit+0xec>)
 800258e:	4a1c      	ldr	r2, [pc, #112]	; (8002600 <SystemInit+0xfc>)
 8002590:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 8002592:	4b17      	ldr	r3, [pc, #92]	; (80025f0 <SystemInit+0xec>)
 8002594:	2200      	movs	r2, #0
 8002596:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8002598:	4b15      	ldr	r3, [pc, #84]	; (80025f0 <SystemInit+0xec>)
 800259a:	4a19      	ldr	r2, [pc, #100]	; (8002600 <SystemInit+0xfc>)
 800259c:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 800259e:	4b14      	ldr	r3, [pc, #80]	; (80025f0 <SystemInit+0xec>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 80025a4:	4b12      	ldr	r3, [pc, #72]	; (80025f0 <SystemInit+0xec>)
 80025a6:	4a16      	ldr	r2, [pc, #88]	; (8002600 <SystemInit+0xfc>)
 80025a8:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 80025aa:	4b11      	ldr	r3, [pc, #68]	; (80025f0 <SystemInit+0xec>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 80025b0:	4b0f      	ldr	r3, [pc, #60]	; (80025f0 <SystemInit+0xec>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a0e      	ldr	r2, [pc, #56]	; (80025f0 <SystemInit+0xec>)
 80025b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025ba:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 80025bc:	4b0c      	ldr	r3, [pc, #48]	; (80025f0 <SystemInit+0xec>)
 80025be:	2200      	movs	r2, #0
 80025c0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 80025c2:	4b10      	ldr	r3, [pc, #64]	; (8002604 <SystemInit+0x100>)
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	4b10      	ldr	r3, [pc, #64]	; (8002608 <SystemInit+0x104>)
 80025c8:	4013      	ands	r3, r2
 80025ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025ce:	d202      	bcs.n	80025d6 <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 80025d0:	4b0e      	ldr	r3, [pc, #56]	; (800260c <SystemInit+0x108>)
 80025d2:	2201      	movs	r2, #1
 80025d4:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80025d6:	4b0e      	ldr	r3, [pc, #56]	; (8002610 <SystemInit+0x10c>)
 80025d8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80025dc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80025de:	bf00      	nop
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr
 80025e8:	e000ed00 	.word	0xe000ed00
 80025ec:	52002000 	.word	0x52002000
 80025f0:	58024400 	.word	0x58024400
 80025f4:	eaf6ed7f 	.word	0xeaf6ed7f
 80025f8:	02020200 	.word	0x02020200
 80025fc:	01ff0000 	.word	0x01ff0000
 8002600:	01010280 	.word	0x01010280
 8002604:	5c001000 	.word	0x5c001000
 8002608:	ffff0000 	.word	0xffff0000
 800260c:	51008108 	.word	0x51008108
 8002610:	52004000 	.word	0x52004000

08002614 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b09a      	sub	sp, #104	; 0x68
 8002618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800261a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800261e:	2200      	movs	r2, #0
 8002620:	601a      	str	r2, [r3, #0]
 8002622:	605a      	str	r2, [r3, #4]
 8002624:	609a      	str	r2, [r3, #8]
 8002626:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002628:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800262c:	2200      	movs	r2, #0
 800262e:	601a      	str	r2, [r3, #0]
 8002630:	605a      	str	r2, [r3, #4]
 8002632:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002634:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]
 800263c:	605a      	str	r2, [r3, #4]
 800263e:	609a      	str	r2, [r3, #8]
 8002640:	60da      	str	r2, [r3, #12]
 8002642:	611a      	str	r2, [r3, #16]
 8002644:	615a      	str	r2, [r3, #20]
 8002646:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002648:	1d3b      	adds	r3, r7, #4
 800264a:	222c      	movs	r2, #44	; 0x2c
 800264c:	2100      	movs	r1, #0
 800264e:	4618      	mov	r0, r3
 8002650:	f011 fb4c 	bl	8013cec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002654:	4b44      	ldr	r3, [pc, #272]	; (8002768 <MX_TIM1_Init+0x154>)
 8002656:	4a45      	ldr	r2, [pc, #276]	; (800276c <MX_TIM1_Init+0x158>)
 8002658:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 50-1;
 800265a:	4b43      	ldr	r3, [pc, #268]	; (8002768 <MX_TIM1_Init+0x154>)
 800265c:	2231      	movs	r2, #49	; 0x31
 800265e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002660:	4b41      	ldr	r3, [pc, #260]	; (8002768 <MX_TIM1_Init+0x154>)
 8002662:	2200      	movs	r2, #0
 8002664:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 8002666:	4b40      	ldr	r3, [pc, #256]	; (8002768 <MX_TIM1_Init+0x154>)
 8002668:	f24f 4223 	movw	r2, #62499	; 0xf423
 800266c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800266e:	4b3e      	ldr	r3, [pc, #248]	; (8002768 <MX_TIM1_Init+0x154>)
 8002670:	2200      	movs	r2, #0
 8002672:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002674:	4b3c      	ldr	r3, [pc, #240]	; (8002768 <MX_TIM1_Init+0x154>)
 8002676:	2200      	movs	r2, #0
 8002678:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800267a:	4b3b      	ldr	r3, [pc, #236]	; (8002768 <MX_TIM1_Init+0x154>)
 800267c:	2200      	movs	r2, #0
 800267e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002680:	4839      	ldr	r0, [pc, #228]	; (8002768 <MX_TIM1_Init+0x154>)
 8002682:	f00a f8ee 	bl	800c862 <HAL_TIM_Base_Init>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d001      	beq.n	8002690 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800268c:	f7ff fb0e 	bl	8001cac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002690:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002694:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002696:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800269a:	4619      	mov	r1, r3
 800269c:	4832      	ldr	r0, [pc, #200]	; (8002768 <MX_TIM1_Init+0x154>)
 800269e:	f00a fe69 	bl	800d374 <HAL_TIM_ConfigClockSource>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80026a8:	f7ff fb00 	bl	8001cac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80026ac:	482e      	ldr	r0, [pc, #184]	; (8002768 <MX_TIM1_Init+0x154>)
 80026ae:	f00a fbe5 	bl	800ce7c <HAL_TIM_PWM_Init>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d001      	beq.n	80026bc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80026b8:	f7ff faf8 	bl	8001cac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026bc:	2300      	movs	r3, #0
 80026be:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80026c0:	2300      	movs	r3, #0
 80026c2:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026c4:	2300      	movs	r3, #0
 80026c6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80026c8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80026cc:	4619      	mov	r1, r3
 80026ce:	4826      	ldr	r0, [pc, #152]	; (8002768 <MX_TIM1_Init+0x154>)
 80026d0:	f00b fbb0 	bl	800de34 <HAL_TIMEx_MasterConfigSynchronization>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80026da:	f7ff fae7 	bl	8001cac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026de:	2360      	movs	r3, #96	; 0x60
 80026e0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 80026e2:	f240 13df 	movw	r3, #479	; 0x1df
 80026e6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026e8:	2300      	movs	r3, #0
 80026ea:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80026ec:	2300      	movs	r3, #0
 80026ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026f0:	2300      	movs	r3, #0
 80026f2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80026f4:	2300      	movs	r3, #0
 80026f6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80026f8:	2300      	movs	r3, #0
 80026fa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002700:	2200      	movs	r2, #0
 8002702:	4619      	mov	r1, r3
 8002704:	4818      	ldr	r0, [pc, #96]	; (8002768 <MX_TIM1_Init+0x154>)
 8002706:	f00a fd21 	bl	800d14c <HAL_TIM_PWM_ConfigChannel>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d001      	beq.n	8002714 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8002710:	f7ff facc 	bl	8001cac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002714:	2300      	movs	r3, #0
 8002716:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002718:	2300      	movs	r3, #0
 800271a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800271c:	2300      	movs	r3, #0
 800271e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002720:	2300      	movs	r3, #0
 8002722:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002724:	2300      	movs	r3, #0
 8002726:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002728:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800272c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800272e:	2300      	movs	r3, #0
 8002730:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002732:	2300      	movs	r3, #0
 8002734:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002736:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800273a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800273c:	2300      	movs	r3, #0
 800273e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002740:	2300      	movs	r3, #0
 8002742:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002744:	1d3b      	adds	r3, r7, #4
 8002746:	4619      	mov	r1, r3
 8002748:	4807      	ldr	r0, [pc, #28]	; (8002768 <MX_TIM1_Init+0x154>)
 800274a:	f00b fc01 	bl	800df50 <HAL_TIMEx_ConfigBreakDeadTime>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d001      	beq.n	8002758 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8002754:	f7ff faaa 	bl	8001cac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002758:	4803      	ldr	r0, [pc, #12]	; (8002768 <MX_TIM1_Init+0x154>)
 800275a:	f000 f949 	bl	80029f0 <HAL_TIM_MspPostInit>

}
 800275e:	bf00      	nop
 8002760:	3768      	adds	r7, #104	; 0x68
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	240005e8 	.word	0x240005e8
 800276c:	40010000 	.word	0x40010000

08002770 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b08e      	sub	sp, #56	; 0x38
 8002774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002776:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800277a:	2200      	movs	r2, #0
 800277c:	601a      	str	r2, [r3, #0]
 800277e:	605a      	str	r2, [r3, #4]
 8002780:	609a      	str	r2, [r3, #8]
 8002782:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002784:	f107 031c 	add.w	r3, r7, #28
 8002788:	2200      	movs	r2, #0
 800278a:	601a      	str	r2, [r3, #0]
 800278c:	605a      	str	r2, [r3, #4]
 800278e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002790:	463b      	mov	r3, r7
 8002792:	2200      	movs	r2, #0
 8002794:	601a      	str	r2, [r3, #0]
 8002796:	605a      	str	r2, [r3, #4]
 8002798:	609a      	str	r2, [r3, #8]
 800279a:	60da      	str	r2, [r3, #12]
 800279c:	611a      	str	r2, [r3, #16]
 800279e:	615a      	str	r2, [r3, #20]
 80027a0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80027a2:	4b2d      	ldr	r3, [pc, #180]	; (8002858 <MX_TIM2_Init+0xe8>)
 80027a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80027a8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 50-1;
 80027aa:	4b2b      	ldr	r3, [pc, #172]	; (8002858 <MX_TIM2_Init+0xe8>)
 80027ac:	2231      	movs	r2, #49	; 0x31
 80027ae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027b0:	4b29      	ldr	r3, [pc, #164]	; (8002858 <MX_TIM2_Init+0xe8>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 80027b6:	4b28      	ldr	r3, [pc, #160]	; (8002858 <MX_TIM2_Init+0xe8>)
 80027b8:	f640 4234 	movw	r2, #3124	; 0xc34
 80027bc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027be:	4b26      	ldr	r3, [pc, #152]	; (8002858 <MX_TIM2_Init+0xe8>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80027c4:	4b24      	ldr	r3, [pc, #144]	; (8002858 <MX_TIM2_Init+0xe8>)
 80027c6:	2280      	movs	r2, #128	; 0x80
 80027c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80027ca:	4823      	ldr	r0, [pc, #140]	; (8002858 <MX_TIM2_Init+0xe8>)
 80027cc:	f00a f849 	bl	800c862 <HAL_TIM_Base_Init>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80027d6:	f7ff fa69 	bl	8001cac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027de:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80027e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027e4:	4619      	mov	r1, r3
 80027e6:	481c      	ldr	r0, [pc, #112]	; (8002858 <MX_TIM2_Init+0xe8>)
 80027e8:	f00a fdc4 	bl	800d374 <HAL_TIM_ConfigClockSource>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80027f2:	f7ff fa5b 	bl	8001cac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80027f6:	4818      	ldr	r0, [pc, #96]	; (8002858 <MX_TIM2_Init+0xe8>)
 80027f8:	f00a fb40 	bl	800ce7c <HAL_TIM_PWM_Init>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d001      	beq.n	8002806 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002802:	f7ff fa53 	bl	8001cac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002806:	2320      	movs	r3, #32
 8002808:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800280a:	2300      	movs	r3, #0
 800280c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800280e:	f107 031c 	add.w	r3, r7, #28
 8002812:	4619      	mov	r1, r3
 8002814:	4810      	ldr	r0, [pc, #64]	; (8002858 <MX_TIM2_Init+0xe8>)
 8002816:	f00b fb0d 	bl	800de34 <HAL_TIMEx_MasterConfigSynchronization>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002820:	f7ff fa44 	bl	8001cac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002824:	2360      	movs	r3, #96	; 0x60
 8002826:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002828:	2300      	movs	r3, #0
 800282a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800282c:	2300      	movs	r3, #0
 800282e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002830:	2300      	movs	r3, #0
 8002832:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002834:	463b      	mov	r3, r7
 8002836:	220c      	movs	r2, #12
 8002838:	4619      	mov	r1, r3
 800283a:	4807      	ldr	r0, [pc, #28]	; (8002858 <MX_TIM2_Init+0xe8>)
 800283c:	f00a fc86 	bl	800d14c <HAL_TIM_PWM_ConfigChannel>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002846:	f7ff fa31 	bl	8001cac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800284a:	4803      	ldr	r0, [pc, #12]	; (8002858 <MX_TIM2_Init+0xe8>)
 800284c:	f000 f8d0 	bl	80029f0 <HAL_TIM_MspPostInit>

}
 8002850:	bf00      	nop
 8002852:	3738      	adds	r7, #56	; 0x38
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	24000634 	.word	0x24000634

0800285c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b088      	sub	sp, #32
 8002860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002862:	f107 0310 	add.w	r3, r7, #16
 8002866:	2200      	movs	r2, #0
 8002868:	601a      	str	r2, [r3, #0]
 800286a:	605a      	str	r2, [r3, #4]
 800286c:	609a      	str	r2, [r3, #8]
 800286e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002870:	1d3b      	adds	r3, r7, #4
 8002872:	2200      	movs	r2, #0
 8002874:	601a      	str	r2, [r3, #0]
 8002876:	605a      	str	r2, [r3, #4]
 8002878:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800287a:	4b1d      	ldr	r3, [pc, #116]	; (80028f0 <MX_TIM3_Init+0x94>)
 800287c:	4a1d      	ldr	r2, [pc, #116]	; (80028f4 <MX_TIM3_Init+0x98>)
 800287e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8002880:	4b1b      	ldr	r3, [pc, #108]	; (80028f0 <MX_TIM3_Init+0x94>)
 8002882:	2263      	movs	r2, #99	; 0x63
 8002884:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002886:	4b1a      	ldr	r3, [pc, #104]	; (80028f0 <MX_TIM3_Init+0x94>)
 8002888:	2200      	movs	r2, #0
 800288a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 800288c:	4b18      	ldr	r3, [pc, #96]	; (80028f0 <MX_TIM3_Init+0x94>)
 800288e:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8002892:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002894:	4b16      	ldr	r3, [pc, #88]	; (80028f0 <MX_TIM3_Init+0x94>)
 8002896:	2200      	movs	r2, #0
 8002898:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800289a:	4b15      	ldr	r3, [pc, #84]	; (80028f0 <MX_TIM3_Init+0x94>)
 800289c:	2200      	movs	r2, #0
 800289e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80028a0:	4813      	ldr	r0, [pc, #76]	; (80028f0 <MX_TIM3_Init+0x94>)
 80028a2:	f009 ffde 	bl	800c862 <HAL_TIM_Base_Init>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80028ac:	f7ff f9fe 	bl	8001cac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028b4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80028b6:	f107 0310 	add.w	r3, r7, #16
 80028ba:	4619      	mov	r1, r3
 80028bc:	480c      	ldr	r0, [pc, #48]	; (80028f0 <MX_TIM3_Init+0x94>)
 80028be:	f00a fd59 	bl	800d374 <HAL_TIM_ConfigClockSource>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d001      	beq.n	80028cc <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80028c8:	f7ff f9f0 	bl	8001cac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028cc:	2300      	movs	r3, #0
 80028ce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028d0:	2300      	movs	r3, #0
 80028d2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80028d4:	1d3b      	adds	r3, r7, #4
 80028d6:	4619      	mov	r1, r3
 80028d8:	4805      	ldr	r0, [pc, #20]	; (80028f0 <MX_TIM3_Init+0x94>)
 80028da:	f00b faab 	bl	800de34 <HAL_TIMEx_MasterConfigSynchronization>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d001      	beq.n	80028e8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80028e4:	f7ff f9e2 	bl	8001cac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80028e8:	bf00      	nop
 80028ea:	3720      	adds	r7, #32
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	24000680 	.word	0x24000680
 80028f4:	40000400 	.word	0x40000400

080028f8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a37      	ldr	r2, [pc, #220]	; (80029e4 <HAL_TIM_Base_MspInit+0xec>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d12f      	bne.n	800296a <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800290a:	4b37      	ldr	r3, [pc, #220]	; (80029e8 <HAL_TIM_Base_MspInit+0xf0>)
 800290c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002910:	4a35      	ldr	r2, [pc, #212]	; (80029e8 <HAL_TIM_Base_MspInit+0xf0>)
 8002912:	f043 0301 	orr.w	r3, r3, #1
 8002916:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800291a:	4b33      	ldr	r3, [pc, #204]	; (80029e8 <HAL_TIM_Base_MspInit+0xf0>)
 800291c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002920:	f003 0301 	and.w	r3, r3, #1
 8002924:	617b      	str	r3, [r7, #20]
 8002926:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 8002928:	2200      	movs	r2, #0
 800292a:	2105      	movs	r1, #5
 800292c:	2018      	movs	r0, #24
 800292e:	f002 f903 	bl	8004b38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8002932:	2018      	movs	r0, #24
 8002934:	f002 f91a 	bl	8004b6c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8002938:	2200      	movs	r2, #0
 800293a:	2105      	movs	r1, #5
 800293c:	2019      	movs	r0, #25
 800293e:	f002 f8fb 	bl	8004b38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002942:	2019      	movs	r0, #25
 8002944:	f002 f912 	bl	8004b6c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 8002948:	2200      	movs	r2, #0
 800294a:	2105      	movs	r1, #5
 800294c:	201a      	movs	r0, #26
 800294e:	f002 f8f3 	bl	8004b38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8002952:	201a      	movs	r0, #26
 8002954:	f002 f90a 	bl	8004b6c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8002958:	2200      	movs	r2, #0
 800295a:	2105      	movs	r1, #5
 800295c:	201b      	movs	r0, #27
 800295e:	f002 f8eb 	bl	8004b38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002962:	201b      	movs	r0, #27
 8002964:	f002 f902 	bl	8004b6c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002968:	e038      	b.n	80029dc <HAL_TIM_Base_MspInit+0xe4>
  else if(tim_baseHandle->Instance==TIM2)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002972:	d117      	bne.n	80029a4 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002974:	4b1c      	ldr	r3, [pc, #112]	; (80029e8 <HAL_TIM_Base_MspInit+0xf0>)
 8002976:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800297a:	4a1b      	ldr	r2, [pc, #108]	; (80029e8 <HAL_TIM_Base_MspInit+0xf0>)
 800297c:	f043 0301 	orr.w	r3, r3, #1
 8002980:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002984:	4b18      	ldr	r3, [pc, #96]	; (80029e8 <HAL_TIM_Base_MspInit+0xf0>)
 8002986:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	613b      	str	r3, [r7, #16]
 8002990:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002992:	2200      	movs	r2, #0
 8002994:	2105      	movs	r1, #5
 8002996:	201c      	movs	r0, #28
 8002998:	f002 f8ce 	bl	8004b38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800299c:	201c      	movs	r0, #28
 800299e:	f002 f8e5 	bl	8004b6c <HAL_NVIC_EnableIRQ>
}
 80029a2:	e01b      	b.n	80029dc <HAL_TIM_Base_MspInit+0xe4>
  else if(tim_baseHandle->Instance==TIM3)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a10      	ldr	r2, [pc, #64]	; (80029ec <HAL_TIM_Base_MspInit+0xf4>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d116      	bne.n	80029dc <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029ae:	4b0e      	ldr	r3, [pc, #56]	; (80029e8 <HAL_TIM_Base_MspInit+0xf0>)
 80029b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80029b4:	4a0c      	ldr	r2, [pc, #48]	; (80029e8 <HAL_TIM_Base_MspInit+0xf0>)
 80029b6:	f043 0302 	orr.w	r3, r3, #2
 80029ba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80029be:	4b0a      	ldr	r3, [pc, #40]	; (80029e8 <HAL_TIM_Base_MspInit+0xf0>)
 80029c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80029c4:	f003 0302 	and.w	r3, r3, #2
 80029c8:	60fb      	str	r3, [r7, #12]
 80029ca:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80029cc:	2200      	movs	r2, #0
 80029ce:	2105      	movs	r1, #5
 80029d0:	201d      	movs	r0, #29
 80029d2:	f002 f8b1 	bl	8004b38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80029d6:	201d      	movs	r0, #29
 80029d8:	f002 f8c8 	bl	8004b6c <HAL_NVIC_EnableIRQ>
}
 80029dc:	bf00      	nop
 80029de:	3718      	adds	r7, #24
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	40010000 	.word	0x40010000
 80029e8:	58024400 	.word	0x58024400
 80029ec:	40000400 	.word	0x40000400

080029f0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b08a      	sub	sp, #40	; 0x28
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029f8:	f107 0314 	add.w	r3, r7, #20
 80029fc:	2200      	movs	r2, #0
 80029fe:	601a      	str	r2, [r3, #0]
 8002a00:	605a      	str	r2, [r3, #4]
 8002a02:	609a      	str	r2, [r3, #8]
 8002a04:	60da      	str	r2, [r3, #12]
 8002a06:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a26      	ldr	r2, [pc, #152]	; (8002aa8 <HAL_TIM_MspPostInit+0xb8>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d120      	bne.n	8002a54 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a12:	4b26      	ldr	r3, [pc, #152]	; (8002aac <HAL_TIM_MspPostInit+0xbc>)
 8002a14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a18:	4a24      	ldr	r2, [pc, #144]	; (8002aac <HAL_TIM_MspPostInit+0xbc>)
 8002a1a:	f043 0301 	orr.w	r3, r3, #1
 8002a1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a22:	4b22      	ldr	r3, [pc, #136]	; (8002aac <HAL_TIM_MspPostInit+0xbc>)
 8002a24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a28:	f003 0301 	and.w	r3, r3, #1
 8002a2c:	613b      	str	r3, [r7, #16]
 8002a2e:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002a30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a36:	2302      	movs	r3, #2
 8002a38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002a42:	2301      	movs	r3, #1
 8002a44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a46:	f107 0314 	add.w	r3, r7, #20
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	4818      	ldr	r0, [pc, #96]	; (8002ab0 <HAL_TIM_MspPostInit+0xc0>)
 8002a4e:	f005 fae9 	bl	8008024 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002a52:	e024      	b.n	8002a9e <HAL_TIM_MspPostInit+0xae>
  else if(timHandle->Instance==TIM2)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a5c:	d11f      	bne.n	8002a9e <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a5e:	4b13      	ldr	r3, [pc, #76]	; (8002aac <HAL_TIM_MspPostInit+0xbc>)
 8002a60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a64:	4a11      	ldr	r2, [pc, #68]	; (8002aac <HAL_TIM_MspPostInit+0xbc>)
 8002a66:	f043 0302 	orr.w	r3, r3, #2
 8002a6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a6e:	4b0f      	ldr	r3, [pc, #60]	; (8002aac <HAL_TIM_MspPostInit+0xbc>)
 8002a70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a74:	f003 0302 	and.w	r3, r3, #2
 8002a78:	60fb      	str	r3, [r7, #12]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002a7c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a82:	2302      	movs	r3, #2
 8002a84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a86:	2300      	movs	r3, #0
 8002a88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a92:	f107 0314 	add.w	r3, r7, #20
 8002a96:	4619      	mov	r1, r3
 8002a98:	4806      	ldr	r0, [pc, #24]	; (8002ab4 <HAL_TIM_MspPostInit+0xc4>)
 8002a9a:	f005 fac3 	bl	8008024 <HAL_GPIO_Init>
}
 8002a9e:	bf00      	nop
 8002aa0:	3728      	adds	r7, #40	; 0x28
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	40010000 	.word	0x40010000
 8002aac:	58024400 	.word	0x58024400
 8002ab0:	58020000 	.word	0x58020000
 8002ab4:	58020400 	.word	0x58020400

08002ab8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002abc:	4b22      	ldr	r3, [pc, #136]	; (8002b48 <MX_USART1_UART_Init+0x90>)
 8002abe:	4a23      	ldr	r2, [pc, #140]	; (8002b4c <MX_USART1_UART_Init+0x94>)
 8002ac0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8002ac2:	4b21      	ldr	r3, [pc, #132]	; (8002b48 <MX_USART1_UART_Init+0x90>)
 8002ac4:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8002ac8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002aca:	4b1f      	ldr	r3, [pc, #124]	; (8002b48 <MX_USART1_UART_Init+0x90>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002ad0:	4b1d      	ldr	r3, [pc, #116]	; (8002b48 <MX_USART1_UART_Init+0x90>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002ad6:	4b1c      	ldr	r3, [pc, #112]	; (8002b48 <MX_USART1_UART_Init+0x90>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002adc:	4b1a      	ldr	r3, [pc, #104]	; (8002b48 <MX_USART1_UART_Init+0x90>)
 8002ade:	220c      	movs	r2, #12
 8002ae0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ae2:	4b19      	ldr	r3, [pc, #100]	; (8002b48 <MX_USART1_UART_Init+0x90>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ae8:	4b17      	ldr	r3, [pc, #92]	; (8002b48 <MX_USART1_UART_Init+0x90>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002aee:	4b16      	ldr	r3, [pc, #88]	; (8002b48 <MX_USART1_UART_Init+0x90>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002af4:	4b14      	ldr	r3, [pc, #80]	; (8002b48 <MX_USART1_UART_Init+0x90>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002afa:	4b13      	ldr	r3, [pc, #76]	; (8002b48 <MX_USART1_UART_Init+0x90>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b00:	4811      	ldr	r0, [pc, #68]	; (8002b48 <MX_USART1_UART_Init+0x90>)
 8002b02:	f00b fac1 	bl	800e088 <HAL_UART_Init>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d001      	beq.n	8002b10 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002b0c:	f7ff f8ce 	bl	8001cac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b10:	2100      	movs	r1, #0
 8002b12:	480d      	ldr	r0, [pc, #52]	; (8002b48 <MX_USART1_UART_Init+0x90>)
 8002b14:	f00d ff99 	bl	8010a4a <HAL_UARTEx_SetTxFifoThreshold>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d001      	beq.n	8002b22 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002b1e:	f7ff f8c5 	bl	8001cac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b22:	2100      	movs	r1, #0
 8002b24:	4808      	ldr	r0, [pc, #32]	; (8002b48 <MX_USART1_UART_Init+0x90>)
 8002b26:	f00d ffce 	bl	8010ac6 <HAL_UARTEx_SetRxFifoThreshold>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d001      	beq.n	8002b34 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002b30:	f7ff f8bc 	bl	8001cac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002b34:	4804      	ldr	r0, [pc, #16]	; (8002b48 <MX_USART1_UART_Init+0x90>)
 8002b36:	f00d ff4f 	bl	80109d8 <HAL_UARTEx_DisableFifoMode>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d001      	beq.n	8002b44 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002b40:	f7ff f8b4 	bl	8001cac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002b44:	bf00      	nop
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	240006cc 	.word	0x240006cc
 8002b4c:	40011000 	.word	0x40011000

08002b50 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b0ba      	sub	sp, #232	; 0xe8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b58:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	601a      	str	r2, [r3, #0]
 8002b60:	605a      	str	r2, [r3, #4]
 8002b62:	609a      	str	r2, [r3, #8]
 8002b64:	60da      	str	r2, [r3, #12]
 8002b66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b68:	f107 0310 	add.w	r3, r7, #16
 8002b6c:	22c0      	movs	r2, #192	; 0xc0
 8002b6e:	2100      	movs	r1, #0
 8002b70:	4618      	mov	r0, r3
 8002b72:	f011 f8bb 	bl	8013cec <memset>
  if(uartHandle->Instance==USART1)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a41      	ldr	r2, [pc, #260]	; (8002c80 <HAL_UART_MspInit+0x130>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d17b      	bne.n	8002c78 <HAL_UART_MspInit+0x128>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002b80:	f04f 0201 	mov.w	r2, #1
 8002b84:	f04f 0300 	mov.w	r3, #0
 8002b88:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_HSI;
 8002b8c:	2318      	movs	r3, #24
 8002b8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b92:	f107 0310 	add.w	r3, r7, #16
 8002b96:	4618      	mov	r0, r3
 8002b98:	f006 fdc8 	bl	800972c <HAL_RCCEx_PeriphCLKConfig>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002ba2:	f7ff f883 	bl	8001cac <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ba6:	4b37      	ldr	r3, [pc, #220]	; (8002c84 <HAL_UART_MspInit+0x134>)
 8002ba8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002bac:	4a35      	ldr	r2, [pc, #212]	; (8002c84 <HAL_UART_MspInit+0x134>)
 8002bae:	f043 0310 	orr.w	r3, r3, #16
 8002bb2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002bb6:	4b33      	ldr	r3, [pc, #204]	; (8002c84 <HAL_UART_MspInit+0x134>)
 8002bb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002bbc:	f003 0310 	and.w	r3, r3, #16
 8002bc0:	60fb      	str	r3, [r7, #12]
 8002bc2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bc4:	4b2f      	ldr	r3, [pc, #188]	; (8002c84 <HAL_UART_MspInit+0x134>)
 8002bc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bca:	4a2e      	ldr	r2, [pc, #184]	; (8002c84 <HAL_UART_MspInit+0x134>)
 8002bcc:	f043 0301 	orr.w	r3, r3, #1
 8002bd0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002bd4:	4b2b      	ldr	r3, [pc, #172]	; (8002c84 <HAL_UART_MspInit+0x134>)
 8002bd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bda:	f003 0301 	and.w	r3, r3, #1
 8002bde:	60bb      	str	r3, [r7, #8]
 8002be0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002be2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002be6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bea:	2302      	movs	r3, #2
 8002bec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002bfc:	2307      	movs	r3, #7
 8002bfe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c02:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002c06:	4619      	mov	r1, r3
 8002c08:	481f      	ldr	r0, [pc, #124]	; (8002c88 <HAL_UART_MspInit+0x138>)
 8002c0a:	f005 fa0b 	bl	8008024 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream2;
 8002c0e:	4b1f      	ldr	r3, [pc, #124]	; (8002c8c <HAL_UART_MspInit+0x13c>)
 8002c10:	4a1f      	ldr	r2, [pc, #124]	; (8002c90 <HAL_UART_MspInit+0x140>)
 8002c12:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002c14:	4b1d      	ldr	r3, [pc, #116]	; (8002c8c <HAL_UART_MspInit+0x13c>)
 8002c16:	222a      	movs	r2, #42	; 0x2a
 8002c18:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c1a:	4b1c      	ldr	r3, [pc, #112]	; (8002c8c <HAL_UART_MspInit+0x13c>)
 8002c1c:	2240      	movs	r2, #64	; 0x40
 8002c1e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c20:	4b1a      	ldr	r3, [pc, #104]	; (8002c8c <HAL_UART_MspInit+0x13c>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002c26:	4b19      	ldr	r3, [pc, #100]	; (8002c8c <HAL_UART_MspInit+0x13c>)
 8002c28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c2c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c2e:	4b17      	ldr	r3, [pc, #92]	; (8002c8c <HAL_UART_MspInit+0x13c>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c34:	4b15      	ldr	r3, [pc, #84]	; (8002c8c <HAL_UART_MspInit+0x13c>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002c3a:	4b14      	ldr	r3, [pc, #80]	; (8002c8c <HAL_UART_MspInit+0x13c>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002c40:	4b12      	ldr	r3, [pc, #72]	; (8002c8c <HAL_UART_MspInit+0x13c>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c46:	4b11      	ldr	r3, [pc, #68]	; (8002c8c <HAL_UART_MspInit+0x13c>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002c4c:	480f      	ldr	r0, [pc, #60]	; (8002c8c <HAL_UART_MspInit+0x13c>)
 8002c4e:	f002 fba1 	bl	8005394 <HAL_DMA_Init>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d001      	beq.n	8002c5c <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8002c58:	f7ff f828 	bl	8001cac <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4a0b      	ldr	r2, [pc, #44]	; (8002c8c <HAL_UART_MspInit+0x13c>)
 8002c60:	67da      	str	r2, [r3, #124]	; 0x7c
 8002c62:	4a0a      	ldr	r2, [pc, #40]	; (8002c8c <HAL_UART_MspInit+0x13c>)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002c68:	2200      	movs	r2, #0
 8002c6a:	2105      	movs	r1, #5
 8002c6c:	2025      	movs	r0, #37	; 0x25
 8002c6e:	f001 ff63 	bl	8004b38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002c72:	2025      	movs	r0, #37	; 0x25
 8002c74:	f001 ff7a 	bl	8004b6c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002c78:	bf00      	nop
 8002c7a:	37e8      	adds	r7, #232	; 0xe8
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	40011000 	.word	0x40011000
 8002c84:	58024400 	.word	0x58024400
 8002c88:	58020000 	.word	0x58020000
 8002c8c:	24000760 	.word	0x24000760
 8002c90:	40020040 	.word	0x40020040

08002c94 <voltage_monitor_init>:

#include "voltage_monitor.h"

VOLTAGE_RAIL rail_monitor[NUM_VOLTAGE_RAILS];

uint8_t voltage_monitor_init() {
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	71fb      	strb	r3, [r7, #7]

	rail_monitor[RAIL_vsense].name = RAIL_vsense;
 8002c9e:	4bc2      	ldr	r3, [pc, #776]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	701a      	strb	r2, [r3, #0]
	rail_monitor[RAIL_vsense].error_count = 0;
 8002ca4:	4bc0      	ldr	r3, [pc, #768]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	705a      	strb	r2, [r3, #1]
	rail_monitor[RAIL_vsense].is_enabled = 1;
 8002caa:	4bbf      	ldr	r3, [pc, #764]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002cac:	2201      	movs	r2, #1
 8002cae:	709a      	strb	r2, [r3, #2]
	rail_monitor[RAIL_vsense].data = 0;
 8002cb0:	4bbd      	ldr	r3, [pc, #756]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	809a      	strh	r2, [r3, #4]
	rail_monitor[RAIL_vsense].max_voltage = 10000; // TODO: Get actual range from Sanj
 8002cb6:	4bbc      	ldr	r3, [pc, #752]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002cb8:	f242 7210 	movw	r2, #10000	; 0x2710
 8002cbc:	80da      	strh	r2, [r3, #6]
	rail_monitor[RAIL_vsense].min_voltage = 0;
 8002cbe:	4bba      	ldr	r3, [pc, #744]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	811a      	strh	r2, [r3, #8]

	rail_monitor[RAIL_vrefint].name = RAIL_vrefint;
 8002cc4:	4bb8      	ldr	r3, [pc, #736]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	729a      	strb	r2, [r3, #10]
	rail_monitor[RAIL_vrefint].error_count = 0;
 8002cca:	4bb7      	ldr	r3, [pc, #732]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	72da      	strb	r2, [r3, #11]
	rail_monitor[RAIL_vrefint].is_enabled = 1;
 8002cd0:	4bb5      	ldr	r3, [pc, #724]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	731a      	strb	r2, [r3, #12]
	rail_monitor[RAIL_vrefint].data = 0;
 8002cd6:	4bb4      	ldr	r3, [pc, #720]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	81da      	strh	r2, [r3, #14]
	rail_monitor[RAIL_vrefint].max_voltage = 10000; // TODO: Get actual range from Sanj
 8002cdc:	4bb2      	ldr	r3, [pc, #712]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002cde:	f242 7210 	movw	r2, #10000	; 0x2710
 8002ce2:	821a      	strh	r2, [r3, #16]
	rail_monitor[RAIL_vrefint].min_voltage = 0;
 8002ce4:	4bb0      	ldr	r3, [pc, #704]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	825a      	strh	r2, [r3, #18]

	rail_monitor[RAIL_TEMP1].name = RAIL_TEMP1;
 8002cea:	4baf      	ldr	r3, [pc, #700]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002cec:	2202      	movs	r2, #2
 8002cee:	751a      	strb	r2, [r3, #20]
	rail_monitor[RAIL_TEMP1].error_count = 0;
 8002cf0:	4bad      	ldr	r3, [pc, #692]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	755a      	strb	r2, [r3, #21]
	rail_monitor[RAIL_TEMP1].is_enabled = 1;
 8002cf6:	4bac      	ldr	r3, [pc, #688]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	759a      	strb	r2, [r3, #22]
	rail_monitor[RAIL_TEMP1].data = 0;
 8002cfc:	4baa      	ldr	r3, [pc, #680]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	831a      	strh	r2, [r3, #24]
	rail_monitor[RAIL_TEMP1].max_voltage = 10000; // TODO: Get actual range from Sanj
 8002d02:	4ba9      	ldr	r3, [pc, #676]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002d04:	f242 7210 	movw	r2, #10000	; 0x2710
 8002d08:	835a      	strh	r2, [r3, #26]
	rail_monitor[RAIL_TEMP1].min_voltage = 0;
 8002d0a:	4ba7      	ldr	r3, [pc, #668]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	839a      	strh	r2, [r3, #28]

	rail_monitor[RAIL_TEMP2].name = RAIL_TEMP2;
 8002d10:	4ba5      	ldr	r3, [pc, #660]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002d12:	2203      	movs	r2, #3
 8002d14:	779a      	strb	r2, [r3, #30]
	rail_monitor[RAIL_TEMP2].error_count = 0;
 8002d16:	4ba4      	ldr	r3, [pc, #656]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	77da      	strb	r2, [r3, #31]
	rail_monitor[RAIL_TEMP2].is_enabled = 1;
 8002d1c:	4ba2      	ldr	r3, [pc, #648]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 2020 	strb.w	r2, [r3, #32]
	rail_monitor[RAIL_TEMP2].data = 0;
 8002d24:	4ba0      	ldr	r3, [pc, #640]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	845a      	strh	r2, [r3, #34]	; 0x22
	rail_monitor[RAIL_TEMP2].max_voltage = 10000; // TODO: Get actual range from Sanj
 8002d2a:	4b9f      	ldr	r3, [pc, #636]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002d2c:	f242 7210 	movw	r2, #10000	; 0x2710
 8002d30:	849a      	strh	r2, [r3, #36]	; 0x24
	rail_monitor[RAIL_TEMP2].min_voltage = 0;
 8002d32:	4b9d      	ldr	r3, [pc, #628]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	84da      	strh	r2, [r3, #38]	; 0x26

	rail_monitor[RAIL_TEMP3].name = RAIL_TEMP3;
 8002d38:	4b9b      	ldr	r3, [pc, #620]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002d3a:	2204      	movs	r2, #4
 8002d3c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	rail_monitor[RAIL_TEMP3].error_count = 0;
 8002d40:	4b99      	ldr	r3, [pc, #612]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	rail_monitor[RAIL_TEMP3].is_enabled = 1;
 8002d48:	4b97      	ldr	r3, [pc, #604]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	rail_monitor[RAIL_TEMP3].data = 0;
 8002d50:	4b95      	ldr	r3, [pc, #596]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	859a      	strh	r2, [r3, #44]	; 0x2c
	rail_monitor[RAIL_TEMP3].max_voltage = 10000; // TODO: Get actual range from Sanj
 8002d56:	4b94      	ldr	r3, [pc, #592]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002d58:	f242 7210 	movw	r2, #10000	; 0x2710
 8002d5c:	85da      	strh	r2, [r3, #46]	; 0x2e
	rail_monitor[RAIL_TEMP3].min_voltage = 0;
 8002d5e:	4b92      	ldr	r3, [pc, #584]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	861a      	strh	r2, [r3, #48]	; 0x30

	rail_monitor[RAIL_TEMP4].name = RAIL_TEMP4;
 8002d64:	4b90      	ldr	r3, [pc, #576]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002d66:	2205      	movs	r2, #5
 8002d68:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	rail_monitor[RAIL_TEMP4].error_count = 0;
 8002d6c:	4b8e      	ldr	r3, [pc, #568]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	rail_monitor[RAIL_TEMP4].is_enabled = 1;
 8002d74:	4b8c      	ldr	r3, [pc, #560]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	rail_monitor[RAIL_TEMP4].data = 0;
 8002d7c:	4b8a      	ldr	r3, [pc, #552]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	86da      	strh	r2, [r3, #54]	; 0x36
	rail_monitor[RAIL_TEMP4].max_voltage = 10000; // TODO: Get actual range from Sanj
 8002d82:	4b89      	ldr	r3, [pc, #548]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002d84:	f242 7210 	movw	r2, #10000	; 0x2710
 8002d88:	871a      	strh	r2, [r3, #56]	; 0x38
	rail_monitor[RAIL_TEMP4].min_voltage = 0;
 8002d8a:	4b87      	ldr	r3, [pc, #540]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	875a      	strh	r2, [r3, #58]	; 0x3a

	rail_monitor[RAIL_busvmon].name = RAIL_busvmon;
 8002d90:	4b85      	ldr	r3, [pc, #532]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002d92:	2206      	movs	r2, #6
 8002d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	rail_monitor[RAIL_busvmon].error_count = 0;
 8002d98:	4b83      	ldr	r3, [pc, #524]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	rail_monitor[RAIL_busvmon].is_enabled = 1;
 8002da0:	4b81      	ldr	r3, [pc, #516]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	rail_monitor[RAIL_busvmon].data = 0;
 8002da8:	4b7f      	ldr	r3, [pc, #508]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	rail_monitor[RAIL_busvmon].max_voltage = 10000; // TODO: Get actual range from Sanj
 8002db0:	4b7d      	ldr	r3, [pc, #500]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002db2:	f242 7210 	movw	r2, #10000	; 0x2710
 8002db6:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	rail_monitor[RAIL_busvmon].min_voltage = 0;
 8002dba:	4b7b      	ldr	r3, [pc, #492]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	rail_monitor[RAIL_busimon].name = RAIL_busimon;
 8002dc2:	4b79      	ldr	r3, [pc, #484]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002dc4:	2207      	movs	r2, #7
 8002dc6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	rail_monitor[RAIL_busimon].error_count = 0;
 8002dca:	4b77      	ldr	r3, [pc, #476]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	rail_monitor[RAIL_busimon].is_enabled = 1;
 8002dd2:	4b75      	ldr	r3, [pc, #468]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	rail_monitor[RAIL_busimon].data = 0;
 8002dda:	4b73      	ldr	r3, [pc, #460]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	rail_monitor[RAIL_busimon].max_voltage = 10000; // TODO: Get actual range from Sanj
 8002de2:	4b71      	ldr	r3, [pc, #452]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002de4:	f242 7210 	movw	r2, #10000	; 0x2710
 8002de8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	rail_monitor[RAIL_busimon].min_voltage = 0;
 8002dec:	4b6e      	ldr	r3, [pc, #440]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

	rail_monitor[RAIL_2v5].name = RAIL_2v5;
 8002df4:	4b6c      	ldr	r3, [pc, #432]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002df6:	2208      	movs	r2, #8
 8002df8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	rail_monitor[RAIL_2v5].error_count = 0;
 8002dfc:	4b6a      	ldr	r3, [pc, #424]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	rail_monitor[RAIL_2v5].is_enabled = 0;
 8002e04:	4b68      	ldr	r3, [pc, #416]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	rail_monitor[RAIL_2v5].data = 0;
 8002e0c:	4b66      	ldr	r3, [pc, #408]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	rail_monitor[RAIL_2v5].max_voltage = 3257;
 8002e14:	4b64      	ldr	r3, [pc, #400]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002e16:	f640 42b9 	movw	r2, #3257	; 0xcb9
 8002e1a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
	rail_monitor[RAIL_2v5].min_voltage = 2947;
 8002e1e:	4b62      	ldr	r3, [pc, #392]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002e20:	f640 3283 	movw	r2, #2947	; 0xb83
 8002e24:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

	rail_monitor[RAIL_3v3].name = RAIL_3v3;
 8002e28:	4b5f      	ldr	r3, [pc, #380]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002e2a:	2209      	movs	r2, #9
 8002e2c:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	rail_monitor[RAIL_3v3].error_count = 0;
 8002e30:	4b5d      	ldr	r3, [pc, #372]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	rail_monitor[RAIL_3v3].is_enabled = 0;
 8002e38:	4b5b      	ldr	r3, [pc, #364]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	rail_monitor[RAIL_3v3].data = 0;
 8002e40:	4b59      	ldr	r3, [pc, #356]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	rail_monitor[RAIL_3v3].max_voltage = 3909;
 8002e48:	4b57      	ldr	r3, [pc, #348]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002e4a:	f640 7245 	movw	r2, #3909	; 0xf45
 8002e4e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	//rail_monitor[RAIL_3v3].min_voltage = 3537;
	rail_monitor[RAIL_3v3].min_voltage = 0;
 8002e52:	4b55      	ldr	r3, [pc, #340]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62


	rail_monitor[RAIL_5v].name = RAIL_5v;
 8002e5a:	4b53      	ldr	r3, [pc, #332]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002e5c:	220a      	movs	r2, #10
 8002e5e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	rail_monitor[RAIL_5v].error_count = 0;
 8002e62:	4b51      	ldr	r3, [pc, #324]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	rail_monitor[RAIL_5v].is_enabled = 0;
 8002e6a:	4b4f      	ldr	r3, [pc, #316]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	rail_monitor[RAIL_5v].data = 0;
 8002e72:	4b4d      	ldr	r3, [pc, #308]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	rail_monitor[RAIL_5v].max_voltage = 3909;
 8002e7a:	4b4b      	ldr	r3, [pc, #300]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002e7c:	f640 7245 	movw	r2, #3909	; 0xf45
 8002e80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
	rail_monitor[RAIL_5v].min_voltage = 3537;
 8002e84:	4b48      	ldr	r3, [pc, #288]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002e86:	f640 52d1 	movw	r2, #3537	; 0xdd1
 8002e8a:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c

	rail_monitor[RAIL_n3v3].name = RAIL_n3v3;
 8002e8e:	4b46      	ldr	r3, [pc, #280]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002e90:	220b      	movs	r2, #11
 8002e92:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	rail_monitor[RAIL_n3v3].error_count = 0;
 8002e96:	4b44      	ldr	r3, [pc, #272]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	rail_monitor[RAIL_n3v3].is_enabled = 0;
 8002e9e:	4b42      	ldr	r3, [pc, #264]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	rail_monitor[RAIL_n3v3].data = 0;
 8002ea6:	4b40      	ldr	r3, [pc, #256]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
	rail_monitor[RAIL_n3v3].max_voltage = 4091;
 8002eae:	4b3e      	ldr	r3, [pc, #248]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002eb0:	f640 72fb 	movw	r2, #4091	; 0xffb
 8002eb4:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	rail_monitor[RAIL_n3v3].min_voltage = 3702;
 8002eb8:	4b3b      	ldr	r3, [pc, #236]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002eba:	f640 6276 	movw	r2, #3702	; 0xe76
 8002ebe:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76

	rail_monitor[RAIL_n5v].name = RAIL_n5v;
 8002ec2:	4b39      	ldr	r3, [pc, #228]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002ec4:	220c      	movs	r2, #12
 8002ec6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	rail_monitor[RAIL_n5v].error_count = 0;
 8002eca:	4b37      	ldr	r3, [pc, #220]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	rail_monitor[RAIL_n5v].is_enabled = 0;
 8002ed2:	4b35      	ldr	r3, [pc, #212]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	rail_monitor[RAIL_n5v].data = 0;
 8002eda:	4b33      	ldr	r3, [pc, #204]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	rail_monitor[RAIL_n5v].max_voltage = 4000;
 8002ee2:	4b31      	ldr	r3, [pc, #196]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002ee4:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8002ee8:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	//rail_monitor[RAIL_n5v].min_voltage = 3619;
	rail_monitor[RAIL_n5v].min_voltage = 0;
 8002eec:	4b2e      	ldr	r3, [pc, #184]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

	rail_monitor[RAIL_15v].name = RAIL_15v;
 8002ef4:	4b2c      	ldr	r3, [pc, #176]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002ef6:	220d      	movs	r2, #13
 8002ef8:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	rail_monitor[RAIL_15v].error_count = 0;
 8002efc:	4b2a      	ldr	r3, [pc, #168]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	rail_monitor[RAIL_15v].is_enabled = 0;
 8002f04:	4b28      	ldr	r3, [pc, #160]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	rail_monitor[RAIL_15v].data = 0;
 8002f0c:	4b26      	ldr	r3, [pc, #152]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	rail_monitor[RAIL_15v].max_voltage = 3896;
 8002f14:	4b24      	ldr	r3, [pc, #144]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002f16:	f640 7238 	movw	r2, #3896	; 0xf38
 8002f1a:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
	rail_monitor[RAIL_15v].min_voltage = 3525;
 8002f1e:	4b22      	ldr	r3, [pc, #136]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002f20:	f640 52c5 	movw	r2, #3525	; 0xdc5
 8002f24:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a

	rail_monitor[RAIL_5vref].name = RAIL_5vref;
 8002f28:	4b1f      	ldr	r3, [pc, #124]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002f2a:	220e      	movs	r2, #14
 8002f2c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	rail_monitor[RAIL_5vref].error_count = 0;
 8002f30:	4b1d      	ldr	r3, [pc, #116]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
	rail_monitor[RAIL_5vref].is_enabled = 0;
 8002f38:	4b1b      	ldr	r3, [pc, #108]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
	rail_monitor[RAIL_5vref].data = 0;
 8002f40:	4b19      	ldr	r3, [pc, #100]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
	rail_monitor[RAIL_5vref].max_voltage = 3909;
 8002f48:	4b17      	ldr	r3, [pc, #92]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002f4a:	f640 7245 	movw	r2, #3909	; 0xf45
 8002f4e:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
	rail_monitor[RAIL_5vref].min_voltage = 3537;
 8002f52:	4b15      	ldr	r3, [pc, #84]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002f54:	f640 52d1 	movw	r2, #3537	; 0xdd1
 8002f58:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94

	rail_monitor[RAIL_n200v].name = RAIL_n200v;
 8002f5c:	4b12      	ldr	r3, [pc, #72]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002f5e:	220f      	movs	r2, #15
 8002f60:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	rail_monitor[RAIL_n200v].error_count = 0;
 8002f64:	4b10      	ldr	r3, [pc, #64]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
	rail_monitor[RAIL_n200v].is_enabled = 0;
 8002f6c:	4b0e      	ldr	r3, [pc, #56]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	rail_monitor[RAIL_n200v].data = 0;
 8002f74:	4b0c      	ldr	r3, [pc, #48]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
	rail_monitor[RAIL_n200v].max_voltage = 4196;
 8002f7c:	4b0a      	ldr	r3, [pc, #40]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002f7e:	f241 0264 	movw	r2, #4196	; 0x1064
 8002f82:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	//rail_monitor[RAIL_n200v].min_voltage = 3796;
	rail_monitor[RAIL_n200v].min_voltage = 0;		// TODO: Currently set to 0, kept triggering because it has been reading ~3351
 8002f86:	4b08      	ldr	r3, [pc, #32]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e


	rail_monitor[RAIL_n800v].name = RAIL_n800v;
 8002f8e:	4b06      	ldr	r3, [pc, #24]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002f90:	2210      	movs	r2, #16
 8002f92:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	rail_monitor[RAIL_n800v].error_count = 0;
 8002f96:	4b04      	ldr	r3, [pc, #16]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
	rail_monitor[RAIL_n800v].is_enabled = 0;
 8002f9e:	4b02      	ldr	r3, [pc, #8]	; (8002fa8 <voltage_monitor_init+0x314>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
 8002fa6:	e001      	b.n	8002fac <voltage_monitor_init+0x318>
 8002fa8:	240007d8 	.word	0x240007d8
	rail_monitor[RAIL_n800v].data = 0;
 8002fac:	4b17      	ldr	r3, [pc, #92]	; (800300c <voltage_monitor_init+0x378>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	rail_monitor[RAIL_n800v].max_voltage = 3336;
 8002fb4:	4b15      	ldr	r3, [pc, #84]	; (800300c <voltage_monitor_init+0x378>)
 8002fb6:	f640 5208 	movw	r2, #3336	; 0xd08
 8002fba:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
	rail_monitor[RAIL_n800v].min_voltage = 3018;
 8002fbe:	4b13      	ldr	r3, [pc, #76]	; (800300c <voltage_monitor_init+0x378>)
 8002fc0:	f640 32ca 	movw	r2, #3018	; 0xbca
 8002fc4:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8

	rail_monitor[RAIL_TMP1].name = RAIL_TMP1;
 8002fc8:	4b10      	ldr	r3, [pc, #64]	; (800300c <voltage_monitor_init+0x378>)
 8002fca:	2211      	movs	r2, #17
 8002fcc:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
	rail_monitor[RAIL_TMP1].error_count = 0;
 8002fd0:	4b0e      	ldr	r3, [pc, #56]	; (800300c <voltage_monitor_init+0x378>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
	rail_monitor[RAIL_TMP1].is_enabled = 1;
 8002fd8:	4b0c      	ldr	r3, [pc, #48]	; (800300c <voltage_monitor_init+0x378>)
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
	rail_monitor[RAIL_TMP1].data = 0;
 8002fe0:	4b0a      	ldr	r3, [pc, #40]	; (800300c <voltage_monitor_init+0x378>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
	rail_monitor[RAIL_TMP1].max_voltage = 10000; // TODO: Get actual range from Sanj
 8002fe8:	4b08      	ldr	r3, [pc, #32]	; (800300c <voltage_monitor_init+0x378>)
 8002fea:	f242 7210 	movw	r2, #10000	; 0x2710
 8002fee:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
	rail_monitor[RAIL_TMP1].min_voltage = 0;
 8002ff2:	4b06      	ldr	r3, [pc, #24]	; (800300c <voltage_monitor_init+0x378>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2

	status = 1;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	71fb      	strb	r3, [r7, #7]

	return status;
 8002ffe:	79fb      	ldrb	r3, [r7, #7]
}
 8003000:	4618      	mov	r0, r3
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr
 800300c:	240007d8 	.word	0x240007d8

08003010 <set_rail_monitor_enable>:


uint8_t set_rail_monitor_enable(VOLTAGE_RAIL_NAME rail_name, uint8_t enable_value) {
 8003010:	b480      	push	{r7}
 8003012:	b085      	sub	sp, #20
 8003014:	af00      	add	r7, sp, #0
 8003016:	4603      	mov	r3, r0
 8003018:	460a      	mov	r2, r1
 800301a:	71fb      	strb	r3, [r7, #7]
 800301c:	4613      	mov	r3, r2
 800301e:	71bb      	strb	r3, [r7, #6]
	uint8_t status = 0;
 8003020:	2300      	movs	r3, #0
 8003022:	73fb      	strb	r3, [r7, #15]
	rail_monitor[rail_name].is_enabled = enable_value;
 8003024:	79fa      	ldrb	r2, [r7, #7]
 8003026:	4909      	ldr	r1, [pc, #36]	; (800304c <set_rail_monitor_enable+0x3c>)
 8003028:	4613      	mov	r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	4413      	add	r3, r2
 800302e:	005b      	lsls	r3, r3, #1
 8003030:	440b      	add	r3, r1
 8003032:	3302      	adds	r3, #2
 8003034:	79ba      	ldrb	r2, [r7, #6]
 8003036:	701a      	strb	r2, [r3, #0]
	status = 1;
 8003038:	2301      	movs	r3, #1
 800303a:	73fb      	strb	r3, [r7, #15]

	return status;
 800303c:	7bfb      	ldrb	r3, [r7, #15]
}
 800303e:	4618      	mov	r0, r3
 8003040:	3714      	adds	r7, #20
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	240007d8 	.word	0x240007d8

08003050 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003050:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003088 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003054:	f7ff fa56 	bl	8002504 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003058:	480c      	ldr	r0, [pc, #48]	; (800308c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800305a:	490d      	ldr	r1, [pc, #52]	; (8003090 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800305c:	4a0d      	ldr	r2, [pc, #52]	; (8003094 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800305e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003060:	e002      	b.n	8003068 <LoopCopyDataInit>

08003062 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003062:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003064:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003066:	3304      	adds	r3, #4

08003068 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003068:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800306a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800306c:	d3f9      	bcc.n	8003062 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800306e:	4a0a      	ldr	r2, [pc, #40]	; (8003098 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003070:	4c0a      	ldr	r4, [pc, #40]	; (800309c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003072:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003074:	e001      	b.n	800307a <LoopFillZerobss>

08003076 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003076:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003078:	3204      	adds	r2, #4

0800307a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800307a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800307c:	d3fb      	bcc.n	8003076 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800307e:	f010 fe03 	bl	8013c88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003082:	f7fe fcaf 	bl	80019e4 <main>
  bx  lr
 8003086:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003088:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800308c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003090:	24000100 	.word	0x24000100
  ldr r2, =_sidata
 8003094:	08014bb4 	.word	0x08014bb4
  ldr r2, =_sbss
 8003098:	24000100 	.word	0x24000100
  ldr r4, =_ebss
 800309c:	240051f0 	.word	0x240051f0

080030a0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030a0:	e7fe      	b.n	80030a0 <ADC3_IRQHandler>
	...

080030a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030aa:	2003      	movs	r0, #3
 80030ac:	f001 fd39 	bl	8004b22 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80030b0:	f006 f924 	bl	80092fc <HAL_RCC_GetSysClockFreq>
 80030b4:	4602      	mov	r2, r0
 80030b6:	4b15      	ldr	r3, [pc, #84]	; (800310c <HAL_Init+0x68>)
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	0a1b      	lsrs	r3, r3, #8
 80030bc:	f003 030f 	and.w	r3, r3, #15
 80030c0:	4913      	ldr	r1, [pc, #76]	; (8003110 <HAL_Init+0x6c>)
 80030c2:	5ccb      	ldrb	r3, [r1, r3]
 80030c4:	f003 031f 	and.w	r3, r3, #31
 80030c8:	fa22 f303 	lsr.w	r3, r2, r3
 80030cc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80030ce:	4b0f      	ldr	r3, [pc, #60]	; (800310c <HAL_Init+0x68>)
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	f003 030f 	and.w	r3, r3, #15
 80030d6:	4a0e      	ldr	r2, [pc, #56]	; (8003110 <HAL_Init+0x6c>)
 80030d8:	5cd3      	ldrb	r3, [r2, r3]
 80030da:	f003 031f 	and.w	r3, r3, #31
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	fa22 f303 	lsr.w	r3, r2, r3
 80030e4:	4a0b      	ldr	r2, [pc, #44]	; (8003114 <HAL_Init+0x70>)
 80030e6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80030e8:	4a0b      	ldr	r2, [pc, #44]	; (8003118 <HAL_Init+0x74>)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80030ee:	2005      	movs	r0, #5
 80030f0:	f7ff f838 	bl	8002164 <HAL_InitTick>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d001      	beq.n	80030fe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e002      	b.n	8003104 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80030fe:	f7ff f813 	bl	8002128 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003102:	2300      	movs	r3, #0
}
 8003104:	4618      	mov	r0, r3
 8003106:	3708      	adds	r7, #8
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	58024400 	.word	0x58024400
 8003110:	08014b00 	.word	0x08014b00
 8003114:	2400008c 	.word	0x2400008c
 8003118:	24000088 	.word	0x24000088

0800311c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800311c:	b480      	push	{r7}
 800311e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003120:	4b06      	ldr	r3, [pc, #24]	; (800313c <HAL_IncTick+0x20>)
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	461a      	mov	r2, r3
 8003126:	4b06      	ldr	r3, [pc, #24]	; (8003140 <HAL_IncTick+0x24>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4413      	add	r3, r2
 800312c:	4a04      	ldr	r2, [pc, #16]	; (8003140 <HAL_IncTick+0x24>)
 800312e:	6013      	str	r3, [r2, #0]
}
 8003130:	bf00      	nop
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	24000094 	.word	0x24000094
 8003140:	2400088c 	.word	0x2400088c

08003144 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003144:	b480      	push	{r7}
 8003146:	af00      	add	r7, sp, #0
  return uwTick;
 8003148:	4b03      	ldr	r3, [pc, #12]	; (8003158 <HAL_GetTick+0x14>)
 800314a:	681b      	ldr	r3, [r3, #0]
}
 800314c:	4618      	mov	r0, r3
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop
 8003158:	2400088c 	.word	0x2400088c

0800315c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800315c:	b480      	push	{r7}
 800315e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003160:	4b03      	ldr	r3, [pc, #12]	; (8003170 <HAL_GetREVID+0x14>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	0c1b      	lsrs	r3, r3, #16
}
 8003166:	4618      	mov	r0, r3
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr
 8003170:	5c001000 	.word	0x5c001000

08003174 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800317e:	4b07      	ldr	r3, [pc, #28]	; (800319c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003180:	685a      	ldr	r2, [r3, #4]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	43db      	mvns	r3, r3
 8003186:	401a      	ands	r2, r3
 8003188:	4904      	ldr	r1, [pc, #16]	; (800319c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	4313      	orrs	r3, r2
 800318e:	604b      	str	r3, [r1, #4]
}
 8003190:	bf00      	nop
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr
 800319c:	58000400 	.word	0x58000400

080031a0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	431a      	orrs	r2, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	609a      	str	r2, [r3, #8]
}
 80031ba:	bf00      	nop
 80031bc:	370c      	adds	r7, #12
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr

080031c6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80031c6:	b480      	push	{r7}
 80031c8:	b083      	sub	sp, #12
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
 80031ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	431a      	orrs	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	609a      	str	r2, [r3, #8]
}
 80031e0:	bf00      	nop
 80031e2:	370c      	adds	r7, #12
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr

080031ec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003208:	b480      	push	{r7}
 800320a:	b087      	sub	sp, #28
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	607a      	str	r2, [r7, #4]
 8003214:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	3360      	adds	r3, #96	; 0x60
 800321a:	461a      	mov	r2, r3
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	4413      	add	r3, r2
 8003222:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	430b      	orrs	r3, r1
 8003236:	431a      	orrs	r2, r3
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800323c:	bf00      	nop
 800323e:	371c      	adds	r7, #28
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr

08003248 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003248:	b480      	push	{r7}
 800324a:	b085      	sub	sp, #20
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	691b      	ldr	r3, [r3, #16]
 8003258:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	f003 031f 	and.w	r3, r3, #31
 8003262:	6879      	ldr	r1, [r7, #4]
 8003264:	fa01 f303 	lsl.w	r3, r1, r3
 8003268:	431a      	orrs	r2, r3
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	611a      	str	r2, [r3, #16]
}
 800326e:	bf00      	nop
 8003270:	3714      	adds	r7, #20
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr

0800327a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800327a:	b480      	push	{r7}
 800327c:	b087      	sub	sp, #28
 800327e:	af00      	add	r7, sp, #0
 8003280:	60f8      	str	r0, [r7, #12]
 8003282:	60b9      	str	r1, [r7, #8]
 8003284:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	3360      	adds	r3, #96	; 0x60
 800328a:	461a      	mov	r2, r3
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	4413      	add	r3, r2
 8003292:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	431a      	orrs	r2, r3
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	601a      	str	r2, [r3, #0]
  }
}
 80032a4:	bf00      	nop
 80032a6:	371c      	adds	r7, #28
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr

080032b0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d101      	bne.n	80032c8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80032c4:	2301      	movs	r3, #1
 80032c6:	e000      	b.n	80032ca <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	370c      	adds	r7, #12
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr

080032d6 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80032d6:	b480      	push	{r7}
 80032d8:	b087      	sub	sp, #28
 80032da:	af00      	add	r7, sp, #0
 80032dc:	60f8      	str	r0, [r7, #12]
 80032de:	60b9      	str	r1, [r7, #8]
 80032e0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	3330      	adds	r3, #48	; 0x30
 80032e6:	461a      	mov	r2, r3
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	0a1b      	lsrs	r3, r3, #8
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	f003 030c 	and.w	r3, r3, #12
 80032f2:	4413      	add	r3, r2
 80032f4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	f003 031f 	and.w	r3, r3, #31
 8003300:	211f      	movs	r1, #31
 8003302:	fa01 f303 	lsl.w	r3, r1, r3
 8003306:	43db      	mvns	r3, r3
 8003308:	401a      	ands	r2, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	0e9b      	lsrs	r3, r3, #26
 800330e:	f003 011f 	and.w	r1, r3, #31
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	f003 031f 	and.w	r3, r3, #31
 8003318:	fa01 f303 	lsl.w	r3, r1, r3
 800331c:	431a      	orrs	r2, r3
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003322:	bf00      	nop
 8003324:	371c      	adds	r7, #28
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr

0800332e <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800332e:	b480      	push	{r7}
 8003330:	b083      	sub	sp, #12
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
 8003336:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	f023 0203 	bic.w	r2, r3, #3
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	431a      	orrs	r2, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	60da      	str	r2, [r3, #12]
}
 8003348:	bf00      	nop
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr

08003354 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003354:	b480      	push	{r7}
 8003356:	b087      	sub	sp, #28
 8003358:	af00      	add	r7, sp, #0
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	3314      	adds	r3, #20
 8003364:	461a      	mov	r2, r3
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	0e5b      	lsrs	r3, r3, #25
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	f003 0304 	and.w	r3, r3, #4
 8003370:	4413      	add	r3, r2
 8003372:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	0d1b      	lsrs	r3, r3, #20
 800337c:	f003 031f 	and.w	r3, r3, #31
 8003380:	2107      	movs	r1, #7
 8003382:	fa01 f303 	lsl.w	r3, r1, r3
 8003386:	43db      	mvns	r3, r3
 8003388:	401a      	ands	r2, r3
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	0d1b      	lsrs	r3, r3, #20
 800338e:	f003 031f 	and.w	r3, r3, #31
 8003392:	6879      	ldr	r1, [r7, #4]
 8003394:	fa01 f303 	lsl.w	r3, r1, r3
 8003398:	431a      	orrs	r2, r3
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800339e:	bf00      	nop
 80033a0:	371c      	adds	r7, #28
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
	...

080033ac <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b085      	sub	sp, #20
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033c4:	43db      	mvns	r3, r3
 80033c6:	401a      	ands	r2, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f003 0318 	and.w	r3, r3, #24
 80033ce:	4908      	ldr	r1, [pc, #32]	; (80033f0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80033d0:	40d9      	lsrs	r1, r3
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	400b      	ands	r3, r1
 80033d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033da:	431a      	orrs	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80033e2:	bf00      	nop
 80033e4:	3714      	adds	r7, #20
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	000fffff 	.word	0x000fffff

080033f4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f003 031f 	and.w	r3, r3, #31
}
 8003404:	4618      	mov	r0, r3
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	689a      	ldr	r2, [r3, #8]
 800341c:	4b04      	ldr	r3, [pc, #16]	; (8003430 <LL_ADC_DisableDeepPowerDown+0x20>)
 800341e:	4013      	ands	r3, r2
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	6093      	str	r3, [r2, #8]
}
 8003424:	bf00      	nop
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr
 8003430:	5fffffc0 	.word	0x5fffffc0

08003434 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003444:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003448:	d101      	bne.n	800344e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800344a:	2301      	movs	r3, #1
 800344c:	e000      	b.n	8003450 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800344e:	2300      	movs	r3, #0
}
 8003450:	4618      	mov	r0, r3
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	689a      	ldr	r2, [r3, #8]
 8003468:	4b05      	ldr	r3, [pc, #20]	; (8003480 <LL_ADC_EnableInternalRegulator+0x24>)
 800346a:	4013      	ands	r3, r2
 800346c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003474:	bf00      	nop
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr
 8003480:	6fffffc0 	.word	0x6fffffc0

08003484 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003494:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003498:	d101      	bne.n	800349e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800349a:	2301      	movs	r3, #1
 800349c:	e000      	b.n	80034a0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800349e:	2300      	movs	r3, #0
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	689a      	ldr	r2, [r3, #8]
 80034b8:	4b05      	ldr	r3, [pc, #20]	; (80034d0 <LL_ADC_Enable+0x24>)
 80034ba:	4013      	ands	r3, r2
 80034bc:	f043 0201 	orr.w	r2, r3, #1
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80034c4:	bf00      	nop
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr
 80034d0:	7fffffc0 	.word	0x7fffffc0

080034d4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689a      	ldr	r2, [r3, #8]
 80034e0:	4b05      	ldr	r3, [pc, #20]	; (80034f8 <LL_ADC_Disable+0x24>)
 80034e2:	4013      	ands	r3, r2
 80034e4:	f043 0202 	orr.w	r2, r3, #2
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr
 80034f8:	7fffffc0 	.word	0x7fffffc0

080034fc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	f003 0301 	and.w	r3, r3, #1
 800350c:	2b01      	cmp	r3, #1
 800350e:	d101      	bne.n	8003514 <LL_ADC_IsEnabled+0x18>
 8003510:	2301      	movs	r3, #1
 8003512:	e000      	b.n	8003516 <LL_ADC_IsEnabled+0x1a>
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	370c      	adds	r7, #12
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr

08003522 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003522:	b480      	push	{r7}
 8003524:	b083      	sub	sp, #12
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f003 0302 	and.w	r3, r3, #2
 8003532:	2b02      	cmp	r3, #2
 8003534:	d101      	bne.n	800353a <LL_ADC_IsDisableOngoing+0x18>
 8003536:	2301      	movs	r3, #1
 8003538:	e000      	b.n	800353c <LL_ADC_IsDisableOngoing+0x1a>
 800353a:	2300      	movs	r3, #0
}
 800353c:	4618      	mov	r0, r3
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	689a      	ldr	r2, [r3, #8]
 8003554:	4b05      	ldr	r3, [pc, #20]	; (800356c <LL_ADC_REG_StartConversion+0x24>)
 8003556:	4013      	ands	r3, r2
 8003558:	f043 0204 	orr.w	r2, r3, #4
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003560:	bf00      	nop
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr
 800356c:	7fffffc0 	.word	0x7fffffc0

08003570 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f003 0304 	and.w	r3, r3, #4
 8003580:	2b04      	cmp	r3, #4
 8003582:	d101      	bne.n	8003588 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003584:	2301      	movs	r3, #1
 8003586:	e000      	b.n	800358a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	370c      	adds	r7, #12
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr

08003596 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003596:	b480      	push	{r7}
 8003598:	b083      	sub	sp, #12
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f003 0308 	and.w	r3, r3, #8
 80035a6:	2b08      	cmp	r3, #8
 80035a8:	d101      	bne.n	80035ae <LL_ADC_INJ_IsConversionOngoing+0x18>
 80035aa:	2301      	movs	r3, #1
 80035ac:	e000      	b.n	80035b0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80035ae:	2300      	movs	r3, #0
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80035bc:	b590      	push	{r4, r7, lr}
 80035be:	b089      	sub	sp, #36	; 0x24
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035c4:	2300      	movs	r3, #0
 80035c6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80035c8:	2300      	movs	r3, #0
 80035ca:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d101      	bne.n	80035d6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e18f      	b.n	80038f6 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d109      	bne.n	80035f8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f7fd f9b1 	bl	800094c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7ff ff19 	bl	8003434 <LL_ADC_IsDeepPowerDownEnabled>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d004      	beq.n	8003612 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4618      	mov	r0, r3
 800360e:	f7ff feff 	bl	8003410 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4618      	mov	r0, r3
 8003618:	f7ff ff34 	bl	8003484 <LL_ADC_IsInternalRegulatorEnabled>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d114      	bne.n	800364c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4618      	mov	r0, r3
 8003628:	f7ff ff18 	bl	800345c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800362c:	4b87      	ldr	r3, [pc, #540]	; (800384c <HAL_ADC_Init+0x290>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	099b      	lsrs	r3, r3, #6
 8003632:	4a87      	ldr	r2, [pc, #540]	; (8003850 <HAL_ADC_Init+0x294>)
 8003634:	fba2 2303 	umull	r2, r3, r2, r3
 8003638:	099b      	lsrs	r3, r3, #6
 800363a:	3301      	adds	r3, #1
 800363c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800363e:	e002      	b.n	8003646 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	3b01      	subs	r3, #1
 8003644:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d1f9      	bne.n	8003640 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4618      	mov	r0, r3
 8003652:	f7ff ff17 	bl	8003484 <LL_ADC_IsInternalRegulatorEnabled>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d10d      	bne.n	8003678 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003660:	f043 0210 	orr.w	r2, r3, #16
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800366c:	f043 0201 	orr.w	r2, r3, #1
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4618      	mov	r0, r3
 800367e:	f7ff ff77 	bl	8003570 <LL_ADC_REG_IsConversionOngoing>
 8003682:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003688:	f003 0310 	and.w	r3, r3, #16
 800368c:	2b00      	cmp	r3, #0
 800368e:	f040 8129 	bne.w	80038e4 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	2b00      	cmp	r3, #0
 8003696:	f040 8125 	bne.w	80038e4 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800369e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80036a2:	f043 0202 	orr.w	r2, r3, #2
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7ff ff24 	bl	80034fc <LL_ADC_IsEnabled>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d136      	bne.n	8003728 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a65      	ldr	r2, [pc, #404]	; (8003854 <HAL_ADC_Init+0x298>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d004      	beq.n	80036ce <HAL_ADC_Init+0x112>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a63      	ldr	r2, [pc, #396]	; (8003858 <HAL_ADC_Init+0x29c>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d10e      	bne.n	80036ec <HAL_ADC_Init+0x130>
 80036ce:	4861      	ldr	r0, [pc, #388]	; (8003854 <HAL_ADC_Init+0x298>)
 80036d0:	f7ff ff14 	bl	80034fc <LL_ADC_IsEnabled>
 80036d4:	4604      	mov	r4, r0
 80036d6:	4860      	ldr	r0, [pc, #384]	; (8003858 <HAL_ADC_Init+0x29c>)
 80036d8:	f7ff ff10 	bl	80034fc <LL_ADC_IsEnabled>
 80036dc:	4603      	mov	r3, r0
 80036de:	4323      	orrs	r3, r4
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	bf0c      	ite	eq
 80036e4:	2301      	moveq	r3, #1
 80036e6:	2300      	movne	r3, #0
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	e008      	b.n	80036fe <HAL_ADC_Init+0x142>
 80036ec:	485b      	ldr	r0, [pc, #364]	; (800385c <HAL_ADC_Init+0x2a0>)
 80036ee:	f7ff ff05 	bl	80034fc <LL_ADC_IsEnabled>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	bf0c      	ite	eq
 80036f8:	2301      	moveq	r3, #1
 80036fa:	2300      	movne	r3, #0
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d012      	beq.n	8003728 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a53      	ldr	r2, [pc, #332]	; (8003854 <HAL_ADC_Init+0x298>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d004      	beq.n	8003716 <HAL_ADC_Init+0x15a>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a51      	ldr	r2, [pc, #324]	; (8003858 <HAL_ADC_Init+0x29c>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d101      	bne.n	800371a <HAL_ADC_Init+0x15e>
 8003716:	4a52      	ldr	r2, [pc, #328]	; (8003860 <HAL_ADC_Init+0x2a4>)
 8003718:	e000      	b.n	800371c <HAL_ADC_Init+0x160>
 800371a:	4a52      	ldr	r2, [pc, #328]	; (8003864 <HAL_ADC_Init+0x2a8>)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	4619      	mov	r1, r3
 8003722:	4610      	mov	r0, r2
 8003724:	f7ff fd3c 	bl	80031a0 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003728:	f7ff fd18 	bl	800315c <HAL_GetREVID>
 800372c:	4603      	mov	r3, r0
 800372e:	f241 0203 	movw	r2, #4099	; 0x1003
 8003732:	4293      	cmp	r3, r2
 8003734:	d914      	bls.n	8003760 <HAL_ADC_Init+0x1a4>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	2b10      	cmp	r3, #16
 800373c:	d110      	bne.n	8003760 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	7d5b      	ldrb	r3, [r3, #21]
 8003742:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003748:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800374e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	7f1b      	ldrb	r3, [r3, #28]
 8003754:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003756:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003758:	f043 030c 	orr.w	r3, r3, #12
 800375c:	61bb      	str	r3, [r7, #24]
 800375e:	e00d      	b.n	800377c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	7d5b      	ldrb	r3, [r3, #21]
 8003764:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800376a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003770:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	7f1b      	ldrb	r3, [r3, #28]
 8003776:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003778:	4313      	orrs	r3, r2
 800377a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	7f1b      	ldrb	r3, [r3, #28]
 8003780:	2b01      	cmp	r3, #1
 8003782:	d106      	bne.n	8003792 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a1b      	ldr	r3, [r3, #32]
 8003788:	3b01      	subs	r3, #1
 800378a:	045b      	lsls	r3, r3, #17
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	4313      	orrs	r3, r2
 8003790:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003796:	2b00      	cmp	r3, #0
 8003798:	d009      	beq.n	80037ae <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a6:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80037a8:	69ba      	ldr	r2, [r7, #24]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68da      	ldr	r2, [r3, #12]
 80037b4:	4b2c      	ldr	r3, [pc, #176]	; (8003868 <HAL_ADC_Init+0x2ac>)
 80037b6:	4013      	ands	r3, r2
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	6812      	ldr	r2, [r2, #0]
 80037bc:	69b9      	ldr	r1, [r7, #24]
 80037be:	430b      	orrs	r3, r1
 80037c0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4618      	mov	r0, r3
 80037c8:	f7ff fed2 	bl	8003570 <LL_ADC_REG_IsConversionOngoing>
 80037cc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4618      	mov	r0, r3
 80037d4:	f7ff fedf 	bl	8003596 <LL_ADC_INJ_IsConversionOngoing>
 80037d8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d15f      	bne.n	80038a0 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d15c      	bne.n	80038a0 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	7d1b      	ldrb	r3, [r3, #20]
 80037ea:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80037f0:	4313      	orrs	r3, r2
 80037f2:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68da      	ldr	r2, [r3, #12]
 80037fa:	4b1c      	ldr	r3, [pc, #112]	; (800386c <HAL_ADC_Init+0x2b0>)
 80037fc:	4013      	ands	r3, r2
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	6812      	ldr	r2, [r2, #0]
 8003802:	69b9      	ldr	r1, [r7, #24]
 8003804:	430b      	orrs	r3, r1
 8003806:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800380e:	2b01      	cmp	r3, #1
 8003810:	d130      	bne.n	8003874 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003816:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	691a      	ldr	r2, [r3, #16]
 800381e:	4b14      	ldr	r3, [pc, #80]	; (8003870 <HAL_ADC_Init+0x2b4>)
 8003820:	4013      	ands	r3, r2
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003826:	3a01      	subs	r2, #1
 8003828:	0411      	lsls	r1, r2, #16
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800382e:	4311      	orrs	r1, r2
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003834:	4311      	orrs	r1, r2
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800383a:	430a      	orrs	r2, r1
 800383c:	431a      	orrs	r2, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f042 0201 	orr.w	r2, r2, #1
 8003846:	611a      	str	r2, [r3, #16]
 8003848:	e01c      	b.n	8003884 <HAL_ADC_Init+0x2c8>
 800384a:	bf00      	nop
 800384c:	24000088 	.word	0x24000088
 8003850:	053e2d63 	.word	0x053e2d63
 8003854:	40022000 	.word	0x40022000
 8003858:	40022100 	.word	0x40022100
 800385c:	58026000 	.word	0x58026000
 8003860:	40022300 	.word	0x40022300
 8003864:	58026300 	.word	0x58026300
 8003868:	fff0c003 	.word	0xfff0c003
 800386c:	ffffbffc 	.word	0xffffbffc
 8003870:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	691a      	ldr	r2, [r3, #16]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f022 0201 	bic.w	r2, r2, #1
 8003882:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	430a      	orrs	r2, r1
 8003898:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 fdec 	bl	8004478 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d10c      	bne.n	80038c2 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ae:	f023 010f 	bic.w	r1, r3, #15
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	1e5a      	subs	r2, r3, #1
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	430a      	orrs	r2, r1
 80038be:	631a      	str	r2, [r3, #48]	; 0x30
 80038c0:	e007      	b.n	80038d2 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f022 020f 	bic.w	r2, r2, #15
 80038d0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038d6:	f023 0303 	bic.w	r3, r3, #3
 80038da:	f043 0201 	orr.w	r2, r3, #1
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	655a      	str	r2, [r3, #84]	; 0x54
 80038e2:	e007      	b.n	80038f4 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e8:	f043 0210 	orr.w	r2, r3, #16
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80038f4:	7ffb      	ldrb	r3, [r7, #31]
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3724      	adds	r7, #36	; 0x24
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd90      	pop	{r4, r7, pc}
 80038fe:	bf00      	nop

08003900 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b086      	sub	sp, #24
 8003904:	af00      	add	r7, sp, #0
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	60b9      	str	r1, [r7, #8]
 800390a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a55      	ldr	r2, [pc, #340]	; (8003a68 <HAL_ADC_Start_DMA+0x168>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d004      	beq.n	8003920 <HAL_ADC_Start_DMA+0x20>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a54      	ldr	r2, [pc, #336]	; (8003a6c <HAL_ADC_Start_DMA+0x16c>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d101      	bne.n	8003924 <HAL_ADC_Start_DMA+0x24>
 8003920:	4b53      	ldr	r3, [pc, #332]	; (8003a70 <HAL_ADC_Start_DMA+0x170>)
 8003922:	e000      	b.n	8003926 <HAL_ADC_Start_DMA+0x26>
 8003924:	4b53      	ldr	r3, [pc, #332]	; (8003a74 <HAL_ADC_Start_DMA+0x174>)
 8003926:	4618      	mov	r0, r3
 8003928:	f7ff fd64 	bl	80033f4 <LL_ADC_GetMultimode>
 800392c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4618      	mov	r0, r3
 8003934:	f7ff fe1c 	bl	8003570 <LL_ADC_REG_IsConversionOngoing>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	f040 808c 	bne.w	8003a58 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003946:	2b01      	cmp	r3, #1
 8003948:	d101      	bne.n	800394e <HAL_ADC_Start_DMA+0x4e>
 800394a:	2302      	movs	r3, #2
 800394c:	e087      	b.n	8003a5e <HAL_ADC_Start_DMA+0x15e>
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2201      	movs	r2, #1
 8003952:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d005      	beq.n	8003968 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	2b05      	cmp	r3, #5
 8003960:	d002      	beq.n	8003968 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	2b09      	cmp	r3, #9
 8003966:	d170      	bne.n	8003a4a <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003968:	68f8      	ldr	r0, [r7, #12]
 800396a:	f000 fc07 	bl	800417c <ADC_Enable>
 800396e:	4603      	mov	r3, r0
 8003970:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003972:	7dfb      	ldrb	r3, [r7, #23]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d163      	bne.n	8003a40 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800397c:	4b3e      	ldr	r3, [pc, #248]	; (8003a78 <HAL_ADC_Start_DMA+0x178>)
 800397e:	4013      	ands	r3, r2
 8003980:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a37      	ldr	r2, [pc, #220]	; (8003a6c <HAL_ADC_Start_DMA+0x16c>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d002      	beq.n	8003998 <HAL_ADC_Start_DMA+0x98>
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	e000      	b.n	800399a <HAL_ADC_Start_DMA+0x9a>
 8003998:	4b33      	ldr	r3, [pc, #204]	; (8003a68 <HAL_ADC_Start_DMA+0x168>)
 800399a:	68fa      	ldr	r2, [r7, #12]
 800399c:	6812      	ldr	r2, [r2, #0]
 800399e:	4293      	cmp	r3, r2
 80039a0:	d002      	beq.n	80039a8 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d105      	bne.n	80039b4 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ac:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d006      	beq.n	80039ce <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039c4:	f023 0206 	bic.w	r2, r3, #6
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	659a      	str	r2, [r3, #88]	; 0x58
 80039cc:	e002      	b.n	80039d4 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2200      	movs	r2, #0
 80039d2:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039d8:	4a28      	ldr	r2, [pc, #160]	; (8003a7c <HAL_ADC_Start_DMA+0x17c>)
 80039da:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039e0:	4a27      	ldr	r2, [pc, #156]	; (8003a80 <HAL_ADC_Start_DMA+0x180>)
 80039e2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039e8:	4a26      	ldr	r2, [pc, #152]	; (8003a84 <HAL_ADC_Start_DMA+0x184>)
 80039ea:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	221c      	movs	r2, #28
 80039f2:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	685a      	ldr	r2, [r3, #4]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f042 0210 	orr.w	r2, r2, #16
 8003a0a:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a14:	4619      	mov	r1, r3
 8003a16:	4610      	mov	r0, r2
 8003a18:	f7ff fc89 	bl	800332e <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	3340      	adds	r3, #64	; 0x40
 8003a26:	4619      	mov	r1, r3
 8003a28:	68ba      	ldr	r2, [r7, #8]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f002 f80e 	bl	8005a4c <HAL_DMA_Start_IT>
 8003a30:	4603      	mov	r3, r0
 8003a32:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f7ff fd85 	bl	8003548 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003a3e:	e00d      	b.n	8003a5c <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8003a48:	e008      	b.n	8003a5c <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003a56:	e001      	b.n	8003a5c <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003a58:	2302      	movs	r3, #2
 8003a5a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003a5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3718      	adds	r7, #24
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	40022000 	.word	0x40022000
 8003a6c:	40022100 	.word	0x40022100
 8003a70:	40022300 	.word	0x40022300
 8003a74:	58026300 	.word	0x58026300
 8003a78:	fffff0fe 	.word	0xfffff0fe
 8003a7c:	0800434f 	.word	0x0800434f
 8003a80:	08004427 	.word	0x08004427
 8003a84:	08004443 	.word	0x08004443

08003a88 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003a90:	bf00      	nop
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003aa4:	bf00      	nop
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003ab8:	bf00      	nop
 8003aba:	370c      	adds	r7, #12
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003ac4:	b590      	push	{r4, r7, lr}
 8003ac6:	b0a1      	sub	sp, #132	; 0x84
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	4a65      	ldr	r2, [pc, #404]	; (8003c74 <HAL_ADC_ConfigChannel+0x1b0>)
 8003ade:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d101      	bne.n	8003aee <HAL_ADC_ConfigChannel+0x2a>
 8003aea:	2302      	movs	r3, #2
 8003aec:	e32e      	b.n	800414c <HAL_ADC_ConfigChannel+0x688>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2201      	movs	r2, #1
 8003af2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4618      	mov	r0, r3
 8003afc:	f7ff fd38 	bl	8003570 <LL_ADC_REG_IsConversionOngoing>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	f040 8313 	bne.w	800412e <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	db2c      	blt.n	8003b6a <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d108      	bne.n	8003b2e <HAL_ADC_ConfigChannel+0x6a>
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	0e9b      	lsrs	r3, r3, #26
 8003b22:	f003 031f 	and.w	r3, r3, #31
 8003b26:	2201      	movs	r2, #1
 8003b28:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2c:	e016      	b.n	8003b5c <HAL_ADC_ConfigChannel+0x98>
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b36:	fa93 f3a3 	rbit	r3, r3
 8003b3a:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003b3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b3e:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003b40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d101      	bne.n	8003b4a <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8003b46:	2320      	movs	r3, #32
 8003b48:	e003      	b.n	8003b52 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8003b4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b4c:	fab3 f383 	clz	r3, r3
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	f003 031f 	and.w	r3, r3, #31
 8003b56:	2201      	movs	r2, #1
 8003b58:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	6812      	ldr	r2, [r2, #0]
 8003b60:	69d1      	ldr	r1, [r2, #28]
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	6812      	ldr	r2, [r2, #0]
 8003b66:	430b      	orrs	r3, r1
 8003b68:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6818      	ldr	r0, [r3, #0]
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	6859      	ldr	r1, [r3, #4]
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	461a      	mov	r2, r3
 8003b78:	f7ff fbad 	bl	80032d6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4618      	mov	r0, r3
 8003b82:	f7ff fcf5 	bl	8003570 <LL_ADC_REG_IsConversionOngoing>
 8003b86:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f7ff fd02 	bl	8003596 <LL_ADC_INJ_IsConversionOngoing>
 8003b92:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003b94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	f040 80b8 	bne.w	8003d0c <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003b9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	f040 80b4 	bne.w	8003d0c <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6818      	ldr	r0, [r3, #0]
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	6819      	ldr	r1, [r3, #0]
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	f7ff fbcf 	bl	8003354 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003bb6:	4b30      	ldr	r3, [pc, #192]	; (8003c78 <HAL_ADC_ConfigChannel+0x1b4>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003bbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003bc2:	d10b      	bne.n	8003bdc <HAL_ADC_ConfigChannel+0x118>
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	695a      	ldr	r2, [r3, #20]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	089b      	lsrs	r3, r3, #2
 8003bd0:	f003 0307 	and.w	r3, r3, #7
 8003bd4:	005b      	lsls	r3, r3, #1
 8003bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bda:	e01d      	b.n	8003c18 <HAL_ADC_ConfigChannel+0x154>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68db      	ldr	r3, [r3, #12]
 8003be2:	f003 0310 	and.w	r3, r3, #16
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d10b      	bne.n	8003c02 <HAL_ADC_ConfigChannel+0x13e>
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	695a      	ldr	r2, [r3, #20]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	089b      	lsrs	r3, r3, #2
 8003bf6:	f003 0307 	and.w	r3, r3, #7
 8003bfa:	005b      	lsls	r3, r3, #1
 8003bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003c00:	e00a      	b.n	8003c18 <HAL_ADC_ConfigChannel+0x154>
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	695a      	ldr	r2, [r3, #20]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	089b      	lsrs	r3, r3, #2
 8003c0e:	f003 0304 	and.w	r3, r3, #4
 8003c12:	005b      	lsls	r3, r3, #1
 8003c14:	fa02 f303 	lsl.w	r3, r2, r3
 8003c18:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	2b04      	cmp	r3, #4
 8003c20:	d02c      	beq.n	8003c7c <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6818      	ldr	r0, [r3, #0]
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	6919      	ldr	r1, [r3, #16]
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c30:	f7ff faea 	bl	8003208 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6818      	ldr	r0, [r3, #0]
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	6919      	ldr	r1, [r3, #16]
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	7e5b      	ldrb	r3, [r3, #25]
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d102      	bne.n	8003c4a <HAL_ADC_ConfigChannel+0x186>
 8003c44:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003c48:	e000      	b.n	8003c4c <HAL_ADC_ConfigChannel+0x188>
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	f7ff fb14 	bl	800327a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6818      	ldr	r0, [r3, #0]
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	6919      	ldr	r1, [r3, #16]
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	7e1b      	ldrb	r3, [r3, #24]
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d102      	bne.n	8003c68 <HAL_ADC_ConfigChannel+0x1a4>
 8003c62:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003c66:	e000      	b.n	8003c6a <HAL_ADC_ConfigChannel+0x1a6>
 8003c68:	2300      	movs	r3, #0
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	f7ff faec 	bl	8003248 <LL_ADC_SetDataRightShift>
 8003c70:	e04c      	b.n	8003d0c <HAL_ADC_ConfigChannel+0x248>
 8003c72:	bf00      	nop
 8003c74:	47ff0000 	.word	0x47ff0000
 8003c78:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c82:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	069b      	lsls	r3, r3, #26
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d107      	bne.n	8003ca0 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003c9e:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ca6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	069b      	lsls	r3, r3, #26
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d107      	bne.n	8003cc4 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003cc2:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	069b      	lsls	r3, r3, #26
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d107      	bne.n	8003ce8 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003ce6:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	069b      	lsls	r3, r3, #26
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d107      	bne.n	8003d0c <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003d0a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4618      	mov	r0, r3
 8003d12:	f7ff fbf3 	bl	80034fc <LL_ADC_IsEnabled>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	f040 8211 	bne.w	8004140 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6818      	ldr	r0, [r3, #0]
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	6819      	ldr	r1, [r3, #0]
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	f7ff fb3e 	bl	80033ac <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	4aa1      	ldr	r2, [pc, #644]	; (8003fbc <HAL_ADC_ConfigChannel+0x4f8>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	f040 812e 	bne.w	8003f98 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d10b      	bne.n	8003d64 <HAL_ADC_ConfigChannel+0x2a0>
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	0e9b      	lsrs	r3, r3, #26
 8003d52:	3301      	adds	r3, #1
 8003d54:	f003 031f 	and.w	r3, r3, #31
 8003d58:	2b09      	cmp	r3, #9
 8003d5a:	bf94      	ite	ls
 8003d5c:	2301      	movls	r3, #1
 8003d5e:	2300      	movhi	r3, #0
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	e019      	b.n	8003d98 <HAL_ADC_ConfigChannel+0x2d4>
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d6c:	fa93 f3a3 	rbit	r3, r3
 8003d70:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003d72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d74:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003d76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d101      	bne.n	8003d80 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8003d7c:	2320      	movs	r3, #32
 8003d7e:	e003      	b.n	8003d88 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8003d80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d82:	fab3 f383 	clz	r3, r3
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	3301      	adds	r3, #1
 8003d8a:	f003 031f 	and.w	r3, r3, #31
 8003d8e:	2b09      	cmp	r3, #9
 8003d90:	bf94      	ite	ls
 8003d92:	2301      	movls	r3, #1
 8003d94:	2300      	movhi	r3, #0
 8003d96:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d079      	beq.n	8003e90 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d107      	bne.n	8003db8 <HAL_ADC_ConfigChannel+0x2f4>
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	0e9b      	lsrs	r3, r3, #26
 8003dae:	3301      	adds	r3, #1
 8003db0:	069b      	lsls	r3, r3, #26
 8003db2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003db6:	e015      	b.n	8003de4 <HAL_ADC_ConfigChannel+0x320>
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dc0:	fa93 f3a3 	rbit	r3, r3
 8003dc4:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003dc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dc8:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003dca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d101      	bne.n	8003dd4 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8003dd0:	2320      	movs	r3, #32
 8003dd2:	e003      	b.n	8003ddc <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8003dd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dd6:	fab3 f383 	clz	r3, r3
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	3301      	adds	r3, #1
 8003dde:	069b      	lsls	r3, r3, #26
 8003de0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d109      	bne.n	8003e04 <HAL_ADC_ConfigChannel+0x340>
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	0e9b      	lsrs	r3, r3, #26
 8003df6:	3301      	adds	r3, #1
 8003df8:	f003 031f 	and.w	r3, r3, #31
 8003dfc:	2101      	movs	r1, #1
 8003dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8003e02:	e017      	b.n	8003e34 <HAL_ADC_ConfigChannel+0x370>
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e0c:	fa93 f3a3 	rbit	r3, r3
 8003e10:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003e12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e14:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003e16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d101      	bne.n	8003e20 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8003e1c:	2320      	movs	r3, #32
 8003e1e:	e003      	b.n	8003e28 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8003e20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e22:	fab3 f383 	clz	r3, r3
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	3301      	adds	r3, #1
 8003e2a:	f003 031f 	and.w	r3, r3, #31
 8003e2e:	2101      	movs	r1, #1
 8003e30:	fa01 f303 	lsl.w	r3, r1, r3
 8003e34:	ea42 0103 	orr.w	r1, r2, r3
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d10a      	bne.n	8003e5a <HAL_ADC_ConfigChannel+0x396>
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	0e9b      	lsrs	r3, r3, #26
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	f003 021f 	and.w	r2, r3, #31
 8003e50:	4613      	mov	r3, r2
 8003e52:	005b      	lsls	r3, r3, #1
 8003e54:	4413      	add	r3, r2
 8003e56:	051b      	lsls	r3, r3, #20
 8003e58:	e018      	b.n	8003e8c <HAL_ADC_ConfigChannel+0x3c8>
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e62:	fa93 f3a3 	rbit	r3, r3
 8003e66:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e6a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d101      	bne.n	8003e76 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8003e72:	2320      	movs	r3, #32
 8003e74:	e003      	b.n	8003e7e <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8003e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e78:	fab3 f383 	clz	r3, r3
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	3301      	adds	r3, #1
 8003e80:	f003 021f 	and.w	r2, r3, #31
 8003e84:	4613      	mov	r3, r2
 8003e86:	005b      	lsls	r3, r3, #1
 8003e88:	4413      	add	r3, r2
 8003e8a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e8c:	430b      	orrs	r3, r1
 8003e8e:	e07e      	b.n	8003f8e <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d107      	bne.n	8003eac <HAL_ADC_ConfigChannel+0x3e8>
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	0e9b      	lsrs	r3, r3, #26
 8003ea2:	3301      	adds	r3, #1
 8003ea4:	069b      	lsls	r3, r3, #26
 8003ea6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003eaa:	e015      	b.n	8003ed8 <HAL_ADC_ConfigChannel+0x414>
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb4:	fa93 f3a3 	rbit	r3, r3
 8003eb8:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d101      	bne.n	8003ec8 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8003ec4:	2320      	movs	r3, #32
 8003ec6:	e003      	b.n	8003ed0 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8003ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eca:	fab3 f383 	clz	r3, r3
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	3301      	adds	r3, #1
 8003ed2:	069b      	lsls	r3, r3, #26
 8003ed4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d109      	bne.n	8003ef8 <HAL_ADC_ConfigChannel+0x434>
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	0e9b      	lsrs	r3, r3, #26
 8003eea:	3301      	adds	r3, #1
 8003eec:	f003 031f 	and.w	r3, r3, #31
 8003ef0:	2101      	movs	r1, #1
 8003ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ef6:	e017      	b.n	8003f28 <HAL_ADC_ConfigChannel+0x464>
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	fa93 f3a3 	rbit	r3, r3
 8003f04:	61bb      	str	r3, [r7, #24]
  return result;
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003f0a:	6a3b      	ldr	r3, [r7, #32]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d101      	bne.n	8003f14 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8003f10:	2320      	movs	r3, #32
 8003f12:	e003      	b.n	8003f1c <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8003f14:	6a3b      	ldr	r3, [r7, #32]
 8003f16:	fab3 f383 	clz	r3, r3
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	3301      	adds	r3, #1
 8003f1e:	f003 031f 	and.w	r3, r3, #31
 8003f22:	2101      	movs	r1, #1
 8003f24:	fa01 f303 	lsl.w	r3, r1, r3
 8003f28:	ea42 0103 	orr.w	r1, r2, r3
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d10d      	bne.n	8003f54 <HAL_ADC_ConfigChannel+0x490>
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	0e9b      	lsrs	r3, r3, #26
 8003f3e:	3301      	adds	r3, #1
 8003f40:	f003 021f 	and.w	r2, r3, #31
 8003f44:	4613      	mov	r3, r2
 8003f46:	005b      	lsls	r3, r3, #1
 8003f48:	4413      	add	r3, r2
 8003f4a:	3b1e      	subs	r3, #30
 8003f4c:	051b      	lsls	r3, r3, #20
 8003f4e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003f52:	e01b      	b.n	8003f8c <HAL_ADC_ConfigChannel+0x4c8>
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	fa93 f3a3 	rbit	r3, r3
 8003f60:	60fb      	str	r3, [r7, #12]
  return result;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d101      	bne.n	8003f70 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8003f6c:	2320      	movs	r3, #32
 8003f6e:	e003      	b.n	8003f78 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	fab3 f383 	clz	r3, r3
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	3301      	adds	r3, #1
 8003f7a:	f003 021f 	and.w	r2, r3, #31
 8003f7e:	4613      	mov	r3, r2
 8003f80:	005b      	lsls	r3, r3, #1
 8003f82:	4413      	add	r3, r2
 8003f84:	3b1e      	subs	r3, #30
 8003f86:	051b      	lsls	r3, r3, #20
 8003f88:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f8c:	430b      	orrs	r3, r1
 8003f8e:	683a      	ldr	r2, [r7, #0]
 8003f90:	6892      	ldr	r2, [r2, #8]
 8003f92:	4619      	mov	r1, r3
 8003f94:	f7ff f9de 	bl	8003354 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	f280 80cf 	bge.w	8004140 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a06      	ldr	r2, [pc, #24]	; (8003fc0 <HAL_ADC_ConfigChannel+0x4fc>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d004      	beq.n	8003fb6 <HAL_ADC_ConfigChannel+0x4f2>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a04      	ldr	r2, [pc, #16]	; (8003fc4 <HAL_ADC_ConfigChannel+0x500>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d10a      	bne.n	8003fcc <HAL_ADC_ConfigChannel+0x508>
 8003fb6:	4b04      	ldr	r3, [pc, #16]	; (8003fc8 <HAL_ADC_ConfigChannel+0x504>)
 8003fb8:	e009      	b.n	8003fce <HAL_ADC_ConfigChannel+0x50a>
 8003fba:	bf00      	nop
 8003fbc:	47ff0000 	.word	0x47ff0000
 8003fc0:	40022000 	.word	0x40022000
 8003fc4:	40022100 	.word	0x40022100
 8003fc8:	40022300 	.word	0x40022300
 8003fcc:	4b61      	ldr	r3, [pc, #388]	; (8004154 <HAL_ADC_ConfigChannel+0x690>)
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f7ff f90c 	bl	80031ec <LL_ADC_GetCommonPathInternalCh>
 8003fd4:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a5f      	ldr	r2, [pc, #380]	; (8004158 <HAL_ADC_ConfigChannel+0x694>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d004      	beq.n	8003fea <HAL_ADC_ConfigChannel+0x526>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a5d      	ldr	r2, [pc, #372]	; (800415c <HAL_ADC_ConfigChannel+0x698>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d10e      	bne.n	8004008 <HAL_ADC_ConfigChannel+0x544>
 8003fea:	485b      	ldr	r0, [pc, #364]	; (8004158 <HAL_ADC_ConfigChannel+0x694>)
 8003fec:	f7ff fa86 	bl	80034fc <LL_ADC_IsEnabled>
 8003ff0:	4604      	mov	r4, r0
 8003ff2:	485a      	ldr	r0, [pc, #360]	; (800415c <HAL_ADC_ConfigChannel+0x698>)
 8003ff4:	f7ff fa82 	bl	80034fc <LL_ADC_IsEnabled>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	4323      	orrs	r3, r4
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	bf0c      	ite	eq
 8004000:	2301      	moveq	r3, #1
 8004002:	2300      	movne	r3, #0
 8004004:	b2db      	uxtb	r3, r3
 8004006:	e008      	b.n	800401a <HAL_ADC_ConfigChannel+0x556>
 8004008:	4855      	ldr	r0, [pc, #340]	; (8004160 <HAL_ADC_ConfigChannel+0x69c>)
 800400a:	f7ff fa77 	bl	80034fc <LL_ADC_IsEnabled>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	bf0c      	ite	eq
 8004014:	2301      	moveq	r3, #1
 8004016:	2300      	movne	r3, #0
 8004018:	b2db      	uxtb	r3, r3
 800401a:	2b00      	cmp	r3, #0
 800401c:	d07d      	beq.n	800411a <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a50      	ldr	r2, [pc, #320]	; (8004164 <HAL_ADC_ConfigChannel+0x6a0>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d130      	bne.n	800408a <HAL_ADC_ConfigChannel+0x5c6>
 8004028:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800402a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d12b      	bne.n	800408a <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a4a      	ldr	r2, [pc, #296]	; (8004160 <HAL_ADC_ConfigChannel+0x69c>)
 8004038:	4293      	cmp	r3, r2
 800403a:	f040 8081 	bne.w	8004140 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a45      	ldr	r2, [pc, #276]	; (8004158 <HAL_ADC_ConfigChannel+0x694>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d004      	beq.n	8004052 <HAL_ADC_ConfigChannel+0x58e>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a43      	ldr	r2, [pc, #268]	; (800415c <HAL_ADC_ConfigChannel+0x698>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d101      	bne.n	8004056 <HAL_ADC_ConfigChannel+0x592>
 8004052:	4a45      	ldr	r2, [pc, #276]	; (8004168 <HAL_ADC_ConfigChannel+0x6a4>)
 8004054:	e000      	b.n	8004058 <HAL_ADC_ConfigChannel+0x594>
 8004056:	4a3f      	ldr	r2, [pc, #252]	; (8004154 <HAL_ADC_ConfigChannel+0x690>)
 8004058:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800405a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800405e:	4619      	mov	r1, r3
 8004060:	4610      	mov	r0, r2
 8004062:	f7ff f8b0 	bl	80031c6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004066:	4b41      	ldr	r3, [pc, #260]	; (800416c <HAL_ADC_ConfigChannel+0x6a8>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	099b      	lsrs	r3, r3, #6
 800406c:	4a40      	ldr	r2, [pc, #256]	; (8004170 <HAL_ADC_ConfigChannel+0x6ac>)
 800406e:	fba2 2303 	umull	r2, r3, r2, r3
 8004072:	099b      	lsrs	r3, r3, #6
 8004074:	3301      	adds	r3, #1
 8004076:	005b      	lsls	r3, r3, #1
 8004078:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800407a:	e002      	b.n	8004082 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	3b01      	subs	r3, #1
 8004080:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d1f9      	bne.n	800407c <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004088:	e05a      	b.n	8004140 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a39      	ldr	r2, [pc, #228]	; (8004174 <HAL_ADC_ConfigChannel+0x6b0>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d11e      	bne.n	80040d2 <HAL_ADC_ConfigChannel+0x60e>
 8004094:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004096:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d119      	bne.n	80040d2 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a2f      	ldr	r2, [pc, #188]	; (8004160 <HAL_ADC_ConfigChannel+0x69c>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d14b      	bne.n	8004140 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a2a      	ldr	r2, [pc, #168]	; (8004158 <HAL_ADC_ConfigChannel+0x694>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d004      	beq.n	80040bc <HAL_ADC_ConfigChannel+0x5f8>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a29      	ldr	r2, [pc, #164]	; (800415c <HAL_ADC_ConfigChannel+0x698>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d101      	bne.n	80040c0 <HAL_ADC_ConfigChannel+0x5fc>
 80040bc:	4a2a      	ldr	r2, [pc, #168]	; (8004168 <HAL_ADC_ConfigChannel+0x6a4>)
 80040be:	e000      	b.n	80040c2 <HAL_ADC_ConfigChannel+0x5fe>
 80040c0:	4a24      	ldr	r2, [pc, #144]	; (8004154 <HAL_ADC_ConfigChannel+0x690>)
 80040c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040c8:	4619      	mov	r1, r3
 80040ca:	4610      	mov	r0, r2
 80040cc:	f7ff f87b 	bl	80031c6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80040d0:	e036      	b.n	8004140 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a28      	ldr	r2, [pc, #160]	; (8004178 <HAL_ADC_ConfigChannel+0x6b4>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d131      	bne.n	8004140 <HAL_ADC_ConfigChannel+0x67c>
 80040dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d12c      	bne.n	8004140 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a1d      	ldr	r2, [pc, #116]	; (8004160 <HAL_ADC_ConfigChannel+0x69c>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d127      	bne.n	8004140 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a18      	ldr	r2, [pc, #96]	; (8004158 <HAL_ADC_ConfigChannel+0x694>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d004      	beq.n	8004104 <HAL_ADC_ConfigChannel+0x640>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a17      	ldr	r2, [pc, #92]	; (800415c <HAL_ADC_ConfigChannel+0x698>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d101      	bne.n	8004108 <HAL_ADC_ConfigChannel+0x644>
 8004104:	4a18      	ldr	r2, [pc, #96]	; (8004168 <HAL_ADC_ConfigChannel+0x6a4>)
 8004106:	e000      	b.n	800410a <HAL_ADC_ConfigChannel+0x646>
 8004108:	4a12      	ldr	r2, [pc, #72]	; (8004154 <HAL_ADC_ConfigChannel+0x690>)
 800410a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800410c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004110:	4619      	mov	r1, r3
 8004112:	4610      	mov	r0, r2
 8004114:	f7ff f857 	bl	80031c6 <LL_ADC_SetCommonPathInternalCh>
 8004118:	e012      	b.n	8004140 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800411e:	f043 0220 	orr.w	r2, r3, #32
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800412c:	e008      	b.n	8004140 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004132:	f043 0220 	orr.w	r2, r3, #32
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004148:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800414c:	4618      	mov	r0, r3
 800414e:	3784      	adds	r7, #132	; 0x84
 8004150:	46bd      	mov	sp, r7
 8004152:	bd90      	pop	{r4, r7, pc}
 8004154:	58026300 	.word	0x58026300
 8004158:	40022000 	.word	0x40022000
 800415c:	40022100 	.word	0x40022100
 8004160:	58026000 	.word	0x58026000
 8004164:	cb840000 	.word	0xcb840000
 8004168:	40022300 	.word	0x40022300
 800416c:	24000088 	.word	0x24000088
 8004170:	053e2d63 	.word	0x053e2d63
 8004174:	c7520000 	.word	0xc7520000
 8004178:	cfb80000 	.word	0xcfb80000

0800417c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4618      	mov	r0, r3
 800418a:	f7ff f9b7 	bl	80034fc <LL_ADC_IsEnabled>
 800418e:	4603      	mov	r3, r0
 8004190:	2b00      	cmp	r3, #0
 8004192:	d16e      	bne.n	8004272 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	689a      	ldr	r2, [r3, #8]
 800419a:	4b38      	ldr	r3, [pc, #224]	; (800427c <ADC_Enable+0x100>)
 800419c:	4013      	ands	r3, r2
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d00d      	beq.n	80041be <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041a6:	f043 0210 	orr.w	r2, r3, #16
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041b2:	f043 0201 	orr.w	r2, r3, #1
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e05a      	b.n	8004274 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4618      	mov	r0, r3
 80041c4:	f7ff f972 	bl	80034ac <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80041c8:	f7fe ffbc 	bl	8003144 <HAL_GetTick>
 80041cc:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a2b      	ldr	r2, [pc, #172]	; (8004280 <ADC_Enable+0x104>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d004      	beq.n	80041e2 <ADC_Enable+0x66>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a29      	ldr	r2, [pc, #164]	; (8004284 <ADC_Enable+0x108>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d101      	bne.n	80041e6 <ADC_Enable+0x6a>
 80041e2:	4b29      	ldr	r3, [pc, #164]	; (8004288 <ADC_Enable+0x10c>)
 80041e4:	e000      	b.n	80041e8 <ADC_Enable+0x6c>
 80041e6:	4b29      	ldr	r3, [pc, #164]	; (800428c <ADC_Enable+0x110>)
 80041e8:	4618      	mov	r0, r3
 80041ea:	f7ff f903 	bl	80033f4 <LL_ADC_GetMultimode>
 80041ee:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a23      	ldr	r2, [pc, #140]	; (8004284 <ADC_Enable+0x108>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d002      	beq.n	8004200 <ADC_Enable+0x84>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	e000      	b.n	8004202 <ADC_Enable+0x86>
 8004200:	4b1f      	ldr	r3, [pc, #124]	; (8004280 <ADC_Enable+0x104>)
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	6812      	ldr	r2, [r2, #0]
 8004206:	4293      	cmp	r3, r2
 8004208:	d02c      	beq.n	8004264 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d130      	bne.n	8004272 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004210:	e028      	b.n	8004264 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4618      	mov	r0, r3
 8004218:	f7ff f970 	bl	80034fc <LL_ADC_IsEnabled>
 800421c:	4603      	mov	r3, r0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d104      	bne.n	800422c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4618      	mov	r0, r3
 8004228:	f7ff f940 	bl	80034ac <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800422c:	f7fe ff8a 	bl	8003144 <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	2b02      	cmp	r3, #2
 8004238:	d914      	bls.n	8004264 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0301 	and.w	r3, r3, #1
 8004244:	2b01      	cmp	r3, #1
 8004246:	d00d      	beq.n	8004264 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800424c:	f043 0210 	orr.w	r2, r3, #16
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004258:	f043 0201 	orr.w	r2, r3, #1
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e007      	b.n	8004274 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0301 	and.w	r3, r3, #1
 800426e:	2b01      	cmp	r3, #1
 8004270:	d1cf      	bne.n	8004212 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	8000003f 	.word	0x8000003f
 8004280:	40022000 	.word	0x40022000
 8004284:	40022100 	.word	0x40022100
 8004288:	40022300 	.word	0x40022300
 800428c:	58026300 	.word	0x58026300

08004290 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4618      	mov	r0, r3
 800429e:	f7ff f940 	bl	8003522 <LL_ADC_IsDisableOngoing>
 80042a2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4618      	mov	r0, r3
 80042aa:	f7ff f927 	bl	80034fc <LL_ADC_IsEnabled>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d047      	beq.n	8004344 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d144      	bne.n	8004344 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	f003 030d 	and.w	r3, r3, #13
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d10c      	bne.n	80042e2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4618      	mov	r0, r3
 80042ce:	f7ff f901 	bl	80034d4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2203      	movs	r2, #3
 80042d8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80042da:	f7fe ff33 	bl	8003144 <HAL_GetTick>
 80042de:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80042e0:	e029      	b.n	8004336 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042e6:	f043 0210 	orr.w	r2, r3, #16
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042f2:	f043 0201 	orr.w	r2, r3, #1
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e023      	b.n	8004346 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80042fe:	f7fe ff21 	bl	8003144 <HAL_GetTick>
 8004302:	4602      	mov	r2, r0
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	2b02      	cmp	r3, #2
 800430a:	d914      	bls.n	8004336 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	f003 0301 	and.w	r3, r3, #1
 8004316:	2b00      	cmp	r3, #0
 8004318:	d00d      	beq.n	8004336 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800431e:	f043 0210 	orr.w	r2, r3, #16
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800432a:	f043 0201 	orr.w	r2, r3, #1
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e007      	b.n	8004346 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	f003 0301 	and.w	r3, r3, #1
 8004340:	2b00      	cmp	r3, #0
 8004342:	d1dc      	bne.n	80042fe <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004344:	2300      	movs	r3, #0
}
 8004346:	4618      	mov	r0, r3
 8004348:	3710      	adds	r7, #16
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}

0800434e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800434e:	b580      	push	{r7, lr}
 8004350:	b084      	sub	sp, #16
 8004352:	af00      	add	r7, sp, #0
 8004354:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800435a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004360:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004364:	2b00      	cmp	r3, #0
 8004366:	d14b      	bne.n	8004400 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800436c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0308 	and.w	r3, r3, #8
 800437e:	2b00      	cmp	r3, #0
 8004380:	d021      	beq.n	80043c6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4618      	mov	r0, r3
 8004388:	f7fe ff92 	bl	80032b0 <LL_ADC_REG_IsTriggerSourceSWStart>
 800438c:	4603      	mov	r3, r0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d032      	beq.n	80043f8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d12b      	bne.n	80043f8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d11f      	bne.n	80043f8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043bc:	f043 0201 	orr.w	r2, r3, #1
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	655a      	str	r2, [r3, #84]	; 0x54
 80043c4:	e018      	b.n	80043f8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	f003 0303 	and.w	r3, r3, #3
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d111      	bne.n	80043f8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d105      	bne.n	80043f8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043f0:	f043 0201 	orr.w	r2, r3, #1
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80043f8:	68f8      	ldr	r0, [r7, #12]
 80043fa:	f7ff fb45 	bl	8003a88 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80043fe:	e00e      	b.n	800441e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004404:	f003 0310 	and.w	r3, r3, #16
 8004408:	2b00      	cmp	r3, #0
 800440a:	d003      	beq.n	8004414 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800440c:	68f8      	ldr	r0, [r7, #12]
 800440e:	f7ff fb4f 	bl	8003ab0 <HAL_ADC_ErrorCallback>
}
 8004412:	e004      	b.n	800441e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	4798      	blx	r3
}
 800441e:	bf00      	nop
 8004420:	3710      	adds	r7, #16
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}

08004426 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004426:	b580      	push	{r7, lr}
 8004428:	b084      	sub	sp, #16
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004432:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004434:	68f8      	ldr	r0, [r7, #12]
 8004436:	f7ff fb31 	bl	8003a9c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800443a:	bf00      	nop
 800443c:	3710      	adds	r7, #16
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}

08004442 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004442:	b580      	push	{r7, lr}
 8004444:	b084      	sub	sp, #16
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800444e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004454:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004460:	f043 0204 	orr.w	r2, r3, #4
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004468:	68f8      	ldr	r0, [r7, #12]
 800446a:	f7ff fb21 	bl	8003ab0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800446e:	bf00      	nop
 8004470:	3710      	adds	r7, #16
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
	...

08004478 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b084      	sub	sp, #16
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a7a      	ldr	r2, [pc, #488]	; (8004670 <ADC_ConfigureBoostMode+0x1f8>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d004      	beq.n	8004494 <ADC_ConfigureBoostMode+0x1c>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a79      	ldr	r2, [pc, #484]	; (8004674 <ADC_ConfigureBoostMode+0x1fc>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d109      	bne.n	80044a8 <ADC_ConfigureBoostMode+0x30>
 8004494:	4b78      	ldr	r3, [pc, #480]	; (8004678 <ADC_ConfigureBoostMode+0x200>)
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800449c:	2b00      	cmp	r3, #0
 800449e:	bf14      	ite	ne
 80044a0:	2301      	movne	r3, #1
 80044a2:	2300      	moveq	r3, #0
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	e008      	b.n	80044ba <ADC_ConfigureBoostMode+0x42>
 80044a8:	4b74      	ldr	r3, [pc, #464]	; (800467c <ADC_ConfigureBoostMode+0x204>)
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	bf14      	ite	ne
 80044b4:	2301      	movne	r3, #1
 80044b6:	2300      	moveq	r3, #0
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d01c      	beq.n	80044f8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80044be:	f005 f897 	bl	80095f0 <HAL_RCC_GetHCLKFreq>
 80044c2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80044cc:	d010      	beq.n	80044f0 <ADC_ConfigureBoostMode+0x78>
 80044ce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80044d2:	d873      	bhi.n	80045bc <ADC_ConfigureBoostMode+0x144>
 80044d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044d8:	d002      	beq.n	80044e0 <ADC_ConfigureBoostMode+0x68>
 80044da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044de:	d16d      	bne.n	80045bc <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	0c1b      	lsrs	r3, r3, #16
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ec:	60fb      	str	r3, [r7, #12]
        break;
 80044ee:	e068      	b.n	80045c2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	089b      	lsrs	r3, r3, #2
 80044f4:	60fb      	str	r3, [r7, #12]
        break;
 80044f6:	e064      	b.n	80045c2 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80044f8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80044fc:	f04f 0100 	mov.w	r1, #0
 8004500:	f006 fb1e 	bl	800ab40 <HAL_RCCEx_GetPeriphCLKFreq>
 8004504:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800450e:	d051      	beq.n	80045b4 <ADC_ConfigureBoostMode+0x13c>
 8004510:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004514:	d854      	bhi.n	80045c0 <ADC_ConfigureBoostMode+0x148>
 8004516:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800451a:	d047      	beq.n	80045ac <ADC_ConfigureBoostMode+0x134>
 800451c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004520:	d84e      	bhi.n	80045c0 <ADC_ConfigureBoostMode+0x148>
 8004522:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004526:	d03d      	beq.n	80045a4 <ADC_ConfigureBoostMode+0x12c>
 8004528:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800452c:	d848      	bhi.n	80045c0 <ADC_ConfigureBoostMode+0x148>
 800452e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004532:	d033      	beq.n	800459c <ADC_ConfigureBoostMode+0x124>
 8004534:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004538:	d842      	bhi.n	80045c0 <ADC_ConfigureBoostMode+0x148>
 800453a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800453e:	d029      	beq.n	8004594 <ADC_ConfigureBoostMode+0x11c>
 8004540:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004544:	d83c      	bhi.n	80045c0 <ADC_ConfigureBoostMode+0x148>
 8004546:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800454a:	d01a      	beq.n	8004582 <ADC_ConfigureBoostMode+0x10a>
 800454c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004550:	d836      	bhi.n	80045c0 <ADC_ConfigureBoostMode+0x148>
 8004552:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004556:	d014      	beq.n	8004582 <ADC_ConfigureBoostMode+0x10a>
 8004558:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800455c:	d830      	bhi.n	80045c0 <ADC_ConfigureBoostMode+0x148>
 800455e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004562:	d00e      	beq.n	8004582 <ADC_ConfigureBoostMode+0x10a>
 8004564:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004568:	d82a      	bhi.n	80045c0 <ADC_ConfigureBoostMode+0x148>
 800456a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800456e:	d008      	beq.n	8004582 <ADC_ConfigureBoostMode+0x10a>
 8004570:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004574:	d824      	bhi.n	80045c0 <ADC_ConfigureBoostMode+0x148>
 8004576:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800457a:	d002      	beq.n	8004582 <ADC_ConfigureBoostMode+0x10a>
 800457c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004580:	d11e      	bne.n	80045c0 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	0c9b      	lsrs	r3, r3, #18
 8004588:	005b      	lsls	r3, r3, #1
 800458a:	68fa      	ldr	r2, [r7, #12]
 800458c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004590:	60fb      	str	r3, [r7, #12]
        break;
 8004592:	e016      	b.n	80045c2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	091b      	lsrs	r3, r3, #4
 8004598:	60fb      	str	r3, [r7, #12]
        break;
 800459a:	e012      	b.n	80045c2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	095b      	lsrs	r3, r3, #5
 80045a0:	60fb      	str	r3, [r7, #12]
        break;
 80045a2:	e00e      	b.n	80045c2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	099b      	lsrs	r3, r3, #6
 80045a8:	60fb      	str	r3, [r7, #12]
        break;
 80045aa:	e00a      	b.n	80045c2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	09db      	lsrs	r3, r3, #7
 80045b0:	60fb      	str	r3, [r7, #12]
        break;
 80045b2:	e006      	b.n	80045c2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	0a1b      	lsrs	r3, r3, #8
 80045b8:	60fb      	str	r3, [r7, #12]
        break;
 80045ba:	e002      	b.n	80045c2 <ADC_ConfigureBoostMode+0x14a>
        break;
 80045bc:	bf00      	nop
 80045be:	e000      	b.n	80045c2 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80045c0:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80045c2:	f7fe fdcb 	bl	800315c <HAL_GetREVID>
 80045c6:	4603      	mov	r3, r0
 80045c8:	f241 0203 	movw	r2, #4099	; 0x1003
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d815      	bhi.n	80045fc <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	4a2b      	ldr	r2, [pc, #172]	; (8004680 <ADC_ConfigureBoostMode+0x208>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d908      	bls.n	80045ea <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	689a      	ldr	r2, [r3, #8]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045e6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80045e8:	e03e      	b.n	8004668 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	689a      	ldr	r2, [r3, #8]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045f8:	609a      	str	r2, [r3, #8]
}
 80045fa:	e035      	b.n	8004668 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	085b      	lsrs	r3, r3, #1
 8004600:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	4a1f      	ldr	r2, [pc, #124]	; (8004684 <ADC_ConfigureBoostMode+0x20c>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d808      	bhi.n	800461c <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	689a      	ldr	r2, [r3, #8]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004618:	609a      	str	r2, [r3, #8]
}
 800461a:	e025      	b.n	8004668 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	4a1a      	ldr	r2, [pc, #104]	; (8004688 <ADC_ConfigureBoostMode+0x210>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d80a      	bhi.n	800463a <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004636:	609a      	str	r2, [r3, #8]
}
 8004638:	e016      	b.n	8004668 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	4a13      	ldr	r2, [pc, #76]	; (800468c <ADC_ConfigureBoostMode+0x214>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d80a      	bhi.n	8004658 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004654:	609a      	str	r2, [r3, #8]
}
 8004656:	e007      	b.n	8004668 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	689a      	ldr	r2, [r3, #8]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004666:	609a      	str	r2, [r3, #8]
}
 8004668:	bf00      	nop
 800466a:	3710      	adds	r7, #16
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}
 8004670:	40022000 	.word	0x40022000
 8004674:	40022100 	.word	0x40022100
 8004678:	40022300 	.word	0x40022300
 800467c:	58026300 	.word	0x58026300
 8004680:	01312d00 	.word	0x01312d00
 8004684:	005f5e10 	.word	0x005f5e10
 8004688:	00bebc20 	.word	0x00bebc20
 800468c:	017d7840 	.word	0x017d7840

08004690 <LL_ADC_IsEnabled>:
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	f003 0301 	and.w	r3, r3, #1
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d101      	bne.n	80046a8 <LL_ADC_IsEnabled+0x18>
 80046a4:	2301      	movs	r3, #1
 80046a6:	e000      	b.n	80046aa <LL_ADC_IsEnabled+0x1a>
 80046a8:	2300      	movs	r3, #0
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	370c      	adds	r7, #12
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr
	...

080046b8 <LL_ADC_StartCalibration>:
{
 80046b8:	b480      	push	{r7}
 80046ba:	b085      	sub	sp, #20
 80046bc:	af00      	add	r7, sp, #0
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	60b9      	str	r1, [r7, #8]
 80046c2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	689a      	ldr	r2, [r3, #8]
 80046c8:	4b09      	ldr	r3, [pc, #36]	; (80046f0 <LL_ADC_StartCalibration+0x38>)
 80046ca:	4013      	ands	r3, r2
 80046cc:	68ba      	ldr	r2, [r7, #8]
 80046ce:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80046d8:	430a      	orrs	r2, r1
 80046da:	4313      	orrs	r3, r2
 80046dc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	609a      	str	r2, [r3, #8]
}
 80046e4:	bf00      	nop
 80046e6:	3714      	adds	r7, #20
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr
 80046f0:	3ffeffc0 	.word	0x3ffeffc0

080046f4 <LL_ADC_IsCalibrationOnGoing>:
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004704:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004708:	d101      	bne.n	800470e <LL_ADC_IsCalibrationOnGoing+0x1a>
 800470a:	2301      	movs	r3, #1
 800470c:	e000      	b.n	8004710 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800470e:	2300      	movs	r3, #0
}
 8004710:	4618      	mov	r0, r3
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <LL_ADC_REG_IsConversionOngoing>:
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	f003 0304 	and.w	r3, r3, #4
 800472c:	2b04      	cmp	r3, #4
 800472e:	d101      	bne.n	8004734 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004730:	2301      	movs	r3, #1
 8004732:	e000      	b.n	8004736 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004734:	2300      	movs	r3, #0
}
 8004736:	4618      	mov	r0, r3
 8004738:	370c      	adds	r7, #12
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr
	...

08004744 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b086      	sub	sp, #24
 8004748:	af00      	add	r7, sp, #0
 800474a:	60f8      	str	r0, [r7, #12]
 800474c:	60b9      	str	r1, [r7, #8]
 800474e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004750:	2300      	movs	r3, #0
 8004752:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800475a:	2b01      	cmp	r3, #1
 800475c:	d101      	bne.n	8004762 <HAL_ADCEx_Calibration_Start+0x1e>
 800475e:	2302      	movs	r3, #2
 8004760:	e04c      	b.n	80047fc <HAL_ADCEx_Calibration_Start+0xb8>
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2201      	movs	r2, #1
 8004766:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800476a:	68f8      	ldr	r0, [r7, #12]
 800476c:	f7ff fd90 	bl	8004290 <ADC_Disable>
 8004770:	4603      	mov	r3, r0
 8004772:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004774:	7dfb      	ldrb	r3, [r7, #23]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d135      	bne.n	80047e6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800477e:	4b21      	ldr	r3, [pc, #132]	; (8004804 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004780:	4013      	ands	r3, r2
 8004782:	f043 0202 	orr.w	r2, r3, #2
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	68b9      	ldr	r1, [r7, #8]
 8004792:	4618      	mov	r0, r3
 8004794:	f7ff ff90 	bl	80046b8 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004798:	e014      	b.n	80047c4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	3301      	adds	r3, #1
 800479e:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	4a19      	ldr	r2, [pc, #100]	; (8004808 <HAL_ADCEx_Calibration_Start+0xc4>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d30d      	bcc.n	80047c4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ac:	f023 0312 	bic.w	r3, r3, #18
 80047b0:	f043 0210 	orr.w	r2, r3, #16
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e01b      	b.n	80047fc <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4618      	mov	r0, r3
 80047ca:	f7ff ff93 	bl	80046f4 <LL_ADC_IsCalibrationOnGoing>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d1e2      	bne.n	800479a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047d8:	f023 0303 	bic.w	r3, r3, #3
 80047dc:	f043 0201 	orr.w	r2, r3, #1
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	655a      	str	r2, [r3, #84]	; 0x54
 80047e4:	e005      	b.n	80047f2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ea:	f043 0210 	orr.w	r2, r3, #16
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80047fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3718      	adds	r7, #24
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}
 8004804:	ffffeefd 	.word	0xffffeefd
 8004808:	25c3f800 	.word	0x25c3f800

0800480c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800480c:	b590      	push	{r4, r7, lr}
 800480e:	b09f      	sub	sp, #124	; 0x7c
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004816:	2300      	movs	r3, #0
 8004818:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004822:	2b01      	cmp	r3, #1
 8004824:	d101      	bne.n	800482a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004826:	2302      	movs	r3, #2
 8004828:	e0be      	b.n	80049a8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2201      	movs	r2, #1
 800482e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004832:	2300      	movs	r3, #0
 8004834:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004836:	2300      	movs	r3, #0
 8004838:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a5c      	ldr	r2, [pc, #368]	; (80049b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d102      	bne.n	800484a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004844:	4b5b      	ldr	r3, [pc, #364]	; (80049b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004846:	60bb      	str	r3, [r7, #8]
 8004848:	e001      	b.n	800484e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800484a:	2300      	movs	r3, #0
 800484c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d10b      	bne.n	800486c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004858:	f043 0220 	orr.w	r2, r3, #32
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	e09d      	b.n	80049a8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	4618      	mov	r0, r3
 8004870:	f7ff ff54 	bl	800471c <LL_ADC_REG_IsConversionOngoing>
 8004874:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4618      	mov	r0, r3
 800487c:	f7ff ff4e 	bl	800471c <LL_ADC_REG_IsConversionOngoing>
 8004880:	4603      	mov	r3, r0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d17f      	bne.n	8004986 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004886:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004888:	2b00      	cmp	r3, #0
 800488a:	d17c      	bne.n	8004986 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a47      	ldr	r2, [pc, #284]	; (80049b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d004      	beq.n	80048a0 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a46      	ldr	r2, [pc, #280]	; (80049b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d101      	bne.n	80048a4 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80048a0:	4b45      	ldr	r3, [pc, #276]	; (80049b8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80048a2:	e000      	b.n	80048a6 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80048a4:	4b45      	ldr	r3, [pc, #276]	; (80049bc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80048a6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d039      	beq.n	8004924 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80048b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	431a      	orrs	r2, r3
 80048be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048c0:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a3a      	ldr	r2, [pc, #232]	; (80049b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d004      	beq.n	80048d6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a38      	ldr	r2, [pc, #224]	; (80049b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d10e      	bne.n	80048f4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80048d6:	4836      	ldr	r0, [pc, #216]	; (80049b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80048d8:	f7ff feda 	bl	8004690 <LL_ADC_IsEnabled>
 80048dc:	4604      	mov	r4, r0
 80048de:	4835      	ldr	r0, [pc, #212]	; (80049b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80048e0:	f7ff fed6 	bl	8004690 <LL_ADC_IsEnabled>
 80048e4:	4603      	mov	r3, r0
 80048e6:	4323      	orrs	r3, r4
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	bf0c      	ite	eq
 80048ec:	2301      	moveq	r3, #1
 80048ee:	2300      	movne	r3, #0
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	e008      	b.n	8004906 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80048f4:	4832      	ldr	r0, [pc, #200]	; (80049c0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80048f6:	f7ff fecb 	bl	8004690 <LL_ADC_IsEnabled>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	bf0c      	ite	eq
 8004900:	2301      	moveq	r3, #1
 8004902:	2300      	movne	r3, #0
 8004904:	b2db      	uxtb	r3, r3
 8004906:	2b00      	cmp	r3, #0
 8004908:	d047      	beq.n	800499a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800490a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800490c:	689a      	ldr	r2, [r3, #8]
 800490e:	4b2d      	ldr	r3, [pc, #180]	; (80049c4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004910:	4013      	ands	r3, r2
 8004912:	683a      	ldr	r2, [r7, #0]
 8004914:	6811      	ldr	r1, [r2, #0]
 8004916:	683a      	ldr	r2, [r7, #0]
 8004918:	6892      	ldr	r2, [r2, #8]
 800491a:	430a      	orrs	r2, r1
 800491c:	431a      	orrs	r2, r3
 800491e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004920:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004922:	e03a      	b.n	800499a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004924:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800492c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800492e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a1e      	ldr	r2, [pc, #120]	; (80049b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d004      	beq.n	8004944 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a1d      	ldr	r2, [pc, #116]	; (80049b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d10e      	bne.n	8004962 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8004944:	481a      	ldr	r0, [pc, #104]	; (80049b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004946:	f7ff fea3 	bl	8004690 <LL_ADC_IsEnabled>
 800494a:	4604      	mov	r4, r0
 800494c:	4819      	ldr	r0, [pc, #100]	; (80049b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800494e:	f7ff fe9f 	bl	8004690 <LL_ADC_IsEnabled>
 8004952:	4603      	mov	r3, r0
 8004954:	4323      	orrs	r3, r4
 8004956:	2b00      	cmp	r3, #0
 8004958:	bf0c      	ite	eq
 800495a:	2301      	moveq	r3, #1
 800495c:	2300      	movne	r3, #0
 800495e:	b2db      	uxtb	r3, r3
 8004960:	e008      	b.n	8004974 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004962:	4817      	ldr	r0, [pc, #92]	; (80049c0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004964:	f7ff fe94 	bl	8004690 <LL_ADC_IsEnabled>
 8004968:	4603      	mov	r3, r0
 800496a:	2b00      	cmp	r3, #0
 800496c:	bf0c      	ite	eq
 800496e:	2301      	moveq	r3, #1
 8004970:	2300      	movne	r3, #0
 8004972:	b2db      	uxtb	r3, r3
 8004974:	2b00      	cmp	r3, #0
 8004976:	d010      	beq.n	800499a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004978:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800497a:	689a      	ldr	r2, [r3, #8]
 800497c:	4b11      	ldr	r3, [pc, #68]	; (80049c4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800497e:	4013      	ands	r3, r2
 8004980:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004982:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004984:	e009      	b.n	800499a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800498a:	f043 0220 	orr.w	r2, r3, #32
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004998:	e000      	b.n	800499c <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800499a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80049a4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	377c      	adds	r7, #124	; 0x7c
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd90      	pop	{r4, r7, pc}
 80049b0:	40022000 	.word	0x40022000
 80049b4:	40022100 	.word	0x40022100
 80049b8:	40022300 	.word	0x40022300
 80049bc:	58026300 	.word	0x58026300
 80049c0:	58026000 	.word	0x58026000
 80049c4:	fffff0e0 	.word	0xfffff0e0

080049c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b085      	sub	sp, #20
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f003 0307 	and.w	r3, r3, #7
 80049d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80049d8:	4b0b      	ldr	r3, [pc, #44]	; (8004a08 <__NVIC_SetPriorityGrouping+0x40>)
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80049de:	68ba      	ldr	r2, [r7, #8]
 80049e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80049e4:	4013      	ands	r3, r2
 80049e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80049f0:	4b06      	ldr	r3, [pc, #24]	; (8004a0c <__NVIC_SetPriorityGrouping+0x44>)
 80049f2:	4313      	orrs	r3, r2
 80049f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80049f6:	4a04      	ldr	r2, [pc, #16]	; (8004a08 <__NVIC_SetPriorityGrouping+0x40>)
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	60d3      	str	r3, [r2, #12]
}
 80049fc:	bf00      	nop
 80049fe:	3714      	adds	r7, #20
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr
 8004a08:	e000ed00 	.word	0xe000ed00
 8004a0c:	05fa0000 	.word	0x05fa0000

08004a10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a10:	b480      	push	{r7}
 8004a12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a14:	4b04      	ldr	r3, [pc, #16]	; (8004a28 <__NVIC_GetPriorityGrouping+0x18>)
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	0a1b      	lsrs	r3, r3, #8
 8004a1a:	f003 0307 	and.w	r3, r3, #7
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr
 8004a28:	e000ed00 	.word	0xe000ed00

08004a2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b083      	sub	sp, #12
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	4603      	mov	r3, r0
 8004a34:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004a36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	db0b      	blt.n	8004a56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a3e:	88fb      	ldrh	r3, [r7, #6]
 8004a40:	f003 021f 	and.w	r2, r3, #31
 8004a44:	4907      	ldr	r1, [pc, #28]	; (8004a64 <__NVIC_EnableIRQ+0x38>)
 8004a46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a4a:	095b      	lsrs	r3, r3, #5
 8004a4c:	2001      	movs	r0, #1
 8004a4e:	fa00 f202 	lsl.w	r2, r0, r2
 8004a52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004a56:	bf00      	nop
 8004a58:	370c      	adds	r7, #12
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	e000e100 	.word	0xe000e100

08004a68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	4603      	mov	r3, r0
 8004a70:	6039      	str	r1, [r7, #0]
 8004a72:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004a74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	db0a      	blt.n	8004a92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	b2da      	uxtb	r2, r3
 8004a80:	490c      	ldr	r1, [pc, #48]	; (8004ab4 <__NVIC_SetPriority+0x4c>)
 8004a82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a86:	0112      	lsls	r2, r2, #4
 8004a88:	b2d2      	uxtb	r2, r2
 8004a8a:	440b      	add	r3, r1
 8004a8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a90:	e00a      	b.n	8004aa8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	b2da      	uxtb	r2, r3
 8004a96:	4908      	ldr	r1, [pc, #32]	; (8004ab8 <__NVIC_SetPriority+0x50>)
 8004a98:	88fb      	ldrh	r3, [r7, #6]
 8004a9a:	f003 030f 	and.w	r3, r3, #15
 8004a9e:	3b04      	subs	r3, #4
 8004aa0:	0112      	lsls	r2, r2, #4
 8004aa2:	b2d2      	uxtb	r2, r2
 8004aa4:	440b      	add	r3, r1
 8004aa6:	761a      	strb	r2, [r3, #24]
}
 8004aa8:	bf00      	nop
 8004aaa:	370c      	adds	r7, #12
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr
 8004ab4:	e000e100 	.word	0xe000e100
 8004ab8:	e000ed00 	.word	0xe000ed00

08004abc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b089      	sub	sp, #36	; 0x24
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	60b9      	str	r1, [r7, #8]
 8004ac6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f003 0307 	and.w	r3, r3, #7
 8004ace:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	f1c3 0307 	rsb	r3, r3, #7
 8004ad6:	2b04      	cmp	r3, #4
 8004ad8:	bf28      	it	cs
 8004ada:	2304      	movcs	r3, #4
 8004adc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	3304      	adds	r3, #4
 8004ae2:	2b06      	cmp	r3, #6
 8004ae4:	d902      	bls.n	8004aec <NVIC_EncodePriority+0x30>
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	3b03      	subs	r3, #3
 8004aea:	e000      	b.n	8004aee <NVIC_EncodePriority+0x32>
 8004aec:	2300      	movs	r3, #0
 8004aee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004af0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	fa02 f303 	lsl.w	r3, r2, r3
 8004afa:	43da      	mvns	r2, r3
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	401a      	ands	r2, r3
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b0e:	43d9      	mvns	r1, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b14:	4313      	orrs	r3, r2
         );
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3724      	adds	r7, #36	; 0x24
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr

08004b22 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b22:	b580      	push	{r7, lr}
 8004b24:	b082      	sub	sp, #8
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f7ff ff4c 	bl	80049c8 <__NVIC_SetPriorityGrouping>
}
 8004b30:	bf00      	nop
 8004b32:	3708      	adds	r7, #8
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b086      	sub	sp, #24
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	4603      	mov	r3, r0
 8004b40:	60b9      	str	r1, [r7, #8]
 8004b42:	607a      	str	r2, [r7, #4]
 8004b44:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004b46:	f7ff ff63 	bl	8004a10 <__NVIC_GetPriorityGrouping>
 8004b4a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	68b9      	ldr	r1, [r7, #8]
 8004b50:	6978      	ldr	r0, [r7, #20]
 8004b52:	f7ff ffb3 	bl	8004abc <NVIC_EncodePriority>
 8004b56:	4602      	mov	r2, r0
 8004b58:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004b5c:	4611      	mov	r1, r2
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f7ff ff82 	bl	8004a68 <__NVIC_SetPriority>
}
 8004b64:	bf00      	nop
 8004b66:	3718      	adds	r7, #24
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}

08004b6c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b082      	sub	sp, #8
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	4603      	mov	r3, r0
 8004b74:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f7ff ff56 	bl	8004a2c <__NVIC_EnableIRQ>
}
 8004b80:	bf00      	nop
 8004b82:	3708      	adds	r7, #8
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b082      	sub	sp, #8
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d101      	bne.n	8004b9a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e014      	b.n	8004bc4 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	791b      	ldrb	r3, [r3, #4]
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d105      	bne.n	8004bb0 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f7fc f81a 	bl	8000be4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2202      	movs	r2, #2
 8004bb4:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004bc2:	2300      	movs	r3, #0
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3708      	adds	r7, #8
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d101      	bne.n	8004be0 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e046      	b.n	8004c6e <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	795b      	ldrb	r3, [r3, #5]
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d101      	bne.n	8004bec <HAL_DAC_Start+0x20>
 8004be8:	2302      	movs	r3, #2
 8004bea:	e040      	b.n	8004c6e <HAL_DAC_Start+0xa2>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2202      	movs	r2, #2
 8004bf6:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	6819      	ldr	r1, [r3, #0]
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	f003 0310 	and.w	r3, r3, #16
 8004c04:	2201      	movs	r2, #1
 8004c06:	409a      	lsls	r2, r3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	430a      	orrs	r2, r1
 8004c0e:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d10f      	bne.n	8004c36 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	d11d      	bne.n	8004c60 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	685a      	ldr	r2, [r3, #4]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f042 0201 	orr.w	r2, r2, #1
 8004c32:	605a      	str	r2, [r3, #4]
 8004c34:	e014      	b.n	8004c60 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	f003 0310 	and.w	r3, r3, #16
 8004c46:	2102      	movs	r1, #2
 8004c48:	fa01 f303 	lsl.w	r3, r1, r3
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d107      	bne.n	8004c60 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	685a      	ldr	r2, [r3, #4]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f042 0202 	orr.w	r2, r2, #2
 8004c5e:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004c6c:	2300      	movs	r3, #0
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	370c      	adds	r7, #12
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr
	...

08004c7c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b086      	sub	sp, #24
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	607a      	str	r2, [r7, #4]
 8004c88:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d101      	bne.n	8004c94 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e0a2      	b.n	8004dda <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	795b      	ldrb	r3, [r3, #5]
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d101      	bne.n	8004ca0 <HAL_DAC_Start_DMA+0x24>
 8004c9c:	2302      	movs	r3, #2
 8004c9e:	e09c      	b.n	8004dda <HAL_DAC_Start_DMA+0x15e>
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2202      	movs	r2, #2
 8004caa:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d129      	bne.n	8004d06 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	4a4b      	ldr	r2, [pc, #300]	; (8004de4 <HAL_DAC_Start_DMA+0x168>)
 8004cb8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	4a4a      	ldr	r2, [pc, #296]	; (8004de8 <HAL_DAC_Start_DMA+0x16c>)
 8004cc0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	4a49      	ldr	r2, [pc, #292]	; (8004dec <HAL_DAC_Start_DMA+0x170>)
 8004cc8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004cd8:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8004cda:	6a3b      	ldr	r3, [r7, #32]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d003      	beq.n	8004ce8 <HAL_DAC_Start_DMA+0x6c>
 8004ce0:	6a3b      	ldr	r3, [r7, #32]
 8004ce2:	2b04      	cmp	r3, #4
 8004ce4:	d005      	beq.n	8004cf2 <HAL_DAC_Start_DMA+0x76>
 8004ce6:	e009      	b.n	8004cfc <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	3308      	adds	r3, #8
 8004cee:	613b      	str	r3, [r7, #16]
        break;
 8004cf0:	e033      	b.n	8004d5a <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	330c      	adds	r3, #12
 8004cf8:	613b      	str	r3, [r7, #16]
        break;
 8004cfa:	e02e      	b.n	8004d5a <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	3310      	adds	r3, #16
 8004d02:	613b      	str	r3, [r7, #16]
        break;
 8004d04:	e029      	b.n	8004d5a <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	4a39      	ldr	r2, [pc, #228]	; (8004df0 <HAL_DAC_Start_DMA+0x174>)
 8004d0c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	4a38      	ldr	r2, [pc, #224]	; (8004df4 <HAL_DAC_Start_DMA+0x178>)
 8004d14:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	4a37      	ldr	r2, [pc, #220]	; (8004df8 <HAL_DAC_Start_DMA+0x17c>)
 8004d1c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004d2c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8004d2e:	6a3b      	ldr	r3, [r7, #32]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d003      	beq.n	8004d3c <HAL_DAC_Start_DMA+0xc0>
 8004d34:	6a3b      	ldr	r3, [r7, #32]
 8004d36:	2b04      	cmp	r3, #4
 8004d38:	d005      	beq.n	8004d46 <HAL_DAC_Start_DMA+0xca>
 8004d3a:	e009      	b.n	8004d50 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	3314      	adds	r3, #20
 8004d42:	613b      	str	r3, [r7, #16]
        break;
 8004d44:	e009      	b.n	8004d5a <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	3318      	adds	r3, #24
 8004d4c:	613b      	str	r3, [r7, #16]
        break;
 8004d4e:	e004      	b.n	8004d5a <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	331c      	adds	r3, #28
 8004d56:	613b      	str	r3, [r7, #16]
        break;
 8004d58:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d111      	bne.n	8004d84 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d6e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	6898      	ldr	r0, [r3, #8]
 8004d74:	6879      	ldr	r1, [r7, #4]
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	693a      	ldr	r2, [r7, #16]
 8004d7a:	f000 fe67 	bl	8005a4c <HAL_DMA_Start_IT>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	75fb      	strb	r3, [r7, #23]
 8004d82:	e010      	b.n	8004da6 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004d92:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	68d8      	ldr	r0, [r3, #12]
 8004d98:	6879      	ldr	r1, [r7, #4]
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	693a      	ldr	r2, [r7, #16]
 8004d9e:	f000 fe55 	bl	8005a4c <HAL_DMA_Start_IT>
 8004da2:	4603      	mov	r3, r0
 8004da4:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2200      	movs	r2, #0
 8004daa:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8004dac:	7dfb      	ldrb	r3, [r7, #23]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d10c      	bne.n	8004dcc <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	6819      	ldr	r1, [r3, #0]
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	f003 0310 	and.w	r3, r3, #16
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	409a      	lsls	r2, r3
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	430a      	orrs	r2, r1
 8004dc8:	601a      	str	r2, [r3, #0]
 8004dca:	e005      	b.n	8004dd8 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	691b      	ldr	r3, [r3, #16]
 8004dd0:	f043 0204 	orr.w	r2, r3, #4
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8004dd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3718      	adds	r7, #24
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	0800526d 	.word	0x0800526d
 8004de8:	0800528f 	.word	0x0800528f
 8004dec:	080052ab 	.word	0x080052ab
 8004df0:	08005329 	.word	0x08005329
 8004df4:	0800534b 	.word	0x0800534b
 8004df8:	08005367 	.word	0x08005367

08004dfc <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b082      	sub	sp, #8
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d101      	bne.n	8004e10 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e03e      	b.n	8004e8e <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	6819      	ldr	r1, [r3, #0]
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	f003 0310 	and.w	r3, r3, #16
 8004e1c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004e20:	fa02 f303 	lsl.w	r3, r2, r3
 8004e24:	43da      	mvns	r2, r3
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	400a      	ands	r2, r1
 8004e2c:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	6819      	ldr	r1, [r3, #0]
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	f003 0310 	and.w	r3, r3, #16
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e40:	43da      	mvns	r2, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	400a      	ands	r2, r1
 8004e48:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d10d      	bne.n	8004e6c <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	4618      	mov	r0, r3
 8004e56:	f001 f863 	bl	8005f20 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e68:	601a      	str	r2, [r3, #0]
 8004e6a:	e00c      	b.n	8004e86 <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	4618      	mov	r0, r3
 8004e72:	f001 f855 	bl	8005f20 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8004e84:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2201      	movs	r2, #1
 8004e8a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004e8c:	2300      	movs	r3, #0
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3708      	adds	r7, #8
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}

08004e96 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8004e96:	b580      	push	{r7, lr}
 8004e98:	b084      	sub	sp, #16
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eac:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d01d      	beq.n	8004ef4 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d018      	beq.n	8004ef4 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2204      	movs	r2, #4
 8004ec6:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	691b      	ldr	r3, [r3, #16]
 8004ecc:	f043 0201 	orr.w	r2, r3, #1
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004edc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004eec:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f000 f86f 	bl	8004fd2 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d01d      	beq.n	8004f3a <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d018      	beq.n	8004f3a <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2204      	movs	r2, #4
 8004f0c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	691b      	ldr	r3, [r3, #16]
 8004f12:	f043 0202 	orr.w	r2, r3, #2
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004f22:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8004f32:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f000 f9ed 	bl	8005314 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8004f3a:	bf00      	nop
 8004f3c:	3710      	adds	r7, #16
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}

08004f42 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8004f42:	b480      	push	{r7}
 8004f44:	b087      	sub	sp, #28
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	60f8      	str	r0, [r7, #12]
 8004f4a:	60b9      	str	r1, [r7, #8]
 8004f4c:	607a      	str	r2, [r7, #4]
 8004f4e:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8004f50:	2300      	movs	r3, #0
 8004f52:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d101      	bne.n	8004f5e <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e015      	b.n	8004f8a <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d105      	bne.n	8004f76 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8004f6a:	697a      	ldr	r2, [r7, #20]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4413      	add	r3, r2
 8004f70:	3308      	adds	r3, #8
 8004f72:	617b      	str	r3, [r7, #20]
 8004f74:	e004      	b.n	8004f80 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8004f76:	697a      	ldr	r2, [r7, #20]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4413      	add	r3, r2
 8004f7c:	3314      	adds	r3, #20
 8004f7e:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	461a      	mov	r2, r3
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8004f88:	2300      	movs	r3, #0
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	371c      	adds	r7, #28
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr

08004f96 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004f96:	b480      	push	{r7}
 8004f98:	b083      	sub	sp, #12
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8004f9e:	bf00      	nop
 8004fa0:	370c      	adds	r7, #12
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr

08004faa <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004faa:	b480      	push	{r7}
 8004fac:	b083      	sub	sp, #12
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8004fb2:	bf00      	nop
 8004fb4:	370c      	adds	r7, #12
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr

08004fbe <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004fbe:	b480      	push	{r7}
 8004fc0:	b083      	sub	sp, #12
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8004fc6:	bf00      	nop
 8004fc8:	370c      	adds	r7, #12
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr

08004fd2 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004fd2:	b480      	push	{r7}
 8004fd4:	b083      	sub	sp, #12
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8004fda:	bf00      	nop
 8004fdc:	370c      	adds	r7, #12
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr
	...

08004fe8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b08a      	sub	sp, #40	; 0x28
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d002      	beq.n	8005006 <HAL_DAC_ConfigChannel+0x1e>
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d101      	bne.n	800500a <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e12a      	b.n	8005260 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	795b      	ldrb	r3, [r3, #5]
 800500e:	2b01      	cmp	r3, #1
 8005010:	d101      	bne.n	8005016 <HAL_DAC_ConfigChannel+0x2e>
 8005012:	2302      	movs	r3, #2
 8005014:	e124      	b.n	8005260 <HAL_DAC_ConfigChannel+0x278>
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2201      	movs	r2, #1
 800501a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2202      	movs	r2, #2
 8005020:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	2b04      	cmp	r3, #4
 8005028:	d17a      	bne.n	8005120 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800502a:	f7fe f88b 	bl	8003144 <HAL_GetTick>
 800502e:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d13d      	bne.n	80050b2 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005036:	e018      	b.n	800506a <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005038:	f7fe f884 	bl	8003144 <HAL_GetTick>
 800503c:	4602      	mov	r2, r0
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	2b01      	cmp	r3, #1
 8005044:	d911      	bls.n	800506a <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800504c:	4b86      	ldr	r3, [pc, #536]	; (8005268 <HAL_DAC_ConfigChannel+0x280>)
 800504e:	4013      	ands	r3, r2
 8005050:	2b00      	cmp	r3, #0
 8005052:	d00a      	beq.n	800506a <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	691b      	ldr	r3, [r3, #16]
 8005058:	f043 0208 	orr.w	r2, r3, #8
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2203      	movs	r2, #3
 8005064:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e0fa      	b.n	8005260 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005070:	4b7d      	ldr	r3, [pc, #500]	; (8005268 <HAL_DAC_ConfigChannel+0x280>)
 8005072:	4013      	ands	r3, r2
 8005074:	2b00      	cmp	r3, #0
 8005076:	d1df      	bne.n	8005038 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	68ba      	ldr	r2, [r7, #8]
 800507e:	6992      	ldr	r2, [r2, #24]
 8005080:	641a      	str	r2, [r3, #64]	; 0x40
 8005082:	e020      	b.n	80050c6 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005084:	f7fe f85e 	bl	8003144 <HAL_GetTick>
 8005088:	4602      	mov	r2, r0
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	2b01      	cmp	r3, #1
 8005090:	d90f      	bls.n	80050b2 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005098:	2b00      	cmp	r3, #0
 800509a:	da0a      	bge.n	80050b2 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	691b      	ldr	r3, [r3, #16]
 80050a0:	f043 0208 	orr.w	r2, r3, #8
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2203      	movs	r2, #3
 80050ac:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e0d6      	b.n	8005260 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	dbe3      	blt.n	8005084 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	68ba      	ldr	r2, [r7, #8]
 80050c2:	6992      	ldr	r2, [r2, #24]
 80050c4:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f003 0310 	and.w	r3, r3, #16
 80050d2:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80050d6:	fa01 f303 	lsl.w	r3, r1, r3
 80050da:	43db      	mvns	r3, r3
 80050dc:	ea02 0103 	and.w	r1, r2, r3
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	69da      	ldr	r2, [r3, #28]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f003 0310 	and.w	r3, r3, #16
 80050ea:	409a      	lsls	r2, r3
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	430a      	orrs	r2, r1
 80050f2:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f003 0310 	and.w	r3, r3, #16
 8005100:	21ff      	movs	r1, #255	; 0xff
 8005102:	fa01 f303 	lsl.w	r3, r1, r3
 8005106:	43db      	mvns	r3, r3
 8005108:	ea02 0103 	and.w	r1, r2, r3
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	6a1a      	ldr	r2, [r3, #32]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f003 0310 	and.w	r3, r3, #16
 8005116:	409a      	lsls	r2, r3
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	430a      	orrs	r2, r1
 800511e:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	691b      	ldr	r3, [r3, #16]
 8005124:	2b01      	cmp	r3, #1
 8005126:	d11d      	bne.n	8005164 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800512e:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f003 0310 	and.w	r3, r3, #16
 8005136:	221f      	movs	r2, #31
 8005138:	fa02 f303 	lsl.w	r3, r2, r3
 800513c:	43db      	mvns	r3, r3
 800513e:	69ba      	ldr	r2, [r7, #24]
 8005140:	4013      	ands	r3, r2
 8005142:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	695b      	ldr	r3, [r3, #20]
 8005148:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f003 0310 	and.w	r3, r3, #16
 8005150:	697a      	ldr	r2, [r7, #20]
 8005152:	fa02 f303 	lsl.w	r3, r2, r3
 8005156:	69ba      	ldr	r2, [r7, #24]
 8005158:	4313      	orrs	r3, r2
 800515a:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	69ba      	ldr	r2, [r7, #24]
 8005162:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800516a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f003 0310 	and.w	r3, r3, #16
 8005172:	2207      	movs	r2, #7
 8005174:	fa02 f303 	lsl.w	r3, r2, r3
 8005178:	43db      	mvns	r3, r3
 800517a:	69ba      	ldr	r2, [r7, #24]
 800517c:	4013      	ands	r3, r2
 800517e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	2b01      	cmp	r3, #1
 8005186:	d102      	bne.n	800518e <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8005188:	2300      	movs	r3, #0
 800518a:	627b      	str	r3, [r7, #36]	; 0x24
 800518c:	e00f      	b.n	80051ae <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	2b02      	cmp	r3, #2
 8005194:	d102      	bne.n	800519c <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8005196:	2301      	movs	r3, #1
 8005198:	627b      	str	r3, [r7, #36]	; 0x24
 800519a:	e008      	b.n	80051ae <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d102      	bne.n	80051aa <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80051a4:	2301      	movs	r3, #1
 80051a6:	627b      	str	r3, [r7, #36]	; 0x24
 80051a8:	e001      	b.n	80051ae <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80051aa:	2300      	movs	r3, #0
 80051ac:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051ba:	4313      	orrs	r3, r2
 80051bc:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f003 0310 	and.w	r3, r3, #16
 80051c4:	697a      	ldr	r2, [r7, #20]
 80051c6:	fa02 f303 	lsl.w	r3, r2, r3
 80051ca:	69ba      	ldr	r2, [r7, #24]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	69ba      	ldr	r2, [r7, #24]
 80051d6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	6819      	ldr	r1, [r3, #0]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f003 0310 	and.w	r3, r3, #16
 80051e4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80051e8:	fa02 f303 	lsl.w	r3, r2, r3
 80051ec:	43da      	mvns	r2, r3
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	400a      	ands	r2, r1
 80051f4:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f003 0310 	and.w	r3, r3, #16
 8005204:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005208:	fa02 f303 	lsl.w	r3, r2, r3
 800520c:	43db      	mvns	r3, r3
 800520e:	69ba      	ldr	r2, [r7, #24]
 8005210:	4013      	ands	r3, r2
 8005212:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f003 0310 	and.w	r3, r3, #16
 8005220:	697a      	ldr	r2, [r7, #20]
 8005222:	fa02 f303 	lsl.w	r3, r2, r3
 8005226:	69ba      	ldr	r2, [r7, #24]
 8005228:	4313      	orrs	r3, r2
 800522a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	69ba      	ldr	r2, [r7, #24]
 8005232:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	6819      	ldr	r1, [r3, #0]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f003 0310 	and.w	r3, r3, #16
 8005240:	22c0      	movs	r2, #192	; 0xc0
 8005242:	fa02 f303 	lsl.w	r3, r2, r3
 8005246:	43da      	mvns	r2, r3
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	400a      	ands	r2, r1
 800524e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2201      	movs	r2, #1
 8005254:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2200      	movs	r2, #0
 800525a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800525c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005260:	4618      	mov	r0, r3
 8005262:	3728      	adds	r7, #40	; 0x28
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}
 8005268:	20008000 	.word	0x20008000

0800526c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b084      	sub	sp, #16
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005278:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800527a:	68f8      	ldr	r0, [r7, #12]
 800527c:	f7ff fe8b 	bl	8004f96 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2201      	movs	r2, #1
 8005284:	711a      	strb	r2, [r3, #4]
}
 8005286:	bf00      	nop
 8005288:	3710      	adds	r7, #16
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}

0800528e <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800528e:	b580      	push	{r7, lr}
 8005290:	b084      	sub	sp, #16
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800529a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800529c:	68f8      	ldr	r0, [r7, #12]
 800529e:	f7ff fe84 	bl	8004faa <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80052a2:	bf00      	nop
 80052a4:	3710      	adds	r7, #16
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}

080052aa <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80052aa:	b580      	push	{r7, lr}
 80052ac:	b084      	sub	sp, #16
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	691b      	ldr	r3, [r3, #16]
 80052bc:	f043 0204 	orr.w	r2, r3, #4
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80052c4:	68f8      	ldr	r0, [r7, #12]
 80052c6:	f7ff fe7a 	bl	8004fbe <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2201      	movs	r2, #1
 80052ce:	711a      	strb	r2, [r3, #4]
}
 80052d0:	bf00      	nop
 80052d2:	3710      	adds	r7, #16
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80052e0:	bf00      	nop
 80052e2:	370c      	adds	r7, #12
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr

080052ec <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80052f4:	bf00      	nop
 80052f6:	370c      	adds	r7, #12
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr

08005300 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005300:	b480      	push	{r7}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8005308:	bf00      	nop
 800530a:	370c      	adds	r7, #12
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800531c:	bf00      	nop
 800531e:	370c      	adds	r7, #12
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005334:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8005336:	68f8      	ldr	r0, [r7, #12]
 8005338:	f7ff ffce 	bl	80052d8 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2201      	movs	r2, #1
 8005340:	711a      	strb	r2, [r3, #4]
}
 8005342:	bf00      	nop
 8005344:	3710      	adds	r7, #16
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}

0800534a <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800534a:	b580      	push	{r7, lr}
 800534c:	b084      	sub	sp, #16
 800534e:	af00      	add	r7, sp, #0
 8005350:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005356:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8005358:	68f8      	ldr	r0, [r7, #12]
 800535a:	f7ff ffc7 	bl	80052ec <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800535e:	bf00      	nop
 8005360:	3710      	adds	r7, #16
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}

08005366 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8005366:	b580      	push	{r7, lr}
 8005368:	b084      	sub	sp, #16
 800536a:	af00      	add	r7, sp, #0
 800536c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005372:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	691b      	ldr	r3, [r3, #16]
 8005378:	f043 0204 	orr.w	r2, r3, #4
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8005380:	68f8      	ldr	r0, [r7, #12]
 8005382:	f7ff ffbd 	bl	8005300 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2201      	movs	r2, #1
 800538a:	711a      	strb	r2, [r3, #4]
}
 800538c:	bf00      	nop
 800538e:	3710      	adds	r7, #16
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b086      	sub	sp, #24
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800539c:	f7fd fed2 	bl	8003144 <HAL_GetTick>
 80053a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d101      	bne.n	80053ac <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	e316      	b.n	80059da <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a66      	ldr	r2, [pc, #408]	; (800554c <HAL_DMA_Init+0x1b8>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d04a      	beq.n	800544c <HAL_DMA_Init+0xb8>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a65      	ldr	r2, [pc, #404]	; (8005550 <HAL_DMA_Init+0x1bc>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d045      	beq.n	800544c <HAL_DMA_Init+0xb8>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a63      	ldr	r2, [pc, #396]	; (8005554 <HAL_DMA_Init+0x1c0>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d040      	beq.n	800544c <HAL_DMA_Init+0xb8>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a62      	ldr	r2, [pc, #392]	; (8005558 <HAL_DMA_Init+0x1c4>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d03b      	beq.n	800544c <HAL_DMA_Init+0xb8>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a60      	ldr	r2, [pc, #384]	; (800555c <HAL_DMA_Init+0x1c8>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d036      	beq.n	800544c <HAL_DMA_Init+0xb8>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a5f      	ldr	r2, [pc, #380]	; (8005560 <HAL_DMA_Init+0x1cc>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d031      	beq.n	800544c <HAL_DMA_Init+0xb8>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a5d      	ldr	r2, [pc, #372]	; (8005564 <HAL_DMA_Init+0x1d0>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d02c      	beq.n	800544c <HAL_DMA_Init+0xb8>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a5c      	ldr	r2, [pc, #368]	; (8005568 <HAL_DMA_Init+0x1d4>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d027      	beq.n	800544c <HAL_DMA_Init+0xb8>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a5a      	ldr	r2, [pc, #360]	; (800556c <HAL_DMA_Init+0x1d8>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d022      	beq.n	800544c <HAL_DMA_Init+0xb8>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a59      	ldr	r2, [pc, #356]	; (8005570 <HAL_DMA_Init+0x1dc>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d01d      	beq.n	800544c <HAL_DMA_Init+0xb8>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a57      	ldr	r2, [pc, #348]	; (8005574 <HAL_DMA_Init+0x1e0>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d018      	beq.n	800544c <HAL_DMA_Init+0xb8>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a56      	ldr	r2, [pc, #344]	; (8005578 <HAL_DMA_Init+0x1e4>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d013      	beq.n	800544c <HAL_DMA_Init+0xb8>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a54      	ldr	r2, [pc, #336]	; (800557c <HAL_DMA_Init+0x1e8>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d00e      	beq.n	800544c <HAL_DMA_Init+0xb8>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a53      	ldr	r2, [pc, #332]	; (8005580 <HAL_DMA_Init+0x1ec>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d009      	beq.n	800544c <HAL_DMA_Init+0xb8>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a51      	ldr	r2, [pc, #324]	; (8005584 <HAL_DMA_Init+0x1f0>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d004      	beq.n	800544c <HAL_DMA_Init+0xb8>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a50      	ldr	r2, [pc, #320]	; (8005588 <HAL_DMA_Init+0x1f4>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d101      	bne.n	8005450 <HAL_DMA_Init+0xbc>
 800544c:	2301      	movs	r3, #1
 800544e:	e000      	b.n	8005452 <HAL_DMA_Init+0xbe>
 8005450:	2300      	movs	r3, #0
 8005452:	2b00      	cmp	r3, #0
 8005454:	f000 813b 	beq.w	80056ce <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2202      	movs	r2, #2
 800545c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a37      	ldr	r2, [pc, #220]	; (800554c <HAL_DMA_Init+0x1b8>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d04a      	beq.n	8005508 <HAL_DMA_Init+0x174>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a36      	ldr	r2, [pc, #216]	; (8005550 <HAL_DMA_Init+0x1bc>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d045      	beq.n	8005508 <HAL_DMA_Init+0x174>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a34      	ldr	r2, [pc, #208]	; (8005554 <HAL_DMA_Init+0x1c0>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d040      	beq.n	8005508 <HAL_DMA_Init+0x174>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a33      	ldr	r2, [pc, #204]	; (8005558 <HAL_DMA_Init+0x1c4>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d03b      	beq.n	8005508 <HAL_DMA_Init+0x174>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a31      	ldr	r2, [pc, #196]	; (800555c <HAL_DMA_Init+0x1c8>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d036      	beq.n	8005508 <HAL_DMA_Init+0x174>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a30      	ldr	r2, [pc, #192]	; (8005560 <HAL_DMA_Init+0x1cc>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d031      	beq.n	8005508 <HAL_DMA_Init+0x174>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a2e      	ldr	r2, [pc, #184]	; (8005564 <HAL_DMA_Init+0x1d0>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d02c      	beq.n	8005508 <HAL_DMA_Init+0x174>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a2d      	ldr	r2, [pc, #180]	; (8005568 <HAL_DMA_Init+0x1d4>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d027      	beq.n	8005508 <HAL_DMA_Init+0x174>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a2b      	ldr	r2, [pc, #172]	; (800556c <HAL_DMA_Init+0x1d8>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d022      	beq.n	8005508 <HAL_DMA_Init+0x174>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a2a      	ldr	r2, [pc, #168]	; (8005570 <HAL_DMA_Init+0x1dc>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d01d      	beq.n	8005508 <HAL_DMA_Init+0x174>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a28      	ldr	r2, [pc, #160]	; (8005574 <HAL_DMA_Init+0x1e0>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d018      	beq.n	8005508 <HAL_DMA_Init+0x174>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a27      	ldr	r2, [pc, #156]	; (8005578 <HAL_DMA_Init+0x1e4>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d013      	beq.n	8005508 <HAL_DMA_Init+0x174>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a25      	ldr	r2, [pc, #148]	; (800557c <HAL_DMA_Init+0x1e8>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d00e      	beq.n	8005508 <HAL_DMA_Init+0x174>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a24      	ldr	r2, [pc, #144]	; (8005580 <HAL_DMA_Init+0x1ec>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d009      	beq.n	8005508 <HAL_DMA_Init+0x174>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a22      	ldr	r2, [pc, #136]	; (8005584 <HAL_DMA_Init+0x1f0>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d004      	beq.n	8005508 <HAL_DMA_Init+0x174>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a21      	ldr	r2, [pc, #132]	; (8005588 <HAL_DMA_Init+0x1f4>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d108      	bne.n	800551a <HAL_DMA_Init+0x186>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f022 0201 	bic.w	r2, r2, #1
 8005516:	601a      	str	r2, [r3, #0]
 8005518:	e007      	b.n	800552a <HAL_DMA_Init+0x196>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f022 0201 	bic.w	r2, r2, #1
 8005528:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800552a:	e02f      	b.n	800558c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800552c:	f7fd fe0a 	bl	8003144 <HAL_GetTick>
 8005530:	4602      	mov	r2, r0
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	1ad3      	subs	r3, r2, r3
 8005536:	2b05      	cmp	r3, #5
 8005538:	d928      	bls.n	800558c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2220      	movs	r2, #32
 800553e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2203      	movs	r2, #3
 8005544:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	e246      	b.n	80059da <HAL_DMA_Init+0x646>
 800554c:	40020010 	.word	0x40020010
 8005550:	40020028 	.word	0x40020028
 8005554:	40020040 	.word	0x40020040
 8005558:	40020058 	.word	0x40020058
 800555c:	40020070 	.word	0x40020070
 8005560:	40020088 	.word	0x40020088
 8005564:	400200a0 	.word	0x400200a0
 8005568:	400200b8 	.word	0x400200b8
 800556c:	40020410 	.word	0x40020410
 8005570:	40020428 	.word	0x40020428
 8005574:	40020440 	.word	0x40020440
 8005578:	40020458 	.word	0x40020458
 800557c:	40020470 	.word	0x40020470
 8005580:	40020488 	.word	0x40020488
 8005584:	400204a0 	.word	0x400204a0
 8005588:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 0301 	and.w	r3, r3, #1
 8005596:	2b00      	cmp	r3, #0
 8005598:	d1c8      	bne.n	800552c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80055a2:	697a      	ldr	r2, [r7, #20]
 80055a4:	4b83      	ldr	r3, [pc, #524]	; (80057b4 <HAL_DMA_Init+0x420>)
 80055a6:	4013      	ands	r3, r2
 80055a8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80055b2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	691b      	ldr	r3, [r3, #16]
 80055b8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80055be:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	699b      	ldr	r3, [r3, #24]
 80055c4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80055ca:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6a1b      	ldr	r3, [r3, #32]
 80055d0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80055d2:	697a      	ldr	r2, [r7, #20]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055dc:	2b04      	cmp	r3, #4
 80055de:	d107      	bne.n	80055f0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e8:	4313      	orrs	r3, r2
 80055ea:	697a      	ldr	r2, [r7, #20]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80055f0:	4b71      	ldr	r3, [pc, #452]	; (80057b8 <HAL_DMA_Init+0x424>)
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	4b71      	ldr	r3, [pc, #452]	; (80057bc <HAL_DMA_Init+0x428>)
 80055f6:	4013      	ands	r3, r2
 80055f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055fc:	d328      	bcc.n	8005650 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	2b28      	cmp	r3, #40	; 0x28
 8005604:	d903      	bls.n	800560e <HAL_DMA_Init+0x27a>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	2b2e      	cmp	r3, #46	; 0x2e
 800560c:	d917      	bls.n	800563e <HAL_DMA_Init+0x2aa>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	2b3e      	cmp	r3, #62	; 0x3e
 8005614:	d903      	bls.n	800561e <HAL_DMA_Init+0x28a>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	2b42      	cmp	r3, #66	; 0x42
 800561c:	d90f      	bls.n	800563e <HAL_DMA_Init+0x2aa>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	2b46      	cmp	r3, #70	; 0x46
 8005624:	d903      	bls.n	800562e <HAL_DMA_Init+0x29a>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	2b48      	cmp	r3, #72	; 0x48
 800562c:	d907      	bls.n	800563e <HAL_DMA_Init+0x2aa>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	2b4e      	cmp	r3, #78	; 0x4e
 8005634:	d905      	bls.n	8005642 <HAL_DMA_Init+0x2ae>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	2b52      	cmp	r3, #82	; 0x52
 800563c:	d801      	bhi.n	8005642 <HAL_DMA_Init+0x2ae>
 800563e:	2301      	movs	r3, #1
 8005640:	e000      	b.n	8005644 <HAL_DMA_Init+0x2b0>
 8005642:	2300      	movs	r3, #0
 8005644:	2b00      	cmp	r3, #0
 8005646:	d003      	beq.n	8005650 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800564e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	697a      	ldr	r2, [r7, #20]
 8005656:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	695b      	ldr	r3, [r3, #20]
 800565e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	f023 0307 	bic.w	r3, r3, #7
 8005666:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566c:	697a      	ldr	r2, [r7, #20]
 800566e:	4313      	orrs	r3, r2
 8005670:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005676:	2b04      	cmp	r3, #4
 8005678:	d117      	bne.n	80056aa <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800567e:	697a      	ldr	r2, [r7, #20]
 8005680:	4313      	orrs	r3, r2
 8005682:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005688:	2b00      	cmp	r3, #0
 800568a:	d00e      	beq.n	80056aa <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f002 fb3f 	bl	8007d10 <DMA_CheckFifoParam>
 8005692:	4603      	mov	r3, r0
 8005694:	2b00      	cmp	r3, #0
 8005696:	d008      	beq.n	80056aa <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2240      	movs	r2, #64	; 0x40
 800569c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2201      	movs	r2, #1
 80056a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	e197      	b.n	80059da <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	697a      	ldr	r2, [r7, #20]
 80056b0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f002 fa7a 	bl	8007bac <DMA_CalcBaseAndBitshift>
 80056b8:	4603      	mov	r3, r0
 80056ba:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056c0:	f003 031f 	and.w	r3, r3, #31
 80056c4:	223f      	movs	r2, #63	; 0x3f
 80056c6:	409a      	lsls	r2, r3
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	609a      	str	r2, [r3, #8]
 80056cc:	e0cd      	b.n	800586a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a3b      	ldr	r2, [pc, #236]	; (80057c0 <HAL_DMA_Init+0x42c>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d022      	beq.n	800571e <HAL_DMA_Init+0x38a>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a39      	ldr	r2, [pc, #228]	; (80057c4 <HAL_DMA_Init+0x430>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d01d      	beq.n	800571e <HAL_DMA_Init+0x38a>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a38      	ldr	r2, [pc, #224]	; (80057c8 <HAL_DMA_Init+0x434>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d018      	beq.n	800571e <HAL_DMA_Init+0x38a>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a36      	ldr	r2, [pc, #216]	; (80057cc <HAL_DMA_Init+0x438>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d013      	beq.n	800571e <HAL_DMA_Init+0x38a>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a35      	ldr	r2, [pc, #212]	; (80057d0 <HAL_DMA_Init+0x43c>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d00e      	beq.n	800571e <HAL_DMA_Init+0x38a>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a33      	ldr	r2, [pc, #204]	; (80057d4 <HAL_DMA_Init+0x440>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d009      	beq.n	800571e <HAL_DMA_Init+0x38a>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a32      	ldr	r2, [pc, #200]	; (80057d8 <HAL_DMA_Init+0x444>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d004      	beq.n	800571e <HAL_DMA_Init+0x38a>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a30      	ldr	r2, [pc, #192]	; (80057dc <HAL_DMA_Init+0x448>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d101      	bne.n	8005722 <HAL_DMA_Init+0x38e>
 800571e:	2301      	movs	r3, #1
 8005720:	e000      	b.n	8005724 <HAL_DMA_Init+0x390>
 8005722:	2300      	movs	r3, #0
 8005724:	2b00      	cmp	r3, #0
 8005726:	f000 8097 	beq.w	8005858 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a24      	ldr	r2, [pc, #144]	; (80057c0 <HAL_DMA_Init+0x42c>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d021      	beq.n	8005778 <HAL_DMA_Init+0x3e4>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a22      	ldr	r2, [pc, #136]	; (80057c4 <HAL_DMA_Init+0x430>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d01c      	beq.n	8005778 <HAL_DMA_Init+0x3e4>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a21      	ldr	r2, [pc, #132]	; (80057c8 <HAL_DMA_Init+0x434>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d017      	beq.n	8005778 <HAL_DMA_Init+0x3e4>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a1f      	ldr	r2, [pc, #124]	; (80057cc <HAL_DMA_Init+0x438>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d012      	beq.n	8005778 <HAL_DMA_Init+0x3e4>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a1e      	ldr	r2, [pc, #120]	; (80057d0 <HAL_DMA_Init+0x43c>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d00d      	beq.n	8005778 <HAL_DMA_Init+0x3e4>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a1c      	ldr	r2, [pc, #112]	; (80057d4 <HAL_DMA_Init+0x440>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d008      	beq.n	8005778 <HAL_DMA_Init+0x3e4>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a1b      	ldr	r2, [pc, #108]	; (80057d8 <HAL_DMA_Init+0x444>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d003      	beq.n	8005778 <HAL_DMA_Init+0x3e4>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a19      	ldr	r2, [pc, #100]	; (80057dc <HAL_DMA_Init+0x448>)
 8005776:	4293      	cmp	r3, r2
 8005778:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2202      	movs	r2, #2
 800577e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2200      	movs	r2, #0
 8005786:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005792:	697a      	ldr	r2, [r7, #20]
 8005794:	4b12      	ldr	r3, [pc, #72]	; (80057e0 <HAL_DMA_Init+0x44c>)
 8005796:	4013      	ands	r3, r2
 8005798:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	2b40      	cmp	r3, #64	; 0x40
 80057a0:	d020      	beq.n	80057e4 <HAL_DMA_Init+0x450>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	2b80      	cmp	r3, #128	; 0x80
 80057a8:	d102      	bne.n	80057b0 <HAL_DMA_Init+0x41c>
 80057aa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80057ae:	e01a      	b.n	80057e6 <HAL_DMA_Init+0x452>
 80057b0:	2300      	movs	r3, #0
 80057b2:	e018      	b.n	80057e6 <HAL_DMA_Init+0x452>
 80057b4:	fe10803f 	.word	0xfe10803f
 80057b8:	5c001000 	.word	0x5c001000
 80057bc:	ffff0000 	.word	0xffff0000
 80057c0:	58025408 	.word	0x58025408
 80057c4:	5802541c 	.word	0x5802541c
 80057c8:	58025430 	.word	0x58025430
 80057cc:	58025444 	.word	0x58025444
 80057d0:	58025458 	.word	0x58025458
 80057d4:	5802546c 	.word	0x5802546c
 80057d8:	58025480 	.word	0x58025480
 80057dc:	58025494 	.word	0x58025494
 80057e0:	fffe000f 	.word	0xfffe000f
 80057e4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	68d2      	ldr	r2, [r2, #12]
 80057ea:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80057ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	691b      	ldr	r3, [r3, #16]
 80057f2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80057f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	695b      	ldr	r3, [r3, #20]
 80057fa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80057fc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	699b      	ldr	r3, [r3, #24]
 8005802:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005804:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	69db      	ldr	r3, [r3, #28]
 800580a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800580c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a1b      	ldr	r3, [r3, #32]
 8005812:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005814:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005816:	697a      	ldr	r2, [r7, #20]
 8005818:	4313      	orrs	r3, r2
 800581a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	697a      	ldr	r2, [r7, #20]
 8005822:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	461a      	mov	r2, r3
 800582a:	4b6e      	ldr	r3, [pc, #440]	; (80059e4 <HAL_DMA_Init+0x650>)
 800582c:	4413      	add	r3, r2
 800582e:	4a6e      	ldr	r2, [pc, #440]	; (80059e8 <HAL_DMA_Init+0x654>)
 8005830:	fba2 2303 	umull	r2, r3, r2, r3
 8005834:	091b      	lsrs	r3, r3, #4
 8005836:	009a      	lsls	r2, r3, #2
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f002 f9b5 	bl	8007bac <DMA_CalcBaseAndBitshift>
 8005842:	4603      	mov	r3, r0
 8005844:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800584a:	f003 031f 	and.w	r3, r3, #31
 800584e:	2201      	movs	r2, #1
 8005850:	409a      	lsls	r2, r3
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	605a      	str	r2, [r3, #4]
 8005856:	e008      	b.n	800586a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2240      	movs	r2, #64	; 0x40
 800585c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2203      	movs	r2, #3
 8005862:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	e0b7      	b.n	80059da <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a5f      	ldr	r2, [pc, #380]	; (80059ec <HAL_DMA_Init+0x658>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d072      	beq.n	800595a <HAL_DMA_Init+0x5c6>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a5d      	ldr	r2, [pc, #372]	; (80059f0 <HAL_DMA_Init+0x65c>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d06d      	beq.n	800595a <HAL_DMA_Init+0x5c6>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a5c      	ldr	r2, [pc, #368]	; (80059f4 <HAL_DMA_Init+0x660>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d068      	beq.n	800595a <HAL_DMA_Init+0x5c6>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a5a      	ldr	r2, [pc, #360]	; (80059f8 <HAL_DMA_Init+0x664>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d063      	beq.n	800595a <HAL_DMA_Init+0x5c6>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a59      	ldr	r2, [pc, #356]	; (80059fc <HAL_DMA_Init+0x668>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d05e      	beq.n	800595a <HAL_DMA_Init+0x5c6>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a57      	ldr	r2, [pc, #348]	; (8005a00 <HAL_DMA_Init+0x66c>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d059      	beq.n	800595a <HAL_DMA_Init+0x5c6>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a56      	ldr	r2, [pc, #344]	; (8005a04 <HAL_DMA_Init+0x670>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d054      	beq.n	800595a <HAL_DMA_Init+0x5c6>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a54      	ldr	r2, [pc, #336]	; (8005a08 <HAL_DMA_Init+0x674>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d04f      	beq.n	800595a <HAL_DMA_Init+0x5c6>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a53      	ldr	r2, [pc, #332]	; (8005a0c <HAL_DMA_Init+0x678>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d04a      	beq.n	800595a <HAL_DMA_Init+0x5c6>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a51      	ldr	r2, [pc, #324]	; (8005a10 <HAL_DMA_Init+0x67c>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d045      	beq.n	800595a <HAL_DMA_Init+0x5c6>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a50      	ldr	r2, [pc, #320]	; (8005a14 <HAL_DMA_Init+0x680>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d040      	beq.n	800595a <HAL_DMA_Init+0x5c6>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a4e      	ldr	r2, [pc, #312]	; (8005a18 <HAL_DMA_Init+0x684>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d03b      	beq.n	800595a <HAL_DMA_Init+0x5c6>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a4d      	ldr	r2, [pc, #308]	; (8005a1c <HAL_DMA_Init+0x688>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d036      	beq.n	800595a <HAL_DMA_Init+0x5c6>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a4b      	ldr	r2, [pc, #300]	; (8005a20 <HAL_DMA_Init+0x68c>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d031      	beq.n	800595a <HAL_DMA_Init+0x5c6>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a4a      	ldr	r2, [pc, #296]	; (8005a24 <HAL_DMA_Init+0x690>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d02c      	beq.n	800595a <HAL_DMA_Init+0x5c6>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a48      	ldr	r2, [pc, #288]	; (8005a28 <HAL_DMA_Init+0x694>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d027      	beq.n	800595a <HAL_DMA_Init+0x5c6>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a47      	ldr	r2, [pc, #284]	; (8005a2c <HAL_DMA_Init+0x698>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d022      	beq.n	800595a <HAL_DMA_Init+0x5c6>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a45      	ldr	r2, [pc, #276]	; (8005a30 <HAL_DMA_Init+0x69c>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d01d      	beq.n	800595a <HAL_DMA_Init+0x5c6>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a44      	ldr	r2, [pc, #272]	; (8005a34 <HAL_DMA_Init+0x6a0>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d018      	beq.n	800595a <HAL_DMA_Init+0x5c6>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a42      	ldr	r2, [pc, #264]	; (8005a38 <HAL_DMA_Init+0x6a4>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d013      	beq.n	800595a <HAL_DMA_Init+0x5c6>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a41      	ldr	r2, [pc, #260]	; (8005a3c <HAL_DMA_Init+0x6a8>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d00e      	beq.n	800595a <HAL_DMA_Init+0x5c6>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a3f      	ldr	r2, [pc, #252]	; (8005a40 <HAL_DMA_Init+0x6ac>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d009      	beq.n	800595a <HAL_DMA_Init+0x5c6>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a3e      	ldr	r2, [pc, #248]	; (8005a44 <HAL_DMA_Init+0x6b0>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d004      	beq.n	800595a <HAL_DMA_Init+0x5c6>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a3c      	ldr	r2, [pc, #240]	; (8005a48 <HAL_DMA_Init+0x6b4>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d101      	bne.n	800595e <HAL_DMA_Init+0x5ca>
 800595a:	2301      	movs	r3, #1
 800595c:	e000      	b.n	8005960 <HAL_DMA_Init+0x5cc>
 800595e:	2300      	movs	r3, #0
 8005960:	2b00      	cmp	r3, #0
 8005962:	d032      	beq.n	80059ca <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f002 fa4f 	bl	8007e08 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	2b80      	cmp	r3, #128	; 0x80
 8005970:	d102      	bne.n	8005978 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	685a      	ldr	r2, [r3, #4]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005980:	b2d2      	uxtb	r2, r2
 8005982:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800598c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d010      	beq.n	80059b8 <HAL_DMA_Init+0x624>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	2b08      	cmp	r3, #8
 800599c:	d80c      	bhi.n	80059b8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f002 facc 	bl	8007f3c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059a8:	2200      	movs	r2, #0
 80059aa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059b0:	687a      	ldr	r2, [r7, #4]
 80059b2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80059b4:	605a      	str	r2, [r3, #4]
 80059b6:	e008      	b.n	80059ca <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2201      	movs	r2, #1
 80059d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80059d8:	2300      	movs	r3, #0
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3718      	adds	r7, #24
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	bf00      	nop
 80059e4:	a7fdabf8 	.word	0xa7fdabf8
 80059e8:	cccccccd 	.word	0xcccccccd
 80059ec:	40020010 	.word	0x40020010
 80059f0:	40020028 	.word	0x40020028
 80059f4:	40020040 	.word	0x40020040
 80059f8:	40020058 	.word	0x40020058
 80059fc:	40020070 	.word	0x40020070
 8005a00:	40020088 	.word	0x40020088
 8005a04:	400200a0 	.word	0x400200a0
 8005a08:	400200b8 	.word	0x400200b8
 8005a0c:	40020410 	.word	0x40020410
 8005a10:	40020428 	.word	0x40020428
 8005a14:	40020440 	.word	0x40020440
 8005a18:	40020458 	.word	0x40020458
 8005a1c:	40020470 	.word	0x40020470
 8005a20:	40020488 	.word	0x40020488
 8005a24:	400204a0 	.word	0x400204a0
 8005a28:	400204b8 	.word	0x400204b8
 8005a2c:	58025408 	.word	0x58025408
 8005a30:	5802541c 	.word	0x5802541c
 8005a34:	58025430 	.word	0x58025430
 8005a38:	58025444 	.word	0x58025444
 8005a3c:	58025458 	.word	0x58025458
 8005a40:	5802546c 	.word	0x5802546c
 8005a44:	58025480 	.word	0x58025480
 8005a48:	58025494 	.word	0x58025494

08005a4c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b086      	sub	sp, #24
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	60f8      	str	r0, [r7, #12]
 8005a54:	60b9      	str	r1, [r7, #8]
 8005a56:	607a      	str	r2, [r7, #4]
 8005a58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d101      	bne.n	8005a68 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	e226      	b.n	8005eb6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d101      	bne.n	8005a76 <HAL_DMA_Start_IT+0x2a>
 8005a72:	2302      	movs	r3, #2
 8005a74:	e21f      	b.n	8005eb6 <HAL_DMA_Start_IT+0x46a>
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2201      	movs	r2, #1
 8005a7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	f040 820a 	bne.w	8005ea0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2202      	movs	r2, #2
 8005a90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2200      	movs	r2, #0
 8005a98:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a68      	ldr	r2, [pc, #416]	; (8005c40 <HAL_DMA_Start_IT+0x1f4>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d04a      	beq.n	8005b3a <HAL_DMA_Start_IT+0xee>
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a66      	ldr	r2, [pc, #408]	; (8005c44 <HAL_DMA_Start_IT+0x1f8>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d045      	beq.n	8005b3a <HAL_DMA_Start_IT+0xee>
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a65      	ldr	r2, [pc, #404]	; (8005c48 <HAL_DMA_Start_IT+0x1fc>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d040      	beq.n	8005b3a <HAL_DMA_Start_IT+0xee>
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a63      	ldr	r2, [pc, #396]	; (8005c4c <HAL_DMA_Start_IT+0x200>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d03b      	beq.n	8005b3a <HAL_DMA_Start_IT+0xee>
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a62      	ldr	r2, [pc, #392]	; (8005c50 <HAL_DMA_Start_IT+0x204>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d036      	beq.n	8005b3a <HAL_DMA_Start_IT+0xee>
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a60      	ldr	r2, [pc, #384]	; (8005c54 <HAL_DMA_Start_IT+0x208>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d031      	beq.n	8005b3a <HAL_DMA_Start_IT+0xee>
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a5f      	ldr	r2, [pc, #380]	; (8005c58 <HAL_DMA_Start_IT+0x20c>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d02c      	beq.n	8005b3a <HAL_DMA_Start_IT+0xee>
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a5d      	ldr	r2, [pc, #372]	; (8005c5c <HAL_DMA_Start_IT+0x210>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d027      	beq.n	8005b3a <HAL_DMA_Start_IT+0xee>
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a5c      	ldr	r2, [pc, #368]	; (8005c60 <HAL_DMA_Start_IT+0x214>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d022      	beq.n	8005b3a <HAL_DMA_Start_IT+0xee>
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a5a      	ldr	r2, [pc, #360]	; (8005c64 <HAL_DMA_Start_IT+0x218>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d01d      	beq.n	8005b3a <HAL_DMA_Start_IT+0xee>
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a59      	ldr	r2, [pc, #356]	; (8005c68 <HAL_DMA_Start_IT+0x21c>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d018      	beq.n	8005b3a <HAL_DMA_Start_IT+0xee>
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a57      	ldr	r2, [pc, #348]	; (8005c6c <HAL_DMA_Start_IT+0x220>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d013      	beq.n	8005b3a <HAL_DMA_Start_IT+0xee>
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a56      	ldr	r2, [pc, #344]	; (8005c70 <HAL_DMA_Start_IT+0x224>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d00e      	beq.n	8005b3a <HAL_DMA_Start_IT+0xee>
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a54      	ldr	r2, [pc, #336]	; (8005c74 <HAL_DMA_Start_IT+0x228>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d009      	beq.n	8005b3a <HAL_DMA_Start_IT+0xee>
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a53      	ldr	r2, [pc, #332]	; (8005c78 <HAL_DMA_Start_IT+0x22c>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d004      	beq.n	8005b3a <HAL_DMA_Start_IT+0xee>
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a51      	ldr	r2, [pc, #324]	; (8005c7c <HAL_DMA_Start_IT+0x230>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d108      	bne.n	8005b4c <HAL_DMA_Start_IT+0x100>
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f022 0201 	bic.w	r2, r2, #1
 8005b48:	601a      	str	r2, [r3, #0]
 8005b4a:	e007      	b.n	8005b5c <HAL_DMA_Start_IT+0x110>
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f022 0201 	bic.w	r2, r2, #1
 8005b5a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	68b9      	ldr	r1, [r7, #8]
 8005b62:	68f8      	ldr	r0, [r7, #12]
 8005b64:	f001 fe76 	bl	8007854 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a34      	ldr	r2, [pc, #208]	; (8005c40 <HAL_DMA_Start_IT+0x1f4>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d04a      	beq.n	8005c08 <HAL_DMA_Start_IT+0x1bc>
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a33      	ldr	r2, [pc, #204]	; (8005c44 <HAL_DMA_Start_IT+0x1f8>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d045      	beq.n	8005c08 <HAL_DMA_Start_IT+0x1bc>
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a31      	ldr	r2, [pc, #196]	; (8005c48 <HAL_DMA_Start_IT+0x1fc>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d040      	beq.n	8005c08 <HAL_DMA_Start_IT+0x1bc>
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a30      	ldr	r2, [pc, #192]	; (8005c4c <HAL_DMA_Start_IT+0x200>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d03b      	beq.n	8005c08 <HAL_DMA_Start_IT+0x1bc>
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a2e      	ldr	r2, [pc, #184]	; (8005c50 <HAL_DMA_Start_IT+0x204>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d036      	beq.n	8005c08 <HAL_DMA_Start_IT+0x1bc>
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a2d      	ldr	r2, [pc, #180]	; (8005c54 <HAL_DMA_Start_IT+0x208>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d031      	beq.n	8005c08 <HAL_DMA_Start_IT+0x1bc>
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a2b      	ldr	r2, [pc, #172]	; (8005c58 <HAL_DMA_Start_IT+0x20c>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d02c      	beq.n	8005c08 <HAL_DMA_Start_IT+0x1bc>
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a2a      	ldr	r2, [pc, #168]	; (8005c5c <HAL_DMA_Start_IT+0x210>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d027      	beq.n	8005c08 <HAL_DMA_Start_IT+0x1bc>
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a28      	ldr	r2, [pc, #160]	; (8005c60 <HAL_DMA_Start_IT+0x214>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d022      	beq.n	8005c08 <HAL_DMA_Start_IT+0x1bc>
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a27      	ldr	r2, [pc, #156]	; (8005c64 <HAL_DMA_Start_IT+0x218>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d01d      	beq.n	8005c08 <HAL_DMA_Start_IT+0x1bc>
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a25      	ldr	r2, [pc, #148]	; (8005c68 <HAL_DMA_Start_IT+0x21c>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d018      	beq.n	8005c08 <HAL_DMA_Start_IT+0x1bc>
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a24      	ldr	r2, [pc, #144]	; (8005c6c <HAL_DMA_Start_IT+0x220>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d013      	beq.n	8005c08 <HAL_DMA_Start_IT+0x1bc>
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a22      	ldr	r2, [pc, #136]	; (8005c70 <HAL_DMA_Start_IT+0x224>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d00e      	beq.n	8005c08 <HAL_DMA_Start_IT+0x1bc>
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a21      	ldr	r2, [pc, #132]	; (8005c74 <HAL_DMA_Start_IT+0x228>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d009      	beq.n	8005c08 <HAL_DMA_Start_IT+0x1bc>
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a1f      	ldr	r2, [pc, #124]	; (8005c78 <HAL_DMA_Start_IT+0x22c>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d004      	beq.n	8005c08 <HAL_DMA_Start_IT+0x1bc>
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a1e      	ldr	r2, [pc, #120]	; (8005c7c <HAL_DMA_Start_IT+0x230>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d101      	bne.n	8005c0c <HAL_DMA_Start_IT+0x1c0>
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e000      	b.n	8005c0e <HAL_DMA_Start_IT+0x1c2>
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d036      	beq.n	8005c80 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f023 021e 	bic.w	r2, r3, #30
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f042 0216 	orr.w	r2, r2, #22
 8005c24:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d03e      	beq.n	8005cac <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f042 0208 	orr.w	r2, r2, #8
 8005c3c:	601a      	str	r2, [r3, #0]
 8005c3e:	e035      	b.n	8005cac <HAL_DMA_Start_IT+0x260>
 8005c40:	40020010 	.word	0x40020010
 8005c44:	40020028 	.word	0x40020028
 8005c48:	40020040 	.word	0x40020040
 8005c4c:	40020058 	.word	0x40020058
 8005c50:	40020070 	.word	0x40020070
 8005c54:	40020088 	.word	0x40020088
 8005c58:	400200a0 	.word	0x400200a0
 8005c5c:	400200b8 	.word	0x400200b8
 8005c60:	40020410 	.word	0x40020410
 8005c64:	40020428 	.word	0x40020428
 8005c68:	40020440 	.word	0x40020440
 8005c6c:	40020458 	.word	0x40020458
 8005c70:	40020470 	.word	0x40020470
 8005c74:	40020488 	.word	0x40020488
 8005c78:	400204a0 	.word	0x400204a0
 8005c7c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f023 020e 	bic.w	r2, r3, #14
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f042 020a 	orr.w	r2, r2, #10
 8005c92:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d007      	beq.n	8005cac <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f042 0204 	orr.w	r2, r2, #4
 8005caa:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a83      	ldr	r2, [pc, #524]	; (8005ec0 <HAL_DMA_Start_IT+0x474>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d072      	beq.n	8005d9c <HAL_DMA_Start_IT+0x350>
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a82      	ldr	r2, [pc, #520]	; (8005ec4 <HAL_DMA_Start_IT+0x478>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d06d      	beq.n	8005d9c <HAL_DMA_Start_IT+0x350>
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a80      	ldr	r2, [pc, #512]	; (8005ec8 <HAL_DMA_Start_IT+0x47c>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d068      	beq.n	8005d9c <HAL_DMA_Start_IT+0x350>
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a7f      	ldr	r2, [pc, #508]	; (8005ecc <HAL_DMA_Start_IT+0x480>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d063      	beq.n	8005d9c <HAL_DMA_Start_IT+0x350>
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a7d      	ldr	r2, [pc, #500]	; (8005ed0 <HAL_DMA_Start_IT+0x484>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d05e      	beq.n	8005d9c <HAL_DMA_Start_IT+0x350>
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a7c      	ldr	r2, [pc, #496]	; (8005ed4 <HAL_DMA_Start_IT+0x488>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d059      	beq.n	8005d9c <HAL_DMA_Start_IT+0x350>
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a7a      	ldr	r2, [pc, #488]	; (8005ed8 <HAL_DMA_Start_IT+0x48c>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d054      	beq.n	8005d9c <HAL_DMA_Start_IT+0x350>
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a79      	ldr	r2, [pc, #484]	; (8005edc <HAL_DMA_Start_IT+0x490>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d04f      	beq.n	8005d9c <HAL_DMA_Start_IT+0x350>
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a77      	ldr	r2, [pc, #476]	; (8005ee0 <HAL_DMA_Start_IT+0x494>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d04a      	beq.n	8005d9c <HAL_DMA_Start_IT+0x350>
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a76      	ldr	r2, [pc, #472]	; (8005ee4 <HAL_DMA_Start_IT+0x498>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d045      	beq.n	8005d9c <HAL_DMA_Start_IT+0x350>
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a74      	ldr	r2, [pc, #464]	; (8005ee8 <HAL_DMA_Start_IT+0x49c>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d040      	beq.n	8005d9c <HAL_DMA_Start_IT+0x350>
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a73      	ldr	r2, [pc, #460]	; (8005eec <HAL_DMA_Start_IT+0x4a0>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d03b      	beq.n	8005d9c <HAL_DMA_Start_IT+0x350>
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a71      	ldr	r2, [pc, #452]	; (8005ef0 <HAL_DMA_Start_IT+0x4a4>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d036      	beq.n	8005d9c <HAL_DMA_Start_IT+0x350>
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a70      	ldr	r2, [pc, #448]	; (8005ef4 <HAL_DMA_Start_IT+0x4a8>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d031      	beq.n	8005d9c <HAL_DMA_Start_IT+0x350>
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a6e      	ldr	r2, [pc, #440]	; (8005ef8 <HAL_DMA_Start_IT+0x4ac>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d02c      	beq.n	8005d9c <HAL_DMA_Start_IT+0x350>
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a6d      	ldr	r2, [pc, #436]	; (8005efc <HAL_DMA_Start_IT+0x4b0>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d027      	beq.n	8005d9c <HAL_DMA_Start_IT+0x350>
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a6b      	ldr	r2, [pc, #428]	; (8005f00 <HAL_DMA_Start_IT+0x4b4>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d022      	beq.n	8005d9c <HAL_DMA_Start_IT+0x350>
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a6a      	ldr	r2, [pc, #424]	; (8005f04 <HAL_DMA_Start_IT+0x4b8>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d01d      	beq.n	8005d9c <HAL_DMA_Start_IT+0x350>
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a68      	ldr	r2, [pc, #416]	; (8005f08 <HAL_DMA_Start_IT+0x4bc>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d018      	beq.n	8005d9c <HAL_DMA_Start_IT+0x350>
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a67      	ldr	r2, [pc, #412]	; (8005f0c <HAL_DMA_Start_IT+0x4c0>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d013      	beq.n	8005d9c <HAL_DMA_Start_IT+0x350>
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a65      	ldr	r2, [pc, #404]	; (8005f10 <HAL_DMA_Start_IT+0x4c4>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d00e      	beq.n	8005d9c <HAL_DMA_Start_IT+0x350>
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a64      	ldr	r2, [pc, #400]	; (8005f14 <HAL_DMA_Start_IT+0x4c8>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d009      	beq.n	8005d9c <HAL_DMA_Start_IT+0x350>
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a62      	ldr	r2, [pc, #392]	; (8005f18 <HAL_DMA_Start_IT+0x4cc>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d004      	beq.n	8005d9c <HAL_DMA_Start_IT+0x350>
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a61      	ldr	r2, [pc, #388]	; (8005f1c <HAL_DMA_Start_IT+0x4d0>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d101      	bne.n	8005da0 <HAL_DMA_Start_IT+0x354>
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	e000      	b.n	8005da2 <HAL_DMA_Start_IT+0x356>
 8005da0:	2300      	movs	r3, #0
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d01a      	beq.n	8005ddc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d007      	beq.n	8005dc4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005dc2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d007      	beq.n	8005ddc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005dd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005dda:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a37      	ldr	r2, [pc, #220]	; (8005ec0 <HAL_DMA_Start_IT+0x474>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d04a      	beq.n	8005e7c <HAL_DMA_Start_IT+0x430>
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a36      	ldr	r2, [pc, #216]	; (8005ec4 <HAL_DMA_Start_IT+0x478>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d045      	beq.n	8005e7c <HAL_DMA_Start_IT+0x430>
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a34      	ldr	r2, [pc, #208]	; (8005ec8 <HAL_DMA_Start_IT+0x47c>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d040      	beq.n	8005e7c <HAL_DMA_Start_IT+0x430>
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a33      	ldr	r2, [pc, #204]	; (8005ecc <HAL_DMA_Start_IT+0x480>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d03b      	beq.n	8005e7c <HAL_DMA_Start_IT+0x430>
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a31      	ldr	r2, [pc, #196]	; (8005ed0 <HAL_DMA_Start_IT+0x484>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d036      	beq.n	8005e7c <HAL_DMA_Start_IT+0x430>
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a30      	ldr	r2, [pc, #192]	; (8005ed4 <HAL_DMA_Start_IT+0x488>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d031      	beq.n	8005e7c <HAL_DMA_Start_IT+0x430>
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a2e      	ldr	r2, [pc, #184]	; (8005ed8 <HAL_DMA_Start_IT+0x48c>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d02c      	beq.n	8005e7c <HAL_DMA_Start_IT+0x430>
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a2d      	ldr	r2, [pc, #180]	; (8005edc <HAL_DMA_Start_IT+0x490>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d027      	beq.n	8005e7c <HAL_DMA_Start_IT+0x430>
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a2b      	ldr	r2, [pc, #172]	; (8005ee0 <HAL_DMA_Start_IT+0x494>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d022      	beq.n	8005e7c <HAL_DMA_Start_IT+0x430>
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a2a      	ldr	r2, [pc, #168]	; (8005ee4 <HAL_DMA_Start_IT+0x498>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d01d      	beq.n	8005e7c <HAL_DMA_Start_IT+0x430>
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a28      	ldr	r2, [pc, #160]	; (8005ee8 <HAL_DMA_Start_IT+0x49c>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d018      	beq.n	8005e7c <HAL_DMA_Start_IT+0x430>
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a27      	ldr	r2, [pc, #156]	; (8005eec <HAL_DMA_Start_IT+0x4a0>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d013      	beq.n	8005e7c <HAL_DMA_Start_IT+0x430>
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a25      	ldr	r2, [pc, #148]	; (8005ef0 <HAL_DMA_Start_IT+0x4a4>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d00e      	beq.n	8005e7c <HAL_DMA_Start_IT+0x430>
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a24      	ldr	r2, [pc, #144]	; (8005ef4 <HAL_DMA_Start_IT+0x4a8>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d009      	beq.n	8005e7c <HAL_DMA_Start_IT+0x430>
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a22      	ldr	r2, [pc, #136]	; (8005ef8 <HAL_DMA_Start_IT+0x4ac>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d004      	beq.n	8005e7c <HAL_DMA_Start_IT+0x430>
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a21      	ldr	r2, [pc, #132]	; (8005efc <HAL_DMA_Start_IT+0x4b0>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d108      	bne.n	8005e8e <HAL_DMA_Start_IT+0x442>
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f042 0201 	orr.w	r2, r2, #1
 8005e8a:	601a      	str	r2, [r3, #0]
 8005e8c:	e012      	b.n	8005eb4 <HAL_DMA_Start_IT+0x468>
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f042 0201 	orr.w	r2, r2, #1
 8005e9c:	601a      	str	r2, [r3, #0]
 8005e9e:	e009      	b.n	8005eb4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ea6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005eb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3718      	adds	r7, #24
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
 8005ebe:	bf00      	nop
 8005ec0:	40020010 	.word	0x40020010
 8005ec4:	40020028 	.word	0x40020028
 8005ec8:	40020040 	.word	0x40020040
 8005ecc:	40020058 	.word	0x40020058
 8005ed0:	40020070 	.word	0x40020070
 8005ed4:	40020088 	.word	0x40020088
 8005ed8:	400200a0 	.word	0x400200a0
 8005edc:	400200b8 	.word	0x400200b8
 8005ee0:	40020410 	.word	0x40020410
 8005ee4:	40020428 	.word	0x40020428
 8005ee8:	40020440 	.word	0x40020440
 8005eec:	40020458 	.word	0x40020458
 8005ef0:	40020470 	.word	0x40020470
 8005ef4:	40020488 	.word	0x40020488
 8005ef8:	400204a0 	.word	0x400204a0
 8005efc:	400204b8 	.word	0x400204b8
 8005f00:	58025408 	.word	0x58025408
 8005f04:	5802541c 	.word	0x5802541c
 8005f08:	58025430 	.word	0x58025430
 8005f0c:	58025444 	.word	0x58025444
 8005f10:	58025458 	.word	0x58025458
 8005f14:	5802546c 	.word	0x5802546c
 8005f18:	58025480 	.word	0x58025480
 8005f1c:	58025494 	.word	0x58025494

08005f20 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b086      	sub	sp, #24
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005f28:	f7fd f90c 	bl	8003144 <HAL_GetTick>
 8005f2c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d101      	bne.n	8005f38 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
 8005f36:	e2dc      	b.n	80064f2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f3e:	b2db      	uxtb	r3, r3
 8005f40:	2b02      	cmp	r3, #2
 8005f42:	d008      	beq.n	8005f56 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2280      	movs	r2, #128	; 0x80
 8005f48:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	e2cd      	b.n	80064f2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a76      	ldr	r2, [pc, #472]	; (8006134 <HAL_DMA_Abort+0x214>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d04a      	beq.n	8005ff6 <HAL_DMA_Abort+0xd6>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a74      	ldr	r2, [pc, #464]	; (8006138 <HAL_DMA_Abort+0x218>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d045      	beq.n	8005ff6 <HAL_DMA_Abort+0xd6>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a73      	ldr	r2, [pc, #460]	; (800613c <HAL_DMA_Abort+0x21c>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d040      	beq.n	8005ff6 <HAL_DMA_Abort+0xd6>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a71      	ldr	r2, [pc, #452]	; (8006140 <HAL_DMA_Abort+0x220>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d03b      	beq.n	8005ff6 <HAL_DMA_Abort+0xd6>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a70      	ldr	r2, [pc, #448]	; (8006144 <HAL_DMA_Abort+0x224>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d036      	beq.n	8005ff6 <HAL_DMA_Abort+0xd6>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a6e      	ldr	r2, [pc, #440]	; (8006148 <HAL_DMA_Abort+0x228>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d031      	beq.n	8005ff6 <HAL_DMA_Abort+0xd6>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a6d      	ldr	r2, [pc, #436]	; (800614c <HAL_DMA_Abort+0x22c>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d02c      	beq.n	8005ff6 <HAL_DMA_Abort+0xd6>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a6b      	ldr	r2, [pc, #428]	; (8006150 <HAL_DMA_Abort+0x230>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d027      	beq.n	8005ff6 <HAL_DMA_Abort+0xd6>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a6a      	ldr	r2, [pc, #424]	; (8006154 <HAL_DMA_Abort+0x234>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d022      	beq.n	8005ff6 <HAL_DMA_Abort+0xd6>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a68      	ldr	r2, [pc, #416]	; (8006158 <HAL_DMA_Abort+0x238>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d01d      	beq.n	8005ff6 <HAL_DMA_Abort+0xd6>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a67      	ldr	r2, [pc, #412]	; (800615c <HAL_DMA_Abort+0x23c>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d018      	beq.n	8005ff6 <HAL_DMA_Abort+0xd6>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a65      	ldr	r2, [pc, #404]	; (8006160 <HAL_DMA_Abort+0x240>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d013      	beq.n	8005ff6 <HAL_DMA_Abort+0xd6>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a64      	ldr	r2, [pc, #400]	; (8006164 <HAL_DMA_Abort+0x244>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d00e      	beq.n	8005ff6 <HAL_DMA_Abort+0xd6>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a62      	ldr	r2, [pc, #392]	; (8006168 <HAL_DMA_Abort+0x248>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d009      	beq.n	8005ff6 <HAL_DMA_Abort+0xd6>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a61      	ldr	r2, [pc, #388]	; (800616c <HAL_DMA_Abort+0x24c>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d004      	beq.n	8005ff6 <HAL_DMA_Abort+0xd6>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a5f      	ldr	r2, [pc, #380]	; (8006170 <HAL_DMA_Abort+0x250>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d101      	bne.n	8005ffa <HAL_DMA_Abort+0xda>
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e000      	b.n	8005ffc <HAL_DMA_Abort+0xdc>
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d013      	beq.n	8006028 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f022 021e 	bic.w	r2, r2, #30
 800600e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	695a      	ldr	r2, [r3, #20]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800601e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	617b      	str	r3, [r7, #20]
 8006026:	e00a      	b.n	800603e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f022 020e 	bic.w	r2, r2, #14
 8006036:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a3c      	ldr	r2, [pc, #240]	; (8006134 <HAL_DMA_Abort+0x214>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d072      	beq.n	800612e <HAL_DMA_Abort+0x20e>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a3a      	ldr	r2, [pc, #232]	; (8006138 <HAL_DMA_Abort+0x218>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d06d      	beq.n	800612e <HAL_DMA_Abort+0x20e>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a39      	ldr	r2, [pc, #228]	; (800613c <HAL_DMA_Abort+0x21c>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d068      	beq.n	800612e <HAL_DMA_Abort+0x20e>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a37      	ldr	r2, [pc, #220]	; (8006140 <HAL_DMA_Abort+0x220>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d063      	beq.n	800612e <HAL_DMA_Abort+0x20e>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a36      	ldr	r2, [pc, #216]	; (8006144 <HAL_DMA_Abort+0x224>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d05e      	beq.n	800612e <HAL_DMA_Abort+0x20e>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a34      	ldr	r2, [pc, #208]	; (8006148 <HAL_DMA_Abort+0x228>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d059      	beq.n	800612e <HAL_DMA_Abort+0x20e>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a33      	ldr	r2, [pc, #204]	; (800614c <HAL_DMA_Abort+0x22c>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d054      	beq.n	800612e <HAL_DMA_Abort+0x20e>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a31      	ldr	r2, [pc, #196]	; (8006150 <HAL_DMA_Abort+0x230>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d04f      	beq.n	800612e <HAL_DMA_Abort+0x20e>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a30      	ldr	r2, [pc, #192]	; (8006154 <HAL_DMA_Abort+0x234>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d04a      	beq.n	800612e <HAL_DMA_Abort+0x20e>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a2e      	ldr	r2, [pc, #184]	; (8006158 <HAL_DMA_Abort+0x238>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d045      	beq.n	800612e <HAL_DMA_Abort+0x20e>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a2d      	ldr	r2, [pc, #180]	; (800615c <HAL_DMA_Abort+0x23c>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d040      	beq.n	800612e <HAL_DMA_Abort+0x20e>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a2b      	ldr	r2, [pc, #172]	; (8006160 <HAL_DMA_Abort+0x240>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d03b      	beq.n	800612e <HAL_DMA_Abort+0x20e>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a2a      	ldr	r2, [pc, #168]	; (8006164 <HAL_DMA_Abort+0x244>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d036      	beq.n	800612e <HAL_DMA_Abort+0x20e>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a28      	ldr	r2, [pc, #160]	; (8006168 <HAL_DMA_Abort+0x248>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d031      	beq.n	800612e <HAL_DMA_Abort+0x20e>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a27      	ldr	r2, [pc, #156]	; (800616c <HAL_DMA_Abort+0x24c>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d02c      	beq.n	800612e <HAL_DMA_Abort+0x20e>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a25      	ldr	r2, [pc, #148]	; (8006170 <HAL_DMA_Abort+0x250>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d027      	beq.n	800612e <HAL_DMA_Abort+0x20e>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a24      	ldr	r2, [pc, #144]	; (8006174 <HAL_DMA_Abort+0x254>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d022      	beq.n	800612e <HAL_DMA_Abort+0x20e>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a22      	ldr	r2, [pc, #136]	; (8006178 <HAL_DMA_Abort+0x258>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d01d      	beq.n	800612e <HAL_DMA_Abort+0x20e>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a21      	ldr	r2, [pc, #132]	; (800617c <HAL_DMA_Abort+0x25c>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d018      	beq.n	800612e <HAL_DMA_Abort+0x20e>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a1f      	ldr	r2, [pc, #124]	; (8006180 <HAL_DMA_Abort+0x260>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d013      	beq.n	800612e <HAL_DMA_Abort+0x20e>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a1e      	ldr	r2, [pc, #120]	; (8006184 <HAL_DMA_Abort+0x264>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d00e      	beq.n	800612e <HAL_DMA_Abort+0x20e>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a1c      	ldr	r2, [pc, #112]	; (8006188 <HAL_DMA_Abort+0x268>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d009      	beq.n	800612e <HAL_DMA_Abort+0x20e>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a1b      	ldr	r2, [pc, #108]	; (800618c <HAL_DMA_Abort+0x26c>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d004      	beq.n	800612e <HAL_DMA_Abort+0x20e>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a19      	ldr	r2, [pc, #100]	; (8006190 <HAL_DMA_Abort+0x270>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d132      	bne.n	8006194 <HAL_DMA_Abort+0x274>
 800612e:	2301      	movs	r3, #1
 8006130:	e031      	b.n	8006196 <HAL_DMA_Abort+0x276>
 8006132:	bf00      	nop
 8006134:	40020010 	.word	0x40020010
 8006138:	40020028 	.word	0x40020028
 800613c:	40020040 	.word	0x40020040
 8006140:	40020058 	.word	0x40020058
 8006144:	40020070 	.word	0x40020070
 8006148:	40020088 	.word	0x40020088
 800614c:	400200a0 	.word	0x400200a0
 8006150:	400200b8 	.word	0x400200b8
 8006154:	40020410 	.word	0x40020410
 8006158:	40020428 	.word	0x40020428
 800615c:	40020440 	.word	0x40020440
 8006160:	40020458 	.word	0x40020458
 8006164:	40020470 	.word	0x40020470
 8006168:	40020488 	.word	0x40020488
 800616c:	400204a0 	.word	0x400204a0
 8006170:	400204b8 	.word	0x400204b8
 8006174:	58025408 	.word	0x58025408
 8006178:	5802541c 	.word	0x5802541c
 800617c:	58025430 	.word	0x58025430
 8006180:	58025444 	.word	0x58025444
 8006184:	58025458 	.word	0x58025458
 8006188:	5802546c 	.word	0x5802546c
 800618c:	58025480 	.word	0x58025480
 8006190:	58025494 	.word	0x58025494
 8006194:	2300      	movs	r3, #0
 8006196:	2b00      	cmp	r3, #0
 8006198:	d007      	beq.n	80061aa <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80061a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a6d      	ldr	r2, [pc, #436]	; (8006364 <HAL_DMA_Abort+0x444>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d04a      	beq.n	800624a <HAL_DMA_Abort+0x32a>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a6b      	ldr	r2, [pc, #428]	; (8006368 <HAL_DMA_Abort+0x448>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d045      	beq.n	800624a <HAL_DMA_Abort+0x32a>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a6a      	ldr	r2, [pc, #424]	; (800636c <HAL_DMA_Abort+0x44c>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d040      	beq.n	800624a <HAL_DMA_Abort+0x32a>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a68      	ldr	r2, [pc, #416]	; (8006370 <HAL_DMA_Abort+0x450>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d03b      	beq.n	800624a <HAL_DMA_Abort+0x32a>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a67      	ldr	r2, [pc, #412]	; (8006374 <HAL_DMA_Abort+0x454>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d036      	beq.n	800624a <HAL_DMA_Abort+0x32a>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a65      	ldr	r2, [pc, #404]	; (8006378 <HAL_DMA_Abort+0x458>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d031      	beq.n	800624a <HAL_DMA_Abort+0x32a>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a64      	ldr	r2, [pc, #400]	; (800637c <HAL_DMA_Abort+0x45c>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d02c      	beq.n	800624a <HAL_DMA_Abort+0x32a>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a62      	ldr	r2, [pc, #392]	; (8006380 <HAL_DMA_Abort+0x460>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d027      	beq.n	800624a <HAL_DMA_Abort+0x32a>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a61      	ldr	r2, [pc, #388]	; (8006384 <HAL_DMA_Abort+0x464>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d022      	beq.n	800624a <HAL_DMA_Abort+0x32a>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a5f      	ldr	r2, [pc, #380]	; (8006388 <HAL_DMA_Abort+0x468>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d01d      	beq.n	800624a <HAL_DMA_Abort+0x32a>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a5e      	ldr	r2, [pc, #376]	; (800638c <HAL_DMA_Abort+0x46c>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d018      	beq.n	800624a <HAL_DMA_Abort+0x32a>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a5c      	ldr	r2, [pc, #368]	; (8006390 <HAL_DMA_Abort+0x470>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d013      	beq.n	800624a <HAL_DMA_Abort+0x32a>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a5b      	ldr	r2, [pc, #364]	; (8006394 <HAL_DMA_Abort+0x474>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d00e      	beq.n	800624a <HAL_DMA_Abort+0x32a>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a59      	ldr	r2, [pc, #356]	; (8006398 <HAL_DMA_Abort+0x478>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d009      	beq.n	800624a <HAL_DMA_Abort+0x32a>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a58      	ldr	r2, [pc, #352]	; (800639c <HAL_DMA_Abort+0x47c>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d004      	beq.n	800624a <HAL_DMA_Abort+0x32a>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a56      	ldr	r2, [pc, #344]	; (80063a0 <HAL_DMA_Abort+0x480>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d108      	bne.n	800625c <HAL_DMA_Abort+0x33c>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f022 0201 	bic.w	r2, r2, #1
 8006258:	601a      	str	r2, [r3, #0]
 800625a:	e007      	b.n	800626c <HAL_DMA_Abort+0x34c>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f022 0201 	bic.w	r2, r2, #1
 800626a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800626c:	e013      	b.n	8006296 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800626e:	f7fc ff69 	bl	8003144 <HAL_GetTick>
 8006272:	4602      	mov	r2, r0
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	1ad3      	subs	r3, r2, r3
 8006278:	2b05      	cmp	r3, #5
 800627a:	d90c      	bls.n	8006296 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2220      	movs	r2, #32
 8006280:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2203      	movs	r2, #3
 8006286:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2200      	movs	r2, #0
 800628e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	e12d      	b.n	80064f2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f003 0301 	and.w	r3, r3, #1
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d1e5      	bne.n	800626e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a2f      	ldr	r2, [pc, #188]	; (8006364 <HAL_DMA_Abort+0x444>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d04a      	beq.n	8006342 <HAL_DMA_Abort+0x422>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a2d      	ldr	r2, [pc, #180]	; (8006368 <HAL_DMA_Abort+0x448>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d045      	beq.n	8006342 <HAL_DMA_Abort+0x422>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a2c      	ldr	r2, [pc, #176]	; (800636c <HAL_DMA_Abort+0x44c>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d040      	beq.n	8006342 <HAL_DMA_Abort+0x422>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a2a      	ldr	r2, [pc, #168]	; (8006370 <HAL_DMA_Abort+0x450>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d03b      	beq.n	8006342 <HAL_DMA_Abort+0x422>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a29      	ldr	r2, [pc, #164]	; (8006374 <HAL_DMA_Abort+0x454>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d036      	beq.n	8006342 <HAL_DMA_Abort+0x422>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a27      	ldr	r2, [pc, #156]	; (8006378 <HAL_DMA_Abort+0x458>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d031      	beq.n	8006342 <HAL_DMA_Abort+0x422>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a26      	ldr	r2, [pc, #152]	; (800637c <HAL_DMA_Abort+0x45c>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d02c      	beq.n	8006342 <HAL_DMA_Abort+0x422>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a24      	ldr	r2, [pc, #144]	; (8006380 <HAL_DMA_Abort+0x460>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d027      	beq.n	8006342 <HAL_DMA_Abort+0x422>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a23      	ldr	r2, [pc, #140]	; (8006384 <HAL_DMA_Abort+0x464>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d022      	beq.n	8006342 <HAL_DMA_Abort+0x422>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a21      	ldr	r2, [pc, #132]	; (8006388 <HAL_DMA_Abort+0x468>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d01d      	beq.n	8006342 <HAL_DMA_Abort+0x422>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a20      	ldr	r2, [pc, #128]	; (800638c <HAL_DMA_Abort+0x46c>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d018      	beq.n	8006342 <HAL_DMA_Abort+0x422>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a1e      	ldr	r2, [pc, #120]	; (8006390 <HAL_DMA_Abort+0x470>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d013      	beq.n	8006342 <HAL_DMA_Abort+0x422>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a1d      	ldr	r2, [pc, #116]	; (8006394 <HAL_DMA_Abort+0x474>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d00e      	beq.n	8006342 <HAL_DMA_Abort+0x422>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a1b      	ldr	r2, [pc, #108]	; (8006398 <HAL_DMA_Abort+0x478>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d009      	beq.n	8006342 <HAL_DMA_Abort+0x422>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a1a      	ldr	r2, [pc, #104]	; (800639c <HAL_DMA_Abort+0x47c>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d004      	beq.n	8006342 <HAL_DMA_Abort+0x422>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a18      	ldr	r2, [pc, #96]	; (80063a0 <HAL_DMA_Abort+0x480>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d101      	bne.n	8006346 <HAL_DMA_Abort+0x426>
 8006342:	2301      	movs	r3, #1
 8006344:	e000      	b.n	8006348 <HAL_DMA_Abort+0x428>
 8006346:	2300      	movs	r3, #0
 8006348:	2b00      	cmp	r3, #0
 800634a:	d02b      	beq.n	80063a4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006350:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006356:	f003 031f 	and.w	r3, r3, #31
 800635a:	223f      	movs	r2, #63	; 0x3f
 800635c:	409a      	lsls	r2, r3
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	609a      	str	r2, [r3, #8]
 8006362:	e02a      	b.n	80063ba <HAL_DMA_Abort+0x49a>
 8006364:	40020010 	.word	0x40020010
 8006368:	40020028 	.word	0x40020028
 800636c:	40020040 	.word	0x40020040
 8006370:	40020058 	.word	0x40020058
 8006374:	40020070 	.word	0x40020070
 8006378:	40020088 	.word	0x40020088
 800637c:	400200a0 	.word	0x400200a0
 8006380:	400200b8 	.word	0x400200b8
 8006384:	40020410 	.word	0x40020410
 8006388:	40020428 	.word	0x40020428
 800638c:	40020440 	.word	0x40020440
 8006390:	40020458 	.word	0x40020458
 8006394:	40020470 	.word	0x40020470
 8006398:	40020488 	.word	0x40020488
 800639c:	400204a0 	.word	0x400204a0
 80063a0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063a8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063ae:	f003 031f 	and.w	r3, r3, #31
 80063b2:	2201      	movs	r2, #1
 80063b4:	409a      	lsls	r2, r3
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a4f      	ldr	r2, [pc, #316]	; (80064fc <HAL_DMA_Abort+0x5dc>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d072      	beq.n	80064aa <HAL_DMA_Abort+0x58a>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a4d      	ldr	r2, [pc, #308]	; (8006500 <HAL_DMA_Abort+0x5e0>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d06d      	beq.n	80064aa <HAL_DMA_Abort+0x58a>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a4c      	ldr	r2, [pc, #304]	; (8006504 <HAL_DMA_Abort+0x5e4>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d068      	beq.n	80064aa <HAL_DMA_Abort+0x58a>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a4a      	ldr	r2, [pc, #296]	; (8006508 <HAL_DMA_Abort+0x5e8>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d063      	beq.n	80064aa <HAL_DMA_Abort+0x58a>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a49      	ldr	r2, [pc, #292]	; (800650c <HAL_DMA_Abort+0x5ec>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d05e      	beq.n	80064aa <HAL_DMA_Abort+0x58a>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a47      	ldr	r2, [pc, #284]	; (8006510 <HAL_DMA_Abort+0x5f0>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d059      	beq.n	80064aa <HAL_DMA_Abort+0x58a>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a46      	ldr	r2, [pc, #280]	; (8006514 <HAL_DMA_Abort+0x5f4>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d054      	beq.n	80064aa <HAL_DMA_Abort+0x58a>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a44      	ldr	r2, [pc, #272]	; (8006518 <HAL_DMA_Abort+0x5f8>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d04f      	beq.n	80064aa <HAL_DMA_Abort+0x58a>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a43      	ldr	r2, [pc, #268]	; (800651c <HAL_DMA_Abort+0x5fc>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d04a      	beq.n	80064aa <HAL_DMA_Abort+0x58a>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a41      	ldr	r2, [pc, #260]	; (8006520 <HAL_DMA_Abort+0x600>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d045      	beq.n	80064aa <HAL_DMA_Abort+0x58a>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a40      	ldr	r2, [pc, #256]	; (8006524 <HAL_DMA_Abort+0x604>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d040      	beq.n	80064aa <HAL_DMA_Abort+0x58a>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a3e      	ldr	r2, [pc, #248]	; (8006528 <HAL_DMA_Abort+0x608>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d03b      	beq.n	80064aa <HAL_DMA_Abort+0x58a>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a3d      	ldr	r2, [pc, #244]	; (800652c <HAL_DMA_Abort+0x60c>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d036      	beq.n	80064aa <HAL_DMA_Abort+0x58a>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a3b      	ldr	r2, [pc, #236]	; (8006530 <HAL_DMA_Abort+0x610>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d031      	beq.n	80064aa <HAL_DMA_Abort+0x58a>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a3a      	ldr	r2, [pc, #232]	; (8006534 <HAL_DMA_Abort+0x614>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d02c      	beq.n	80064aa <HAL_DMA_Abort+0x58a>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a38      	ldr	r2, [pc, #224]	; (8006538 <HAL_DMA_Abort+0x618>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d027      	beq.n	80064aa <HAL_DMA_Abort+0x58a>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a37      	ldr	r2, [pc, #220]	; (800653c <HAL_DMA_Abort+0x61c>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d022      	beq.n	80064aa <HAL_DMA_Abort+0x58a>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a35      	ldr	r2, [pc, #212]	; (8006540 <HAL_DMA_Abort+0x620>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d01d      	beq.n	80064aa <HAL_DMA_Abort+0x58a>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a34      	ldr	r2, [pc, #208]	; (8006544 <HAL_DMA_Abort+0x624>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d018      	beq.n	80064aa <HAL_DMA_Abort+0x58a>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a32      	ldr	r2, [pc, #200]	; (8006548 <HAL_DMA_Abort+0x628>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d013      	beq.n	80064aa <HAL_DMA_Abort+0x58a>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a31      	ldr	r2, [pc, #196]	; (800654c <HAL_DMA_Abort+0x62c>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d00e      	beq.n	80064aa <HAL_DMA_Abort+0x58a>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a2f      	ldr	r2, [pc, #188]	; (8006550 <HAL_DMA_Abort+0x630>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d009      	beq.n	80064aa <HAL_DMA_Abort+0x58a>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a2e      	ldr	r2, [pc, #184]	; (8006554 <HAL_DMA_Abort+0x634>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d004      	beq.n	80064aa <HAL_DMA_Abort+0x58a>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a2c      	ldr	r2, [pc, #176]	; (8006558 <HAL_DMA_Abort+0x638>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d101      	bne.n	80064ae <HAL_DMA_Abort+0x58e>
 80064aa:	2301      	movs	r3, #1
 80064ac:	e000      	b.n	80064b0 <HAL_DMA_Abort+0x590>
 80064ae:	2300      	movs	r3, #0
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d015      	beq.n	80064e0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80064bc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d00c      	beq.n	80064e0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80064d4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80064de:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2201      	movs	r2, #1
 80064e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80064f0:	2300      	movs	r3, #0
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3718      	adds	r7, #24
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
 80064fa:	bf00      	nop
 80064fc:	40020010 	.word	0x40020010
 8006500:	40020028 	.word	0x40020028
 8006504:	40020040 	.word	0x40020040
 8006508:	40020058 	.word	0x40020058
 800650c:	40020070 	.word	0x40020070
 8006510:	40020088 	.word	0x40020088
 8006514:	400200a0 	.word	0x400200a0
 8006518:	400200b8 	.word	0x400200b8
 800651c:	40020410 	.word	0x40020410
 8006520:	40020428 	.word	0x40020428
 8006524:	40020440 	.word	0x40020440
 8006528:	40020458 	.word	0x40020458
 800652c:	40020470 	.word	0x40020470
 8006530:	40020488 	.word	0x40020488
 8006534:	400204a0 	.word	0x400204a0
 8006538:	400204b8 	.word	0x400204b8
 800653c:	58025408 	.word	0x58025408
 8006540:	5802541c 	.word	0x5802541c
 8006544:	58025430 	.word	0x58025430
 8006548:	58025444 	.word	0x58025444
 800654c:	58025458 	.word	0x58025458
 8006550:	5802546c 	.word	0x5802546c
 8006554:	58025480 	.word	0x58025480
 8006558:	58025494 	.word	0x58025494

0800655c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b084      	sub	sp, #16
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d101      	bne.n	800656e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	e237      	b.n	80069de <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006574:	b2db      	uxtb	r3, r3
 8006576:	2b02      	cmp	r3, #2
 8006578:	d004      	beq.n	8006584 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2280      	movs	r2, #128	; 0x80
 800657e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	e22c      	b.n	80069de <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a5c      	ldr	r2, [pc, #368]	; (80066fc <HAL_DMA_Abort_IT+0x1a0>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d04a      	beq.n	8006624 <HAL_DMA_Abort_IT+0xc8>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a5b      	ldr	r2, [pc, #364]	; (8006700 <HAL_DMA_Abort_IT+0x1a4>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d045      	beq.n	8006624 <HAL_DMA_Abort_IT+0xc8>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a59      	ldr	r2, [pc, #356]	; (8006704 <HAL_DMA_Abort_IT+0x1a8>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d040      	beq.n	8006624 <HAL_DMA_Abort_IT+0xc8>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a58      	ldr	r2, [pc, #352]	; (8006708 <HAL_DMA_Abort_IT+0x1ac>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d03b      	beq.n	8006624 <HAL_DMA_Abort_IT+0xc8>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a56      	ldr	r2, [pc, #344]	; (800670c <HAL_DMA_Abort_IT+0x1b0>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d036      	beq.n	8006624 <HAL_DMA_Abort_IT+0xc8>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a55      	ldr	r2, [pc, #340]	; (8006710 <HAL_DMA_Abort_IT+0x1b4>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d031      	beq.n	8006624 <HAL_DMA_Abort_IT+0xc8>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a53      	ldr	r2, [pc, #332]	; (8006714 <HAL_DMA_Abort_IT+0x1b8>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d02c      	beq.n	8006624 <HAL_DMA_Abort_IT+0xc8>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a52      	ldr	r2, [pc, #328]	; (8006718 <HAL_DMA_Abort_IT+0x1bc>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d027      	beq.n	8006624 <HAL_DMA_Abort_IT+0xc8>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a50      	ldr	r2, [pc, #320]	; (800671c <HAL_DMA_Abort_IT+0x1c0>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d022      	beq.n	8006624 <HAL_DMA_Abort_IT+0xc8>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a4f      	ldr	r2, [pc, #316]	; (8006720 <HAL_DMA_Abort_IT+0x1c4>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d01d      	beq.n	8006624 <HAL_DMA_Abort_IT+0xc8>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a4d      	ldr	r2, [pc, #308]	; (8006724 <HAL_DMA_Abort_IT+0x1c8>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d018      	beq.n	8006624 <HAL_DMA_Abort_IT+0xc8>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a4c      	ldr	r2, [pc, #304]	; (8006728 <HAL_DMA_Abort_IT+0x1cc>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d013      	beq.n	8006624 <HAL_DMA_Abort_IT+0xc8>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a4a      	ldr	r2, [pc, #296]	; (800672c <HAL_DMA_Abort_IT+0x1d0>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d00e      	beq.n	8006624 <HAL_DMA_Abort_IT+0xc8>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a49      	ldr	r2, [pc, #292]	; (8006730 <HAL_DMA_Abort_IT+0x1d4>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d009      	beq.n	8006624 <HAL_DMA_Abort_IT+0xc8>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a47      	ldr	r2, [pc, #284]	; (8006734 <HAL_DMA_Abort_IT+0x1d8>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d004      	beq.n	8006624 <HAL_DMA_Abort_IT+0xc8>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a46      	ldr	r2, [pc, #280]	; (8006738 <HAL_DMA_Abort_IT+0x1dc>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d101      	bne.n	8006628 <HAL_DMA_Abort_IT+0xcc>
 8006624:	2301      	movs	r3, #1
 8006626:	e000      	b.n	800662a <HAL_DMA_Abort_IT+0xce>
 8006628:	2300      	movs	r3, #0
 800662a:	2b00      	cmp	r3, #0
 800662c:	f000 8086 	beq.w	800673c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2204      	movs	r2, #4
 8006634:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a2f      	ldr	r2, [pc, #188]	; (80066fc <HAL_DMA_Abort_IT+0x1a0>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d04a      	beq.n	80066d8 <HAL_DMA_Abort_IT+0x17c>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a2e      	ldr	r2, [pc, #184]	; (8006700 <HAL_DMA_Abort_IT+0x1a4>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d045      	beq.n	80066d8 <HAL_DMA_Abort_IT+0x17c>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a2c      	ldr	r2, [pc, #176]	; (8006704 <HAL_DMA_Abort_IT+0x1a8>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d040      	beq.n	80066d8 <HAL_DMA_Abort_IT+0x17c>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a2b      	ldr	r2, [pc, #172]	; (8006708 <HAL_DMA_Abort_IT+0x1ac>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d03b      	beq.n	80066d8 <HAL_DMA_Abort_IT+0x17c>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a29      	ldr	r2, [pc, #164]	; (800670c <HAL_DMA_Abort_IT+0x1b0>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d036      	beq.n	80066d8 <HAL_DMA_Abort_IT+0x17c>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a28      	ldr	r2, [pc, #160]	; (8006710 <HAL_DMA_Abort_IT+0x1b4>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d031      	beq.n	80066d8 <HAL_DMA_Abort_IT+0x17c>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a26      	ldr	r2, [pc, #152]	; (8006714 <HAL_DMA_Abort_IT+0x1b8>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d02c      	beq.n	80066d8 <HAL_DMA_Abort_IT+0x17c>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a25      	ldr	r2, [pc, #148]	; (8006718 <HAL_DMA_Abort_IT+0x1bc>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d027      	beq.n	80066d8 <HAL_DMA_Abort_IT+0x17c>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a23      	ldr	r2, [pc, #140]	; (800671c <HAL_DMA_Abort_IT+0x1c0>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d022      	beq.n	80066d8 <HAL_DMA_Abort_IT+0x17c>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a22      	ldr	r2, [pc, #136]	; (8006720 <HAL_DMA_Abort_IT+0x1c4>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d01d      	beq.n	80066d8 <HAL_DMA_Abort_IT+0x17c>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a20      	ldr	r2, [pc, #128]	; (8006724 <HAL_DMA_Abort_IT+0x1c8>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d018      	beq.n	80066d8 <HAL_DMA_Abort_IT+0x17c>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a1f      	ldr	r2, [pc, #124]	; (8006728 <HAL_DMA_Abort_IT+0x1cc>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d013      	beq.n	80066d8 <HAL_DMA_Abort_IT+0x17c>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a1d      	ldr	r2, [pc, #116]	; (800672c <HAL_DMA_Abort_IT+0x1d0>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d00e      	beq.n	80066d8 <HAL_DMA_Abort_IT+0x17c>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a1c      	ldr	r2, [pc, #112]	; (8006730 <HAL_DMA_Abort_IT+0x1d4>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d009      	beq.n	80066d8 <HAL_DMA_Abort_IT+0x17c>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a1a      	ldr	r2, [pc, #104]	; (8006734 <HAL_DMA_Abort_IT+0x1d8>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d004      	beq.n	80066d8 <HAL_DMA_Abort_IT+0x17c>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a19      	ldr	r2, [pc, #100]	; (8006738 <HAL_DMA_Abort_IT+0x1dc>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d108      	bne.n	80066ea <HAL_DMA_Abort_IT+0x18e>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f022 0201 	bic.w	r2, r2, #1
 80066e6:	601a      	str	r2, [r3, #0]
 80066e8:	e178      	b.n	80069dc <HAL_DMA_Abort_IT+0x480>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f022 0201 	bic.w	r2, r2, #1
 80066f8:	601a      	str	r2, [r3, #0]
 80066fa:	e16f      	b.n	80069dc <HAL_DMA_Abort_IT+0x480>
 80066fc:	40020010 	.word	0x40020010
 8006700:	40020028 	.word	0x40020028
 8006704:	40020040 	.word	0x40020040
 8006708:	40020058 	.word	0x40020058
 800670c:	40020070 	.word	0x40020070
 8006710:	40020088 	.word	0x40020088
 8006714:	400200a0 	.word	0x400200a0
 8006718:	400200b8 	.word	0x400200b8
 800671c:	40020410 	.word	0x40020410
 8006720:	40020428 	.word	0x40020428
 8006724:	40020440 	.word	0x40020440
 8006728:	40020458 	.word	0x40020458
 800672c:	40020470 	.word	0x40020470
 8006730:	40020488 	.word	0x40020488
 8006734:	400204a0 	.word	0x400204a0
 8006738:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	681a      	ldr	r2, [r3, #0]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f022 020e 	bic.w	r2, r2, #14
 800674a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a6c      	ldr	r2, [pc, #432]	; (8006904 <HAL_DMA_Abort_IT+0x3a8>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d04a      	beq.n	80067ec <HAL_DMA_Abort_IT+0x290>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a6b      	ldr	r2, [pc, #428]	; (8006908 <HAL_DMA_Abort_IT+0x3ac>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d045      	beq.n	80067ec <HAL_DMA_Abort_IT+0x290>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a69      	ldr	r2, [pc, #420]	; (800690c <HAL_DMA_Abort_IT+0x3b0>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d040      	beq.n	80067ec <HAL_DMA_Abort_IT+0x290>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a68      	ldr	r2, [pc, #416]	; (8006910 <HAL_DMA_Abort_IT+0x3b4>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d03b      	beq.n	80067ec <HAL_DMA_Abort_IT+0x290>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a66      	ldr	r2, [pc, #408]	; (8006914 <HAL_DMA_Abort_IT+0x3b8>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d036      	beq.n	80067ec <HAL_DMA_Abort_IT+0x290>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a65      	ldr	r2, [pc, #404]	; (8006918 <HAL_DMA_Abort_IT+0x3bc>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d031      	beq.n	80067ec <HAL_DMA_Abort_IT+0x290>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a63      	ldr	r2, [pc, #396]	; (800691c <HAL_DMA_Abort_IT+0x3c0>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d02c      	beq.n	80067ec <HAL_DMA_Abort_IT+0x290>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a62      	ldr	r2, [pc, #392]	; (8006920 <HAL_DMA_Abort_IT+0x3c4>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d027      	beq.n	80067ec <HAL_DMA_Abort_IT+0x290>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a60      	ldr	r2, [pc, #384]	; (8006924 <HAL_DMA_Abort_IT+0x3c8>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d022      	beq.n	80067ec <HAL_DMA_Abort_IT+0x290>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a5f      	ldr	r2, [pc, #380]	; (8006928 <HAL_DMA_Abort_IT+0x3cc>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d01d      	beq.n	80067ec <HAL_DMA_Abort_IT+0x290>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a5d      	ldr	r2, [pc, #372]	; (800692c <HAL_DMA_Abort_IT+0x3d0>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d018      	beq.n	80067ec <HAL_DMA_Abort_IT+0x290>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a5c      	ldr	r2, [pc, #368]	; (8006930 <HAL_DMA_Abort_IT+0x3d4>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d013      	beq.n	80067ec <HAL_DMA_Abort_IT+0x290>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a5a      	ldr	r2, [pc, #360]	; (8006934 <HAL_DMA_Abort_IT+0x3d8>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d00e      	beq.n	80067ec <HAL_DMA_Abort_IT+0x290>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a59      	ldr	r2, [pc, #356]	; (8006938 <HAL_DMA_Abort_IT+0x3dc>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d009      	beq.n	80067ec <HAL_DMA_Abort_IT+0x290>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a57      	ldr	r2, [pc, #348]	; (800693c <HAL_DMA_Abort_IT+0x3e0>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d004      	beq.n	80067ec <HAL_DMA_Abort_IT+0x290>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a56      	ldr	r2, [pc, #344]	; (8006940 <HAL_DMA_Abort_IT+0x3e4>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d108      	bne.n	80067fe <HAL_DMA_Abort_IT+0x2a2>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f022 0201 	bic.w	r2, r2, #1
 80067fa:	601a      	str	r2, [r3, #0]
 80067fc:	e007      	b.n	800680e <HAL_DMA_Abort_IT+0x2b2>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	681a      	ldr	r2, [r3, #0]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f022 0201 	bic.w	r2, r2, #1
 800680c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a3c      	ldr	r2, [pc, #240]	; (8006904 <HAL_DMA_Abort_IT+0x3a8>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d072      	beq.n	80068fe <HAL_DMA_Abort_IT+0x3a2>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a3a      	ldr	r2, [pc, #232]	; (8006908 <HAL_DMA_Abort_IT+0x3ac>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d06d      	beq.n	80068fe <HAL_DMA_Abort_IT+0x3a2>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a39      	ldr	r2, [pc, #228]	; (800690c <HAL_DMA_Abort_IT+0x3b0>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d068      	beq.n	80068fe <HAL_DMA_Abort_IT+0x3a2>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a37      	ldr	r2, [pc, #220]	; (8006910 <HAL_DMA_Abort_IT+0x3b4>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d063      	beq.n	80068fe <HAL_DMA_Abort_IT+0x3a2>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a36      	ldr	r2, [pc, #216]	; (8006914 <HAL_DMA_Abort_IT+0x3b8>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d05e      	beq.n	80068fe <HAL_DMA_Abort_IT+0x3a2>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a34      	ldr	r2, [pc, #208]	; (8006918 <HAL_DMA_Abort_IT+0x3bc>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d059      	beq.n	80068fe <HAL_DMA_Abort_IT+0x3a2>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a33      	ldr	r2, [pc, #204]	; (800691c <HAL_DMA_Abort_IT+0x3c0>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d054      	beq.n	80068fe <HAL_DMA_Abort_IT+0x3a2>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a31      	ldr	r2, [pc, #196]	; (8006920 <HAL_DMA_Abort_IT+0x3c4>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d04f      	beq.n	80068fe <HAL_DMA_Abort_IT+0x3a2>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a30      	ldr	r2, [pc, #192]	; (8006924 <HAL_DMA_Abort_IT+0x3c8>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d04a      	beq.n	80068fe <HAL_DMA_Abort_IT+0x3a2>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a2e      	ldr	r2, [pc, #184]	; (8006928 <HAL_DMA_Abort_IT+0x3cc>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d045      	beq.n	80068fe <HAL_DMA_Abort_IT+0x3a2>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a2d      	ldr	r2, [pc, #180]	; (800692c <HAL_DMA_Abort_IT+0x3d0>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d040      	beq.n	80068fe <HAL_DMA_Abort_IT+0x3a2>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a2b      	ldr	r2, [pc, #172]	; (8006930 <HAL_DMA_Abort_IT+0x3d4>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d03b      	beq.n	80068fe <HAL_DMA_Abort_IT+0x3a2>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a2a      	ldr	r2, [pc, #168]	; (8006934 <HAL_DMA_Abort_IT+0x3d8>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d036      	beq.n	80068fe <HAL_DMA_Abort_IT+0x3a2>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a28      	ldr	r2, [pc, #160]	; (8006938 <HAL_DMA_Abort_IT+0x3dc>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d031      	beq.n	80068fe <HAL_DMA_Abort_IT+0x3a2>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a27      	ldr	r2, [pc, #156]	; (800693c <HAL_DMA_Abort_IT+0x3e0>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d02c      	beq.n	80068fe <HAL_DMA_Abort_IT+0x3a2>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a25      	ldr	r2, [pc, #148]	; (8006940 <HAL_DMA_Abort_IT+0x3e4>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d027      	beq.n	80068fe <HAL_DMA_Abort_IT+0x3a2>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a24      	ldr	r2, [pc, #144]	; (8006944 <HAL_DMA_Abort_IT+0x3e8>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d022      	beq.n	80068fe <HAL_DMA_Abort_IT+0x3a2>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a22      	ldr	r2, [pc, #136]	; (8006948 <HAL_DMA_Abort_IT+0x3ec>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d01d      	beq.n	80068fe <HAL_DMA_Abort_IT+0x3a2>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a21      	ldr	r2, [pc, #132]	; (800694c <HAL_DMA_Abort_IT+0x3f0>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d018      	beq.n	80068fe <HAL_DMA_Abort_IT+0x3a2>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a1f      	ldr	r2, [pc, #124]	; (8006950 <HAL_DMA_Abort_IT+0x3f4>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d013      	beq.n	80068fe <HAL_DMA_Abort_IT+0x3a2>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a1e      	ldr	r2, [pc, #120]	; (8006954 <HAL_DMA_Abort_IT+0x3f8>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d00e      	beq.n	80068fe <HAL_DMA_Abort_IT+0x3a2>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a1c      	ldr	r2, [pc, #112]	; (8006958 <HAL_DMA_Abort_IT+0x3fc>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d009      	beq.n	80068fe <HAL_DMA_Abort_IT+0x3a2>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a1b      	ldr	r2, [pc, #108]	; (800695c <HAL_DMA_Abort_IT+0x400>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d004      	beq.n	80068fe <HAL_DMA_Abort_IT+0x3a2>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a19      	ldr	r2, [pc, #100]	; (8006960 <HAL_DMA_Abort_IT+0x404>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d132      	bne.n	8006964 <HAL_DMA_Abort_IT+0x408>
 80068fe:	2301      	movs	r3, #1
 8006900:	e031      	b.n	8006966 <HAL_DMA_Abort_IT+0x40a>
 8006902:	bf00      	nop
 8006904:	40020010 	.word	0x40020010
 8006908:	40020028 	.word	0x40020028
 800690c:	40020040 	.word	0x40020040
 8006910:	40020058 	.word	0x40020058
 8006914:	40020070 	.word	0x40020070
 8006918:	40020088 	.word	0x40020088
 800691c:	400200a0 	.word	0x400200a0
 8006920:	400200b8 	.word	0x400200b8
 8006924:	40020410 	.word	0x40020410
 8006928:	40020428 	.word	0x40020428
 800692c:	40020440 	.word	0x40020440
 8006930:	40020458 	.word	0x40020458
 8006934:	40020470 	.word	0x40020470
 8006938:	40020488 	.word	0x40020488
 800693c:	400204a0 	.word	0x400204a0
 8006940:	400204b8 	.word	0x400204b8
 8006944:	58025408 	.word	0x58025408
 8006948:	5802541c 	.word	0x5802541c
 800694c:	58025430 	.word	0x58025430
 8006950:	58025444 	.word	0x58025444
 8006954:	58025458 	.word	0x58025458
 8006958:	5802546c 	.word	0x5802546c
 800695c:	58025480 	.word	0x58025480
 8006960:	58025494 	.word	0x58025494
 8006964:	2300      	movs	r3, #0
 8006966:	2b00      	cmp	r3, #0
 8006968:	d028      	beq.n	80069bc <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006974:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006978:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800697e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006984:	f003 031f 	and.w	r3, r3, #31
 8006988:	2201      	movs	r2, #1
 800698a:	409a      	lsls	r2, r3
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006994:	687a      	ldr	r2, [r7, #4]
 8006996:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006998:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d00c      	beq.n	80069bc <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069a6:	681a      	ldr	r2, [r3, #0]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80069b0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80069ba:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2201      	movs	r2, #1
 80069c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2200      	movs	r2, #0
 80069c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d003      	beq.n	80069dc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80069dc:	2300      	movs	r3, #0
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3710      	adds	r7, #16
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}
 80069e6:	bf00      	nop

080069e8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b08a      	sub	sp, #40	; 0x28
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80069f0:	2300      	movs	r3, #0
 80069f2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80069f4:	4b67      	ldr	r3, [pc, #412]	; (8006b94 <HAL_DMA_IRQHandler+0x1ac>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a67      	ldr	r2, [pc, #412]	; (8006b98 <HAL_DMA_IRQHandler+0x1b0>)
 80069fa:	fba2 2303 	umull	r2, r3, r2, r3
 80069fe:	0a9b      	lsrs	r3, r3, #10
 8006a00:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a06:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a0c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006a0e:	6a3b      	ldr	r3, [r7, #32]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006a14:	69fb      	ldr	r3, [r7, #28]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a5f      	ldr	r2, [pc, #380]	; (8006b9c <HAL_DMA_IRQHandler+0x1b4>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d04a      	beq.n	8006aba <HAL_DMA_IRQHandler+0xd2>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a5d      	ldr	r2, [pc, #372]	; (8006ba0 <HAL_DMA_IRQHandler+0x1b8>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d045      	beq.n	8006aba <HAL_DMA_IRQHandler+0xd2>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a5c      	ldr	r2, [pc, #368]	; (8006ba4 <HAL_DMA_IRQHandler+0x1bc>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d040      	beq.n	8006aba <HAL_DMA_IRQHandler+0xd2>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a5a      	ldr	r2, [pc, #360]	; (8006ba8 <HAL_DMA_IRQHandler+0x1c0>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d03b      	beq.n	8006aba <HAL_DMA_IRQHandler+0xd2>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a59      	ldr	r2, [pc, #356]	; (8006bac <HAL_DMA_IRQHandler+0x1c4>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d036      	beq.n	8006aba <HAL_DMA_IRQHandler+0xd2>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a57      	ldr	r2, [pc, #348]	; (8006bb0 <HAL_DMA_IRQHandler+0x1c8>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d031      	beq.n	8006aba <HAL_DMA_IRQHandler+0xd2>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a56      	ldr	r2, [pc, #344]	; (8006bb4 <HAL_DMA_IRQHandler+0x1cc>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d02c      	beq.n	8006aba <HAL_DMA_IRQHandler+0xd2>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a54      	ldr	r2, [pc, #336]	; (8006bb8 <HAL_DMA_IRQHandler+0x1d0>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d027      	beq.n	8006aba <HAL_DMA_IRQHandler+0xd2>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a53      	ldr	r2, [pc, #332]	; (8006bbc <HAL_DMA_IRQHandler+0x1d4>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d022      	beq.n	8006aba <HAL_DMA_IRQHandler+0xd2>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a51      	ldr	r2, [pc, #324]	; (8006bc0 <HAL_DMA_IRQHandler+0x1d8>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d01d      	beq.n	8006aba <HAL_DMA_IRQHandler+0xd2>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a50      	ldr	r2, [pc, #320]	; (8006bc4 <HAL_DMA_IRQHandler+0x1dc>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d018      	beq.n	8006aba <HAL_DMA_IRQHandler+0xd2>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a4e      	ldr	r2, [pc, #312]	; (8006bc8 <HAL_DMA_IRQHandler+0x1e0>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d013      	beq.n	8006aba <HAL_DMA_IRQHandler+0xd2>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a4d      	ldr	r2, [pc, #308]	; (8006bcc <HAL_DMA_IRQHandler+0x1e4>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d00e      	beq.n	8006aba <HAL_DMA_IRQHandler+0xd2>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a4b      	ldr	r2, [pc, #300]	; (8006bd0 <HAL_DMA_IRQHandler+0x1e8>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d009      	beq.n	8006aba <HAL_DMA_IRQHandler+0xd2>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a4a      	ldr	r2, [pc, #296]	; (8006bd4 <HAL_DMA_IRQHandler+0x1ec>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d004      	beq.n	8006aba <HAL_DMA_IRQHandler+0xd2>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a48      	ldr	r2, [pc, #288]	; (8006bd8 <HAL_DMA_IRQHandler+0x1f0>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d101      	bne.n	8006abe <HAL_DMA_IRQHandler+0xd6>
 8006aba:	2301      	movs	r3, #1
 8006abc:	e000      	b.n	8006ac0 <HAL_DMA_IRQHandler+0xd8>
 8006abe:	2300      	movs	r3, #0
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	f000 842b 	beq.w	800731c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006aca:	f003 031f 	and.w	r3, r3, #31
 8006ace:	2208      	movs	r2, #8
 8006ad0:	409a      	lsls	r2, r3
 8006ad2:	69bb      	ldr	r3, [r7, #24]
 8006ad4:	4013      	ands	r3, r2
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	f000 80a2 	beq.w	8006c20 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a2e      	ldr	r2, [pc, #184]	; (8006b9c <HAL_DMA_IRQHandler+0x1b4>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d04a      	beq.n	8006b7c <HAL_DMA_IRQHandler+0x194>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a2d      	ldr	r2, [pc, #180]	; (8006ba0 <HAL_DMA_IRQHandler+0x1b8>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d045      	beq.n	8006b7c <HAL_DMA_IRQHandler+0x194>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a2b      	ldr	r2, [pc, #172]	; (8006ba4 <HAL_DMA_IRQHandler+0x1bc>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d040      	beq.n	8006b7c <HAL_DMA_IRQHandler+0x194>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a2a      	ldr	r2, [pc, #168]	; (8006ba8 <HAL_DMA_IRQHandler+0x1c0>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d03b      	beq.n	8006b7c <HAL_DMA_IRQHandler+0x194>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a28      	ldr	r2, [pc, #160]	; (8006bac <HAL_DMA_IRQHandler+0x1c4>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d036      	beq.n	8006b7c <HAL_DMA_IRQHandler+0x194>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a27      	ldr	r2, [pc, #156]	; (8006bb0 <HAL_DMA_IRQHandler+0x1c8>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d031      	beq.n	8006b7c <HAL_DMA_IRQHandler+0x194>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a25      	ldr	r2, [pc, #148]	; (8006bb4 <HAL_DMA_IRQHandler+0x1cc>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d02c      	beq.n	8006b7c <HAL_DMA_IRQHandler+0x194>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a24      	ldr	r2, [pc, #144]	; (8006bb8 <HAL_DMA_IRQHandler+0x1d0>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d027      	beq.n	8006b7c <HAL_DMA_IRQHandler+0x194>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a22      	ldr	r2, [pc, #136]	; (8006bbc <HAL_DMA_IRQHandler+0x1d4>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d022      	beq.n	8006b7c <HAL_DMA_IRQHandler+0x194>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a21      	ldr	r2, [pc, #132]	; (8006bc0 <HAL_DMA_IRQHandler+0x1d8>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d01d      	beq.n	8006b7c <HAL_DMA_IRQHandler+0x194>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a1f      	ldr	r2, [pc, #124]	; (8006bc4 <HAL_DMA_IRQHandler+0x1dc>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d018      	beq.n	8006b7c <HAL_DMA_IRQHandler+0x194>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a1e      	ldr	r2, [pc, #120]	; (8006bc8 <HAL_DMA_IRQHandler+0x1e0>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d013      	beq.n	8006b7c <HAL_DMA_IRQHandler+0x194>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a1c      	ldr	r2, [pc, #112]	; (8006bcc <HAL_DMA_IRQHandler+0x1e4>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d00e      	beq.n	8006b7c <HAL_DMA_IRQHandler+0x194>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a1b      	ldr	r2, [pc, #108]	; (8006bd0 <HAL_DMA_IRQHandler+0x1e8>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d009      	beq.n	8006b7c <HAL_DMA_IRQHandler+0x194>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a19      	ldr	r2, [pc, #100]	; (8006bd4 <HAL_DMA_IRQHandler+0x1ec>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d004      	beq.n	8006b7c <HAL_DMA_IRQHandler+0x194>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a18      	ldr	r2, [pc, #96]	; (8006bd8 <HAL_DMA_IRQHandler+0x1f0>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d12f      	bne.n	8006bdc <HAL_DMA_IRQHandler+0x1f4>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f003 0304 	and.w	r3, r3, #4
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	bf14      	ite	ne
 8006b8a:	2301      	movne	r3, #1
 8006b8c:	2300      	moveq	r3, #0
 8006b8e:	b2db      	uxtb	r3, r3
 8006b90:	e02e      	b.n	8006bf0 <HAL_DMA_IRQHandler+0x208>
 8006b92:	bf00      	nop
 8006b94:	24000088 	.word	0x24000088
 8006b98:	1b4e81b5 	.word	0x1b4e81b5
 8006b9c:	40020010 	.word	0x40020010
 8006ba0:	40020028 	.word	0x40020028
 8006ba4:	40020040 	.word	0x40020040
 8006ba8:	40020058 	.word	0x40020058
 8006bac:	40020070 	.word	0x40020070
 8006bb0:	40020088 	.word	0x40020088
 8006bb4:	400200a0 	.word	0x400200a0
 8006bb8:	400200b8 	.word	0x400200b8
 8006bbc:	40020410 	.word	0x40020410
 8006bc0:	40020428 	.word	0x40020428
 8006bc4:	40020440 	.word	0x40020440
 8006bc8:	40020458 	.word	0x40020458
 8006bcc:	40020470 	.word	0x40020470
 8006bd0:	40020488 	.word	0x40020488
 8006bd4:	400204a0 	.word	0x400204a0
 8006bd8:	400204b8 	.word	0x400204b8
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f003 0308 	and.w	r3, r3, #8
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	bf14      	ite	ne
 8006bea:	2301      	movne	r3, #1
 8006bec:	2300      	moveq	r3, #0
 8006bee:	b2db      	uxtb	r3, r3
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d015      	beq.n	8006c20 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f022 0204 	bic.w	r2, r2, #4
 8006c02:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c08:	f003 031f 	and.w	r3, r3, #31
 8006c0c:	2208      	movs	r2, #8
 8006c0e:	409a      	lsls	r2, r3
 8006c10:	6a3b      	ldr	r3, [r7, #32]
 8006c12:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c18:	f043 0201 	orr.w	r2, r3, #1
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c24:	f003 031f 	and.w	r3, r3, #31
 8006c28:	69ba      	ldr	r2, [r7, #24]
 8006c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8006c2e:	f003 0301 	and.w	r3, r3, #1
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d06e      	beq.n	8006d14 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a69      	ldr	r2, [pc, #420]	; (8006de0 <HAL_DMA_IRQHandler+0x3f8>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d04a      	beq.n	8006cd6 <HAL_DMA_IRQHandler+0x2ee>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a67      	ldr	r2, [pc, #412]	; (8006de4 <HAL_DMA_IRQHandler+0x3fc>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d045      	beq.n	8006cd6 <HAL_DMA_IRQHandler+0x2ee>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a66      	ldr	r2, [pc, #408]	; (8006de8 <HAL_DMA_IRQHandler+0x400>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d040      	beq.n	8006cd6 <HAL_DMA_IRQHandler+0x2ee>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a64      	ldr	r2, [pc, #400]	; (8006dec <HAL_DMA_IRQHandler+0x404>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d03b      	beq.n	8006cd6 <HAL_DMA_IRQHandler+0x2ee>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a63      	ldr	r2, [pc, #396]	; (8006df0 <HAL_DMA_IRQHandler+0x408>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d036      	beq.n	8006cd6 <HAL_DMA_IRQHandler+0x2ee>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a61      	ldr	r2, [pc, #388]	; (8006df4 <HAL_DMA_IRQHandler+0x40c>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d031      	beq.n	8006cd6 <HAL_DMA_IRQHandler+0x2ee>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a60      	ldr	r2, [pc, #384]	; (8006df8 <HAL_DMA_IRQHandler+0x410>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d02c      	beq.n	8006cd6 <HAL_DMA_IRQHandler+0x2ee>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a5e      	ldr	r2, [pc, #376]	; (8006dfc <HAL_DMA_IRQHandler+0x414>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d027      	beq.n	8006cd6 <HAL_DMA_IRQHandler+0x2ee>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a5d      	ldr	r2, [pc, #372]	; (8006e00 <HAL_DMA_IRQHandler+0x418>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d022      	beq.n	8006cd6 <HAL_DMA_IRQHandler+0x2ee>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a5b      	ldr	r2, [pc, #364]	; (8006e04 <HAL_DMA_IRQHandler+0x41c>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d01d      	beq.n	8006cd6 <HAL_DMA_IRQHandler+0x2ee>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a5a      	ldr	r2, [pc, #360]	; (8006e08 <HAL_DMA_IRQHandler+0x420>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d018      	beq.n	8006cd6 <HAL_DMA_IRQHandler+0x2ee>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a58      	ldr	r2, [pc, #352]	; (8006e0c <HAL_DMA_IRQHandler+0x424>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d013      	beq.n	8006cd6 <HAL_DMA_IRQHandler+0x2ee>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a57      	ldr	r2, [pc, #348]	; (8006e10 <HAL_DMA_IRQHandler+0x428>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d00e      	beq.n	8006cd6 <HAL_DMA_IRQHandler+0x2ee>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a55      	ldr	r2, [pc, #340]	; (8006e14 <HAL_DMA_IRQHandler+0x42c>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d009      	beq.n	8006cd6 <HAL_DMA_IRQHandler+0x2ee>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a54      	ldr	r2, [pc, #336]	; (8006e18 <HAL_DMA_IRQHandler+0x430>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d004      	beq.n	8006cd6 <HAL_DMA_IRQHandler+0x2ee>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a52      	ldr	r2, [pc, #328]	; (8006e1c <HAL_DMA_IRQHandler+0x434>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d10a      	bne.n	8006cec <HAL_DMA_IRQHandler+0x304>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	695b      	ldr	r3, [r3, #20]
 8006cdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	bf14      	ite	ne
 8006ce4:	2301      	movne	r3, #1
 8006ce6:	2300      	moveq	r3, #0
 8006ce8:	b2db      	uxtb	r3, r3
 8006cea:	e003      	b.n	8006cf4 <HAL_DMA_IRQHandler+0x30c>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d00d      	beq.n	8006d14 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cfc:	f003 031f 	and.w	r3, r3, #31
 8006d00:	2201      	movs	r2, #1
 8006d02:	409a      	lsls	r2, r3
 8006d04:	6a3b      	ldr	r3, [r7, #32]
 8006d06:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d0c:	f043 0202 	orr.w	r2, r3, #2
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d18:	f003 031f 	and.w	r3, r3, #31
 8006d1c:	2204      	movs	r2, #4
 8006d1e:	409a      	lsls	r2, r3
 8006d20:	69bb      	ldr	r3, [r7, #24]
 8006d22:	4013      	ands	r3, r2
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	f000 808f 	beq.w	8006e48 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a2c      	ldr	r2, [pc, #176]	; (8006de0 <HAL_DMA_IRQHandler+0x3f8>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d04a      	beq.n	8006dca <HAL_DMA_IRQHandler+0x3e2>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a2a      	ldr	r2, [pc, #168]	; (8006de4 <HAL_DMA_IRQHandler+0x3fc>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d045      	beq.n	8006dca <HAL_DMA_IRQHandler+0x3e2>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a29      	ldr	r2, [pc, #164]	; (8006de8 <HAL_DMA_IRQHandler+0x400>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d040      	beq.n	8006dca <HAL_DMA_IRQHandler+0x3e2>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a27      	ldr	r2, [pc, #156]	; (8006dec <HAL_DMA_IRQHandler+0x404>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d03b      	beq.n	8006dca <HAL_DMA_IRQHandler+0x3e2>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a26      	ldr	r2, [pc, #152]	; (8006df0 <HAL_DMA_IRQHandler+0x408>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d036      	beq.n	8006dca <HAL_DMA_IRQHandler+0x3e2>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a24      	ldr	r2, [pc, #144]	; (8006df4 <HAL_DMA_IRQHandler+0x40c>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d031      	beq.n	8006dca <HAL_DMA_IRQHandler+0x3e2>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a23      	ldr	r2, [pc, #140]	; (8006df8 <HAL_DMA_IRQHandler+0x410>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d02c      	beq.n	8006dca <HAL_DMA_IRQHandler+0x3e2>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a21      	ldr	r2, [pc, #132]	; (8006dfc <HAL_DMA_IRQHandler+0x414>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d027      	beq.n	8006dca <HAL_DMA_IRQHandler+0x3e2>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a20      	ldr	r2, [pc, #128]	; (8006e00 <HAL_DMA_IRQHandler+0x418>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d022      	beq.n	8006dca <HAL_DMA_IRQHandler+0x3e2>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a1e      	ldr	r2, [pc, #120]	; (8006e04 <HAL_DMA_IRQHandler+0x41c>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d01d      	beq.n	8006dca <HAL_DMA_IRQHandler+0x3e2>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a1d      	ldr	r2, [pc, #116]	; (8006e08 <HAL_DMA_IRQHandler+0x420>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d018      	beq.n	8006dca <HAL_DMA_IRQHandler+0x3e2>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a1b      	ldr	r2, [pc, #108]	; (8006e0c <HAL_DMA_IRQHandler+0x424>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d013      	beq.n	8006dca <HAL_DMA_IRQHandler+0x3e2>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a1a      	ldr	r2, [pc, #104]	; (8006e10 <HAL_DMA_IRQHandler+0x428>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d00e      	beq.n	8006dca <HAL_DMA_IRQHandler+0x3e2>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a18      	ldr	r2, [pc, #96]	; (8006e14 <HAL_DMA_IRQHandler+0x42c>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d009      	beq.n	8006dca <HAL_DMA_IRQHandler+0x3e2>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a17      	ldr	r2, [pc, #92]	; (8006e18 <HAL_DMA_IRQHandler+0x430>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d004      	beq.n	8006dca <HAL_DMA_IRQHandler+0x3e2>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a15      	ldr	r2, [pc, #84]	; (8006e1c <HAL_DMA_IRQHandler+0x434>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d12a      	bne.n	8006e20 <HAL_DMA_IRQHandler+0x438>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f003 0302 	and.w	r3, r3, #2
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	bf14      	ite	ne
 8006dd8:	2301      	movne	r3, #1
 8006dda:	2300      	moveq	r3, #0
 8006ddc:	b2db      	uxtb	r3, r3
 8006dde:	e023      	b.n	8006e28 <HAL_DMA_IRQHandler+0x440>
 8006de0:	40020010 	.word	0x40020010
 8006de4:	40020028 	.word	0x40020028
 8006de8:	40020040 	.word	0x40020040
 8006dec:	40020058 	.word	0x40020058
 8006df0:	40020070 	.word	0x40020070
 8006df4:	40020088 	.word	0x40020088
 8006df8:	400200a0 	.word	0x400200a0
 8006dfc:	400200b8 	.word	0x400200b8
 8006e00:	40020410 	.word	0x40020410
 8006e04:	40020428 	.word	0x40020428
 8006e08:	40020440 	.word	0x40020440
 8006e0c:	40020458 	.word	0x40020458
 8006e10:	40020470 	.word	0x40020470
 8006e14:	40020488 	.word	0x40020488
 8006e18:	400204a0 	.word	0x400204a0
 8006e1c:	400204b8 	.word	0x400204b8
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	2300      	movs	r3, #0
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d00d      	beq.n	8006e48 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e30:	f003 031f 	and.w	r3, r3, #31
 8006e34:	2204      	movs	r2, #4
 8006e36:	409a      	lsls	r2, r3
 8006e38:	6a3b      	ldr	r3, [r7, #32]
 8006e3a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e40:	f043 0204 	orr.w	r2, r3, #4
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e4c:	f003 031f 	and.w	r3, r3, #31
 8006e50:	2210      	movs	r2, #16
 8006e52:	409a      	lsls	r2, r3
 8006e54:	69bb      	ldr	r3, [r7, #24]
 8006e56:	4013      	ands	r3, r2
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	f000 80a6 	beq.w	8006faa <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a85      	ldr	r2, [pc, #532]	; (8007078 <HAL_DMA_IRQHandler+0x690>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d04a      	beq.n	8006efe <HAL_DMA_IRQHandler+0x516>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a83      	ldr	r2, [pc, #524]	; (800707c <HAL_DMA_IRQHandler+0x694>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d045      	beq.n	8006efe <HAL_DMA_IRQHandler+0x516>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a82      	ldr	r2, [pc, #520]	; (8007080 <HAL_DMA_IRQHandler+0x698>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d040      	beq.n	8006efe <HAL_DMA_IRQHandler+0x516>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a80      	ldr	r2, [pc, #512]	; (8007084 <HAL_DMA_IRQHandler+0x69c>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d03b      	beq.n	8006efe <HAL_DMA_IRQHandler+0x516>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a7f      	ldr	r2, [pc, #508]	; (8007088 <HAL_DMA_IRQHandler+0x6a0>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d036      	beq.n	8006efe <HAL_DMA_IRQHandler+0x516>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a7d      	ldr	r2, [pc, #500]	; (800708c <HAL_DMA_IRQHandler+0x6a4>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d031      	beq.n	8006efe <HAL_DMA_IRQHandler+0x516>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a7c      	ldr	r2, [pc, #496]	; (8007090 <HAL_DMA_IRQHandler+0x6a8>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d02c      	beq.n	8006efe <HAL_DMA_IRQHandler+0x516>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a7a      	ldr	r2, [pc, #488]	; (8007094 <HAL_DMA_IRQHandler+0x6ac>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d027      	beq.n	8006efe <HAL_DMA_IRQHandler+0x516>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a79      	ldr	r2, [pc, #484]	; (8007098 <HAL_DMA_IRQHandler+0x6b0>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d022      	beq.n	8006efe <HAL_DMA_IRQHandler+0x516>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a77      	ldr	r2, [pc, #476]	; (800709c <HAL_DMA_IRQHandler+0x6b4>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d01d      	beq.n	8006efe <HAL_DMA_IRQHandler+0x516>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a76      	ldr	r2, [pc, #472]	; (80070a0 <HAL_DMA_IRQHandler+0x6b8>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d018      	beq.n	8006efe <HAL_DMA_IRQHandler+0x516>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a74      	ldr	r2, [pc, #464]	; (80070a4 <HAL_DMA_IRQHandler+0x6bc>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d013      	beq.n	8006efe <HAL_DMA_IRQHandler+0x516>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a73      	ldr	r2, [pc, #460]	; (80070a8 <HAL_DMA_IRQHandler+0x6c0>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d00e      	beq.n	8006efe <HAL_DMA_IRQHandler+0x516>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a71      	ldr	r2, [pc, #452]	; (80070ac <HAL_DMA_IRQHandler+0x6c4>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d009      	beq.n	8006efe <HAL_DMA_IRQHandler+0x516>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a70      	ldr	r2, [pc, #448]	; (80070b0 <HAL_DMA_IRQHandler+0x6c8>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d004      	beq.n	8006efe <HAL_DMA_IRQHandler+0x516>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a6e      	ldr	r2, [pc, #440]	; (80070b4 <HAL_DMA_IRQHandler+0x6cc>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d10a      	bne.n	8006f14 <HAL_DMA_IRQHandler+0x52c>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f003 0308 	and.w	r3, r3, #8
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	bf14      	ite	ne
 8006f0c:	2301      	movne	r3, #1
 8006f0e:	2300      	moveq	r3, #0
 8006f10:	b2db      	uxtb	r3, r3
 8006f12:	e009      	b.n	8006f28 <HAL_DMA_IRQHandler+0x540>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f003 0304 	and.w	r3, r3, #4
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	bf14      	ite	ne
 8006f22:	2301      	movne	r3, #1
 8006f24:	2300      	moveq	r3, #0
 8006f26:	b2db      	uxtb	r3, r3
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d03e      	beq.n	8006faa <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f30:	f003 031f 	and.w	r3, r3, #31
 8006f34:	2210      	movs	r2, #16
 8006f36:	409a      	lsls	r2, r3
 8006f38:	6a3b      	ldr	r3, [r7, #32]
 8006f3a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d018      	beq.n	8006f7c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d108      	bne.n	8006f6a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d024      	beq.n	8006faa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	4798      	blx	r3
 8006f68:	e01f      	b.n	8006faa <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d01b      	beq.n	8006faa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	4798      	blx	r3
 8006f7a:	e016      	b.n	8006faa <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d107      	bne.n	8006f9a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	681a      	ldr	r2, [r3, #0]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f022 0208 	bic.w	r2, r2, #8
 8006f98:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d003      	beq.n	8006faa <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fae:	f003 031f 	and.w	r3, r3, #31
 8006fb2:	2220      	movs	r2, #32
 8006fb4:	409a      	lsls	r2, r3
 8006fb6:	69bb      	ldr	r3, [r7, #24]
 8006fb8:	4013      	ands	r3, r2
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	f000 8110 	beq.w	80071e0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a2c      	ldr	r2, [pc, #176]	; (8007078 <HAL_DMA_IRQHandler+0x690>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d04a      	beq.n	8007060 <HAL_DMA_IRQHandler+0x678>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a2b      	ldr	r2, [pc, #172]	; (800707c <HAL_DMA_IRQHandler+0x694>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d045      	beq.n	8007060 <HAL_DMA_IRQHandler+0x678>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a29      	ldr	r2, [pc, #164]	; (8007080 <HAL_DMA_IRQHandler+0x698>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d040      	beq.n	8007060 <HAL_DMA_IRQHandler+0x678>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a28      	ldr	r2, [pc, #160]	; (8007084 <HAL_DMA_IRQHandler+0x69c>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d03b      	beq.n	8007060 <HAL_DMA_IRQHandler+0x678>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a26      	ldr	r2, [pc, #152]	; (8007088 <HAL_DMA_IRQHandler+0x6a0>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d036      	beq.n	8007060 <HAL_DMA_IRQHandler+0x678>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a25      	ldr	r2, [pc, #148]	; (800708c <HAL_DMA_IRQHandler+0x6a4>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d031      	beq.n	8007060 <HAL_DMA_IRQHandler+0x678>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a23      	ldr	r2, [pc, #140]	; (8007090 <HAL_DMA_IRQHandler+0x6a8>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d02c      	beq.n	8007060 <HAL_DMA_IRQHandler+0x678>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a22      	ldr	r2, [pc, #136]	; (8007094 <HAL_DMA_IRQHandler+0x6ac>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d027      	beq.n	8007060 <HAL_DMA_IRQHandler+0x678>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a20      	ldr	r2, [pc, #128]	; (8007098 <HAL_DMA_IRQHandler+0x6b0>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d022      	beq.n	8007060 <HAL_DMA_IRQHandler+0x678>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a1f      	ldr	r2, [pc, #124]	; (800709c <HAL_DMA_IRQHandler+0x6b4>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d01d      	beq.n	8007060 <HAL_DMA_IRQHandler+0x678>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a1d      	ldr	r2, [pc, #116]	; (80070a0 <HAL_DMA_IRQHandler+0x6b8>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d018      	beq.n	8007060 <HAL_DMA_IRQHandler+0x678>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a1c      	ldr	r2, [pc, #112]	; (80070a4 <HAL_DMA_IRQHandler+0x6bc>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d013      	beq.n	8007060 <HAL_DMA_IRQHandler+0x678>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a1a      	ldr	r2, [pc, #104]	; (80070a8 <HAL_DMA_IRQHandler+0x6c0>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d00e      	beq.n	8007060 <HAL_DMA_IRQHandler+0x678>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a19      	ldr	r2, [pc, #100]	; (80070ac <HAL_DMA_IRQHandler+0x6c4>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d009      	beq.n	8007060 <HAL_DMA_IRQHandler+0x678>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a17      	ldr	r2, [pc, #92]	; (80070b0 <HAL_DMA_IRQHandler+0x6c8>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d004      	beq.n	8007060 <HAL_DMA_IRQHandler+0x678>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a16      	ldr	r2, [pc, #88]	; (80070b4 <HAL_DMA_IRQHandler+0x6cc>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d12b      	bne.n	80070b8 <HAL_DMA_IRQHandler+0x6d0>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f003 0310 	and.w	r3, r3, #16
 800706a:	2b00      	cmp	r3, #0
 800706c:	bf14      	ite	ne
 800706e:	2301      	movne	r3, #1
 8007070:	2300      	moveq	r3, #0
 8007072:	b2db      	uxtb	r3, r3
 8007074:	e02a      	b.n	80070cc <HAL_DMA_IRQHandler+0x6e4>
 8007076:	bf00      	nop
 8007078:	40020010 	.word	0x40020010
 800707c:	40020028 	.word	0x40020028
 8007080:	40020040 	.word	0x40020040
 8007084:	40020058 	.word	0x40020058
 8007088:	40020070 	.word	0x40020070
 800708c:	40020088 	.word	0x40020088
 8007090:	400200a0 	.word	0x400200a0
 8007094:	400200b8 	.word	0x400200b8
 8007098:	40020410 	.word	0x40020410
 800709c:	40020428 	.word	0x40020428
 80070a0:	40020440 	.word	0x40020440
 80070a4:	40020458 	.word	0x40020458
 80070a8:	40020470 	.word	0x40020470
 80070ac:	40020488 	.word	0x40020488
 80070b0:	400204a0 	.word	0x400204a0
 80070b4:	400204b8 	.word	0x400204b8
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f003 0302 	and.w	r3, r3, #2
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	bf14      	ite	ne
 80070c6:	2301      	movne	r3, #1
 80070c8:	2300      	moveq	r3, #0
 80070ca:	b2db      	uxtb	r3, r3
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	f000 8087 	beq.w	80071e0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070d6:	f003 031f 	and.w	r3, r3, #31
 80070da:	2220      	movs	r2, #32
 80070dc:	409a      	lsls	r2, r3
 80070de:	6a3b      	ldr	r3, [r7, #32]
 80070e0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80070e8:	b2db      	uxtb	r3, r3
 80070ea:	2b04      	cmp	r3, #4
 80070ec:	d139      	bne.n	8007162 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	681a      	ldr	r2, [r3, #0]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f022 0216 	bic.w	r2, r2, #22
 80070fc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	695a      	ldr	r2, [r3, #20]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800710c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007112:	2b00      	cmp	r3, #0
 8007114:	d103      	bne.n	800711e <HAL_DMA_IRQHandler+0x736>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800711a:	2b00      	cmp	r3, #0
 800711c:	d007      	beq.n	800712e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	681a      	ldr	r2, [r3, #0]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f022 0208 	bic.w	r2, r2, #8
 800712c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007132:	f003 031f 	and.w	r3, r3, #31
 8007136:	223f      	movs	r2, #63	; 0x3f
 8007138:	409a      	lsls	r2, r3
 800713a:	6a3b      	ldr	r3, [r7, #32]
 800713c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2201      	movs	r2, #1
 8007142:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2200      	movs	r2, #0
 800714a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007152:	2b00      	cmp	r3, #0
 8007154:	f000 834a 	beq.w	80077ec <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	4798      	blx	r3
          }
          return;
 8007160:	e344      	b.n	80077ec <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800716c:	2b00      	cmp	r3, #0
 800716e:	d018      	beq.n	80071a2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800717a:	2b00      	cmp	r3, #0
 800717c:	d108      	bne.n	8007190 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007182:	2b00      	cmp	r3, #0
 8007184:	d02c      	beq.n	80071e0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	4798      	blx	r3
 800718e:	e027      	b.n	80071e0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007194:	2b00      	cmp	r3, #0
 8007196:	d023      	beq.n	80071e0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	4798      	blx	r3
 80071a0:	e01e      	b.n	80071e0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d10f      	bne.n	80071d0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	681a      	ldr	r2, [r3, #0]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f022 0210 	bic.w	r2, r2, #16
 80071be:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2201      	movs	r2, #1
 80071c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2200      	movs	r2, #0
 80071cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d003      	beq.n	80071e0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	f000 8306 	beq.w	80077f6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071ee:	f003 0301 	and.w	r3, r3, #1
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	f000 8088 	beq.w	8007308 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2204      	movs	r2, #4
 80071fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a7a      	ldr	r2, [pc, #488]	; (80073f0 <HAL_DMA_IRQHandler+0xa08>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d04a      	beq.n	80072a0 <HAL_DMA_IRQHandler+0x8b8>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a79      	ldr	r2, [pc, #484]	; (80073f4 <HAL_DMA_IRQHandler+0xa0c>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d045      	beq.n	80072a0 <HAL_DMA_IRQHandler+0x8b8>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a77      	ldr	r2, [pc, #476]	; (80073f8 <HAL_DMA_IRQHandler+0xa10>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d040      	beq.n	80072a0 <HAL_DMA_IRQHandler+0x8b8>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a76      	ldr	r2, [pc, #472]	; (80073fc <HAL_DMA_IRQHandler+0xa14>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d03b      	beq.n	80072a0 <HAL_DMA_IRQHandler+0x8b8>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a74      	ldr	r2, [pc, #464]	; (8007400 <HAL_DMA_IRQHandler+0xa18>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d036      	beq.n	80072a0 <HAL_DMA_IRQHandler+0x8b8>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a73      	ldr	r2, [pc, #460]	; (8007404 <HAL_DMA_IRQHandler+0xa1c>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d031      	beq.n	80072a0 <HAL_DMA_IRQHandler+0x8b8>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a71      	ldr	r2, [pc, #452]	; (8007408 <HAL_DMA_IRQHandler+0xa20>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d02c      	beq.n	80072a0 <HAL_DMA_IRQHandler+0x8b8>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a70      	ldr	r2, [pc, #448]	; (800740c <HAL_DMA_IRQHandler+0xa24>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d027      	beq.n	80072a0 <HAL_DMA_IRQHandler+0x8b8>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a6e      	ldr	r2, [pc, #440]	; (8007410 <HAL_DMA_IRQHandler+0xa28>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d022      	beq.n	80072a0 <HAL_DMA_IRQHandler+0x8b8>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a6d      	ldr	r2, [pc, #436]	; (8007414 <HAL_DMA_IRQHandler+0xa2c>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d01d      	beq.n	80072a0 <HAL_DMA_IRQHandler+0x8b8>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a6b      	ldr	r2, [pc, #428]	; (8007418 <HAL_DMA_IRQHandler+0xa30>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d018      	beq.n	80072a0 <HAL_DMA_IRQHandler+0x8b8>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a6a      	ldr	r2, [pc, #424]	; (800741c <HAL_DMA_IRQHandler+0xa34>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d013      	beq.n	80072a0 <HAL_DMA_IRQHandler+0x8b8>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a68      	ldr	r2, [pc, #416]	; (8007420 <HAL_DMA_IRQHandler+0xa38>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d00e      	beq.n	80072a0 <HAL_DMA_IRQHandler+0x8b8>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a67      	ldr	r2, [pc, #412]	; (8007424 <HAL_DMA_IRQHandler+0xa3c>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d009      	beq.n	80072a0 <HAL_DMA_IRQHandler+0x8b8>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a65      	ldr	r2, [pc, #404]	; (8007428 <HAL_DMA_IRQHandler+0xa40>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d004      	beq.n	80072a0 <HAL_DMA_IRQHandler+0x8b8>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a64      	ldr	r2, [pc, #400]	; (800742c <HAL_DMA_IRQHandler+0xa44>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d108      	bne.n	80072b2 <HAL_DMA_IRQHandler+0x8ca>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	681a      	ldr	r2, [r3, #0]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f022 0201 	bic.w	r2, r2, #1
 80072ae:	601a      	str	r2, [r3, #0]
 80072b0:	e007      	b.n	80072c2 <HAL_DMA_IRQHandler+0x8da>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f022 0201 	bic.w	r2, r2, #1
 80072c0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	3301      	adds	r3, #1
 80072c6:	60fb      	str	r3, [r7, #12]
 80072c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072ca:	429a      	cmp	r2, r3
 80072cc:	d307      	bcc.n	80072de <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f003 0301 	and.w	r3, r3, #1
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d1f2      	bne.n	80072c2 <HAL_DMA_IRQHandler+0x8da>
 80072dc:	e000      	b.n	80072e0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80072de:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f003 0301 	and.w	r3, r3, #1
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d004      	beq.n	80072f8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2203      	movs	r2, #3
 80072f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80072f6:	e003      	b.n	8007300 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2201      	movs	r2, #1
 80072fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2200      	movs	r2, #0
 8007304:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800730c:	2b00      	cmp	r3, #0
 800730e:	f000 8272 	beq.w	80077f6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	4798      	blx	r3
 800731a:	e26c      	b.n	80077f6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a43      	ldr	r2, [pc, #268]	; (8007430 <HAL_DMA_IRQHandler+0xa48>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d022      	beq.n	800736c <HAL_DMA_IRQHandler+0x984>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a42      	ldr	r2, [pc, #264]	; (8007434 <HAL_DMA_IRQHandler+0xa4c>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d01d      	beq.n	800736c <HAL_DMA_IRQHandler+0x984>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a40      	ldr	r2, [pc, #256]	; (8007438 <HAL_DMA_IRQHandler+0xa50>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d018      	beq.n	800736c <HAL_DMA_IRQHandler+0x984>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a3f      	ldr	r2, [pc, #252]	; (800743c <HAL_DMA_IRQHandler+0xa54>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d013      	beq.n	800736c <HAL_DMA_IRQHandler+0x984>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a3d      	ldr	r2, [pc, #244]	; (8007440 <HAL_DMA_IRQHandler+0xa58>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d00e      	beq.n	800736c <HAL_DMA_IRQHandler+0x984>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a3c      	ldr	r2, [pc, #240]	; (8007444 <HAL_DMA_IRQHandler+0xa5c>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d009      	beq.n	800736c <HAL_DMA_IRQHandler+0x984>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a3a      	ldr	r2, [pc, #232]	; (8007448 <HAL_DMA_IRQHandler+0xa60>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d004      	beq.n	800736c <HAL_DMA_IRQHandler+0x984>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a39      	ldr	r2, [pc, #228]	; (800744c <HAL_DMA_IRQHandler+0xa64>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d101      	bne.n	8007370 <HAL_DMA_IRQHandler+0x988>
 800736c:	2301      	movs	r3, #1
 800736e:	e000      	b.n	8007372 <HAL_DMA_IRQHandler+0x98a>
 8007370:	2300      	movs	r3, #0
 8007372:	2b00      	cmp	r3, #0
 8007374:	f000 823f 	beq.w	80077f6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007384:	f003 031f 	and.w	r3, r3, #31
 8007388:	2204      	movs	r2, #4
 800738a:	409a      	lsls	r2, r3
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	4013      	ands	r3, r2
 8007390:	2b00      	cmp	r3, #0
 8007392:	f000 80cd 	beq.w	8007530 <HAL_DMA_IRQHandler+0xb48>
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	f003 0304 	and.w	r3, r3, #4
 800739c:	2b00      	cmp	r3, #0
 800739e:	f000 80c7 	beq.w	8007530 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073a6:	f003 031f 	and.w	r3, r3, #31
 80073aa:	2204      	movs	r2, #4
 80073ac:	409a      	lsls	r2, r3
 80073ae:	69fb      	ldr	r3, [r7, #28]
 80073b0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d049      	beq.n	8007450 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d109      	bne.n	80073da <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	f000 8210 	beq.w	80077f0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80073d8:	e20a      	b.n	80077f0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073de:	2b00      	cmp	r3, #0
 80073e0:	f000 8206 	beq.w	80077f0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80073ec:	e200      	b.n	80077f0 <HAL_DMA_IRQHandler+0xe08>
 80073ee:	bf00      	nop
 80073f0:	40020010 	.word	0x40020010
 80073f4:	40020028 	.word	0x40020028
 80073f8:	40020040 	.word	0x40020040
 80073fc:	40020058 	.word	0x40020058
 8007400:	40020070 	.word	0x40020070
 8007404:	40020088 	.word	0x40020088
 8007408:	400200a0 	.word	0x400200a0
 800740c:	400200b8 	.word	0x400200b8
 8007410:	40020410 	.word	0x40020410
 8007414:	40020428 	.word	0x40020428
 8007418:	40020440 	.word	0x40020440
 800741c:	40020458 	.word	0x40020458
 8007420:	40020470 	.word	0x40020470
 8007424:	40020488 	.word	0x40020488
 8007428:	400204a0 	.word	0x400204a0
 800742c:	400204b8 	.word	0x400204b8
 8007430:	58025408 	.word	0x58025408
 8007434:	5802541c 	.word	0x5802541c
 8007438:	58025430 	.word	0x58025430
 800743c:	58025444 	.word	0x58025444
 8007440:	58025458 	.word	0x58025458
 8007444:	5802546c 	.word	0x5802546c
 8007448:	58025480 	.word	0x58025480
 800744c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	f003 0320 	and.w	r3, r3, #32
 8007456:	2b00      	cmp	r3, #0
 8007458:	d160      	bne.n	800751c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a7f      	ldr	r2, [pc, #508]	; (800765c <HAL_DMA_IRQHandler+0xc74>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d04a      	beq.n	80074fa <HAL_DMA_IRQHandler+0xb12>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a7d      	ldr	r2, [pc, #500]	; (8007660 <HAL_DMA_IRQHandler+0xc78>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d045      	beq.n	80074fa <HAL_DMA_IRQHandler+0xb12>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a7c      	ldr	r2, [pc, #496]	; (8007664 <HAL_DMA_IRQHandler+0xc7c>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d040      	beq.n	80074fa <HAL_DMA_IRQHandler+0xb12>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a7a      	ldr	r2, [pc, #488]	; (8007668 <HAL_DMA_IRQHandler+0xc80>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d03b      	beq.n	80074fa <HAL_DMA_IRQHandler+0xb12>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a79      	ldr	r2, [pc, #484]	; (800766c <HAL_DMA_IRQHandler+0xc84>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d036      	beq.n	80074fa <HAL_DMA_IRQHandler+0xb12>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a77      	ldr	r2, [pc, #476]	; (8007670 <HAL_DMA_IRQHandler+0xc88>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d031      	beq.n	80074fa <HAL_DMA_IRQHandler+0xb12>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a76      	ldr	r2, [pc, #472]	; (8007674 <HAL_DMA_IRQHandler+0xc8c>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d02c      	beq.n	80074fa <HAL_DMA_IRQHandler+0xb12>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a74      	ldr	r2, [pc, #464]	; (8007678 <HAL_DMA_IRQHandler+0xc90>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d027      	beq.n	80074fa <HAL_DMA_IRQHandler+0xb12>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a73      	ldr	r2, [pc, #460]	; (800767c <HAL_DMA_IRQHandler+0xc94>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d022      	beq.n	80074fa <HAL_DMA_IRQHandler+0xb12>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a71      	ldr	r2, [pc, #452]	; (8007680 <HAL_DMA_IRQHandler+0xc98>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d01d      	beq.n	80074fa <HAL_DMA_IRQHandler+0xb12>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a70      	ldr	r2, [pc, #448]	; (8007684 <HAL_DMA_IRQHandler+0xc9c>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d018      	beq.n	80074fa <HAL_DMA_IRQHandler+0xb12>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a6e      	ldr	r2, [pc, #440]	; (8007688 <HAL_DMA_IRQHandler+0xca0>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d013      	beq.n	80074fa <HAL_DMA_IRQHandler+0xb12>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a6d      	ldr	r2, [pc, #436]	; (800768c <HAL_DMA_IRQHandler+0xca4>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d00e      	beq.n	80074fa <HAL_DMA_IRQHandler+0xb12>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a6b      	ldr	r2, [pc, #428]	; (8007690 <HAL_DMA_IRQHandler+0xca8>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d009      	beq.n	80074fa <HAL_DMA_IRQHandler+0xb12>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a6a      	ldr	r2, [pc, #424]	; (8007694 <HAL_DMA_IRQHandler+0xcac>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d004      	beq.n	80074fa <HAL_DMA_IRQHandler+0xb12>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a68      	ldr	r2, [pc, #416]	; (8007698 <HAL_DMA_IRQHandler+0xcb0>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d108      	bne.n	800750c <HAL_DMA_IRQHandler+0xb24>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	681a      	ldr	r2, [r3, #0]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f022 0208 	bic.w	r2, r2, #8
 8007508:	601a      	str	r2, [r3, #0]
 800750a:	e007      	b.n	800751c <HAL_DMA_IRQHandler+0xb34>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	681a      	ldr	r2, [r3, #0]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f022 0204 	bic.w	r2, r2, #4
 800751a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007520:	2b00      	cmp	r3, #0
 8007522:	f000 8165 	beq.w	80077f0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800752e:	e15f      	b.n	80077f0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007534:	f003 031f 	and.w	r3, r3, #31
 8007538:	2202      	movs	r2, #2
 800753a:	409a      	lsls	r2, r3
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	4013      	ands	r3, r2
 8007540:	2b00      	cmp	r3, #0
 8007542:	f000 80c5 	beq.w	80076d0 <HAL_DMA_IRQHandler+0xce8>
 8007546:	693b      	ldr	r3, [r7, #16]
 8007548:	f003 0302 	and.w	r3, r3, #2
 800754c:	2b00      	cmp	r3, #0
 800754e:	f000 80bf 	beq.w	80076d0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007556:	f003 031f 	and.w	r3, r3, #31
 800755a:	2202      	movs	r2, #2
 800755c:	409a      	lsls	r2, r3
 800755e:	69fb      	ldr	r3, [r7, #28]
 8007560:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007568:	2b00      	cmp	r3, #0
 800756a:	d018      	beq.n	800759e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007572:	2b00      	cmp	r3, #0
 8007574:	d109      	bne.n	800758a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800757a:	2b00      	cmp	r3, #0
 800757c:	f000 813a 	beq.w	80077f4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007588:	e134      	b.n	80077f4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800758e:	2b00      	cmp	r3, #0
 8007590:	f000 8130 	beq.w	80077f4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800759c:	e12a      	b.n	80077f4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	f003 0320 	and.w	r3, r3, #32
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	f040 8089 	bne.w	80076bc <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a2b      	ldr	r2, [pc, #172]	; (800765c <HAL_DMA_IRQHandler+0xc74>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d04a      	beq.n	800764a <HAL_DMA_IRQHandler+0xc62>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a29      	ldr	r2, [pc, #164]	; (8007660 <HAL_DMA_IRQHandler+0xc78>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d045      	beq.n	800764a <HAL_DMA_IRQHandler+0xc62>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a28      	ldr	r2, [pc, #160]	; (8007664 <HAL_DMA_IRQHandler+0xc7c>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d040      	beq.n	800764a <HAL_DMA_IRQHandler+0xc62>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a26      	ldr	r2, [pc, #152]	; (8007668 <HAL_DMA_IRQHandler+0xc80>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d03b      	beq.n	800764a <HAL_DMA_IRQHandler+0xc62>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a25      	ldr	r2, [pc, #148]	; (800766c <HAL_DMA_IRQHandler+0xc84>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d036      	beq.n	800764a <HAL_DMA_IRQHandler+0xc62>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a23      	ldr	r2, [pc, #140]	; (8007670 <HAL_DMA_IRQHandler+0xc88>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d031      	beq.n	800764a <HAL_DMA_IRQHandler+0xc62>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a22      	ldr	r2, [pc, #136]	; (8007674 <HAL_DMA_IRQHandler+0xc8c>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d02c      	beq.n	800764a <HAL_DMA_IRQHandler+0xc62>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a20      	ldr	r2, [pc, #128]	; (8007678 <HAL_DMA_IRQHandler+0xc90>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d027      	beq.n	800764a <HAL_DMA_IRQHandler+0xc62>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a1f      	ldr	r2, [pc, #124]	; (800767c <HAL_DMA_IRQHandler+0xc94>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d022      	beq.n	800764a <HAL_DMA_IRQHandler+0xc62>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a1d      	ldr	r2, [pc, #116]	; (8007680 <HAL_DMA_IRQHandler+0xc98>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d01d      	beq.n	800764a <HAL_DMA_IRQHandler+0xc62>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a1c      	ldr	r2, [pc, #112]	; (8007684 <HAL_DMA_IRQHandler+0xc9c>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d018      	beq.n	800764a <HAL_DMA_IRQHandler+0xc62>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a1a      	ldr	r2, [pc, #104]	; (8007688 <HAL_DMA_IRQHandler+0xca0>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d013      	beq.n	800764a <HAL_DMA_IRQHandler+0xc62>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a19      	ldr	r2, [pc, #100]	; (800768c <HAL_DMA_IRQHandler+0xca4>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d00e      	beq.n	800764a <HAL_DMA_IRQHandler+0xc62>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a17      	ldr	r2, [pc, #92]	; (8007690 <HAL_DMA_IRQHandler+0xca8>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d009      	beq.n	800764a <HAL_DMA_IRQHandler+0xc62>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a16      	ldr	r2, [pc, #88]	; (8007694 <HAL_DMA_IRQHandler+0xcac>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d004      	beq.n	800764a <HAL_DMA_IRQHandler+0xc62>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a14      	ldr	r2, [pc, #80]	; (8007698 <HAL_DMA_IRQHandler+0xcb0>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d128      	bne.n	800769c <HAL_DMA_IRQHandler+0xcb4>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	681a      	ldr	r2, [r3, #0]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f022 0214 	bic.w	r2, r2, #20
 8007658:	601a      	str	r2, [r3, #0]
 800765a:	e027      	b.n	80076ac <HAL_DMA_IRQHandler+0xcc4>
 800765c:	40020010 	.word	0x40020010
 8007660:	40020028 	.word	0x40020028
 8007664:	40020040 	.word	0x40020040
 8007668:	40020058 	.word	0x40020058
 800766c:	40020070 	.word	0x40020070
 8007670:	40020088 	.word	0x40020088
 8007674:	400200a0 	.word	0x400200a0
 8007678:	400200b8 	.word	0x400200b8
 800767c:	40020410 	.word	0x40020410
 8007680:	40020428 	.word	0x40020428
 8007684:	40020440 	.word	0x40020440
 8007688:	40020458 	.word	0x40020458
 800768c:	40020470 	.word	0x40020470
 8007690:	40020488 	.word	0x40020488
 8007694:	400204a0 	.word	0x400204a0
 8007698:	400204b8 	.word	0x400204b8
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	681a      	ldr	r2, [r3, #0]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f022 020a 	bic.w	r2, r2, #10
 80076aa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2201      	movs	r2, #1
 80076b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2200      	movs	r2, #0
 80076b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	f000 8097 	beq.w	80077f4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80076ce:	e091      	b.n	80077f4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076d4:	f003 031f 	and.w	r3, r3, #31
 80076d8:	2208      	movs	r2, #8
 80076da:	409a      	lsls	r2, r3
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	4013      	ands	r3, r2
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	f000 8088 	beq.w	80077f6 <HAL_DMA_IRQHandler+0xe0e>
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	f003 0308 	and.w	r3, r3, #8
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	f000 8082 	beq.w	80077f6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a41      	ldr	r2, [pc, #260]	; (80077fc <HAL_DMA_IRQHandler+0xe14>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d04a      	beq.n	8007792 <HAL_DMA_IRQHandler+0xdaa>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a3f      	ldr	r2, [pc, #252]	; (8007800 <HAL_DMA_IRQHandler+0xe18>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d045      	beq.n	8007792 <HAL_DMA_IRQHandler+0xdaa>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a3e      	ldr	r2, [pc, #248]	; (8007804 <HAL_DMA_IRQHandler+0xe1c>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d040      	beq.n	8007792 <HAL_DMA_IRQHandler+0xdaa>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a3c      	ldr	r2, [pc, #240]	; (8007808 <HAL_DMA_IRQHandler+0xe20>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d03b      	beq.n	8007792 <HAL_DMA_IRQHandler+0xdaa>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a3b      	ldr	r2, [pc, #236]	; (800780c <HAL_DMA_IRQHandler+0xe24>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d036      	beq.n	8007792 <HAL_DMA_IRQHandler+0xdaa>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a39      	ldr	r2, [pc, #228]	; (8007810 <HAL_DMA_IRQHandler+0xe28>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d031      	beq.n	8007792 <HAL_DMA_IRQHandler+0xdaa>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a38      	ldr	r2, [pc, #224]	; (8007814 <HAL_DMA_IRQHandler+0xe2c>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d02c      	beq.n	8007792 <HAL_DMA_IRQHandler+0xdaa>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a36      	ldr	r2, [pc, #216]	; (8007818 <HAL_DMA_IRQHandler+0xe30>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d027      	beq.n	8007792 <HAL_DMA_IRQHandler+0xdaa>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a35      	ldr	r2, [pc, #212]	; (800781c <HAL_DMA_IRQHandler+0xe34>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d022      	beq.n	8007792 <HAL_DMA_IRQHandler+0xdaa>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a33      	ldr	r2, [pc, #204]	; (8007820 <HAL_DMA_IRQHandler+0xe38>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d01d      	beq.n	8007792 <HAL_DMA_IRQHandler+0xdaa>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a32      	ldr	r2, [pc, #200]	; (8007824 <HAL_DMA_IRQHandler+0xe3c>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d018      	beq.n	8007792 <HAL_DMA_IRQHandler+0xdaa>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a30      	ldr	r2, [pc, #192]	; (8007828 <HAL_DMA_IRQHandler+0xe40>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d013      	beq.n	8007792 <HAL_DMA_IRQHandler+0xdaa>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a2f      	ldr	r2, [pc, #188]	; (800782c <HAL_DMA_IRQHandler+0xe44>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d00e      	beq.n	8007792 <HAL_DMA_IRQHandler+0xdaa>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a2d      	ldr	r2, [pc, #180]	; (8007830 <HAL_DMA_IRQHandler+0xe48>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d009      	beq.n	8007792 <HAL_DMA_IRQHandler+0xdaa>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a2c      	ldr	r2, [pc, #176]	; (8007834 <HAL_DMA_IRQHandler+0xe4c>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d004      	beq.n	8007792 <HAL_DMA_IRQHandler+0xdaa>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a2a      	ldr	r2, [pc, #168]	; (8007838 <HAL_DMA_IRQHandler+0xe50>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d108      	bne.n	80077a4 <HAL_DMA_IRQHandler+0xdbc>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	681a      	ldr	r2, [r3, #0]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f022 021c 	bic.w	r2, r2, #28
 80077a0:	601a      	str	r2, [r3, #0]
 80077a2:	e007      	b.n	80077b4 <HAL_DMA_IRQHandler+0xdcc>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	681a      	ldr	r2, [r3, #0]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f022 020e 	bic.w	r2, r2, #14
 80077b2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077b8:	f003 031f 	and.w	r3, r3, #31
 80077bc:	2201      	movs	r2, #1
 80077be:	409a      	lsls	r2, r3
 80077c0:	69fb      	ldr	r3, [r7, #28]
 80077c2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2201      	movs	r2, #1
 80077c8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2201      	movs	r2, #1
 80077ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2200      	movs	r2, #0
 80077d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d009      	beq.n	80077f6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	4798      	blx	r3
 80077ea:	e004      	b.n	80077f6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80077ec:	bf00      	nop
 80077ee:	e002      	b.n	80077f6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80077f0:	bf00      	nop
 80077f2:	e000      	b.n	80077f6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80077f4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80077f6:	3728      	adds	r7, #40	; 0x28
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}
 80077fc:	40020010 	.word	0x40020010
 8007800:	40020028 	.word	0x40020028
 8007804:	40020040 	.word	0x40020040
 8007808:	40020058 	.word	0x40020058
 800780c:	40020070 	.word	0x40020070
 8007810:	40020088 	.word	0x40020088
 8007814:	400200a0 	.word	0x400200a0
 8007818:	400200b8 	.word	0x400200b8
 800781c:	40020410 	.word	0x40020410
 8007820:	40020428 	.word	0x40020428
 8007824:	40020440 	.word	0x40020440
 8007828:	40020458 	.word	0x40020458
 800782c:	40020470 	.word	0x40020470
 8007830:	40020488 	.word	0x40020488
 8007834:	400204a0 	.word	0x400204a0
 8007838:	400204b8 	.word	0x400204b8

0800783c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800783c:	b480      	push	{r7}
 800783e:	b083      	sub	sp, #12
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8007848:	4618      	mov	r0, r3
 800784a:	370c      	adds	r7, #12
 800784c:	46bd      	mov	sp, r7
 800784e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007852:	4770      	bx	lr

08007854 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007854:	b480      	push	{r7}
 8007856:	b087      	sub	sp, #28
 8007858:	af00      	add	r7, sp, #0
 800785a:	60f8      	str	r0, [r7, #12]
 800785c:	60b9      	str	r1, [r7, #8]
 800785e:	607a      	str	r2, [r7, #4]
 8007860:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007866:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800786c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a7f      	ldr	r2, [pc, #508]	; (8007a70 <DMA_SetConfig+0x21c>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d072      	beq.n	800795e <DMA_SetConfig+0x10a>
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a7d      	ldr	r2, [pc, #500]	; (8007a74 <DMA_SetConfig+0x220>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d06d      	beq.n	800795e <DMA_SetConfig+0x10a>
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a7c      	ldr	r2, [pc, #496]	; (8007a78 <DMA_SetConfig+0x224>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d068      	beq.n	800795e <DMA_SetConfig+0x10a>
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a7a      	ldr	r2, [pc, #488]	; (8007a7c <DMA_SetConfig+0x228>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d063      	beq.n	800795e <DMA_SetConfig+0x10a>
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a79      	ldr	r2, [pc, #484]	; (8007a80 <DMA_SetConfig+0x22c>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d05e      	beq.n	800795e <DMA_SetConfig+0x10a>
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4a77      	ldr	r2, [pc, #476]	; (8007a84 <DMA_SetConfig+0x230>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d059      	beq.n	800795e <DMA_SetConfig+0x10a>
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a76      	ldr	r2, [pc, #472]	; (8007a88 <DMA_SetConfig+0x234>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d054      	beq.n	800795e <DMA_SetConfig+0x10a>
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a74      	ldr	r2, [pc, #464]	; (8007a8c <DMA_SetConfig+0x238>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d04f      	beq.n	800795e <DMA_SetConfig+0x10a>
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a73      	ldr	r2, [pc, #460]	; (8007a90 <DMA_SetConfig+0x23c>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d04a      	beq.n	800795e <DMA_SetConfig+0x10a>
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a71      	ldr	r2, [pc, #452]	; (8007a94 <DMA_SetConfig+0x240>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d045      	beq.n	800795e <DMA_SetConfig+0x10a>
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a70      	ldr	r2, [pc, #448]	; (8007a98 <DMA_SetConfig+0x244>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d040      	beq.n	800795e <DMA_SetConfig+0x10a>
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a6e      	ldr	r2, [pc, #440]	; (8007a9c <DMA_SetConfig+0x248>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d03b      	beq.n	800795e <DMA_SetConfig+0x10a>
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a6d      	ldr	r2, [pc, #436]	; (8007aa0 <DMA_SetConfig+0x24c>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d036      	beq.n	800795e <DMA_SetConfig+0x10a>
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a6b      	ldr	r2, [pc, #428]	; (8007aa4 <DMA_SetConfig+0x250>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d031      	beq.n	800795e <DMA_SetConfig+0x10a>
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a6a      	ldr	r2, [pc, #424]	; (8007aa8 <DMA_SetConfig+0x254>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d02c      	beq.n	800795e <DMA_SetConfig+0x10a>
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a68      	ldr	r2, [pc, #416]	; (8007aac <DMA_SetConfig+0x258>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d027      	beq.n	800795e <DMA_SetConfig+0x10a>
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4a67      	ldr	r2, [pc, #412]	; (8007ab0 <DMA_SetConfig+0x25c>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d022      	beq.n	800795e <DMA_SetConfig+0x10a>
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a65      	ldr	r2, [pc, #404]	; (8007ab4 <DMA_SetConfig+0x260>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d01d      	beq.n	800795e <DMA_SetConfig+0x10a>
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4a64      	ldr	r2, [pc, #400]	; (8007ab8 <DMA_SetConfig+0x264>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d018      	beq.n	800795e <DMA_SetConfig+0x10a>
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4a62      	ldr	r2, [pc, #392]	; (8007abc <DMA_SetConfig+0x268>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d013      	beq.n	800795e <DMA_SetConfig+0x10a>
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4a61      	ldr	r2, [pc, #388]	; (8007ac0 <DMA_SetConfig+0x26c>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d00e      	beq.n	800795e <DMA_SetConfig+0x10a>
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a5f      	ldr	r2, [pc, #380]	; (8007ac4 <DMA_SetConfig+0x270>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d009      	beq.n	800795e <DMA_SetConfig+0x10a>
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4a5e      	ldr	r2, [pc, #376]	; (8007ac8 <DMA_SetConfig+0x274>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d004      	beq.n	800795e <DMA_SetConfig+0x10a>
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a5c      	ldr	r2, [pc, #368]	; (8007acc <DMA_SetConfig+0x278>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d101      	bne.n	8007962 <DMA_SetConfig+0x10e>
 800795e:	2301      	movs	r3, #1
 8007960:	e000      	b.n	8007964 <DMA_SetConfig+0x110>
 8007962:	2300      	movs	r3, #0
 8007964:	2b00      	cmp	r3, #0
 8007966:	d00d      	beq.n	8007984 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800796c:	68fa      	ldr	r2, [r7, #12]
 800796e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007970:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007976:	2b00      	cmp	r3, #0
 8007978:	d004      	beq.n	8007984 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800797e:	68fa      	ldr	r2, [r7, #12]
 8007980:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007982:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4a39      	ldr	r2, [pc, #228]	; (8007a70 <DMA_SetConfig+0x21c>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d04a      	beq.n	8007a24 <DMA_SetConfig+0x1d0>
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	4a38      	ldr	r2, [pc, #224]	; (8007a74 <DMA_SetConfig+0x220>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d045      	beq.n	8007a24 <DMA_SetConfig+0x1d0>
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4a36      	ldr	r2, [pc, #216]	; (8007a78 <DMA_SetConfig+0x224>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d040      	beq.n	8007a24 <DMA_SetConfig+0x1d0>
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4a35      	ldr	r2, [pc, #212]	; (8007a7c <DMA_SetConfig+0x228>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d03b      	beq.n	8007a24 <DMA_SetConfig+0x1d0>
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4a33      	ldr	r2, [pc, #204]	; (8007a80 <DMA_SetConfig+0x22c>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d036      	beq.n	8007a24 <DMA_SetConfig+0x1d0>
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4a32      	ldr	r2, [pc, #200]	; (8007a84 <DMA_SetConfig+0x230>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d031      	beq.n	8007a24 <DMA_SetConfig+0x1d0>
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4a30      	ldr	r2, [pc, #192]	; (8007a88 <DMA_SetConfig+0x234>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d02c      	beq.n	8007a24 <DMA_SetConfig+0x1d0>
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	4a2f      	ldr	r2, [pc, #188]	; (8007a8c <DMA_SetConfig+0x238>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d027      	beq.n	8007a24 <DMA_SetConfig+0x1d0>
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4a2d      	ldr	r2, [pc, #180]	; (8007a90 <DMA_SetConfig+0x23c>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d022      	beq.n	8007a24 <DMA_SetConfig+0x1d0>
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4a2c      	ldr	r2, [pc, #176]	; (8007a94 <DMA_SetConfig+0x240>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d01d      	beq.n	8007a24 <DMA_SetConfig+0x1d0>
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4a2a      	ldr	r2, [pc, #168]	; (8007a98 <DMA_SetConfig+0x244>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d018      	beq.n	8007a24 <DMA_SetConfig+0x1d0>
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4a29      	ldr	r2, [pc, #164]	; (8007a9c <DMA_SetConfig+0x248>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d013      	beq.n	8007a24 <DMA_SetConfig+0x1d0>
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4a27      	ldr	r2, [pc, #156]	; (8007aa0 <DMA_SetConfig+0x24c>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d00e      	beq.n	8007a24 <DMA_SetConfig+0x1d0>
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4a26      	ldr	r2, [pc, #152]	; (8007aa4 <DMA_SetConfig+0x250>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d009      	beq.n	8007a24 <DMA_SetConfig+0x1d0>
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a24      	ldr	r2, [pc, #144]	; (8007aa8 <DMA_SetConfig+0x254>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d004      	beq.n	8007a24 <DMA_SetConfig+0x1d0>
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4a23      	ldr	r2, [pc, #140]	; (8007aac <DMA_SetConfig+0x258>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d101      	bne.n	8007a28 <DMA_SetConfig+0x1d4>
 8007a24:	2301      	movs	r3, #1
 8007a26:	e000      	b.n	8007a2a <DMA_SetConfig+0x1d6>
 8007a28:	2300      	movs	r3, #0
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d059      	beq.n	8007ae2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a32:	f003 031f 	and.w	r3, r3, #31
 8007a36:	223f      	movs	r2, #63	; 0x3f
 8007a38:	409a      	lsls	r2, r3
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	681a      	ldr	r2, [r3, #0]
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007a4c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	683a      	ldr	r2, [r7, #0]
 8007a54:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	689b      	ldr	r3, [r3, #8]
 8007a5a:	2b40      	cmp	r3, #64	; 0x40
 8007a5c:	d138      	bne.n	8007ad0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	687a      	ldr	r2, [r7, #4]
 8007a64:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	68ba      	ldr	r2, [r7, #8]
 8007a6c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007a6e:	e086      	b.n	8007b7e <DMA_SetConfig+0x32a>
 8007a70:	40020010 	.word	0x40020010
 8007a74:	40020028 	.word	0x40020028
 8007a78:	40020040 	.word	0x40020040
 8007a7c:	40020058 	.word	0x40020058
 8007a80:	40020070 	.word	0x40020070
 8007a84:	40020088 	.word	0x40020088
 8007a88:	400200a0 	.word	0x400200a0
 8007a8c:	400200b8 	.word	0x400200b8
 8007a90:	40020410 	.word	0x40020410
 8007a94:	40020428 	.word	0x40020428
 8007a98:	40020440 	.word	0x40020440
 8007a9c:	40020458 	.word	0x40020458
 8007aa0:	40020470 	.word	0x40020470
 8007aa4:	40020488 	.word	0x40020488
 8007aa8:	400204a0 	.word	0x400204a0
 8007aac:	400204b8 	.word	0x400204b8
 8007ab0:	58025408 	.word	0x58025408
 8007ab4:	5802541c 	.word	0x5802541c
 8007ab8:	58025430 	.word	0x58025430
 8007abc:	58025444 	.word	0x58025444
 8007ac0:	58025458 	.word	0x58025458
 8007ac4:	5802546c 	.word	0x5802546c
 8007ac8:	58025480 	.word	0x58025480
 8007acc:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	68ba      	ldr	r2, [r7, #8]
 8007ad6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	687a      	ldr	r2, [r7, #4]
 8007ade:	60da      	str	r2, [r3, #12]
}
 8007ae0:	e04d      	b.n	8007b7e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a29      	ldr	r2, [pc, #164]	; (8007b8c <DMA_SetConfig+0x338>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d022      	beq.n	8007b32 <DMA_SetConfig+0x2de>
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a27      	ldr	r2, [pc, #156]	; (8007b90 <DMA_SetConfig+0x33c>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d01d      	beq.n	8007b32 <DMA_SetConfig+0x2de>
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a26      	ldr	r2, [pc, #152]	; (8007b94 <DMA_SetConfig+0x340>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d018      	beq.n	8007b32 <DMA_SetConfig+0x2de>
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a24      	ldr	r2, [pc, #144]	; (8007b98 <DMA_SetConfig+0x344>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d013      	beq.n	8007b32 <DMA_SetConfig+0x2de>
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a23      	ldr	r2, [pc, #140]	; (8007b9c <DMA_SetConfig+0x348>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d00e      	beq.n	8007b32 <DMA_SetConfig+0x2de>
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a21      	ldr	r2, [pc, #132]	; (8007ba0 <DMA_SetConfig+0x34c>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d009      	beq.n	8007b32 <DMA_SetConfig+0x2de>
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a20      	ldr	r2, [pc, #128]	; (8007ba4 <DMA_SetConfig+0x350>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d004      	beq.n	8007b32 <DMA_SetConfig+0x2de>
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4a1e      	ldr	r2, [pc, #120]	; (8007ba8 <DMA_SetConfig+0x354>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d101      	bne.n	8007b36 <DMA_SetConfig+0x2e2>
 8007b32:	2301      	movs	r3, #1
 8007b34:	e000      	b.n	8007b38 <DMA_SetConfig+0x2e4>
 8007b36:	2300      	movs	r3, #0
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d020      	beq.n	8007b7e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b40:	f003 031f 	and.w	r3, r3, #31
 8007b44:	2201      	movs	r2, #1
 8007b46:	409a      	lsls	r2, r3
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	683a      	ldr	r2, [r7, #0]
 8007b52:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	2b40      	cmp	r3, #64	; 0x40
 8007b5a:	d108      	bne.n	8007b6e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	687a      	ldr	r2, [r7, #4]
 8007b62:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	68ba      	ldr	r2, [r7, #8]
 8007b6a:	60da      	str	r2, [r3, #12]
}
 8007b6c:	e007      	b.n	8007b7e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	68ba      	ldr	r2, [r7, #8]
 8007b74:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	687a      	ldr	r2, [r7, #4]
 8007b7c:	60da      	str	r2, [r3, #12]
}
 8007b7e:	bf00      	nop
 8007b80:	371c      	adds	r7, #28
 8007b82:	46bd      	mov	sp, r7
 8007b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b88:	4770      	bx	lr
 8007b8a:	bf00      	nop
 8007b8c:	58025408 	.word	0x58025408
 8007b90:	5802541c 	.word	0x5802541c
 8007b94:	58025430 	.word	0x58025430
 8007b98:	58025444 	.word	0x58025444
 8007b9c:	58025458 	.word	0x58025458
 8007ba0:	5802546c 	.word	0x5802546c
 8007ba4:	58025480 	.word	0x58025480
 8007ba8:	58025494 	.word	0x58025494

08007bac <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b085      	sub	sp, #20
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4a42      	ldr	r2, [pc, #264]	; (8007cc4 <DMA_CalcBaseAndBitshift+0x118>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d04a      	beq.n	8007c54 <DMA_CalcBaseAndBitshift+0xa8>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4a41      	ldr	r2, [pc, #260]	; (8007cc8 <DMA_CalcBaseAndBitshift+0x11c>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d045      	beq.n	8007c54 <DMA_CalcBaseAndBitshift+0xa8>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a3f      	ldr	r2, [pc, #252]	; (8007ccc <DMA_CalcBaseAndBitshift+0x120>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d040      	beq.n	8007c54 <DMA_CalcBaseAndBitshift+0xa8>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4a3e      	ldr	r2, [pc, #248]	; (8007cd0 <DMA_CalcBaseAndBitshift+0x124>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d03b      	beq.n	8007c54 <DMA_CalcBaseAndBitshift+0xa8>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a3c      	ldr	r2, [pc, #240]	; (8007cd4 <DMA_CalcBaseAndBitshift+0x128>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d036      	beq.n	8007c54 <DMA_CalcBaseAndBitshift+0xa8>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a3b      	ldr	r2, [pc, #236]	; (8007cd8 <DMA_CalcBaseAndBitshift+0x12c>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d031      	beq.n	8007c54 <DMA_CalcBaseAndBitshift+0xa8>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a39      	ldr	r2, [pc, #228]	; (8007cdc <DMA_CalcBaseAndBitshift+0x130>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d02c      	beq.n	8007c54 <DMA_CalcBaseAndBitshift+0xa8>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4a38      	ldr	r2, [pc, #224]	; (8007ce0 <DMA_CalcBaseAndBitshift+0x134>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d027      	beq.n	8007c54 <DMA_CalcBaseAndBitshift+0xa8>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a36      	ldr	r2, [pc, #216]	; (8007ce4 <DMA_CalcBaseAndBitshift+0x138>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d022      	beq.n	8007c54 <DMA_CalcBaseAndBitshift+0xa8>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4a35      	ldr	r2, [pc, #212]	; (8007ce8 <DMA_CalcBaseAndBitshift+0x13c>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d01d      	beq.n	8007c54 <DMA_CalcBaseAndBitshift+0xa8>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a33      	ldr	r2, [pc, #204]	; (8007cec <DMA_CalcBaseAndBitshift+0x140>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d018      	beq.n	8007c54 <DMA_CalcBaseAndBitshift+0xa8>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a32      	ldr	r2, [pc, #200]	; (8007cf0 <DMA_CalcBaseAndBitshift+0x144>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d013      	beq.n	8007c54 <DMA_CalcBaseAndBitshift+0xa8>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a30      	ldr	r2, [pc, #192]	; (8007cf4 <DMA_CalcBaseAndBitshift+0x148>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d00e      	beq.n	8007c54 <DMA_CalcBaseAndBitshift+0xa8>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a2f      	ldr	r2, [pc, #188]	; (8007cf8 <DMA_CalcBaseAndBitshift+0x14c>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d009      	beq.n	8007c54 <DMA_CalcBaseAndBitshift+0xa8>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4a2d      	ldr	r2, [pc, #180]	; (8007cfc <DMA_CalcBaseAndBitshift+0x150>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d004      	beq.n	8007c54 <DMA_CalcBaseAndBitshift+0xa8>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4a2c      	ldr	r2, [pc, #176]	; (8007d00 <DMA_CalcBaseAndBitshift+0x154>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d101      	bne.n	8007c58 <DMA_CalcBaseAndBitshift+0xac>
 8007c54:	2301      	movs	r3, #1
 8007c56:	e000      	b.n	8007c5a <DMA_CalcBaseAndBitshift+0xae>
 8007c58:	2300      	movs	r3, #0
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d024      	beq.n	8007ca8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	b2db      	uxtb	r3, r3
 8007c64:	3b10      	subs	r3, #16
 8007c66:	4a27      	ldr	r2, [pc, #156]	; (8007d04 <DMA_CalcBaseAndBitshift+0x158>)
 8007c68:	fba2 2303 	umull	r2, r3, r2, r3
 8007c6c:	091b      	lsrs	r3, r3, #4
 8007c6e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f003 0307 	and.w	r3, r3, #7
 8007c76:	4a24      	ldr	r2, [pc, #144]	; (8007d08 <DMA_CalcBaseAndBitshift+0x15c>)
 8007c78:	5cd3      	ldrb	r3, [r2, r3]
 8007c7a:	461a      	mov	r2, r3
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	2b03      	cmp	r3, #3
 8007c84:	d908      	bls.n	8007c98 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	4b1f      	ldr	r3, [pc, #124]	; (8007d0c <DMA_CalcBaseAndBitshift+0x160>)
 8007c8e:	4013      	ands	r3, r2
 8007c90:	1d1a      	adds	r2, r3, #4
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	659a      	str	r2, [r3, #88]	; 0x58
 8007c96:	e00d      	b.n	8007cb4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	461a      	mov	r2, r3
 8007c9e:	4b1b      	ldr	r3, [pc, #108]	; (8007d0c <DMA_CalcBaseAndBitshift+0x160>)
 8007ca0:	4013      	ands	r3, r2
 8007ca2:	687a      	ldr	r2, [r7, #4]
 8007ca4:	6593      	str	r3, [r2, #88]	; 0x58
 8007ca6:	e005      	b.n	8007cb4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3714      	adds	r7, #20
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr
 8007cc4:	40020010 	.word	0x40020010
 8007cc8:	40020028 	.word	0x40020028
 8007ccc:	40020040 	.word	0x40020040
 8007cd0:	40020058 	.word	0x40020058
 8007cd4:	40020070 	.word	0x40020070
 8007cd8:	40020088 	.word	0x40020088
 8007cdc:	400200a0 	.word	0x400200a0
 8007ce0:	400200b8 	.word	0x400200b8
 8007ce4:	40020410 	.word	0x40020410
 8007ce8:	40020428 	.word	0x40020428
 8007cec:	40020440 	.word	0x40020440
 8007cf0:	40020458 	.word	0x40020458
 8007cf4:	40020470 	.word	0x40020470
 8007cf8:	40020488 	.word	0x40020488
 8007cfc:	400204a0 	.word	0x400204a0
 8007d00:	400204b8 	.word	0x400204b8
 8007d04:	aaaaaaab 	.word	0xaaaaaaab
 8007d08:	08014b10 	.word	0x08014b10
 8007d0c:	fffffc00 	.word	0xfffffc00

08007d10 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b085      	sub	sp, #20
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	699b      	ldr	r3, [r3, #24]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d120      	bne.n	8007d66 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d28:	2b03      	cmp	r3, #3
 8007d2a:	d858      	bhi.n	8007dde <DMA_CheckFifoParam+0xce>
 8007d2c:	a201      	add	r2, pc, #4	; (adr r2, 8007d34 <DMA_CheckFifoParam+0x24>)
 8007d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d32:	bf00      	nop
 8007d34:	08007d45 	.word	0x08007d45
 8007d38:	08007d57 	.word	0x08007d57
 8007d3c:	08007d45 	.word	0x08007d45
 8007d40:	08007ddf 	.word	0x08007ddf
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d048      	beq.n	8007de2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007d50:	2301      	movs	r3, #1
 8007d52:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007d54:	e045      	b.n	8007de2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d5a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007d5e:	d142      	bne.n	8007de6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007d60:	2301      	movs	r3, #1
 8007d62:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007d64:	e03f      	b.n	8007de6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	699b      	ldr	r3, [r3, #24]
 8007d6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d6e:	d123      	bne.n	8007db8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d74:	2b03      	cmp	r3, #3
 8007d76:	d838      	bhi.n	8007dea <DMA_CheckFifoParam+0xda>
 8007d78:	a201      	add	r2, pc, #4	; (adr r2, 8007d80 <DMA_CheckFifoParam+0x70>)
 8007d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d7e:	bf00      	nop
 8007d80:	08007d91 	.word	0x08007d91
 8007d84:	08007d97 	.word	0x08007d97
 8007d88:	08007d91 	.word	0x08007d91
 8007d8c:	08007da9 	.word	0x08007da9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007d90:	2301      	movs	r3, #1
 8007d92:	73fb      	strb	r3, [r7, #15]
        break;
 8007d94:	e030      	b.n	8007df8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d025      	beq.n	8007dee <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007da2:	2301      	movs	r3, #1
 8007da4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007da6:	e022      	b.n	8007dee <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007db0:	d11f      	bne.n	8007df2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007db2:	2301      	movs	r3, #1
 8007db4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007db6:	e01c      	b.n	8007df2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dbc:	2b02      	cmp	r3, #2
 8007dbe:	d902      	bls.n	8007dc6 <DMA_CheckFifoParam+0xb6>
 8007dc0:	2b03      	cmp	r3, #3
 8007dc2:	d003      	beq.n	8007dcc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007dc4:	e018      	b.n	8007df8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	73fb      	strb	r3, [r7, #15]
        break;
 8007dca:	e015      	b.n	8007df8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d00e      	beq.n	8007df6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007dd8:	2301      	movs	r3, #1
 8007dda:	73fb      	strb	r3, [r7, #15]
    break;
 8007ddc:	e00b      	b.n	8007df6 <DMA_CheckFifoParam+0xe6>
        break;
 8007dde:	bf00      	nop
 8007de0:	e00a      	b.n	8007df8 <DMA_CheckFifoParam+0xe8>
        break;
 8007de2:	bf00      	nop
 8007de4:	e008      	b.n	8007df8 <DMA_CheckFifoParam+0xe8>
        break;
 8007de6:	bf00      	nop
 8007de8:	e006      	b.n	8007df8 <DMA_CheckFifoParam+0xe8>
        break;
 8007dea:	bf00      	nop
 8007dec:	e004      	b.n	8007df8 <DMA_CheckFifoParam+0xe8>
        break;
 8007dee:	bf00      	nop
 8007df0:	e002      	b.n	8007df8 <DMA_CheckFifoParam+0xe8>
        break;
 8007df2:	bf00      	nop
 8007df4:	e000      	b.n	8007df8 <DMA_CheckFifoParam+0xe8>
    break;
 8007df6:	bf00      	nop
    }
  }

  return status;
 8007df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3714      	adds	r7, #20
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e04:	4770      	bx	lr
 8007e06:	bf00      	nop

08007e08 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b085      	sub	sp, #20
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4a38      	ldr	r2, [pc, #224]	; (8007efc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d022      	beq.n	8007e66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a36      	ldr	r2, [pc, #216]	; (8007f00 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d01d      	beq.n	8007e66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	4a35      	ldr	r2, [pc, #212]	; (8007f04 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d018      	beq.n	8007e66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4a33      	ldr	r2, [pc, #204]	; (8007f08 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d013      	beq.n	8007e66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4a32      	ldr	r2, [pc, #200]	; (8007f0c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d00e      	beq.n	8007e66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	4a30      	ldr	r2, [pc, #192]	; (8007f10 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d009      	beq.n	8007e66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4a2f      	ldr	r2, [pc, #188]	; (8007f14 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d004      	beq.n	8007e66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4a2d      	ldr	r2, [pc, #180]	; (8007f18 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d101      	bne.n	8007e6a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007e66:	2301      	movs	r3, #1
 8007e68:	e000      	b.n	8007e6c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d01a      	beq.n	8007ea6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	b2db      	uxtb	r3, r3
 8007e76:	3b08      	subs	r3, #8
 8007e78:	4a28      	ldr	r2, [pc, #160]	; (8007f1c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8007e7e:	091b      	lsrs	r3, r3, #4
 8007e80:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007e82:	68fa      	ldr	r2, [r7, #12]
 8007e84:	4b26      	ldr	r3, [pc, #152]	; (8007f20 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007e86:	4413      	add	r3, r2
 8007e88:	009b      	lsls	r3, r3, #2
 8007e8a:	461a      	mov	r2, r3
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	4a24      	ldr	r2, [pc, #144]	; (8007f24 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007e94:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	f003 031f 	and.w	r3, r3, #31
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	409a      	lsls	r2, r3
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007ea4:	e024      	b.n	8007ef0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	b2db      	uxtb	r3, r3
 8007eac:	3b10      	subs	r3, #16
 8007eae:	4a1e      	ldr	r2, [pc, #120]	; (8007f28 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8007eb4:	091b      	lsrs	r3, r3, #4
 8007eb6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	4a1c      	ldr	r2, [pc, #112]	; (8007f2c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d806      	bhi.n	8007ece <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	4a1b      	ldr	r2, [pc, #108]	; (8007f30 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d902      	bls.n	8007ece <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	3308      	adds	r3, #8
 8007ecc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007ece:	68fa      	ldr	r2, [r7, #12]
 8007ed0:	4b18      	ldr	r3, [pc, #96]	; (8007f34 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007ed2:	4413      	add	r3, r2
 8007ed4:	009b      	lsls	r3, r3, #2
 8007ed6:	461a      	mov	r2, r3
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	4a16      	ldr	r2, [pc, #88]	; (8007f38 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007ee0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	f003 031f 	and.w	r3, r3, #31
 8007ee8:	2201      	movs	r2, #1
 8007eea:	409a      	lsls	r2, r3
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007ef0:	bf00      	nop
 8007ef2:	3714      	adds	r7, #20
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr
 8007efc:	58025408 	.word	0x58025408
 8007f00:	5802541c 	.word	0x5802541c
 8007f04:	58025430 	.word	0x58025430
 8007f08:	58025444 	.word	0x58025444
 8007f0c:	58025458 	.word	0x58025458
 8007f10:	5802546c 	.word	0x5802546c
 8007f14:	58025480 	.word	0x58025480
 8007f18:	58025494 	.word	0x58025494
 8007f1c:	cccccccd 	.word	0xcccccccd
 8007f20:	16009600 	.word	0x16009600
 8007f24:	58025880 	.word	0x58025880
 8007f28:	aaaaaaab 	.word	0xaaaaaaab
 8007f2c:	400204b8 	.word	0x400204b8
 8007f30:	4002040f 	.word	0x4002040f
 8007f34:	10008200 	.word	0x10008200
 8007f38:	40020880 	.word	0x40020880

08007f3c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b085      	sub	sp, #20
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	685b      	ldr	r3, [r3, #4]
 8007f48:	b2db      	uxtb	r3, r3
 8007f4a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d04a      	beq.n	8007fe8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	2b08      	cmp	r3, #8
 8007f56:	d847      	bhi.n	8007fe8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4a25      	ldr	r2, [pc, #148]	; (8007ff4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d022      	beq.n	8007fa8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4a24      	ldr	r2, [pc, #144]	; (8007ff8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d01d      	beq.n	8007fa8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a22      	ldr	r2, [pc, #136]	; (8007ffc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d018      	beq.n	8007fa8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a21      	ldr	r2, [pc, #132]	; (8008000 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d013      	beq.n	8007fa8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a1f      	ldr	r2, [pc, #124]	; (8008004 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d00e      	beq.n	8007fa8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4a1e      	ldr	r2, [pc, #120]	; (8008008 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d009      	beq.n	8007fa8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4a1c      	ldr	r2, [pc, #112]	; (800800c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d004      	beq.n	8007fa8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4a1b      	ldr	r2, [pc, #108]	; (8008010 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d101      	bne.n	8007fac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007fa8:	2301      	movs	r3, #1
 8007faa:	e000      	b.n	8007fae <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007fac:	2300      	movs	r3, #0
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d00a      	beq.n	8007fc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007fb2:	68fa      	ldr	r2, [r7, #12]
 8007fb4:	4b17      	ldr	r3, [pc, #92]	; (8008014 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007fb6:	4413      	add	r3, r2
 8007fb8:	009b      	lsls	r3, r3, #2
 8007fba:	461a      	mov	r2, r3
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	4a15      	ldr	r2, [pc, #84]	; (8008018 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007fc4:	671a      	str	r2, [r3, #112]	; 0x70
 8007fc6:	e009      	b.n	8007fdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007fc8:	68fa      	ldr	r2, [r7, #12]
 8007fca:	4b14      	ldr	r3, [pc, #80]	; (800801c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007fcc:	4413      	add	r3, r2
 8007fce:	009b      	lsls	r3, r3, #2
 8007fd0:	461a      	mov	r2, r3
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	4a11      	ldr	r2, [pc, #68]	; (8008020 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007fda:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	3b01      	subs	r3, #1
 8007fe0:	2201      	movs	r2, #1
 8007fe2:	409a      	lsls	r2, r3
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007fe8:	bf00      	nop
 8007fea:	3714      	adds	r7, #20
 8007fec:	46bd      	mov	sp, r7
 8007fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff2:	4770      	bx	lr
 8007ff4:	58025408 	.word	0x58025408
 8007ff8:	5802541c 	.word	0x5802541c
 8007ffc:	58025430 	.word	0x58025430
 8008000:	58025444 	.word	0x58025444
 8008004:	58025458 	.word	0x58025458
 8008008:	5802546c 	.word	0x5802546c
 800800c:	58025480 	.word	0x58025480
 8008010:	58025494 	.word	0x58025494
 8008014:	1600963f 	.word	0x1600963f
 8008018:	58025940 	.word	0x58025940
 800801c:	1000823f 	.word	0x1000823f
 8008020:	40020940 	.word	0x40020940

08008024 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008024:	b480      	push	{r7}
 8008026:	b089      	sub	sp, #36	; 0x24
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
 800802c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800802e:	2300      	movs	r3, #0
 8008030:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008032:	4b89      	ldr	r3, [pc, #548]	; (8008258 <HAL_GPIO_Init+0x234>)
 8008034:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008036:	e194      	b.n	8008362 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	681a      	ldr	r2, [r3, #0]
 800803c:	2101      	movs	r1, #1
 800803e:	69fb      	ldr	r3, [r7, #28]
 8008040:	fa01 f303 	lsl.w	r3, r1, r3
 8008044:	4013      	ands	r3, r2
 8008046:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	2b00      	cmp	r3, #0
 800804c:	f000 8186 	beq.w	800835c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	f003 0303 	and.w	r3, r3, #3
 8008058:	2b01      	cmp	r3, #1
 800805a:	d005      	beq.n	8008068 <HAL_GPIO_Init+0x44>
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	685b      	ldr	r3, [r3, #4]
 8008060:	f003 0303 	and.w	r3, r3, #3
 8008064:	2b02      	cmp	r3, #2
 8008066:	d130      	bne.n	80080ca <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	689b      	ldr	r3, [r3, #8]
 800806c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800806e:	69fb      	ldr	r3, [r7, #28]
 8008070:	005b      	lsls	r3, r3, #1
 8008072:	2203      	movs	r2, #3
 8008074:	fa02 f303 	lsl.w	r3, r2, r3
 8008078:	43db      	mvns	r3, r3
 800807a:	69ba      	ldr	r2, [r7, #24]
 800807c:	4013      	ands	r3, r2
 800807e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	68da      	ldr	r2, [r3, #12]
 8008084:	69fb      	ldr	r3, [r7, #28]
 8008086:	005b      	lsls	r3, r3, #1
 8008088:	fa02 f303 	lsl.w	r3, r2, r3
 800808c:	69ba      	ldr	r2, [r7, #24]
 800808e:	4313      	orrs	r3, r2
 8008090:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	69ba      	ldr	r2, [r7, #24]
 8008096:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800809e:	2201      	movs	r2, #1
 80080a0:	69fb      	ldr	r3, [r7, #28]
 80080a2:	fa02 f303 	lsl.w	r3, r2, r3
 80080a6:	43db      	mvns	r3, r3
 80080a8:	69ba      	ldr	r2, [r7, #24]
 80080aa:	4013      	ands	r3, r2
 80080ac:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	091b      	lsrs	r3, r3, #4
 80080b4:	f003 0201 	and.w	r2, r3, #1
 80080b8:	69fb      	ldr	r3, [r7, #28]
 80080ba:	fa02 f303 	lsl.w	r3, r2, r3
 80080be:	69ba      	ldr	r2, [r7, #24]
 80080c0:	4313      	orrs	r3, r2
 80080c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	69ba      	ldr	r2, [r7, #24]
 80080c8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	f003 0303 	and.w	r3, r3, #3
 80080d2:	2b03      	cmp	r3, #3
 80080d4:	d017      	beq.n	8008106 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	68db      	ldr	r3, [r3, #12]
 80080da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80080dc:	69fb      	ldr	r3, [r7, #28]
 80080de:	005b      	lsls	r3, r3, #1
 80080e0:	2203      	movs	r2, #3
 80080e2:	fa02 f303 	lsl.w	r3, r2, r3
 80080e6:	43db      	mvns	r3, r3
 80080e8:	69ba      	ldr	r2, [r7, #24]
 80080ea:	4013      	ands	r3, r2
 80080ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	689a      	ldr	r2, [r3, #8]
 80080f2:	69fb      	ldr	r3, [r7, #28]
 80080f4:	005b      	lsls	r3, r3, #1
 80080f6:	fa02 f303 	lsl.w	r3, r2, r3
 80080fa:	69ba      	ldr	r2, [r7, #24]
 80080fc:	4313      	orrs	r3, r2
 80080fe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	69ba      	ldr	r2, [r7, #24]
 8008104:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	685b      	ldr	r3, [r3, #4]
 800810a:	f003 0303 	and.w	r3, r3, #3
 800810e:	2b02      	cmp	r3, #2
 8008110:	d123      	bne.n	800815a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008112:	69fb      	ldr	r3, [r7, #28]
 8008114:	08da      	lsrs	r2, r3, #3
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	3208      	adds	r2, #8
 800811a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800811e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008120:	69fb      	ldr	r3, [r7, #28]
 8008122:	f003 0307 	and.w	r3, r3, #7
 8008126:	009b      	lsls	r3, r3, #2
 8008128:	220f      	movs	r2, #15
 800812a:	fa02 f303 	lsl.w	r3, r2, r3
 800812e:	43db      	mvns	r3, r3
 8008130:	69ba      	ldr	r2, [r7, #24]
 8008132:	4013      	ands	r3, r2
 8008134:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	691a      	ldr	r2, [r3, #16]
 800813a:	69fb      	ldr	r3, [r7, #28]
 800813c:	f003 0307 	and.w	r3, r3, #7
 8008140:	009b      	lsls	r3, r3, #2
 8008142:	fa02 f303 	lsl.w	r3, r2, r3
 8008146:	69ba      	ldr	r2, [r7, #24]
 8008148:	4313      	orrs	r3, r2
 800814a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800814c:	69fb      	ldr	r3, [r7, #28]
 800814e:	08da      	lsrs	r2, r3, #3
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	3208      	adds	r2, #8
 8008154:	69b9      	ldr	r1, [r7, #24]
 8008156:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008160:	69fb      	ldr	r3, [r7, #28]
 8008162:	005b      	lsls	r3, r3, #1
 8008164:	2203      	movs	r2, #3
 8008166:	fa02 f303 	lsl.w	r3, r2, r3
 800816a:	43db      	mvns	r3, r3
 800816c:	69ba      	ldr	r2, [r7, #24]
 800816e:	4013      	ands	r3, r2
 8008170:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	f003 0203 	and.w	r2, r3, #3
 800817a:	69fb      	ldr	r3, [r7, #28]
 800817c:	005b      	lsls	r3, r3, #1
 800817e:	fa02 f303 	lsl.w	r3, r2, r3
 8008182:	69ba      	ldr	r2, [r7, #24]
 8008184:	4313      	orrs	r3, r2
 8008186:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	69ba      	ldr	r2, [r7, #24]
 800818c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	685b      	ldr	r3, [r3, #4]
 8008192:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008196:	2b00      	cmp	r3, #0
 8008198:	f000 80e0 	beq.w	800835c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800819c:	4b2f      	ldr	r3, [pc, #188]	; (800825c <HAL_GPIO_Init+0x238>)
 800819e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80081a2:	4a2e      	ldr	r2, [pc, #184]	; (800825c <HAL_GPIO_Init+0x238>)
 80081a4:	f043 0302 	orr.w	r3, r3, #2
 80081a8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80081ac:	4b2b      	ldr	r3, [pc, #172]	; (800825c <HAL_GPIO_Init+0x238>)
 80081ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80081b2:	f003 0302 	and.w	r3, r3, #2
 80081b6:	60fb      	str	r3, [r7, #12]
 80081b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80081ba:	4a29      	ldr	r2, [pc, #164]	; (8008260 <HAL_GPIO_Init+0x23c>)
 80081bc:	69fb      	ldr	r3, [r7, #28]
 80081be:	089b      	lsrs	r3, r3, #2
 80081c0:	3302      	adds	r3, #2
 80081c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80081c8:	69fb      	ldr	r3, [r7, #28]
 80081ca:	f003 0303 	and.w	r3, r3, #3
 80081ce:	009b      	lsls	r3, r3, #2
 80081d0:	220f      	movs	r2, #15
 80081d2:	fa02 f303 	lsl.w	r3, r2, r3
 80081d6:	43db      	mvns	r3, r3
 80081d8:	69ba      	ldr	r2, [r7, #24]
 80081da:	4013      	ands	r3, r2
 80081dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	4a20      	ldr	r2, [pc, #128]	; (8008264 <HAL_GPIO_Init+0x240>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d052      	beq.n	800828c <HAL_GPIO_Init+0x268>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	4a1f      	ldr	r2, [pc, #124]	; (8008268 <HAL_GPIO_Init+0x244>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d031      	beq.n	8008252 <HAL_GPIO_Init+0x22e>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	4a1e      	ldr	r2, [pc, #120]	; (800826c <HAL_GPIO_Init+0x248>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d02b      	beq.n	800824e <HAL_GPIO_Init+0x22a>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	4a1d      	ldr	r2, [pc, #116]	; (8008270 <HAL_GPIO_Init+0x24c>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d025      	beq.n	800824a <HAL_GPIO_Init+0x226>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	4a1c      	ldr	r2, [pc, #112]	; (8008274 <HAL_GPIO_Init+0x250>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d01f      	beq.n	8008246 <HAL_GPIO_Init+0x222>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	4a1b      	ldr	r2, [pc, #108]	; (8008278 <HAL_GPIO_Init+0x254>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d019      	beq.n	8008242 <HAL_GPIO_Init+0x21e>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	4a1a      	ldr	r2, [pc, #104]	; (800827c <HAL_GPIO_Init+0x258>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d013      	beq.n	800823e <HAL_GPIO_Init+0x21a>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	4a19      	ldr	r2, [pc, #100]	; (8008280 <HAL_GPIO_Init+0x25c>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d00d      	beq.n	800823a <HAL_GPIO_Init+0x216>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	4a18      	ldr	r2, [pc, #96]	; (8008284 <HAL_GPIO_Init+0x260>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d007      	beq.n	8008236 <HAL_GPIO_Init+0x212>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	4a17      	ldr	r2, [pc, #92]	; (8008288 <HAL_GPIO_Init+0x264>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d101      	bne.n	8008232 <HAL_GPIO_Init+0x20e>
 800822e:	2309      	movs	r3, #9
 8008230:	e02d      	b.n	800828e <HAL_GPIO_Init+0x26a>
 8008232:	230a      	movs	r3, #10
 8008234:	e02b      	b.n	800828e <HAL_GPIO_Init+0x26a>
 8008236:	2308      	movs	r3, #8
 8008238:	e029      	b.n	800828e <HAL_GPIO_Init+0x26a>
 800823a:	2307      	movs	r3, #7
 800823c:	e027      	b.n	800828e <HAL_GPIO_Init+0x26a>
 800823e:	2306      	movs	r3, #6
 8008240:	e025      	b.n	800828e <HAL_GPIO_Init+0x26a>
 8008242:	2305      	movs	r3, #5
 8008244:	e023      	b.n	800828e <HAL_GPIO_Init+0x26a>
 8008246:	2304      	movs	r3, #4
 8008248:	e021      	b.n	800828e <HAL_GPIO_Init+0x26a>
 800824a:	2303      	movs	r3, #3
 800824c:	e01f      	b.n	800828e <HAL_GPIO_Init+0x26a>
 800824e:	2302      	movs	r3, #2
 8008250:	e01d      	b.n	800828e <HAL_GPIO_Init+0x26a>
 8008252:	2301      	movs	r3, #1
 8008254:	e01b      	b.n	800828e <HAL_GPIO_Init+0x26a>
 8008256:	bf00      	nop
 8008258:	58000080 	.word	0x58000080
 800825c:	58024400 	.word	0x58024400
 8008260:	58000400 	.word	0x58000400
 8008264:	58020000 	.word	0x58020000
 8008268:	58020400 	.word	0x58020400
 800826c:	58020800 	.word	0x58020800
 8008270:	58020c00 	.word	0x58020c00
 8008274:	58021000 	.word	0x58021000
 8008278:	58021400 	.word	0x58021400
 800827c:	58021800 	.word	0x58021800
 8008280:	58021c00 	.word	0x58021c00
 8008284:	58022000 	.word	0x58022000
 8008288:	58022400 	.word	0x58022400
 800828c:	2300      	movs	r3, #0
 800828e:	69fa      	ldr	r2, [r7, #28]
 8008290:	f002 0203 	and.w	r2, r2, #3
 8008294:	0092      	lsls	r2, r2, #2
 8008296:	4093      	lsls	r3, r2
 8008298:	69ba      	ldr	r2, [r7, #24]
 800829a:	4313      	orrs	r3, r2
 800829c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800829e:	4938      	ldr	r1, [pc, #224]	; (8008380 <HAL_GPIO_Init+0x35c>)
 80082a0:	69fb      	ldr	r3, [r7, #28]
 80082a2:	089b      	lsrs	r3, r3, #2
 80082a4:	3302      	adds	r3, #2
 80082a6:	69ba      	ldr	r2, [r7, #24]
 80082a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80082ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	43db      	mvns	r3, r3
 80082b8:	69ba      	ldr	r2, [r7, #24]
 80082ba:	4013      	ands	r3, r2
 80082bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	685b      	ldr	r3, [r3, #4]
 80082c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d003      	beq.n	80082d2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80082ca:	69ba      	ldr	r2, [r7, #24]
 80082cc:	693b      	ldr	r3, [r7, #16]
 80082ce:	4313      	orrs	r3, r2
 80082d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80082d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80082d6:	69bb      	ldr	r3, [r7, #24]
 80082d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80082da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80082e2:	693b      	ldr	r3, [r7, #16]
 80082e4:	43db      	mvns	r3, r3
 80082e6:	69ba      	ldr	r2, [r7, #24]
 80082e8:	4013      	ands	r3, r2
 80082ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	685b      	ldr	r3, [r3, #4]
 80082f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d003      	beq.n	8008300 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80082f8:	69ba      	ldr	r2, [r7, #24]
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	4313      	orrs	r3, r2
 80082fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008300:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008304:	69bb      	ldr	r3, [r7, #24]
 8008306:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	685b      	ldr	r3, [r3, #4]
 800830c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	43db      	mvns	r3, r3
 8008312:	69ba      	ldr	r2, [r7, #24]
 8008314:	4013      	ands	r3, r2
 8008316:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	685b      	ldr	r3, [r3, #4]
 800831c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008320:	2b00      	cmp	r3, #0
 8008322:	d003      	beq.n	800832c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008324:	69ba      	ldr	r2, [r7, #24]
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	4313      	orrs	r3, r2
 800832a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800832c:	697b      	ldr	r3, [r7, #20]
 800832e:	69ba      	ldr	r2, [r7, #24]
 8008330:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008332:	697b      	ldr	r3, [r7, #20]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008338:	693b      	ldr	r3, [r7, #16]
 800833a:	43db      	mvns	r3, r3
 800833c:	69ba      	ldr	r2, [r7, #24]
 800833e:	4013      	ands	r3, r2
 8008340:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	685b      	ldr	r3, [r3, #4]
 8008346:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800834a:	2b00      	cmp	r3, #0
 800834c:	d003      	beq.n	8008356 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800834e:	69ba      	ldr	r2, [r7, #24]
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	4313      	orrs	r3, r2
 8008354:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	69ba      	ldr	r2, [r7, #24]
 800835a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800835c:	69fb      	ldr	r3, [r7, #28]
 800835e:	3301      	adds	r3, #1
 8008360:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	681a      	ldr	r2, [r3, #0]
 8008366:	69fb      	ldr	r3, [r7, #28]
 8008368:	fa22 f303 	lsr.w	r3, r2, r3
 800836c:	2b00      	cmp	r3, #0
 800836e:	f47f ae63 	bne.w	8008038 <HAL_GPIO_Init+0x14>
  }
}
 8008372:	bf00      	nop
 8008374:	bf00      	nop
 8008376:	3724      	adds	r7, #36	; 0x24
 8008378:	46bd      	mov	sp, r7
 800837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837e:	4770      	bx	lr
 8008380:	58000400 	.word	0x58000400

08008384 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008384:	b480      	push	{r7}
 8008386:	b083      	sub	sp, #12
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
 800838c:	460b      	mov	r3, r1
 800838e:	807b      	strh	r3, [r7, #2]
 8008390:	4613      	mov	r3, r2
 8008392:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008394:	787b      	ldrb	r3, [r7, #1]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d003      	beq.n	80083a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800839a:	887a      	ldrh	r2, [r7, #2]
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80083a0:	e003      	b.n	80083aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80083a2:	887b      	ldrh	r3, [r7, #2]
 80083a4:	041a      	lsls	r2, r3, #16
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	619a      	str	r2, [r3, #24]
}
 80083aa:	bf00      	nop
 80083ac:	370c      	adds	r7, #12
 80083ae:	46bd      	mov	sp, r7
 80083b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b4:	4770      	bx	lr
	...

080083b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b082      	sub	sp, #8
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d101      	bne.n	80083ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80083c6:	2301      	movs	r3, #1
 80083c8:	e08b      	b.n	80084e2 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80083d0:	b2db      	uxtb	r3, r3
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d106      	bne.n	80083e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2200      	movs	r2, #0
 80083da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f7f8 fe5e 	bl	80010a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2224      	movs	r2, #36	; 0x24
 80083e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	681a      	ldr	r2, [r3, #0]
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f022 0201 	bic.w	r2, r2, #1
 80083fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	685a      	ldr	r2, [r3, #4]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008408:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	689a      	ldr	r2, [r3, #8]
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008418:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	68db      	ldr	r3, [r3, #12]
 800841e:	2b01      	cmp	r3, #1
 8008420:	d107      	bne.n	8008432 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	689a      	ldr	r2, [r3, #8]
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800842e:	609a      	str	r2, [r3, #8]
 8008430:	e006      	b.n	8008440 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	689a      	ldr	r2, [r3, #8]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800843e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	68db      	ldr	r3, [r3, #12]
 8008444:	2b02      	cmp	r3, #2
 8008446:	d108      	bne.n	800845a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	685a      	ldr	r2, [r3, #4]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008456:	605a      	str	r2, [r3, #4]
 8008458:	e007      	b.n	800846a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	685a      	ldr	r2, [r3, #4]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008468:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	6859      	ldr	r1, [r3, #4]
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681a      	ldr	r2, [r3, #0]
 8008474:	4b1d      	ldr	r3, [pc, #116]	; (80084ec <HAL_I2C_Init+0x134>)
 8008476:	430b      	orrs	r3, r1
 8008478:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	68da      	ldr	r2, [r3, #12]
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008488:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	691a      	ldr	r2, [r3, #16]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	695b      	ldr	r3, [r3, #20]
 8008492:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	699b      	ldr	r3, [r3, #24]
 800849a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	430a      	orrs	r2, r1
 80084a2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	69d9      	ldr	r1, [r3, #28]
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6a1a      	ldr	r2, [r3, #32]
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	430a      	orrs	r2, r1
 80084b2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	681a      	ldr	r2, [r3, #0]
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f042 0201 	orr.w	r2, r2, #1
 80084c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2200      	movs	r2, #0
 80084c8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2220      	movs	r2, #32
 80084ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2200      	movs	r2, #0
 80084d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2200      	movs	r2, #0
 80084dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80084e0:	2300      	movs	r3, #0
}
 80084e2:	4618      	mov	r0, r3
 80084e4:	3708      	adds	r7, #8
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}
 80084ea:	bf00      	nop
 80084ec:	02008000 	.word	0x02008000

080084f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b083      	sub	sp, #12
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008500:	b2db      	uxtb	r3, r3
 8008502:	2b20      	cmp	r3, #32
 8008504:	d138      	bne.n	8008578 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800850c:	2b01      	cmp	r3, #1
 800850e:	d101      	bne.n	8008514 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008510:	2302      	movs	r3, #2
 8008512:	e032      	b.n	800857a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2201      	movs	r2, #1
 8008518:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2224      	movs	r2, #36	; 0x24
 8008520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	681a      	ldr	r2, [r3, #0]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f022 0201 	bic.w	r2, r2, #1
 8008532:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	681a      	ldr	r2, [r3, #0]
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008542:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	6819      	ldr	r1, [r3, #0]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	683a      	ldr	r2, [r7, #0]
 8008550:	430a      	orrs	r2, r1
 8008552:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	681a      	ldr	r2, [r3, #0]
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f042 0201 	orr.w	r2, r2, #1
 8008562:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2220      	movs	r2, #32
 8008568:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2200      	movs	r2, #0
 8008570:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008574:	2300      	movs	r3, #0
 8008576:	e000      	b.n	800857a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008578:	2302      	movs	r3, #2
  }
}
 800857a:	4618      	mov	r0, r3
 800857c:	370c      	adds	r7, #12
 800857e:	46bd      	mov	sp, r7
 8008580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008584:	4770      	bx	lr

08008586 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008586:	b480      	push	{r7}
 8008588:	b085      	sub	sp, #20
 800858a:	af00      	add	r7, sp, #0
 800858c:	6078      	str	r0, [r7, #4]
 800858e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008596:	b2db      	uxtb	r3, r3
 8008598:	2b20      	cmp	r3, #32
 800859a:	d139      	bne.n	8008610 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80085a2:	2b01      	cmp	r3, #1
 80085a4:	d101      	bne.n	80085aa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80085a6:	2302      	movs	r3, #2
 80085a8:	e033      	b.n	8008612 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2201      	movs	r2, #1
 80085ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2224      	movs	r2, #36	; 0x24
 80085b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	681a      	ldr	r2, [r3, #0]
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f022 0201 	bic.w	r2, r2, #1
 80085c8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80085d8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	021b      	lsls	r3, r3, #8
 80085de:	68fa      	ldr	r2, [r7, #12]
 80085e0:	4313      	orrs	r3, r2
 80085e2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	68fa      	ldr	r2, [r7, #12]
 80085ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	681a      	ldr	r2, [r3, #0]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f042 0201 	orr.w	r2, r2, #1
 80085fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2220      	movs	r2, #32
 8008600:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2200      	movs	r2, #0
 8008608:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800860c:	2300      	movs	r3, #0
 800860e:	e000      	b.n	8008612 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008610:	2302      	movs	r3, #2
  }
}
 8008612:	4618      	mov	r0, r3
 8008614:	3714      	adds	r7, #20
 8008616:	46bd      	mov	sp, r7
 8008618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861c:	4770      	bx	lr
	...

08008620 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8008620:	b480      	push	{r7}
 8008622:	b085      	sub	sp, #20
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008628:	4b0d      	ldr	r3, [pc, #52]	; (8008660 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800862a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800862e:	4a0c      	ldr	r2, [pc, #48]	; (8008660 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8008630:	f043 0302 	orr.w	r3, r3, #2
 8008634:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008638:	4b09      	ldr	r3, [pc, #36]	; (8008660 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800863a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800863e:	f003 0302 	and.w	r3, r3, #2
 8008642:	60fb      	str	r3, [r7, #12]
 8008644:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 8008646:	4b07      	ldr	r3, [pc, #28]	; (8008664 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8008648:	685a      	ldr	r2, [r3, #4]
 800864a:	4906      	ldr	r1, [pc, #24]	; (8008664 <HAL_I2CEx_EnableFastModePlus+0x44>)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	4313      	orrs	r3, r2
 8008650:	604b      	str	r3, [r1, #4]
}
 8008652:	bf00      	nop
 8008654:	3714      	adds	r7, #20
 8008656:	46bd      	mov	sp, r7
 8008658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865c:	4770      	bx	lr
 800865e:	bf00      	nop
 8008660:	58024400 	.word	0x58024400
 8008664:	58000400 	.word	0x58000400

08008668 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b084      	sub	sp, #16
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008670:	4b19      	ldr	r3, [pc, #100]	; (80086d8 <HAL_PWREx_ConfigSupply+0x70>)
 8008672:	68db      	ldr	r3, [r3, #12]
 8008674:	f003 0304 	and.w	r3, r3, #4
 8008678:	2b04      	cmp	r3, #4
 800867a:	d00a      	beq.n	8008692 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800867c:	4b16      	ldr	r3, [pc, #88]	; (80086d8 <HAL_PWREx_ConfigSupply+0x70>)
 800867e:	68db      	ldr	r3, [r3, #12]
 8008680:	f003 0307 	and.w	r3, r3, #7
 8008684:	687a      	ldr	r2, [r7, #4]
 8008686:	429a      	cmp	r2, r3
 8008688:	d001      	beq.n	800868e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800868a:	2301      	movs	r3, #1
 800868c:	e01f      	b.n	80086ce <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800868e:	2300      	movs	r3, #0
 8008690:	e01d      	b.n	80086ce <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008692:	4b11      	ldr	r3, [pc, #68]	; (80086d8 <HAL_PWREx_ConfigSupply+0x70>)
 8008694:	68db      	ldr	r3, [r3, #12]
 8008696:	f023 0207 	bic.w	r2, r3, #7
 800869a:	490f      	ldr	r1, [pc, #60]	; (80086d8 <HAL_PWREx_ConfigSupply+0x70>)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	4313      	orrs	r3, r2
 80086a0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80086a2:	f7fa fd4f 	bl	8003144 <HAL_GetTick>
 80086a6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80086a8:	e009      	b.n	80086be <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80086aa:	f7fa fd4b 	bl	8003144 <HAL_GetTick>
 80086ae:	4602      	mov	r2, r0
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	1ad3      	subs	r3, r2, r3
 80086b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80086b8:	d901      	bls.n	80086be <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80086ba:	2301      	movs	r3, #1
 80086bc:	e007      	b.n	80086ce <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80086be:	4b06      	ldr	r3, [pc, #24]	; (80086d8 <HAL_PWREx_ConfigSupply+0x70>)
 80086c0:	685b      	ldr	r3, [r3, #4]
 80086c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80086c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086ca:	d1ee      	bne.n	80086aa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80086cc:	2300      	movs	r3, #0
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	3710      	adds	r7, #16
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}
 80086d6:	bf00      	nop
 80086d8:	58024800 	.word	0x58024800

080086dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b08c      	sub	sp, #48	; 0x30
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d102      	bne.n	80086f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80086ea:	2301      	movs	r3, #1
 80086ec:	f000 bc48 	b.w	8008f80 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f003 0301 	and.w	r3, r3, #1
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	f000 8088 	beq.w	800880e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80086fe:	4b99      	ldr	r3, [pc, #612]	; (8008964 <HAL_RCC_OscConfig+0x288>)
 8008700:	691b      	ldr	r3, [r3, #16]
 8008702:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008706:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008708:	4b96      	ldr	r3, [pc, #600]	; (8008964 <HAL_RCC_OscConfig+0x288>)
 800870a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800870c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800870e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008710:	2b10      	cmp	r3, #16
 8008712:	d007      	beq.n	8008724 <HAL_RCC_OscConfig+0x48>
 8008714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008716:	2b18      	cmp	r3, #24
 8008718:	d111      	bne.n	800873e <HAL_RCC_OscConfig+0x62>
 800871a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800871c:	f003 0303 	and.w	r3, r3, #3
 8008720:	2b02      	cmp	r3, #2
 8008722:	d10c      	bne.n	800873e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008724:	4b8f      	ldr	r3, [pc, #572]	; (8008964 <HAL_RCC_OscConfig+0x288>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800872c:	2b00      	cmp	r3, #0
 800872e:	d06d      	beq.n	800880c <HAL_RCC_OscConfig+0x130>
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d169      	bne.n	800880c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008738:	2301      	movs	r3, #1
 800873a:	f000 bc21 	b.w	8008f80 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	685b      	ldr	r3, [r3, #4]
 8008742:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008746:	d106      	bne.n	8008756 <HAL_RCC_OscConfig+0x7a>
 8008748:	4b86      	ldr	r3, [pc, #536]	; (8008964 <HAL_RCC_OscConfig+0x288>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4a85      	ldr	r2, [pc, #532]	; (8008964 <HAL_RCC_OscConfig+0x288>)
 800874e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008752:	6013      	str	r3, [r2, #0]
 8008754:	e02e      	b.n	80087b4 <HAL_RCC_OscConfig+0xd8>
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	685b      	ldr	r3, [r3, #4]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d10c      	bne.n	8008778 <HAL_RCC_OscConfig+0x9c>
 800875e:	4b81      	ldr	r3, [pc, #516]	; (8008964 <HAL_RCC_OscConfig+0x288>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	4a80      	ldr	r2, [pc, #512]	; (8008964 <HAL_RCC_OscConfig+0x288>)
 8008764:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008768:	6013      	str	r3, [r2, #0]
 800876a:	4b7e      	ldr	r3, [pc, #504]	; (8008964 <HAL_RCC_OscConfig+0x288>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	4a7d      	ldr	r2, [pc, #500]	; (8008964 <HAL_RCC_OscConfig+0x288>)
 8008770:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008774:	6013      	str	r3, [r2, #0]
 8008776:	e01d      	b.n	80087b4 <HAL_RCC_OscConfig+0xd8>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	685b      	ldr	r3, [r3, #4]
 800877c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008780:	d10c      	bne.n	800879c <HAL_RCC_OscConfig+0xc0>
 8008782:	4b78      	ldr	r3, [pc, #480]	; (8008964 <HAL_RCC_OscConfig+0x288>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4a77      	ldr	r2, [pc, #476]	; (8008964 <HAL_RCC_OscConfig+0x288>)
 8008788:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800878c:	6013      	str	r3, [r2, #0]
 800878e:	4b75      	ldr	r3, [pc, #468]	; (8008964 <HAL_RCC_OscConfig+0x288>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	4a74      	ldr	r2, [pc, #464]	; (8008964 <HAL_RCC_OscConfig+0x288>)
 8008794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008798:	6013      	str	r3, [r2, #0]
 800879a:	e00b      	b.n	80087b4 <HAL_RCC_OscConfig+0xd8>
 800879c:	4b71      	ldr	r3, [pc, #452]	; (8008964 <HAL_RCC_OscConfig+0x288>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4a70      	ldr	r2, [pc, #448]	; (8008964 <HAL_RCC_OscConfig+0x288>)
 80087a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80087a6:	6013      	str	r3, [r2, #0]
 80087a8:	4b6e      	ldr	r3, [pc, #440]	; (8008964 <HAL_RCC_OscConfig+0x288>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	4a6d      	ldr	r2, [pc, #436]	; (8008964 <HAL_RCC_OscConfig+0x288>)
 80087ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80087b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	685b      	ldr	r3, [r3, #4]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d013      	beq.n	80087e4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087bc:	f7fa fcc2 	bl	8003144 <HAL_GetTick>
 80087c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80087c2:	e008      	b.n	80087d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80087c4:	f7fa fcbe 	bl	8003144 <HAL_GetTick>
 80087c8:	4602      	mov	r2, r0
 80087ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087cc:	1ad3      	subs	r3, r2, r3
 80087ce:	2b64      	cmp	r3, #100	; 0x64
 80087d0:	d901      	bls.n	80087d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80087d2:	2303      	movs	r3, #3
 80087d4:	e3d4      	b.n	8008f80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80087d6:	4b63      	ldr	r3, [pc, #396]	; (8008964 <HAL_RCC_OscConfig+0x288>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d0f0      	beq.n	80087c4 <HAL_RCC_OscConfig+0xe8>
 80087e2:	e014      	b.n	800880e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087e4:	f7fa fcae 	bl	8003144 <HAL_GetTick>
 80087e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80087ea:	e008      	b.n	80087fe <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80087ec:	f7fa fcaa 	bl	8003144 <HAL_GetTick>
 80087f0:	4602      	mov	r2, r0
 80087f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f4:	1ad3      	subs	r3, r2, r3
 80087f6:	2b64      	cmp	r3, #100	; 0x64
 80087f8:	d901      	bls.n	80087fe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80087fa:	2303      	movs	r3, #3
 80087fc:	e3c0      	b.n	8008f80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80087fe:	4b59      	ldr	r3, [pc, #356]	; (8008964 <HAL_RCC_OscConfig+0x288>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008806:	2b00      	cmp	r3, #0
 8008808:	d1f0      	bne.n	80087ec <HAL_RCC_OscConfig+0x110>
 800880a:	e000      	b.n	800880e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800880c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f003 0302 	and.w	r3, r3, #2
 8008816:	2b00      	cmp	r3, #0
 8008818:	f000 80ca 	beq.w	80089b0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800881c:	4b51      	ldr	r3, [pc, #324]	; (8008964 <HAL_RCC_OscConfig+0x288>)
 800881e:	691b      	ldr	r3, [r3, #16]
 8008820:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008824:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008826:	4b4f      	ldr	r3, [pc, #316]	; (8008964 <HAL_RCC_OscConfig+0x288>)
 8008828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800882a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800882c:	6a3b      	ldr	r3, [r7, #32]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d007      	beq.n	8008842 <HAL_RCC_OscConfig+0x166>
 8008832:	6a3b      	ldr	r3, [r7, #32]
 8008834:	2b18      	cmp	r3, #24
 8008836:	d156      	bne.n	80088e6 <HAL_RCC_OscConfig+0x20a>
 8008838:	69fb      	ldr	r3, [r7, #28]
 800883a:	f003 0303 	and.w	r3, r3, #3
 800883e:	2b00      	cmp	r3, #0
 8008840:	d151      	bne.n	80088e6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008842:	4b48      	ldr	r3, [pc, #288]	; (8008964 <HAL_RCC_OscConfig+0x288>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f003 0304 	and.w	r3, r3, #4
 800884a:	2b00      	cmp	r3, #0
 800884c:	d005      	beq.n	800885a <HAL_RCC_OscConfig+0x17e>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	68db      	ldr	r3, [r3, #12]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d101      	bne.n	800885a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8008856:	2301      	movs	r3, #1
 8008858:	e392      	b.n	8008f80 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800885a:	4b42      	ldr	r3, [pc, #264]	; (8008964 <HAL_RCC_OscConfig+0x288>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f023 0219 	bic.w	r2, r3, #25
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	68db      	ldr	r3, [r3, #12]
 8008866:	493f      	ldr	r1, [pc, #252]	; (8008964 <HAL_RCC_OscConfig+0x288>)
 8008868:	4313      	orrs	r3, r2
 800886a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800886c:	f7fa fc6a 	bl	8003144 <HAL_GetTick>
 8008870:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008872:	e008      	b.n	8008886 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008874:	f7fa fc66 	bl	8003144 <HAL_GetTick>
 8008878:	4602      	mov	r2, r0
 800887a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800887c:	1ad3      	subs	r3, r2, r3
 800887e:	2b02      	cmp	r3, #2
 8008880:	d901      	bls.n	8008886 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008882:	2303      	movs	r3, #3
 8008884:	e37c      	b.n	8008f80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008886:	4b37      	ldr	r3, [pc, #220]	; (8008964 <HAL_RCC_OscConfig+0x288>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f003 0304 	and.w	r3, r3, #4
 800888e:	2b00      	cmp	r3, #0
 8008890:	d0f0      	beq.n	8008874 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008892:	f7fa fc63 	bl	800315c <HAL_GetREVID>
 8008896:	4603      	mov	r3, r0
 8008898:	f241 0203 	movw	r2, #4099	; 0x1003
 800889c:	4293      	cmp	r3, r2
 800889e:	d817      	bhi.n	80088d0 <HAL_RCC_OscConfig+0x1f4>
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	691b      	ldr	r3, [r3, #16]
 80088a4:	2b40      	cmp	r3, #64	; 0x40
 80088a6:	d108      	bne.n	80088ba <HAL_RCC_OscConfig+0x1de>
 80088a8:	4b2e      	ldr	r3, [pc, #184]	; (8008964 <HAL_RCC_OscConfig+0x288>)
 80088aa:	685b      	ldr	r3, [r3, #4]
 80088ac:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80088b0:	4a2c      	ldr	r2, [pc, #176]	; (8008964 <HAL_RCC_OscConfig+0x288>)
 80088b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088b6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80088b8:	e07a      	b.n	80089b0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088ba:	4b2a      	ldr	r3, [pc, #168]	; (8008964 <HAL_RCC_OscConfig+0x288>)
 80088bc:	685b      	ldr	r3, [r3, #4]
 80088be:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	691b      	ldr	r3, [r3, #16]
 80088c6:	031b      	lsls	r3, r3, #12
 80088c8:	4926      	ldr	r1, [pc, #152]	; (8008964 <HAL_RCC_OscConfig+0x288>)
 80088ca:	4313      	orrs	r3, r2
 80088cc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80088ce:	e06f      	b.n	80089b0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088d0:	4b24      	ldr	r3, [pc, #144]	; (8008964 <HAL_RCC_OscConfig+0x288>)
 80088d2:	685b      	ldr	r3, [r3, #4]
 80088d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	691b      	ldr	r3, [r3, #16]
 80088dc:	061b      	lsls	r3, r3, #24
 80088de:	4921      	ldr	r1, [pc, #132]	; (8008964 <HAL_RCC_OscConfig+0x288>)
 80088e0:	4313      	orrs	r3, r2
 80088e2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80088e4:	e064      	b.n	80089b0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	68db      	ldr	r3, [r3, #12]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d047      	beq.n	800897e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80088ee:	4b1d      	ldr	r3, [pc, #116]	; (8008964 <HAL_RCC_OscConfig+0x288>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f023 0219 	bic.w	r2, r3, #25
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	68db      	ldr	r3, [r3, #12]
 80088fa:	491a      	ldr	r1, [pc, #104]	; (8008964 <HAL_RCC_OscConfig+0x288>)
 80088fc:	4313      	orrs	r3, r2
 80088fe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008900:	f7fa fc20 	bl	8003144 <HAL_GetTick>
 8008904:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008906:	e008      	b.n	800891a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008908:	f7fa fc1c 	bl	8003144 <HAL_GetTick>
 800890c:	4602      	mov	r2, r0
 800890e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008910:	1ad3      	subs	r3, r2, r3
 8008912:	2b02      	cmp	r3, #2
 8008914:	d901      	bls.n	800891a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8008916:	2303      	movs	r3, #3
 8008918:	e332      	b.n	8008f80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800891a:	4b12      	ldr	r3, [pc, #72]	; (8008964 <HAL_RCC_OscConfig+0x288>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f003 0304 	and.w	r3, r3, #4
 8008922:	2b00      	cmp	r3, #0
 8008924:	d0f0      	beq.n	8008908 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008926:	f7fa fc19 	bl	800315c <HAL_GetREVID>
 800892a:	4603      	mov	r3, r0
 800892c:	f241 0203 	movw	r2, #4099	; 0x1003
 8008930:	4293      	cmp	r3, r2
 8008932:	d819      	bhi.n	8008968 <HAL_RCC_OscConfig+0x28c>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	691b      	ldr	r3, [r3, #16]
 8008938:	2b40      	cmp	r3, #64	; 0x40
 800893a:	d108      	bne.n	800894e <HAL_RCC_OscConfig+0x272>
 800893c:	4b09      	ldr	r3, [pc, #36]	; (8008964 <HAL_RCC_OscConfig+0x288>)
 800893e:	685b      	ldr	r3, [r3, #4]
 8008940:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008944:	4a07      	ldr	r2, [pc, #28]	; (8008964 <HAL_RCC_OscConfig+0x288>)
 8008946:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800894a:	6053      	str	r3, [r2, #4]
 800894c:	e030      	b.n	80089b0 <HAL_RCC_OscConfig+0x2d4>
 800894e:	4b05      	ldr	r3, [pc, #20]	; (8008964 <HAL_RCC_OscConfig+0x288>)
 8008950:	685b      	ldr	r3, [r3, #4]
 8008952:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	691b      	ldr	r3, [r3, #16]
 800895a:	031b      	lsls	r3, r3, #12
 800895c:	4901      	ldr	r1, [pc, #4]	; (8008964 <HAL_RCC_OscConfig+0x288>)
 800895e:	4313      	orrs	r3, r2
 8008960:	604b      	str	r3, [r1, #4]
 8008962:	e025      	b.n	80089b0 <HAL_RCC_OscConfig+0x2d4>
 8008964:	58024400 	.word	0x58024400
 8008968:	4b9a      	ldr	r3, [pc, #616]	; (8008bd4 <HAL_RCC_OscConfig+0x4f8>)
 800896a:	685b      	ldr	r3, [r3, #4]
 800896c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	691b      	ldr	r3, [r3, #16]
 8008974:	061b      	lsls	r3, r3, #24
 8008976:	4997      	ldr	r1, [pc, #604]	; (8008bd4 <HAL_RCC_OscConfig+0x4f8>)
 8008978:	4313      	orrs	r3, r2
 800897a:	604b      	str	r3, [r1, #4]
 800897c:	e018      	b.n	80089b0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800897e:	4b95      	ldr	r3, [pc, #596]	; (8008bd4 <HAL_RCC_OscConfig+0x4f8>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	4a94      	ldr	r2, [pc, #592]	; (8008bd4 <HAL_RCC_OscConfig+0x4f8>)
 8008984:	f023 0301 	bic.w	r3, r3, #1
 8008988:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800898a:	f7fa fbdb 	bl	8003144 <HAL_GetTick>
 800898e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008990:	e008      	b.n	80089a4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008992:	f7fa fbd7 	bl	8003144 <HAL_GetTick>
 8008996:	4602      	mov	r2, r0
 8008998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800899a:	1ad3      	subs	r3, r2, r3
 800899c:	2b02      	cmp	r3, #2
 800899e:	d901      	bls.n	80089a4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80089a0:	2303      	movs	r3, #3
 80089a2:	e2ed      	b.n	8008f80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80089a4:	4b8b      	ldr	r3, [pc, #556]	; (8008bd4 <HAL_RCC_OscConfig+0x4f8>)
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f003 0304 	and.w	r3, r3, #4
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d1f0      	bne.n	8008992 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f003 0310 	and.w	r3, r3, #16
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	f000 80a9 	beq.w	8008b10 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80089be:	4b85      	ldr	r3, [pc, #532]	; (8008bd4 <HAL_RCC_OscConfig+0x4f8>)
 80089c0:	691b      	ldr	r3, [r3, #16]
 80089c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80089c6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80089c8:	4b82      	ldr	r3, [pc, #520]	; (8008bd4 <HAL_RCC_OscConfig+0x4f8>)
 80089ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089cc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80089ce:	69bb      	ldr	r3, [r7, #24]
 80089d0:	2b08      	cmp	r3, #8
 80089d2:	d007      	beq.n	80089e4 <HAL_RCC_OscConfig+0x308>
 80089d4:	69bb      	ldr	r3, [r7, #24]
 80089d6:	2b18      	cmp	r3, #24
 80089d8:	d13a      	bne.n	8008a50 <HAL_RCC_OscConfig+0x374>
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	f003 0303 	and.w	r3, r3, #3
 80089e0:	2b01      	cmp	r3, #1
 80089e2:	d135      	bne.n	8008a50 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80089e4:	4b7b      	ldr	r3, [pc, #492]	; (8008bd4 <HAL_RCC_OscConfig+0x4f8>)
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d005      	beq.n	80089fc <HAL_RCC_OscConfig+0x320>
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	69db      	ldr	r3, [r3, #28]
 80089f4:	2b80      	cmp	r3, #128	; 0x80
 80089f6:	d001      	beq.n	80089fc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80089f8:	2301      	movs	r3, #1
 80089fa:	e2c1      	b.n	8008f80 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80089fc:	f7fa fbae 	bl	800315c <HAL_GetREVID>
 8008a00:	4603      	mov	r3, r0
 8008a02:	f241 0203 	movw	r2, #4099	; 0x1003
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d817      	bhi.n	8008a3a <HAL_RCC_OscConfig+0x35e>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6a1b      	ldr	r3, [r3, #32]
 8008a0e:	2b20      	cmp	r3, #32
 8008a10:	d108      	bne.n	8008a24 <HAL_RCC_OscConfig+0x348>
 8008a12:	4b70      	ldr	r3, [pc, #448]	; (8008bd4 <HAL_RCC_OscConfig+0x4f8>)
 8008a14:	685b      	ldr	r3, [r3, #4]
 8008a16:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008a1a:	4a6e      	ldr	r2, [pc, #440]	; (8008bd4 <HAL_RCC_OscConfig+0x4f8>)
 8008a1c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a20:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008a22:	e075      	b.n	8008b10 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008a24:	4b6b      	ldr	r3, [pc, #428]	; (8008bd4 <HAL_RCC_OscConfig+0x4f8>)
 8008a26:	685b      	ldr	r3, [r3, #4]
 8008a28:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6a1b      	ldr	r3, [r3, #32]
 8008a30:	069b      	lsls	r3, r3, #26
 8008a32:	4968      	ldr	r1, [pc, #416]	; (8008bd4 <HAL_RCC_OscConfig+0x4f8>)
 8008a34:	4313      	orrs	r3, r2
 8008a36:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008a38:	e06a      	b.n	8008b10 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008a3a:	4b66      	ldr	r3, [pc, #408]	; (8008bd4 <HAL_RCC_OscConfig+0x4f8>)
 8008a3c:	68db      	ldr	r3, [r3, #12]
 8008a3e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6a1b      	ldr	r3, [r3, #32]
 8008a46:	061b      	lsls	r3, r3, #24
 8008a48:	4962      	ldr	r1, [pc, #392]	; (8008bd4 <HAL_RCC_OscConfig+0x4f8>)
 8008a4a:	4313      	orrs	r3, r2
 8008a4c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008a4e:	e05f      	b.n	8008b10 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	69db      	ldr	r3, [r3, #28]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d042      	beq.n	8008ade <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008a58:	4b5e      	ldr	r3, [pc, #376]	; (8008bd4 <HAL_RCC_OscConfig+0x4f8>)
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	4a5d      	ldr	r2, [pc, #372]	; (8008bd4 <HAL_RCC_OscConfig+0x4f8>)
 8008a5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a64:	f7fa fb6e 	bl	8003144 <HAL_GetTick>
 8008a68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008a6a:	e008      	b.n	8008a7e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008a6c:	f7fa fb6a 	bl	8003144 <HAL_GetTick>
 8008a70:	4602      	mov	r2, r0
 8008a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a74:	1ad3      	subs	r3, r2, r3
 8008a76:	2b02      	cmp	r3, #2
 8008a78:	d901      	bls.n	8008a7e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8008a7a:	2303      	movs	r3, #3
 8008a7c:	e280      	b.n	8008f80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008a7e:	4b55      	ldr	r3, [pc, #340]	; (8008bd4 <HAL_RCC_OscConfig+0x4f8>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d0f0      	beq.n	8008a6c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008a8a:	f7fa fb67 	bl	800315c <HAL_GetREVID>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	f241 0203 	movw	r2, #4099	; 0x1003
 8008a94:	4293      	cmp	r3, r2
 8008a96:	d817      	bhi.n	8008ac8 <HAL_RCC_OscConfig+0x3ec>
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6a1b      	ldr	r3, [r3, #32]
 8008a9c:	2b20      	cmp	r3, #32
 8008a9e:	d108      	bne.n	8008ab2 <HAL_RCC_OscConfig+0x3d6>
 8008aa0:	4b4c      	ldr	r3, [pc, #304]	; (8008bd4 <HAL_RCC_OscConfig+0x4f8>)
 8008aa2:	685b      	ldr	r3, [r3, #4]
 8008aa4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008aa8:	4a4a      	ldr	r2, [pc, #296]	; (8008bd4 <HAL_RCC_OscConfig+0x4f8>)
 8008aaa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008aae:	6053      	str	r3, [r2, #4]
 8008ab0:	e02e      	b.n	8008b10 <HAL_RCC_OscConfig+0x434>
 8008ab2:	4b48      	ldr	r3, [pc, #288]	; (8008bd4 <HAL_RCC_OscConfig+0x4f8>)
 8008ab4:	685b      	ldr	r3, [r3, #4]
 8008ab6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6a1b      	ldr	r3, [r3, #32]
 8008abe:	069b      	lsls	r3, r3, #26
 8008ac0:	4944      	ldr	r1, [pc, #272]	; (8008bd4 <HAL_RCC_OscConfig+0x4f8>)
 8008ac2:	4313      	orrs	r3, r2
 8008ac4:	604b      	str	r3, [r1, #4]
 8008ac6:	e023      	b.n	8008b10 <HAL_RCC_OscConfig+0x434>
 8008ac8:	4b42      	ldr	r3, [pc, #264]	; (8008bd4 <HAL_RCC_OscConfig+0x4f8>)
 8008aca:	68db      	ldr	r3, [r3, #12]
 8008acc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6a1b      	ldr	r3, [r3, #32]
 8008ad4:	061b      	lsls	r3, r3, #24
 8008ad6:	493f      	ldr	r1, [pc, #252]	; (8008bd4 <HAL_RCC_OscConfig+0x4f8>)
 8008ad8:	4313      	orrs	r3, r2
 8008ada:	60cb      	str	r3, [r1, #12]
 8008adc:	e018      	b.n	8008b10 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008ade:	4b3d      	ldr	r3, [pc, #244]	; (8008bd4 <HAL_RCC_OscConfig+0x4f8>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	4a3c      	ldr	r2, [pc, #240]	; (8008bd4 <HAL_RCC_OscConfig+0x4f8>)
 8008ae4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ae8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008aea:	f7fa fb2b 	bl	8003144 <HAL_GetTick>
 8008aee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008af0:	e008      	b.n	8008b04 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008af2:	f7fa fb27 	bl	8003144 <HAL_GetTick>
 8008af6:	4602      	mov	r2, r0
 8008af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008afa:	1ad3      	subs	r3, r2, r3
 8008afc:	2b02      	cmp	r3, #2
 8008afe:	d901      	bls.n	8008b04 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008b00:	2303      	movs	r3, #3
 8008b02:	e23d      	b.n	8008f80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008b04:	4b33      	ldr	r3, [pc, #204]	; (8008bd4 <HAL_RCC_OscConfig+0x4f8>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d1f0      	bne.n	8008af2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f003 0308 	and.w	r3, r3, #8
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d036      	beq.n	8008b8a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	695b      	ldr	r3, [r3, #20]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d019      	beq.n	8008b58 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008b24:	4b2b      	ldr	r3, [pc, #172]	; (8008bd4 <HAL_RCC_OscConfig+0x4f8>)
 8008b26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b28:	4a2a      	ldr	r2, [pc, #168]	; (8008bd4 <HAL_RCC_OscConfig+0x4f8>)
 8008b2a:	f043 0301 	orr.w	r3, r3, #1
 8008b2e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b30:	f7fa fb08 	bl	8003144 <HAL_GetTick>
 8008b34:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008b36:	e008      	b.n	8008b4a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008b38:	f7fa fb04 	bl	8003144 <HAL_GetTick>
 8008b3c:	4602      	mov	r2, r0
 8008b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b40:	1ad3      	subs	r3, r2, r3
 8008b42:	2b02      	cmp	r3, #2
 8008b44:	d901      	bls.n	8008b4a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8008b46:	2303      	movs	r3, #3
 8008b48:	e21a      	b.n	8008f80 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008b4a:	4b22      	ldr	r3, [pc, #136]	; (8008bd4 <HAL_RCC_OscConfig+0x4f8>)
 8008b4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b4e:	f003 0302 	and.w	r3, r3, #2
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d0f0      	beq.n	8008b38 <HAL_RCC_OscConfig+0x45c>
 8008b56:	e018      	b.n	8008b8a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008b58:	4b1e      	ldr	r3, [pc, #120]	; (8008bd4 <HAL_RCC_OscConfig+0x4f8>)
 8008b5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b5c:	4a1d      	ldr	r2, [pc, #116]	; (8008bd4 <HAL_RCC_OscConfig+0x4f8>)
 8008b5e:	f023 0301 	bic.w	r3, r3, #1
 8008b62:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b64:	f7fa faee 	bl	8003144 <HAL_GetTick>
 8008b68:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008b6a:	e008      	b.n	8008b7e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008b6c:	f7fa faea 	bl	8003144 <HAL_GetTick>
 8008b70:	4602      	mov	r2, r0
 8008b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b74:	1ad3      	subs	r3, r2, r3
 8008b76:	2b02      	cmp	r3, #2
 8008b78:	d901      	bls.n	8008b7e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8008b7a:	2303      	movs	r3, #3
 8008b7c:	e200      	b.n	8008f80 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008b7e:	4b15      	ldr	r3, [pc, #84]	; (8008bd4 <HAL_RCC_OscConfig+0x4f8>)
 8008b80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b82:	f003 0302 	and.w	r3, r3, #2
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d1f0      	bne.n	8008b6c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f003 0320 	and.w	r3, r3, #32
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d039      	beq.n	8008c0a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	699b      	ldr	r3, [r3, #24]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d01c      	beq.n	8008bd8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008b9e:	4b0d      	ldr	r3, [pc, #52]	; (8008bd4 <HAL_RCC_OscConfig+0x4f8>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	4a0c      	ldr	r2, [pc, #48]	; (8008bd4 <HAL_RCC_OscConfig+0x4f8>)
 8008ba4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008ba8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008baa:	f7fa facb 	bl	8003144 <HAL_GetTick>
 8008bae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008bb0:	e008      	b.n	8008bc4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008bb2:	f7fa fac7 	bl	8003144 <HAL_GetTick>
 8008bb6:	4602      	mov	r2, r0
 8008bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bba:	1ad3      	subs	r3, r2, r3
 8008bbc:	2b02      	cmp	r3, #2
 8008bbe:	d901      	bls.n	8008bc4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8008bc0:	2303      	movs	r3, #3
 8008bc2:	e1dd      	b.n	8008f80 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008bc4:	4b03      	ldr	r3, [pc, #12]	; (8008bd4 <HAL_RCC_OscConfig+0x4f8>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d0f0      	beq.n	8008bb2 <HAL_RCC_OscConfig+0x4d6>
 8008bd0:	e01b      	b.n	8008c0a <HAL_RCC_OscConfig+0x52e>
 8008bd2:	bf00      	nop
 8008bd4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008bd8:	4b9b      	ldr	r3, [pc, #620]	; (8008e48 <HAL_RCC_OscConfig+0x76c>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	4a9a      	ldr	r2, [pc, #616]	; (8008e48 <HAL_RCC_OscConfig+0x76c>)
 8008bde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008be2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008be4:	f7fa faae 	bl	8003144 <HAL_GetTick>
 8008be8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008bea:	e008      	b.n	8008bfe <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008bec:	f7fa faaa 	bl	8003144 <HAL_GetTick>
 8008bf0:	4602      	mov	r2, r0
 8008bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf4:	1ad3      	subs	r3, r2, r3
 8008bf6:	2b02      	cmp	r3, #2
 8008bf8:	d901      	bls.n	8008bfe <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8008bfa:	2303      	movs	r3, #3
 8008bfc:	e1c0      	b.n	8008f80 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008bfe:	4b92      	ldr	r3, [pc, #584]	; (8008e48 <HAL_RCC_OscConfig+0x76c>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d1f0      	bne.n	8008bec <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f003 0304 	and.w	r3, r3, #4
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	f000 8081 	beq.w	8008d1a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008c18:	4b8c      	ldr	r3, [pc, #560]	; (8008e4c <HAL_RCC_OscConfig+0x770>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	4a8b      	ldr	r2, [pc, #556]	; (8008e4c <HAL_RCC_OscConfig+0x770>)
 8008c1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c22:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008c24:	f7fa fa8e 	bl	8003144 <HAL_GetTick>
 8008c28:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008c2a:	e008      	b.n	8008c3e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008c2c:	f7fa fa8a 	bl	8003144 <HAL_GetTick>
 8008c30:	4602      	mov	r2, r0
 8008c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c34:	1ad3      	subs	r3, r2, r3
 8008c36:	2b64      	cmp	r3, #100	; 0x64
 8008c38:	d901      	bls.n	8008c3e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8008c3a:	2303      	movs	r3, #3
 8008c3c:	e1a0      	b.n	8008f80 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008c3e:	4b83      	ldr	r3, [pc, #524]	; (8008e4c <HAL_RCC_OscConfig+0x770>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d0f0      	beq.n	8008c2c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	689b      	ldr	r3, [r3, #8]
 8008c4e:	2b01      	cmp	r3, #1
 8008c50:	d106      	bne.n	8008c60 <HAL_RCC_OscConfig+0x584>
 8008c52:	4b7d      	ldr	r3, [pc, #500]	; (8008e48 <HAL_RCC_OscConfig+0x76c>)
 8008c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c56:	4a7c      	ldr	r2, [pc, #496]	; (8008e48 <HAL_RCC_OscConfig+0x76c>)
 8008c58:	f043 0301 	orr.w	r3, r3, #1
 8008c5c:	6713      	str	r3, [r2, #112]	; 0x70
 8008c5e:	e02d      	b.n	8008cbc <HAL_RCC_OscConfig+0x5e0>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	689b      	ldr	r3, [r3, #8]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d10c      	bne.n	8008c82 <HAL_RCC_OscConfig+0x5a6>
 8008c68:	4b77      	ldr	r3, [pc, #476]	; (8008e48 <HAL_RCC_OscConfig+0x76c>)
 8008c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c6c:	4a76      	ldr	r2, [pc, #472]	; (8008e48 <HAL_RCC_OscConfig+0x76c>)
 8008c6e:	f023 0301 	bic.w	r3, r3, #1
 8008c72:	6713      	str	r3, [r2, #112]	; 0x70
 8008c74:	4b74      	ldr	r3, [pc, #464]	; (8008e48 <HAL_RCC_OscConfig+0x76c>)
 8008c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c78:	4a73      	ldr	r2, [pc, #460]	; (8008e48 <HAL_RCC_OscConfig+0x76c>)
 8008c7a:	f023 0304 	bic.w	r3, r3, #4
 8008c7e:	6713      	str	r3, [r2, #112]	; 0x70
 8008c80:	e01c      	b.n	8008cbc <HAL_RCC_OscConfig+0x5e0>
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	689b      	ldr	r3, [r3, #8]
 8008c86:	2b05      	cmp	r3, #5
 8008c88:	d10c      	bne.n	8008ca4 <HAL_RCC_OscConfig+0x5c8>
 8008c8a:	4b6f      	ldr	r3, [pc, #444]	; (8008e48 <HAL_RCC_OscConfig+0x76c>)
 8008c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c8e:	4a6e      	ldr	r2, [pc, #440]	; (8008e48 <HAL_RCC_OscConfig+0x76c>)
 8008c90:	f043 0304 	orr.w	r3, r3, #4
 8008c94:	6713      	str	r3, [r2, #112]	; 0x70
 8008c96:	4b6c      	ldr	r3, [pc, #432]	; (8008e48 <HAL_RCC_OscConfig+0x76c>)
 8008c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c9a:	4a6b      	ldr	r2, [pc, #428]	; (8008e48 <HAL_RCC_OscConfig+0x76c>)
 8008c9c:	f043 0301 	orr.w	r3, r3, #1
 8008ca0:	6713      	str	r3, [r2, #112]	; 0x70
 8008ca2:	e00b      	b.n	8008cbc <HAL_RCC_OscConfig+0x5e0>
 8008ca4:	4b68      	ldr	r3, [pc, #416]	; (8008e48 <HAL_RCC_OscConfig+0x76c>)
 8008ca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ca8:	4a67      	ldr	r2, [pc, #412]	; (8008e48 <HAL_RCC_OscConfig+0x76c>)
 8008caa:	f023 0301 	bic.w	r3, r3, #1
 8008cae:	6713      	str	r3, [r2, #112]	; 0x70
 8008cb0:	4b65      	ldr	r3, [pc, #404]	; (8008e48 <HAL_RCC_OscConfig+0x76c>)
 8008cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cb4:	4a64      	ldr	r2, [pc, #400]	; (8008e48 <HAL_RCC_OscConfig+0x76c>)
 8008cb6:	f023 0304 	bic.w	r3, r3, #4
 8008cba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	689b      	ldr	r3, [r3, #8]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d015      	beq.n	8008cf0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008cc4:	f7fa fa3e 	bl	8003144 <HAL_GetTick>
 8008cc8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008cca:	e00a      	b.n	8008ce2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ccc:	f7fa fa3a 	bl	8003144 <HAL_GetTick>
 8008cd0:	4602      	mov	r2, r0
 8008cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cd4:	1ad3      	subs	r3, r2, r3
 8008cd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d901      	bls.n	8008ce2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8008cde:	2303      	movs	r3, #3
 8008ce0:	e14e      	b.n	8008f80 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008ce2:	4b59      	ldr	r3, [pc, #356]	; (8008e48 <HAL_RCC_OscConfig+0x76c>)
 8008ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ce6:	f003 0302 	and.w	r3, r3, #2
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d0ee      	beq.n	8008ccc <HAL_RCC_OscConfig+0x5f0>
 8008cee:	e014      	b.n	8008d1a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008cf0:	f7fa fa28 	bl	8003144 <HAL_GetTick>
 8008cf4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008cf6:	e00a      	b.n	8008d0e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008cf8:	f7fa fa24 	bl	8003144 <HAL_GetTick>
 8008cfc:	4602      	mov	r2, r0
 8008cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d00:	1ad3      	subs	r3, r2, r3
 8008d02:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d901      	bls.n	8008d0e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8008d0a:	2303      	movs	r3, #3
 8008d0c:	e138      	b.n	8008f80 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008d0e:	4b4e      	ldr	r3, [pc, #312]	; (8008e48 <HAL_RCC_OscConfig+0x76c>)
 8008d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d12:	f003 0302 	and.w	r3, r3, #2
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d1ee      	bne.n	8008cf8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	f000 812d 	beq.w	8008f7e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008d24:	4b48      	ldr	r3, [pc, #288]	; (8008e48 <HAL_RCC_OscConfig+0x76c>)
 8008d26:	691b      	ldr	r3, [r3, #16]
 8008d28:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008d2c:	2b18      	cmp	r3, #24
 8008d2e:	f000 80bd 	beq.w	8008eac <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d36:	2b02      	cmp	r3, #2
 8008d38:	f040 809e 	bne.w	8008e78 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d3c:	4b42      	ldr	r3, [pc, #264]	; (8008e48 <HAL_RCC_OscConfig+0x76c>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4a41      	ldr	r2, [pc, #260]	; (8008e48 <HAL_RCC_OscConfig+0x76c>)
 8008d42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008d46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d48:	f7fa f9fc 	bl	8003144 <HAL_GetTick>
 8008d4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008d4e:	e008      	b.n	8008d62 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d50:	f7fa f9f8 	bl	8003144 <HAL_GetTick>
 8008d54:	4602      	mov	r2, r0
 8008d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d58:	1ad3      	subs	r3, r2, r3
 8008d5a:	2b02      	cmp	r3, #2
 8008d5c:	d901      	bls.n	8008d62 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8008d5e:	2303      	movs	r3, #3
 8008d60:	e10e      	b.n	8008f80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008d62:	4b39      	ldr	r3, [pc, #228]	; (8008e48 <HAL_RCC_OscConfig+0x76c>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d1f0      	bne.n	8008d50 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008d6e:	4b36      	ldr	r3, [pc, #216]	; (8008e48 <HAL_RCC_OscConfig+0x76c>)
 8008d70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008d72:	4b37      	ldr	r3, [pc, #220]	; (8008e50 <HAL_RCC_OscConfig+0x774>)
 8008d74:	4013      	ands	r3, r2
 8008d76:	687a      	ldr	r2, [r7, #4]
 8008d78:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008d7a:	687a      	ldr	r2, [r7, #4]
 8008d7c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008d7e:	0112      	lsls	r2, r2, #4
 8008d80:	430a      	orrs	r2, r1
 8008d82:	4931      	ldr	r1, [pc, #196]	; (8008e48 <HAL_RCC_OscConfig+0x76c>)
 8008d84:	4313      	orrs	r3, r2
 8008d86:	628b      	str	r3, [r1, #40]	; 0x28
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d8c:	3b01      	subs	r3, #1
 8008d8e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d96:	3b01      	subs	r3, #1
 8008d98:	025b      	lsls	r3, r3, #9
 8008d9a:	b29b      	uxth	r3, r3
 8008d9c:	431a      	orrs	r2, r3
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008da2:	3b01      	subs	r3, #1
 8008da4:	041b      	lsls	r3, r3, #16
 8008da6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008daa:	431a      	orrs	r2, r3
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008db0:	3b01      	subs	r3, #1
 8008db2:	061b      	lsls	r3, r3, #24
 8008db4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008db8:	4923      	ldr	r1, [pc, #140]	; (8008e48 <HAL_RCC_OscConfig+0x76c>)
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008dbe:	4b22      	ldr	r3, [pc, #136]	; (8008e48 <HAL_RCC_OscConfig+0x76c>)
 8008dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dc2:	4a21      	ldr	r2, [pc, #132]	; (8008e48 <HAL_RCC_OscConfig+0x76c>)
 8008dc4:	f023 0301 	bic.w	r3, r3, #1
 8008dc8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008dca:	4b1f      	ldr	r3, [pc, #124]	; (8008e48 <HAL_RCC_OscConfig+0x76c>)
 8008dcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008dce:	4b21      	ldr	r3, [pc, #132]	; (8008e54 <HAL_RCC_OscConfig+0x778>)
 8008dd0:	4013      	ands	r3, r2
 8008dd2:	687a      	ldr	r2, [r7, #4]
 8008dd4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008dd6:	00d2      	lsls	r2, r2, #3
 8008dd8:	491b      	ldr	r1, [pc, #108]	; (8008e48 <HAL_RCC_OscConfig+0x76c>)
 8008dda:	4313      	orrs	r3, r2
 8008ddc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008dde:	4b1a      	ldr	r3, [pc, #104]	; (8008e48 <HAL_RCC_OscConfig+0x76c>)
 8008de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008de2:	f023 020c 	bic.w	r2, r3, #12
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dea:	4917      	ldr	r1, [pc, #92]	; (8008e48 <HAL_RCC_OscConfig+0x76c>)
 8008dec:	4313      	orrs	r3, r2
 8008dee:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008df0:	4b15      	ldr	r3, [pc, #84]	; (8008e48 <HAL_RCC_OscConfig+0x76c>)
 8008df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008df4:	f023 0202 	bic.w	r2, r3, #2
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dfc:	4912      	ldr	r1, [pc, #72]	; (8008e48 <HAL_RCC_OscConfig+0x76c>)
 8008dfe:	4313      	orrs	r3, r2
 8008e00:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008e02:	4b11      	ldr	r3, [pc, #68]	; (8008e48 <HAL_RCC_OscConfig+0x76c>)
 8008e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e06:	4a10      	ldr	r2, [pc, #64]	; (8008e48 <HAL_RCC_OscConfig+0x76c>)
 8008e08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e0c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e0e:	4b0e      	ldr	r3, [pc, #56]	; (8008e48 <HAL_RCC_OscConfig+0x76c>)
 8008e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e12:	4a0d      	ldr	r2, [pc, #52]	; (8008e48 <HAL_RCC_OscConfig+0x76c>)
 8008e14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e18:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008e1a:	4b0b      	ldr	r3, [pc, #44]	; (8008e48 <HAL_RCC_OscConfig+0x76c>)
 8008e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e1e:	4a0a      	ldr	r2, [pc, #40]	; (8008e48 <HAL_RCC_OscConfig+0x76c>)
 8008e20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008e24:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008e26:	4b08      	ldr	r3, [pc, #32]	; (8008e48 <HAL_RCC_OscConfig+0x76c>)
 8008e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e2a:	4a07      	ldr	r2, [pc, #28]	; (8008e48 <HAL_RCC_OscConfig+0x76c>)
 8008e2c:	f043 0301 	orr.w	r3, r3, #1
 8008e30:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008e32:	4b05      	ldr	r3, [pc, #20]	; (8008e48 <HAL_RCC_OscConfig+0x76c>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	4a04      	ldr	r2, [pc, #16]	; (8008e48 <HAL_RCC_OscConfig+0x76c>)
 8008e38:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008e3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e3e:	f7fa f981 	bl	8003144 <HAL_GetTick>
 8008e42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008e44:	e011      	b.n	8008e6a <HAL_RCC_OscConfig+0x78e>
 8008e46:	bf00      	nop
 8008e48:	58024400 	.word	0x58024400
 8008e4c:	58024800 	.word	0x58024800
 8008e50:	fffffc0c 	.word	0xfffffc0c
 8008e54:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e58:	f7fa f974 	bl	8003144 <HAL_GetTick>
 8008e5c:	4602      	mov	r2, r0
 8008e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e60:	1ad3      	subs	r3, r2, r3
 8008e62:	2b02      	cmp	r3, #2
 8008e64:	d901      	bls.n	8008e6a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008e66:	2303      	movs	r3, #3
 8008e68:	e08a      	b.n	8008f80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008e6a:	4b47      	ldr	r3, [pc, #284]	; (8008f88 <HAL_RCC_OscConfig+0x8ac>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d0f0      	beq.n	8008e58 <HAL_RCC_OscConfig+0x77c>
 8008e76:	e082      	b.n	8008f7e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e78:	4b43      	ldr	r3, [pc, #268]	; (8008f88 <HAL_RCC_OscConfig+0x8ac>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	4a42      	ldr	r2, [pc, #264]	; (8008f88 <HAL_RCC_OscConfig+0x8ac>)
 8008e7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008e82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e84:	f7fa f95e 	bl	8003144 <HAL_GetTick>
 8008e88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008e8a:	e008      	b.n	8008e9e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e8c:	f7fa f95a 	bl	8003144 <HAL_GetTick>
 8008e90:	4602      	mov	r2, r0
 8008e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e94:	1ad3      	subs	r3, r2, r3
 8008e96:	2b02      	cmp	r3, #2
 8008e98:	d901      	bls.n	8008e9e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8008e9a:	2303      	movs	r3, #3
 8008e9c:	e070      	b.n	8008f80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008e9e:	4b3a      	ldr	r3, [pc, #232]	; (8008f88 <HAL_RCC_OscConfig+0x8ac>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d1f0      	bne.n	8008e8c <HAL_RCC_OscConfig+0x7b0>
 8008eaa:	e068      	b.n	8008f7e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008eac:	4b36      	ldr	r3, [pc, #216]	; (8008f88 <HAL_RCC_OscConfig+0x8ac>)
 8008eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eb0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008eb2:	4b35      	ldr	r3, [pc, #212]	; (8008f88 <HAL_RCC_OscConfig+0x8ac>)
 8008eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eb6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ebc:	2b01      	cmp	r3, #1
 8008ebe:	d031      	beq.n	8008f24 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ec0:	693b      	ldr	r3, [r7, #16]
 8008ec2:	f003 0203 	and.w	r2, r3, #3
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008eca:	429a      	cmp	r2, r3
 8008ecc:	d12a      	bne.n	8008f24 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008ece:	693b      	ldr	r3, [r7, #16]
 8008ed0:	091b      	lsrs	r3, r3, #4
 8008ed2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008eda:	429a      	cmp	r2, r3
 8008edc:	d122      	bne.n	8008f24 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ee8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008eea:	429a      	cmp	r2, r3
 8008eec:	d11a      	bne.n	8008f24 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	0a5b      	lsrs	r3, r3, #9
 8008ef2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008efa:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008efc:	429a      	cmp	r2, r3
 8008efe:	d111      	bne.n	8008f24 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	0c1b      	lsrs	r3, r3, #16
 8008f04:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f0c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008f0e:	429a      	cmp	r2, r3
 8008f10:	d108      	bne.n	8008f24 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	0e1b      	lsrs	r3, r3, #24
 8008f16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f1e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008f20:	429a      	cmp	r2, r3
 8008f22:	d001      	beq.n	8008f28 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008f24:	2301      	movs	r3, #1
 8008f26:	e02b      	b.n	8008f80 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008f28:	4b17      	ldr	r3, [pc, #92]	; (8008f88 <HAL_RCC_OscConfig+0x8ac>)
 8008f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f2c:	08db      	lsrs	r3, r3, #3
 8008f2e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008f32:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f38:	693a      	ldr	r2, [r7, #16]
 8008f3a:	429a      	cmp	r2, r3
 8008f3c:	d01f      	beq.n	8008f7e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008f3e:	4b12      	ldr	r3, [pc, #72]	; (8008f88 <HAL_RCC_OscConfig+0x8ac>)
 8008f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f42:	4a11      	ldr	r2, [pc, #68]	; (8008f88 <HAL_RCC_OscConfig+0x8ac>)
 8008f44:	f023 0301 	bic.w	r3, r3, #1
 8008f48:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008f4a:	f7fa f8fb 	bl	8003144 <HAL_GetTick>
 8008f4e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008f50:	bf00      	nop
 8008f52:	f7fa f8f7 	bl	8003144 <HAL_GetTick>
 8008f56:	4602      	mov	r2, r0
 8008f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	d0f9      	beq.n	8008f52 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008f5e:	4b0a      	ldr	r3, [pc, #40]	; (8008f88 <HAL_RCC_OscConfig+0x8ac>)
 8008f60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f62:	4b0a      	ldr	r3, [pc, #40]	; (8008f8c <HAL_RCC_OscConfig+0x8b0>)
 8008f64:	4013      	ands	r3, r2
 8008f66:	687a      	ldr	r2, [r7, #4]
 8008f68:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008f6a:	00d2      	lsls	r2, r2, #3
 8008f6c:	4906      	ldr	r1, [pc, #24]	; (8008f88 <HAL_RCC_OscConfig+0x8ac>)
 8008f6e:	4313      	orrs	r3, r2
 8008f70:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008f72:	4b05      	ldr	r3, [pc, #20]	; (8008f88 <HAL_RCC_OscConfig+0x8ac>)
 8008f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f76:	4a04      	ldr	r2, [pc, #16]	; (8008f88 <HAL_RCC_OscConfig+0x8ac>)
 8008f78:	f043 0301 	orr.w	r3, r3, #1
 8008f7c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008f7e:	2300      	movs	r3, #0
}
 8008f80:	4618      	mov	r0, r3
 8008f82:	3730      	adds	r7, #48	; 0x30
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bd80      	pop	{r7, pc}
 8008f88:	58024400 	.word	0x58024400
 8008f8c:	ffff0007 	.word	0xffff0007

08008f90 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b086      	sub	sp, #24
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
 8008f98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d101      	bne.n	8008fa4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008fa0:	2301      	movs	r3, #1
 8008fa2:	e19c      	b.n	80092de <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008fa4:	4b8a      	ldr	r3, [pc, #552]	; (80091d0 <HAL_RCC_ClockConfig+0x240>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f003 030f 	and.w	r3, r3, #15
 8008fac:	683a      	ldr	r2, [r7, #0]
 8008fae:	429a      	cmp	r2, r3
 8008fb0:	d910      	bls.n	8008fd4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008fb2:	4b87      	ldr	r3, [pc, #540]	; (80091d0 <HAL_RCC_ClockConfig+0x240>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f023 020f 	bic.w	r2, r3, #15
 8008fba:	4985      	ldr	r1, [pc, #532]	; (80091d0 <HAL_RCC_ClockConfig+0x240>)
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	4313      	orrs	r3, r2
 8008fc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008fc2:	4b83      	ldr	r3, [pc, #524]	; (80091d0 <HAL_RCC_ClockConfig+0x240>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f003 030f 	and.w	r3, r3, #15
 8008fca:	683a      	ldr	r2, [r7, #0]
 8008fcc:	429a      	cmp	r2, r3
 8008fce:	d001      	beq.n	8008fd4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	e184      	b.n	80092de <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f003 0304 	and.w	r3, r3, #4
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d010      	beq.n	8009002 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	691a      	ldr	r2, [r3, #16]
 8008fe4:	4b7b      	ldr	r3, [pc, #492]	; (80091d4 <HAL_RCC_ClockConfig+0x244>)
 8008fe6:	699b      	ldr	r3, [r3, #24]
 8008fe8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008fec:	429a      	cmp	r2, r3
 8008fee:	d908      	bls.n	8009002 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008ff0:	4b78      	ldr	r3, [pc, #480]	; (80091d4 <HAL_RCC_ClockConfig+0x244>)
 8008ff2:	699b      	ldr	r3, [r3, #24]
 8008ff4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	691b      	ldr	r3, [r3, #16]
 8008ffc:	4975      	ldr	r1, [pc, #468]	; (80091d4 <HAL_RCC_ClockConfig+0x244>)
 8008ffe:	4313      	orrs	r3, r2
 8009000:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f003 0308 	and.w	r3, r3, #8
 800900a:	2b00      	cmp	r3, #0
 800900c:	d010      	beq.n	8009030 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	695a      	ldr	r2, [r3, #20]
 8009012:	4b70      	ldr	r3, [pc, #448]	; (80091d4 <HAL_RCC_ClockConfig+0x244>)
 8009014:	69db      	ldr	r3, [r3, #28]
 8009016:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800901a:	429a      	cmp	r2, r3
 800901c:	d908      	bls.n	8009030 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800901e:	4b6d      	ldr	r3, [pc, #436]	; (80091d4 <HAL_RCC_ClockConfig+0x244>)
 8009020:	69db      	ldr	r3, [r3, #28]
 8009022:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	695b      	ldr	r3, [r3, #20]
 800902a:	496a      	ldr	r1, [pc, #424]	; (80091d4 <HAL_RCC_ClockConfig+0x244>)
 800902c:	4313      	orrs	r3, r2
 800902e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f003 0310 	and.w	r3, r3, #16
 8009038:	2b00      	cmp	r3, #0
 800903a:	d010      	beq.n	800905e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	699a      	ldr	r2, [r3, #24]
 8009040:	4b64      	ldr	r3, [pc, #400]	; (80091d4 <HAL_RCC_ClockConfig+0x244>)
 8009042:	69db      	ldr	r3, [r3, #28]
 8009044:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009048:	429a      	cmp	r2, r3
 800904a:	d908      	bls.n	800905e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800904c:	4b61      	ldr	r3, [pc, #388]	; (80091d4 <HAL_RCC_ClockConfig+0x244>)
 800904e:	69db      	ldr	r3, [r3, #28]
 8009050:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	699b      	ldr	r3, [r3, #24]
 8009058:	495e      	ldr	r1, [pc, #376]	; (80091d4 <HAL_RCC_ClockConfig+0x244>)
 800905a:	4313      	orrs	r3, r2
 800905c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f003 0320 	and.w	r3, r3, #32
 8009066:	2b00      	cmp	r3, #0
 8009068:	d010      	beq.n	800908c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	69da      	ldr	r2, [r3, #28]
 800906e:	4b59      	ldr	r3, [pc, #356]	; (80091d4 <HAL_RCC_ClockConfig+0x244>)
 8009070:	6a1b      	ldr	r3, [r3, #32]
 8009072:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009076:	429a      	cmp	r2, r3
 8009078:	d908      	bls.n	800908c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800907a:	4b56      	ldr	r3, [pc, #344]	; (80091d4 <HAL_RCC_ClockConfig+0x244>)
 800907c:	6a1b      	ldr	r3, [r3, #32]
 800907e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	69db      	ldr	r3, [r3, #28]
 8009086:	4953      	ldr	r1, [pc, #332]	; (80091d4 <HAL_RCC_ClockConfig+0x244>)
 8009088:	4313      	orrs	r3, r2
 800908a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f003 0302 	and.w	r3, r3, #2
 8009094:	2b00      	cmp	r3, #0
 8009096:	d010      	beq.n	80090ba <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	68da      	ldr	r2, [r3, #12]
 800909c:	4b4d      	ldr	r3, [pc, #308]	; (80091d4 <HAL_RCC_ClockConfig+0x244>)
 800909e:	699b      	ldr	r3, [r3, #24]
 80090a0:	f003 030f 	and.w	r3, r3, #15
 80090a4:	429a      	cmp	r2, r3
 80090a6:	d908      	bls.n	80090ba <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80090a8:	4b4a      	ldr	r3, [pc, #296]	; (80091d4 <HAL_RCC_ClockConfig+0x244>)
 80090aa:	699b      	ldr	r3, [r3, #24]
 80090ac:	f023 020f 	bic.w	r2, r3, #15
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	68db      	ldr	r3, [r3, #12]
 80090b4:	4947      	ldr	r1, [pc, #284]	; (80091d4 <HAL_RCC_ClockConfig+0x244>)
 80090b6:	4313      	orrs	r3, r2
 80090b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f003 0301 	and.w	r3, r3, #1
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d055      	beq.n	8009172 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80090c6:	4b43      	ldr	r3, [pc, #268]	; (80091d4 <HAL_RCC_ClockConfig+0x244>)
 80090c8:	699b      	ldr	r3, [r3, #24]
 80090ca:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	689b      	ldr	r3, [r3, #8]
 80090d2:	4940      	ldr	r1, [pc, #256]	; (80091d4 <HAL_RCC_ClockConfig+0x244>)
 80090d4:	4313      	orrs	r3, r2
 80090d6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	685b      	ldr	r3, [r3, #4]
 80090dc:	2b02      	cmp	r3, #2
 80090de:	d107      	bne.n	80090f0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80090e0:	4b3c      	ldr	r3, [pc, #240]	; (80091d4 <HAL_RCC_ClockConfig+0x244>)
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d121      	bne.n	8009130 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80090ec:	2301      	movs	r3, #1
 80090ee:	e0f6      	b.n	80092de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	685b      	ldr	r3, [r3, #4]
 80090f4:	2b03      	cmp	r3, #3
 80090f6:	d107      	bne.n	8009108 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80090f8:	4b36      	ldr	r3, [pc, #216]	; (80091d4 <HAL_RCC_ClockConfig+0x244>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009100:	2b00      	cmp	r3, #0
 8009102:	d115      	bne.n	8009130 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009104:	2301      	movs	r3, #1
 8009106:	e0ea      	b.n	80092de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	685b      	ldr	r3, [r3, #4]
 800910c:	2b01      	cmp	r3, #1
 800910e:	d107      	bne.n	8009120 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009110:	4b30      	ldr	r3, [pc, #192]	; (80091d4 <HAL_RCC_ClockConfig+0x244>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009118:	2b00      	cmp	r3, #0
 800911a:	d109      	bne.n	8009130 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800911c:	2301      	movs	r3, #1
 800911e:	e0de      	b.n	80092de <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009120:	4b2c      	ldr	r3, [pc, #176]	; (80091d4 <HAL_RCC_ClockConfig+0x244>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f003 0304 	and.w	r3, r3, #4
 8009128:	2b00      	cmp	r3, #0
 800912a:	d101      	bne.n	8009130 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800912c:	2301      	movs	r3, #1
 800912e:	e0d6      	b.n	80092de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009130:	4b28      	ldr	r3, [pc, #160]	; (80091d4 <HAL_RCC_ClockConfig+0x244>)
 8009132:	691b      	ldr	r3, [r3, #16]
 8009134:	f023 0207 	bic.w	r2, r3, #7
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	685b      	ldr	r3, [r3, #4]
 800913c:	4925      	ldr	r1, [pc, #148]	; (80091d4 <HAL_RCC_ClockConfig+0x244>)
 800913e:	4313      	orrs	r3, r2
 8009140:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009142:	f7f9 ffff 	bl	8003144 <HAL_GetTick>
 8009146:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009148:	e00a      	b.n	8009160 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800914a:	f7f9 fffb 	bl	8003144 <HAL_GetTick>
 800914e:	4602      	mov	r2, r0
 8009150:	697b      	ldr	r3, [r7, #20]
 8009152:	1ad3      	subs	r3, r2, r3
 8009154:	f241 3288 	movw	r2, #5000	; 0x1388
 8009158:	4293      	cmp	r3, r2
 800915a:	d901      	bls.n	8009160 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800915c:	2303      	movs	r3, #3
 800915e:	e0be      	b.n	80092de <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009160:	4b1c      	ldr	r3, [pc, #112]	; (80091d4 <HAL_RCC_ClockConfig+0x244>)
 8009162:	691b      	ldr	r3, [r3, #16]
 8009164:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	685b      	ldr	r3, [r3, #4]
 800916c:	00db      	lsls	r3, r3, #3
 800916e:	429a      	cmp	r2, r3
 8009170:	d1eb      	bne.n	800914a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f003 0302 	and.w	r3, r3, #2
 800917a:	2b00      	cmp	r3, #0
 800917c:	d010      	beq.n	80091a0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	68da      	ldr	r2, [r3, #12]
 8009182:	4b14      	ldr	r3, [pc, #80]	; (80091d4 <HAL_RCC_ClockConfig+0x244>)
 8009184:	699b      	ldr	r3, [r3, #24]
 8009186:	f003 030f 	and.w	r3, r3, #15
 800918a:	429a      	cmp	r2, r3
 800918c:	d208      	bcs.n	80091a0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800918e:	4b11      	ldr	r3, [pc, #68]	; (80091d4 <HAL_RCC_ClockConfig+0x244>)
 8009190:	699b      	ldr	r3, [r3, #24]
 8009192:	f023 020f 	bic.w	r2, r3, #15
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	68db      	ldr	r3, [r3, #12]
 800919a:	490e      	ldr	r1, [pc, #56]	; (80091d4 <HAL_RCC_ClockConfig+0x244>)
 800919c:	4313      	orrs	r3, r2
 800919e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80091a0:	4b0b      	ldr	r3, [pc, #44]	; (80091d0 <HAL_RCC_ClockConfig+0x240>)
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f003 030f 	and.w	r3, r3, #15
 80091a8:	683a      	ldr	r2, [r7, #0]
 80091aa:	429a      	cmp	r2, r3
 80091ac:	d214      	bcs.n	80091d8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80091ae:	4b08      	ldr	r3, [pc, #32]	; (80091d0 <HAL_RCC_ClockConfig+0x240>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f023 020f 	bic.w	r2, r3, #15
 80091b6:	4906      	ldr	r1, [pc, #24]	; (80091d0 <HAL_RCC_ClockConfig+0x240>)
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	4313      	orrs	r3, r2
 80091bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80091be:	4b04      	ldr	r3, [pc, #16]	; (80091d0 <HAL_RCC_ClockConfig+0x240>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f003 030f 	and.w	r3, r3, #15
 80091c6:	683a      	ldr	r2, [r7, #0]
 80091c8:	429a      	cmp	r2, r3
 80091ca:	d005      	beq.n	80091d8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80091cc:	2301      	movs	r3, #1
 80091ce:	e086      	b.n	80092de <HAL_RCC_ClockConfig+0x34e>
 80091d0:	52002000 	.word	0x52002000
 80091d4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f003 0304 	and.w	r3, r3, #4
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d010      	beq.n	8009206 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	691a      	ldr	r2, [r3, #16]
 80091e8:	4b3f      	ldr	r3, [pc, #252]	; (80092e8 <HAL_RCC_ClockConfig+0x358>)
 80091ea:	699b      	ldr	r3, [r3, #24]
 80091ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80091f0:	429a      	cmp	r2, r3
 80091f2:	d208      	bcs.n	8009206 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80091f4:	4b3c      	ldr	r3, [pc, #240]	; (80092e8 <HAL_RCC_ClockConfig+0x358>)
 80091f6:	699b      	ldr	r3, [r3, #24]
 80091f8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	691b      	ldr	r3, [r3, #16]
 8009200:	4939      	ldr	r1, [pc, #228]	; (80092e8 <HAL_RCC_ClockConfig+0x358>)
 8009202:	4313      	orrs	r3, r2
 8009204:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f003 0308 	and.w	r3, r3, #8
 800920e:	2b00      	cmp	r3, #0
 8009210:	d010      	beq.n	8009234 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	695a      	ldr	r2, [r3, #20]
 8009216:	4b34      	ldr	r3, [pc, #208]	; (80092e8 <HAL_RCC_ClockConfig+0x358>)
 8009218:	69db      	ldr	r3, [r3, #28]
 800921a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800921e:	429a      	cmp	r2, r3
 8009220:	d208      	bcs.n	8009234 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009222:	4b31      	ldr	r3, [pc, #196]	; (80092e8 <HAL_RCC_ClockConfig+0x358>)
 8009224:	69db      	ldr	r3, [r3, #28]
 8009226:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	695b      	ldr	r3, [r3, #20]
 800922e:	492e      	ldr	r1, [pc, #184]	; (80092e8 <HAL_RCC_ClockConfig+0x358>)
 8009230:	4313      	orrs	r3, r2
 8009232:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f003 0310 	and.w	r3, r3, #16
 800923c:	2b00      	cmp	r3, #0
 800923e:	d010      	beq.n	8009262 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	699a      	ldr	r2, [r3, #24]
 8009244:	4b28      	ldr	r3, [pc, #160]	; (80092e8 <HAL_RCC_ClockConfig+0x358>)
 8009246:	69db      	ldr	r3, [r3, #28]
 8009248:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800924c:	429a      	cmp	r2, r3
 800924e:	d208      	bcs.n	8009262 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009250:	4b25      	ldr	r3, [pc, #148]	; (80092e8 <HAL_RCC_ClockConfig+0x358>)
 8009252:	69db      	ldr	r3, [r3, #28]
 8009254:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	699b      	ldr	r3, [r3, #24]
 800925c:	4922      	ldr	r1, [pc, #136]	; (80092e8 <HAL_RCC_ClockConfig+0x358>)
 800925e:	4313      	orrs	r3, r2
 8009260:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f003 0320 	and.w	r3, r3, #32
 800926a:	2b00      	cmp	r3, #0
 800926c:	d010      	beq.n	8009290 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	69da      	ldr	r2, [r3, #28]
 8009272:	4b1d      	ldr	r3, [pc, #116]	; (80092e8 <HAL_RCC_ClockConfig+0x358>)
 8009274:	6a1b      	ldr	r3, [r3, #32]
 8009276:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800927a:	429a      	cmp	r2, r3
 800927c:	d208      	bcs.n	8009290 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800927e:	4b1a      	ldr	r3, [pc, #104]	; (80092e8 <HAL_RCC_ClockConfig+0x358>)
 8009280:	6a1b      	ldr	r3, [r3, #32]
 8009282:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	69db      	ldr	r3, [r3, #28]
 800928a:	4917      	ldr	r1, [pc, #92]	; (80092e8 <HAL_RCC_ClockConfig+0x358>)
 800928c:	4313      	orrs	r3, r2
 800928e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009290:	f000 f834 	bl	80092fc <HAL_RCC_GetSysClockFreq>
 8009294:	4602      	mov	r2, r0
 8009296:	4b14      	ldr	r3, [pc, #80]	; (80092e8 <HAL_RCC_ClockConfig+0x358>)
 8009298:	699b      	ldr	r3, [r3, #24]
 800929a:	0a1b      	lsrs	r3, r3, #8
 800929c:	f003 030f 	and.w	r3, r3, #15
 80092a0:	4912      	ldr	r1, [pc, #72]	; (80092ec <HAL_RCC_ClockConfig+0x35c>)
 80092a2:	5ccb      	ldrb	r3, [r1, r3]
 80092a4:	f003 031f 	and.w	r3, r3, #31
 80092a8:	fa22 f303 	lsr.w	r3, r2, r3
 80092ac:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80092ae:	4b0e      	ldr	r3, [pc, #56]	; (80092e8 <HAL_RCC_ClockConfig+0x358>)
 80092b0:	699b      	ldr	r3, [r3, #24]
 80092b2:	f003 030f 	and.w	r3, r3, #15
 80092b6:	4a0d      	ldr	r2, [pc, #52]	; (80092ec <HAL_RCC_ClockConfig+0x35c>)
 80092b8:	5cd3      	ldrb	r3, [r2, r3]
 80092ba:	f003 031f 	and.w	r3, r3, #31
 80092be:	693a      	ldr	r2, [r7, #16]
 80092c0:	fa22 f303 	lsr.w	r3, r2, r3
 80092c4:	4a0a      	ldr	r2, [pc, #40]	; (80092f0 <HAL_RCC_ClockConfig+0x360>)
 80092c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80092c8:	4a0a      	ldr	r2, [pc, #40]	; (80092f4 <HAL_RCC_ClockConfig+0x364>)
 80092ca:	693b      	ldr	r3, [r7, #16]
 80092cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80092ce:	4b0a      	ldr	r3, [pc, #40]	; (80092f8 <HAL_RCC_ClockConfig+0x368>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	4618      	mov	r0, r3
 80092d4:	f7f8 ff46 	bl	8002164 <HAL_InitTick>
 80092d8:	4603      	mov	r3, r0
 80092da:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80092dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80092de:	4618      	mov	r0, r3
 80092e0:	3718      	adds	r7, #24
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}
 80092e6:	bf00      	nop
 80092e8:	58024400 	.word	0x58024400
 80092ec:	08014b00 	.word	0x08014b00
 80092f0:	2400008c 	.word	0x2400008c
 80092f4:	24000088 	.word	0x24000088
 80092f8:	24000090 	.word	0x24000090

080092fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80092fc:	b480      	push	{r7}
 80092fe:	b089      	sub	sp, #36	; 0x24
 8009300:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009302:	4bb3      	ldr	r3, [pc, #716]	; (80095d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009304:	691b      	ldr	r3, [r3, #16]
 8009306:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800930a:	2b18      	cmp	r3, #24
 800930c:	f200 8155 	bhi.w	80095ba <HAL_RCC_GetSysClockFreq+0x2be>
 8009310:	a201      	add	r2, pc, #4	; (adr r2, 8009318 <HAL_RCC_GetSysClockFreq+0x1c>)
 8009312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009316:	bf00      	nop
 8009318:	0800937d 	.word	0x0800937d
 800931c:	080095bb 	.word	0x080095bb
 8009320:	080095bb 	.word	0x080095bb
 8009324:	080095bb 	.word	0x080095bb
 8009328:	080095bb 	.word	0x080095bb
 800932c:	080095bb 	.word	0x080095bb
 8009330:	080095bb 	.word	0x080095bb
 8009334:	080095bb 	.word	0x080095bb
 8009338:	080093a3 	.word	0x080093a3
 800933c:	080095bb 	.word	0x080095bb
 8009340:	080095bb 	.word	0x080095bb
 8009344:	080095bb 	.word	0x080095bb
 8009348:	080095bb 	.word	0x080095bb
 800934c:	080095bb 	.word	0x080095bb
 8009350:	080095bb 	.word	0x080095bb
 8009354:	080095bb 	.word	0x080095bb
 8009358:	080093a9 	.word	0x080093a9
 800935c:	080095bb 	.word	0x080095bb
 8009360:	080095bb 	.word	0x080095bb
 8009364:	080095bb 	.word	0x080095bb
 8009368:	080095bb 	.word	0x080095bb
 800936c:	080095bb 	.word	0x080095bb
 8009370:	080095bb 	.word	0x080095bb
 8009374:	080095bb 	.word	0x080095bb
 8009378:	080093af 	.word	0x080093af
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800937c:	4b94      	ldr	r3, [pc, #592]	; (80095d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f003 0320 	and.w	r3, r3, #32
 8009384:	2b00      	cmp	r3, #0
 8009386:	d009      	beq.n	800939c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009388:	4b91      	ldr	r3, [pc, #580]	; (80095d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	08db      	lsrs	r3, r3, #3
 800938e:	f003 0303 	and.w	r3, r3, #3
 8009392:	4a90      	ldr	r2, [pc, #576]	; (80095d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009394:	fa22 f303 	lsr.w	r3, r2, r3
 8009398:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800939a:	e111      	b.n	80095c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800939c:	4b8d      	ldr	r3, [pc, #564]	; (80095d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800939e:	61bb      	str	r3, [r7, #24]
      break;
 80093a0:	e10e      	b.n	80095c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80093a2:	4b8d      	ldr	r3, [pc, #564]	; (80095d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80093a4:	61bb      	str	r3, [r7, #24]
      break;
 80093a6:	e10b      	b.n	80095c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80093a8:	4b8c      	ldr	r3, [pc, #560]	; (80095dc <HAL_RCC_GetSysClockFreq+0x2e0>)
 80093aa:	61bb      	str	r3, [r7, #24]
      break;
 80093ac:	e108      	b.n	80095c0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80093ae:	4b88      	ldr	r3, [pc, #544]	; (80095d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093b2:	f003 0303 	and.w	r3, r3, #3
 80093b6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80093b8:	4b85      	ldr	r3, [pc, #532]	; (80095d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093bc:	091b      	lsrs	r3, r3, #4
 80093be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80093c2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80093c4:	4b82      	ldr	r3, [pc, #520]	; (80095d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093c8:	f003 0301 	and.w	r3, r3, #1
 80093cc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80093ce:	4b80      	ldr	r3, [pc, #512]	; (80095d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093d2:	08db      	lsrs	r3, r3, #3
 80093d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80093d8:	68fa      	ldr	r2, [r7, #12]
 80093da:	fb02 f303 	mul.w	r3, r2, r3
 80093de:	ee07 3a90 	vmov	s15, r3
 80093e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093e6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80093ea:	693b      	ldr	r3, [r7, #16]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	f000 80e1 	beq.w	80095b4 <HAL_RCC_GetSysClockFreq+0x2b8>
 80093f2:	697b      	ldr	r3, [r7, #20]
 80093f4:	2b02      	cmp	r3, #2
 80093f6:	f000 8083 	beq.w	8009500 <HAL_RCC_GetSysClockFreq+0x204>
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	2b02      	cmp	r3, #2
 80093fe:	f200 80a1 	bhi.w	8009544 <HAL_RCC_GetSysClockFreq+0x248>
 8009402:	697b      	ldr	r3, [r7, #20]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d003      	beq.n	8009410 <HAL_RCC_GetSysClockFreq+0x114>
 8009408:	697b      	ldr	r3, [r7, #20]
 800940a:	2b01      	cmp	r3, #1
 800940c:	d056      	beq.n	80094bc <HAL_RCC_GetSysClockFreq+0x1c0>
 800940e:	e099      	b.n	8009544 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009410:	4b6f      	ldr	r3, [pc, #444]	; (80095d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f003 0320 	and.w	r3, r3, #32
 8009418:	2b00      	cmp	r3, #0
 800941a:	d02d      	beq.n	8009478 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800941c:	4b6c      	ldr	r3, [pc, #432]	; (80095d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	08db      	lsrs	r3, r3, #3
 8009422:	f003 0303 	and.w	r3, r3, #3
 8009426:	4a6b      	ldr	r2, [pc, #428]	; (80095d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009428:	fa22 f303 	lsr.w	r3, r2, r3
 800942c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	ee07 3a90 	vmov	s15, r3
 8009434:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009438:	693b      	ldr	r3, [r7, #16]
 800943a:	ee07 3a90 	vmov	s15, r3
 800943e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009442:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009446:	4b62      	ldr	r3, [pc, #392]	; (80095d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800944a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800944e:	ee07 3a90 	vmov	s15, r3
 8009452:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009456:	ed97 6a02 	vldr	s12, [r7, #8]
 800945a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80095e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800945e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009462:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009466:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800946a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800946e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009472:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8009476:	e087      	b.n	8009588 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009478:	693b      	ldr	r3, [r7, #16]
 800947a:	ee07 3a90 	vmov	s15, r3
 800947e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009482:	eddf 6a58 	vldr	s13, [pc, #352]	; 80095e4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009486:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800948a:	4b51      	ldr	r3, [pc, #324]	; (80095d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800948c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800948e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009492:	ee07 3a90 	vmov	s15, r3
 8009496:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800949a:	ed97 6a02 	vldr	s12, [r7, #8]
 800949e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80095e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80094a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80094ba:	e065      	b.n	8009588 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80094bc:	693b      	ldr	r3, [r7, #16]
 80094be:	ee07 3a90 	vmov	s15, r3
 80094c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094c6:	eddf 6a48 	vldr	s13, [pc, #288]	; 80095e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80094ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094ce:	4b40      	ldr	r3, [pc, #256]	; (80095d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094d6:	ee07 3a90 	vmov	s15, r3
 80094da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094de:	ed97 6a02 	vldr	s12, [r7, #8]
 80094e2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80095e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80094e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80094fe:	e043      	b.n	8009588 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009500:	693b      	ldr	r3, [r7, #16]
 8009502:	ee07 3a90 	vmov	s15, r3
 8009506:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800950a:	eddf 6a38 	vldr	s13, [pc, #224]	; 80095ec <HAL_RCC_GetSysClockFreq+0x2f0>
 800950e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009512:	4b2f      	ldr	r3, [pc, #188]	; (80095d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009516:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800951a:	ee07 3a90 	vmov	s15, r3
 800951e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009522:	ed97 6a02 	vldr	s12, [r7, #8]
 8009526:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80095e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800952a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800952e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009532:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009536:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800953a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800953e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009542:	e021      	b.n	8009588 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009544:	693b      	ldr	r3, [r7, #16]
 8009546:	ee07 3a90 	vmov	s15, r3
 800954a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800954e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80095e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009552:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009556:	4b1e      	ldr	r3, [pc, #120]	; (80095d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800955a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800955e:	ee07 3a90 	vmov	s15, r3
 8009562:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009566:	ed97 6a02 	vldr	s12, [r7, #8]
 800956a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80095e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800956e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009572:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009576:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800957a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800957e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009582:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009586:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009588:	4b11      	ldr	r3, [pc, #68]	; (80095d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800958a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800958c:	0a5b      	lsrs	r3, r3, #9
 800958e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009592:	3301      	adds	r3, #1
 8009594:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	ee07 3a90 	vmov	s15, r3
 800959c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80095a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80095a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80095a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80095ac:	ee17 3a90 	vmov	r3, s15
 80095b0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80095b2:	e005      	b.n	80095c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80095b4:	2300      	movs	r3, #0
 80095b6:	61bb      	str	r3, [r7, #24]
      break;
 80095b8:	e002      	b.n	80095c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80095ba:	4b07      	ldr	r3, [pc, #28]	; (80095d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80095bc:	61bb      	str	r3, [r7, #24]
      break;
 80095be:	bf00      	nop
  }

  return sysclockfreq;
 80095c0:	69bb      	ldr	r3, [r7, #24]
}
 80095c2:	4618      	mov	r0, r3
 80095c4:	3724      	adds	r7, #36	; 0x24
 80095c6:	46bd      	mov	sp, r7
 80095c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095cc:	4770      	bx	lr
 80095ce:	bf00      	nop
 80095d0:	58024400 	.word	0x58024400
 80095d4:	03d09000 	.word	0x03d09000
 80095d8:	003d0900 	.word	0x003d0900
 80095dc:	017d7840 	.word	0x017d7840
 80095e0:	46000000 	.word	0x46000000
 80095e4:	4c742400 	.word	0x4c742400
 80095e8:	4a742400 	.word	0x4a742400
 80095ec:	4bbebc20 	.word	0x4bbebc20

080095f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b082      	sub	sp, #8
 80095f4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80095f6:	f7ff fe81 	bl	80092fc <HAL_RCC_GetSysClockFreq>
 80095fa:	4602      	mov	r2, r0
 80095fc:	4b10      	ldr	r3, [pc, #64]	; (8009640 <HAL_RCC_GetHCLKFreq+0x50>)
 80095fe:	699b      	ldr	r3, [r3, #24]
 8009600:	0a1b      	lsrs	r3, r3, #8
 8009602:	f003 030f 	and.w	r3, r3, #15
 8009606:	490f      	ldr	r1, [pc, #60]	; (8009644 <HAL_RCC_GetHCLKFreq+0x54>)
 8009608:	5ccb      	ldrb	r3, [r1, r3]
 800960a:	f003 031f 	and.w	r3, r3, #31
 800960e:	fa22 f303 	lsr.w	r3, r2, r3
 8009612:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009614:	4b0a      	ldr	r3, [pc, #40]	; (8009640 <HAL_RCC_GetHCLKFreq+0x50>)
 8009616:	699b      	ldr	r3, [r3, #24]
 8009618:	f003 030f 	and.w	r3, r3, #15
 800961c:	4a09      	ldr	r2, [pc, #36]	; (8009644 <HAL_RCC_GetHCLKFreq+0x54>)
 800961e:	5cd3      	ldrb	r3, [r2, r3]
 8009620:	f003 031f 	and.w	r3, r3, #31
 8009624:	687a      	ldr	r2, [r7, #4]
 8009626:	fa22 f303 	lsr.w	r3, r2, r3
 800962a:	4a07      	ldr	r2, [pc, #28]	; (8009648 <HAL_RCC_GetHCLKFreq+0x58>)
 800962c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800962e:	4a07      	ldr	r2, [pc, #28]	; (800964c <HAL_RCC_GetHCLKFreq+0x5c>)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009634:	4b04      	ldr	r3, [pc, #16]	; (8009648 <HAL_RCC_GetHCLKFreq+0x58>)
 8009636:	681b      	ldr	r3, [r3, #0]
}
 8009638:	4618      	mov	r0, r3
 800963a:	3708      	adds	r7, #8
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}
 8009640:	58024400 	.word	0x58024400
 8009644:	08014b00 	.word	0x08014b00
 8009648:	2400008c 	.word	0x2400008c
 800964c:	24000088 	.word	0x24000088

08009650 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009654:	f7ff ffcc 	bl	80095f0 <HAL_RCC_GetHCLKFreq>
 8009658:	4602      	mov	r2, r0
 800965a:	4b06      	ldr	r3, [pc, #24]	; (8009674 <HAL_RCC_GetPCLK1Freq+0x24>)
 800965c:	69db      	ldr	r3, [r3, #28]
 800965e:	091b      	lsrs	r3, r3, #4
 8009660:	f003 0307 	and.w	r3, r3, #7
 8009664:	4904      	ldr	r1, [pc, #16]	; (8009678 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009666:	5ccb      	ldrb	r3, [r1, r3]
 8009668:	f003 031f 	and.w	r3, r3, #31
 800966c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009670:	4618      	mov	r0, r3
 8009672:	bd80      	pop	{r7, pc}
 8009674:	58024400 	.word	0x58024400
 8009678:	08014b00 	.word	0x08014b00

0800967c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009680:	f7ff ffb6 	bl	80095f0 <HAL_RCC_GetHCLKFreq>
 8009684:	4602      	mov	r2, r0
 8009686:	4b06      	ldr	r3, [pc, #24]	; (80096a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009688:	69db      	ldr	r3, [r3, #28]
 800968a:	0a1b      	lsrs	r3, r3, #8
 800968c:	f003 0307 	and.w	r3, r3, #7
 8009690:	4904      	ldr	r1, [pc, #16]	; (80096a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009692:	5ccb      	ldrb	r3, [r1, r3]
 8009694:	f003 031f 	and.w	r3, r3, #31
 8009698:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800969c:	4618      	mov	r0, r3
 800969e:	bd80      	pop	{r7, pc}
 80096a0:	58024400 	.word	0x58024400
 80096a4:	08014b00 	.word	0x08014b00

080096a8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80096a8:	b480      	push	{r7}
 80096aa:	b083      	sub	sp, #12
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
 80096b0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	223f      	movs	r2, #63	; 0x3f
 80096b6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80096b8:	4b1a      	ldr	r3, [pc, #104]	; (8009724 <HAL_RCC_GetClockConfig+0x7c>)
 80096ba:	691b      	ldr	r3, [r3, #16]
 80096bc:	f003 0207 	and.w	r2, r3, #7
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80096c4:	4b17      	ldr	r3, [pc, #92]	; (8009724 <HAL_RCC_GetClockConfig+0x7c>)
 80096c6:	699b      	ldr	r3, [r3, #24]
 80096c8:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80096d0:	4b14      	ldr	r3, [pc, #80]	; (8009724 <HAL_RCC_GetClockConfig+0x7c>)
 80096d2:	699b      	ldr	r3, [r3, #24]
 80096d4:	f003 020f 	and.w	r2, r3, #15
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80096dc:	4b11      	ldr	r3, [pc, #68]	; (8009724 <HAL_RCC_GetClockConfig+0x7c>)
 80096de:	699b      	ldr	r3, [r3, #24]
 80096e0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80096e8:	4b0e      	ldr	r3, [pc, #56]	; (8009724 <HAL_RCC_GetClockConfig+0x7c>)
 80096ea:	69db      	ldr	r3, [r3, #28]
 80096ec:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80096f4:	4b0b      	ldr	r3, [pc, #44]	; (8009724 <HAL_RCC_GetClockConfig+0x7c>)
 80096f6:	69db      	ldr	r3, [r3, #28]
 80096f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8009700:	4b08      	ldr	r3, [pc, #32]	; (8009724 <HAL_RCC_GetClockConfig+0x7c>)
 8009702:	6a1b      	ldr	r3, [r3, #32]
 8009704:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800970c:	4b06      	ldr	r3, [pc, #24]	; (8009728 <HAL_RCC_GetClockConfig+0x80>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f003 020f 	and.w	r2, r3, #15
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	601a      	str	r2, [r3, #0]
}
 8009718:	bf00      	nop
 800971a:	370c      	adds	r7, #12
 800971c:	46bd      	mov	sp, r7
 800971e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009722:	4770      	bx	lr
 8009724:	58024400 	.word	0x58024400
 8009728:	52002000 	.word	0x52002000

0800972c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800972c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009730:	b0ca      	sub	sp, #296	; 0x128
 8009732:	af00      	add	r7, sp, #0
 8009734:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009738:	2300      	movs	r3, #0
 800973a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800973e:	2300      	movs	r3, #0
 8009740:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009744:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800974c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8009750:	2500      	movs	r5, #0
 8009752:	ea54 0305 	orrs.w	r3, r4, r5
 8009756:	d049      	beq.n	80097ec <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009758:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800975c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800975e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009762:	d02f      	beq.n	80097c4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009764:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009768:	d828      	bhi.n	80097bc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800976a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800976e:	d01a      	beq.n	80097a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009770:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009774:	d822      	bhi.n	80097bc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009776:	2b00      	cmp	r3, #0
 8009778:	d003      	beq.n	8009782 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800977a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800977e:	d007      	beq.n	8009790 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009780:	e01c      	b.n	80097bc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009782:	4bb8      	ldr	r3, [pc, #736]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009786:	4ab7      	ldr	r2, [pc, #732]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009788:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800978c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800978e:	e01a      	b.n	80097c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009790:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009794:	3308      	adds	r3, #8
 8009796:	2102      	movs	r1, #2
 8009798:	4618      	mov	r0, r3
 800979a:	f002 fb61 	bl	800be60 <RCCEx_PLL2_Config>
 800979e:	4603      	mov	r3, r0
 80097a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80097a4:	e00f      	b.n	80097c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80097a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097aa:	3328      	adds	r3, #40	; 0x28
 80097ac:	2102      	movs	r1, #2
 80097ae:	4618      	mov	r0, r3
 80097b0:	f002 fc08 	bl	800bfc4 <RCCEx_PLL3_Config>
 80097b4:	4603      	mov	r3, r0
 80097b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80097ba:	e004      	b.n	80097c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80097bc:	2301      	movs	r3, #1
 80097be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80097c2:	e000      	b.n	80097c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80097c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d10a      	bne.n	80097e4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80097ce:	4ba5      	ldr	r3, [pc, #660]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80097d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097d2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80097d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80097dc:	4aa1      	ldr	r2, [pc, #644]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80097de:	430b      	orrs	r3, r1
 80097e0:	6513      	str	r3, [r2, #80]	; 0x50
 80097e2:	e003      	b.n	80097ec <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80097e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80097ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80097f8:	f04f 0900 	mov.w	r9, #0
 80097fc:	ea58 0309 	orrs.w	r3, r8, r9
 8009800:	d047      	beq.n	8009892 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8009802:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009808:	2b04      	cmp	r3, #4
 800980a:	d82a      	bhi.n	8009862 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800980c:	a201      	add	r2, pc, #4	; (adr r2, 8009814 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800980e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009812:	bf00      	nop
 8009814:	08009829 	.word	0x08009829
 8009818:	08009837 	.word	0x08009837
 800981c:	0800984d 	.word	0x0800984d
 8009820:	0800986b 	.word	0x0800986b
 8009824:	0800986b 	.word	0x0800986b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009828:	4b8e      	ldr	r3, [pc, #568]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800982a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800982c:	4a8d      	ldr	r2, [pc, #564]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800982e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009832:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009834:	e01a      	b.n	800986c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009836:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800983a:	3308      	adds	r3, #8
 800983c:	2100      	movs	r1, #0
 800983e:	4618      	mov	r0, r3
 8009840:	f002 fb0e 	bl	800be60 <RCCEx_PLL2_Config>
 8009844:	4603      	mov	r3, r0
 8009846:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800984a:	e00f      	b.n	800986c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800984c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009850:	3328      	adds	r3, #40	; 0x28
 8009852:	2100      	movs	r1, #0
 8009854:	4618      	mov	r0, r3
 8009856:	f002 fbb5 	bl	800bfc4 <RCCEx_PLL3_Config>
 800985a:	4603      	mov	r3, r0
 800985c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009860:	e004      	b.n	800986c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009862:	2301      	movs	r3, #1
 8009864:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009868:	e000      	b.n	800986c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800986a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800986c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009870:	2b00      	cmp	r3, #0
 8009872:	d10a      	bne.n	800988a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009874:	4b7b      	ldr	r3, [pc, #492]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009876:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009878:	f023 0107 	bic.w	r1, r3, #7
 800987c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009882:	4a78      	ldr	r2, [pc, #480]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009884:	430b      	orrs	r3, r1
 8009886:	6513      	str	r3, [r2, #80]	; 0x50
 8009888:	e003      	b.n	8009892 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800988a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800988e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009892:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800989a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800989e:	f04f 0b00 	mov.w	fp, #0
 80098a2:	ea5a 030b 	orrs.w	r3, sl, fp
 80098a6:	d04c      	beq.n	8009942 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80098a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098b2:	d030      	beq.n	8009916 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80098b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098b8:	d829      	bhi.n	800990e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80098ba:	2bc0      	cmp	r3, #192	; 0xc0
 80098bc:	d02d      	beq.n	800991a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80098be:	2bc0      	cmp	r3, #192	; 0xc0
 80098c0:	d825      	bhi.n	800990e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80098c2:	2b80      	cmp	r3, #128	; 0x80
 80098c4:	d018      	beq.n	80098f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80098c6:	2b80      	cmp	r3, #128	; 0x80
 80098c8:	d821      	bhi.n	800990e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d002      	beq.n	80098d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80098ce:	2b40      	cmp	r3, #64	; 0x40
 80098d0:	d007      	beq.n	80098e2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80098d2:	e01c      	b.n	800990e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098d4:	4b63      	ldr	r3, [pc, #396]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80098d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098d8:	4a62      	ldr	r2, [pc, #392]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80098da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80098e0:	e01c      	b.n	800991c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80098e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098e6:	3308      	adds	r3, #8
 80098e8:	2100      	movs	r1, #0
 80098ea:	4618      	mov	r0, r3
 80098ec:	f002 fab8 	bl	800be60 <RCCEx_PLL2_Config>
 80098f0:	4603      	mov	r3, r0
 80098f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80098f6:	e011      	b.n	800991c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80098f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098fc:	3328      	adds	r3, #40	; 0x28
 80098fe:	2100      	movs	r1, #0
 8009900:	4618      	mov	r0, r3
 8009902:	f002 fb5f 	bl	800bfc4 <RCCEx_PLL3_Config>
 8009906:	4603      	mov	r3, r0
 8009908:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800990c:	e006      	b.n	800991c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800990e:	2301      	movs	r3, #1
 8009910:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009914:	e002      	b.n	800991c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009916:	bf00      	nop
 8009918:	e000      	b.n	800991c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800991a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800991c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009920:	2b00      	cmp	r3, #0
 8009922:	d10a      	bne.n	800993a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009924:	4b4f      	ldr	r3, [pc, #316]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009926:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009928:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800992c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009930:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009932:	4a4c      	ldr	r2, [pc, #304]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009934:	430b      	orrs	r3, r1
 8009936:	6513      	str	r3, [r2, #80]	; 0x50
 8009938:	e003      	b.n	8009942 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800993a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800993e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009942:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800994a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800994e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009952:	2300      	movs	r3, #0
 8009954:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009958:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800995c:	460b      	mov	r3, r1
 800995e:	4313      	orrs	r3, r2
 8009960:	d053      	beq.n	8009a0a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8009962:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009966:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800996a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800996e:	d035      	beq.n	80099dc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8009970:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009974:	d82e      	bhi.n	80099d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009976:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800997a:	d031      	beq.n	80099e0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800997c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009980:	d828      	bhi.n	80099d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009982:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009986:	d01a      	beq.n	80099be <HAL_RCCEx_PeriphCLKConfig+0x292>
 8009988:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800998c:	d822      	bhi.n	80099d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800998e:	2b00      	cmp	r3, #0
 8009990:	d003      	beq.n	800999a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8009992:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009996:	d007      	beq.n	80099a8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8009998:	e01c      	b.n	80099d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800999a:	4b32      	ldr	r3, [pc, #200]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800999c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800999e:	4a31      	ldr	r2, [pc, #196]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80099a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80099a4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80099a6:	e01c      	b.n	80099e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80099a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099ac:	3308      	adds	r3, #8
 80099ae:	2100      	movs	r1, #0
 80099b0:	4618      	mov	r0, r3
 80099b2:	f002 fa55 	bl	800be60 <RCCEx_PLL2_Config>
 80099b6:	4603      	mov	r3, r0
 80099b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80099bc:	e011      	b.n	80099e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80099be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099c2:	3328      	adds	r3, #40	; 0x28
 80099c4:	2100      	movs	r1, #0
 80099c6:	4618      	mov	r0, r3
 80099c8:	f002 fafc 	bl	800bfc4 <RCCEx_PLL3_Config>
 80099cc:	4603      	mov	r3, r0
 80099ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80099d2:	e006      	b.n	80099e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80099d4:	2301      	movs	r3, #1
 80099d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80099da:	e002      	b.n	80099e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80099dc:	bf00      	nop
 80099de:	e000      	b.n	80099e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80099e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80099e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d10b      	bne.n	8009a02 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80099ea:	4b1e      	ldr	r3, [pc, #120]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80099ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099ee:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80099f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80099fa:	4a1a      	ldr	r2, [pc, #104]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80099fc:	430b      	orrs	r3, r1
 80099fe:	6593      	str	r3, [r2, #88]	; 0x58
 8009a00:	e003      	b.n	8009a0a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a06:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a12:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8009a16:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009a20:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8009a24:	460b      	mov	r3, r1
 8009a26:	4313      	orrs	r3, r2
 8009a28:	d056      	beq.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8009a2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a2e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009a32:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009a36:	d038      	beq.n	8009aaa <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009a38:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009a3c:	d831      	bhi.n	8009aa2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009a3e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009a42:	d034      	beq.n	8009aae <HAL_RCCEx_PeriphCLKConfig+0x382>
 8009a44:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009a48:	d82b      	bhi.n	8009aa2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009a4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009a4e:	d01d      	beq.n	8009a8c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8009a50:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009a54:	d825      	bhi.n	8009aa2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d006      	beq.n	8009a68 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8009a5a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009a5e:	d00a      	beq.n	8009a76 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009a60:	e01f      	b.n	8009aa2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009a62:	bf00      	nop
 8009a64:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a68:	4ba2      	ldr	r3, [pc, #648]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a6c:	4aa1      	ldr	r2, [pc, #644]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009a6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009a74:	e01c      	b.n	8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a7a:	3308      	adds	r3, #8
 8009a7c:	2100      	movs	r1, #0
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f002 f9ee 	bl	800be60 <RCCEx_PLL2_Config>
 8009a84:	4603      	mov	r3, r0
 8009a86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009a8a:	e011      	b.n	8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009a8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a90:	3328      	adds	r3, #40	; 0x28
 8009a92:	2100      	movs	r1, #0
 8009a94:	4618      	mov	r0, r3
 8009a96:	f002 fa95 	bl	800bfc4 <RCCEx_PLL3_Config>
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009aa0:	e006      	b.n	8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009aa8:	e002      	b.n	8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009aaa:	bf00      	nop
 8009aac:	e000      	b.n	8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009aae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ab0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d10b      	bne.n	8009ad0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009ab8:	4b8e      	ldr	r3, [pc, #568]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009abc:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8009ac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ac4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009ac8:	4a8a      	ldr	r2, [pc, #552]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009aca:	430b      	orrs	r3, r1
 8009acc:	6593      	str	r3, [r2, #88]	; 0x58
 8009ace:	e003      	b.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ad0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ad4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ae0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8009ae4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009ae8:	2300      	movs	r3, #0
 8009aea:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009aee:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8009af2:	460b      	mov	r3, r1
 8009af4:	4313      	orrs	r3, r2
 8009af6:	d03a      	beq.n	8009b6e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8009af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009afe:	2b30      	cmp	r3, #48	; 0x30
 8009b00:	d01f      	beq.n	8009b42 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8009b02:	2b30      	cmp	r3, #48	; 0x30
 8009b04:	d819      	bhi.n	8009b3a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009b06:	2b20      	cmp	r3, #32
 8009b08:	d00c      	beq.n	8009b24 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8009b0a:	2b20      	cmp	r3, #32
 8009b0c:	d815      	bhi.n	8009b3a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d019      	beq.n	8009b46 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8009b12:	2b10      	cmp	r3, #16
 8009b14:	d111      	bne.n	8009b3a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b16:	4b77      	ldr	r3, [pc, #476]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b1a:	4a76      	ldr	r2, [pc, #472]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009b1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b20:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009b22:	e011      	b.n	8009b48 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009b24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b28:	3308      	adds	r3, #8
 8009b2a:	2102      	movs	r1, #2
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	f002 f997 	bl	800be60 <RCCEx_PLL2_Config>
 8009b32:	4603      	mov	r3, r0
 8009b34:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009b38:	e006      	b.n	8009b48 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009b40:	e002      	b.n	8009b48 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009b42:	bf00      	nop
 8009b44:	e000      	b.n	8009b48 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009b46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b48:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d10a      	bne.n	8009b66 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009b50:	4b68      	ldr	r3, [pc, #416]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009b52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b54:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8009b58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b5e:	4a65      	ldr	r2, [pc, #404]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009b60:	430b      	orrs	r3, r1
 8009b62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009b64:	e003      	b.n	8009b6e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b6a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009b6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b76:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8009b7a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009b7e:	2300      	movs	r3, #0
 8009b80:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009b84:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8009b88:	460b      	mov	r3, r1
 8009b8a:	4313      	orrs	r3, r2
 8009b8c:	d051      	beq.n	8009c32 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8009b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009b98:	d035      	beq.n	8009c06 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8009b9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009b9e:	d82e      	bhi.n	8009bfe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009ba0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009ba4:	d031      	beq.n	8009c0a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8009ba6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009baa:	d828      	bhi.n	8009bfe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009bac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009bb0:	d01a      	beq.n	8009be8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8009bb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009bb6:	d822      	bhi.n	8009bfe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d003      	beq.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8009bbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009bc0:	d007      	beq.n	8009bd2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8009bc2:	e01c      	b.n	8009bfe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009bc4:	4b4b      	ldr	r3, [pc, #300]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bc8:	4a4a      	ldr	r2, [pc, #296]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009bca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009bce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009bd0:	e01c      	b.n	8009c0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bd6:	3308      	adds	r3, #8
 8009bd8:	2100      	movs	r1, #0
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f002 f940 	bl	800be60 <RCCEx_PLL2_Config>
 8009be0:	4603      	mov	r3, r0
 8009be2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009be6:	e011      	b.n	8009c0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009be8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bec:	3328      	adds	r3, #40	; 0x28
 8009bee:	2100      	movs	r1, #0
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	f002 f9e7 	bl	800bfc4 <RCCEx_PLL3_Config>
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009bfc:	e006      	b.n	8009c0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009bfe:	2301      	movs	r3, #1
 8009c00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009c04:	e002      	b.n	8009c0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009c06:	bf00      	nop
 8009c08:	e000      	b.n	8009c0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009c0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d10a      	bne.n	8009c2a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009c14:	4b37      	ldr	r3, [pc, #220]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009c16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c18:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8009c1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c22:	4a34      	ldr	r2, [pc, #208]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009c24:	430b      	orrs	r3, r1
 8009c26:	6513      	str	r3, [r2, #80]	; 0x50
 8009c28:	e003      	b.n	8009c32 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c2e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c3a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8009c3e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009c42:	2300      	movs	r3, #0
 8009c44:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009c48:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8009c4c:	460b      	mov	r3, r1
 8009c4e:	4313      	orrs	r3, r2
 8009c50:	d056      	beq.n	8009d00 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009c5c:	d033      	beq.n	8009cc6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8009c5e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009c62:	d82c      	bhi.n	8009cbe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009c64:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009c68:	d02f      	beq.n	8009cca <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8009c6a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009c6e:	d826      	bhi.n	8009cbe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009c70:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009c74:	d02b      	beq.n	8009cce <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8009c76:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009c7a:	d820      	bhi.n	8009cbe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009c7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009c80:	d012      	beq.n	8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8009c82:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009c86:	d81a      	bhi.n	8009cbe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d022      	beq.n	8009cd2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8009c8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c90:	d115      	bne.n	8009cbe <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c96:	3308      	adds	r3, #8
 8009c98:	2101      	movs	r1, #1
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f002 f8e0 	bl	800be60 <RCCEx_PLL2_Config>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009ca6:	e015      	b.n	8009cd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009ca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cac:	3328      	adds	r3, #40	; 0x28
 8009cae:	2101      	movs	r1, #1
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	f002 f987 	bl	800bfc4 <RCCEx_PLL3_Config>
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009cbc:	e00a      	b.n	8009cd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009cc4:	e006      	b.n	8009cd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009cc6:	bf00      	nop
 8009cc8:	e004      	b.n	8009cd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009cca:	bf00      	nop
 8009ccc:	e002      	b.n	8009cd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009cce:	bf00      	nop
 8009cd0:	e000      	b.n	8009cd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009cd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009cd4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d10d      	bne.n	8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009cdc:	4b05      	ldr	r3, [pc, #20]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009cde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ce0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8009ce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ce8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009cea:	4a02      	ldr	r2, [pc, #8]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009cec:	430b      	orrs	r3, r1
 8009cee:	6513      	str	r3, [r2, #80]	; 0x50
 8009cf0:	e006      	b.n	8009d00 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009cf2:	bf00      	nop
 8009cf4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cf8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009cfc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009d00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d08:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8009d0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009d10:	2300      	movs	r3, #0
 8009d12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009d16:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8009d1a:	460b      	mov	r3, r1
 8009d1c:	4313      	orrs	r3, r2
 8009d1e:	d055      	beq.n	8009dcc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009d20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d24:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009d28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009d2c:	d033      	beq.n	8009d96 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8009d2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009d32:	d82c      	bhi.n	8009d8e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009d34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d38:	d02f      	beq.n	8009d9a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8009d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d3e:	d826      	bhi.n	8009d8e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009d40:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009d44:	d02b      	beq.n	8009d9e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8009d46:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009d4a:	d820      	bhi.n	8009d8e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009d4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d50:	d012      	beq.n	8009d78 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8009d52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d56:	d81a      	bhi.n	8009d8e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d022      	beq.n	8009da2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8009d5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009d60:	d115      	bne.n	8009d8e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009d62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d66:	3308      	adds	r3, #8
 8009d68:	2101      	movs	r1, #1
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f002 f878 	bl	800be60 <RCCEx_PLL2_Config>
 8009d70:	4603      	mov	r3, r0
 8009d72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009d76:	e015      	b.n	8009da4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009d78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d7c:	3328      	adds	r3, #40	; 0x28
 8009d7e:	2101      	movs	r1, #1
 8009d80:	4618      	mov	r0, r3
 8009d82:	f002 f91f 	bl	800bfc4 <RCCEx_PLL3_Config>
 8009d86:	4603      	mov	r3, r0
 8009d88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009d8c:	e00a      	b.n	8009da4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009d8e:	2301      	movs	r3, #1
 8009d90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009d94:	e006      	b.n	8009da4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009d96:	bf00      	nop
 8009d98:	e004      	b.n	8009da4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009d9a:	bf00      	nop
 8009d9c:	e002      	b.n	8009da4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009d9e:	bf00      	nop
 8009da0:	e000      	b.n	8009da4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009da2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009da4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d10b      	bne.n	8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009dac:	4ba3      	ldr	r3, [pc, #652]	; (800a03c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009db0:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8009db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009db8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009dbc:	4a9f      	ldr	r2, [pc, #636]	; (800a03c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009dbe:	430b      	orrs	r3, r1
 8009dc0:	6593      	str	r3, [r2, #88]	; 0x58
 8009dc2:	e003      	b.n	8009dcc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dc4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009dc8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009dcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dd4:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8009dd8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009ddc:	2300      	movs	r3, #0
 8009dde:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009de2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009de6:	460b      	mov	r3, r1
 8009de8:	4313      	orrs	r3, r2
 8009dea:	d037      	beq.n	8009e5c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009dec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009df2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009df6:	d00e      	beq.n	8009e16 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8009df8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009dfc:	d816      	bhi.n	8009e2c <HAL_RCCEx_PeriphCLKConfig+0x700>
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d018      	beq.n	8009e34 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8009e02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009e06:	d111      	bne.n	8009e2c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e08:	4b8c      	ldr	r3, [pc, #560]	; (800a03c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e0c:	4a8b      	ldr	r2, [pc, #556]	; (800a03c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009e14:	e00f      	b.n	8009e36 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009e16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e1a:	3308      	adds	r3, #8
 8009e1c:	2101      	movs	r1, #1
 8009e1e:	4618      	mov	r0, r3
 8009e20:	f002 f81e 	bl	800be60 <RCCEx_PLL2_Config>
 8009e24:	4603      	mov	r3, r0
 8009e26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009e2a:	e004      	b.n	8009e36 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009e32:	e000      	b.n	8009e36 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8009e34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d10a      	bne.n	8009e54 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009e3e:	4b7f      	ldr	r3, [pc, #508]	; (800a03c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e42:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8009e46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e4c:	4a7b      	ldr	r2, [pc, #492]	; (800a03c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e4e:	430b      	orrs	r3, r1
 8009e50:	6513      	str	r3, [r2, #80]	; 0x50
 8009e52:	e003      	b.n	8009e5c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e58:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009e5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e64:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8009e68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009e72:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8009e76:	460b      	mov	r3, r1
 8009e78:	4313      	orrs	r3, r2
 8009e7a:	d039      	beq.n	8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009e7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e82:	2b03      	cmp	r3, #3
 8009e84:	d81c      	bhi.n	8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8009e86:	a201      	add	r2, pc, #4	; (adr r2, 8009e8c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8009e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e8c:	08009ec9 	.word	0x08009ec9
 8009e90:	08009e9d 	.word	0x08009e9d
 8009e94:	08009eab 	.word	0x08009eab
 8009e98:	08009ec9 	.word	0x08009ec9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e9c:	4b67      	ldr	r3, [pc, #412]	; (800a03c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ea0:	4a66      	ldr	r2, [pc, #408]	; (800a03c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009ea2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ea6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009ea8:	e00f      	b.n	8009eca <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009eae:	3308      	adds	r3, #8
 8009eb0:	2102      	movs	r1, #2
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	f001 ffd4 	bl	800be60 <RCCEx_PLL2_Config>
 8009eb8:	4603      	mov	r3, r0
 8009eba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009ebe:	e004      	b.n	8009eca <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009ec0:	2301      	movs	r3, #1
 8009ec2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009ec6:	e000      	b.n	8009eca <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8009ec8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009eca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d10a      	bne.n	8009ee8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009ed2:	4b5a      	ldr	r3, [pc, #360]	; (800a03c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ed6:	f023 0103 	bic.w	r1, r3, #3
 8009eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ede:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ee0:	4a56      	ldr	r2, [pc, #344]	; (800a03c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009ee2:	430b      	orrs	r3, r1
 8009ee4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009ee6:	e003      	b.n	8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ee8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009eec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009ef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ef8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8009efc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009f00:	2300      	movs	r3, #0
 8009f02:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009f06:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8009f0a:	460b      	mov	r3, r1
 8009f0c:	4313      	orrs	r3, r2
 8009f0e:	f000 809f 	beq.w	800a050 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009f12:	4b4b      	ldr	r3, [pc, #300]	; (800a040 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	4a4a      	ldr	r2, [pc, #296]	; (800a040 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009f18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f1c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009f1e:	f7f9 f911 	bl	8003144 <HAL_GetTick>
 8009f22:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009f26:	e00b      	b.n	8009f40 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009f28:	f7f9 f90c 	bl	8003144 <HAL_GetTick>
 8009f2c:	4602      	mov	r2, r0
 8009f2e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009f32:	1ad3      	subs	r3, r2, r3
 8009f34:	2b64      	cmp	r3, #100	; 0x64
 8009f36:	d903      	bls.n	8009f40 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8009f38:	2303      	movs	r3, #3
 8009f3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009f3e:	e005      	b.n	8009f4c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009f40:	4b3f      	ldr	r3, [pc, #252]	; (800a040 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d0ed      	beq.n	8009f28 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8009f4c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d179      	bne.n	800a048 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009f54:	4b39      	ldr	r3, [pc, #228]	; (800a03c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f56:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f5c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009f60:	4053      	eors	r3, r2
 8009f62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d015      	beq.n	8009f96 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009f6a:	4b34      	ldr	r3, [pc, #208]	; (800a03c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f72:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009f76:	4b31      	ldr	r3, [pc, #196]	; (800a03c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f7a:	4a30      	ldr	r2, [pc, #192]	; (800a03c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f80:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009f82:	4b2e      	ldr	r3, [pc, #184]	; (800a03c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f86:	4a2d      	ldr	r2, [pc, #180]	; (800a03c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009f8c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009f8e:	4a2b      	ldr	r2, [pc, #172]	; (800a03c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f90:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009f94:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f9a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009f9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fa2:	d118      	bne.n	8009fd6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fa4:	f7f9 f8ce 	bl	8003144 <HAL_GetTick>
 8009fa8:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009fac:	e00d      	b.n	8009fca <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009fae:	f7f9 f8c9 	bl	8003144 <HAL_GetTick>
 8009fb2:	4602      	mov	r2, r0
 8009fb4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009fb8:	1ad2      	subs	r2, r2, r3
 8009fba:	f241 3388 	movw	r3, #5000	; 0x1388
 8009fbe:	429a      	cmp	r2, r3
 8009fc0:	d903      	bls.n	8009fca <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8009fc2:	2303      	movs	r3, #3
 8009fc4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8009fc8:	e005      	b.n	8009fd6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009fca:	4b1c      	ldr	r3, [pc, #112]	; (800a03c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fce:	f003 0302 	and.w	r3, r3, #2
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d0eb      	beq.n	8009fae <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8009fd6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d129      	bne.n	800a032 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fe2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009fe6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009fea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009fee:	d10e      	bne.n	800a00e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8009ff0:	4b12      	ldr	r3, [pc, #72]	; (800a03c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009ff2:	691b      	ldr	r3, [r3, #16]
 8009ff4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8009ff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ffc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a000:	091a      	lsrs	r2, r3, #4
 800a002:	4b10      	ldr	r3, [pc, #64]	; (800a044 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800a004:	4013      	ands	r3, r2
 800a006:	4a0d      	ldr	r2, [pc, #52]	; (800a03c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a008:	430b      	orrs	r3, r1
 800a00a:	6113      	str	r3, [r2, #16]
 800a00c:	e005      	b.n	800a01a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800a00e:	4b0b      	ldr	r3, [pc, #44]	; (800a03c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a010:	691b      	ldr	r3, [r3, #16]
 800a012:	4a0a      	ldr	r2, [pc, #40]	; (800a03c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a014:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a018:	6113      	str	r3, [r2, #16]
 800a01a:	4b08      	ldr	r3, [pc, #32]	; (800a03c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a01c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800a01e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a022:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a026:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a02a:	4a04      	ldr	r2, [pc, #16]	; (800a03c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a02c:	430b      	orrs	r3, r1
 800a02e:	6713      	str	r3, [r2, #112]	; 0x70
 800a030:	e00e      	b.n	800a050 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a032:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a036:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800a03a:	e009      	b.n	800a050 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800a03c:	58024400 	.word	0x58024400
 800a040:	58024800 	.word	0x58024800
 800a044:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a048:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a04c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a050:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a054:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a058:	f002 0301 	and.w	r3, r2, #1
 800a05c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a060:	2300      	movs	r3, #0
 800a062:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a066:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a06a:	460b      	mov	r3, r1
 800a06c:	4313      	orrs	r3, r2
 800a06e:	f000 8089 	beq.w	800a184 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800a072:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a076:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a078:	2b28      	cmp	r3, #40	; 0x28
 800a07a:	d86b      	bhi.n	800a154 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800a07c:	a201      	add	r2, pc, #4	; (adr r2, 800a084 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a07e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a082:	bf00      	nop
 800a084:	0800a15d 	.word	0x0800a15d
 800a088:	0800a155 	.word	0x0800a155
 800a08c:	0800a155 	.word	0x0800a155
 800a090:	0800a155 	.word	0x0800a155
 800a094:	0800a155 	.word	0x0800a155
 800a098:	0800a155 	.word	0x0800a155
 800a09c:	0800a155 	.word	0x0800a155
 800a0a0:	0800a155 	.word	0x0800a155
 800a0a4:	0800a129 	.word	0x0800a129
 800a0a8:	0800a155 	.word	0x0800a155
 800a0ac:	0800a155 	.word	0x0800a155
 800a0b0:	0800a155 	.word	0x0800a155
 800a0b4:	0800a155 	.word	0x0800a155
 800a0b8:	0800a155 	.word	0x0800a155
 800a0bc:	0800a155 	.word	0x0800a155
 800a0c0:	0800a155 	.word	0x0800a155
 800a0c4:	0800a13f 	.word	0x0800a13f
 800a0c8:	0800a155 	.word	0x0800a155
 800a0cc:	0800a155 	.word	0x0800a155
 800a0d0:	0800a155 	.word	0x0800a155
 800a0d4:	0800a155 	.word	0x0800a155
 800a0d8:	0800a155 	.word	0x0800a155
 800a0dc:	0800a155 	.word	0x0800a155
 800a0e0:	0800a155 	.word	0x0800a155
 800a0e4:	0800a15d 	.word	0x0800a15d
 800a0e8:	0800a155 	.word	0x0800a155
 800a0ec:	0800a155 	.word	0x0800a155
 800a0f0:	0800a155 	.word	0x0800a155
 800a0f4:	0800a155 	.word	0x0800a155
 800a0f8:	0800a155 	.word	0x0800a155
 800a0fc:	0800a155 	.word	0x0800a155
 800a100:	0800a155 	.word	0x0800a155
 800a104:	0800a15d 	.word	0x0800a15d
 800a108:	0800a155 	.word	0x0800a155
 800a10c:	0800a155 	.word	0x0800a155
 800a110:	0800a155 	.word	0x0800a155
 800a114:	0800a155 	.word	0x0800a155
 800a118:	0800a155 	.word	0x0800a155
 800a11c:	0800a155 	.word	0x0800a155
 800a120:	0800a155 	.word	0x0800a155
 800a124:	0800a15d 	.word	0x0800a15d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a128:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a12c:	3308      	adds	r3, #8
 800a12e:	2101      	movs	r1, #1
 800a130:	4618      	mov	r0, r3
 800a132:	f001 fe95 	bl	800be60 <RCCEx_PLL2_Config>
 800a136:	4603      	mov	r3, r0
 800a138:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a13c:	e00f      	b.n	800a15e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a13e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a142:	3328      	adds	r3, #40	; 0x28
 800a144:	2101      	movs	r1, #1
 800a146:	4618      	mov	r0, r3
 800a148:	f001 ff3c 	bl	800bfc4 <RCCEx_PLL3_Config>
 800a14c:	4603      	mov	r3, r0
 800a14e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a152:	e004      	b.n	800a15e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a154:	2301      	movs	r3, #1
 800a156:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a15a:	e000      	b.n	800a15e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800a15c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a15e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a162:	2b00      	cmp	r3, #0
 800a164:	d10a      	bne.n	800a17c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a166:	4bbf      	ldr	r3, [pc, #764]	; (800a464 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a16a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800a16e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a172:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a174:	4abb      	ldr	r2, [pc, #748]	; (800a464 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a176:	430b      	orrs	r3, r1
 800a178:	6553      	str	r3, [r2, #84]	; 0x54
 800a17a:	e003      	b.n	800a184 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a17c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a180:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a184:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a18c:	f002 0302 	and.w	r3, r2, #2
 800a190:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a194:	2300      	movs	r3, #0
 800a196:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a19a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800a19e:	460b      	mov	r3, r1
 800a1a0:	4313      	orrs	r3, r2
 800a1a2:	d041      	beq.n	800a228 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a1a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a1aa:	2b05      	cmp	r3, #5
 800a1ac:	d824      	bhi.n	800a1f8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800a1ae:	a201      	add	r2, pc, #4	; (adr r2, 800a1b4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800a1b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1b4:	0800a201 	.word	0x0800a201
 800a1b8:	0800a1cd 	.word	0x0800a1cd
 800a1bc:	0800a1e3 	.word	0x0800a1e3
 800a1c0:	0800a201 	.word	0x0800a201
 800a1c4:	0800a201 	.word	0x0800a201
 800a1c8:	0800a201 	.word	0x0800a201
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a1cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1d0:	3308      	adds	r3, #8
 800a1d2:	2101      	movs	r1, #1
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	f001 fe43 	bl	800be60 <RCCEx_PLL2_Config>
 800a1da:	4603      	mov	r3, r0
 800a1dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a1e0:	e00f      	b.n	800a202 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a1e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1e6:	3328      	adds	r3, #40	; 0x28
 800a1e8:	2101      	movs	r1, #1
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	f001 feea 	bl	800bfc4 <RCCEx_PLL3_Config>
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a1f6:	e004      	b.n	800a202 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a1fe:	e000      	b.n	800a202 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800a200:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a202:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a206:	2b00      	cmp	r3, #0
 800a208:	d10a      	bne.n	800a220 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a20a:	4b96      	ldr	r3, [pc, #600]	; (800a464 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a20c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a20e:	f023 0107 	bic.w	r1, r3, #7
 800a212:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a216:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a218:	4a92      	ldr	r2, [pc, #584]	; (800a464 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a21a:	430b      	orrs	r3, r1
 800a21c:	6553      	str	r3, [r2, #84]	; 0x54
 800a21e:	e003      	b.n	800a228 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a220:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a224:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a228:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a22c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a230:	f002 0304 	and.w	r3, r2, #4
 800a234:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a238:	2300      	movs	r3, #0
 800a23a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a23e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800a242:	460b      	mov	r3, r1
 800a244:	4313      	orrs	r3, r2
 800a246:	d044      	beq.n	800a2d2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a248:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a24c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a250:	2b05      	cmp	r3, #5
 800a252:	d825      	bhi.n	800a2a0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800a254:	a201      	add	r2, pc, #4	; (adr r2, 800a25c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800a256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a25a:	bf00      	nop
 800a25c:	0800a2a9 	.word	0x0800a2a9
 800a260:	0800a275 	.word	0x0800a275
 800a264:	0800a28b 	.word	0x0800a28b
 800a268:	0800a2a9 	.word	0x0800a2a9
 800a26c:	0800a2a9 	.word	0x0800a2a9
 800a270:	0800a2a9 	.word	0x0800a2a9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a274:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a278:	3308      	adds	r3, #8
 800a27a:	2101      	movs	r1, #1
 800a27c:	4618      	mov	r0, r3
 800a27e:	f001 fdef 	bl	800be60 <RCCEx_PLL2_Config>
 800a282:	4603      	mov	r3, r0
 800a284:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a288:	e00f      	b.n	800a2aa <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a28a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a28e:	3328      	adds	r3, #40	; 0x28
 800a290:	2101      	movs	r1, #1
 800a292:	4618      	mov	r0, r3
 800a294:	f001 fe96 	bl	800bfc4 <RCCEx_PLL3_Config>
 800a298:	4603      	mov	r3, r0
 800a29a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a29e:	e004      	b.n	800a2aa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a2a0:	2301      	movs	r3, #1
 800a2a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a2a6:	e000      	b.n	800a2aa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800a2a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a2aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d10b      	bne.n	800a2ca <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a2b2:	4b6c      	ldr	r3, [pc, #432]	; (800a464 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a2b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2b6:	f023 0107 	bic.w	r1, r3, #7
 800a2ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a2c2:	4a68      	ldr	r2, [pc, #416]	; (800a464 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a2c4:	430b      	orrs	r3, r1
 800a2c6:	6593      	str	r3, [r2, #88]	; 0x58
 800a2c8:	e003      	b.n	800a2d2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a2ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a2d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2da:	f002 0320 	and.w	r3, r2, #32
 800a2de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a2e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a2ec:	460b      	mov	r3, r1
 800a2ee:	4313      	orrs	r3, r2
 800a2f0:	d055      	beq.n	800a39e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a2f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a2fe:	d033      	beq.n	800a368 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800a300:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a304:	d82c      	bhi.n	800a360 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a306:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a30a:	d02f      	beq.n	800a36c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800a30c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a310:	d826      	bhi.n	800a360 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a312:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a316:	d02b      	beq.n	800a370 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800a318:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a31c:	d820      	bhi.n	800a360 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a31e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a322:	d012      	beq.n	800a34a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800a324:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a328:	d81a      	bhi.n	800a360 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d022      	beq.n	800a374 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800a32e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a332:	d115      	bne.n	800a360 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a334:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a338:	3308      	adds	r3, #8
 800a33a:	2100      	movs	r1, #0
 800a33c:	4618      	mov	r0, r3
 800a33e:	f001 fd8f 	bl	800be60 <RCCEx_PLL2_Config>
 800a342:	4603      	mov	r3, r0
 800a344:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a348:	e015      	b.n	800a376 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a34a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a34e:	3328      	adds	r3, #40	; 0x28
 800a350:	2102      	movs	r1, #2
 800a352:	4618      	mov	r0, r3
 800a354:	f001 fe36 	bl	800bfc4 <RCCEx_PLL3_Config>
 800a358:	4603      	mov	r3, r0
 800a35a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a35e:	e00a      	b.n	800a376 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a360:	2301      	movs	r3, #1
 800a362:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a366:	e006      	b.n	800a376 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a368:	bf00      	nop
 800a36a:	e004      	b.n	800a376 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a36c:	bf00      	nop
 800a36e:	e002      	b.n	800a376 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a370:	bf00      	nop
 800a372:	e000      	b.n	800a376 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a374:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a376:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d10b      	bne.n	800a396 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a37e:	4b39      	ldr	r3, [pc, #228]	; (800a464 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a382:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800a386:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a38a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a38e:	4a35      	ldr	r2, [pc, #212]	; (800a464 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a390:	430b      	orrs	r3, r1
 800a392:	6553      	str	r3, [r2, #84]	; 0x54
 800a394:	e003      	b.n	800a39e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a396:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a39a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a39e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800a3aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a3b4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800a3b8:	460b      	mov	r3, r1
 800a3ba:	4313      	orrs	r3, r2
 800a3bc:	d058      	beq.n	800a470 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a3be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a3c6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a3ca:	d033      	beq.n	800a434 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a3cc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a3d0:	d82c      	bhi.n	800a42c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a3d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3d6:	d02f      	beq.n	800a438 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800a3d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3dc:	d826      	bhi.n	800a42c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a3de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a3e2:	d02b      	beq.n	800a43c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800a3e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a3e8:	d820      	bhi.n	800a42c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a3ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a3ee:	d012      	beq.n	800a416 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800a3f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a3f4:	d81a      	bhi.n	800a42c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d022      	beq.n	800a440 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800a3fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a3fe:	d115      	bne.n	800a42c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a400:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a404:	3308      	adds	r3, #8
 800a406:	2100      	movs	r1, #0
 800a408:	4618      	mov	r0, r3
 800a40a:	f001 fd29 	bl	800be60 <RCCEx_PLL2_Config>
 800a40e:	4603      	mov	r3, r0
 800a410:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a414:	e015      	b.n	800a442 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a416:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a41a:	3328      	adds	r3, #40	; 0x28
 800a41c:	2102      	movs	r1, #2
 800a41e:	4618      	mov	r0, r3
 800a420:	f001 fdd0 	bl	800bfc4 <RCCEx_PLL3_Config>
 800a424:	4603      	mov	r3, r0
 800a426:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a42a:	e00a      	b.n	800a442 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a42c:	2301      	movs	r3, #1
 800a42e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a432:	e006      	b.n	800a442 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a434:	bf00      	nop
 800a436:	e004      	b.n	800a442 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a438:	bf00      	nop
 800a43a:	e002      	b.n	800a442 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a43c:	bf00      	nop
 800a43e:	e000      	b.n	800a442 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a440:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a442:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a446:	2b00      	cmp	r3, #0
 800a448:	d10e      	bne.n	800a468 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a44a:	4b06      	ldr	r3, [pc, #24]	; (800a464 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a44c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a44e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800a452:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a456:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a45a:	4a02      	ldr	r2, [pc, #8]	; (800a464 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a45c:	430b      	orrs	r3, r1
 800a45e:	6593      	str	r3, [r2, #88]	; 0x58
 800a460:	e006      	b.n	800a470 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800a462:	bf00      	nop
 800a464:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a468:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a46c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a470:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a474:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a478:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800a47c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a480:	2300      	movs	r3, #0
 800a482:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a486:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800a48a:	460b      	mov	r3, r1
 800a48c:	4313      	orrs	r3, r2
 800a48e:	d055      	beq.n	800a53c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a490:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a494:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a498:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a49c:	d033      	beq.n	800a506 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800a49e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a4a2:	d82c      	bhi.n	800a4fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a4a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a4a8:	d02f      	beq.n	800a50a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800a4aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a4ae:	d826      	bhi.n	800a4fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a4b0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a4b4:	d02b      	beq.n	800a50e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800a4b6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a4ba:	d820      	bhi.n	800a4fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a4bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a4c0:	d012      	beq.n	800a4e8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800a4c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a4c6:	d81a      	bhi.n	800a4fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d022      	beq.n	800a512 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800a4cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a4d0:	d115      	bne.n	800a4fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a4d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4d6:	3308      	adds	r3, #8
 800a4d8:	2100      	movs	r1, #0
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f001 fcc0 	bl	800be60 <RCCEx_PLL2_Config>
 800a4e0:	4603      	mov	r3, r0
 800a4e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a4e6:	e015      	b.n	800a514 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a4e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4ec:	3328      	adds	r3, #40	; 0x28
 800a4ee:	2102      	movs	r1, #2
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	f001 fd67 	bl	800bfc4 <RCCEx_PLL3_Config>
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a4fc:	e00a      	b.n	800a514 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a4fe:	2301      	movs	r3, #1
 800a500:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a504:	e006      	b.n	800a514 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a506:	bf00      	nop
 800a508:	e004      	b.n	800a514 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a50a:	bf00      	nop
 800a50c:	e002      	b.n	800a514 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a50e:	bf00      	nop
 800a510:	e000      	b.n	800a514 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a512:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a514:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d10b      	bne.n	800a534 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a51c:	4ba1      	ldr	r3, [pc, #644]	; (800a7a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a51e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a520:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800a524:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a528:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a52c:	4a9d      	ldr	r2, [pc, #628]	; (800a7a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a52e:	430b      	orrs	r3, r1
 800a530:	6593      	str	r3, [r2, #88]	; 0x58
 800a532:	e003      	b.n	800a53c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a534:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a538:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a53c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a540:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a544:	f002 0308 	and.w	r3, r2, #8
 800a548:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a54c:	2300      	movs	r3, #0
 800a54e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a552:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800a556:	460b      	mov	r3, r1
 800a558:	4313      	orrs	r3, r2
 800a55a:	d01e      	beq.n	800a59a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800a55c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a560:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a564:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a568:	d10c      	bne.n	800a584 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a56a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a56e:	3328      	adds	r3, #40	; 0x28
 800a570:	2102      	movs	r1, #2
 800a572:	4618      	mov	r0, r3
 800a574:	f001 fd26 	bl	800bfc4 <RCCEx_PLL3_Config>
 800a578:	4603      	mov	r3, r0
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d002      	beq.n	800a584 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800a57e:	2301      	movs	r3, #1
 800a580:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a584:	4b87      	ldr	r3, [pc, #540]	; (800a7a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a588:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a58c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a590:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a594:	4a83      	ldr	r2, [pc, #524]	; (800a7a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a596:	430b      	orrs	r3, r1
 800a598:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a59a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a59e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5a2:	f002 0310 	and.w	r3, r2, #16
 800a5a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a5b0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800a5b4:	460b      	mov	r3, r1
 800a5b6:	4313      	orrs	r3, r2
 800a5b8:	d01e      	beq.n	800a5f8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a5ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a5c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5c6:	d10c      	bne.n	800a5e2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a5c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5cc:	3328      	adds	r3, #40	; 0x28
 800a5ce:	2102      	movs	r1, #2
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	f001 fcf7 	bl	800bfc4 <RCCEx_PLL3_Config>
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d002      	beq.n	800a5e2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800a5dc:	2301      	movs	r3, #1
 800a5de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a5e2:	4b70      	ldr	r3, [pc, #448]	; (800a7a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a5e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5e6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a5ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a5f2:	4a6c      	ldr	r2, [pc, #432]	; (800a7a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a5f4:	430b      	orrs	r3, r1
 800a5f6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a5f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a600:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800a604:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a608:	2300      	movs	r3, #0
 800a60a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a60e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800a612:	460b      	mov	r3, r1
 800a614:	4313      	orrs	r3, r2
 800a616:	d03e      	beq.n	800a696 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a618:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a61c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a620:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a624:	d022      	beq.n	800a66c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800a626:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a62a:	d81b      	bhi.n	800a664 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d003      	beq.n	800a638 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800a630:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a634:	d00b      	beq.n	800a64e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800a636:	e015      	b.n	800a664 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a638:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a63c:	3308      	adds	r3, #8
 800a63e:	2100      	movs	r1, #0
 800a640:	4618      	mov	r0, r3
 800a642:	f001 fc0d 	bl	800be60 <RCCEx_PLL2_Config>
 800a646:	4603      	mov	r3, r0
 800a648:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a64c:	e00f      	b.n	800a66e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a64e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a652:	3328      	adds	r3, #40	; 0x28
 800a654:	2102      	movs	r1, #2
 800a656:	4618      	mov	r0, r3
 800a658:	f001 fcb4 	bl	800bfc4 <RCCEx_PLL3_Config>
 800a65c:	4603      	mov	r3, r0
 800a65e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a662:	e004      	b.n	800a66e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a664:	2301      	movs	r3, #1
 800a666:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a66a:	e000      	b.n	800a66e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800a66c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a66e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a672:	2b00      	cmp	r3, #0
 800a674:	d10b      	bne.n	800a68e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a676:	4b4b      	ldr	r3, [pc, #300]	; (800a7a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a67a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800a67e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a682:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a686:	4a47      	ldr	r2, [pc, #284]	; (800a7a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a688:	430b      	orrs	r3, r1
 800a68a:	6593      	str	r3, [r2, #88]	; 0x58
 800a68c:	e003      	b.n	800a696 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a68e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a692:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a696:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a69a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a69e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800a6a2:	67bb      	str	r3, [r7, #120]	; 0x78
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a6a8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800a6ac:	460b      	mov	r3, r1
 800a6ae:	4313      	orrs	r3, r2
 800a6b0:	d03b      	beq.n	800a72a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a6b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6ba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a6be:	d01f      	beq.n	800a700 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800a6c0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a6c4:	d818      	bhi.n	800a6f8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800a6c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a6ca:	d003      	beq.n	800a6d4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800a6cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a6d0:	d007      	beq.n	800a6e2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800a6d2:	e011      	b.n	800a6f8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a6d4:	4b33      	ldr	r3, [pc, #204]	; (800a7a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a6d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6d8:	4a32      	ldr	r2, [pc, #200]	; (800a7a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a6da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a6de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a6e0:	e00f      	b.n	800a702 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a6e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6e6:	3328      	adds	r3, #40	; 0x28
 800a6e8:	2101      	movs	r1, #1
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	f001 fc6a 	bl	800bfc4 <RCCEx_PLL3_Config>
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800a6f6:	e004      	b.n	800a702 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a6f8:	2301      	movs	r3, #1
 800a6fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a6fe:	e000      	b.n	800a702 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800a700:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a702:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a706:	2b00      	cmp	r3, #0
 800a708:	d10b      	bne.n	800a722 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a70a:	4b26      	ldr	r3, [pc, #152]	; (800a7a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a70c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a70e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a712:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a71a:	4a22      	ldr	r2, [pc, #136]	; (800a7a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a71c:	430b      	orrs	r3, r1
 800a71e:	6553      	str	r3, [r2, #84]	; 0x54
 800a720:	e003      	b.n	800a72a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a722:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a726:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a72a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a72e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a732:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800a736:	673b      	str	r3, [r7, #112]	; 0x70
 800a738:	2300      	movs	r3, #0
 800a73a:	677b      	str	r3, [r7, #116]	; 0x74
 800a73c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800a740:	460b      	mov	r3, r1
 800a742:	4313      	orrs	r3, r2
 800a744:	d034      	beq.n	800a7b0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a746:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a74a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d003      	beq.n	800a758 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800a750:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a754:	d007      	beq.n	800a766 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800a756:	e011      	b.n	800a77c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a758:	4b12      	ldr	r3, [pc, #72]	; (800a7a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a75a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a75c:	4a11      	ldr	r2, [pc, #68]	; (800a7a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a75e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a762:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a764:	e00e      	b.n	800a784 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a766:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a76a:	3308      	adds	r3, #8
 800a76c:	2102      	movs	r1, #2
 800a76e:	4618      	mov	r0, r3
 800a770:	f001 fb76 	bl	800be60 <RCCEx_PLL2_Config>
 800a774:	4603      	mov	r3, r0
 800a776:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a77a:	e003      	b.n	800a784 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800a77c:	2301      	movs	r3, #1
 800a77e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a782:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a784:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d10d      	bne.n	800a7a8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a78c:	4b05      	ldr	r3, [pc, #20]	; (800a7a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a78e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a790:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a794:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a798:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a79a:	4a02      	ldr	r2, [pc, #8]	; (800a7a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a79c:	430b      	orrs	r3, r1
 800a79e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a7a0:	e006      	b.n	800a7b0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800a7a2:	bf00      	nop
 800a7a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a7ac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a7b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7b8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800a7bc:	66bb      	str	r3, [r7, #104]	; 0x68
 800a7be:	2300      	movs	r3, #0
 800a7c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a7c2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800a7c6:	460b      	mov	r3, r1
 800a7c8:	4313      	orrs	r3, r2
 800a7ca:	d00c      	beq.n	800a7e6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a7cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7d0:	3328      	adds	r3, #40	; 0x28
 800a7d2:	2102      	movs	r1, #2
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	f001 fbf5 	bl	800bfc4 <RCCEx_PLL3_Config>
 800a7da:	4603      	mov	r3, r0
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d002      	beq.n	800a7e6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a7e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ee:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800a7f2:	663b      	str	r3, [r7, #96]	; 0x60
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	667b      	str	r3, [r7, #100]	; 0x64
 800a7f8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800a7fc:	460b      	mov	r3, r1
 800a7fe:	4313      	orrs	r3, r2
 800a800:	d038      	beq.n	800a874 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a802:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a806:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a80a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a80e:	d018      	beq.n	800a842 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800a810:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a814:	d811      	bhi.n	800a83a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a816:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a81a:	d014      	beq.n	800a846 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800a81c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a820:	d80b      	bhi.n	800a83a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a822:	2b00      	cmp	r3, #0
 800a824:	d011      	beq.n	800a84a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800a826:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a82a:	d106      	bne.n	800a83a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a82c:	4bc3      	ldr	r3, [pc, #780]	; (800ab3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a82e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a830:	4ac2      	ldr	r2, [pc, #776]	; (800ab3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a832:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a836:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a838:	e008      	b.n	800a84c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a83a:	2301      	movs	r3, #1
 800a83c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a840:	e004      	b.n	800a84c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a842:	bf00      	nop
 800a844:	e002      	b.n	800a84c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a846:	bf00      	nop
 800a848:	e000      	b.n	800a84c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a84a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a84c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a850:	2b00      	cmp	r3, #0
 800a852:	d10b      	bne.n	800a86c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a854:	4bb9      	ldr	r3, [pc, #740]	; (800ab3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a858:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a85c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a860:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a864:	4ab5      	ldr	r2, [pc, #724]	; (800ab3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a866:	430b      	orrs	r3, r1
 800a868:	6553      	str	r3, [r2, #84]	; 0x54
 800a86a:	e003      	b.n	800a874 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a86c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a870:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a874:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a87c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800a880:	65bb      	str	r3, [r7, #88]	; 0x58
 800a882:	2300      	movs	r3, #0
 800a884:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a886:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800a88a:	460b      	mov	r3, r1
 800a88c:	4313      	orrs	r3, r2
 800a88e:	d009      	beq.n	800a8a4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a890:	4baa      	ldr	r3, [pc, #680]	; (800ab3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a892:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a894:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a898:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a89c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a89e:	4aa7      	ldr	r2, [pc, #668]	; (800ab3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a8a0:	430b      	orrs	r3, r1
 800a8a2:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a8a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ac:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800a8b0:	653b      	str	r3, [r7, #80]	; 0x50
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	657b      	str	r3, [r7, #84]	; 0x54
 800a8b6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800a8ba:	460b      	mov	r3, r1
 800a8bc:	4313      	orrs	r3, r2
 800a8be:	d00a      	beq.n	800a8d6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a8c0:	4b9e      	ldr	r3, [pc, #632]	; (800ab3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a8c2:	691b      	ldr	r3, [r3, #16]
 800a8c4:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800a8c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8cc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a8d0:	4a9a      	ldr	r2, [pc, #616]	; (800ab3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a8d2:	430b      	orrs	r3, r1
 800a8d4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a8d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8de:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800a8e2:	64bb      	str	r3, [r7, #72]	; 0x48
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a8e8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800a8ec:	460b      	mov	r3, r1
 800a8ee:	4313      	orrs	r3, r2
 800a8f0:	d009      	beq.n	800a906 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a8f2:	4b92      	ldr	r3, [pc, #584]	; (800ab3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a8f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8f6:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800a8fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a900:	4a8e      	ldr	r2, [pc, #568]	; (800ab3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a902:	430b      	orrs	r3, r1
 800a904:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a906:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a90a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a90e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800a912:	643b      	str	r3, [r7, #64]	; 0x40
 800a914:	2300      	movs	r3, #0
 800a916:	647b      	str	r3, [r7, #68]	; 0x44
 800a918:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800a91c:	460b      	mov	r3, r1
 800a91e:	4313      	orrs	r3, r2
 800a920:	d00e      	beq.n	800a940 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a922:	4b86      	ldr	r3, [pc, #536]	; (800ab3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a924:	691b      	ldr	r3, [r3, #16]
 800a926:	4a85      	ldr	r2, [pc, #532]	; (800ab3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a928:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a92c:	6113      	str	r3, [r2, #16]
 800a92e:	4b83      	ldr	r3, [pc, #524]	; (800ab3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a930:	6919      	ldr	r1, [r3, #16]
 800a932:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a936:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800a93a:	4a80      	ldr	r2, [pc, #512]	; (800ab3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a93c:	430b      	orrs	r3, r1
 800a93e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a940:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a944:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a948:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800a94c:	63bb      	str	r3, [r7, #56]	; 0x38
 800a94e:	2300      	movs	r3, #0
 800a950:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a952:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800a956:	460b      	mov	r3, r1
 800a958:	4313      	orrs	r3, r2
 800a95a:	d009      	beq.n	800a970 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a95c:	4b77      	ldr	r3, [pc, #476]	; (800ab3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a95e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a960:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800a964:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a96a:	4a74      	ldr	r2, [pc, #464]	; (800ab3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a96c:	430b      	orrs	r3, r1
 800a96e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a970:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a974:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a978:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800a97c:	633b      	str	r3, [r7, #48]	; 0x30
 800a97e:	2300      	movs	r3, #0
 800a980:	637b      	str	r3, [r7, #52]	; 0x34
 800a982:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800a986:	460b      	mov	r3, r1
 800a988:	4313      	orrs	r3, r2
 800a98a:	d00a      	beq.n	800a9a2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a98c:	4b6b      	ldr	r3, [pc, #428]	; (800ab3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a98e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a990:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800a994:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a998:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a99c:	4a67      	ldr	r2, [pc, #412]	; (800ab3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a99e:	430b      	orrs	r3, r1
 800a9a0:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a9a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9aa:	2100      	movs	r1, #0
 800a9ac:	62b9      	str	r1, [r7, #40]	; 0x28
 800a9ae:	f003 0301 	and.w	r3, r3, #1
 800a9b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a9b4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800a9b8:	460b      	mov	r3, r1
 800a9ba:	4313      	orrs	r3, r2
 800a9bc:	d011      	beq.n	800a9e2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a9be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9c2:	3308      	adds	r3, #8
 800a9c4:	2100      	movs	r1, #0
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	f001 fa4a 	bl	800be60 <RCCEx_PLL2_Config>
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a9d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d003      	beq.n	800a9e2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a9de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a9e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ea:	2100      	movs	r1, #0
 800a9ec:	6239      	str	r1, [r7, #32]
 800a9ee:	f003 0302 	and.w	r3, r3, #2
 800a9f2:	627b      	str	r3, [r7, #36]	; 0x24
 800a9f4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a9f8:	460b      	mov	r3, r1
 800a9fa:	4313      	orrs	r3, r2
 800a9fc:	d011      	beq.n	800aa22 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a9fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa02:	3308      	adds	r3, #8
 800aa04:	2101      	movs	r1, #1
 800aa06:	4618      	mov	r0, r3
 800aa08:	f001 fa2a 	bl	800be60 <RCCEx_PLL2_Config>
 800aa0c:	4603      	mov	r3, r0
 800aa0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800aa12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d003      	beq.n	800aa22 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa1e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800aa22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa2a:	2100      	movs	r1, #0
 800aa2c:	61b9      	str	r1, [r7, #24]
 800aa2e:	f003 0304 	and.w	r3, r3, #4
 800aa32:	61fb      	str	r3, [r7, #28]
 800aa34:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800aa38:	460b      	mov	r3, r1
 800aa3a:	4313      	orrs	r3, r2
 800aa3c:	d011      	beq.n	800aa62 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800aa3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa42:	3308      	adds	r3, #8
 800aa44:	2102      	movs	r1, #2
 800aa46:	4618      	mov	r0, r3
 800aa48:	f001 fa0a 	bl	800be60 <RCCEx_PLL2_Config>
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800aa52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d003      	beq.n	800aa62 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa5e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800aa62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa6a:	2100      	movs	r1, #0
 800aa6c:	6139      	str	r1, [r7, #16]
 800aa6e:	f003 0308 	and.w	r3, r3, #8
 800aa72:	617b      	str	r3, [r7, #20]
 800aa74:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800aa78:	460b      	mov	r3, r1
 800aa7a:	4313      	orrs	r3, r2
 800aa7c:	d011      	beq.n	800aaa2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aa7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa82:	3328      	adds	r3, #40	; 0x28
 800aa84:	2100      	movs	r1, #0
 800aa86:	4618      	mov	r0, r3
 800aa88:	f001 fa9c 	bl	800bfc4 <RCCEx_PLL3_Config>
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800aa92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d003      	beq.n	800aaa2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa9e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800aaa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aaa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaaa:	2100      	movs	r1, #0
 800aaac:	60b9      	str	r1, [r7, #8]
 800aaae:	f003 0310 	and.w	r3, r3, #16
 800aab2:	60fb      	str	r3, [r7, #12]
 800aab4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800aab8:	460b      	mov	r3, r1
 800aaba:	4313      	orrs	r3, r2
 800aabc:	d011      	beq.n	800aae2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800aabe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aac2:	3328      	adds	r3, #40	; 0x28
 800aac4:	2101      	movs	r1, #1
 800aac6:	4618      	mov	r0, r3
 800aac8:	f001 fa7c 	bl	800bfc4 <RCCEx_PLL3_Config>
 800aacc:	4603      	mov	r3, r0
 800aace:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800aad2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d003      	beq.n	800aae2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aada:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aade:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800aae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaea:	2100      	movs	r1, #0
 800aaec:	6039      	str	r1, [r7, #0]
 800aaee:	f003 0320 	and.w	r3, r3, #32
 800aaf2:	607b      	str	r3, [r7, #4]
 800aaf4:	e9d7 1200 	ldrd	r1, r2, [r7]
 800aaf8:	460b      	mov	r3, r1
 800aafa:	4313      	orrs	r3, r2
 800aafc:	d011      	beq.n	800ab22 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aafe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab02:	3328      	adds	r3, #40	; 0x28
 800ab04:	2102      	movs	r1, #2
 800ab06:	4618      	mov	r0, r3
 800ab08:	f001 fa5c 	bl	800bfc4 <RCCEx_PLL3_Config>
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800ab12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d003      	beq.n	800ab22 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab1e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800ab22:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d101      	bne.n	800ab2e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	e000      	b.n	800ab30 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800ab2e:	2301      	movs	r3, #1
}
 800ab30:	4618      	mov	r0, r3
 800ab32:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800ab36:	46bd      	mov	sp, r7
 800ab38:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ab3c:	58024400 	.word	0x58024400

0800ab40 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b090      	sub	sp, #64	; 0x40
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800ab4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab4e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800ab52:	430b      	orrs	r3, r1
 800ab54:	f040 8094 	bne.w	800ac80 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800ab58:	4b9e      	ldr	r3, [pc, #632]	; (800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ab5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab5c:	f003 0307 	and.w	r3, r3, #7
 800ab60:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ab62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab64:	2b04      	cmp	r3, #4
 800ab66:	f200 8087 	bhi.w	800ac78 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800ab6a:	a201      	add	r2, pc, #4	; (adr r2, 800ab70 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800ab6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab70:	0800ab85 	.word	0x0800ab85
 800ab74:	0800abad 	.word	0x0800abad
 800ab78:	0800abd5 	.word	0x0800abd5
 800ab7c:	0800ac71 	.word	0x0800ac71
 800ab80:	0800abfd 	.word	0x0800abfd
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ab84:	4b93      	ldr	r3, [pc, #588]	; (800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ab90:	d108      	bne.n	800aba4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ab92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ab96:	4618      	mov	r0, r3
 800ab98:	f001 f810 	bl	800bbbc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ab9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aba0:	f000 bd45 	b.w	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aba4:	2300      	movs	r3, #0
 800aba6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aba8:	f000 bd41 	b.w	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800abac:	4b89      	ldr	r3, [pc, #548]	; (800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800abb4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800abb8:	d108      	bne.n	800abcc <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800abba:	f107 0318 	add.w	r3, r7, #24
 800abbe:	4618      	mov	r0, r3
 800abc0:	f000 fd54 	bl	800b66c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800abc4:	69bb      	ldr	r3, [r7, #24]
 800abc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abc8:	f000 bd31 	b.w	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800abcc:	2300      	movs	r3, #0
 800abce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800abd0:	f000 bd2d 	b.w	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800abd4:	4b7f      	ldr	r3, [pc, #508]	; (800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800abdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800abe0:	d108      	bne.n	800abf4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800abe2:	f107 030c 	add.w	r3, r7, #12
 800abe6:	4618      	mov	r0, r3
 800abe8:	f000 fe94 	bl	800b914 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abf0:	f000 bd1d 	b.w	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800abf4:	2300      	movs	r3, #0
 800abf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800abf8:	f000 bd19 	b.w	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800abfc:	4b75      	ldr	r3, [pc, #468]	; (800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800abfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac00:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ac04:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ac06:	4b73      	ldr	r3, [pc, #460]	; (800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	f003 0304 	and.w	r3, r3, #4
 800ac0e:	2b04      	cmp	r3, #4
 800ac10:	d10c      	bne.n	800ac2c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800ac12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d109      	bne.n	800ac2c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ac18:	4b6e      	ldr	r3, [pc, #440]	; (800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	08db      	lsrs	r3, r3, #3
 800ac1e:	f003 0303 	and.w	r3, r3, #3
 800ac22:	4a6d      	ldr	r2, [pc, #436]	; (800add8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800ac24:	fa22 f303 	lsr.w	r3, r2, r3
 800ac28:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac2a:	e01f      	b.n	800ac6c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ac2c:	4b69      	ldr	r3, [pc, #420]	; (800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac38:	d106      	bne.n	800ac48 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800ac3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac3c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ac40:	d102      	bne.n	800ac48 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ac42:	4b66      	ldr	r3, [pc, #408]	; (800addc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800ac44:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac46:	e011      	b.n	800ac6c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ac48:	4b62      	ldr	r3, [pc, #392]	; (800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ac54:	d106      	bne.n	800ac64 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800ac56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac5c:	d102      	bne.n	800ac64 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ac5e:	4b60      	ldr	r3, [pc, #384]	; (800ade0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800ac60:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac62:	e003      	b.n	800ac6c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ac64:	2300      	movs	r3, #0
 800ac66:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ac68:	f000 bce1 	b.w	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ac6c:	f000 bcdf 	b.w	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ac70:	4b5c      	ldr	r3, [pc, #368]	; (800ade4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800ac72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac74:	f000 bcdb 	b.w	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ac78:	2300      	movs	r3, #0
 800ac7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac7c:	f000 bcd7 	b.w	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800ac80:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac84:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800ac88:	430b      	orrs	r3, r1
 800ac8a:	f040 80ad 	bne.w	800ade8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800ac8e:	4b51      	ldr	r3, [pc, #324]	; (800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ac90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac92:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800ac96:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ac98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac9e:	d056      	beq.n	800ad4e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800aca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aca2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aca6:	f200 8090 	bhi.w	800adca <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800acaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acac:	2bc0      	cmp	r3, #192	; 0xc0
 800acae:	f000 8088 	beq.w	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800acb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acb4:	2bc0      	cmp	r3, #192	; 0xc0
 800acb6:	f200 8088 	bhi.w	800adca <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800acba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acbc:	2b80      	cmp	r3, #128	; 0x80
 800acbe:	d032      	beq.n	800ad26 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800acc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acc2:	2b80      	cmp	r3, #128	; 0x80
 800acc4:	f200 8081 	bhi.w	800adca <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800acc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acca:	2b00      	cmp	r3, #0
 800accc:	d003      	beq.n	800acd6 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800acce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acd0:	2b40      	cmp	r3, #64	; 0x40
 800acd2:	d014      	beq.n	800acfe <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800acd4:	e079      	b.n	800adca <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800acd6:	4b3f      	ldr	r3, [pc, #252]	; (800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800acde:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ace2:	d108      	bne.n	800acf6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ace4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ace8:	4618      	mov	r0, r3
 800acea:	f000 ff67 	bl	800bbbc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800acee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acf0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acf2:	f000 bc9c 	b.w	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800acf6:	2300      	movs	r3, #0
 800acf8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800acfa:	f000 bc98 	b.w	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800acfe:	4b35      	ldr	r3, [pc, #212]	; (800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ad06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ad0a:	d108      	bne.n	800ad1e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad0c:	f107 0318 	add.w	r3, r7, #24
 800ad10:	4618      	mov	r0, r3
 800ad12:	f000 fcab 	bl	800b66c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ad16:	69bb      	ldr	r3, [r7, #24]
 800ad18:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad1a:	f000 bc88 	b.w	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad1e:	2300      	movs	r3, #0
 800ad20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad22:	f000 bc84 	b.w	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ad26:	4b2b      	ldr	r3, [pc, #172]	; (800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ad2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad32:	d108      	bne.n	800ad46 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ad34:	f107 030c 	add.w	r3, r7, #12
 800ad38:	4618      	mov	r0, r3
 800ad3a:	f000 fdeb 	bl	800b914 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad42:	f000 bc74 	b.w	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad46:	2300      	movs	r3, #0
 800ad48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad4a:	f000 bc70 	b.w	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ad4e:	4b21      	ldr	r3, [pc, #132]	; (800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ad50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad52:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ad56:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ad58:	4b1e      	ldr	r3, [pc, #120]	; (800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	f003 0304 	and.w	r3, r3, #4
 800ad60:	2b04      	cmp	r3, #4
 800ad62:	d10c      	bne.n	800ad7e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800ad64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d109      	bne.n	800ad7e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ad6a:	4b1a      	ldr	r3, [pc, #104]	; (800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	08db      	lsrs	r3, r3, #3
 800ad70:	f003 0303 	and.w	r3, r3, #3
 800ad74:	4a18      	ldr	r2, [pc, #96]	; (800add8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800ad76:	fa22 f303 	lsr.w	r3, r2, r3
 800ad7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad7c:	e01f      	b.n	800adbe <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ad7e:	4b15      	ldr	r3, [pc, #84]	; (800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad8a:	d106      	bne.n	800ad9a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800ad8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ad92:	d102      	bne.n	800ad9a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ad94:	4b11      	ldr	r3, [pc, #68]	; (800addc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800ad96:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad98:	e011      	b.n	800adbe <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ad9a:	4b0e      	ldr	r3, [pc, #56]	; (800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ada2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ada6:	d106      	bne.n	800adb6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800ada8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adaa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800adae:	d102      	bne.n	800adb6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800adb0:	4b0b      	ldr	r3, [pc, #44]	; (800ade0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800adb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800adb4:	e003      	b.n	800adbe <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800adb6:	2300      	movs	r3, #0
 800adb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800adba:	f000 bc38 	b.w	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800adbe:	f000 bc36 	b.w	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800adc2:	4b08      	ldr	r3, [pc, #32]	; (800ade4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800adc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800adc6:	f000 bc32 	b.w	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800adca:	2300      	movs	r3, #0
 800adcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800adce:	f000 bc2e 	b.w	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800add2:	bf00      	nop
 800add4:	58024400 	.word	0x58024400
 800add8:	03d09000 	.word	0x03d09000
 800addc:	003d0900 	.word	0x003d0900
 800ade0:	017d7840 	.word	0x017d7840
 800ade4:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800ade8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800adec:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800adf0:	430b      	orrs	r3, r1
 800adf2:	f040 809c 	bne.w	800af2e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800adf6:	4b9e      	ldr	r3, [pc, #632]	; (800b070 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800adf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800adfa:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800adfe:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ae00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae02:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ae06:	d054      	beq.n	800aeb2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800ae08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae0a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ae0e:	f200 808b 	bhi.w	800af28 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800ae12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae14:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ae18:	f000 8083 	beq.w	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800ae1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae1e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ae22:	f200 8081 	bhi.w	800af28 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800ae26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ae2c:	d02f      	beq.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800ae2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ae34:	d878      	bhi.n	800af28 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800ae36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d004      	beq.n	800ae46 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800ae3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae3e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ae42:	d012      	beq.n	800ae6a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800ae44:	e070      	b.n	800af28 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ae46:	4b8a      	ldr	r3, [pc, #552]	; (800b070 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ae52:	d107      	bne.n	800ae64 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ae54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ae58:	4618      	mov	r0, r3
 800ae5a:	f000 feaf 	bl	800bbbc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ae5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae60:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae62:	e3e4      	b.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae64:	2300      	movs	r3, #0
 800ae66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae68:	e3e1      	b.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ae6a:	4b81      	ldr	r3, [pc, #516]	; (800b070 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ae72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ae76:	d107      	bne.n	800ae88 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae78:	f107 0318 	add.w	r3, r7, #24
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	f000 fbf5 	bl	800b66c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ae82:	69bb      	ldr	r3, [r7, #24]
 800ae84:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae86:	e3d2      	b.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae88:	2300      	movs	r3, #0
 800ae8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae8c:	e3cf      	b.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ae8e:	4b78      	ldr	r3, [pc, #480]	; (800b070 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ae96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae9a:	d107      	bne.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae9c:	f107 030c 	add.w	r3, r7, #12
 800aea0:	4618      	mov	r0, r3
 800aea2:	f000 fd37 	bl	800b914 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aeaa:	e3c0      	b.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aeac:	2300      	movs	r3, #0
 800aeae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aeb0:	e3bd      	b.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800aeb2:	4b6f      	ldr	r3, [pc, #444]	; (800b070 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aeb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aeb6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800aeba:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aebc:	4b6c      	ldr	r3, [pc, #432]	; (800b070 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	f003 0304 	and.w	r3, r3, #4
 800aec4:	2b04      	cmp	r3, #4
 800aec6:	d10c      	bne.n	800aee2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800aec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d109      	bne.n	800aee2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aece:	4b68      	ldr	r3, [pc, #416]	; (800b070 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	08db      	lsrs	r3, r3, #3
 800aed4:	f003 0303 	and.w	r3, r3, #3
 800aed8:	4a66      	ldr	r2, [pc, #408]	; (800b074 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800aeda:	fa22 f303 	lsr.w	r3, r2, r3
 800aede:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aee0:	e01e      	b.n	800af20 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aee2:	4b63      	ldr	r3, [pc, #396]	; (800b070 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aeea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aeee:	d106      	bne.n	800aefe <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800aef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aef2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aef6:	d102      	bne.n	800aefe <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800aef8:	4b5f      	ldr	r3, [pc, #380]	; (800b078 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800aefa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aefc:	e010      	b.n	800af20 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aefe:	4b5c      	ldr	r3, [pc, #368]	; (800b070 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800af0a:	d106      	bne.n	800af1a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800af0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af12:	d102      	bne.n	800af1a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800af14:	4b59      	ldr	r3, [pc, #356]	; (800b07c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800af16:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af18:	e002      	b.n	800af20 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800af1a:	2300      	movs	r3, #0
 800af1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800af1e:	e386      	b.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800af20:	e385      	b.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800af22:	4b57      	ldr	r3, [pc, #348]	; (800b080 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800af24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af26:	e382      	b.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800af28:	2300      	movs	r3, #0
 800af2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af2c:	e37f      	b.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800af2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af32:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800af36:	430b      	orrs	r3, r1
 800af38:	f040 80a7 	bne.w	800b08a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800af3c:	4b4c      	ldr	r3, [pc, #304]	; (800b070 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800af3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af40:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800af44:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800af46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af48:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800af4c:	d055      	beq.n	800affa <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800af4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af50:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800af54:	f200 8096 	bhi.w	800b084 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800af58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af5a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800af5e:	f000 8084 	beq.w	800b06a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800af62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af64:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800af68:	f200 808c 	bhi.w	800b084 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800af6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800af72:	d030      	beq.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800af74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800af7a:	f200 8083 	bhi.w	800b084 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800af7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af80:	2b00      	cmp	r3, #0
 800af82:	d004      	beq.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800af84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af86:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800af8a:	d012      	beq.n	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800af8c:	e07a      	b.n	800b084 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800af8e:	4b38      	ldr	r3, [pc, #224]	; (800b070 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800af9a:	d107      	bne.n	800afac <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800af9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800afa0:	4618      	mov	r0, r3
 800afa2:	f000 fe0b 	bl	800bbbc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800afa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afa8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800afaa:	e340      	b.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800afac:	2300      	movs	r3, #0
 800afae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800afb0:	e33d      	b.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800afb2:	4b2f      	ldr	r3, [pc, #188]	; (800b070 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800afba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800afbe:	d107      	bne.n	800afd0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800afc0:	f107 0318 	add.w	r3, r7, #24
 800afc4:	4618      	mov	r0, r3
 800afc6:	f000 fb51 	bl	800b66c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800afca:	69bb      	ldr	r3, [r7, #24]
 800afcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800afce:	e32e      	b.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800afd0:	2300      	movs	r3, #0
 800afd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800afd4:	e32b      	b.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800afd6:	4b26      	ldr	r3, [pc, #152]	; (800b070 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800afde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800afe2:	d107      	bne.n	800aff4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800afe4:	f107 030c 	add.w	r3, r7, #12
 800afe8:	4618      	mov	r0, r3
 800afea:	f000 fc93 	bl	800b914 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aff2:	e31c      	b.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aff4:	2300      	movs	r3, #0
 800aff6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aff8:	e319      	b.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800affa:	4b1d      	ldr	r3, [pc, #116]	; (800b070 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800affc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800affe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b002:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b004:	4b1a      	ldr	r3, [pc, #104]	; (800b070 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	f003 0304 	and.w	r3, r3, #4
 800b00c:	2b04      	cmp	r3, #4
 800b00e:	d10c      	bne.n	800b02a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800b010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b012:	2b00      	cmp	r3, #0
 800b014:	d109      	bne.n	800b02a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b016:	4b16      	ldr	r3, [pc, #88]	; (800b070 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	08db      	lsrs	r3, r3, #3
 800b01c:	f003 0303 	and.w	r3, r3, #3
 800b020:	4a14      	ldr	r2, [pc, #80]	; (800b074 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b022:	fa22 f303 	lsr.w	r3, r2, r3
 800b026:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b028:	e01e      	b.n	800b068 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b02a:	4b11      	ldr	r3, [pc, #68]	; (800b070 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b032:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b036:	d106      	bne.n	800b046 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800b038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b03a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b03e:	d102      	bne.n	800b046 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b040:	4b0d      	ldr	r3, [pc, #52]	; (800b078 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800b042:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b044:	e010      	b.n	800b068 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b046:	4b0a      	ldr	r3, [pc, #40]	; (800b070 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b04e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b052:	d106      	bne.n	800b062 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800b054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b056:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b05a:	d102      	bne.n	800b062 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b05c:	4b07      	ldr	r3, [pc, #28]	; (800b07c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800b05e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b060:	e002      	b.n	800b068 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b062:	2300      	movs	r3, #0
 800b064:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b066:	e2e2      	b.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b068:	e2e1      	b.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b06a:	4b05      	ldr	r3, [pc, #20]	; (800b080 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800b06c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b06e:	e2de      	b.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b070:	58024400 	.word	0x58024400
 800b074:	03d09000 	.word	0x03d09000
 800b078:	003d0900 	.word	0x003d0900
 800b07c:	017d7840 	.word	0x017d7840
 800b080:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800b084:	2300      	movs	r3, #0
 800b086:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b088:	e2d1      	b.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b08a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b08e:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800b092:	430b      	orrs	r3, r1
 800b094:	f040 809c 	bne.w	800b1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800b098:	4b93      	ldr	r3, [pc, #588]	; (800b2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b09a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b09c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800b0a0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b0a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b0a8:	d054      	beq.n	800b154 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800b0aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b0b0:	f200 808b 	bhi.w	800b1ca <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b0b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0b6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b0ba:	f000 8083 	beq.w	800b1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800b0be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0c0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b0c4:	f200 8081 	bhi.w	800b1ca <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b0c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b0ce:	d02f      	beq.n	800b130 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800b0d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b0d6:	d878      	bhi.n	800b1ca <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b0d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d004      	beq.n	800b0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800b0de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b0e4:	d012      	beq.n	800b10c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800b0e6:	e070      	b.n	800b1ca <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b0e8:	4b7f      	ldr	r3, [pc, #508]	; (800b2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b0f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b0f4:	d107      	bne.n	800b106 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b0f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	f000 fd5e 	bl	800bbbc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b102:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b104:	e293      	b.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b106:	2300      	movs	r3, #0
 800b108:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b10a:	e290      	b.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b10c:	4b76      	ldr	r3, [pc, #472]	; (800b2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b114:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b118:	d107      	bne.n	800b12a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b11a:	f107 0318 	add.w	r3, r7, #24
 800b11e:	4618      	mov	r0, r3
 800b120:	f000 faa4 	bl	800b66c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b124:	69bb      	ldr	r3, [r7, #24]
 800b126:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b128:	e281      	b.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b12a:	2300      	movs	r3, #0
 800b12c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b12e:	e27e      	b.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b130:	4b6d      	ldr	r3, [pc, #436]	; (800b2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b138:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b13c:	d107      	bne.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b13e:	f107 030c 	add.w	r3, r7, #12
 800b142:	4618      	mov	r0, r3
 800b144:	f000 fbe6 	bl	800b914 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b14c:	e26f      	b.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b14e:	2300      	movs	r3, #0
 800b150:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b152:	e26c      	b.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b154:	4b64      	ldr	r3, [pc, #400]	; (800b2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b156:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b158:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b15c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b15e:	4b62      	ldr	r3, [pc, #392]	; (800b2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	f003 0304 	and.w	r3, r3, #4
 800b166:	2b04      	cmp	r3, #4
 800b168:	d10c      	bne.n	800b184 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800b16a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d109      	bne.n	800b184 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b170:	4b5d      	ldr	r3, [pc, #372]	; (800b2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	08db      	lsrs	r3, r3, #3
 800b176:	f003 0303 	and.w	r3, r3, #3
 800b17a:	4a5c      	ldr	r2, [pc, #368]	; (800b2ec <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800b17c:	fa22 f303 	lsr.w	r3, r2, r3
 800b180:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b182:	e01e      	b.n	800b1c2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b184:	4b58      	ldr	r3, [pc, #352]	; (800b2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b18c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b190:	d106      	bne.n	800b1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800b192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b194:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b198:	d102      	bne.n	800b1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b19a:	4b55      	ldr	r3, [pc, #340]	; (800b2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b19c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b19e:	e010      	b.n	800b1c2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b1a0:	4b51      	ldr	r3, [pc, #324]	; (800b2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b1a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b1ac:	d106      	bne.n	800b1bc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800b1ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b1b4:	d102      	bne.n	800b1bc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b1b6:	4b4f      	ldr	r3, [pc, #316]	; (800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800b1b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b1ba:	e002      	b.n	800b1c2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b1bc:	2300      	movs	r3, #0
 800b1be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b1c0:	e235      	b.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b1c2:	e234      	b.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b1c4:	4b4c      	ldr	r3, [pc, #304]	; (800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800b1c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b1c8:	e231      	b.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b1ce:	e22e      	b.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800b1d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b1d4:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800b1d8:	430b      	orrs	r3, r1
 800b1da:	f040 808f 	bne.w	800b2fc <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800b1de:	4b42      	ldr	r3, [pc, #264]	; (800b2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b1e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1e2:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800b1e6:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800b1e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b1ee:	d06b      	beq.n	800b2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800b1f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b1f6:	d874      	bhi.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b1f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1fa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b1fe:	d056      	beq.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800b200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b202:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b206:	d86c      	bhi.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b20a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b20e:	d03b      	beq.n	800b288 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800b210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b212:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b216:	d864      	bhi.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b21a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b21e:	d021      	beq.n	800b264 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800b220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b222:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b226:	d85c      	bhi.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d004      	beq.n	800b238 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800b22e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b234:	d004      	beq.n	800b240 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800b236:	e054      	b.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800b238:	f7fe fa0a 	bl	8009650 <HAL_RCC_GetPCLK1Freq>
 800b23c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b23e:	e1f6      	b.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b240:	4b29      	ldr	r3, [pc, #164]	; (800b2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b248:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b24c:	d107      	bne.n	800b25e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b24e:	f107 0318 	add.w	r3, r7, #24
 800b252:	4618      	mov	r0, r3
 800b254:	f000 fa0a 	bl	800b66c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b258:	69fb      	ldr	r3, [r7, #28]
 800b25a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b25c:	e1e7      	b.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b25e:	2300      	movs	r3, #0
 800b260:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b262:	e1e4      	b.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b264:	4b20      	ldr	r3, [pc, #128]	; (800b2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b26c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b270:	d107      	bne.n	800b282 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b272:	f107 030c 	add.w	r3, r7, #12
 800b276:	4618      	mov	r0, r3
 800b278:	f000 fb4c 	bl	800b914 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b27c:	693b      	ldr	r3, [r7, #16]
 800b27e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b280:	e1d5      	b.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b282:	2300      	movs	r3, #0
 800b284:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b286:	e1d2      	b.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b288:	4b17      	ldr	r3, [pc, #92]	; (800b2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	f003 0304 	and.w	r3, r3, #4
 800b290:	2b04      	cmp	r3, #4
 800b292:	d109      	bne.n	800b2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b294:	4b14      	ldr	r3, [pc, #80]	; (800b2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	08db      	lsrs	r3, r3, #3
 800b29a:	f003 0303 	and.w	r3, r3, #3
 800b29e:	4a13      	ldr	r2, [pc, #76]	; (800b2ec <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800b2a0:	fa22 f303 	lsr.w	r3, r2, r3
 800b2a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b2a6:	e1c2      	b.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2ac:	e1bf      	b.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b2ae:	4b0e      	ldr	r3, [pc, #56]	; (800b2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b2ba:	d102      	bne.n	800b2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800b2bc:	4b0c      	ldr	r3, [pc, #48]	; (800b2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b2be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b2c0:	e1b5      	b.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2c6:	e1b2      	b.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b2c8:	4b07      	ldr	r3, [pc, #28]	; (800b2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b2d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b2d4:	d102      	bne.n	800b2dc <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800b2d6:	4b07      	ldr	r3, [pc, #28]	; (800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800b2d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b2da:	e1a8      	b.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b2dc:	2300      	movs	r3, #0
 800b2de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2e0:	e1a5      	b.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2e6:	e1a2      	b.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b2e8:	58024400 	.word	0x58024400
 800b2ec:	03d09000 	.word	0x03d09000
 800b2f0:	003d0900 	.word	0x003d0900
 800b2f4:	017d7840 	.word	0x017d7840
 800b2f8:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b2fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b300:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800b304:	430b      	orrs	r3, r1
 800b306:	d173      	bne.n	800b3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800b308:	4b9c      	ldr	r3, [pc, #624]	; (800b57c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b30a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b30c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b310:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b314:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b318:	d02f      	beq.n	800b37a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800b31a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b31c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b320:	d863      	bhi.n	800b3ea <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800b322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b324:	2b00      	cmp	r3, #0
 800b326:	d004      	beq.n	800b332 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800b328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b32a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b32e:	d012      	beq.n	800b356 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800b330:	e05b      	b.n	800b3ea <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b332:	4b92      	ldr	r3, [pc, #584]	; (800b57c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b33a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b33e:	d107      	bne.n	800b350 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b340:	f107 0318 	add.w	r3, r7, #24
 800b344:	4618      	mov	r0, r3
 800b346:	f000 f991 	bl	800b66c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b34a:	69bb      	ldr	r3, [r7, #24]
 800b34c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b34e:	e16e      	b.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b350:	2300      	movs	r3, #0
 800b352:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b354:	e16b      	b.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b356:	4b89      	ldr	r3, [pc, #548]	; (800b57c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b35e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b362:	d107      	bne.n	800b374 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b364:	f107 030c 	add.w	r3, r7, #12
 800b368:	4618      	mov	r0, r3
 800b36a:	f000 fad3 	bl	800b914 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b36e:	697b      	ldr	r3, [r7, #20]
 800b370:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b372:	e15c      	b.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b374:	2300      	movs	r3, #0
 800b376:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b378:	e159      	b.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b37a:	4b80      	ldr	r3, [pc, #512]	; (800b57c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b37c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b37e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b382:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b384:	4b7d      	ldr	r3, [pc, #500]	; (800b57c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	f003 0304 	and.w	r3, r3, #4
 800b38c:	2b04      	cmp	r3, #4
 800b38e:	d10c      	bne.n	800b3aa <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800b390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b392:	2b00      	cmp	r3, #0
 800b394:	d109      	bne.n	800b3aa <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b396:	4b79      	ldr	r3, [pc, #484]	; (800b57c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	08db      	lsrs	r3, r3, #3
 800b39c:	f003 0303 	and.w	r3, r3, #3
 800b3a0:	4a77      	ldr	r2, [pc, #476]	; (800b580 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800b3a2:	fa22 f303 	lsr.w	r3, r2, r3
 800b3a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b3a8:	e01e      	b.n	800b3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b3aa:	4b74      	ldr	r3, [pc, #464]	; (800b57c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b3b6:	d106      	bne.n	800b3c6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800b3b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b3be:	d102      	bne.n	800b3c6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b3c0:	4b70      	ldr	r3, [pc, #448]	; (800b584 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800b3c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b3c4:	e010      	b.n	800b3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b3c6:	4b6d      	ldr	r3, [pc, #436]	; (800b57c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b3ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b3d2:	d106      	bne.n	800b3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800b3d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b3da:	d102      	bne.n	800b3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b3dc:	4b6a      	ldr	r3, [pc, #424]	; (800b588 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800b3de:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b3e0:	e002      	b.n	800b3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b3e6:	e122      	b.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b3e8:	e121      	b.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b3ee:	e11e      	b.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b3f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b3f4:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800b3f8:	430b      	orrs	r3, r1
 800b3fa:	d133      	bne.n	800b464 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800b3fc:	4b5f      	ldr	r3, [pc, #380]	; (800b57c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b3fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b400:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b404:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d004      	beq.n	800b416 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800b40c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b40e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b412:	d012      	beq.n	800b43a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800b414:	e023      	b.n	800b45e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b416:	4b59      	ldr	r3, [pc, #356]	; (800b57c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b41e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b422:	d107      	bne.n	800b434 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b424:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b428:	4618      	mov	r0, r3
 800b42a:	f000 fbc7 	bl	800bbbc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b42e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b430:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b432:	e0fc      	b.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b434:	2300      	movs	r3, #0
 800b436:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b438:	e0f9      	b.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b43a:	4b50      	ldr	r3, [pc, #320]	; (800b57c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b442:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b446:	d107      	bne.n	800b458 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b448:	f107 0318 	add.w	r3, r7, #24
 800b44c:	4618      	mov	r0, r3
 800b44e:	f000 f90d 	bl	800b66c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b452:	6a3b      	ldr	r3, [r7, #32]
 800b454:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b456:	e0ea      	b.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b458:	2300      	movs	r3, #0
 800b45a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b45c:	e0e7      	b.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b45e:	2300      	movs	r3, #0
 800b460:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b462:	e0e4      	b.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b464:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b468:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800b46c:	430b      	orrs	r3, r1
 800b46e:	f040 808d 	bne.w	800b58c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800b472:	4b42      	ldr	r3, [pc, #264]	; (800b57c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b476:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800b47a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b47c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b47e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b482:	d06b      	beq.n	800b55c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800b484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b486:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b48a:	d874      	bhi.n	800b576 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b48c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b48e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b492:	d056      	beq.n	800b542 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800b494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b496:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b49a:	d86c      	bhi.n	800b576 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b49c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b49e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b4a2:	d03b      	beq.n	800b51c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800b4a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4a6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b4aa:	d864      	bhi.n	800b576 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b4ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b4b2:	d021      	beq.n	800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800b4b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b4ba:	d85c      	bhi.n	800b576 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b4bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d004      	beq.n	800b4cc <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800b4c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b4c8:	d004      	beq.n	800b4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800b4ca:	e054      	b.n	800b576 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b4cc:	f000 f8b8 	bl	800b640 <HAL_RCCEx_GetD3PCLK1Freq>
 800b4d0:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b4d2:	e0ac      	b.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b4d4:	4b29      	ldr	r3, [pc, #164]	; (800b57c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b4dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b4e0:	d107      	bne.n	800b4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b4e2:	f107 0318 	add.w	r3, r7, #24
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	f000 f8c0 	bl	800b66c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b4ec:	69fb      	ldr	r3, [r7, #28]
 800b4ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b4f0:	e09d      	b.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b4f6:	e09a      	b.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b4f8:	4b20      	ldr	r3, [pc, #128]	; (800b57c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b500:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b504:	d107      	bne.n	800b516 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b506:	f107 030c 	add.w	r3, r7, #12
 800b50a:	4618      	mov	r0, r3
 800b50c:	f000 fa02 	bl	800b914 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b510:	693b      	ldr	r3, [r7, #16]
 800b512:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b514:	e08b      	b.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b516:	2300      	movs	r3, #0
 800b518:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b51a:	e088      	b.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b51c:	4b17      	ldr	r3, [pc, #92]	; (800b57c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	f003 0304 	and.w	r3, r3, #4
 800b524:	2b04      	cmp	r3, #4
 800b526:	d109      	bne.n	800b53c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b528:	4b14      	ldr	r3, [pc, #80]	; (800b57c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	08db      	lsrs	r3, r3, #3
 800b52e:	f003 0303 	and.w	r3, r3, #3
 800b532:	4a13      	ldr	r2, [pc, #76]	; (800b580 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800b534:	fa22 f303 	lsr.w	r3, r2, r3
 800b538:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b53a:	e078      	b.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b53c:	2300      	movs	r3, #0
 800b53e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b540:	e075      	b.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b542:	4b0e      	ldr	r3, [pc, #56]	; (800b57c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b54a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b54e:	d102      	bne.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800b550:	4b0c      	ldr	r3, [pc, #48]	; (800b584 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800b552:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b554:	e06b      	b.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b556:	2300      	movs	r3, #0
 800b558:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b55a:	e068      	b.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b55c:	4b07      	ldr	r3, [pc, #28]	; (800b57c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b564:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b568:	d102      	bne.n	800b570 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800b56a:	4b07      	ldr	r3, [pc, #28]	; (800b588 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800b56c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b56e:	e05e      	b.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b570:	2300      	movs	r3, #0
 800b572:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b574:	e05b      	b.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800b576:	2300      	movs	r3, #0
 800b578:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b57a:	e058      	b.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b57c:	58024400 	.word	0x58024400
 800b580:	03d09000 	.word	0x03d09000
 800b584:	003d0900 	.word	0x003d0900
 800b588:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b58c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b590:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800b594:	430b      	orrs	r3, r1
 800b596:	d148      	bne.n	800b62a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800b598:	4b27      	ldr	r3, [pc, #156]	; (800b638 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b59a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b59c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b5a0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b5a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b5a8:	d02a      	beq.n	800b600 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800b5aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b5b0:	d838      	bhi.n	800b624 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800b5b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d004      	beq.n	800b5c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800b5b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b5be:	d00d      	beq.n	800b5dc <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800b5c0:	e030      	b.n	800b624 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b5c2:	4b1d      	ldr	r3, [pc, #116]	; (800b638 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b5ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b5ce:	d102      	bne.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800b5d0:	4b1a      	ldr	r3, [pc, #104]	; (800b63c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800b5d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b5d4:	e02b      	b.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b5da:	e028      	b.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b5dc:	4b16      	ldr	r3, [pc, #88]	; (800b638 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b5e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b5e8:	d107      	bne.n	800b5fa <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b5ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	f000 fae4 	bl	800bbbc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b5f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b5f8:	e019      	b.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b5fe:	e016      	b.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b600:	4b0d      	ldr	r3, [pc, #52]	; (800b638 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b608:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b60c:	d107      	bne.n	800b61e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b60e:	f107 0318 	add.w	r3, r7, #24
 800b612:	4618      	mov	r0, r3
 800b614:	f000 f82a 	bl	800b66c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b618:	69fb      	ldr	r3, [r7, #28]
 800b61a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b61c:	e007      	b.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b61e:	2300      	movs	r3, #0
 800b620:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b622:	e004      	b.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b624:	2300      	movs	r3, #0
 800b626:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b628:	e001      	b.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800b62a:	2300      	movs	r3, #0
 800b62c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800b62e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b630:	4618      	mov	r0, r3
 800b632:	3740      	adds	r7, #64	; 0x40
 800b634:	46bd      	mov	sp, r7
 800b636:	bd80      	pop	{r7, pc}
 800b638:	58024400 	.word	0x58024400
 800b63c:	017d7840 	.word	0x017d7840

0800b640 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b640:	b580      	push	{r7, lr}
 800b642:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b644:	f7fd ffd4 	bl	80095f0 <HAL_RCC_GetHCLKFreq>
 800b648:	4602      	mov	r2, r0
 800b64a:	4b06      	ldr	r3, [pc, #24]	; (800b664 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b64c:	6a1b      	ldr	r3, [r3, #32]
 800b64e:	091b      	lsrs	r3, r3, #4
 800b650:	f003 0307 	and.w	r3, r3, #7
 800b654:	4904      	ldr	r1, [pc, #16]	; (800b668 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b656:	5ccb      	ldrb	r3, [r1, r3]
 800b658:	f003 031f 	and.w	r3, r3, #31
 800b65c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b660:	4618      	mov	r0, r3
 800b662:	bd80      	pop	{r7, pc}
 800b664:	58024400 	.word	0x58024400
 800b668:	08014b00 	.word	0x08014b00

0800b66c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b66c:	b480      	push	{r7}
 800b66e:	b089      	sub	sp, #36	; 0x24
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b674:	4ba1      	ldr	r3, [pc, #644]	; (800b8fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b678:	f003 0303 	and.w	r3, r3, #3
 800b67c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b67e:	4b9f      	ldr	r3, [pc, #636]	; (800b8fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b682:	0b1b      	lsrs	r3, r3, #12
 800b684:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b688:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b68a:	4b9c      	ldr	r3, [pc, #624]	; (800b8fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b68c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b68e:	091b      	lsrs	r3, r3, #4
 800b690:	f003 0301 	and.w	r3, r3, #1
 800b694:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b696:	4b99      	ldr	r3, [pc, #612]	; (800b8fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b69a:	08db      	lsrs	r3, r3, #3
 800b69c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b6a0:	693a      	ldr	r2, [r7, #16]
 800b6a2:	fb02 f303 	mul.w	r3, r2, r3
 800b6a6:	ee07 3a90 	vmov	s15, r3
 800b6aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6ae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b6b2:	697b      	ldr	r3, [r7, #20]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	f000 8111 	beq.w	800b8dc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b6ba:	69bb      	ldr	r3, [r7, #24]
 800b6bc:	2b02      	cmp	r3, #2
 800b6be:	f000 8083 	beq.w	800b7c8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b6c2:	69bb      	ldr	r3, [r7, #24]
 800b6c4:	2b02      	cmp	r3, #2
 800b6c6:	f200 80a1 	bhi.w	800b80c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b6ca:	69bb      	ldr	r3, [r7, #24]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d003      	beq.n	800b6d8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b6d0:	69bb      	ldr	r3, [r7, #24]
 800b6d2:	2b01      	cmp	r3, #1
 800b6d4:	d056      	beq.n	800b784 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b6d6:	e099      	b.n	800b80c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b6d8:	4b88      	ldr	r3, [pc, #544]	; (800b8fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	f003 0320 	and.w	r3, r3, #32
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d02d      	beq.n	800b740 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b6e4:	4b85      	ldr	r3, [pc, #532]	; (800b8fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	08db      	lsrs	r3, r3, #3
 800b6ea:	f003 0303 	and.w	r3, r3, #3
 800b6ee:	4a84      	ldr	r2, [pc, #528]	; (800b900 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b6f0:	fa22 f303 	lsr.w	r3, r2, r3
 800b6f4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b6f6:	68bb      	ldr	r3, [r7, #8]
 800b6f8:	ee07 3a90 	vmov	s15, r3
 800b6fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b700:	697b      	ldr	r3, [r7, #20]
 800b702:	ee07 3a90 	vmov	s15, r3
 800b706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b70a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b70e:	4b7b      	ldr	r3, [pc, #492]	; (800b8fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b716:	ee07 3a90 	vmov	s15, r3
 800b71a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b71e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b722:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b904 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b726:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b72a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b72e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b732:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b73a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b73e:	e087      	b.n	800b850 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b740:	697b      	ldr	r3, [r7, #20]
 800b742:	ee07 3a90 	vmov	s15, r3
 800b746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b74a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b908 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b74e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b752:	4b6a      	ldr	r3, [pc, #424]	; (800b8fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b756:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b75a:	ee07 3a90 	vmov	s15, r3
 800b75e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b762:	ed97 6a03 	vldr	s12, [r7, #12]
 800b766:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b904 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b76a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b76e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b772:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b776:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b77a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b77e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b782:	e065      	b.n	800b850 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b784:	697b      	ldr	r3, [r7, #20]
 800b786:	ee07 3a90 	vmov	s15, r3
 800b78a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b78e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b90c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b792:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b796:	4b59      	ldr	r3, [pc, #356]	; (800b8fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b79a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b79e:	ee07 3a90 	vmov	s15, r3
 800b7a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7a6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b7aa:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b904 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b7ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b7ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b7c6:	e043      	b.n	800b850 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b7c8:	697b      	ldr	r3, [r7, #20]
 800b7ca:	ee07 3a90 	vmov	s15, r3
 800b7ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7d2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b910 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b7d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b7da:	4b48      	ldr	r3, [pc, #288]	; (800b8fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b7dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7e2:	ee07 3a90 	vmov	s15, r3
 800b7e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7ea:	ed97 6a03 	vldr	s12, [r7, #12]
 800b7ee:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b904 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b7f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b7fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b802:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b806:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b80a:	e021      	b.n	800b850 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b80c:	697b      	ldr	r3, [r7, #20]
 800b80e:	ee07 3a90 	vmov	s15, r3
 800b812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b816:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b90c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b81a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b81e:	4b37      	ldr	r3, [pc, #220]	; (800b8fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b826:	ee07 3a90 	vmov	s15, r3
 800b82a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b82e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b832:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b904 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b836:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b83a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b83e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b842:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b846:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b84a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b84e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b850:	4b2a      	ldr	r3, [pc, #168]	; (800b8fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b854:	0a5b      	lsrs	r3, r3, #9
 800b856:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b85a:	ee07 3a90 	vmov	s15, r3
 800b85e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b862:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b866:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b86a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b86e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b872:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b876:	ee17 2a90 	vmov	r2, s15
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b87e:	4b1f      	ldr	r3, [pc, #124]	; (800b8fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b882:	0c1b      	lsrs	r3, r3, #16
 800b884:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b888:	ee07 3a90 	vmov	s15, r3
 800b88c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b890:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b894:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b898:	edd7 6a07 	vldr	s13, [r7, #28]
 800b89c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b8a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b8a4:	ee17 2a90 	vmov	r2, s15
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b8ac:	4b13      	ldr	r3, [pc, #76]	; (800b8fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b8ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8b0:	0e1b      	lsrs	r3, r3, #24
 800b8b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b8b6:	ee07 3a90 	vmov	s15, r3
 800b8ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b8c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b8c6:	edd7 6a07 	vldr	s13, [r7, #28]
 800b8ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b8ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b8d2:	ee17 2a90 	vmov	r2, s15
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b8da:	e008      	b.n	800b8ee <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	2200      	movs	r2, #0
 800b8e0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	609a      	str	r2, [r3, #8]
}
 800b8ee:	bf00      	nop
 800b8f0:	3724      	adds	r7, #36	; 0x24
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f8:	4770      	bx	lr
 800b8fa:	bf00      	nop
 800b8fc:	58024400 	.word	0x58024400
 800b900:	03d09000 	.word	0x03d09000
 800b904:	46000000 	.word	0x46000000
 800b908:	4c742400 	.word	0x4c742400
 800b90c:	4a742400 	.word	0x4a742400
 800b910:	4bbebc20 	.word	0x4bbebc20

0800b914 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b914:	b480      	push	{r7}
 800b916:	b089      	sub	sp, #36	; 0x24
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b91c:	4ba1      	ldr	r3, [pc, #644]	; (800bba4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b91e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b920:	f003 0303 	and.w	r3, r3, #3
 800b924:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b926:	4b9f      	ldr	r3, [pc, #636]	; (800bba4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b92a:	0d1b      	lsrs	r3, r3, #20
 800b92c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b930:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b932:	4b9c      	ldr	r3, [pc, #624]	; (800bba4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b936:	0a1b      	lsrs	r3, r3, #8
 800b938:	f003 0301 	and.w	r3, r3, #1
 800b93c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b93e:	4b99      	ldr	r3, [pc, #612]	; (800bba4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b942:	08db      	lsrs	r3, r3, #3
 800b944:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b948:	693a      	ldr	r2, [r7, #16]
 800b94a:	fb02 f303 	mul.w	r3, r2, r3
 800b94e:	ee07 3a90 	vmov	s15, r3
 800b952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b956:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b95a:	697b      	ldr	r3, [r7, #20]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	f000 8111 	beq.w	800bb84 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b962:	69bb      	ldr	r3, [r7, #24]
 800b964:	2b02      	cmp	r3, #2
 800b966:	f000 8083 	beq.w	800ba70 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b96a:	69bb      	ldr	r3, [r7, #24]
 800b96c:	2b02      	cmp	r3, #2
 800b96e:	f200 80a1 	bhi.w	800bab4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b972:	69bb      	ldr	r3, [r7, #24]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d003      	beq.n	800b980 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b978:	69bb      	ldr	r3, [r7, #24]
 800b97a:	2b01      	cmp	r3, #1
 800b97c:	d056      	beq.n	800ba2c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b97e:	e099      	b.n	800bab4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b980:	4b88      	ldr	r3, [pc, #544]	; (800bba4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	f003 0320 	and.w	r3, r3, #32
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d02d      	beq.n	800b9e8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b98c:	4b85      	ldr	r3, [pc, #532]	; (800bba4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	08db      	lsrs	r3, r3, #3
 800b992:	f003 0303 	and.w	r3, r3, #3
 800b996:	4a84      	ldr	r2, [pc, #528]	; (800bba8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b998:	fa22 f303 	lsr.w	r3, r2, r3
 800b99c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b99e:	68bb      	ldr	r3, [r7, #8]
 800b9a0:	ee07 3a90 	vmov	s15, r3
 800b9a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9a8:	697b      	ldr	r3, [r7, #20]
 800b9aa:	ee07 3a90 	vmov	s15, r3
 800b9ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b9b6:	4b7b      	ldr	r3, [pc, #492]	; (800bba4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b9b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9be:	ee07 3a90 	vmov	s15, r3
 800b9c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9c6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b9ca:	eddf 5a78 	vldr	s11, [pc, #480]	; 800bbac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b9ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b9d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b9d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b9da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b9de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b9e2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b9e6:	e087      	b.n	800baf8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b9e8:	697b      	ldr	r3, [r7, #20]
 800b9ea:	ee07 3a90 	vmov	s15, r3
 800b9ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9f2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800bbb0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b9f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b9fa:	4b6a      	ldr	r3, [pc, #424]	; (800bba4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b9fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba02:	ee07 3a90 	vmov	s15, r3
 800ba06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba0a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba0e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800bbac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ba12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ba1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ba2a:	e065      	b.n	800baf8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ba2c:	697b      	ldr	r3, [r7, #20]
 800ba2e:	ee07 3a90 	vmov	s15, r3
 800ba32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba36:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800bbb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ba3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba3e:	4b59      	ldr	r3, [pc, #356]	; (800bba4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba46:	ee07 3a90 	vmov	s15, r3
 800ba4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba4e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba52:	eddf 5a56 	vldr	s11, [pc, #344]	; 800bbac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ba56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ba62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ba6e:	e043      	b.n	800baf8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ba70:	697b      	ldr	r3, [r7, #20]
 800ba72:	ee07 3a90 	vmov	s15, r3
 800ba76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba7a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800bbb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ba7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba82:	4b48      	ldr	r3, [pc, #288]	; (800bba4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba8a:	ee07 3a90 	vmov	s15, r3
 800ba8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba92:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba96:	eddf 5a45 	vldr	s11, [pc, #276]	; 800bbac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ba9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800baa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800baa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800baaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800baae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bab2:	e021      	b.n	800baf8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bab4:	697b      	ldr	r3, [r7, #20]
 800bab6:	ee07 3a90 	vmov	s15, r3
 800baba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800babe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800bbb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bac2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bac6:	4b37      	ldr	r3, [pc, #220]	; (800bba4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800baca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bace:	ee07 3a90 	vmov	s15, r3
 800bad2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bad6:	ed97 6a03 	vldr	s12, [r7, #12]
 800bada:	eddf 5a34 	vldr	s11, [pc, #208]	; 800bbac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bade:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bae2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bae6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800baea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800baee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800baf2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800baf6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800baf8:	4b2a      	ldr	r3, [pc, #168]	; (800bba4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bafa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bafc:	0a5b      	lsrs	r3, r3, #9
 800bafe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb02:	ee07 3a90 	vmov	s15, r3
 800bb06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bb0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bb12:	edd7 6a07 	vldr	s13, [r7, #28]
 800bb16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bb1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb1e:	ee17 2a90 	vmov	r2, s15
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800bb26:	4b1f      	ldr	r3, [pc, #124]	; (800bba4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb2a:	0c1b      	lsrs	r3, r3, #16
 800bb2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb30:	ee07 3a90 	vmov	s15, r3
 800bb34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bb3c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bb40:	edd7 6a07 	vldr	s13, [r7, #28]
 800bb44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bb48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb4c:	ee17 2a90 	vmov	r2, s15
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800bb54:	4b13      	ldr	r3, [pc, #76]	; (800bba4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb58:	0e1b      	lsrs	r3, r3, #24
 800bb5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb5e:	ee07 3a90 	vmov	s15, r3
 800bb62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bb6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bb6e:	edd7 6a07 	vldr	s13, [r7, #28]
 800bb72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bb76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb7a:	ee17 2a90 	vmov	r2, s15
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800bb82:	e008      	b.n	800bb96 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	2200      	movs	r2, #0
 800bb88:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	2200      	movs	r2, #0
 800bb94:	609a      	str	r2, [r3, #8]
}
 800bb96:	bf00      	nop
 800bb98:	3724      	adds	r7, #36	; 0x24
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba0:	4770      	bx	lr
 800bba2:	bf00      	nop
 800bba4:	58024400 	.word	0x58024400
 800bba8:	03d09000 	.word	0x03d09000
 800bbac:	46000000 	.word	0x46000000
 800bbb0:	4c742400 	.word	0x4c742400
 800bbb4:	4a742400 	.word	0x4a742400
 800bbb8:	4bbebc20 	.word	0x4bbebc20

0800bbbc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800bbbc:	b480      	push	{r7}
 800bbbe:	b089      	sub	sp, #36	; 0x24
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bbc4:	4ba0      	ldr	r3, [pc, #640]	; (800be48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bbc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbc8:	f003 0303 	and.w	r3, r3, #3
 800bbcc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800bbce:	4b9e      	ldr	r3, [pc, #632]	; (800be48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bbd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbd2:	091b      	lsrs	r3, r3, #4
 800bbd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bbd8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800bbda:	4b9b      	ldr	r3, [pc, #620]	; (800be48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bbdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbde:	f003 0301 	and.w	r3, r3, #1
 800bbe2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800bbe4:	4b98      	ldr	r3, [pc, #608]	; (800be48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bbe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbe8:	08db      	lsrs	r3, r3, #3
 800bbea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bbee:	693a      	ldr	r2, [r7, #16]
 800bbf0:	fb02 f303 	mul.w	r3, r2, r3
 800bbf4:	ee07 3a90 	vmov	s15, r3
 800bbf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbfc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800bc00:	697b      	ldr	r3, [r7, #20]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	f000 8111 	beq.w	800be2a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800bc08:	69bb      	ldr	r3, [r7, #24]
 800bc0a:	2b02      	cmp	r3, #2
 800bc0c:	f000 8083 	beq.w	800bd16 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800bc10:	69bb      	ldr	r3, [r7, #24]
 800bc12:	2b02      	cmp	r3, #2
 800bc14:	f200 80a1 	bhi.w	800bd5a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800bc18:	69bb      	ldr	r3, [r7, #24]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d003      	beq.n	800bc26 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800bc1e:	69bb      	ldr	r3, [r7, #24]
 800bc20:	2b01      	cmp	r3, #1
 800bc22:	d056      	beq.n	800bcd2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800bc24:	e099      	b.n	800bd5a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bc26:	4b88      	ldr	r3, [pc, #544]	; (800be48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	f003 0320 	and.w	r3, r3, #32
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d02d      	beq.n	800bc8e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bc32:	4b85      	ldr	r3, [pc, #532]	; (800be48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	08db      	lsrs	r3, r3, #3
 800bc38:	f003 0303 	and.w	r3, r3, #3
 800bc3c:	4a83      	ldr	r2, [pc, #524]	; (800be4c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800bc3e:	fa22 f303 	lsr.w	r3, r2, r3
 800bc42:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bc44:	68bb      	ldr	r3, [r7, #8]
 800bc46:	ee07 3a90 	vmov	s15, r3
 800bc4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc4e:	697b      	ldr	r3, [r7, #20]
 800bc50:	ee07 3a90 	vmov	s15, r3
 800bc54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc5c:	4b7a      	ldr	r3, [pc, #488]	; (800be48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc64:	ee07 3a90 	vmov	s15, r3
 800bc68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc6c:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc70:	eddf 5a77 	vldr	s11, [pc, #476]	; 800be50 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bc74:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc78:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc7c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc84:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc88:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bc8c:	e087      	b.n	800bd9e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bc8e:	697b      	ldr	r3, [r7, #20]
 800bc90:	ee07 3a90 	vmov	s15, r3
 800bc94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc98:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800be54 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800bc9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bca0:	4b69      	ldr	r3, [pc, #420]	; (800be48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bca4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bca8:	ee07 3a90 	vmov	s15, r3
 800bcac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bcb0:	ed97 6a03 	vldr	s12, [r7, #12]
 800bcb4:	eddf 5a66 	vldr	s11, [pc, #408]	; 800be50 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bcb8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bcbc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bcc0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bcc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bcc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bccc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bcd0:	e065      	b.n	800bd9e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bcd2:	697b      	ldr	r3, [r7, #20]
 800bcd4:	ee07 3a90 	vmov	s15, r3
 800bcd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcdc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800be58 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800bce0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bce4:	4b58      	ldr	r3, [pc, #352]	; (800be48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bce8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcec:	ee07 3a90 	vmov	s15, r3
 800bcf0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bcf4:	ed97 6a03 	vldr	s12, [r7, #12]
 800bcf8:	eddf 5a55 	vldr	s11, [pc, #340]	; 800be50 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bcfc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd10:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bd14:	e043      	b.n	800bd9e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bd16:	697b      	ldr	r3, [r7, #20]
 800bd18:	ee07 3a90 	vmov	s15, r3
 800bd1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd20:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800be5c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800bd24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd28:	4b47      	ldr	r3, [pc, #284]	; (800be48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bd2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd30:	ee07 3a90 	vmov	s15, r3
 800bd34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd38:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd3c:	eddf 5a44 	vldr	s11, [pc, #272]	; 800be50 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bd40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd50:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd54:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bd58:	e021      	b.n	800bd9e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bd5a:	697b      	ldr	r3, [r7, #20]
 800bd5c:	ee07 3a90 	vmov	s15, r3
 800bd60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd64:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800be54 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800bd68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd6c:	4b36      	ldr	r3, [pc, #216]	; (800be48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bd6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd74:	ee07 3a90 	vmov	s15, r3
 800bd78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd7c:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd80:	eddf 5a33 	vldr	s11, [pc, #204]	; 800be50 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bd84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd94:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd98:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bd9c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800bd9e:	4b2a      	ldr	r3, [pc, #168]	; (800be48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bda0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bda2:	0a5b      	lsrs	r3, r3, #9
 800bda4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bda8:	ee07 3a90 	vmov	s15, r3
 800bdac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdb0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bdb4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bdb8:	edd7 6a07 	vldr	s13, [r7, #28]
 800bdbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bdc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bdc4:	ee17 2a90 	vmov	r2, s15
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800bdcc:	4b1e      	ldr	r3, [pc, #120]	; (800be48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bdce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdd0:	0c1b      	lsrs	r3, r3, #16
 800bdd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bdd6:	ee07 3a90 	vmov	s15, r3
 800bdda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdde:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bde2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bde6:	edd7 6a07 	vldr	s13, [r7, #28]
 800bdea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bdee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bdf2:	ee17 2a90 	vmov	r2, s15
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800bdfa:	4b13      	ldr	r3, [pc, #76]	; (800be48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bdfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdfe:	0e1b      	lsrs	r3, r3, #24
 800be00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be04:	ee07 3a90 	vmov	s15, r3
 800be08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be0c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800be10:	ee37 7a87 	vadd.f32	s14, s15, s14
 800be14:	edd7 6a07 	vldr	s13, [r7, #28]
 800be18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be20:	ee17 2a90 	vmov	r2, s15
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800be28:	e008      	b.n	800be3c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	2200      	movs	r2, #0
 800be2e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	2200      	movs	r2, #0
 800be34:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	2200      	movs	r2, #0
 800be3a:	609a      	str	r2, [r3, #8]
}
 800be3c:	bf00      	nop
 800be3e:	3724      	adds	r7, #36	; 0x24
 800be40:	46bd      	mov	sp, r7
 800be42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be46:	4770      	bx	lr
 800be48:	58024400 	.word	0x58024400
 800be4c:	03d09000 	.word	0x03d09000
 800be50:	46000000 	.word	0x46000000
 800be54:	4c742400 	.word	0x4c742400
 800be58:	4a742400 	.word	0x4a742400
 800be5c:	4bbebc20 	.word	0x4bbebc20

0800be60 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b084      	sub	sp, #16
 800be64:	af00      	add	r7, sp, #0
 800be66:	6078      	str	r0, [r7, #4]
 800be68:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800be6a:	2300      	movs	r3, #0
 800be6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800be6e:	4b53      	ldr	r3, [pc, #332]	; (800bfbc <RCCEx_PLL2_Config+0x15c>)
 800be70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be72:	f003 0303 	and.w	r3, r3, #3
 800be76:	2b03      	cmp	r3, #3
 800be78:	d101      	bne.n	800be7e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800be7a:	2301      	movs	r3, #1
 800be7c:	e099      	b.n	800bfb2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800be7e:	4b4f      	ldr	r3, [pc, #316]	; (800bfbc <RCCEx_PLL2_Config+0x15c>)
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	4a4e      	ldr	r2, [pc, #312]	; (800bfbc <RCCEx_PLL2_Config+0x15c>)
 800be84:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800be88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800be8a:	f7f7 f95b 	bl	8003144 <HAL_GetTick>
 800be8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800be90:	e008      	b.n	800bea4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800be92:	f7f7 f957 	bl	8003144 <HAL_GetTick>
 800be96:	4602      	mov	r2, r0
 800be98:	68bb      	ldr	r3, [r7, #8]
 800be9a:	1ad3      	subs	r3, r2, r3
 800be9c:	2b02      	cmp	r3, #2
 800be9e:	d901      	bls.n	800bea4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bea0:	2303      	movs	r3, #3
 800bea2:	e086      	b.n	800bfb2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bea4:	4b45      	ldr	r3, [pc, #276]	; (800bfbc <RCCEx_PLL2_Config+0x15c>)
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800beac:	2b00      	cmp	r3, #0
 800beae:	d1f0      	bne.n	800be92 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800beb0:	4b42      	ldr	r3, [pc, #264]	; (800bfbc <RCCEx_PLL2_Config+0x15c>)
 800beb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800beb4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	031b      	lsls	r3, r3, #12
 800bebe:	493f      	ldr	r1, [pc, #252]	; (800bfbc <RCCEx_PLL2_Config+0x15c>)
 800bec0:	4313      	orrs	r3, r2
 800bec2:	628b      	str	r3, [r1, #40]	; 0x28
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	685b      	ldr	r3, [r3, #4]
 800bec8:	3b01      	subs	r3, #1
 800beca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	689b      	ldr	r3, [r3, #8]
 800bed2:	3b01      	subs	r3, #1
 800bed4:	025b      	lsls	r3, r3, #9
 800bed6:	b29b      	uxth	r3, r3
 800bed8:	431a      	orrs	r2, r3
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	68db      	ldr	r3, [r3, #12]
 800bede:	3b01      	subs	r3, #1
 800bee0:	041b      	lsls	r3, r3, #16
 800bee2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800bee6:	431a      	orrs	r2, r3
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	691b      	ldr	r3, [r3, #16]
 800beec:	3b01      	subs	r3, #1
 800beee:	061b      	lsls	r3, r3, #24
 800bef0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800bef4:	4931      	ldr	r1, [pc, #196]	; (800bfbc <RCCEx_PLL2_Config+0x15c>)
 800bef6:	4313      	orrs	r3, r2
 800bef8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800befa:	4b30      	ldr	r3, [pc, #192]	; (800bfbc <RCCEx_PLL2_Config+0x15c>)
 800befc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800befe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	695b      	ldr	r3, [r3, #20]
 800bf06:	492d      	ldr	r1, [pc, #180]	; (800bfbc <RCCEx_PLL2_Config+0x15c>)
 800bf08:	4313      	orrs	r3, r2
 800bf0a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800bf0c:	4b2b      	ldr	r3, [pc, #172]	; (800bfbc <RCCEx_PLL2_Config+0x15c>)
 800bf0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf10:	f023 0220 	bic.w	r2, r3, #32
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	699b      	ldr	r3, [r3, #24]
 800bf18:	4928      	ldr	r1, [pc, #160]	; (800bfbc <RCCEx_PLL2_Config+0x15c>)
 800bf1a:	4313      	orrs	r3, r2
 800bf1c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800bf1e:	4b27      	ldr	r3, [pc, #156]	; (800bfbc <RCCEx_PLL2_Config+0x15c>)
 800bf20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf22:	4a26      	ldr	r2, [pc, #152]	; (800bfbc <RCCEx_PLL2_Config+0x15c>)
 800bf24:	f023 0310 	bic.w	r3, r3, #16
 800bf28:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800bf2a:	4b24      	ldr	r3, [pc, #144]	; (800bfbc <RCCEx_PLL2_Config+0x15c>)
 800bf2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bf2e:	4b24      	ldr	r3, [pc, #144]	; (800bfc0 <RCCEx_PLL2_Config+0x160>)
 800bf30:	4013      	ands	r3, r2
 800bf32:	687a      	ldr	r2, [r7, #4]
 800bf34:	69d2      	ldr	r2, [r2, #28]
 800bf36:	00d2      	lsls	r2, r2, #3
 800bf38:	4920      	ldr	r1, [pc, #128]	; (800bfbc <RCCEx_PLL2_Config+0x15c>)
 800bf3a:	4313      	orrs	r3, r2
 800bf3c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800bf3e:	4b1f      	ldr	r3, [pc, #124]	; (800bfbc <RCCEx_PLL2_Config+0x15c>)
 800bf40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf42:	4a1e      	ldr	r2, [pc, #120]	; (800bfbc <RCCEx_PLL2_Config+0x15c>)
 800bf44:	f043 0310 	orr.w	r3, r3, #16
 800bf48:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800bf4a:	683b      	ldr	r3, [r7, #0]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d106      	bne.n	800bf5e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800bf50:	4b1a      	ldr	r3, [pc, #104]	; (800bfbc <RCCEx_PLL2_Config+0x15c>)
 800bf52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf54:	4a19      	ldr	r2, [pc, #100]	; (800bfbc <RCCEx_PLL2_Config+0x15c>)
 800bf56:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bf5a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bf5c:	e00f      	b.n	800bf7e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bf5e:	683b      	ldr	r3, [r7, #0]
 800bf60:	2b01      	cmp	r3, #1
 800bf62:	d106      	bne.n	800bf72 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800bf64:	4b15      	ldr	r3, [pc, #84]	; (800bfbc <RCCEx_PLL2_Config+0x15c>)
 800bf66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf68:	4a14      	ldr	r2, [pc, #80]	; (800bfbc <RCCEx_PLL2_Config+0x15c>)
 800bf6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bf6e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bf70:	e005      	b.n	800bf7e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800bf72:	4b12      	ldr	r3, [pc, #72]	; (800bfbc <RCCEx_PLL2_Config+0x15c>)
 800bf74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf76:	4a11      	ldr	r2, [pc, #68]	; (800bfbc <RCCEx_PLL2_Config+0x15c>)
 800bf78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bf7c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800bf7e:	4b0f      	ldr	r3, [pc, #60]	; (800bfbc <RCCEx_PLL2_Config+0x15c>)
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	4a0e      	ldr	r2, [pc, #56]	; (800bfbc <RCCEx_PLL2_Config+0x15c>)
 800bf84:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bf88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bf8a:	f7f7 f8db 	bl	8003144 <HAL_GetTick>
 800bf8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bf90:	e008      	b.n	800bfa4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bf92:	f7f7 f8d7 	bl	8003144 <HAL_GetTick>
 800bf96:	4602      	mov	r2, r0
 800bf98:	68bb      	ldr	r3, [r7, #8]
 800bf9a:	1ad3      	subs	r3, r2, r3
 800bf9c:	2b02      	cmp	r3, #2
 800bf9e:	d901      	bls.n	800bfa4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bfa0:	2303      	movs	r3, #3
 800bfa2:	e006      	b.n	800bfb2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bfa4:	4b05      	ldr	r3, [pc, #20]	; (800bfbc <RCCEx_PLL2_Config+0x15c>)
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d0f0      	beq.n	800bf92 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800bfb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	3710      	adds	r7, #16
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	bd80      	pop	{r7, pc}
 800bfba:	bf00      	nop
 800bfbc:	58024400 	.word	0x58024400
 800bfc0:	ffff0007 	.word	0xffff0007

0800bfc4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b084      	sub	sp, #16
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
 800bfcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bfce:	2300      	movs	r3, #0
 800bfd0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bfd2:	4b53      	ldr	r3, [pc, #332]	; (800c120 <RCCEx_PLL3_Config+0x15c>)
 800bfd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfd6:	f003 0303 	and.w	r3, r3, #3
 800bfda:	2b03      	cmp	r3, #3
 800bfdc:	d101      	bne.n	800bfe2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800bfde:	2301      	movs	r3, #1
 800bfe0:	e099      	b.n	800c116 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800bfe2:	4b4f      	ldr	r3, [pc, #316]	; (800c120 <RCCEx_PLL3_Config+0x15c>)
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	4a4e      	ldr	r2, [pc, #312]	; (800c120 <RCCEx_PLL3_Config+0x15c>)
 800bfe8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bfec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bfee:	f7f7 f8a9 	bl	8003144 <HAL_GetTick>
 800bff2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bff4:	e008      	b.n	800c008 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bff6:	f7f7 f8a5 	bl	8003144 <HAL_GetTick>
 800bffa:	4602      	mov	r2, r0
 800bffc:	68bb      	ldr	r3, [r7, #8]
 800bffe:	1ad3      	subs	r3, r2, r3
 800c000:	2b02      	cmp	r3, #2
 800c002:	d901      	bls.n	800c008 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c004:	2303      	movs	r3, #3
 800c006:	e086      	b.n	800c116 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c008:	4b45      	ldr	r3, [pc, #276]	; (800c120 <RCCEx_PLL3_Config+0x15c>)
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c010:	2b00      	cmp	r3, #0
 800c012:	d1f0      	bne.n	800bff6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c014:	4b42      	ldr	r3, [pc, #264]	; (800c120 <RCCEx_PLL3_Config+0x15c>)
 800c016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c018:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	051b      	lsls	r3, r3, #20
 800c022:	493f      	ldr	r1, [pc, #252]	; (800c120 <RCCEx_PLL3_Config+0x15c>)
 800c024:	4313      	orrs	r3, r2
 800c026:	628b      	str	r3, [r1, #40]	; 0x28
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	685b      	ldr	r3, [r3, #4]
 800c02c:	3b01      	subs	r3, #1
 800c02e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	689b      	ldr	r3, [r3, #8]
 800c036:	3b01      	subs	r3, #1
 800c038:	025b      	lsls	r3, r3, #9
 800c03a:	b29b      	uxth	r3, r3
 800c03c:	431a      	orrs	r2, r3
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	68db      	ldr	r3, [r3, #12]
 800c042:	3b01      	subs	r3, #1
 800c044:	041b      	lsls	r3, r3, #16
 800c046:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c04a:	431a      	orrs	r2, r3
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	691b      	ldr	r3, [r3, #16]
 800c050:	3b01      	subs	r3, #1
 800c052:	061b      	lsls	r3, r3, #24
 800c054:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c058:	4931      	ldr	r1, [pc, #196]	; (800c120 <RCCEx_PLL3_Config+0x15c>)
 800c05a:	4313      	orrs	r3, r2
 800c05c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c05e:	4b30      	ldr	r3, [pc, #192]	; (800c120 <RCCEx_PLL3_Config+0x15c>)
 800c060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c062:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	695b      	ldr	r3, [r3, #20]
 800c06a:	492d      	ldr	r1, [pc, #180]	; (800c120 <RCCEx_PLL3_Config+0x15c>)
 800c06c:	4313      	orrs	r3, r2
 800c06e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c070:	4b2b      	ldr	r3, [pc, #172]	; (800c120 <RCCEx_PLL3_Config+0x15c>)
 800c072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c074:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	699b      	ldr	r3, [r3, #24]
 800c07c:	4928      	ldr	r1, [pc, #160]	; (800c120 <RCCEx_PLL3_Config+0x15c>)
 800c07e:	4313      	orrs	r3, r2
 800c080:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c082:	4b27      	ldr	r3, [pc, #156]	; (800c120 <RCCEx_PLL3_Config+0x15c>)
 800c084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c086:	4a26      	ldr	r2, [pc, #152]	; (800c120 <RCCEx_PLL3_Config+0x15c>)
 800c088:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c08c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c08e:	4b24      	ldr	r3, [pc, #144]	; (800c120 <RCCEx_PLL3_Config+0x15c>)
 800c090:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c092:	4b24      	ldr	r3, [pc, #144]	; (800c124 <RCCEx_PLL3_Config+0x160>)
 800c094:	4013      	ands	r3, r2
 800c096:	687a      	ldr	r2, [r7, #4]
 800c098:	69d2      	ldr	r2, [r2, #28]
 800c09a:	00d2      	lsls	r2, r2, #3
 800c09c:	4920      	ldr	r1, [pc, #128]	; (800c120 <RCCEx_PLL3_Config+0x15c>)
 800c09e:	4313      	orrs	r3, r2
 800c0a0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c0a2:	4b1f      	ldr	r3, [pc, #124]	; (800c120 <RCCEx_PLL3_Config+0x15c>)
 800c0a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0a6:	4a1e      	ldr	r2, [pc, #120]	; (800c120 <RCCEx_PLL3_Config+0x15c>)
 800c0a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c0ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c0ae:	683b      	ldr	r3, [r7, #0]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d106      	bne.n	800c0c2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c0b4:	4b1a      	ldr	r3, [pc, #104]	; (800c120 <RCCEx_PLL3_Config+0x15c>)
 800c0b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0b8:	4a19      	ldr	r2, [pc, #100]	; (800c120 <RCCEx_PLL3_Config+0x15c>)
 800c0ba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c0be:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c0c0:	e00f      	b.n	800c0e2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c0c2:	683b      	ldr	r3, [r7, #0]
 800c0c4:	2b01      	cmp	r3, #1
 800c0c6:	d106      	bne.n	800c0d6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c0c8:	4b15      	ldr	r3, [pc, #84]	; (800c120 <RCCEx_PLL3_Config+0x15c>)
 800c0ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0cc:	4a14      	ldr	r2, [pc, #80]	; (800c120 <RCCEx_PLL3_Config+0x15c>)
 800c0ce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c0d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c0d4:	e005      	b.n	800c0e2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c0d6:	4b12      	ldr	r3, [pc, #72]	; (800c120 <RCCEx_PLL3_Config+0x15c>)
 800c0d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0da:	4a11      	ldr	r2, [pc, #68]	; (800c120 <RCCEx_PLL3_Config+0x15c>)
 800c0dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c0e0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c0e2:	4b0f      	ldr	r3, [pc, #60]	; (800c120 <RCCEx_PLL3_Config+0x15c>)
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	4a0e      	ldr	r2, [pc, #56]	; (800c120 <RCCEx_PLL3_Config+0x15c>)
 800c0e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c0ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c0ee:	f7f7 f829 	bl	8003144 <HAL_GetTick>
 800c0f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c0f4:	e008      	b.n	800c108 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c0f6:	f7f7 f825 	bl	8003144 <HAL_GetTick>
 800c0fa:	4602      	mov	r2, r0
 800c0fc:	68bb      	ldr	r3, [r7, #8]
 800c0fe:	1ad3      	subs	r3, r2, r3
 800c100:	2b02      	cmp	r3, #2
 800c102:	d901      	bls.n	800c108 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c104:	2303      	movs	r3, #3
 800c106:	e006      	b.n	800c116 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c108:	4b05      	ldr	r3, [pc, #20]	; (800c120 <RCCEx_PLL3_Config+0x15c>)
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c110:	2b00      	cmp	r3, #0
 800c112:	d0f0      	beq.n	800c0f6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c114:	7bfb      	ldrb	r3, [r7, #15]
}
 800c116:	4618      	mov	r0, r3
 800c118:	3710      	adds	r7, #16
 800c11a:	46bd      	mov	sp, r7
 800c11c:	bd80      	pop	{r7, pc}
 800c11e:	bf00      	nop
 800c120:	58024400 	.word	0x58024400
 800c124:	ffff0007 	.word	0xffff0007

0800c128 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	b084      	sub	sp, #16
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800c130:	2301      	movs	r3, #1
 800c132:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d071      	beq.n	800c21e <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800c140:	b2db      	uxtb	r3, r3
 800c142:	2b00      	cmp	r3, #0
 800c144:	d106      	bne.n	800c154 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	2200      	movs	r2, #0
 800c14a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800c14e:	6878      	ldr	r0, [r7, #4]
 800c150:	f7f5 fe10 	bl	8001d74 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	2202      	movs	r2, #2
 800c158:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	68db      	ldr	r3, [r3, #12]
 800c162:	f003 0310 	and.w	r3, r3, #16
 800c166:	2b10      	cmp	r3, #16
 800c168:	d050      	beq.n	800c20c <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	22ca      	movs	r2, #202	; 0xca
 800c170:	625a      	str	r2, [r3, #36]	; 0x24
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	2253      	movs	r2, #83	; 0x53
 800c178:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800c17a:	6878      	ldr	r0, [r7, #4]
 800c17c:	f000 f9a0 	bl	800c4c0 <RTC_EnterInitMode>
 800c180:	4603      	mov	r3, r0
 800c182:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800c184:	7bfb      	ldrb	r3, [r7, #15]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d124      	bne.n	800c1d4 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	6899      	ldr	r1, [r3, #8]
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	681a      	ldr	r2, [r3, #0]
 800c194:	4b24      	ldr	r3, [pc, #144]	; (800c228 <HAL_RTC_Init+0x100>)
 800c196:	400b      	ands	r3, r1
 800c198:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	6899      	ldr	r1, [r3, #8]
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	685a      	ldr	r2, [r3, #4]
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	691b      	ldr	r3, [r3, #16]
 800c1a8:	431a      	orrs	r2, r3
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	699b      	ldr	r3, [r3, #24]
 800c1ae:	431a      	orrs	r2, r3
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	430a      	orrs	r2, r1
 800c1b6:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	689b      	ldr	r3, [r3, #8]
 800c1bc:	0419      	lsls	r1, r3, #16
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	68da      	ldr	r2, [r3, #12]
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	430a      	orrs	r2, r1
 800c1c8:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800c1ca:	6878      	ldr	r0, [r7, #4]
 800c1cc:	f000 f9ac 	bl	800c528 <RTC_ExitInitMode>
 800c1d0:	4603      	mov	r3, r0
 800c1d2:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800c1d4:	7bfb      	ldrb	r3, [r7, #15]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d113      	bne.n	800c202 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	f022 0203 	bic.w	r2, r2, #3
 800c1e8:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	69da      	ldr	r2, [r3, #28]
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	695b      	ldr	r3, [r3, #20]
 800c1f8:	431a      	orrs	r2, r3
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	430a      	orrs	r2, r1
 800c200:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	22ff      	movs	r2, #255	; 0xff
 800c208:	625a      	str	r2, [r3, #36]	; 0x24
 800c20a:	e001      	b.n	800c210 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800c20c:	2300      	movs	r3, #0
 800c20e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800c210:	7bfb      	ldrb	r3, [r7, #15]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d103      	bne.n	800c21e <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	2201      	movs	r2, #1
 800c21a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800c21e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c220:	4618      	mov	r0, r3
 800c222:	3710      	adds	r7, #16
 800c224:	46bd      	mov	sp, r7
 800c226:	bd80      	pop	{r7, pc}
 800c228:	ff8fffbf 	.word	0xff8fffbf

0800c22c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c22c:	b590      	push	{r4, r7, lr}
 800c22e:	b087      	sub	sp, #28
 800c230:	af00      	add	r7, sp, #0
 800c232:	60f8      	str	r0, [r7, #12]
 800c234:	60b9      	str	r1, [r7, #8]
 800c236:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c23e:	2b01      	cmp	r3, #1
 800c240:	d101      	bne.n	800c246 <HAL_RTC_SetTime+0x1a>
 800c242:	2302      	movs	r3, #2
 800c244:	e089      	b.n	800c35a <HAL_RTC_SetTime+0x12e>
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	2201      	movs	r2, #1
 800c24a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	2202      	movs	r2, #2
 800c252:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	22ca      	movs	r2, #202	; 0xca
 800c25c:	625a      	str	r2, [r3, #36]	; 0x24
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	2253      	movs	r2, #83	; 0x53
 800c264:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c266:	68f8      	ldr	r0, [r7, #12]
 800c268:	f000 f92a 	bl	800c4c0 <RTC_EnterInitMode>
 800c26c:	4603      	mov	r3, r0
 800c26e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800c270:	7cfb      	ldrb	r3, [r7, #19]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d161      	bne.n	800c33a <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d126      	bne.n	800c2ca <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	689b      	ldr	r3, [r3, #8]
 800c282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c286:	2b00      	cmp	r3, #0
 800c288:	d102      	bne.n	800c290 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800c28a:	68bb      	ldr	r3, [r7, #8]
 800c28c:	2200      	movs	r2, #0
 800c28e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c290:	68bb      	ldr	r3, [r7, #8]
 800c292:	781b      	ldrb	r3, [r3, #0]
 800c294:	4618      	mov	r0, r3
 800c296:	f000 f985 	bl	800c5a4 <RTC_ByteToBcd2>
 800c29a:	4603      	mov	r3, r0
 800c29c:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c29e:	68bb      	ldr	r3, [r7, #8]
 800c2a0:	785b      	ldrb	r3, [r3, #1]
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	f000 f97e 	bl	800c5a4 <RTC_ByteToBcd2>
 800c2a8:	4603      	mov	r3, r0
 800c2aa:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c2ac:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800c2ae:	68bb      	ldr	r3, [r7, #8]
 800c2b0:	789b      	ldrb	r3, [r3, #2]
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	f000 f976 	bl	800c5a4 <RTC_ByteToBcd2>
 800c2b8:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c2ba:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c2be:	68bb      	ldr	r3, [r7, #8]
 800c2c0:	78db      	ldrb	r3, [r3, #3]
 800c2c2:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c2c4:	4313      	orrs	r3, r2
 800c2c6:	617b      	str	r3, [r7, #20]
 800c2c8:	e018      	b.n	800c2fc <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	689b      	ldr	r3, [r3, #8]
 800c2d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d102      	bne.n	800c2de <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800c2d8:	68bb      	ldr	r3, [r7, #8]
 800c2da:	2200      	movs	r2, #0
 800c2dc:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c2de:	68bb      	ldr	r3, [r7, #8]
 800c2e0:	781b      	ldrb	r3, [r3, #0]
 800c2e2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c2e4:	68bb      	ldr	r3, [r7, #8]
 800c2e6:	785b      	ldrb	r3, [r3, #1]
 800c2e8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c2ea:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800c2ec:	68ba      	ldr	r2, [r7, #8]
 800c2ee:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c2f0:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c2f2:	68bb      	ldr	r3, [r7, #8]
 800c2f4:	78db      	ldrb	r3, [r3, #3]
 800c2f6:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c2f8:	4313      	orrs	r3, r2
 800c2fa:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	681a      	ldr	r2, [r3, #0]
 800c300:	6979      	ldr	r1, [r7, #20]
 800c302:	4b18      	ldr	r3, [pc, #96]	; (800c364 <HAL_RTC_SetTime+0x138>)
 800c304:	400b      	ands	r3, r1
 800c306:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	689a      	ldr	r2, [r3, #8]
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c316:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	6899      	ldr	r1, [r3, #8]
 800c31e:	68bb      	ldr	r3, [r7, #8]
 800c320:	68da      	ldr	r2, [r3, #12]
 800c322:	68bb      	ldr	r3, [r7, #8]
 800c324:	691b      	ldr	r3, [r3, #16]
 800c326:	431a      	orrs	r2, r3
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	430a      	orrs	r2, r1
 800c32e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c330:	68f8      	ldr	r0, [r7, #12]
 800c332:	f000 f8f9 	bl	800c528 <RTC_ExitInitMode>
 800c336:	4603      	mov	r3, r0
 800c338:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	22ff      	movs	r2, #255	; 0xff
 800c340:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800c342:	7cfb      	ldrb	r3, [r7, #19]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d103      	bne.n	800c350 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	2201      	movs	r2, #1
 800c34c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	2200      	movs	r2, #0
 800c354:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800c358:	7cfb      	ldrb	r3, [r7, #19]
}
 800c35a:	4618      	mov	r0, r3
 800c35c:	371c      	adds	r7, #28
 800c35e:	46bd      	mov	sp, r7
 800c360:	bd90      	pop	{r4, r7, pc}
 800c362:	bf00      	nop
 800c364:	007f7f7f 	.word	0x007f7f7f

0800c368 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c368:	b590      	push	{r4, r7, lr}
 800c36a:	b087      	sub	sp, #28
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	60f8      	str	r0, [r7, #12]
 800c370:	60b9      	str	r1, [r7, #8]
 800c372:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c37a:	2b01      	cmp	r3, #1
 800c37c:	d101      	bne.n	800c382 <HAL_RTC_SetDate+0x1a>
 800c37e:	2302      	movs	r3, #2
 800c380:	e073      	b.n	800c46a <HAL_RTC_SetDate+0x102>
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	2201      	movs	r2, #1
 800c386:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	2202      	movs	r2, #2
 800c38e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d10e      	bne.n	800c3b6 <HAL_RTC_SetDate+0x4e>
 800c398:	68bb      	ldr	r3, [r7, #8]
 800c39a:	785b      	ldrb	r3, [r3, #1]
 800c39c:	f003 0310 	and.w	r3, r3, #16
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d008      	beq.n	800c3b6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800c3a4:	68bb      	ldr	r3, [r7, #8]
 800c3a6:	785b      	ldrb	r3, [r3, #1]
 800c3a8:	f023 0310 	bic.w	r3, r3, #16
 800c3ac:	b2db      	uxtb	r3, r3
 800c3ae:	330a      	adds	r3, #10
 800c3b0:	b2da      	uxtb	r2, r3
 800c3b2:	68bb      	ldr	r3, [r7, #8]
 800c3b4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d11c      	bne.n	800c3f6 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c3bc:	68bb      	ldr	r3, [r7, #8]
 800c3be:	78db      	ldrb	r3, [r3, #3]
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	f000 f8ef 	bl	800c5a4 <RTC_ByteToBcd2>
 800c3c6:	4603      	mov	r3, r0
 800c3c8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c3ca:	68bb      	ldr	r3, [r7, #8]
 800c3cc:	785b      	ldrb	r3, [r3, #1]
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	f000 f8e8 	bl	800c5a4 <RTC_ByteToBcd2>
 800c3d4:	4603      	mov	r3, r0
 800c3d6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c3d8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800c3da:	68bb      	ldr	r3, [r7, #8]
 800c3dc:	789b      	ldrb	r3, [r3, #2]
 800c3de:	4618      	mov	r0, r3
 800c3e0:	f000 f8e0 	bl	800c5a4 <RTC_ByteToBcd2>
 800c3e4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c3e6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800c3ea:	68bb      	ldr	r3, [r7, #8]
 800c3ec:	781b      	ldrb	r3, [r3, #0]
 800c3ee:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c3f0:	4313      	orrs	r3, r2
 800c3f2:	617b      	str	r3, [r7, #20]
 800c3f4:	e00e      	b.n	800c414 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c3f6:	68bb      	ldr	r3, [r7, #8]
 800c3f8:	78db      	ldrb	r3, [r3, #3]
 800c3fa:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800c3fc:	68bb      	ldr	r3, [r7, #8]
 800c3fe:	785b      	ldrb	r3, [r3, #1]
 800c400:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c402:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800c404:	68ba      	ldr	r2, [r7, #8]
 800c406:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800c408:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800c40a:	68bb      	ldr	r3, [r7, #8]
 800c40c:	781b      	ldrb	r3, [r3, #0]
 800c40e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c410:	4313      	orrs	r3, r2
 800c412:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	22ca      	movs	r2, #202	; 0xca
 800c41a:	625a      	str	r2, [r3, #36]	; 0x24
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	2253      	movs	r2, #83	; 0x53
 800c422:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c424:	68f8      	ldr	r0, [r7, #12]
 800c426:	f000 f84b 	bl	800c4c0 <RTC_EnterInitMode>
 800c42a:	4603      	mov	r3, r0
 800c42c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800c42e:	7cfb      	ldrb	r3, [r7, #19]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d10a      	bne.n	800c44a <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	681a      	ldr	r2, [r3, #0]
 800c438:	6979      	ldr	r1, [r7, #20]
 800c43a:	4b0e      	ldr	r3, [pc, #56]	; (800c474 <HAL_RTC_SetDate+0x10c>)
 800c43c:	400b      	ands	r3, r1
 800c43e:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c440:	68f8      	ldr	r0, [r7, #12]
 800c442:	f000 f871 	bl	800c528 <RTC_ExitInitMode>
 800c446:	4603      	mov	r3, r0
 800c448:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	22ff      	movs	r2, #255	; 0xff
 800c450:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800c452:	7cfb      	ldrb	r3, [r7, #19]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d103      	bne.n	800c460 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	2201      	movs	r2, #1
 800c45c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	2200      	movs	r2, #0
 800c464:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800c468:	7cfb      	ldrb	r3, [r7, #19]


}
 800c46a:	4618      	mov	r0, r3
 800c46c:	371c      	adds	r7, #28
 800c46e:	46bd      	mov	sp, r7
 800c470:	bd90      	pop	{r4, r7, pc}
 800c472:	bf00      	nop
 800c474:	00ffff3f 	.word	0x00ffff3f

0800c478 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800c478:	b580      	push	{r7, lr}
 800c47a:	b084      	sub	sp, #16
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	4a0d      	ldr	r2, [pc, #52]	; (800c4bc <HAL_RTC_WaitForSynchro+0x44>)
 800c486:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800c488:	f7f6 fe5c 	bl	8003144 <HAL_GetTick>
 800c48c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c48e:	e009      	b.n	800c4a4 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c490:	f7f6 fe58 	bl	8003144 <HAL_GetTick>
 800c494:	4602      	mov	r2, r0
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	1ad3      	subs	r3, r2, r3
 800c49a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c49e:	d901      	bls.n	800c4a4 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800c4a0:	2303      	movs	r3, #3
 800c4a2:	e007      	b.n	800c4b4 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	68db      	ldr	r3, [r3, #12]
 800c4aa:	f003 0320 	and.w	r3, r3, #32
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d0ee      	beq.n	800c490 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800c4b2:	2300      	movs	r3, #0
}
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	3710      	adds	r7, #16
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	bd80      	pop	{r7, pc}
 800c4bc:	0003ff5f 	.word	0x0003ff5f

0800c4c0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b084      	sub	sp, #16
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	68db      	ldr	r3, [r3, #12]
 800c4d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d120      	bne.n	800c51c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c4e2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800c4e4:	f7f6 fe2e 	bl	8003144 <HAL_GetTick>
 800c4e8:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800c4ea:	e00d      	b.n	800c508 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800c4ec:	f7f6 fe2a 	bl	8003144 <HAL_GetTick>
 800c4f0:	4602      	mov	r2, r0
 800c4f2:	68bb      	ldr	r3, [r7, #8]
 800c4f4:	1ad3      	subs	r3, r2, r3
 800c4f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c4fa:	d905      	bls.n	800c508 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800c4fc:	2303      	movs	r3, #3
 800c4fe:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	2203      	movs	r2, #3
 800c504:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	68db      	ldr	r3, [r3, #12]
 800c50e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c512:	2b00      	cmp	r3, #0
 800c514:	d102      	bne.n	800c51c <RTC_EnterInitMode+0x5c>
 800c516:	7bfb      	ldrb	r3, [r7, #15]
 800c518:	2b03      	cmp	r3, #3
 800c51a:	d1e7      	bne.n	800c4ec <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800c51c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c51e:	4618      	mov	r0, r3
 800c520:	3710      	adds	r7, #16
 800c522:	46bd      	mov	sp, r7
 800c524:	bd80      	pop	{r7, pc}
	...

0800c528 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800c528:	b580      	push	{r7, lr}
 800c52a:	b084      	sub	sp, #16
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c530:	2300      	movs	r3, #0
 800c532:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800c534:	4b1a      	ldr	r3, [pc, #104]	; (800c5a0 <RTC_ExitInitMode+0x78>)
 800c536:	68db      	ldr	r3, [r3, #12]
 800c538:	4a19      	ldr	r2, [pc, #100]	; (800c5a0 <RTC_ExitInitMode+0x78>)
 800c53a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c53e:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800c540:	4b17      	ldr	r3, [pc, #92]	; (800c5a0 <RTC_ExitInitMode+0x78>)
 800c542:	689b      	ldr	r3, [r3, #8]
 800c544:	f003 0320 	and.w	r3, r3, #32
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d10c      	bne.n	800c566 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c54c:	6878      	ldr	r0, [r7, #4]
 800c54e:	f7ff ff93 	bl	800c478 <HAL_RTC_WaitForSynchro>
 800c552:	4603      	mov	r3, r0
 800c554:	2b00      	cmp	r3, #0
 800c556:	d01e      	beq.n	800c596 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	2203      	movs	r2, #3
 800c55c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800c560:	2303      	movs	r3, #3
 800c562:	73fb      	strb	r3, [r7, #15]
 800c564:	e017      	b.n	800c596 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c566:	4b0e      	ldr	r3, [pc, #56]	; (800c5a0 <RTC_ExitInitMode+0x78>)
 800c568:	689b      	ldr	r3, [r3, #8]
 800c56a:	4a0d      	ldr	r2, [pc, #52]	; (800c5a0 <RTC_ExitInitMode+0x78>)
 800c56c:	f023 0320 	bic.w	r3, r3, #32
 800c570:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c572:	6878      	ldr	r0, [r7, #4]
 800c574:	f7ff ff80 	bl	800c478 <HAL_RTC_WaitForSynchro>
 800c578:	4603      	mov	r3, r0
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d005      	beq.n	800c58a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	2203      	movs	r2, #3
 800c582:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800c586:	2303      	movs	r3, #3
 800c588:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c58a:	4b05      	ldr	r3, [pc, #20]	; (800c5a0 <RTC_ExitInitMode+0x78>)
 800c58c:	689b      	ldr	r3, [r3, #8]
 800c58e:	4a04      	ldr	r2, [pc, #16]	; (800c5a0 <RTC_ExitInitMode+0x78>)
 800c590:	f043 0320 	orr.w	r3, r3, #32
 800c594:	6093      	str	r3, [r2, #8]
  }

  return status;
 800c596:	7bfb      	ldrb	r3, [r7, #15]
}
 800c598:	4618      	mov	r0, r3
 800c59a:	3710      	adds	r7, #16
 800c59c:	46bd      	mov	sp, r7
 800c59e:	bd80      	pop	{r7, pc}
 800c5a0:	58004000 	.word	0x58004000

0800c5a4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800c5a4:	b480      	push	{r7}
 800c5a6:	b085      	sub	sp, #20
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	4603      	mov	r3, r0
 800c5ac:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800c5b2:	79fb      	ldrb	r3, [r7, #7]
 800c5b4:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800c5b6:	e005      	b.n	800c5c4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	3301      	adds	r3, #1
 800c5bc:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800c5be:	7afb      	ldrb	r3, [r7, #11]
 800c5c0:	3b0a      	subs	r3, #10
 800c5c2:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800c5c4:	7afb      	ldrb	r3, [r7, #11]
 800c5c6:	2b09      	cmp	r3, #9
 800c5c8:	d8f6      	bhi.n	800c5b8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	b2db      	uxtb	r3, r3
 800c5ce:	011b      	lsls	r3, r3, #4
 800c5d0:	b2da      	uxtb	r2, r3
 800c5d2:	7afb      	ldrb	r3, [r7, #11]
 800c5d4:	4313      	orrs	r3, r2
 800c5d6:	b2db      	uxtb	r3, r3
}
 800c5d8:	4618      	mov	r0, r3
 800c5da:	3714      	adds	r7, #20
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e2:	4770      	bx	lr

0800c5e4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b084      	sub	sp, #16
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d101      	bne.n	800c5f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c5f2:	2301      	movs	r3, #1
 800c5f4:	e10f      	b.n	800c816 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	4a87      	ldr	r2, [pc, #540]	; (800c820 <HAL_SPI_Init+0x23c>)
 800c602:	4293      	cmp	r3, r2
 800c604:	d00f      	beq.n	800c626 <HAL_SPI_Init+0x42>
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	4a86      	ldr	r2, [pc, #536]	; (800c824 <HAL_SPI_Init+0x240>)
 800c60c:	4293      	cmp	r3, r2
 800c60e:	d00a      	beq.n	800c626 <HAL_SPI_Init+0x42>
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	4a84      	ldr	r2, [pc, #528]	; (800c828 <HAL_SPI_Init+0x244>)
 800c616:	4293      	cmp	r3, r2
 800c618:	d005      	beq.n	800c626 <HAL_SPI_Init+0x42>
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	68db      	ldr	r3, [r3, #12]
 800c61e:	2b0f      	cmp	r3, #15
 800c620:	d901      	bls.n	800c626 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800c622:	2301      	movs	r3, #1
 800c624:	e0f7      	b.n	800c816 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800c626:	6878      	ldr	r0, [r7, #4]
 800c628:	f000 f900 	bl	800c82c <SPI_GetPacketSize>
 800c62c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	4a7b      	ldr	r2, [pc, #492]	; (800c820 <HAL_SPI_Init+0x23c>)
 800c634:	4293      	cmp	r3, r2
 800c636:	d00c      	beq.n	800c652 <HAL_SPI_Init+0x6e>
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	4a79      	ldr	r2, [pc, #484]	; (800c824 <HAL_SPI_Init+0x240>)
 800c63e:	4293      	cmp	r3, r2
 800c640:	d007      	beq.n	800c652 <HAL_SPI_Init+0x6e>
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	4a78      	ldr	r2, [pc, #480]	; (800c828 <HAL_SPI_Init+0x244>)
 800c648:	4293      	cmp	r3, r2
 800c64a:	d002      	beq.n	800c652 <HAL_SPI_Init+0x6e>
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	2b08      	cmp	r3, #8
 800c650:	d811      	bhi.n	800c676 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c656:	4a72      	ldr	r2, [pc, #456]	; (800c820 <HAL_SPI_Init+0x23c>)
 800c658:	4293      	cmp	r3, r2
 800c65a:	d009      	beq.n	800c670 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	4a70      	ldr	r2, [pc, #448]	; (800c824 <HAL_SPI_Init+0x240>)
 800c662:	4293      	cmp	r3, r2
 800c664:	d004      	beq.n	800c670 <HAL_SPI_Init+0x8c>
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	4a6f      	ldr	r2, [pc, #444]	; (800c828 <HAL_SPI_Init+0x244>)
 800c66c:	4293      	cmp	r3, r2
 800c66e:	d104      	bne.n	800c67a <HAL_SPI_Init+0x96>
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	2b10      	cmp	r3, #16
 800c674:	d901      	bls.n	800c67a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800c676:	2301      	movs	r3, #1
 800c678:	e0cd      	b.n	800c816 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c680:	b2db      	uxtb	r3, r3
 800c682:	2b00      	cmp	r3, #0
 800c684:	d106      	bne.n	800c694 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	2200      	movs	r2, #0
 800c68a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c68e:	6878      	ldr	r0, [r7, #4]
 800c690:	f7f5 fc94 	bl	8001fbc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	2202      	movs	r2, #2
 800c698:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	681a      	ldr	r2, [r3, #0]
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	f022 0201 	bic.w	r2, r2, #1
 800c6aa:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	689b      	ldr	r3, [r3, #8]
 800c6b2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800c6b6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	699b      	ldr	r3, [r3, #24]
 800c6bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c6c0:	d119      	bne.n	800c6f6 <HAL_SPI_Init+0x112>
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	685b      	ldr	r3, [r3, #4]
 800c6c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c6ca:	d103      	bne.n	800c6d4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d008      	beq.n	800c6e6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d10c      	bne.n	800c6f6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c6e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c6e4:	d107      	bne.n	800c6f6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	681a      	ldr	r2, [r3, #0]
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c6f4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	685b      	ldr	r3, [r3, #4]
 800c6fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d00f      	beq.n	800c722 <HAL_SPI_Init+0x13e>
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	68db      	ldr	r3, [r3, #12]
 800c706:	2b06      	cmp	r3, #6
 800c708:	d90b      	bls.n	800c722 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	430a      	orrs	r2, r1
 800c71e:	601a      	str	r2, [r3, #0]
 800c720:	e007      	b.n	800c732 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	681a      	ldr	r2, [r3, #0]
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c730:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	69da      	ldr	r2, [r3, #28]
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c73a:	431a      	orrs	r2, r3
 800c73c:	68bb      	ldr	r3, [r7, #8]
 800c73e:	431a      	orrs	r2, r3
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c744:	ea42 0103 	orr.w	r1, r2, r3
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	68da      	ldr	r2, [r3, #12]
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	430a      	orrs	r2, r1
 800c752:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c75c:	431a      	orrs	r2, r3
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c762:	431a      	orrs	r2, r3
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	699b      	ldr	r3, [r3, #24]
 800c768:	431a      	orrs	r2, r3
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	691b      	ldr	r3, [r3, #16]
 800c76e:	431a      	orrs	r2, r3
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	695b      	ldr	r3, [r3, #20]
 800c774:	431a      	orrs	r2, r3
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	6a1b      	ldr	r3, [r3, #32]
 800c77a:	431a      	orrs	r2, r3
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	685b      	ldr	r3, [r3, #4]
 800c780:	431a      	orrs	r2, r3
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c786:	431a      	orrs	r2, r3
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	689b      	ldr	r3, [r3, #8]
 800c78c:	431a      	orrs	r2, r3
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c792:	ea42 0103 	orr.w	r1, r2, r3
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	430a      	orrs	r2, r1
 800c7a0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	685b      	ldr	r3, [r3, #4]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d113      	bne.n	800c7d2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	689b      	ldr	r3, [r3, #8]
 800c7b0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c7bc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	689b      	ldr	r3, [r3, #8]
 800c7c4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c7d0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	f022 0201 	bic.w	r2, r2, #1
 800c7e0:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	685b      	ldr	r3, [r3, #4]
 800c7e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d00a      	beq.n	800c804 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	68db      	ldr	r3, [r3, #12]
 800c7f4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	430a      	orrs	r2, r1
 800c802:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	2200      	movs	r2, #0
 800c808:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	2201      	movs	r2, #1
 800c810:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800c814:	2300      	movs	r3, #0
}
 800c816:	4618      	mov	r0, r3
 800c818:	3710      	adds	r7, #16
 800c81a:	46bd      	mov	sp, r7
 800c81c:	bd80      	pop	{r7, pc}
 800c81e:	bf00      	nop
 800c820:	40013000 	.word	0x40013000
 800c824:	40003800 	.word	0x40003800
 800c828:	40003c00 	.word	0x40003c00

0800c82c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800c82c:	b480      	push	{r7}
 800c82e:	b085      	sub	sp, #20
 800c830:	af00      	add	r7, sp, #0
 800c832:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c838:	095b      	lsrs	r3, r3, #5
 800c83a:	3301      	adds	r3, #1
 800c83c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	68db      	ldr	r3, [r3, #12]
 800c842:	3301      	adds	r3, #1
 800c844:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c846:	68bb      	ldr	r3, [r7, #8]
 800c848:	3307      	adds	r3, #7
 800c84a:	08db      	lsrs	r3, r3, #3
 800c84c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c84e:	68bb      	ldr	r3, [r7, #8]
 800c850:	68fa      	ldr	r2, [r7, #12]
 800c852:	fb02 f303 	mul.w	r3, r2, r3
}
 800c856:	4618      	mov	r0, r3
 800c858:	3714      	adds	r7, #20
 800c85a:	46bd      	mov	sp, r7
 800c85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c860:	4770      	bx	lr

0800c862 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c862:	b580      	push	{r7, lr}
 800c864:	b082      	sub	sp, #8
 800c866:	af00      	add	r7, sp, #0
 800c868:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d101      	bne.n	800c874 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c870:	2301      	movs	r3, #1
 800c872:	e049      	b.n	800c908 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c87a:	b2db      	uxtb	r3, r3
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d106      	bne.n	800c88e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	2200      	movs	r2, #0
 800c884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c888:	6878      	ldr	r0, [r7, #4]
 800c88a:	f7f6 f835 	bl	80028f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	2202      	movs	r2, #2
 800c892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	681a      	ldr	r2, [r3, #0]
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	3304      	adds	r3, #4
 800c89e:	4619      	mov	r1, r3
 800c8a0:	4610      	mov	r0, r2
 800c8a2:	f000 fe87 	bl	800d5b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	2201      	movs	r2, #1
 800c8aa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	2201      	movs	r2, #1
 800c8b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	2201      	movs	r2, #1
 800c8ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	2201      	movs	r2, #1
 800c8c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	2201      	movs	r2, #1
 800c8ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	2201      	movs	r2, #1
 800c8d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	2201      	movs	r2, #1
 800c8da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	2201      	movs	r2, #1
 800c8e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	2201      	movs	r2, #1
 800c8ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	2201      	movs	r2, #1
 800c8f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	2201      	movs	r2, #1
 800c8fa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	2201      	movs	r2, #1
 800c902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c906:	2300      	movs	r3, #0
}
 800c908:	4618      	mov	r0, r3
 800c90a:	3708      	adds	r7, #8
 800c90c:	46bd      	mov	sp, r7
 800c90e:	bd80      	pop	{r7, pc}

0800c910 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c910:	b480      	push	{r7}
 800c912:	b085      	sub	sp, #20
 800c914:	af00      	add	r7, sp, #0
 800c916:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c91e:	b2db      	uxtb	r3, r3
 800c920:	2b01      	cmp	r3, #1
 800c922:	d001      	beq.n	800c928 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c924:	2301      	movs	r3, #1
 800c926:	e054      	b.n	800c9d2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	2202      	movs	r2, #2
 800c92c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	68da      	ldr	r2, [r3, #12]
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	f042 0201 	orr.w	r2, r2, #1
 800c93e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	4a26      	ldr	r2, [pc, #152]	; (800c9e0 <HAL_TIM_Base_Start_IT+0xd0>)
 800c946:	4293      	cmp	r3, r2
 800c948:	d022      	beq.n	800c990 <HAL_TIM_Base_Start_IT+0x80>
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c952:	d01d      	beq.n	800c990 <HAL_TIM_Base_Start_IT+0x80>
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	4a22      	ldr	r2, [pc, #136]	; (800c9e4 <HAL_TIM_Base_Start_IT+0xd4>)
 800c95a:	4293      	cmp	r3, r2
 800c95c:	d018      	beq.n	800c990 <HAL_TIM_Base_Start_IT+0x80>
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	4a21      	ldr	r2, [pc, #132]	; (800c9e8 <HAL_TIM_Base_Start_IT+0xd8>)
 800c964:	4293      	cmp	r3, r2
 800c966:	d013      	beq.n	800c990 <HAL_TIM_Base_Start_IT+0x80>
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	4a1f      	ldr	r2, [pc, #124]	; (800c9ec <HAL_TIM_Base_Start_IT+0xdc>)
 800c96e:	4293      	cmp	r3, r2
 800c970:	d00e      	beq.n	800c990 <HAL_TIM_Base_Start_IT+0x80>
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	4a1e      	ldr	r2, [pc, #120]	; (800c9f0 <HAL_TIM_Base_Start_IT+0xe0>)
 800c978:	4293      	cmp	r3, r2
 800c97a:	d009      	beq.n	800c990 <HAL_TIM_Base_Start_IT+0x80>
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	4a1c      	ldr	r2, [pc, #112]	; (800c9f4 <HAL_TIM_Base_Start_IT+0xe4>)
 800c982:	4293      	cmp	r3, r2
 800c984:	d004      	beq.n	800c990 <HAL_TIM_Base_Start_IT+0x80>
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	4a1b      	ldr	r2, [pc, #108]	; (800c9f8 <HAL_TIM_Base_Start_IT+0xe8>)
 800c98c:	4293      	cmp	r3, r2
 800c98e:	d115      	bne.n	800c9bc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	689a      	ldr	r2, [r3, #8]
 800c996:	4b19      	ldr	r3, [pc, #100]	; (800c9fc <HAL_TIM_Base_Start_IT+0xec>)
 800c998:	4013      	ands	r3, r2
 800c99a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	2b06      	cmp	r3, #6
 800c9a0:	d015      	beq.n	800c9ce <HAL_TIM_Base_Start_IT+0xbe>
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c9a8:	d011      	beq.n	800c9ce <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	681a      	ldr	r2, [r3, #0]
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	f042 0201 	orr.w	r2, r2, #1
 800c9b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c9ba:	e008      	b.n	800c9ce <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	681a      	ldr	r2, [r3, #0]
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	f042 0201 	orr.w	r2, r2, #1
 800c9ca:	601a      	str	r2, [r3, #0]
 800c9cc:	e000      	b.n	800c9d0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c9ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c9d0:	2300      	movs	r3, #0
}
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	3714      	adds	r7, #20
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9dc:	4770      	bx	lr
 800c9de:	bf00      	nop
 800c9e0:	40010000 	.word	0x40010000
 800c9e4:	40000400 	.word	0x40000400
 800c9e8:	40000800 	.word	0x40000800
 800c9ec:	40000c00 	.word	0x40000c00
 800c9f0:	40010400 	.word	0x40010400
 800c9f4:	40001800 	.word	0x40001800
 800c9f8:	40014000 	.word	0x40014000
 800c9fc:	00010007 	.word	0x00010007

0800ca00 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b084      	sub	sp, #16
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
 800ca08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ca0e:	683b      	ldr	r3, [r7, #0]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d109      	bne.n	800ca28 <HAL_TIM_OC_Start_IT+0x28>
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ca1a:	b2db      	uxtb	r3, r3
 800ca1c:	2b01      	cmp	r3, #1
 800ca1e:	bf14      	ite	ne
 800ca20:	2301      	movne	r3, #1
 800ca22:	2300      	moveq	r3, #0
 800ca24:	b2db      	uxtb	r3, r3
 800ca26:	e03c      	b.n	800caa2 <HAL_TIM_OC_Start_IT+0xa2>
 800ca28:	683b      	ldr	r3, [r7, #0]
 800ca2a:	2b04      	cmp	r3, #4
 800ca2c:	d109      	bne.n	800ca42 <HAL_TIM_OC_Start_IT+0x42>
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ca34:	b2db      	uxtb	r3, r3
 800ca36:	2b01      	cmp	r3, #1
 800ca38:	bf14      	ite	ne
 800ca3a:	2301      	movne	r3, #1
 800ca3c:	2300      	moveq	r3, #0
 800ca3e:	b2db      	uxtb	r3, r3
 800ca40:	e02f      	b.n	800caa2 <HAL_TIM_OC_Start_IT+0xa2>
 800ca42:	683b      	ldr	r3, [r7, #0]
 800ca44:	2b08      	cmp	r3, #8
 800ca46:	d109      	bne.n	800ca5c <HAL_TIM_OC_Start_IT+0x5c>
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ca4e:	b2db      	uxtb	r3, r3
 800ca50:	2b01      	cmp	r3, #1
 800ca52:	bf14      	ite	ne
 800ca54:	2301      	movne	r3, #1
 800ca56:	2300      	moveq	r3, #0
 800ca58:	b2db      	uxtb	r3, r3
 800ca5a:	e022      	b.n	800caa2 <HAL_TIM_OC_Start_IT+0xa2>
 800ca5c:	683b      	ldr	r3, [r7, #0]
 800ca5e:	2b0c      	cmp	r3, #12
 800ca60:	d109      	bne.n	800ca76 <HAL_TIM_OC_Start_IT+0x76>
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ca68:	b2db      	uxtb	r3, r3
 800ca6a:	2b01      	cmp	r3, #1
 800ca6c:	bf14      	ite	ne
 800ca6e:	2301      	movne	r3, #1
 800ca70:	2300      	moveq	r3, #0
 800ca72:	b2db      	uxtb	r3, r3
 800ca74:	e015      	b.n	800caa2 <HAL_TIM_OC_Start_IT+0xa2>
 800ca76:	683b      	ldr	r3, [r7, #0]
 800ca78:	2b10      	cmp	r3, #16
 800ca7a:	d109      	bne.n	800ca90 <HAL_TIM_OC_Start_IT+0x90>
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ca82:	b2db      	uxtb	r3, r3
 800ca84:	2b01      	cmp	r3, #1
 800ca86:	bf14      	ite	ne
 800ca88:	2301      	movne	r3, #1
 800ca8a:	2300      	moveq	r3, #0
 800ca8c:	b2db      	uxtb	r3, r3
 800ca8e:	e008      	b.n	800caa2 <HAL_TIM_OC_Start_IT+0xa2>
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ca96:	b2db      	uxtb	r3, r3
 800ca98:	2b01      	cmp	r3, #1
 800ca9a:	bf14      	ite	ne
 800ca9c:	2301      	movne	r3, #1
 800ca9e:	2300      	moveq	r3, #0
 800caa0:	b2db      	uxtb	r3, r3
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d001      	beq.n	800caaa <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800caa6:	2301      	movs	r3, #1
 800caa8:	e0ec      	b.n	800cc84 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800caaa:	683b      	ldr	r3, [r7, #0]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d104      	bne.n	800caba <HAL_TIM_OC_Start_IT+0xba>
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	2202      	movs	r2, #2
 800cab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cab8:	e023      	b.n	800cb02 <HAL_TIM_OC_Start_IT+0x102>
 800caba:	683b      	ldr	r3, [r7, #0]
 800cabc:	2b04      	cmp	r3, #4
 800cabe:	d104      	bne.n	800caca <HAL_TIM_OC_Start_IT+0xca>
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	2202      	movs	r2, #2
 800cac4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cac8:	e01b      	b.n	800cb02 <HAL_TIM_OC_Start_IT+0x102>
 800caca:	683b      	ldr	r3, [r7, #0]
 800cacc:	2b08      	cmp	r3, #8
 800cace:	d104      	bne.n	800cada <HAL_TIM_OC_Start_IT+0xda>
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	2202      	movs	r2, #2
 800cad4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cad8:	e013      	b.n	800cb02 <HAL_TIM_OC_Start_IT+0x102>
 800cada:	683b      	ldr	r3, [r7, #0]
 800cadc:	2b0c      	cmp	r3, #12
 800cade:	d104      	bne.n	800caea <HAL_TIM_OC_Start_IT+0xea>
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	2202      	movs	r2, #2
 800cae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cae8:	e00b      	b.n	800cb02 <HAL_TIM_OC_Start_IT+0x102>
 800caea:	683b      	ldr	r3, [r7, #0]
 800caec:	2b10      	cmp	r3, #16
 800caee:	d104      	bne.n	800cafa <HAL_TIM_OC_Start_IT+0xfa>
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	2202      	movs	r2, #2
 800caf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800caf8:	e003      	b.n	800cb02 <HAL_TIM_OC_Start_IT+0x102>
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	2202      	movs	r2, #2
 800cafe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800cb02:	683b      	ldr	r3, [r7, #0]
 800cb04:	2b0c      	cmp	r3, #12
 800cb06:	d841      	bhi.n	800cb8c <HAL_TIM_OC_Start_IT+0x18c>
 800cb08:	a201      	add	r2, pc, #4	; (adr r2, 800cb10 <HAL_TIM_OC_Start_IT+0x110>)
 800cb0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb0e:	bf00      	nop
 800cb10:	0800cb45 	.word	0x0800cb45
 800cb14:	0800cb8d 	.word	0x0800cb8d
 800cb18:	0800cb8d 	.word	0x0800cb8d
 800cb1c:	0800cb8d 	.word	0x0800cb8d
 800cb20:	0800cb57 	.word	0x0800cb57
 800cb24:	0800cb8d 	.word	0x0800cb8d
 800cb28:	0800cb8d 	.word	0x0800cb8d
 800cb2c:	0800cb8d 	.word	0x0800cb8d
 800cb30:	0800cb69 	.word	0x0800cb69
 800cb34:	0800cb8d 	.word	0x0800cb8d
 800cb38:	0800cb8d 	.word	0x0800cb8d
 800cb3c:	0800cb8d 	.word	0x0800cb8d
 800cb40:	0800cb7b 	.word	0x0800cb7b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	68da      	ldr	r2, [r3, #12]
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	f042 0202 	orr.w	r2, r2, #2
 800cb52:	60da      	str	r2, [r3, #12]
      break;
 800cb54:	e01d      	b.n	800cb92 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	68da      	ldr	r2, [r3, #12]
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	f042 0204 	orr.w	r2, r2, #4
 800cb64:	60da      	str	r2, [r3, #12]
      break;
 800cb66:	e014      	b.n	800cb92 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	68da      	ldr	r2, [r3, #12]
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	f042 0208 	orr.w	r2, r2, #8
 800cb76:	60da      	str	r2, [r3, #12]
      break;
 800cb78:	e00b      	b.n	800cb92 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	68da      	ldr	r2, [r3, #12]
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	f042 0210 	orr.w	r2, r2, #16
 800cb88:	60da      	str	r2, [r3, #12]
      break;
 800cb8a:	e002      	b.n	800cb92 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800cb8c:	2301      	movs	r3, #1
 800cb8e:	73fb      	strb	r3, [r7, #15]
      break;
 800cb90:	bf00      	nop
  }

  if (status == HAL_OK)
 800cb92:	7bfb      	ldrb	r3, [r7, #15]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d174      	bne.n	800cc82 <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	2201      	movs	r2, #1
 800cb9e:	6839      	ldr	r1, [r7, #0]
 800cba0:	4618      	mov	r0, r3
 800cba2:	f001 f921 	bl	800dde8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	4a38      	ldr	r2, [pc, #224]	; (800cc8c <HAL_TIM_OC_Start_IT+0x28c>)
 800cbac:	4293      	cmp	r3, r2
 800cbae:	d013      	beq.n	800cbd8 <HAL_TIM_OC_Start_IT+0x1d8>
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	4a36      	ldr	r2, [pc, #216]	; (800cc90 <HAL_TIM_OC_Start_IT+0x290>)
 800cbb6:	4293      	cmp	r3, r2
 800cbb8:	d00e      	beq.n	800cbd8 <HAL_TIM_OC_Start_IT+0x1d8>
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	4a35      	ldr	r2, [pc, #212]	; (800cc94 <HAL_TIM_OC_Start_IT+0x294>)
 800cbc0:	4293      	cmp	r3, r2
 800cbc2:	d009      	beq.n	800cbd8 <HAL_TIM_OC_Start_IT+0x1d8>
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	4a33      	ldr	r2, [pc, #204]	; (800cc98 <HAL_TIM_OC_Start_IT+0x298>)
 800cbca:	4293      	cmp	r3, r2
 800cbcc:	d004      	beq.n	800cbd8 <HAL_TIM_OC_Start_IT+0x1d8>
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	4a32      	ldr	r2, [pc, #200]	; (800cc9c <HAL_TIM_OC_Start_IT+0x29c>)
 800cbd4:	4293      	cmp	r3, r2
 800cbd6:	d101      	bne.n	800cbdc <HAL_TIM_OC_Start_IT+0x1dc>
 800cbd8:	2301      	movs	r3, #1
 800cbda:	e000      	b.n	800cbde <HAL_TIM_OC_Start_IT+0x1de>
 800cbdc:	2300      	movs	r3, #0
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d007      	beq.n	800cbf2 <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cbf0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	4a25      	ldr	r2, [pc, #148]	; (800cc8c <HAL_TIM_OC_Start_IT+0x28c>)
 800cbf8:	4293      	cmp	r3, r2
 800cbfa:	d022      	beq.n	800cc42 <HAL_TIM_OC_Start_IT+0x242>
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc04:	d01d      	beq.n	800cc42 <HAL_TIM_OC_Start_IT+0x242>
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	4a25      	ldr	r2, [pc, #148]	; (800cca0 <HAL_TIM_OC_Start_IT+0x2a0>)
 800cc0c:	4293      	cmp	r3, r2
 800cc0e:	d018      	beq.n	800cc42 <HAL_TIM_OC_Start_IT+0x242>
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	4a23      	ldr	r2, [pc, #140]	; (800cca4 <HAL_TIM_OC_Start_IT+0x2a4>)
 800cc16:	4293      	cmp	r3, r2
 800cc18:	d013      	beq.n	800cc42 <HAL_TIM_OC_Start_IT+0x242>
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	4a22      	ldr	r2, [pc, #136]	; (800cca8 <HAL_TIM_OC_Start_IT+0x2a8>)
 800cc20:	4293      	cmp	r3, r2
 800cc22:	d00e      	beq.n	800cc42 <HAL_TIM_OC_Start_IT+0x242>
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	4a19      	ldr	r2, [pc, #100]	; (800cc90 <HAL_TIM_OC_Start_IT+0x290>)
 800cc2a:	4293      	cmp	r3, r2
 800cc2c:	d009      	beq.n	800cc42 <HAL_TIM_OC_Start_IT+0x242>
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	4a1e      	ldr	r2, [pc, #120]	; (800ccac <HAL_TIM_OC_Start_IT+0x2ac>)
 800cc34:	4293      	cmp	r3, r2
 800cc36:	d004      	beq.n	800cc42 <HAL_TIM_OC_Start_IT+0x242>
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	4a15      	ldr	r2, [pc, #84]	; (800cc94 <HAL_TIM_OC_Start_IT+0x294>)
 800cc3e:	4293      	cmp	r3, r2
 800cc40:	d115      	bne.n	800cc6e <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	689a      	ldr	r2, [r3, #8]
 800cc48:	4b19      	ldr	r3, [pc, #100]	; (800ccb0 <HAL_TIM_OC_Start_IT+0x2b0>)
 800cc4a:	4013      	ands	r3, r2
 800cc4c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cc4e:	68bb      	ldr	r3, [r7, #8]
 800cc50:	2b06      	cmp	r3, #6
 800cc52:	d015      	beq.n	800cc80 <HAL_TIM_OC_Start_IT+0x280>
 800cc54:	68bb      	ldr	r3, [r7, #8]
 800cc56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc5a:	d011      	beq.n	800cc80 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	681a      	ldr	r2, [r3, #0]
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	f042 0201 	orr.w	r2, r2, #1
 800cc6a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cc6c:	e008      	b.n	800cc80 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	681a      	ldr	r2, [r3, #0]
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	f042 0201 	orr.w	r2, r2, #1
 800cc7c:	601a      	str	r2, [r3, #0]
 800cc7e:	e000      	b.n	800cc82 <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cc80:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800cc82:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc84:	4618      	mov	r0, r3
 800cc86:	3710      	adds	r7, #16
 800cc88:	46bd      	mov	sp, r7
 800cc8a:	bd80      	pop	{r7, pc}
 800cc8c:	40010000 	.word	0x40010000
 800cc90:	40010400 	.word	0x40010400
 800cc94:	40014000 	.word	0x40014000
 800cc98:	40014400 	.word	0x40014400
 800cc9c:	40014800 	.word	0x40014800
 800cca0:	40000400 	.word	0x40000400
 800cca4:	40000800 	.word	0x40000800
 800cca8:	40000c00 	.word	0x40000c00
 800ccac:	40001800 	.word	0x40001800
 800ccb0:	00010007 	.word	0x00010007

0800ccb4 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	b084      	sub	sp, #16
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	6078      	str	r0, [r7, #4]
 800ccbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800ccc2:	683b      	ldr	r3, [r7, #0]
 800ccc4:	2b0c      	cmp	r3, #12
 800ccc6:	d841      	bhi.n	800cd4c <HAL_TIM_OC_Stop_IT+0x98>
 800ccc8:	a201      	add	r2, pc, #4	; (adr r2, 800ccd0 <HAL_TIM_OC_Stop_IT+0x1c>)
 800ccca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccce:	bf00      	nop
 800ccd0:	0800cd05 	.word	0x0800cd05
 800ccd4:	0800cd4d 	.word	0x0800cd4d
 800ccd8:	0800cd4d 	.word	0x0800cd4d
 800ccdc:	0800cd4d 	.word	0x0800cd4d
 800cce0:	0800cd17 	.word	0x0800cd17
 800cce4:	0800cd4d 	.word	0x0800cd4d
 800cce8:	0800cd4d 	.word	0x0800cd4d
 800ccec:	0800cd4d 	.word	0x0800cd4d
 800ccf0:	0800cd29 	.word	0x0800cd29
 800ccf4:	0800cd4d 	.word	0x0800cd4d
 800ccf8:	0800cd4d 	.word	0x0800cd4d
 800ccfc:	0800cd4d 	.word	0x0800cd4d
 800cd00:	0800cd3b 	.word	0x0800cd3b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	68da      	ldr	r2, [r3, #12]
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	f022 0202 	bic.w	r2, r2, #2
 800cd12:	60da      	str	r2, [r3, #12]
      break;
 800cd14:	e01d      	b.n	800cd52 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	68da      	ldr	r2, [r3, #12]
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	f022 0204 	bic.w	r2, r2, #4
 800cd24:	60da      	str	r2, [r3, #12]
      break;
 800cd26:	e014      	b.n	800cd52 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	68da      	ldr	r2, [r3, #12]
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	f022 0208 	bic.w	r2, r2, #8
 800cd36:	60da      	str	r2, [r3, #12]
      break;
 800cd38:	e00b      	b.n	800cd52 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	68da      	ldr	r2, [r3, #12]
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	f022 0210 	bic.w	r2, r2, #16
 800cd48:	60da      	str	r2, [r3, #12]
      break;
 800cd4a:	e002      	b.n	800cd52 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800cd4c:	2301      	movs	r3, #1
 800cd4e:	73fb      	strb	r3, [r7, #15]
      break;
 800cd50:	bf00      	nop
  }

  if (status == HAL_OK)
 800cd52:	7bfb      	ldrb	r3, [r7, #15]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	f040 8081 	bne.w	800ce5c <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	2200      	movs	r2, #0
 800cd60:	6839      	ldr	r1, [r7, #0]
 800cd62:	4618      	mov	r0, r3
 800cd64:	f001 f840 	bl	800dde8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	4a3e      	ldr	r2, [pc, #248]	; (800ce68 <HAL_TIM_OC_Stop_IT+0x1b4>)
 800cd6e:	4293      	cmp	r3, r2
 800cd70:	d013      	beq.n	800cd9a <HAL_TIM_OC_Stop_IT+0xe6>
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	4a3d      	ldr	r2, [pc, #244]	; (800ce6c <HAL_TIM_OC_Stop_IT+0x1b8>)
 800cd78:	4293      	cmp	r3, r2
 800cd7a:	d00e      	beq.n	800cd9a <HAL_TIM_OC_Stop_IT+0xe6>
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	4a3b      	ldr	r2, [pc, #236]	; (800ce70 <HAL_TIM_OC_Stop_IT+0x1bc>)
 800cd82:	4293      	cmp	r3, r2
 800cd84:	d009      	beq.n	800cd9a <HAL_TIM_OC_Stop_IT+0xe6>
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	4a3a      	ldr	r2, [pc, #232]	; (800ce74 <HAL_TIM_OC_Stop_IT+0x1c0>)
 800cd8c:	4293      	cmp	r3, r2
 800cd8e:	d004      	beq.n	800cd9a <HAL_TIM_OC_Stop_IT+0xe6>
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	4a38      	ldr	r2, [pc, #224]	; (800ce78 <HAL_TIM_OC_Stop_IT+0x1c4>)
 800cd96:	4293      	cmp	r3, r2
 800cd98:	d101      	bne.n	800cd9e <HAL_TIM_OC_Stop_IT+0xea>
 800cd9a:	2301      	movs	r3, #1
 800cd9c:	e000      	b.n	800cda0 <HAL_TIM_OC_Stop_IT+0xec>
 800cd9e:	2300      	movs	r3, #0
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d017      	beq.n	800cdd4 <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	6a1a      	ldr	r2, [r3, #32]
 800cdaa:	f241 1311 	movw	r3, #4369	; 0x1111
 800cdae:	4013      	ands	r3, r2
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d10f      	bne.n	800cdd4 <HAL_TIM_OC_Stop_IT+0x120>
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	6a1a      	ldr	r2, [r3, #32]
 800cdba:	f240 4344 	movw	r3, #1092	; 0x444
 800cdbe:	4013      	ands	r3, r2
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d107      	bne.n	800cdd4 <HAL_TIM_OC_Stop_IT+0x120>
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800cdd2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	6a1a      	ldr	r2, [r3, #32]
 800cdda:	f241 1311 	movw	r3, #4369	; 0x1111
 800cdde:	4013      	ands	r3, r2
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d10f      	bne.n	800ce04 <HAL_TIM_OC_Stop_IT+0x150>
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	6a1a      	ldr	r2, [r3, #32]
 800cdea:	f240 4344 	movw	r3, #1092	; 0x444
 800cdee:	4013      	ands	r3, r2
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d107      	bne.n	800ce04 <HAL_TIM_OC_Stop_IT+0x150>
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	681a      	ldr	r2, [r3, #0]
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	f022 0201 	bic.w	r2, r2, #1
 800ce02:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800ce04:	683b      	ldr	r3, [r7, #0]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d104      	bne.n	800ce14 <HAL_TIM_OC_Stop_IT+0x160>
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	2201      	movs	r2, #1
 800ce0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ce12:	e023      	b.n	800ce5c <HAL_TIM_OC_Stop_IT+0x1a8>
 800ce14:	683b      	ldr	r3, [r7, #0]
 800ce16:	2b04      	cmp	r3, #4
 800ce18:	d104      	bne.n	800ce24 <HAL_TIM_OC_Stop_IT+0x170>
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	2201      	movs	r2, #1
 800ce1e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ce22:	e01b      	b.n	800ce5c <HAL_TIM_OC_Stop_IT+0x1a8>
 800ce24:	683b      	ldr	r3, [r7, #0]
 800ce26:	2b08      	cmp	r3, #8
 800ce28:	d104      	bne.n	800ce34 <HAL_TIM_OC_Stop_IT+0x180>
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	2201      	movs	r2, #1
 800ce2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ce32:	e013      	b.n	800ce5c <HAL_TIM_OC_Stop_IT+0x1a8>
 800ce34:	683b      	ldr	r3, [r7, #0]
 800ce36:	2b0c      	cmp	r3, #12
 800ce38:	d104      	bne.n	800ce44 <HAL_TIM_OC_Stop_IT+0x190>
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	2201      	movs	r2, #1
 800ce3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ce42:	e00b      	b.n	800ce5c <HAL_TIM_OC_Stop_IT+0x1a8>
 800ce44:	683b      	ldr	r3, [r7, #0]
 800ce46:	2b10      	cmp	r3, #16
 800ce48:	d104      	bne.n	800ce54 <HAL_TIM_OC_Stop_IT+0x1a0>
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	2201      	movs	r2, #1
 800ce4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ce52:	e003      	b.n	800ce5c <HAL_TIM_OC_Stop_IT+0x1a8>
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	2201      	movs	r2, #1
 800ce58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800ce5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce5e:	4618      	mov	r0, r3
 800ce60:	3710      	adds	r7, #16
 800ce62:	46bd      	mov	sp, r7
 800ce64:	bd80      	pop	{r7, pc}
 800ce66:	bf00      	nop
 800ce68:	40010000 	.word	0x40010000
 800ce6c:	40010400 	.word	0x40010400
 800ce70:	40014000 	.word	0x40014000
 800ce74:	40014400 	.word	0x40014400
 800ce78:	40014800 	.word	0x40014800

0800ce7c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b082      	sub	sp, #8
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d101      	bne.n	800ce8e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ce8a:	2301      	movs	r3, #1
 800ce8c:	e049      	b.n	800cf22 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ce94:	b2db      	uxtb	r3, r3
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d106      	bne.n	800cea8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	2200      	movs	r2, #0
 800ce9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800cea2:	6878      	ldr	r0, [r7, #4]
 800cea4:	f000 f841 	bl	800cf2a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	2202      	movs	r2, #2
 800ceac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	681a      	ldr	r2, [r3, #0]
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	3304      	adds	r3, #4
 800ceb8:	4619      	mov	r1, r3
 800ceba:	4610      	mov	r0, r2
 800cebc:	f000 fb7a 	bl	800d5b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	2201      	movs	r2, #1
 800cec4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	2201      	movs	r2, #1
 800cecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	2201      	movs	r2, #1
 800ced4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	2201      	movs	r2, #1
 800cedc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	2201      	movs	r2, #1
 800cee4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	2201      	movs	r2, #1
 800ceec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	2201      	movs	r2, #1
 800cef4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	2201      	movs	r2, #1
 800cefc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	2201      	movs	r2, #1
 800cf04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	2201      	movs	r2, #1
 800cf0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	2201      	movs	r2, #1
 800cf14:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	2201      	movs	r2, #1
 800cf1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cf20:	2300      	movs	r3, #0
}
 800cf22:	4618      	mov	r0, r3
 800cf24:	3708      	adds	r7, #8
 800cf26:	46bd      	mov	sp, r7
 800cf28:	bd80      	pop	{r7, pc}

0800cf2a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800cf2a:	b480      	push	{r7}
 800cf2c:	b083      	sub	sp, #12
 800cf2e:	af00      	add	r7, sp, #0
 800cf30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800cf32:	bf00      	nop
 800cf34:	370c      	adds	r7, #12
 800cf36:	46bd      	mov	sp, r7
 800cf38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf3c:	4770      	bx	lr

0800cf3e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800cf3e:	b580      	push	{r7, lr}
 800cf40:	b084      	sub	sp, #16
 800cf42:	af00      	add	r7, sp, #0
 800cf44:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	68db      	ldr	r3, [r3, #12]
 800cf4c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	691b      	ldr	r3, [r3, #16]
 800cf54:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800cf56:	68bb      	ldr	r3, [r7, #8]
 800cf58:	f003 0302 	and.w	r3, r3, #2
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d020      	beq.n	800cfa2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	f003 0302 	and.w	r3, r3, #2
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d01b      	beq.n	800cfa2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	f06f 0202 	mvn.w	r2, #2
 800cf72:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	2201      	movs	r2, #1
 800cf78:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	699b      	ldr	r3, [r3, #24]
 800cf80:	f003 0303 	and.w	r3, r3, #3
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d003      	beq.n	800cf90 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800cf88:	6878      	ldr	r0, [r7, #4]
 800cf8a:	f000 faf5 	bl	800d578 <HAL_TIM_IC_CaptureCallback>
 800cf8e:	e005      	b.n	800cf9c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cf90:	6878      	ldr	r0, [r7, #4]
 800cf92:	f000 fae7 	bl	800d564 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cf96:	6878      	ldr	r0, [r7, #4]
 800cf98:	f000 faf8 	bl	800d58c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800cfa2:	68bb      	ldr	r3, [r7, #8]
 800cfa4:	f003 0304 	and.w	r3, r3, #4
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d020      	beq.n	800cfee <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	f003 0304 	and.w	r3, r3, #4
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d01b      	beq.n	800cfee <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	f06f 0204 	mvn.w	r2, #4
 800cfbe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	2202      	movs	r2, #2
 800cfc4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	699b      	ldr	r3, [r3, #24]
 800cfcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d003      	beq.n	800cfdc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cfd4:	6878      	ldr	r0, [r7, #4]
 800cfd6:	f000 facf 	bl	800d578 <HAL_TIM_IC_CaptureCallback>
 800cfda:	e005      	b.n	800cfe8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cfdc:	6878      	ldr	r0, [r7, #4]
 800cfde:	f000 fac1 	bl	800d564 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cfe2:	6878      	ldr	r0, [r7, #4]
 800cfe4:	f000 fad2 	bl	800d58c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	2200      	movs	r2, #0
 800cfec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800cfee:	68bb      	ldr	r3, [r7, #8]
 800cff0:	f003 0308 	and.w	r3, r3, #8
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d020      	beq.n	800d03a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	f003 0308 	and.w	r3, r3, #8
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d01b      	beq.n	800d03a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	f06f 0208 	mvn.w	r2, #8
 800d00a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	2204      	movs	r2, #4
 800d010:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	69db      	ldr	r3, [r3, #28]
 800d018:	f003 0303 	and.w	r3, r3, #3
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d003      	beq.n	800d028 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d020:	6878      	ldr	r0, [r7, #4]
 800d022:	f000 faa9 	bl	800d578 <HAL_TIM_IC_CaptureCallback>
 800d026:	e005      	b.n	800d034 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d028:	6878      	ldr	r0, [r7, #4]
 800d02a:	f000 fa9b 	bl	800d564 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d02e:	6878      	ldr	r0, [r7, #4]
 800d030:	f000 faac 	bl	800d58c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	2200      	movs	r2, #0
 800d038:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d03a:	68bb      	ldr	r3, [r7, #8]
 800d03c:	f003 0310 	and.w	r3, r3, #16
 800d040:	2b00      	cmp	r3, #0
 800d042:	d020      	beq.n	800d086 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	f003 0310 	and.w	r3, r3, #16
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d01b      	beq.n	800d086 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	f06f 0210 	mvn.w	r2, #16
 800d056:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	2208      	movs	r2, #8
 800d05c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	69db      	ldr	r3, [r3, #28]
 800d064:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d003      	beq.n	800d074 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d06c:	6878      	ldr	r0, [r7, #4]
 800d06e:	f000 fa83 	bl	800d578 <HAL_TIM_IC_CaptureCallback>
 800d072:	e005      	b.n	800d080 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d074:	6878      	ldr	r0, [r7, #4]
 800d076:	f000 fa75 	bl	800d564 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d07a:	6878      	ldr	r0, [r7, #4]
 800d07c:	f000 fa86 	bl	800d58c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	2200      	movs	r2, #0
 800d084:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d086:	68bb      	ldr	r3, [r7, #8]
 800d088:	f003 0301 	and.w	r3, r3, #1
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d00c      	beq.n	800d0aa <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	f003 0301 	and.w	r3, r3, #1
 800d096:	2b00      	cmp	r3, #0
 800d098:	d007      	beq.n	800d0aa <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	f06f 0201 	mvn.w	r2, #1
 800d0a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d0a4:	6878      	ldr	r0, [r7, #4]
 800d0a6:	f7f4 fdef 	bl	8001c88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d0aa:	68bb      	ldr	r3, [r7, #8]
 800d0ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d104      	bne.n	800d0be <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800d0b4:	68bb      	ldr	r3, [r7, #8]
 800d0b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d00c      	beq.n	800d0d8 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d007      	beq.n	800d0d8 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800d0d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d0d2:	6878      	ldr	r0, [r7, #4]
 800d0d4:	f000 ffc4 	bl	800e060 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800d0d8:	68bb      	ldr	r3, [r7, #8]
 800d0da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d00c      	beq.n	800d0fc <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d007      	beq.n	800d0fc <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d0f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d0f6:	6878      	ldr	r0, [r7, #4]
 800d0f8:	f000 ffbc 	bl	800e074 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d0fc:	68bb      	ldr	r3, [r7, #8]
 800d0fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d102:	2b00      	cmp	r3, #0
 800d104:	d00c      	beq.n	800d120 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d007      	beq.n	800d120 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d118:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d11a:	6878      	ldr	r0, [r7, #4]
 800d11c:	f000 fa40 	bl	800d5a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d120:	68bb      	ldr	r3, [r7, #8]
 800d122:	f003 0320 	and.w	r3, r3, #32
 800d126:	2b00      	cmp	r3, #0
 800d128:	d00c      	beq.n	800d144 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	f003 0320 	and.w	r3, r3, #32
 800d130:	2b00      	cmp	r3, #0
 800d132:	d007      	beq.n	800d144 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	f06f 0220 	mvn.w	r2, #32
 800d13c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d13e:	6878      	ldr	r0, [r7, #4]
 800d140:	f000 ff84 	bl	800e04c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d144:	bf00      	nop
 800d146:	3710      	adds	r7, #16
 800d148:	46bd      	mov	sp, r7
 800d14a:	bd80      	pop	{r7, pc}

0800d14c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b086      	sub	sp, #24
 800d150:	af00      	add	r7, sp, #0
 800d152:	60f8      	str	r0, [r7, #12]
 800d154:	60b9      	str	r1, [r7, #8]
 800d156:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d158:	2300      	movs	r3, #0
 800d15a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d162:	2b01      	cmp	r3, #1
 800d164:	d101      	bne.n	800d16a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d166:	2302      	movs	r3, #2
 800d168:	e0ff      	b.n	800d36a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	2201      	movs	r2, #1
 800d16e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	2b14      	cmp	r3, #20
 800d176:	f200 80f0 	bhi.w	800d35a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800d17a:	a201      	add	r2, pc, #4	; (adr r2, 800d180 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d17c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d180:	0800d1d5 	.word	0x0800d1d5
 800d184:	0800d35b 	.word	0x0800d35b
 800d188:	0800d35b 	.word	0x0800d35b
 800d18c:	0800d35b 	.word	0x0800d35b
 800d190:	0800d215 	.word	0x0800d215
 800d194:	0800d35b 	.word	0x0800d35b
 800d198:	0800d35b 	.word	0x0800d35b
 800d19c:	0800d35b 	.word	0x0800d35b
 800d1a0:	0800d257 	.word	0x0800d257
 800d1a4:	0800d35b 	.word	0x0800d35b
 800d1a8:	0800d35b 	.word	0x0800d35b
 800d1ac:	0800d35b 	.word	0x0800d35b
 800d1b0:	0800d297 	.word	0x0800d297
 800d1b4:	0800d35b 	.word	0x0800d35b
 800d1b8:	0800d35b 	.word	0x0800d35b
 800d1bc:	0800d35b 	.word	0x0800d35b
 800d1c0:	0800d2d9 	.word	0x0800d2d9
 800d1c4:	0800d35b 	.word	0x0800d35b
 800d1c8:	0800d35b 	.word	0x0800d35b
 800d1cc:	0800d35b 	.word	0x0800d35b
 800d1d0:	0800d319 	.word	0x0800d319
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	68b9      	ldr	r1, [r7, #8]
 800d1da:	4618      	mov	r0, r3
 800d1dc:	f000 fa90 	bl	800d700 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	699a      	ldr	r2, [r3, #24]
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	f042 0208 	orr.w	r2, r2, #8
 800d1ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	699a      	ldr	r2, [r3, #24]
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	f022 0204 	bic.w	r2, r2, #4
 800d1fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	6999      	ldr	r1, [r3, #24]
 800d206:	68bb      	ldr	r3, [r7, #8]
 800d208:	691a      	ldr	r2, [r3, #16]
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	430a      	orrs	r2, r1
 800d210:	619a      	str	r2, [r3, #24]
      break;
 800d212:	e0a5      	b.n	800d360 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	68b9      	ldr	r1, [r7, #8]
 800d21a:	4618      	mov	r0, r3
 800d21c:	f000 fb00 	bl	800d820 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	699a      	ldr	r2, [r3, #24]
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d22e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	699a      	ldr	r2, [r3, #24]
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d23e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	6999      	ldr	r1, [r3, #24]
 800d246:	68bb      	ldr	r3, [r7, #8]
 800d248:	691b      	ldr	r3, [r3, #16]
 800d24a:	021a      	lsls	r2, r3, #8
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	430a      	orrs	r2, r1
 800d252:	619a      	str	r2, [r3, #24]
      break;
 800d254:	e084      	b.n	800d360 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	68b9      	ldr	r1, [r7, #8]
 800d25c:	4618      	mov	r0, r3
 800d25e:	f000 fb69 	bl	800d934 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	69da      	ldr	r2, [r3, #28]
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	f042 0208 	orr.w	r2, r2, #8
 800d270:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	69da      	ldr	r2, [r3, #28]
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	f022 0204 	bic.w	r2, r2, #4
 800d280:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	69d9      	ldr	r1, [r3, #28]
 800d288:	68bb      	ldr	r3, [r7, #8]
 800d28a:	691a      	ldr	r2, [r3, #16]
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	430a      	orrs	r2, r1
 800d292:	61da      	str	r2, [r3, #28]
      break;
 800d294:	e064      	b.n	800d360 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	68b9      	ldr	r1, [r7, #8]
 800d29c:	4618      	mov	r0, r3
 800d29e:	f000 fbd1 	bl	800da44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	69da      	ldr	r2, [r3, #28]
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d2b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	69da      	ldr	r2, [r3, #28]
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d2c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	69d9      	ldr	r1, [r3, #28]
 800d2c8:	68bb      	ldr	r3, [r7, #8]
 800d2ca:	691b      	ldr	r3, [r3, #16]
 800d2cc:	021a      	lsls	r2, r3, #8
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	430a      	orrs	r2, r1
 800d2d4:	61da      	str	r2, [r3, #28]
      break;
 800d2d6:	e043      	b.n	800d360 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	68b9      	ldr	r1, [r7, #8]
 800d2de:	4618      	mov	r0, r3
 800d2e0:	f000 fc1a 	bl	800db18 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	f042 0208 	orr.w	r2, r2, #8
 800d2f2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	f022 0204 	bic.w	r2, r2, #4
 800d302:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d30a:	68bb      	ldr	r3, [r7, #8]
 800d30c:	691a      	ldr	r2, [r3, #16]
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	430a      	orrs	r2, r1
 800d314:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d316:	e023      	b.n	800d360 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	68b9      	ldr	r1, [r7, #8]
 800d31e:	4618      	mov	r0, r3
 800d320:	f000 fc5e 	bl	800dbe0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d332:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d342:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d34a:	68bb      	ldr	r3, [r7, #8]
 800d34c:	691b      	ldr	r3, [r3, #16]
 800d34e:	021a      	lsls	r2, r3, #8
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	430a      	orrs	r2, r1
 800d356:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d358:	e002      	b.n	800d360 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800d35a:	2301      	movs	r3, #1
 800d35c:	75fb      	strb	r3, [r7, #23]
      break;
 800d35e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	2200      	movs	r2, #0
 800d364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d368:	7dfb      	ldrb	r3, [r7, #23]
}
 800d36a:	4618      	mov	r0, r3
 800d36c:	3718      	adds	r7, #24
 800d36e:	46bd      	mov	sp, r7
 800d370:	bd80      	pop	{r7, pc}
 800d372:	bf00      	nop

0800d374 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d374:	b580      	push	{r7, lr}
 800d376:	b084      	sub	sp, #16
 800d378:	af00      	add	r7, sp, #0
 800d37a:	6078      	str	r0, [r7, #4]
 800d37c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d37e:	2300      	movs	r3, #0
 800d380:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d388:	2b01      	cmp	r3, #1
 800d38a:	d101      	bne.n	800d390 <HAL_TIM_ConfigClockSource+0x1c>
 800d38c:	2302      	movs	r3, #2
 800d38e:	e0dc      	b.n	800d54a <HAL_TIM_ConfigClockSource+0x1d6>
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	2201      	movs	r2, #1
 800d394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	2202      	movs	r2, #2
 800d39c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	689b      	ldr	r3, [r3, #8]
 800d3a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d3a8:	68ba      	ldr	r2, [r7, #8]
 800d3aa:	4b6a      	ldr	r3, [pc, #424]	; (800d554 <HAL_TIM_ConfigClockSource+0x1e0>)
 800d3ac:	4013      	ands	r3, r2
 800d3ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d3b0:	68bb      	ldr	r3, [r7, #8]
 800d3b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d3b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	68ba      	ldr	r2, [r7, #8]
 800d3be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d3c0:	683b      	ldr	r3, [r7, #0]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	4a64      	ldr	r2, [pc, #400]	; (800d558 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d3c6:	4293      	cmp	r3, r2
 800d3c8:	f000 80a9 	beq.w	800d51e <HAL_TIM_ConfigClockSource+0x1aa>
 800d3cc:	4a62      	ldr	r2, [pc, #392]	; (800d558 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d3ce:	4293      	cmp	r3, r2
 800d3d0:	f200 80ae 	bhi.w	800d530 <HAL_TIM_ConfigClockSource+0x1bc>
 800d3d4:	4a61      	ldr	r2, [pc, #388]	; (800d55c <HAL_TIM_ConfigClockSource+0x1e8>)
 800d3d6:	4293      	cmp	r3, r2
 800d3d8:	f000 80a1 	beq.w	800d51e <HAL_TIM_ConfigClockSource+0x1aa>
 800d3dc:	4a5f      	ldr	r2, [pc, #380]	; (800d55c <HAL_TIM_ConfigClockSource+0x1e8>)
 800d3de:	4293      	cmp	r3, r2
 800d3e0:	f200 80a6 	bhi.w	800d530 <HAL_TIM_ConfigClockSource+0x1bc>
 800d3e4:	4a5e      	ldr	r2, [pc, #376]	; (800d560 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d3e6:	4293      	cmp	r3, r2
 800d3e8:	f000 8099 	beq.w	800d51e <HAL_TIM_ConfigClockSource+0x1aa>
 800d3ec:	4a5c      	ldr	r2, [pc, #368]	; (800d560 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d3ee:	4293      	cmp	r3, r2
 800d3f0:	f200 809e 	bhi.w	800d530 <HAL_TIM_ConfigClockSource+0x1bc>
 800d3f4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d3f8:	f000 8091 	beq.w	800d51e <HAL_TIM_ConfigClockSource+0x1aa>
 800d3fc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d400:	f200 8096 	bhi.w	800d530 <HAL_TIM_ConfigClockSource+0x1bc>
 800d404:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d408:	f000 8089 	beq.w	800d51e <HAL_TIM_ConfigClockSource+0x1aa>
 800d40c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d410:	f200 808e 	bhi.w	800d530 <HAL_TIM_ConfigClockSource+0x1bc>
 800d414:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d418:	d03e      	beq.n	800d498 <HAL_TIM_ConfigClockSource+0x124>
 800d41a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d41e:	f200 8087 	bhi.w	800d530 <HAL_TIM_ConfigClockSource+0x1bc>
 800d422:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d426:	f000 8086 	beq.w	800d536 <HAL_TIM_ConfigClockSource+0x1c2>
 800d42a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d42e:	d87f      	bhi.n	800d530 <HAL_TIM_ConfigClockSource+0x1bc>
 800d430:	2b70      	cmp	r3, #112	; 0x70
 800d432:	d01a      	beq.n	800d46a <HAL_TIM_ConfigClockSource+0xf6>
 800d434:	2b70      	cmp	r3, #112	; 0x70
 800d436:	d87b      	bhi.n	800d530 <HAL_TIM_ConfigClockSource+0x1bc>
 800d438:	2b60      	cmp	r3, #96	; 0x60
 800d43a:	d050      	beq.n	800d4de <HAL_TIM_ConfigClockSource+0x16a>
 800d43c:	2b60      	cmp	r3, #96	; 0x60
 800d43e:	d877      	bhi.n	800d530 <HAL_TIM_ConfigClockSource+0x1bc>
 800d440:	2b50      	cmp	r3, #80	; 0x50
 800d442:	d03c      	beq.n	800d4be <HAL_TIM_ConfigClockSource+0x14a>
 800d444:	2b50      	cmp	r3, #80	; 0x50
 800d446:	d873      	bhi.n	800d530 <HAL_TIM_ConfigClockSource+0x1bc>
 800d448:	2b40      	cmp	r3, #64	; 0x40
 800d44a:	d058      	beq.n	800d4fe <HAL_TIM_ConfigClockSource+0x18a>
 800d44c:	2b40      	cmp	r3, #64	; 0x40
 800d44e:	d86f      	bhi.n	800d530 <HAL_TIM_ConfigClockSource+0x1bc>
 800d450:	2b30      	cmp	r3, #48	; 0x30
 800d452:	d064      	beq.n	800d51e <HAL_TIM_ConfigClockSource+0x1aa>
 800d454:	2b30      	cmp	r3, #48	; 0x30
 800d456:	d86b      	bhi.n	800d530 <HAL_TIM_ConfigClockSource+0x1bc>
 800d458:	2b20      	cmp	r3, #32
 800d45a:	d060      	beq.n	800d51e <HAL_TIM_ConfigClockSource+0x1aa>
 800d45c:	2b20      	cmp	r3, #32
 800d45e:	d867      	bhi.n	800d530 <HAL_TIM_ConfigClockSource+0x1bc>
 800d460:	2b00      	cmp	r3, #0
 800d462:	d05c      	beq.n	800d51e <HAL_TIM_ConfigClockSource+0x1aa>
 800d464:	2b10      	cmp	r3, #16
 800d466:	d05a      	beq.n	800d51e <HAL_TIM_ConfigClockSource+0x1aa>
 800d468:	e062      	b.n	800d530 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	6818      	ldr	r0, [r3, #0]
 800d46e:	683b      	ldr	r3, [r7, #0]
 800d470:	6899      	ldr	r1, [r3, #8]
 800d472:	683b      	ldr	r3, [r7, #0]
 800d474:	685a      	ldr	r2, [r3, #4]
 800d476:	683b      	ldr	r3, [r7, #0]
 800d478:	68db      	ldr	r3, [r3, #12]
 800d47a:	f000 fc95 	bl	800dda8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	689b      	ldr	r3, [r3, #8]
 800d484:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d486:	68bb      	ldr	r3, [r7, #8]
 800d488:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d48c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	68ba      	ldr	r2, [r7, #8]
 800d494:	609a      	str	r2, [r3, #8]
      break;
 800d496:	e04f      	b.n	800d538 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	6818      	ldr	r0, [r3, #0]
 800d49c:	683b      	ldr	r3, [r7, #0]
 800d49e:	6899      	ldr	r1, [r3, #8]
 800d4a0:	683b      	ldr	r3, [r7, #0]
 800d4a2:	685a      	ldr	r2, [r3, #4]
 800d4a4:	683b      	ldr	r3, [r7, #0]
 800d4a6:	68db      	ldr	r3, [r3, #12]
 800d4a8:	f000 fc7e 	bl	800dda8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	689a      	ldr	r2, [r3, #8]
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d4ba:	609a      	str	r2, [r3, #8]
      break;
 800d4bc:	e03c      	b.n	800d538 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	6818      	ldr	r0, [r3, #0]
 800d4c2:	683b      	ldr	r3, [r7, #0]
 800d4c4:	6859      	ldr	r1, [r3, #4]
 800d4c6:	683b      	ldr	r3, [r7, #0]
 800d4c8:	68db      	ldr	r3, [r3, #12]
 800d4ca:	461a      	mov	r2, r3
 800d4cc:	f000 fbee 	bl	800dcac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	2150      	movs	r1, #80	; 0x50
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	f000 fc48 	bl	800dd6c <TIM_ITRx_SetConfig>
      break;
 800d4dc:	e02c      	b.n	800d538 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	6818      	ldr	r0, [r3, #0]
 800d4e2:	683b      	ldr	r3, [r7, #0]
 800d4e4:	6859      	ldr	r1, [r3, #4]
 800d4e6:	683b      	ldr	r3, [r7, #0]
 800d4e8:	68db      	ldr	r3, [r3, #12]
 800d4ea:	461a      	mov	r2, r3
 800d4ec:	f000 fc0d 	bl	800dd0a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	2160      	movs	r1, #96	; 0x60
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	f000 fc38 	bl	800dd6c <TIM_ITRx_SetConfig>
      break;
 800d4fc:	e01c      	b.n	800d538 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	6818      	ldr	r0, [r3, #0]
 800d502:	683b      	ldr	r3, [r7, #0]
 800d504:	6859      	ldr	r1, [r3, #4]
 800d506:	683b      	ldr	r3, [r7, #0]
 800d508:	68db      	ldr	r3, [r3, #12]
 800d50a:	461a      	mov	r2, r3
 800d50c:	f000 fbce 	bl	800dcac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	2140      	movs	r1, #64	; 0x40
 800d516:	4618      	mov	r0, r3
 800d518:	f000 fc28 	bl	800dd6c <TIM_ITRx_SetConfig>
      break;
 800d51c:	e00c      	b.n	800d538 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	681a      	ldr	r2, [r3, #0]
 800d522:	683b      	ldr	r3, [r7, #0]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	4619      	mov	r1, r3
 800d528:	4610      	mov	r0, r2
 800d52a:	f000 fc1f 	bl	800dd6c <TIM_ITRx_SetConfig>
      break;
 800d52e:	e003      	b.n	800d538 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800d530:	2301      	movs	r3, #1
 800d532:	73fb      	strb	r3, [r7, #15]
      break;
 800d534:	e000      	b.n	800d538 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800d536:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	2201      	movs	r2, #1
 800d53c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	2200      	movs	r2, #0
 800d544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d548:	7bfb      	ldrb	r3, [r7, #15]
}
 800d54a:	4618      	mov	r0, r3
 800d54c:	3710      	adds	r7, #16
 800d54e:	46bd      	mov	sp, r7
 800d550:	bd80      	pop	{r7, pc}
 800d552:	bf00      	nop
 800d554:	ffceff88 	.word	0xffceff88
 800d558:	00100040 	.word	0x00100040
 800d55c:	00100030 	.word	0x00100030
 800d560:	00100020 	.word	0x00100020

0800d564 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d564:	b480      	push	{r7}
 800d566:	b083      	sub	sp, #12
 800d568:	af00      	add	r7, sp, #0
 800d56a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d56c:	bf00      	nop
 800d56e:	370c      	adds	r7, #12
 800d570:	46bd      	mov	sp, r7
 800d572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d576:	4770      	bx	lr

0800d578 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d578:	b480      	push	{r7}
 800d57a:	b083      	sub	sp, #12
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d580:	bf00      	nop
 800d582:	370c      	adds	r7, #12
 800d584:	46bd      	mov	sp, r7
 800d586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d58a:	4770      	bx	lr

0800d58c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d58c:	b480      	push	{r7}
 800d58e:	b083      	sub	sp, #12
 800d590:	af00      	add	r7, sp, #0
 800d592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d594:	bf00      	nop
 800d596:	370c      	adds	r7, #12
 800d598:	46bd      	mov	sp, r7
 800d59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d59e:	4770      	bx	lr

0800d5a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d5a0:	b480      	push	{r7}
 800d5a2:	b083      	sub	sp, #12
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d5a8:	bf00      	nop
 800d5aa:	370c      	adds	r7, #12
 800d5ac:	46bd      	mov	sp, r7
 800d5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b2:	4770      	bx	lr

0800d5b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d5b4:	b480      	push	{r7}
 800d5b6:	b085      	sub	sp, #20
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	6078      	str	r0, [r7, #4]
 800d5bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	4a46      	ldr	r2, [pc, #280]	; (800d6e0 <TIM_Base_SetConfig+0x12c>)
 800d5c8:	4293      	cmp	r3, r2
 800d5ca:	d013      	beq.n	800d5f4 <TIM_Base_SetConfig+0x40>
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d5d2:	d00f      	beq.n	800d5f4 <TIM_Base_SetConfig+0x40>
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	4a43      	ldr	r2, [pc, #268]	; (800d6e4 <TIM_Base_SetConfig+0x130>)
 800d5d8:	4293      	cmp	r3, r2
 800d5da:	d00b      	beq.n	800d5f4 <TIM_Base_SetConfig+0x40>
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	4a42      	ldr	r2, [pc, #264]	; (800d6e8 <TIM_Base_SetConfig+0x134>)
 800d5e0:	4293      	cmp	r3, r2
 800d5e2:	d007      	beq.n	800d5f4 <TIM_Base_SetConfig+0x40>
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	4a41      	ldr	r2, [pc, #260]	; (800d6ec <TIM_Base_SetConfig+0x138>)
 800d5e8:	4293      	cmp	r3, r2
 800d5ea:	d003      	beq.n	800d5f4 <TIM_Base_SetConfig+0x40>
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	4a40      	ldr	r2, [pc, #256]	; (800d6f0 <TIM_Base_SetConfig+0x13c>)
 800d5f0:	4293      	cmp	r3, r2
 800d5f2:	d108      	bne.n	800d606 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d5fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d5fc:	683b      	ldr	r3, [r7, #0]
 800d5fe:	685b      	ldr	r3, [r3, #4]
 800d600:	68fa      	ldr	r2, [r7, #12]
 800d602:	4313      	orrs	r3, r2
 800d604:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	4a35      	ldr	r2, [pc, #212]	; (800d6e0 <TIM_Base_SetConfig+0x12c>)
 800d60a:	4293      	cmp	r3, r2
 800d60c:	d01f      	beq.n	800d64e <TIM_Base_SetConfig+0x9a>
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d614:	d01b      	beq.n	800d64e <TIM_Base_SetConfig+0x9a>
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	4a32      	ldr	r2, [pc, #200]	; (800d6e4 <TIM_Base_SetConfig+0x130>)
 800d61a:	4293      	cmp	r3, r2
 800d61c:	d017      	beq.n	800d64e <TIM_Base_SetConfig+0x9a>
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	4a31      	ldr	r2, [pc, #196]	; (800d6e8 <TIM_Base_SetConfig+0x134>)
 800d622:	4293      	cmp	r3, r2
 800d624:	d013      	beq.n	800d64e <TIM_Base_SetConfig+0x9a>
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	4a30      	ldr	r2, [pc, #192]	; (800d6ec <TIM_Base_SetConfig+0x138>)
 800d62a:	4293      	cmp	r3, r2
 800d62c:	d00f      	beq.n	800d64e <TIM_Base_SetConfig+0x9a>
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	4a2f      	ldr	r2, [pc, #188]	; (800d6f0 <TIM_Base_SetConfig+0x13c>)
 800d632:	4293      	cmp	r3, r2
 800d634:	d00b      	beq.n	800d64e <TIM_Base_SetConfig+0x9a>
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	4a2e      	ldr	r2, [pc, #184]	; (800d6f4 <TIM_Base_SetConfig+0x140>)
 800d63a:	4293      	cmp	r3, r2
 800d63c:	d007      	beq.n	800d64e <TIM_Base_SetConfig+0x9a>
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	4a2d      	ldr	r2, [pc, #180]	; (800d6f8 <TIM_Base_SetConfig+0x144>)
 800d642:	4293      	cmp	r3, r2
 800d644:	d003      	beq.n	800d64e <TIM_Base_SetConfig+0x9a>
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	4a2c      	ldr	r2, [pc, #176]	; (800d6fc <TIM_Base_SetConfig+0x148>)
 800d64a:	4293      	cmp	r3, r2
 800d64c:	d108      	bne.n	800d660 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d654:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d656:	683b      	ldr	r3, [r7, #0]
 800d658:	68db      	ldr	r3, [r3, #12]
 800d65a:	68fa      	ldr	r2, [r7, #12]
 800d65c:	4313      	orrs	r3, r2
 800d65e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d666:	683b      	ldr	r3, [r7, #0]
 800d668:	695b      	ldr	r3, [r3, #20]
 800d66a:	4313      	orrs	r3, r2
 800d66c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	68fa      	ldr	r2, [r7, #12]
 800d672:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d674:	683b      	ldr	r3, [r7, #0]
 800d676:	689a      	ldr	r2, [r3, #8]
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d67c:	683b      	ldr	r3, [r7, #0]
 800d67e:	681a      	ldr	r2, [r3, #0]
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	4a16      	ldr	r2, [pc, #88]	; (800d6e0 <TIM_Base_SetConfig+0x12c>)
 800d688:	4293      	cmp	r3, r2
 800d68a:	d00f      	beq.n	800d6ac <TIM_Base_SetConfig+0xf8>
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	4a18      	ldr	r2, [pc, #96]	; (800d6f0 <TIM_Base_SetConfig+0x13c>)
 800d690:	4293      	cmp	r3, r2
 800d692:	d00b      	beq.n	800d6ac <TIM_Base_SetConfig+0xf8>
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	4a17      	ldr	r2, [pc, #92]	; (800d6f4 <TIM_Base_SetConfig+0x140>)
 800d698:	4293      	cmp	r3, r2
 800d69a:	d007      	beq.n	800d6ac <TIM_Base_SetConfig+0xf8>
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	4a16      	ldr	r2, [pc, #88]	; (800d6f8 <TIM_Base_SetConfig+0x144>)
 800d6a0:	4293      	cmp	r3, r2
 800d6a2:	d003      	beq.n	800d6ac <TIM_Base_SetConfig+0xf8>
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	4a15      	ldr	r2, [pc, #84]	; (800d6fc <TIM_Base_SetConfig+0x148>)
 800d6a8:	4293      	cmp	r3, r2
 800d6aa:	d103      	bne.n	800d6b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d6ac:	683b      	ldr	r3, [r7, #0]
 800d6ae:	691a      	ldr	r2, [r3, #16]
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	2201      	movs	r2, #1
 800d6b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	691b      	ldr	r3, [r3, #16]
 800d6be:	f003 0301 	and.w	r3, r3, #1
 800d6c2:	2b01      	cmp	r3, #1
 800d6c4:	d105      	bne.n	800d6d2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	691b      	ldr	r3, [r3, #16]
 800d6ca:	f023 0201 	bic.w	r2, r3, #1
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	611a      	str	r2, [r3, #16]
  }
}
 800d6d2:	bf00      	nop
 800d6d4:	3714      	adds	r7, #20
 800d6d6:	46bd      	mov	sp, r7
 800d6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6dc:	4770      	bx	lr
 800d6de:	bf00      	nop
 800d6e0:	40010000 	.word	0x40010000
 800d6e4:	40000400 	.word	0x40000400
 800d6e8:	40000800 	.word	0x40000800
 800d6ec:	40000c00 	.word	0x40000c00
 800d6f0:	40010400 	.word	0x40010400
 800d6f4:	40014000 	.word	0x40014000
 800d6f8:	40014400 	.word	0x40014400
 800d6fc:	40014800 	.word	0x40014800

0800d700 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d700:	b480      	push	{r7}
 800d702:	b087      	sub	sp, #28
 800d704:	af00      	add	r7, sp, #0
 800d706:	6078      	str	r0, [r7, #4]
 800d708:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	6a1b      	ldr	r3, [r3, #32]
 800d70e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	6a1b      	ldr	r3, [r3, #32]
 800d714:	f023 0201 	bic.w	r2, r3, #1
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	685b      	ldr	r3, [r3, #4]
 800d720:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	699b      	ldr	r3, [r3, #24]
 800d726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d728:	68fa      	ldr	r2, [r7, #12]
 800d72a:	4b37      	ldr	r3, [pc, #220]	; (800d808 <TIM_OC1_SetConfig+0x108>)
 800d72c:	4013      	ands	r3, r2
 800d72e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	f023 0303 	bic.w	r3, r3, #3
 800d736:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d738:	683b      	ldr	r3, [r7, #0]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	68fa      	ldr	r2, [r7, #12]
 800d73e:	4313      	orrs	r3, r2
 800d740:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d742:	697b      	ldr	r3, [r7, #20]
 800d744:	f023 0302 	bic.w	r3, r3, #2
 800d748:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d74a:	683b      	ldr	r3, [r7, #0]
 800d74c:	689b      	ldr	r3, [r3, #8]
 800d74e:	697a      	ldr	r2, [r7, #20]
 800d750:	4313      	orrs	r3, r2
 800d752:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	4a2d      	ldr	r2, [pc, #180]	; (800d80c <TIM_OC1_SetConfig+0x10c>)
 800d758:	4293      	cmp	r3, r2
 800d75a:	d00f      	beq.n	800d77c <TIM_OC1_SetConfig+0x7c>
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	4a2c      	ldr	r2, [pc, #176]	; (800d810 <TIM_OC1_SetConfig+0x110>)
 800d760:	4293      	cmp	r3, r2
 800d762:	d00b      	beq.n	800d77c <TIM_OC1_SetConfig+0x7c>
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	4a2b      	ldr	r2, [pc, #172]	; (800d814 <TIM_OC1_SetConfig+0x114>)
 800d768:	4293      	cmp	r3, r2
 800d76a:	d007      	beq.n	800d77c <TIM_OC1_SetConfig+0x7c>
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	4a2a      	ldr	r2, [pc, #168]	; (800d818 <TIM_OC1_SetConfig+0x118>)
 800d770:	4293      	cmp	r3, r2
 800d772:	d003      	beq.n	800d77c <TIM_OC1_SetConfig+0x7c>
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	4a29      	ldr	r2, [pc, #164]	; (800d81c <TIM_OC1_SetConfig+0x11c>)
 800d778:	4293      	cmp	r3, r2
 800d77a:	d10c      	bne.n	800d796 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d77c:	697b      	ldr	r3, [r7, #20]
 800d77e:	f023 0308 	bic.w	r3, r3, #8
 800d782:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d784:	683b      	ldr	r3, [r7, #0]
 800d786:	68db      	ldr	r3, [r3, #12]
 800d788:	697a      	ldr	r2, [r7, #20]
 800d78a:	4313      	orrs	r3, r2
 800d78c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d78e:	697b      	ldr	r3, [r7, #20]
 800d790:	f023 0304 	bic.w	r3, r3, #4
 800d794:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	4a1c      	ldr	r2, [pc, #112]	; (800d80c <TIM_OC1_SetConfig+0x10c>)
 800d79a:	4293      	cmp	r3, r2
 800d79c:	d00f      	beq.n	800d7be <TIM_OC1_SetConfig+0xbe>
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	4a1b      	ldr	r2, [pc, #108]	; (800d810 <TIM_OC1_SetConfig+0x110>)
 800d7a2:	4293      	cmp	r3, r2
 800d7a4:	d00b      	beq.n	800d7be <TIM_OC1_SetConfig+0xbe>
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	4a1a      	ldr	r2, [pc, #104]	; (800d814 <TIM_OC1_SetConfig+0x114>)
 800d7aa:	4293      	cmp	r3, r2
 800d7ac:	d007      	beq.n	800d7be <TIM_OC1_SetConfig+0xbe>
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	4a19      	ldr	r2, [pc, #100]	; (800d818 <TIM_OC1_SetConfig+0x118>)
 800d7b2:	4293      	cmp	r3, r2
 800d7b4:	d003      	beq.n	800d7be <TIM_OC1_SetConfig+0xbe>
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	4a18      	ldr	r2, [pc, #96]	; (800d81c <TIM_OC1_SetConfig+0x11c>)
 800d7ba:	4293      	cmp	r3, r2
 800d7bc:	d111      	bne.n	800d7e2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d7be:	693b      	ldr	r3, [r7, #16]
 800d7c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d7c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d7c6:	693b      	ldr	r3, [r7, #16]
 800d7c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d7cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d7ce:	683b      	ldr	r3, [r7, #0]
 800d7d0:	695b      	ldr	r3, [r3, #20]
 800d7d2:	693a      	ldr	r2, [r7, #16]
 800d7d4:	4313      	orrs	r3, r2
 800d7d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d7d8:	683b      	ldr	r3, [r7, #0]
 800d7da:	699b      	ldr	r3, [r3, #24]
 800d7dc:	693a      	ldr	r2, [r7, #16]
 800d7de:	4313      	orrs	r3, r2
 800d7e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	693a      	ldr	r2, [r7, #16]
 800d7e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	68fa      	ldr	r2, [r7, #12]
 800d7ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d7ee:	683b      	ldr	r3, [r7, #0]
 800d7f0:	685a      	ldr	r2, [r3, #4]
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	697a      	ldr	r2, [r7, #20]
 800d7fa:	621a      	str	r2, [r3, #32]
}
 800d7fc:	bf00      	nop
 800d7fe:	371c      	adds	r7, #28
 800d800:	46bd      	mov	sp, r7
 800d802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d806:	4770      	bx	lr
 800d808:	fffeff8f 	.word	0xfffeff8f
 800d80c:	40010000 	.word	0x40010000
 800d810:	40010400 	.word	0x40010400
 800d814:	40014000 	.word	0x40014000
 800d818:	40014400 	.word	0x40014400
 800d81c:	40014800 	.word	0x40014800

0800d820 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d820:	b480      	push	{r7}
 800d822:	b087      	sub	sp, #28
 800d824:	af00      	add	r7, sp, #0
 800d826:	6078      	str	r0, [r7, #4]
 800d828:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	6a1b      	ldr	r3, [r3, #32]
 800d82e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	6a1b      	ldr	r3, [r3, #32]
 800d834:	f023 0210 	bic.w	r2, r3, #16
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	685b      	ldr	r3, [r3, #4]
 800d840:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	699b      	ldr	r3, [r3, #24]
 800d846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d848:	68fa      	ldr	r2, [r7, #12]
 800d84a:	4b34      	ldr	r3, [pc, #208]	; (800d91c <TIM_OC2_SetConfig+0xfc>)
 800d84c:	4013      	ands	r3, r2
 800d84e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d856:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d858:	683b      	ldr	r3, [r7, #0]
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	021b      	lsls	r3, r3, #8
 800d85e:	68fa      	ldr	r2, [r7, #12]
 800d860:	4313      	orrs	r3, r2
 800d862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d864:	697b      	ldr	r3, [r7, #20]
 800d866:	f023 0320 	bic.w	r3, r3, #32
 800d86a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d86c:	683b      	ldr	r3, [r7, #0]
 800d86e:	689b      	ldr	r3, [r3, #8]
 800d870:	011b      	lsls	r3, r3, #4
 800d872:	697a      	ldr	r2, [r7, #20]
 800d874:	4313      	orrs	r3, r2
 800d876:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	4a29      	ldr	r2, [pc, #164]	; (800d920 <TIM_OC2_SetConfig+0x100>)
 800d87c:	4293      	cmp	r3, r2
 800d87e:	d003      	beq.n	800d888 <TIM_OC2_SetConfig+0x68>
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	4a28      	ldr	r2, [pc, #160]	; (800d924 <TIM_OC2_SetConfig+0x104>)
 800d884:	4293      	cmp	r3, r2
 800d886:	d10d      	bne.n	800d8a4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d888:	697b      	ldr	r3, [r7, #20]
 800d88a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d88e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d890:	683b      	ldr	r3, [r7, #0]
 800d892:	68db      	ldr	r3, [r3, #12]
 800d894:	011b      	lsls	r3, r3, #4
 800d896:	697a      	ldr	r2, [r7, #20]
 800d898:	4313      	orrs	r3, r2
 800d89a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d89c:	697b      	ldr	r3, [r7, #20]
 800d89e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d8a2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	4a1e      	ldr	r2, [pc, #120]	; (800d920 <TIM_OC2_SetConfig+0x100>)
 800d8a8:	4293      	cmp	r3, r2
 800d8aa:	d00f      	beq.n	800d8cc <TIM_OC2_SetConfig+0xac>
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	4a1d      	ldr	r2, [pc, #116]	; (800d924 <TIM_OC2_SetConfig+0x104>)
 800d8b0:	4293      	cmp	r3, r2
 800d8b2:	d00b      	beq.n	800d8cc <TIM_OC2_SetConfig+0xac>
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	4a1c      	ldr	r2, [pc, #112]	; (800d928 <TIM_OC2_SetConfig+0x108>)
 800d8b8:	4293      	cmp	r3, r2
 800d8ba:	d007      	beq.n	800d8cc <TIM_OC2_SetConfig+0xac>
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	4a1b      	ldr	r2, [pc, #108]	; (800d92c <TIM_OC2_SetConfig+0x10c>)
 800d8c0:	4293      	cmp	r3, r2
 800d8c2:	d003      	beq.n	800d8cc <TIM_OC2_SetConfig+0xac>
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	4a1a      	ldr	r2, [pc, #104]	; (800d930 <TIM_OC2_SetConfig+0x110>)
 800d8c8:	4293      	cmp	r3, r2
 800d8ca:	d113      	bne.n	800d8f4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d8cc:	693b      	ldr	r3, [r7, #16]
 800d8ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d8d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d8d4:	693b      	ldr	r3, [r7, #16]
 800d8d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d8da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d8dc:	683b      	ldr	r3, [r7, #0]
 800d8de:	695b      	ldr	r3, [r3, #20]
 800d8e0:	009b      	lsls	r3, r3, #2
 800d8e2:	693a      	ldr	r2, [r7, #16]
 800d8e4:	4313      	orrs	r3, r2
 800d8e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d8e8:	683b      	ldr	r3, [r7, #0]
 800d8ea:	699b      	ldr	r3, [r3, #24]
 800d8ec:	009b      	lsls	r3, r3, #2
 800d8ee:	693a      	ldr	r2, [r7, #16]
 800d8f0:	4313      	orrs	r3, r2
 800d8f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	693a      	ldr	r2, [r7, #16]
 800d8f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	68fa      	ldr	r2, [r7, #12]
 800d8fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d900:	683b      	ldr	r3, [r7, #0]
 800d902:	685a      	ldr	r2, [r3, #4]
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	697a      	ldr	r2, [r7, #20]
 800d90c:	621a      	str	r2, [r3, #32]
}
 800d90e:	bf00      	nop
 800d910:	371c      	adds	r7, #28
 800d912:	46bd      	mov	sp, r7
 800d914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d918:	4770      	bx	lr
 800d91a:	bf00      	nop
 800d91c:	feff8fff 	.word	0xfeff8fff
 800d920:	40010000 	.word	0x40010000
 800d924:	40010400 	.word	0x40010400
 800d928:	40014000 	.word	0x40014000
 800d92c:	40014400 	.word	0x40014400
 800d930:	40014800 	.word	0x40014800

0800d934 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d934:	b480      	push	{r7}
 800d936:	b087      	sub	sp, #28
 800d938:	af00      	add	r7, sp, #0
 800d93a:	6078      	str	r0, [r7, #4]
 800d93c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	6a1b      	ldr	r3, [r3, #32]
 800d942:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	6a1b      	ldr	r3, [r3, #32]
 800d948:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	685b      	ldr	r3, [r3, #4]
 800d954:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	69db      	ldr	r3, [r3, #28]
 800d95a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d95c:	68fa      	ldr	r2, [r7, #12]
 800d95e:	4b33      	ldr	r3, [pc, #204]	; (800da2c <TIM_OC3_SetConfig+0xf8>)
 800d960:	4013      	ands	r3, r2
 800d962:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	f023 0303 	bic.w	r3, r3, #3
 800d96a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d96c:	683b      	ldr	r3, [r7, #0]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	68fa      	ldr	r2, [r7, #12]
 800d972:	4313      	orrs	r3, r2
 800d974:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d976:	697b      	ldr	r3, [r7, #20]
 800d978:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d97c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d97e:	683b      	ldr	r3, [r7, #0]
 800d980:	689b      	ldr	r3, [r3, #8]
 800d982:	021b      	lsls	r3, r3, #8
 800d984:	697a      	ldr	r2, [r7, #20]
 800d986:	4313      	orrs	r3, r2
 800d988:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	4a28      	ldr	r2, [pc, #160]	; (800da30 <TIM_OC3_SetConfig+0xfc>)
 800d98e:	4293      	cmp	r3, r2
 800d990:	d003      	beq.n	800d99a <TIM_OC3_SetConfig+0x66>
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	4a27      	ldr	r2, [pc, #156]	; (800da34 <TIM_OC3_SetConfig+0x100>)
 800d996:	4293      	cmp	r3, r2
 800d998:	d10d      	bne.n	800d9b6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d99a:	697b      	ldr	r3, [r7, #20]
 800d99c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d9a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d9a2:	683b      	ldr	r3, [r7, #0]
 800d9a4:	68db      	ldr	r3, [r3, #12]
 800d9a6:	021b      	lsls	r3, r3, #8
 800d9a8:	697a      	ldr	r2, [r7, #20]
 800d9aa:	4313      	orrs	r3, r2
 800d9ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d9ae:	697b      	ldr	r3, [r7, #20]
 800d9b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d9b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	4a1d      	ldr	r2, [pc, #116]	; (800da30 <TIM_OC3_SetConfig+0xfc>)
 800d9ba:	4293      	cmp	r3, r2
 800d9bc:	d00f      	beq.n	800d9de <TIM_OC3_SetConfig+0xaa>
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	4a1c      	ldr	r2, [pc, #112]	; (800da34 <TIM_OC3_SetConfig+0x100>)
 800d9c2:	4293      	cmp	r3, r2
 800d9c4:	d00b      	beq.n	800d9de <TIM_OC3_SetConfig+0xaa>
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	4a1b      	ldr	r2, [pc, #108]	; (800da38 <TIM_OC3_SetConfig+0x104>)
 800d9ca:	4293      	cmp	r3, r2
 800d9cc:	d007      	beq.n	800d9de <TIM_OC3_SetConfig+0xaa>
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	4a1a      	ldr	r2, [pc, #104]	; (800da3c <TIM_OC3_SetConfig+0x108>)
 800d9d2:	4293      	cmp	r3, r2
 800d9d4:	d003      	beq.n	800d9de <TIM_OC3_SetConfig+0xaa>
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	4a19      	ldr	r2, [pc, #100]	; (800da40 <TIM_OC3_SetConfig+0x10c>)
 800d9da:	4293      	cmp	r3, r2
 800d9dc:	d113      	bne.n	800da06 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d9de:	693b      	ldr	r3, [r7, #16]
 800d9e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d9e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d9e6:	693b      	ldr	r3, [r7, #16]
 800d9e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d9ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d9ee:	683b      	ldr	r3, [r7, #0]
 800d9f0:	695b      	ldr	r3, [r3, #20]
 800d9f2:	011b      	lsls	r3, r3, #4
 800d9f4:	693a      	ldr	r2, [r7, #16]
 800d9f6:	4313      	orrs	r3, r2
 800d9f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d9fa:	683b      	ldr	r3, [r7, #0]
 800d9fc:	699b      	ldr	r3, [r3, #24]
 800d9fe:	011b      	lsls	r3, r3, #4
 800da00:	693a      	ldr	r2, [r7, #16]
 800da02:	4313      	orrs	r3, r2
 800da04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	693a      	ldr	r2, [r7, #16]
 800da0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	68fa      	ldr	r2, [r7, #12]
 800da10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800da12:	683b      	ldr	r3, [r7, #0]
 800da14:	685a      	ldr	r2, [r3, #4]
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	697a      	ldr	r2, [r7, #20]
 800da1e:	621a      	str	r2, [r3, #32]
}
 800da20:	bf00      	nop
 800da22:	371c      	adds	r7, #28
 800da24:	46bd      	mov	sp, r7
 800da26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da2a:	4770      	bx	lr
 800da2c:	fffeff8f 	.word	0xfffeff8f
 800da30:	40010000 	.word	0x40010000
 800da34:	40010400 	.word	0x40010400
 800da38:	40014000 	.word	0x40014000
 800da3c:	40014400 	.word	0x40014400
 800da40:	40014800 	.word	0x40014800

0800da44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800da44:	b480      	push	{r7}
 800da46:	b087      	sub	sp, #28
 800da48:	af00      	add	r7, sp, #0
 800da4a:	6078      	str	r0, [r7, #4]
 800da4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	6a1b      	ldr	r3, [r3, #32]
 800da52:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	6a1b      	ldr	r3, [r3, #32]
 800da58:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	685b      	ldr	r3, [r3, #4]
 800da64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	69db      	ldr	r3, [r3, #28]
 800da6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800da6c:	68fa      	ldr	r2, [r7, #12]
 800da6e:	4b24      	ldr	r3, [pc, #144]	; (800db00 <TIM_OC4_SetConfig+0xbc>)
 800da70:	4013      	ands	r3, r2
 800da72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800da7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800da7c:	683b      	ldr	r3, [r7, #0]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	021b      	lsls	r3, r3, #8
 800da82:	68fa      	ldr	r2, [r7, #12]
 800da84:	4313      	orrs	r3, r2
 800da86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800da88:	693b      	ldr	r3, [r7, #16]
 800da8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800da8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800da90:	683b      	ldr	r3, [r7, #0]
 800da92:	689b      	ldr	r3, [r3, #8]
 800da94:	031b      	lsls	r3, r3, #12
 800da96:	693a      	ldr	r2, [r7, #16]
 800da98:	4313      	orrs	r3, r2
 800da9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	4a19      	ldr	r2, [pc, #100]	; (800db04 <TIM_OC4_SetConfig+0xc0>)
 800daa0:	4293      	cmp	r3, r2
 800daa2:	d00f      	beq.n	800dac4 <TIM_OC4_SetConfig+0x80>
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	4a18      	ldr	r2, [pc, #96]	; (800db08 <TIM_OC4_SetConfig+0xc4>)
 800daa8:	4293      	cmp	r3, r2
 800daaa:	d00b      	beq.n	800dac4 <TIM_OC4_SetConfig+0x80>
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	4a17      	ldr	r2, [pc, #92]	; (800db0c <TIM_OC4_SetConfig+0xc8>)
 800dab0:	4293      	cmp	r3, r2
 800dab2:	d007      	beq.n	800dac4 <TIM_OC4_SetConfig+0x80>
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	4a16      	ldr	r2, [pc, #88]	; (800db10 <TIM_OC4_SetConfig+0xcc>)
 800dab8:	4293      	cmp	r3, r2
 800daba:	d003      	beq.n	800dac4 <TIM_OC4_SetConfig+0x80>
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	4a15      	ldr	r2, [pc, #84]	; (800db14 <TIM_OC4_SetConfig+0xd0>)
 800dac0:	4293      	cmp	r3, r2
 800dac2:	d109      	bne.n	800dad8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800dac4:	697b      	ldr	r3, [r7, #20]
 800dac6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800daca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800dacc:	683b      	ldr	r3, [r7, #0]
 800dace:	695b      	ldr	r3, [r3, #20]
 800dad0:	019b      	lsls	r3, r3, #6
 800dad2:	697a      	ldr	r2, [r7, #20]
 800dad4:	4313      	orrs	r3, r2
 800dad6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	697a      	ldr	r2, [r7, #20]
 800dadc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	68fa      	ldr	r2, [r7, #12]
 800dae2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800dae4:	683b      	ldr	r3, [r7, #0]
 800dae6:	685a      	ldr	r2, [r3, #4]
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	693a      	ldr	r2, [r7, #16]
 800daf0:	621a      	str	r2, [r3, #32]
}
 800daf2:	bf00      	nop
 800daf4:	371c      	adds	r7, #28
 800daf6:	46bd      	mov	sp, r7
 800daf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dafc:	4770      	bx	lr
 800dafe:	bf00      	nop
 800db00:	feff8fff 	.word	0xfeff8fff
 800db04:	40010000 	.word	0x40010000
 800db08:	40010400 	.word	0x40010400
 800db0c:	40014000 	.word	0x40014000
 800db10:	40014400 	.word	0x40014400
 800db14:	40014800 	.word	0x40014800

0800db18 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800db18:	b480      	push	{r7}
 800db1a:	b087      	sub	sp, #28
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	6078      	str	r0, [r7, #4]
 800db20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	6a1b      	ldr	r3, [r3, #32]
 800db26:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	6a1b      	ldr	r3, [r3, #32]
 800db2c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	685b      	ldr	r3, [r3, #4]
 800db38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800db40:	68fa      	ldr	r2, [r7, #12]
 800db42:	4b21      	ldr	r3, [pc, #132]	; (800dbc8 <TIM_OC5_SetConfig+0xb0>)
 800db44:	4013      	ands	r3, r2
 800db46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800db48:	683b      	ldr	r3, [r7, #0]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	68fa      	ldr	r2, [r7, #12]
 800db4e:	4313      	orrs	r3, r2
 800db50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800db52:	693b      	ldr	r3, [r7, #16]
 800db54:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800db58:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800db5a:	683b      	ldr	r3, [r7, #0]
 800db5c:	689b      	ldr	r3, [r3, #8]
 800db5e:	041b      	lsls	r3, r3, #16
 800db60:	693a      	ldr	r2, [r7, #16]
 800db62:	4313      	orrs	r3, r2
 800db64:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	4a18      	ldr	r2, [pc, #96]	; (800dbcc <TIM_OC5_SetConfig+0xb4>)
 800db6a:	4293      	cmp	r3, r2
 800db6c:	d00f      	beq.n	800db8e <TIM_OC5_SetConfig+0x76>
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	4a17      	ldr	r2, [pc, #92]	; (800dbd0 <TIM_OC5_SetConfig+0xb8>)
 800db72:	4293      	cmp	r3, r2
 800db74:	d00b      	beq.n	800db8e <TIM_OC5_SetConfig+0x76>
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	4a16      	ldr	r2, [pc, #88]	; (800dbd4 <TIM_OC5_SetConfig+0xbc>)
 800db7a:	4293      	cmp	r3, r2
 800db7c:	d007      	beq.n	800db8e <TIM_OC5_SetConfig+0x76>
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	4a15      	ldr	r2, [pc, #84]	; (800dbd8 <TIM_OC5_SetConfig+0xc0>)
 800db82:	4293      	cmp	r3, r2
 800db84:	d003      	beq.n	800db8e <TIM_OC5_SetConfig+0x76>
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	4a14      	ldr	r2, [pc, #80]	; (800dbdc <TIM_OC5_SetConfig+0xc4>)
 800db8a:	4293      	cmp	r3, r2
 800db8c:	d109      	bne.n	800dba2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800db8e:	697b      	ldr	r3, [r7, #20]
 800db90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800db94:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800db96:	683b      	ldr	r3, [r7, #0]
 800db98:	695b      	ldr	r3, [r3, #20]
 800db9a:	021b      	lsls	r3, r3, #8
 800db9c:	697a      	ldr	r2, [r7, #20]
 800db9e:	4313      	orrs	r3, r2
 800dba0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	697a      	ldr	r2, [r7, #20]
 800dba6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	68fa      	ldr	r2, [r7, #12]
 800dbac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800dbae:	683b      	ldr	r3, [r7, #0]
 800dbb0:	685a      	ldr	r2, [r3, #4]
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	693a      	ldr	r2, [r7, #16]
 800dbba:	621a      	str	r2, [r3, #32]
}
 800dbbc:	bf00      	nop
 800dbbe:	371c      	adds	r7, #28
 800dbc0:	46bd      	mov	sp, r7
 800dbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc6:	4770      	bx	lr
 800dbc8:	fffeff8f 	.word	0xfffeff8f
 800dbcc:	40010000 	.word	0x40010000
 800dbd0:	40010400 	.word	0x40010400
 800dbd4:	40014000 	.word	0x40014000
 800dbd8:	40014400 	.word	0x40014400
 800dbdc:	40014800 	.word	0x40014800

0800dbe0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800dbe0:	b480      	push	{r7}
 800dbe2:	b087      	sub	sp, #28
 800dbe4:	af00      	add	r7, sp, #0
 800dbe6:	6078      	str	r0, [r7, #4]
 800dbe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	6a1b      	ldr	r3, [r3, #32]
 800dbee:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	6a1b      	ldr	r3, [r3, #32]
 800dbf4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	685b      	ldr	r3, [r3, #4]
 800dc00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800dc08:	68fa      	ldr	r2, [r7, #12]
 800dc0a:	4b22      	ldr	r3, [pc, #136]	; (800dc94 <TIM_OC6_SetConfig+0xb4>)
 800dc0c:	4013      	ands	r3, r2
 800dc0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dc10:	683b      	ldr	r3, [r7, #0]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	021b      	lsls	r3, r3, #8
 800dc16:	68fa      	ldr	r2, [r7, #12]
 800dc18:	4313      	orrs	r3, r2
 800dc1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800dc1c:	693b      	ldr	r3, [r7, #16]
 800dc1e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800dc22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800dc24:	683b      	ldr	r3, [r7, #0]
 800dc26:	689b      	ldr	r3, [r3, #8]
 800dc28:	051b      	lsls	r3, r3, #20
 800dc2a:	693a      	ldr	r2, [r7, #16]
 800dc2c:	4313      	orrs	r3, r2
 800dc2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	4a19      	ldr	r2, [pc, #100]	; (800dc98 <TIM_OC6_SetConfig+0xb8>)
 800dc34:	4293      	cmp	r3, r2
 800dc36:	d00f      	beq.n	800dc58 <TIM_OC6_SetConfig+0x78>
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	4a18      	ldr	r2, [pc, #96]	; (800dc9c <TIM_OC6_SetConfig+0xbc>)
 800dc3c:	4293      	cmp	r3, r2
 800dc3e:	d00b      	beq.n	800dc58 <TIM_OC6_SetConfig+0x78>
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	4a17      	ldr	r2, [pc, #92]	; (800dca0 <TIM_OC6_SetConfig+0xc0>)
 800dc44:	4293      	cmp	r3, r2
 800dc46:	d007      	beq.n	800dc58 <TIM_OC6_SetConfig+0x78>
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	4a16      	ldr	r2, [pc, #88]	; (800dca4 <TIM_OC6_SetConfig+0xc4>)
 800dc4c:	4293      	cmp	r3, r2
 800dc4e:	d003      	beq.n	800dc58 <TIM_OC6_SetConfig+0x78>
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	4a15      	ldr	r2, [pc, #84]	; (800dca8 <TIM_OC6_SetConfig+0xc8>)
 800dc54:	4293      	cmp	r3, r2
 800dc56:	d109      	bne.n	800dc6c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800dc58:	697b      	ldr	r3, [r7, #20]
 800dc5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800dc5e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800dc60:	683b      	ldr	r3, [r7, #0]
 800dc62:	695b      	ldr	r3, [r3, #20]
 800dc64:	029b      	lsls	r3, r3, #10
 800dc66:	697a      	ldr	r2, [r7, #20]
 800dc68:	4313      	orrs	r3, r2
 800dc6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	697a      	ldr	r2, [r7, #20]
 800dc70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	68fa      	ldr	r2, [r7, #12]
 800dc76:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800dc78:	683b      	ldr	r3, [r7, #0]
 800dc7a:	685a      	ldr	r2, [r3, #4]
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	693a      	ldr	r2, [r7, #16]
 800dc84:	621a      	str	r2, [r3, #32]
}
 800dc86:	bf00      	nop
 800dc88:	371c      	adds	r7, #28
 800dc8a:	46bd      	mov	sp, r7
 800dc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc90:	4770      	bx	lr
 800dc92:	bf00      	nop
 800dc94:	feff8fff 	.word	0xfeff8fff
 800dc98:	40010000 	.word	0x40010000
 800dc9c:	40010400 	.word	0x40010400
 800dca0:	40014000 	.word	0x40014000
 800dca4:	40014400 	.word	0x40014400
 800dca8:	40014800 	.word	0x40014800

0800dcac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dcac:	b480      	push	{r7}
 800dcae:	b087      	sub	sp, #28
 800dcb0:	af00      	add	r7, sp, #0
 800dcb2:	60f8      	str	r0, [r7, #12]
 800dcb4:	60b9      	str	r1, [r7, #8]
 800dcb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	6a1b      	ldr	r3, [r3, #32]
 800dcbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	6a1b      	ldr	r3, [r3, #32]
 800dcc2:	f023 0201 	bic.w	r2, r3, #1
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	699b      	ldr	r3, [r3, #24]
 800dcce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800dcd0:	693b      	ldr	r3, [r7, #16]
 800dcd2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800dcd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	011b      	lsls	r3, r3, #4
 800dcdc:	693a      	ldr	r2, [r7, #16]
 800dcde:	4313      	orrs	r3, r2
 800dce0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800dce2:	697b      	ldr	r3, [r7, #20]
 800dce4:	f023 030a 	bic.w	r3, r3, #10
 800dce8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800dcea:	697a      	ldr	r2, [r7, #20]
 800dcec:	68bb      	ldr	r3, [r7, #8]
 800dcee:	4313      	orrs	r3, r2
 800dcf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	693a      	ldr	r2, [r7, #16]
 800dcf6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	697a      	ldr	r2, [r7, #20]
 800dcfc:	621a      	str	r2, [r3, #32]
}
 800dcfe:	bf00      	nop
 800dd00:	371c      	adds	r7, #28
 800dd02:	46bd      	mov	sp, r7
 800dd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd08:	4770      	bx	lr

0800dd0a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dd0a:	b480      	push	{r7}
 800dd0c:	b087      	sub	sp, #28
 800dd0e:	af00      	add	r7, sp, #0
 800dd10:	60f8      	str	r0, [r7, #12]
 800dd12:	60b9      	str	r1, [r7, #8]
 800dd14:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	6a1b      	ldr	r3, [r3, #32]
 800dd1a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	6a1b      	ldr	r3, [r3, #32]
 800dd20:	f023 0210 	bic.w	r2, r3, #16
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	699b      	ldr	r3, [r3, #24]
 800dd2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800dd2e:	693b      	ldr	r3, [r7, #16]
 800dd30:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800dd34:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	031b      	lsls	r3, r3, #12
 800dd3a:	693a      	ldr	r2, [r7, #16]
 800dd3c:	4313      	orrs	r3, r2
 800dd3e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800dd40:	697b      	ldr	r3, [r7, #20]
 800dd42:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800dd46:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800dd48:	68bb      	ldr	r3, [r7, #8]
 800dd4a:	011b      	lsls	r3, r3, #4
 800dd4c:	697a      	ldr	r2, [r7, #20]
 800dd4e:	4313      	orrs	r3, r2
 800dd50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	693a      	ldr	r2, [r7, #16]
 800dd56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	697a      	ldr	r2, [r7, #20]
 800dd5c:	621a      	str	r2, [r3, #32]
}
 800dd5e:	bf00      	nop
 800dd60:	371c      	adds	r7, #28
 800dd62:	46bd      	mov	sp, r7
 800dd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd68:	4770      	bx	lr
	...

0800dd6c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800dd6c:	b480      	push	{r7}
 800dd6e:	b085      	sub	sp, #20
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	6078      	str	r0, [r7, #4]
 800dd74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	689b      	ldr	r3, [r3, #8]
 800dd7a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800dd7c:	68fa      	ldr	r2, [r7, #12]
 800dd7e:	4b09      	ldr	r3, [pc, #36]	; (800dda4 <TIM_ITRx_SetConfig+0x38>)
 800dd80:	4013      	ands	r3, r2
 800dd82:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800dd84:	683a      	ldr	r2, [r7, #0]
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	4313      	orrs	r3, r2
 800dd8a:	f043 0307 	orr.w	r3, r3, #7
 800dd8e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	68fa      	ldr	r2, [r7, #12]
 800dd94:	609a      	str	r2, [r3, #8]
}
 800dd96:	bf00      	nop
 800dd98:	3714      	adds	r7, #20
 800dd9a:	46bd      	mov	sp, r7
 800dd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda0:	4770      	bx	lr
 800dda2:	bf00      	nop
 800dda4:	ffcfff8f 	.word	0xffcfff8f

0800dda8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800dda8:	b480      	push	{r7}
 800ddaa:	b087      	sub	sp, #28
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	60f8      	str	r0, [r7, #12]
 800ddb0:	60b9      	str	r1, [r7, #8]
 800ddb2:	607a      	str	r2, [r7, #4]
 800ddb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	689b      	ldr	r3, [r3, #8]
 800ddba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ddbc:	697b      	ldr	r3, [r7, #20]
 800ddbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ddc2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ddc4:	683b      	ldr	r3, [r7, #0]
 800ddc6:	021a      	lsls	r2, r3, #8
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	431a      	orrs	r2, r3
 800ddcc:	68bb      	ldr	r3, [r7, #8]
 800ddce:	4313      	orrs	r3, r2
 800ddd0:	697a      	ldr	r2, [r7, #20]
 800ddd2:	4313      	orrs	r3, r2
 800ddd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	697a      	ldr	r2, [r7, #20]
 800ddda:	609a      	str	r2, [r3, #8]
}
 800dddc:	bf00      	nop
 800ddde:	371c      	adds	r7, #28
 800dde0:	46bd      	mov	sp, r7
 800dde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde6:	4770      	bx	lr

0800dde8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800dde8:	b480      	push	{r7}
 800ddea:	b087      	sub	sp, #28
 800ddec:	af00      	add	r7, sp, #0
 800ddee:	60f8      	str	r0, [r7, #12]
 800ddf0:	60b9      	str	r1, [r7, #8]
 800ddf2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ddf4:	68bb      	ldr	r3, [r7, #8]
 800ddf6:	f003 031f 	and.w	r3, r3, #31
 800ddfa:	2201      	movs	r2, #1
 800ddfc:	fa02 f303 	lsl.w	r3, r2, r3
 800de00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	6a1a      	ldr	r2, [r3, #32]
 800de06:	697b      	ldr	r3, [r7, #20]
 800de08:	43db      	mvns	r3, r3
 800de0a:	401a      	ands	r2, r3
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	6a1a      	ldr	r2, [r3, #32]
 800de14:	68bb      	ldr	r3, [r7, #8]
 800de16:	f003 031f 	and.w	r3, r3, #31
 800de1a:	6879      	ldr	r1, [r7, #4]
 800de1c:	fa01 f303 	lsl.w	r3, r1, r3
 800de20:	431a      	orrs	r2, r3
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	621a      	str	r2, [r3, #32]
}
 800de26:	bf00      	nop
 800de28:	371c      	adds	r7, #28
 800de2a:	46bd      	mov	sp, r7
 800de2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de30:	4770      	bx	lr
	...

0800de34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800de34:	b480      	push	{r7}
 800de36:	b085      	sub	sp, #20
 800de38:	af00      	add	r7, sp, #0
 800de3a:	6078      	str	r0, [r7, #4]
 800de3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800de44:	2b01      	cmp	r3, #1
 800de46:	d101      	bne.n	800de4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800de48:	2302      	movs	r3, #2
 800de4a:	e06d      	b.n	800df28 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	2201      	movs	r2, #1
 800de50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	2202      	movs	r2, #2
 800de58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	685b      	ldr	r3, [r3, #4]
 800de62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	689b      	ldr	r3, [r3, #8]
 800de6a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	4a30      	ldr	r2, [pc, #192]	; (800df34 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800de72:	4293      	cmp	r3, r2
 800de74:	d004      	beq.n	800de80 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	4a2f      	ldr	r2, [pc, #188]	; (800df38 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800de7c:	4293      	cmp	r3, r2
 800de7e:	d108      	bne.n	800de92 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800de86:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800de88:	683b      	ldr	r3, [r7, #0]
 800de8a:	685b      	ldr	r3, [r3, #4]
 800de8c:	68fa      	ldr	r2, [r7, #12]
 800de8e:	4313      	orrs	r3, r2
 800de90:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800de98:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800de9a:	683b      	ldr	r3, [r7, #0]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	68fa      	ldr	r2, [r7, #12]
 800dea0:	4313      	orrs	r3, r2
 800dea2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	68fa      	ldr	r2, [r7, #12]
 800deaa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	4a20      	ldr	r2, [pc, #128]	; (800df34 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800deb2:	4293      	cmp	r3, r2
 800deb4:	d022      	beq.n	800defc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800debe:	d01d      	beq.n	800defc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	4a1d      	ldr	r2, [pc, #116]	; (800df3c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800dec6:	4293      	cmp	r3, r2
 800dec8:	d018      	beq.n	800defc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	4a1c      	ldr	r2, [pc, #112]	; (800df40 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ded0:	4293      	cmp	r3, r2
 800ded2:	d013      	beq.n	800defc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	4a1a      	ldr	r2, [pc, #104]	; (800df44 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800deda:	4293      	cmp	r3, r2
 800dedc:	d00e      	beq.n	800defc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	4a15      	ldr	r2, [pc, #84]	; (800df38 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800dee4:	4293      	cmp	r3, r2
 800dee6:	d009      	beq.n	800defc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	4a16      	ldr	r2, [pc, #88]	; (800df48 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800deee:	4293      	cmp	r3, r2
 800def0:	d004      	beq.n	800defc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	4a15      	ldr	r2, [pc, #84]	; (800df4c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800def8:	4293      	cmp	r3, r2
 800defa:	d10c      	bne.n	800df16 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800defc:	68bb      	ldr	r3, [r7, #8]
 800defe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800df02:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800df04:	683b      	ldr	r3, [r7, #0]
 800df06:	689b      	ldr	r3, [r3, #8]
 800df08:	68ba      	ldr	r2, [r7, #8]
 800df0a:	4313      	orrs	r3, r2
 800df0c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	68ba      	ldr	r2, [r7, #8]
 800df14:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	2201      	movs	r2, #1
 800df1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	2200      	movs	r2, #0
 800df22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800df26:	2300      	movs	r3, #0
}
 800df28:	4618      	mov	r0, r3
 800df2a:	3714      	adds	r7, #20
 800df2c:	46bd      	mov	sp, r7
 800df2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df32:	4770      	bx	lr
 800df34:	40010000 	.word	0x40010000
 800df38:	40010400 	.word	0x40010400
 800df3c:	40000400 	.word	0x40000400
 800df40:	40000800 	.word	0x40000800
 800df44:	40000c00 	.word	0x40000c00
 800df48:	40001800 	.word	0x40001800
 800df4c:	40014000 	.word	0x40014000

0800df50 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800df50:	b480      	push	{r7}
 800df52:	b085      	sub	sp, #20
 800df54:	af00      	add	r7, sp, #0
 800df56:	6078      	str	r0, [r7, #4]
 800df58:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800df5a:	2300      	movs	r3, #0
 800df5c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800df64:	2b01      	cmp	r3, #1
 800df66:	d101      	bne.n	800df6c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800df68:	2302      	movs	r3, #2
 800df6a:	e065      	b.n	800e038 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	2201      	movs	r2, #1
 800df70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800df7a:	683b      	ldr	r3, [r7, #0]
 800df7c:	68db      	ldr	r3, [r3, #12]
 800df7e:	4313      	orrs	r3, r2
 800df80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800df88:	683b      	ldr	r3, [r7, #0]
 800df8a:	689b      	ldr	r3, [r3, #8]
 800df8c:	4313      	orrs	r3, r2
 800df8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800df96:	683b      	ldr	r3, [r7, #0]
 800df98:	685b      	ldr	r3, [r3, #4]
 800df9a:	4313      	orrs	r3, r2
 800df9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800dfa4:	683b      	ldr	r3, [r7, #0]
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	4313      	orrs	r3, r2
 800dfaa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800dfb2:	683b      	ldr	r3, [r7, #0]
 800dfb4:	691b      	ldr	r3, [r3, #16]
 800dfb6:	4313      	orrs	r3, r2
 800dfb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800dfc0:	683b      	ldr	r3, [r7, #0]
 800dfc2:	695b      	ldr	r3, [r3, #20]
 800dfc4:	4313      	orrs	r3, r2
 800dfc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800dfce:	683b      	ldr	r3, [r7, #0]
 800dfd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfd2:	4313      	orrs	r3, r2
 800dfd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800dfdc:	683b      	ldr	r3, [r7, #0]
 800dfde:	699b      	ldr	r3, [r3, #24]
 800dfe0:	041b      	lsls	r3, r3, #16
 800dfe2:	4313      	orrs	r3, r2
 800dfe4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	4a16      	ldr	r2, [pc, #88]	; (800e044 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800dfec:	4293      	cmp	r3, r2
 800dfee:	d004      	beq.n	800dffa <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	4a14      	ldr	r2, [pc, #80]	; (800e048 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800dff6:	4293      	cmp	r3, r2
 800dff8:	d115      	bne.n	800e026 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800e000:	683b      	ldr	r3, [r7, #0]
 800e002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e004:	051b      	lsls	r3, r3, #20
 800e006:	4313      	orrs	r3, r2
 800e008:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800e010:	683b      	ldr	r3, [r7, #0]
 800e012:	69db      	ldr	r3, [r3, #28]
 800e014:	4313      	orrs	r3, r2
 800e016:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800e01e:	683b      	ldr	r3, [r7, #0]
 800e020:	6a1b      	ldr	r3, [r3, #32]
 800e022:	4313      	orrs	r3, r2
 800e024:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	68fa      	ldr	r2, [r7, #12]
 800e02c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	2200      	movs	r2, #0
 800e032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e036:	2300      	movs	r3, #0
}
 800e038:	4618      	mov	r0, r3
 800e03a:	3714      	adds	r7, #20
 800e03c:	46bd      	mov	sp, r7
 800e03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e042:	4770      	bx	lr
 800e044:	40010000 	.word	0x40010000
 800e048:	40010400 	.word	0x40010400

0800e04c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e04c:	b480      	push	{r7}
 800e04e:	b083      	sub	sp, #12
 800e050:	af00      	add	r7, sp, #0
 800e052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e054:	bf00      	nop
 800e056:	370c      	adds	r7, #12
 800e058:	46bd      	mov	sp, r7
 800e05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e05e:	4770      	bx	lr

0800e060 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e060:	b480      	push	{r7}
 800e062:	b083      	sub	sp, #12
 800e064:	af00      	add	r7, sp, #0
 800e066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e068:	bf00      	nop
 800e06a:	370c      	adds	r7, #12
 800e06c:	46bd      	mov	sp, r7
 800e06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e072:	4770      	bx	lr

0800e074 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e074:	b480      	push	{r7}
 800e076:	b083      	sub	sp, #12
 800e078:	af00      	add	r7, sp, #0
 800e07a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e07c:	bf00      	nop
 800e07e:	370c      	adds	r7, #12
 800e080:	46bd      	mov	sp, r7
 800e082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e086:	4770      	bx	lr

0800e088 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e088:	b580      	push	{r7, lr}
 800e08a:	b082      	sub	sp, #8
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	2b00      	cmp	r3, #0
 800e094:	d101      	bne.n	800e09a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e096:	2301      	movs	r3, #1
 800e098:	e042      	b.n	800e120 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d106      	bne.n	800e0b2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	2200      	movs	r2, #0
 800e0a8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e0ac:	6878      	ldr	r0, [r7, #4]
 800e0ae:	f7f4 fd4f 	bl	8002b50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	2224      	movs	r2, #36	; 0x24
 800e0b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	681a      	ldr	r2, [r3, #0]
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	f022 0201 	bic.w	r2, r2, #1
 800e0c8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d002      	beq.n	800e0d8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800e0d2:	6878      	ldr	r0, [r7, #4]
 800e0d4:	f001 fbc2 	bl	800f85c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e0d8:	6878      	ldr	r0, [r7, #4]
 800e0da:	f000 fe57 	bl	800ed8c <UART_SetConfig>
 800e0de:	4603      	mov	r3, r0
 800e0e0:	2b01      	cmp	r3, #1
 800e0e2:	d101      	bne.n	800e0e8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800e0e4:	2301      	movs	r3, #1
 800e0e6:	e01b      	b.n	800e120 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	685a      	ldr	r2, [r3, #4]
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e0f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	689a      	ldr	r2, [r3, #8]
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e106:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	681a      	ldr	r2, [r3, #0]
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	f042 0201 	orr.w	r2, r2, #1
 800e116:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e118:	6878      	ldr	r0, [r7, #4]
 800e11a:	f001 fc41 	bl	800f9a0 <UART_CheckIdleState>
 800e11e:	4603      	mov	r3, r0
}
 800e120:	4618      	mov	r0, r3
 800e122:	3708      	adds	r7, #8
 800e124:	46bd      	mov	sp, r7
 800e126:	bd80      	pop	{r7, pc}

0800e128 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e128:	b580      	push	{r7, lr}
 800e12a:	b08a      	sub	sp, #40	; 0x28
 800e12c:	af02      	add	r7, sp, #8
 800e12e:	60f8      	str	r0, [r7, #12]
 800e130:	60b9      	str	r1, [r7, #8]
 800e132:	603b      	str	r3, [r7, #0]
 800e134:	4613      	mov	r3, r2
 800e136:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e13e:	2b20      	cmp	r3, #32
 800e140:	d17b      	bne.n	800e23a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800e142:	68bb      	ldr	r3, [r7, #8]
 800e144:	2b00      	cmp	r3, #0
 800e146:	d002      	beq.n	800e14e <HAL_UART_Transmit+0x26>
 800e148:	88fb      	ldrh	r3, [r7, #6]
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d101      	bne.n	800e152 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800e14e:	2301      	movs	r3, #1
 800e150:	e074      	b.n	800e23c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	2200      	movs	r2, #0
 800e156:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	2221      	movs	r2, #33	; 0x21
 800e15e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e162:	f7f4 ffef 	bl	8003144 <HAL_GetTick>
 800e166:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	88fa      	ldrh	r2, [r7, #6]
 800e16c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	88fa      	ldrh	r2, [r7, #6]
 800e174:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	689b      	ldr	r3, [r3, #8]
 800e17c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e180:	d108      	bne.n	800e194 <HAL_UART_Transmit+0x6c>
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	691b      	ldr	r3, [r3, #16]
 800e186:	2b00      	cmp	r3, #0
 800e188:	d104      	bne.n	800e194 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800e18a:	2300      	movs	r3, #0
 800e18c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e18e:	68bb      	ldr	r3, [r7, #8]
 800e190:	61bb      	str	r3, [r7, #24]
 800e192:	e003      	b.n	800e19c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800e194:	68bb      	ldr	r3, [r7, #8]
 800e196:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e198:	2300      	movs	r3, #0
 800e19a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e19c:	e030      	b.n	800e200 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e19e:	683b      	ldr	r3, [r7, #0]
 800e1a0:	9300      	str	r3, [sp, #0]
 800e1a2:	697b      	ldr	r3, [r7, #20]
 800e1a4:	2200      	movs	r2, #0
 800e1a6:	2180      	movs	r1, #128	; 0x80
 800e1a8:	68f8      	ldr	r0, [r7, #12]
 800e1aa:	f001 fca3 	bl	800faf4 <UART_WaitOnFlagUntilTimeout>
 800e1ae:	4603      	mov	r3, r0
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d005      	beq.n	800e1c0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	2220      	movs	r2, #32
 800e1b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800e1bc:	2303      	movs	r3, #3
 800e1be:	e03d      	b.n	800e23c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800e1c0:	69fb      	ldr	r3, [r7, #28]
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d10b      	bne.n	800e1de <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e1c6:	69bb      	ldr	r3, [r7, #24]
 800e1c8:	881b      	ldrh	r3, [r3, #0]
 800e1ca:	461a      	mov	r2, r3
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e1d4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800e1d6:	69bb      	ldr	r3, [r7, #24]
 800e1d8:	3302      	adds	r3, #2
 800e1da:	61bb      	str	r3, [r7, #24]
 800e1dc:	e007      	b.n	800e1ee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e1de:	69fb      	ldr	r3, [r7, #28]
 800e1e0:	781a      	ldrb	r2, [r3, #0]
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800e1e8:	69fb      	ldr	r3, [r7, #28]
 800e1ea:	3301      	adds	r3, #1
 800e1ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e1f4:	b29b      	uxth	r3, r3
 800e1f6:	3b01      	subs	r3, #1
 800e1f8:	b29a      	uxth	r2, r3
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e206:	b29b      	uxth	r3, r3
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d1c8      	bne.n	800e19e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e20c:	683b      	ldr	r3, [r7, #0]
 800e20e:	9300      	str	r3, [sp, #0]
 800e210:	697b      	ldr	r3, [r7, #20]
 800e212:	2200      	movs	r2, #0
 800e214:	2140      	movs	r1, #64	; 0x40
 800e216:	68f8      	ldr	r0, [r7, #12]
 800e218:	f001 fc6c 	bl	800faf4 <UART_WaitOnFlagUntilTimeout>
 800e21c:	4603      	mov	r3, r0
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d005      	beq.n	800e22e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	2220      	movs	r2, #32
 800e226:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800e22a:	2303      	movs	r3, #3
 800e22c:	e006      	b.n	800e23c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	2220      	movs	r2, #32
 800e232:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800e236:	2300      	movs	r3, #0
 800e238:	e000      	b.n	800e23c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800e23a:	2302      	movs	r3, #2
  }
}
 800e23c:	4618      	mov	r0, r3
 800e23e:	3720      	adds	r7, #32
 800e240:	46bd      	mov	sp, r7
 800e242:	bd80      	pop	{r7, pc}

0800e244 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e244:	b580      	push	{r7, lr}
 800e246:	b08a      	sub	sp, #40	; 0x28
 800e248:	af02      	add	r7, sp, #8
 800e24a:	60f8      	str	r0, [r7, #12]
 800e24c:	60b9      	str	r1, [r7, #8]
 800e24e:	603b      	str	r3, [r7, #0]
 800e250:	4613      	mov	r3, r2
 800e252:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e25a:	2b20      	cmp	r3, #32
 800e25c:	f040 80b5 	bne.w	800e3ca <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800e260:	68bb      	ldr	r3, [r7, #8]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d002      	beq.n	800e26c <HAL_UART_Receive+0x28>
 800e266:	88fb      	ldrh	r3, [r7, #6]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d101      	bne.n	800e270 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800e26c:	2301      	movs	r3, #1
 800e26e:	e0ad      	b.n	800e3cc <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	2200      	movs	r2, #0
 800e274:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	2222      	movs	r2, #34	; 0x22
 800e27c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	2200      	movs	r2, #0
 800e284:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e286:	f7f4 ff5d 	bl	8003144 <HAL_GetTick>
 800e28a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	88fa      	ldrh	r2, [r7, #6]
 800e290:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	88fa      	ldrh	r2, [r7, #6]
 800e298:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	689b      	ldr	r3, [r3, #8]
 800e2a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e2a4:	d10e      	bne.n	800e2c4 <HAL_UART_Receive+0x80>
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	691b      	ldr	r3, [r3, #16]
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d105      	bne.n	800e2ba <HAL_UART_Receive+0x76>
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	f240 12ff 	movw	r2, #511	; 0x1ff
 800e2b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e2b8:	e02d      	b.n	800e316 <HAL_UART_Receive+0xd2>
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	22ff      	movs	r2, #255	; 0xff
 800e2be:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e2c2:	e028      	b.n	800e316 <HAL_UART_Receive+0xd2>
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	689b      	ldr	r3, [r3, #8]
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d10d      	bne.n	800e2e8 <HAL_UART_Receive+0xa4>
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	691b      	ldr	r3, [r3, #16]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d104      	bne.n	800e2de <HAL_UART_Receive+0x9a>
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	22ff      	movs	r2, #255	; 0xff
 800e2d8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e2dc:	e01b      	b.n	800e316 <HAL_UART_Receive+0xd2>
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	227f      	movs	r2, #127	; 0x7f
 800e2e2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e2e6:	e016      	b.n	800e316 <HAL_UART_Receive+0xd2>
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	689b      	ldr	r3, [r3, #8]
 800e2ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e2f0:	d10d      	bne.n	800e30e <HAL_UART_Receive+0xca>
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	691b      	ldr	r3, [r3, #16]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d104      	bne.n	800e304 <HAL_UART_Receive+0xc0>
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	227f      	movs	r2, #127	; 0x7f
 800e2fe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e302:	e008      	b.n	800e316 <HAL_UART_Receive+0xd2>
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	223f      	movs	r2, #63	; 0x3f
 800e308:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e30c:	e003      	b.n	800e316 <HAL_UART_Receive+0xd2>
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	2200      	movs	r2, #0
 800e312:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e31c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	689b      	ldr	r3, [r3, #8]
 800e322:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e326:	d108      	bne.n	800e33a <HAL_UART_Receive+0xf6>
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	691b      	ldr	r3, [r3, #16]
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d104      	bne.n	800e33a <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800e330:	2300      	movs	r3, #0
 800e332:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800e334:	68bb      	ldr	r3, [r7, #8]
 800e336:	61bb      	str	r3, [r7, #24]
 800e338:	e003      	b.n	800e342 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800e33a:	68bb      	ldr	r3, [r7, #8]
 800e33c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e33e:	2300      	movs	r3, #0
 800e340:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800e342:	e036      	b.n	800e3b2 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800e344:	683b      	ldr	r3, [r7, #0]
 800e346:	9300      	str	r3, [sp, #0]
 800e348:	697b      	ldr	r3, [r7, #20]
 800e34a:	2200      	movs	r2, #0
 800e34c:	2120      	movs	r1, #32
 800e34e:	68f8      	ldr	r0, [r7, #12]
 800e350:	f001 fbd0 	bl	800faf4 <UART_WaitOnFlagUntilTimeout>
 800e354:	4603      	mov	r3, r0
 800e356:	2b00      	cmp	r3, #0
 800e358:	d005      	beq.n	800e366 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	2220      	movs	r2, #32
 800e35e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 800e362:	2303      	movs	r3, #3
 800e364:	e032      	b.n	800e3cc <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800e366:	69fb      	ldr	r3, [r7, #28]
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d10c      	bne.n	800e386 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e372:	b29a      	uxth	r2, r3
 800e374:	8a7b      	ldrh	r3, [r7, #18]
 800e376:	4013      	ands	r3, r2
 800e378:	b29a      	uxth	r2, r3
 800e37a:	69bb      	ldr	r3, [r7, #24]
 800e37c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800e37e:	69bb      	ldr	r3, [r7, #24]
 800e380:	3302      	adds	r3, #2
 800e382:	61bb      	str	r3, [r7, #24]
 800e384:	e00c      	b.n	800e3a0 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e38c:	b2da      	uxtb	r2, r3
 800e38e:	8a7b      	ldrh	r3, [r7, #18]
 800e390:	b2db      	uxtb	r3, r3
 800e392:	4013      	ands	r3, r2
 800e394:	b2da      	uxtb	r2, r3
 800e396:	69fb      	ldr	r3, [r7, #28]
 800e398:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800e39a:	69fb      	ldr	r3, [r7, #28]
 800e39c:	3301      	adds	r3, #1
 800e39e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e3a6:	b29b      	uxth	r3, r3
 800e3a8:	3b01      	subs	r3, #1
 800e3aa:	b29a      	uxth	r2, r3
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e3b8:	b29b      	uxth	r3, r3
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d1c2      	bne.n	800e344 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	2220      	movs	r2, #32
 800e3c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 800e3c6:	2300      	movs	r3, #0
 800e3c8:	e000      	b.n	800e3cc <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800e3ca:	2302      	movs	r3, #2
  }
}
 800e3cc:	4618      	mov	r0, r3
 800e3ce:	3720      	adds	r7, #32
 800e3d0:	46bd      	mov	sp, r7
 800e3d2:	bd80      	pop	{r7, pc}

0800e3d4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e3d4:	b580      	push	{r7, lr}
 800e3d6:	b08a      	sub	sp, #40	; 0x28
 800e3d8:	af00      	add	r7, sp, #0
 800e3da:	60f8      	str	r0, [r7, #12]
 800e3dc:	60b9      	str	r1, [r7, #8]
 800e3de:	4613      	mov	r3, r2
 800e3e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e3e8:	2b20      	cmp	r3, #32
 800e3ea:	d137      	bne.n	800e45c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800e3ec:	68bb      	ldr	r3, [r7, #8]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d002      	beq.n	800e3f8 <HAL_UART_Receive_IT+0x24>
 800e3f2:	88fb      	ldrh	r3, [r7, #6]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d101      	bne.n	800e3fc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800e3f8:	2301      	movs	r3, #1
 800e3fa:	e030      	b.n	800e45e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	2200      	movs	r2, #0
 800e400:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	4a18      	ldr	r2, [pc, #96]	; (800e468 <HAL_UART_Receive_IT+0x94>)
 800e408:	4293      	cmp	r3, r2
 800e40a:	d01f      	beq.n	800e44c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	685b      	ldr	r3, [r3, #4]
 800e412:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e416:	2b00      	cmp	r3, #0
 800e418:	d018      	beq.n	800e44c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e420:	697b      	ldr	r3, [r7, #20]
 800e422:	e853 3f00 	ldrex	r3, [r3]
 800e426:	613b      	str	r3, [r7, #16]
   return(result);
 800e428:	693b      	ldr	r3, [r7, #16]
 800e42a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e42e:	627b      	str	r3, [r7, #36]	; 0x24
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	461a      	mov	r2, r3
 800e436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e438:	623b      	str	r3, [r7, #32]
 800e43a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e43c:	69f9      	ldr	r1, [r7, #28]
 800e43e:	6a3a      	ldr	r2, [r7, #32]
 800e440:	e841 2300 	strex	r3, r2, [r1]
 800e444:	61bb      	str	r3, [r7, #24]
   return(result);
 800e446:	69bb      	ldr	r3, [r7, #24]
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d1e6      	bne.n	800e41a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800e44c:	88fb      	ldrh	r3, [r7, #6]
 800e44e:	461a      	mov	r2, r3
 800e450:	68b9      	ldr	r1, [r7, #8]
 800e452:	68f8      	ldr	r0, [r7, #12]
 800e454:	f001 fbbc 	bl	800fbd0 <UART_Start_Receive_IT>
 800e458:	4603      	mov	r3, r0
 800e45a:	e000      	b.n	800e45e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800e45c:	2302      	movs	r3, #2
  }
}
 800e45e:	4618      	mov	r0, r3
 800e460:	3728      	adds	r7, #40	; 0x28
 800e462:	46bd      	mov	sp, r7
 800e464:	bd80      	pop	{r7, pc}
 800e466:	bf00      	nop
 800e468:	58000c00 	.word	0x58000c00

0800e46c <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800e46c:	b580      	push	{r7, lr}
 800e46e:	b09a      	sub	sp, #104	; 0x68
 800e470:	af00      	add	r7, sp, #0
 800e472:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e47a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e47c:	e853 3f00 	ldrex	r3, [r3]
 800e480:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800e482:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e484:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e488:	667b      	str	r3, [r7, #100]	; 0x64
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	461a      	mov	r2, r3
 800e490:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e492:	657b      	str	r3, [r7, #84]	; 0x54
 800e494:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e496:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e498:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e49a:	e841 2300 	strex	r3, r2, [r1]
 800e49e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e4a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d1e6      	bne.n	800e474 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	3308      	adds	r3, #8
 800e4ac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4b0:	e853 3f00 	ldrex	r3, [r3]
 800e4b4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e4b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e4b8:	4b46      	ldr	r3, [pc, #280]	; (800e5d4 <HAL_UART_AbortReceive+0x168>)
 800e4ba:	4013      	ands	r3, r2
 800e4bc:	663b      	str	r3, [r7, #96]	; 0x60
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	3308      	adds	r3, #8
 800e4c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e4c6:	643a      	str	r2, [r7, #64]	; 0x40
 800e4c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e4cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e4ce:	e841 2300 	strex	r3, r2, [r1]
 800e4d2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e4d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d1e5      	bne.n	800e4a6 <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e4de:	2b01      	cmp	r3, #1
 800e4e0:	d118      	bne.n	800e514 <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4e8:	6a3b      	ldr	r3, [r7, #32]
 800e4ea:	e853 3f00 	ldrex	r3, [r3]
 800e4ee:	61fb      	str	r3, [r7, #28]
   return(result);
 800e4f0:	69fb      	ldr	r3, [r7, #28]
 800e4f2:	f023 0310 	bic.w	r3, r3, #16
 800e4f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	461a      	mov	r2, r3
 800e4fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e500:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e502:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e504:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e506:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e508:	e841 2300 	strex	r3, r2, [r1]
 800e50c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e50e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e510:	2b00      	cmp	r3, #0
 800e512:	d1e6      	bne.n	800e4e2 <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	689b      	ldr	r3, [r3, #8]
 800e51a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e51e:	2b40      	cmp	r3, #64	; 0x40
 800e520:	d13b      	bne.n	800e59a <HAL_UART_AbortReceive+0x12e>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	3308      	adds	r3, #8
 800e528:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	e853 3f00 	ldrex	r3, [r3]
 800e530:	60bb      	str	r3, [r7, #8]
   return(result);
 800e532:	68bb      	ldr	r3, [r7, #8]
 800e534:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e538:	65bb      	str	r3, [r7, #88]	; 0x58
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	3308      	adds	r3, #8
 800e540:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e542:	61ba      	str	r2, [r7, #24]
 800e544:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e546:	6979      	ldr	r1, [r7, #20]
 800e548:	69ba      	ldr	r2, [r7, #24]
 800e54a:	e841 2300 	strex	r3, r2, [r1]
 800e54e:	613b      	str	r3, [r7, #16]
   return(result);
 800e550:	693b      	ldr	r3, [r7, #16]
 800e552:	2b00      	cmp	r3, #0
 800e554:	d1e5      	bne.n	800e522 <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d01c      	beq.n	800e59a <HAL_UART_AbortReceive+0x12e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e566:	2200      	movs	r2, #0
 800e568:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e570:	4618      	mov	r0, r3
 800e572:	f7f7 fcd5 	bl	8005f20 <HAL_DMA_Abort>
 800e576:	4603      	mov	r3, r0
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d00e      	beq.n	800e59a <HAL_UART_AbortReceive+0x12e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e582:	4618      	mov	r0, r3
 800e584:	f7f9 f95a 	bl	800783c <HAL_DMA_GetError>
 800e588:	4603      	mov	r3, r0
 800e58a:	2b20      	cmp	r3, #32
 800e58c:	d105      	bne.n	800e59a <HAL_UART_AbortReceive+0x12e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	2210      	movs	r2, #16
 800e592:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 800e596:	2303      	movs	r3, #3
 800e598:	e017      	b.n	800e5ca <HAL_UART_AbortReceive+0x15e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	2200      	movs	r2, #0
 800e59e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	220f      	movs	r2, #15
 800e5a8:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	699a      	ldr	r2, [r3, #24]
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	f042 0208 	orr.w	r2, r2, #8
 800e5b8:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	2220      	movs	r2, #32
 800e5be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	2200      	movs	r2, #0
 800e5c6:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 800e5c8:	2300      	movs	r3, #0
}
 800e5ca:	4618      	mov	r0, r3
 800e5cc:	3768      	adds	r7, #104	; 0x68
 800e5ce:	46bd      	mov	sp, r7
 800e5d0:	bd80      	pop	{r7, pc}
 800e5d2:	bf00      	nop
 800e5d4:	effffffe 	.word	0xeffffffe

0800e5d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e5d8:	b580      	push	{r7, lr}
 800e5da:	b0ba      	sub	sp, #232	; 0xe8
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	69db      	ldr	r3, [r3, #28]
 800e5e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	689b      	ldr	r3, [r3, #8]
 800e5fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e5fe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800e602:	f640 030f 	movw	r3, #2063	; 0x80f
 800e606:	4013      	ands	r3, r2
 800e608:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800e60c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e610:	2b00      	cmp	r3, #0
 800e612:	d11b      	bne.n	800e64c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e614:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e618:	f003 0320 	and.w	r3, r3, #32
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d015      	beq.n	800e64c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e620:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e624:	f003 0320 	and.w	r3, r3, #32
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d105      	bne.n	800e638 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e62c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e634:	2b00      	cmp	r3, #0
 800e636:	d009      	beq.n	800e64c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	f000 8377 	beq.w	800ed30 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e646:	6878      	ldr	r0, [r7, #4]
 800e648:	4798      	blx	r3
      }
      return;
 800e64a:	e371      	b.n	800ed30 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e64c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e650:	2b00      	cmp	r3, #0
 800e652:	f000 8123 	beq.w	800e89c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800e656:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e65a:	4b8d      	ldr	r3, [pc, #564]	; (800e890 <HAL_UART_IRQHandler+0x2b8>)
 800e65c:	4013      	ands	r3, r2
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d106      	bne.n	800e670 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800e662:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800e666:	4b8b      	ldr	r3, [pc, #556]	; (800e894 <HAL_UART_IRQHandler+0x2bc>)
 800e668:	4013      	ands	r3, r2
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	f000 8116 	beq.w	800e89c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e674:	f003 0301 	and.w	r3, r3, #1
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d011      	beq.n	800e6a0 <HAL_UART_IRQHandler+0xc8>
 800e67c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e684:	2b00      	cmp	r3, #0
 800e686:	d00b      	beq.n	800e6a0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	2201      	movs	r2, #1
 800e68e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e696:	f043 0201 	orr.w	r2, r3, #1
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e6a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e6a4:	f003 0302 	and.w	r3, r3, #2
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d011      	beq.n	800e6d0 <HAL_UART_IRQHandler+0xf8>
 800e6ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e6b0:	f003 0301 	and.w	r3, r3, #1
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d00b      	beq.n	800e6d0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	2202      	movs	r2, #2
 800e6be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e6c6:	f043 0204 	orr.w	r2, r3, #4
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e6d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e6d4:	f003 0304 	and.w	r3, r3, #4
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d011      	beq.n	800e700 <HAL_UART_IRQHandler+0x128>
 800e6dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e6e0:	f003 0301 	and.w	r3, r3, #1
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d00b      	beq.n	800e700 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	2204      	movs	r2, #4
 800e6ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e6f6:	f043 0202 	orr.w	r2, r3, #2
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e700:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e704:	f003 0308 	and.w	r3, r3, #8
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d017      	beq.n	800e73c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e70c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e710:	f003 0320 	and.w	r3, r3, #32
 800e714:	2b00      	cmp	r3, #0
 800e716:	d105      	bne.n	800e724 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e718:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e71c:	4b5c      	ldr	r3, [pc, #368]	; (800e890 <HAL_UART_IRQHandler+0x2b8>)
 800e71e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e720:	2b00      	cmp	r3, #0
 800e722:	d00b      	beq.n	800e73c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	2208      	movs	r2, #8
 800e72a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e732:	f043 0208 	orr.w	r2, r3, #8
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e73c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e740:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e744:	2b00      	cmp	r3, #0
 800e746:	d012      	beq.n	800e76e <HAL_UART_IRQHandler+0x196>
 800e748:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e74c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e750:	2b00      	cmp	r3, #0
 800e752:	d00c      	beq.n	800e76e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e75c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e764:	f043 0220 	orr.w	r2, r3, #32
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e774:	2b00      	cmp	r3, #0
 800e776:	f000 82dd 	beq.w	800ed34 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e77a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e77e:	f003 0320 	and.w	r3, r3, #32
 800e782:	2b00      	cmp	r3, #0
 800e784:	d013      	beq.n	800e7ae <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e786:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e78a:	f003 0320 	and.w	r3, r3, #32
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d105      	bne.n	800e79e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e792:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d007      	beq.n	800e7ae <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d003      	beq.n	800e7ae <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e7aa:	6878      	ldr	r0, [r7, #4]
 800e7ac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e7b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	689b      	ldr	r3, [r3, #8]
 800e7be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e7c2:	2b40      	cmp	r3, #64	; 0x40
 800e7c4:	d005      	beq.n	800e7d2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e7c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e7ca:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d054      	beq.n	800e87c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e7d2:	6878      	ldr	r0, [r7, #4]
 800e7d4:	f001 fb1e 	bl	800fe14 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	689b      	ldr	r3, [r3, #8]
 800e7de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e7e2:	2b40      	cmp	r3, #64	; 0x40
 800e7e4:	d146      	bne.n	800e874 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	3308      	adds	r3, #8
 800e7ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e7f4:	e853 3f00 	ldrex	r3, [r3]
 800e7f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800e7fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e800:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e804:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	3308      	adds	r3, #8
 800e80e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e812:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e816:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e81a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e81e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e822:	e841 2300 	strex	r3, r2, [r1]
 800e826:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e82a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d1d9      	bne.n	800e7e6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d017      	beq.n	800e86c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e842:	4a15      	ldr	r2, [pc, #84]	; (800e898 <HAL_UART_IRQHandler+0x2c0>)
 800e844:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e84c:	4618      	mov	r0, r3
 800e84e:	f7f7 fe85 	bl	800655c <HAL_DMA_Abort_IT>
 800e852:	4603      	mov	r3, r0
 800e854:	2b00      	cmp	r3, #0
 800e856:	d019      	beq.n	800e88c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e85e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e860:	687a      	ldr	r2, [r7, #4]
 800e862:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800e866:	4610      	mov	r0, r2
 800e868:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e86a:	e00f      	b.n	800e88c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e86c:	6878      	ldr	r0, [r7, #4]
 800e86e:	f000 fa77 	bl	800ed60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e872:	e00b      	b.n	800e88c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e874:	6878      	ldr	r0, [r7, #4]
 800e876:	f000 fa73 	bl	800ed60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e87a:	e007      	b.n	800e88c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e87c:	6878      	ldr	r0, [r7, #4]
 800e87e:	f000 fa6f 	bl	800ed60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	2200      	movs	r2, #0
 800e886:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800e88a:	e253      	b.n	800ed34 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e88c:	bf00      	nop
    return;
 800e88e:	e251      	b.n	800ed34 <HAL_UART_IRQHandler+0x75c>
 800e890:	10000001 	.word	0x10000001
 800e894:	04000120 	.word	0x04000120
 800e898:	0800fee1 	.word	0x0800fee1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e8a0:	2b01      	cmp	r3, #1
 800e8a2:	f040 81e7 	bne.w	800ec74 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e8a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e8aa:	f003 0310 	and.w	r3, r3, #16
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	f000 81e0 	beq.w	800ec74 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e8b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e8b8:	f003 0310 	and.w	r3, r3, #16
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	f000 81d9 	beq.w	800ec74 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	2210      	movs	r2, #16
 800e8c8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	689b      	ldr	r3, [r3, #8]
 800e8d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e8d4:	2b40      	cmp	r3, #64	; 0x40
 800e8d6:	f040 8151 	bne.w	800eb7c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	4a96      	ldr	r2, [pc, #600]	; (800eb3c <HAL_UART_IRQHandler+0x564>)
 800e8e4:	4293      	cmp	r3, r2
 800e8e6:	d068      	beq.n	800e9ba <HAL_UART_IRQHandler+0x3e2>
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	4a93      	ldr	r2, [pc, #588]	; (800eb40 <HAL_UART_IRQHandler+0x568>)
 800e8f2:	4293      	cmp	r3, r2
 800e8f4:	d061      	beq.n	800e9ba <HAL_UART_IRQHandler+0x3e2>
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	4a91      	ldr	r2, [pc, #580]	; (800eb44 <HAL_UART_IRQHandler+0x56c>)
 800e900:	4293      	cmp	r3, r2
 800e902:	d05a      	beq.n	800e9ba <HAL_UART_IRQHandler+0x3e2>
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	4a8e      	ldr	r2, [pc, #568]	; (800eb48 <HAL_UART_IRQHandler+0x570>)
 800e90e:	4293      	cmp	r3, r2
 800e910:	d053      	beq.n	800e9ba <HAL_UART_IRQHandler+0x3e2>
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	4a8c      	ldr	r2, [pc, #560]	; (800eb4c <HAL_UART_IRQHandler+0x574>)
 800e91c:	4293      	cmp	r3, r2
 800e91e:	d04c      	beq.n	800e9ba <HAL_UART_IRQHandler+0x3e2>
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	4a89      	ldr	r2, [pc, #548]	; (800eb50 <HAL_UART_IRQHandler+0x578>)
 800e92a:	4293      	cmp	r3, r2
 800e92c:	d045      	beq.n	800e9ba <HAL_UART_IRQHandler+0x3e2>
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	4a87      	ldr	r2, [pc, #540]	; (800eb54 <HAL_UART_IRQHandler+0x57c>)
 800e938:	4293      	cmp	r3, r2
 800e93a:	d03e      	beq.n	800e9ba <HAL_UART_IRQHandler+0x3e2>
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	4a84      	ldr	r2, [pc, #528]	; (800eb58 <HAL_UART_IRQHandler+0x580>)
 800e946:	4293      	cmp	r3, r2
 800e948:	d037      	beq.n	800e9ba <HAL_UART_IRQHandler+0x3e2>
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	4a82      	ldr	r2, [pc, #520]	; (800eb5c <HAL_UART_IRQHandler+0x584>)
 800e954:	4293      	cmp	r3, r2
 800e956:	d030      	beq.n	800e9ba <HAL_UART_IRQHandler+0x3e2>
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	4a7f      	ldr	r2, [pc, #508]	; (800eb60 <HAL_UART_IRQHandler+0x588>)
 800e962:	4293      	cmp	r3, r2
 800e964:	d029      	beq.n	800e9ba <HAL_UART_IRQHandler+0x3e2>
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	4a7d      	ldr	r2, [pc, #500]	; (800eb64 <HAL_UART_IRQHandler+0x58c>)
 800e970:	4293      	cmp	r3, r2
 800e972:	d022      	beq.n	800e9ba <HAL_UART_IRQHandler+0x3e2>
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	4a7a      	ldr	r2, [pc, #488]	; (800eb68 <HAL_UART_IRQHandler+0x590>)
 800e97e:	4293      	cmp	r3, r2
 800e980:	d01b      	beq.n	800e9ba <HAL_UART_IRQHandler+0x3e2>
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	4a78      	ldr	r2, [pc, #480]	; (800eb6c <HAL_UART_IRQHandler+0x594>)
 800e98c:	4293      	cmp	r3, r2
 800e98e:	d014      	beq.n	800e9ba <HAL_UART_IRQHandler+0x3e2>
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	4a75      	ldr	r2, [pc, #468]	; (800eb70 <HAL_UART_IRQHandler+0x598>)
 800e99a:	4293      	cmp	r3, r2
 800e99c:	d00d      	beq.n	800e9ba <HAL_UART_IRQHandler+0x3e2>
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	4a73      	ldr	r2, [pc, #460]	; (800eb74 <HAL_UART_IRQHandler+0x59c>)
 800e9a8:	4293      	cmp	r3, r2
 800e9aa:	d006      	beq.n	800e9ba <HAL_UART_IRQHandler+0x3e2>
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	4a70      	ldr	r2, [pc, #448]	; (800eb78 <HAL_UART_IRQHandler+0x5a0>)
 800e9b6:	4293      	cmp	r3, r2
 800e9b8:	d106      	bne.n	800e9c8 <HAL_UART_IRQHandler+0x3f0>
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	685b      	ldr	r3, [r3, #4]
 800e9c4:	b29b      	uxth	r3, r3
 800e9c6:	e005      	b.n	800e9d4 <HAL_UART_IRQHandler+0x3fc>
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	685b      	ldr	r3, [r3, #4]
 800e9d2:	b29b      	uxth	r3, r3
 800e9d4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e9d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	f000 81ab 	beq.w	800ed38 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e9e8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e9ec:	429a      	cmp	r2, r3
 800e9ee:	f080 81a3 	bcs.w	800ed38 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e9f8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ea02:	69db      	ldr	r3, [r3, #28]
 800ea04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ea08:	f000 8087 	beq.w	800eb1a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea14:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ea18:	e853 3f00 	ldrex	r3, [r3]
 800ea1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ea20:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ea24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ea28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	461a      	mov	r2, r3
 800ea32:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ea36:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ea3a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea3e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ea42:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ea46:	e841 2300 	strex	r3, r2, [r1]
 800ea4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800ea4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d1da      	bne.n	800ea0c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	3308      	adds	r3, #8
 800ea5c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ea60:	e853 3f00 	ldrex	r3, [r3]
 800ea64:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ea66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ea68:	f023 0301 	bic.w	r3, r3, #1
 800ea6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	3308      	adds	r3, #8
 800ea76:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ea7a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ea7e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea80:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ea82:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ea86:	e841 2300 	strex	r3, r2, [r1]
 800ea8a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ea8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d1e1      	bne.n	800ea56 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	3308      	adds	r3, #8
 800ea98:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ea9c:	e853 3f00 	ldrex	r3, [r3]
 800eaa0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800eaa2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eaa4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eaa8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	3308      	adds	r3, #8
 800eab2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800eab6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800eab8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eaba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800eabc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800eabe:	e841 2300 	strex	r3, r2, [r1]
 800eac2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800eac4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d1e3      	bne.n	800ea92 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	2220      	movs	r2, #32
 800eace:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	2200      	movs	r2, #0
 800ead6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eade:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eae0:	e853 3f00 	ldrex	r3, [r3]
 800eae4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800eae6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eae8:	f023 0310 	bic.w	r3, r3, #16
 800eaec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	461a      	mov	r2, r3
 800eaf6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800eafa:	65bb      	str	r3, [r7, #88]	; 0x58
 800eafc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eafe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800eb00:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800eb02:	e841 2300 	strex	r3, r2, [r1]
 800eb06:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800eb08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d1e4      	bne.n	800ead8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eb14:	4618      	mov	r0, r3
 800eb16:	f7f7 fa03 	bl	8005f20 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	2202      	movs	r2, #2
 800eb1e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800eb2c:	b29b      	uxth	r3, r3
 800eb2e:	1ad3      	subs	r3, r2, r3
 800eb30:	b29b      	uxth	r3, r3
 800eb32:	4619      	mov	r1, r3
 800eb34:	6878      	ldr	r0, [r7, #4]
 800eb36:	f000 f91d 	bl	800ed74 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800eb3a:	e0fd      	b.n	800ed38 <HAL_UART_IRQHandler+0x760>
 800eb3c:	40020010 	.word	0x40020010
 800eb40:	40020028 	.word	0x40020028
 800eb44:	40020040 	.word	0x40020040
 800eb48:	40020058 	.word	0x40020058
 800eb4c:	40020070 	.word	0x40020070
 800eb50:	40020088 	.word	0x40020088
 800eb54:	400200a0 	.word	0x400200a0
 800eb58:	400200b8 	.word	0x400200b8
 800eb5c:	40020410 	.word	0x40020410
 800eb60:	40020428 	.word	0x40020428
 800eb64:	40020440 	.word	0x40020440
 800eb68:	40020458 	.word	0x40020458
 800eb6c:	40020470 	.word	0x40020470
 800eb70:	40020488 	.word	0x40020488
 800eb74:	400204a0 	.word	0x400204a0
 800eb78:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800eb88:	b29b      	uxth	r3, r3
 800eb8a:	1ad3      	subs	r3, r2, r3
 800eb8c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800eb96:	b29b      	uxth	r3, r3
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	f000 80cf 	beq.w	800ed3c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800eb9e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	f000 80ca 	beq.w	800ed3c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebb0:	e853 3f00 	ldrex	r3, [r3]
 800ebb4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ebb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebb8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ebbc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	461a      	mov	r2, r3
 800ebc6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ebca:	647b      	str	r3, [r7, #68]	; 0x44
 800ebcc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ebd0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ebd2:	e841 2300 	strex	r3, r2, [r1]
 800ebd6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ebd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d1e4      	bne.n	800eba8 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	3308      	adds	r3, #8
 800ebe4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebe8:	e853 3f00 	ldrex	r3, [r3]
 800ebec:	623b      	str	r3, [r7, #32]
   return(result);
 800ebee:	6a3a      	ldr	r2, [r7, #32]
 800ebf0:	4b55      	ldr	r3, [pc, #340]	; (800ed48 <HAL_UART_IRQHandler+0x770>)
 800ebf2:	4013      	ands	r3, r2
 800ebf4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	3308      	adds	r3, #8
 800ebfe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ec02:	633a      	str	r2, [r7, #48]	; 0x30
 800ec04:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ec08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec0a:	e841 2300 	strex	r3, r2, [r1]
 800ec0e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ec10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d1e3      	bne.n	800ebde <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	2220      	movs	r2, #32
 800ec1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	2200      	movs	r2, #0
 800ec22:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	2200      	movs	r2, #0
 800ec28:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec30:	693b      	ldr	r3, [r7, #16]
 800ec32:	e853 3f00 	ldrex	r3, [r3]
 800ec36:	60fb      	str	r3, [r7, #12]
   return(result);
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	f023 0310 	bic.w	r3, r3, #16
 800ec3e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	461a      	mov	r2, r3
 800ec48:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ec4c:	61fb      	str	r3, [r7, #28]
 800ec4e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec50:	69b9      	ldr	r1, [r7, #24]
 800ec52:	69fa      	ldr	r2, [r7, #28]
 800ec54:	e841 2300 	strex	r3, r2, [r1]
 800ec58:	617b      	str	r3, [r7, #20]
   return(result);
 800ec5a:	697b      	ldr	r3, [r7, #20]
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d1e4      	bne.n	800ec2a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	2202      	movs	r2, #2
 800ec64:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ec66:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ec6a:	4619      	mov	r1, r3
 800ec6c:	6878      	ldr	r0, [r7, #4]
 800ec6e:	f000 f881 	bl	800ed74 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ec72:	e063      	b.n	800ed3c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ec74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ec78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d00e      	beq.n	800ec9e <HAL_UART_IRQHandler+0x6c6>
 800ec80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ec84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d008      	beq.n	800ec9e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800ec94:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ec96:	6878      	ldr	r0, [r7, #4]
 800ec98:	f001 fe80 	bl	801099c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ec9c:	e051      	b.n	800ed42 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ec9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d014      	beq.n	800ecd4 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ecaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ecae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d105      	bne.n	800ecc2 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ecb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ecba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d008      	beq.n	800ecd4 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d03a      	beq.n	800ed40 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ecce:	6878      	ldr	r0, [r7, #4]
 800ecd0:	4798      	blx	r3
    }
    return;
 800ecd2:	e035      	b.n	800ed40 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ecd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ecd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d009      	beq.n	800ecf4 <HAL_UART_IRQHandler+0x71c>
 800ece0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ece4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d003      	beq.n	800ecf4 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800ecec:	6878      	ldr	r0, [r7, #4]
 800ecee:	f001 f90d 	bl	800ff0c <UART_EndTransmit_IT>
    return;
 800ecf2:	e026      	b.n	800ed42 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ecf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ecf8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d009      	beq.n	800ed14 <HAL_UART_IRQHandler+0x73c>
 800ed00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ed04:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d003      	beq.n	800ed14 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ed0c:	6878      	ldr	r0, [r7, #4]
 800ed0e:	f001 fe59 	bl	80109c4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ed12:	e016      	b.n	800ed42 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ed14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ed18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d010      	beq.n	800ed42 <HAL_UART_IRQHandler+0x76a>
 800ed20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	da0c      	bge.n	800ed42 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ed28:	6878      	ldr	r0, [r7, #4]
 800ed2a:	f001 fe41 	bl	80109b0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ed2e:	e008      	b.n	800ed42 <HAL_UART_IRQHandler+0x76a>
      return;
 800ed30:	bf00      	nop
 800ed32:	e006      	b.n	800ed42 <HAL_UART_IRQHandler+0x76a>
    return;
 800ed34:	bf00      	nop
 800ed36:	e004      	b.n	800ed42 <HAL_UART_IRQHandler+0x76a>
      return;
 800ed38:	bf00      	nop
 800ed3a:	e002      	b.n	800ed42 <HAL_UART_IRQHandler+0x76a>
      return;
 800ed3c:	bf00      	nop
 800ed3e:	e000      	b.n	800ed42 <HAL_UART_IRQHandler+0x76a>
    return;
 800ed40:	bf00      	nop
  }
}
 800ed42:	37e8      	adds	r7, #232	; 0xe8
 800ed44:	46bd      	mov	sp, r7
 800ed46:	bd80      	pop	{r7, pc}
 800ed48:	effffffe 	.word	0xeffffffe

0800ed4c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ed4c:	b480      	push	{r7}
 800ed4e:	b083      	sub	sp, #12
 800ed50:	af00      	add	r7, sp, #0
 800ed52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ed54:	bf00      	nop
 800ed56:	370c      	adds	r7, #12
 800ed58:	46bd      	mov	sp, r7
 800ed5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed5e:	4770      	bx	lr

0800ed60 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ed60:	b480      	push	{r7}
 800ed62:	b083      	sub	sp, #12
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ed68:	bf00      	nop
 800ed6a:	370c      	adds	r7, #12
 800ed6c:	46bd      	mov	sp, r7
 800ed6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed72:	4770      	bx	lr

0800ed74 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ed74:	b480      	push	{r7}
 800ed76:	b083      	sub	sp, #12
 800ed78:	af00      	add	r7, sp, #0
 800ed7a:	6078      	str	r0, [r7, #4]
 800ed7c:	460b      	mov	r3, r1
 800ed7e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ed80:	bf00      	nop
 800ed82:	370c      	adds	r7, #12
 800ed84:	46bd      	mov	sp, r7
 800ed86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed8a:	4770      	bx	lr

0800ed8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ed8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ed90:	b092      	sub	sp, #72	; 0x48
 800ed92:	af00      	add	r7, sp, #0
 800ed94:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ed96:	2300      	movs	r3, #0
 800ed98:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ed9c:	697b      	ldr	r3, [r7, #20]
 800ed9e:	689a      	ldr	r2, [r3, #8]
 800eda0:	697b      	ldr	r3, [r7, #20]
 800eda2:	691b      	ldr	r3, [r3, #16]
 800eda4:	431a      	orrs	r2, r3
 800eda6:	697b      	ldr	r3, [r7, #20]
 800eda8:	695b      	ldr	r3, [r3, #20]
 800edaa:	431a      	orrs	r2, r3
 800edac:	697b      	ldr	r3, [r7, #20]
 800edae:	69db      	ldr	r3, [r3, #28]
 800edb0:	4313      	orrs	r3, r2
 800edb2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800edb4:	697b      	ldr	r3, [r7, #20]
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	681a      	ldr	r2, [r3, #0]
 800edba:	4bbe      	ldr	r3, [pc, #760]	; (800f0b4 <UART_SetConfig+0x328>)
 800edbc:	4013      	ands	r3, r2
 800edbe:	697a      	ldr	r2, [r7, #20]
 800edc0:	6812      	ldr	r2, [r2, #0]
 800edc2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800edc4:	430b      	orrs	r3, r1
 800edc6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800edc8:	697b      	ldr	r3, [r7, #20]
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	685b      	ldr	r3, [r3, #4]
 800edce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800edd2:	697b      	ldr	r3, [r7, #20]
 800edd4:	68da      	ldr	r2, [r3, #12]
 800edd6:	697b      	ldr	r3, [r7, #20]
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	430a      	orrs	r2, r1
 800eddc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800edde:	697b      	ldr	r3, [r7, #20]
 800ede0:	699b      	ldr	r3, [r3, #24]
 800ede2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ede4:	697b      	ldr	r3, [r7, #20]
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	4ab3      	ldr	r2, [pc, #716]	; (800f0b8 <UART_SetConfig+0x32c>)
 800edea:	4293      	cmp	r3, r2
 800edec:	d004      	beq.n	800edf8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800edee:	697b      	ldr	r3, [r7, #20]
 800edf0:	6a1b      	ldr	r3, [r3, #32]
 800edf2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800edf4:	4313      	orrs	r3, r2
 800edf6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800edf8:	697b      	ldr	r3, [r7, #20]
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	689a      	ldr	r2, [r3, #8]
 800edfe:	4baf      	ldr	r3, [pc, #700]	; (800f0bc <UART_SetConfig+0x330>)
 800ee00:	4013      	ands	r3, r2
 800ee02:	697a      	ldr	r2, [r7, #20]
 800ee04:	6812      	ldr	r2, [r2, #0]
 800ee06:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ee08:	430b      	orrs	r3, r1
 800ee0a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ee0c:	697b      	ldr	r3, [r7, #20]
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee12:	f023 010f 	bic.w	r1, r3, #15
 800ee16:	697b      	ldr	r3, [r7, #20]
 800ee18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ee1a:	697b      	ldr	r3, [r7, #20]
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	430a      	orrs	r2, r1
 800ee20:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ee22:	697b      	ldr	r3, [r7, #20]
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	4aa6      	ldr	r2, [pc, #664]	; (800f0c0 <UART_SetConfig+0x334>)
 800ee28:	4293      	cmp	r3, r2
 800ee2a:	d177      	bne.n	800ef1c <UART_SetConfig+0x190>
 800ee2c:	4ba5      	ldr	r3, [pc, #660]	; (800f0c4 <UART_SetConfig+0x338>)
 800ee2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee30:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ee34:	2b28      	cmp	r3, #40	; 0x28
 800ee36:	d86d      	bhi.n	800ef14 <UART_SetConfig+0x188>
 800ee38:	a201      	add	r2, pc, #4	; (adr r2, 800ee40 <UART_SetConfig+0xb4>)
 800ee3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee3e:	bf00      	nop
 800ee40:	0800eee5 	.word	0x0800eee5
 800ee44:	0800ef15 	.word	0x0800ef15
 800ee48:	0800ef15 	.word	0x0800ef15
 800ee4c:	0800ef15 	.word	0x0800ef15
 800ee50:	0800ef15 	.word	0x0800ef15
 800ee54:	0800ef15 	.word	0x0800ef15
 800ee58:	0800ef15 	.word	0x0800ef15
 800ee5c:	0800ef15 	.word	0x0800ef15
 800ee60:	0800eeed 	.word	0x0800eeed
 800ee64:	0800ef15 	.word	0x0800ef15
 800ee68:	0800ef15 	.word	0x0800ef15
 800ee6c:	0800ef15 	.word	0x0800ef15
 800ee70:	0800ef15 	.word	0x0800ef15
 800ee74:	0800ef15 	.word	0x0800ef15
 800ee78:	0800ef15 	.word	0x0800ef15
 800ee7c:	0800ef15 	.word	0x0800ef15
 800ee80:	0800eef5 	.word	0x0800eef5
 800ee84:	0800ef15 	.word	0x0800ef15
 800ee88:	0800ef15 	.word	0x0800ef15
 800ee8c:	0800ef15 	.word	0x0800ef15
 800ee90:	0800ef15 	.word	0x0800ef15
 800ee94:	0800ef15 	.word	0x0800ef15
 800ee98:	0800ef15 	.word	0x0800ef15
 800ee9c:	0800ef15 	.word	0x0800ef15
 800eea0:	0800eefd 	.word	0x0800eefd
 800eea4:	0800ef15 	.word	0x0800ef15
 800eea8:	0800ef15 	.word	0x0800ef15
 800eeac:	0800ef15 	.word	0x0800ef15
 800eeb0:	0800ef15 	.word	0x0800ef15
 800eeb4:	0800ef15 	.word	0x0800ef15
 800eeb8:	0800ef15 	.word	0x0800ef15
 800eebc:	0800ef15 	.word	0x0800ef15
 800eec0:	0800ef05 	.word	0x0800ef05
 800eec4:	0800ef15 	.word	0x0800ef15
 800eec8:	0800ef15 	.word	0x0800ef15
 800eecc:	0800ef15 	.word	0x0800ef15
 800eed0:	0800ef15 	.word	0x0800ef15
 800eed4:	0800ef15 	.word	0x0800ef15
 800eed8:	0800ef15 	.word	0x0800ef15
 800eedc:	0800ef15 	.word	0x0800ef15
 800eee0:	0800ef0d 	.word	0x0800ef0d
 800eee4:	2301      	movs	r3, #1
 800eee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eeea:	e222      	b.n	800f332 <UART_SetConfig+0x5a6>
 800eeec:	2304      	movs	r3, #4
 800eeee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eef2:	e21e      	b.n	800f332 <UART_SetConfig+0x5a6>
 800eef4:	2308      	movs	r3, #8
 800eef6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eefa:	e21a      	b.n	800f332 <UART_SetConfig+0x5a6>
 800eefc:	2310      	movs	r3, #16
 800eefe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef02:	e216      	b.n	800f332 <UART_SetConfig+0x5a6>
 800ef04:	2320      	movs	r3, #32
 800ef06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef0a:	e212      	b.n	800f332 <UART_SetConfig+0x5a6>
 800ef0c:	2340      	movs	r3, #64	; 0x40
 800ef0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef12:	e20e      	b.n	800f332 <UART_SetConfig+0x5a6>
 800ef14:	2380      	movs	r3, #128	; 0x80
 800ef16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef1a:	e20a      	b.n	800f332 <UART_SetConfig+0x5a6>
 800ef1c:	697b      	ldr	r3, [r7, #20]
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	4a69      	ldr	r2, [pc, #420]	; (800f0c8 <UART_SetConfig+0x33c>)
 800ef22:	4293      	cmp	r3, r2
 800ef24:	d130      	bne.n	800ef88 <UART_SetConfig+0x1fc>
 800ef26:	4b67      	ldr	r3, [pc, #412]	; (800f0c4 <UART_SetConfig+0x338>)
 800ef28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef2a:	f003 0307 	and.w	r3, r3, #7
 800ef2e:	2b05      	cmp	r3, #5
 800ef30:	d826      	bhi.n	800ef80 <UART_SetConfig+0x1f4>
 800ef32:	a201      	add	r2, pc, #4	; (adr r2, 800ef38 <UART_SetConfig+0x1ac>)
 800ef34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef38:	0800ef51 	.word	0x0800ef51
 800ef3c:	0800ef59 	.word	0x0800ef59
 800ef40:	0800ef61 	.word	0x0800ef61
 800ef44:	0800ef69 	.word	0x0800ef69
 800ef48:	0800ef71 	.word	0x0800ef71
 800ef4c:	0800ef79 	.word	0x0800ef79
 800ef50:	2300      	movs	r3, #0
 800ef52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef56:	e1ec      	b.n	800f332 <UART_SetConfig+0x5a6>
 800ef58:	2304      	movs	r3, #4
 800ef5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef5e:	e1e8      	b.n	800f332 <UART_SetConfig+0x5a6>
 800ef60:	2308      	movs	r3, #8
 800ef62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef66:	e1e4      	b.n	800f332 <UART_SetConfig+0x5a6>
 800ef68:	2310      	movs	r3, #16
 800ef6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef6e:	e1e0      	b.n	800f332 <UART_SetConfig+0x5a6>
 800ef70:	2320      	movs	r3, #32
 800ef72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef76:	e1dc      	b.n	800f332 <UART_SetConfig+0x5a6>
 800ef78:	2340      	movs	r3, #64	; 0x40
 800ef7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef7e:	e1d8      	b.n	800f332 <UART_SetConfig+0x5a6>
 800ef80:	2380      	movs	r3, #128	; 0x80
 800ef82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef86:	e1d4      	b.n	800f332 <UART_SetConfig+0x5a6>
 800ef88:	697b      	ldr	r3, [r7, #20]
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	4a4f      	ldr	r2, [pc, #316]	; (800f0cc <UART_SetConfig+0x340>)
 800ef8e:	4293      	cmp	r3, r2
 800ef90:	d130      	bne.n	800eff4 <UART_SetConfig+0x268>
 800ef92:	4b4c      	ldr	r3, [pc, #304]	; (800f0c4 <UART_SetConfig+0x338>)
 800ef94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef96:	f003 0307 	and.w	r3, r3, #7
 800ef9a:	2b05      	cmp	r3, #5
 800ef9c:	d826      	bhi.n	800efec <UART_SetConfig+0x260>
 800ef9e:	a201      	add	r2, pc, #4	; (adr r2, 800efa4 <UART_SetConfig+0x218>)
 800efa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efa4:	0800efbd 	.word	0x0800efbd
 800efa8:	0800efc5 	.word	0x0800efc5
 800efac:	0800efcd 	.word	0x0800efcd
 800efb0:	0800efd5 	.word	0x0800efd5
 800efb4:	0800efdd 	.word	0x0800efdd
 800efb8:	0800efe5 	.word	0x0800efe5
 800efbc:	2300      	movs	r3, #0
 800efbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efc2:	e1b6      	b.n	800f332 <UART_SetConfig+0x5a6>
 800efc4:	2304      	movs	r3, #4
 800efc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efca:	e1b2      	b.n	800f332 <UART_SetConfig+0x5a6>
 800efcc:	2308      	movs	r3, #8
 800efce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efd2:	e1ae      	b.n	800f332 <UART_SetConfig+0x5a6>
 800efd4:	2310      	movs	r3, #16
 800efd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efda:	e1aa      	b.n	800f332 <UART_SetConfig+0x5a6>
 800efdc:	2320      	movs	r3, #32
 800efde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efe2:	e1a6      	b.n	800f332 <UART_SetConfig+0x5a6>
 800efe4:	2340      	movs	r3, #64	; 0x40
 800efe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efea:	e1a2      	b.n	800f332 <UART_SetConfig+0x5a6>
 800efec:	2380      	movs	r3, #128	; 0x80
 800efee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eff2:	e19e      	b.n	800f332 <UART_SetConfig+0x5a6>
 800eff4:	697b      	ldr	r3, [r7, #20]
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	4a35      	ldr	r2, [pc, #212]	; (800f0d0 <UART_SetConfig+0x344>)
 800effa:	4293      	cmp	r3, r2
 800effc:	d130      	bne.n	800f060 <UART_SetConfig+0x2d4>
 800effe:	4b31      	ldr	r3, [pc, #196]	; (800f0c4 <UART_SetConfig+0x338>)
 800f000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f002:	f003 0307 	and.w	r3, r3, #7
 800f006:	2b05      	cmp	r3, #5
 800f008:	d826      	bhi.n	800f058 <UART_SetConfig+0x2cc>
 800f00a:	a201      	add	r2, pc, #4	; (adr r2, 800f010 <UART_SetConfig+0x284>)
 800f00c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f010:	0800f029 	.word	0x0800f029
 800f014:	0800f031 	.word	0x0800f031
 800f018:	0800f039 	.word	0x0800f039
 800f01c:	0800f041 	.word	0x0800f041
 800f020:	0800f049 	.word	0x0800f049
 800f024:	0800f051 	.word	0x0800f051
 800f028:	2300      	movs	r3, #0
 800f02a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f02e:	e180      	b.n	800f332 <UART_SetConfig+0x5a6>
 800f030:	2304      	movs	r3, #4
 800f032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f036:	e17c      	b.n	800f332 <UART_SetConfig+0x5a6>
 800f038:	2308      	movs	r3, #8
 800f03a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f03e:	e178      	b.n	800f332 <UART_SetConfig+0x5a6>
 800f040:	2310      	movs	r3, #16
 800f042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f046:	e174      	b.n	800f332 <UART_SetConfig+0x5a6>
 800f048:	2320      	movs	r3, #32
 800f04a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f04e:	e170      	b.n	800f332 <UART_SetConfig+0x5a6>
 800f050:	2340      	movs	r3, #64	; 0x40
 800f052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f056:	e16c      	b.n	800f332 <UART_SetConfig+0x5a6>
 800f058:	2380      	movs	r3, #128	; 0x80
 800f05a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f05e:	e168      	b.n	800f332 <UART_SetConfig+0x5a6>
 800f060:	697b      	ldr	r3, [r7, #20]
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	4a1b      	ldr	r2, [pc, #108]	; (800f0d4 <UART_SetConfig+0x348>)
 800f066:	4293      	cmp	r3, r2
 800f068:	d142      	bne.n	800f0f0 <UART_SetConfig+0x364>
 800f06a:	4b16      	ldr	r3, [pc, #88]	; (800f0c4 <UART_SetConfig+0x338>)
 800f06c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f06e:	f003 0307 	and.w	r3, r3, #7
 800f072:	2b05      	cmp	r3, #5
 800f074:	d838      	bhi.n	800f0e8 <UART_SetConfig+0x35c>
 800f076:	a201      	add	r2, pc, #4	; (adr r2, 800f07c <UART_SetConfig+0x2f0>)
 800f078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f07c:	0800f095 	.word	0x0800f095
 800f080:	0800f09d 	.word	0x0800f09d
 800f084:	0800f0a5 	.word	0x0800f0a5
 800f088:	0800f0ad 	.word	0x0800f0ad
 800f08c:	0800f0d9 	.word	0x0800f0d9
 800f090:	0800f0e1 	.word	0x0800f0e1
 800f094:	2300      	movs	r3, #0
 800f096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f09a:	e14a      	b.n	800f332 <UART_SetConfig+0x5a6>
 800f09c:	2304      	movs	r3, #4
 800f09e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0a2:	e146      	b.n	800f332 <UART_SetConfig+0x5a6>
 800f0a4:	2308      	movs	r3, #8
 800f0a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0aa:	e142      	b.n	800f332 <UART_SetConfig+0x5a6>
 800f0ac:	2310      	movs	r3, #16
 800f0ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0b2:	e13e      	b.n	800f332 <UART_SetConfig+0x5a6>
 800f0b4:	cfff69f3 	.word	0xcfff69f3
 800f0b8:	58000c00 	.word	0x58000c00
 800f0bc:	11fff4ff 	.word	0x11fff4ff
 800f0c0:	40011000 	.word	0x40011000
 800f0c4:	58024400 	.word	0x58024400
 800f0c8:	40004400 	.word	0x40004400
 800f0cc:	40004800 	.word	0x40004800
 800f0d0:	40004c00 	.word	0x40004c00
 800f0d4:	40005000 	.word	0x40005000
 800f0d8:	2320      	movs	r3, #32
 800f0da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0de:	e128      	b.n	800f332 <UART_SetConfig+0x5a6>
 800f0e0:	2340      	movs	r3, #64	; 0x40
 800f0e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0e6:	e124      	b.n	800f332 <UART_SetConfig+0x5a6>
 800f0e8:	2380      	movs	r3, #128	; 0x80
 800f0ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0ee:	e120      	b.n	800f332 <UART_SetConfig+0x5a6>
 800f0f0:	697b      	ldr	r3, [r7, #20]
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	4acb      	ldr	r2, [pc, #812]	; (800f424 <UART_SetConfig+0x698>)
 800f0f6:	4293      	cmp	r3, r2
 800f0f8:	d176      	bne.n	800f1e8 <UART_SetConfig+0x45c>
 800f0fa:	4bcb      	ldr	r3, [pc, #812]	; (800f428 <UART_SetConfig+0x69c>)
 800f0fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f0fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f102:	2b28      	cmp	r3, #40	; 0x28
 800f104:	d86c      	bhi.n	800f1e0 <UART_SetConfig+0x454>
 800f106:	a201      	add	r2, pc, #4	; (adr r2, 800f10c <UART_SetConfig+0x380>)
 800f108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f10c:	0800f1b1 	.word	0x0800f1b1
 800f110:	0800f1e1 	.word	0x0800f1e1
 800f114:	0800f1e1 	.word	0x0800f1e1
 800f118:	0800f1e1 	.word	0x0800f1e1
 800f11c:	0800f1e1 	.word	0x0800f1e1
 800f120:	0800f1e1 	.word	0x0800f1e1
 800f124:	0800f1e1 	.word	0x0800f1e1
 800f128:	0800f1e1 	.word	0x0800f1e1
 800f12c:	0800f1b9 	.word	0x0800f1b9
 800f130:	0800f1e1 	.word	0x0800f1e1
 800f134:	0800f1e1 	.word	0x0800f1e1
 800f138:	0800f1e1 	.word	0x0800f1e1
 800f13c:	0800f1e1 	.word	0x0800f1e1
 800f140:	0800f1e1 	.word	0x0800f1e1
 800f144:	0800f1e1 	.word	0x0800f1e1
 800f148:	0800f1e1 	.word	0x0800f1e1
 800f14c:	0800f1c1 	.word	0x0800f1c1
 800f150:	0800f1e1 	.word	0x0800f1e1
 800f154:	0800f1e1 	.word	0x0800f1e1
 800f158:	0800f1e1 	.word	0x0800f1e1
 800f15c:	0800f1e1 	.word	0x0800f1e1
 800f160:	0800f1e1 	.word	0x0800f1e1
 800f164:	0800f1e1 	.word	0x0800f1e1
 800f168:	0800f1e1 	.word	0x0800f1e1
 800f16c:	0800f1c9 	.word	0x0800f1c9
 800f170:	0800f1e1 	.word	0x0800f1e1
 800f174:	0800f1e1 	.word	0x0800f1e1
 800f178:	0800f1e1 	.word	0x0800f1e1
 800f17c:	0800f1e1 	.word	0x0800f1e1
 800f180:	0800f1e1 	.word	0x0800f1e1
 800f184:	0800f1e1 	.word	0x0800f1e1
 800f188:	0800f1e1 	.word	0x0800f1e1
 800f18c:	0800f1d1 	.word	0x0800f1d1
 800f190:	0800f1e1 	.word	0x0800f1e1
 800f194:	0800f1e1 	.word	0x0800f1e1
 800f198:	0800f1e1 	.word	0x0800f1e1
 800f19c:	0800f1e1 	.word	0x0800f1e1
 800f1a0:	0800f1e1 	.word	0x0800f1e1
 800f1a4:	0800f1e1 	.word	0x0800f1e1
 800f1a8:	0800f1e1 	.word	0x0800f1e1
 800f1ac:	0800f1d9 	.word	0x0800f1d9
 800f1b0:	2301      	movs	r3, #1
 800f1b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1b6:	e0bc      	b.n	800f332 <UART_SetConfig+0x5a6>
 800f1b8:	2304      	movs	r3, #4
 800f1ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1be:	e0b8      	b.n	800f332 <UART_SetConfig+0x5a6>
 800f1c0:	2308      	movs	r3, #8
 800f1c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1c6:	e0b4      	b.n	800f332 <UART_SetConfig+0x5a6>
 800f1c8:	2310      	movs	r3, #16
 800f1ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1ce:	e0b0      	b.n	800f332 <UART_SetConfig+0x5a6>
 800f1d0:	2320      	movs	r3, #32
 800f1d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1d6:	e0ac      	b.n	800f332 <UART_SetConfig+0x5a6>
 800f1d8:	2340      	movs	r3, #64	; 0x40
 800f1da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1de:	e0a8      	b.n	800f332 <UART_SetConfig+0x5a6>
 800f1e0:	2380      	movs	r3, #128	; 0x80
 800f1e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1e6:	e0a4      	b.n	800f332 <UART_SetConfig+0x5a6>
 800f1e8:	697b      	ldr	r3, [r7, #20]
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	4a8f      	ldr	r2, [pc, #572]	; (800f42c <UART_SetConfig+0x6a0>)
 800f1ee:	4293      	cmp	r3, r2
 800f1f0:	d130      	bne.n	800f254 <UART_SetConfig+0x4c8>
 800f1f2:	4b8d      	ldr	r3, [pc, #564]	; (800f428 <UART_SetConfig+0x69c>)
 800f1f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f1f6:	f003 0307 	and.w	r3, r3, #7
 800f1fa:	2b05      	cmp	r3, #5
 800f1fc:	d826      	bhi.n	800f24c <UART_SetConfig+0x4c0>
 800f1fe:	a201      	add	r2, pc, #4	; (adr r2, 800f204 <UART_SetConfig+0x478>)
 800f200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f204:	0800f21d 	.word	0x0800f21d
 800f208:	0800f225 	.word	0x0800f225
 800f20c:	0800f22d 	.word	0x0800f22d
 800f210:	0800f235 	.word	0x0800f235
 800f214:	0800f23d 	.word	0x0800f23d
 800f218:	0800f245 	.word	0x0800f245
 800f21c:	2300      	movs	r3, #0
 800f21e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f222:	e086      	b.n	800f332 <UART_SetConfig+0x5a6>
 800f224:	2304      	movs	r3, #4
 800f226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f22a:	e082      	b.n	800f332 <UART_SetConfig+0x5a6>
 800f22c:	2308      	movs	r3, #8
 800f22e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f232:	e07e      	b.n	800f332 <UART_SetConfig+0x5a6>
 800f234:	2310      	movs	r3, #16
 800f236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f23a:	e07a      	b.n	800f332 <UART_SetConfig+0x5a6>
 800f23c:	2320      	movs	r3, #32
 800f23e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f242:	e076      	b.n	800f332 <UART_SetConfig+0x5a6>
 800f244:	2340      	movs	r3, #64	; 0x40
 800f246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f24a:	e072      	b.n	800f332 <UART_SetConfig+0x5a6>
 800f24c:	2380      	movs	r3, #128	; 0x80
 800f24e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f252:	e06e      	b.n	800f332 <UART_SetConfig+0x5a6>
 800f254:	697b      	ldr	r3, [r7, #20]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	4a75      	ldr	r2, [pc, #468]	; (800f430 <UART_SetConfig+0x6a4>)
 800f25a:	4293      	cmp	r3, r2
 800f25c:	d130      	bne.n	800f2c0 <UART_SetConfig+0x534>
 800f25e:	4b72      	ldr	r3, [pc, #456]	; (800f428 <UART_SetConfig+0x69c>)
 800f260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f262:	f003 0307 	and.w	r3, r3, #7
 800f266:	2b05      	cmp	r3, #5
 800f268:	d826      	bhi.n	800f2b8 <UART_SetConfig+0x52c>
 800f26a:	a201      	add	r2, pc, #4	; (adr r2, 800f270 <UART_SetConfig+0x4e4>)
 800f26c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f270:	0800f289 	.word	0x0800f289
 800f274:	0800f291 	.word	0x0800f291
 800f278:	0800f299 	.word	0x0800f299
 800f27c:	0800f2a1 	.word	0x0800f2a1
 800f280:	0800f2a9 	.word	0x0800f2a9
 800f284:	0800f2b1 	.word	0x0800f2b1
 800f288:	2300      	movs	r3, #0
 800f28a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f28e:	e050      	b.n	800f332 <UART_SetConfig+0x5a6>
 800f290:	2304      	movs	r3, #4
 800f292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f296:	e04c      	b.n	800f332 <UART_SetConfig+0x5a6>
 800f298:	2308      	movs	r3, #8
 800f29a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f29e:	e048      	b.n	800f332 <UART_SetConfig+0x5a6>
 800f2a0:	2310      	movs	r3, #16
 800f2a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f2a6:	e044      	b.n	800f332 <UART_SetConfig+0x5a6>
 800f2a8:	2320      	movs	r3, #32
 800f2aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f2ae:	e040      	b.n	800f332 <UART_SetConfig+0x5a6>
 800f2b0:	2340      	movs	r3, #64	; 0x40
 800f2b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f2b6:	e03c      	b.n	800f332 <UART_SetConfig+0x5a6>
 800f2b8:	2380      	movs	r3, #128	; 0x80
 800f2ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f2be:	e038      	b.n	800f332 <UART_SetConfig+0x5a6>
 800f2c0:	697b      	ldr	r3, [r7, #20]
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	4a5b      	ldr	r2, [pc, #364]	; (800f434 <UART_SetConfig+0x6a8>)
 800f2c6:	4293      	cmp	r3, r2
 800f2c8:	d130      	bne.n	800f32c <UART_SetConfig+0x5a0>
 800f2ca:	4b57      	ldr	r3, [pc, #348]	; (800f428 <UART_SetConfig+0x69c>)
 800f2cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f2ce:	f003 0307 	and.w	r3, r3, #7
 800f2d2:	2b05      	cmp	r3, #5
 800f2d4:	d826      	bhi.n	800f324 <UART_SetConfig+0x598>
 800f2d6:	a201      	add	r2, pc, #4	; (adr r2, 800f2dc <UART_SetConfig+0x550>)
 800f2d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2dc:	0800f2f5 	.word	0x0800f2f5
 800f2e0:	0800f2fd 	.word	0x0800f2fd
 800f2e4:	0800f305 	.word	0x0800f305
 800f2e8:	0800f30d 	.word	0x0800f30d
 800f2ec:	0800f315 	.word	0x0800f315
 800f2f0:	0800f31d 	.word	0x0800f31d
 800f2f4:	2302      	movs	r3, #2
 800f2f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f2fa:	e01a      	b.n	800f332 <UART_SetConfig+0x5a6>
 800f2fc:	2304      	movs	r3, #4
 800f2fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f302:	e016      	b.n	800f332 <UART_SetConfig+0x5a6>
 800f304:	2308      	movs	r3, #8
 800f306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f30a:	e012      	b.n	800f332 <UART_SetConfig+0x5a6>
 800f30c:	2310      	movs	r3, #16
 800f30e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f312:	e00e      	b.n	800f332 <UART_SetConfig+0x5a6>
 800f314:	2320      	movs	r3, #32
 800f316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f31a:	e00a      	b.n	800f332 <UART_SetConfig+0x5a6>
 800f31c:	2340      	movs	r3, #64	; 0x40
 800f31e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f322:	e006      	b.n	800f332 <UART_SetConfig+0x5a6>
 800f324:	2380      	movs	r3, #128	; 0x80
 800f326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f32a:	e002      	b.n	800f332 <UART_SetConfig+0x5a6>
 800f32c:	2380      	movs	r3, #128	; 0x80
 800f32e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f332:	697b      	ldr	r3, [r7, #20]
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	4a3f      	ldr	r2, [pc, #252]	; (800f434 <UART_SetConfig+0x6a8>)
 800f338:	4293      	cmp	r3, r2
 800f33a:	f040 80f8 	bne.w	800f52e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f33e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f342:	2b20      	cmp	r3, #32
 800f344:	dc46      	bgt.n	800f3d4 <UART_SetConfig+0x648>
 800f346:	2b02      	cmp	r3, #2
 800f348:	f2c0 8082 	blt.w	800f450 <UART_SetConfig+0x6c4>
 800f34c:	3b02      	subs	r3, #2
 800f34e:	2b1e      	cmp	r3, #30
 800f350:	d87e      	bhi.n	800f450 <UART_SetConfig+0x6c4>
 800f352:	a201      	add	r2, pc, #4	; (adr r2, 800f358 <UART_SetConfig+0x5cc>)
 800f354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f358:	0800f3db 	.word	0x0800f3db
 800f35c:	0800f451 	.word	0x0800f451
 800f360:	0800f3e3 	.word	0x0800f3e3
 800f364:	0800f451 	.word	0x0800f451
 800f368:	0800f451 	.word	0x0800f451
 800f36c:	0800f451 	.word	0x0800f451
 800f370:	0800f3f3 	.word	0x0800f3f3
 800f374:	0800f451 	.word	0x0800f451
 800f378:	0800f451 	.word	0x0800f451
 800f37c:	0800f451 	.word	0x0800f451
 800f380:	0800f451 	.word	0x0800f451
 800f384:	0800f451 	.word	0x0800f451
 800f388:	0800f451 	.word	0x0800f451
 800f38c:	0800f451 	.word	0x0800f451
 800f390:	0800f403 	.word	0x0800f403
 800f394:	0800f451 	.word	0x0800f451
 800f398:	0800f451 	.word	0x0800f451
 800f39c:	0800f451 	.word	0x0800f451
 800f3a0:	0800f451 	.word	0x0800f451
 800f3a4:	0800f451 	.word	0x0800f451
 800f3a8:	0800f451 	.word	0x0800f451
 800f3ac:	0800f451 	.word	0x0800f451
 800f3b0:	0800f451 	.word	0x0800f451
 800f3b4:	0800f451 	.word	0x0800f451
 800f3b8:	0800f451 	.word	0x0800f451
 800f3bc:	0800f451 	.word	0x0800f451
 800f3c0:	0800f451 	.word	0x0800f451
 800f3c4:	0800f451 	.word	0x0800f451
 800f3c8:	0800f451 	.word	0x0800f451
 800f3cc:	0800f451 	.word	0x0800f451
 800f3d0:	0800f443 	.word	0x0800f443
 800f3d4:	2b40      	cmp	r3, #64	; 0x40
 800f3d6:	d037      	beq.n	800f448 <UART_SetConfig+0x6bc>
 800f3d8:	e03a      	b.n	800f450 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800f3da:	f7fc f931 	bl	800b640 <HAL_RCCEx_GetD3PCLK1Freq>
 800f3de:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f3e0:	e03c      	b.n	800f45c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f3e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f3e6:	4618      	mov	r0, r3
 800f3e8:	f7fc f940 	bl	800b66c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f3ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f3f0:	e034      	b.n	800f45c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f3f2:	f107 0318 	add.w	r3, r7, #24
 800f3f6:	4618      	mov	r0, r3
 800f3f8:	f7fc fa8c 	bl	800b914 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f3fc:	69fb      	ldr	r3, [r7, #28]
 800f3fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f400:	e02c      	b.n	800f45c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f402:	4b09      	ldr	r3, [pc, #36]	; (800f428 <UART_SetConfig+0x69c>)
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	f003 0320 	and.w	r3, r3, #32
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d016      	beq.n	800f43c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f40e:	4b06      	ldr	r3, [pc, #24]	; (800f428 <UART_SetConfig+0x69c>)
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	08db      	lsrs	r3, r3, #3
 800f414:	f003 0303 	and.w	r3, r3, #3
 800f418:	4a07      	ldr	r2, [pc, #28]	; (800f438 <UART_SetConfig+0x6ac>)
 800f41a:	fa22 f303 	lsr.w	r3, r2, r3
 800f41e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f420:	e01c      	b.n	800f45c <UART_SetConfig+0x6d0>
 800f422:	bf00      	nop
 800f424:	40011400 	.word	0x40011400
 800f428:	58024400 	.word	0x58024400
 800f42c:	40007800 	.word	0x40007800
 800f430:	40007c00 	.word	0x40007c00
 800f434:	58000c00 	.word	0x58000c00
 800f438:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800f43c:	4b9d      	ldr	r3, [pc, #628]	; (800f6b4 <UART_SetConfig+0x928>)
 800f43e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f440:	e00c      	b.n	800f45c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f442:	4b9d      	ldr	r3, [pc, #628]	; (800f6b8 <UART_SetConfig+0x92c>)
 800f444:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f446:	e009      	b.n	800f45c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f448:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f44c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f44e:	e005      	b.n	800f45c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800f450:	2300      	movs	r3, #0
 800f452:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f454:	2301      	movs	r3, #1
 800f456:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f45a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f45c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f45e:	2b00      	cmp	r3, #0
 800f460:	f000 81de 	beq.w	800f820 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f464:	697b      	ldr	r3, [r7, #20]
 800f466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f468:	4a94      	ldr	r2, [pc, #592]	; (800f6bc <UART_SetConfig+0x930>)
 800f46a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f46e:	461a      	mov	r2, r3
 800f470:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f472:	fbb3 f3f2 	udiv	r3, r3, r2
 800f476:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f478:	697b      	ldr	r3, [r7, #20]
 800f47a:	685a      	ldr	r2, [r3, #4]
 800f47c:	4613      	mov	r3, r2
 800f47e:	005b      	lsls	r3, r3, #1
 800f480:	4413      	add	r3, r2
 800f482:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f484:	429a      	cmp	r2, r3
 800f486:	d305      	bcc.n	800f494 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f488:	697b      	ldr	r3, [r7, #20]
 800f48a:	685b      	ldr	r3, [r3, #4]
 800f48c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f48e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f490:	429a      	cmp	r2, r3
 800f492:	d903      	bls.n	800f49c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800f494:	2301      	movs	r3, #1
 800f496:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f49a:	e1c1      	b.n	800f820 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f49c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f49e:	2200      	movs	r2, #0
 800f4a0:	60bb      	str	r3, [r7, #8]
 800f4a2:	60fa      	str	r2, [r7, #12]
 800f4a4:	697b      	ldr	r3, [r7, #20]
 800f4a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4a8:	4a84      	ldr	r2, [pc, #528]	; (800f6bc <UART_SetConfig+0x930>)
 800f4aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f4ae:	b29b      	uxth	r3, r3
 800f4b0:	2200      	movs	r2, #0
 800f4b2:	603b      	str	r3, [r7, #0]
 800f4b4:	607a      	str	r2, [r7, #4]
 800f4b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f4ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f4be:	f7f0 ff0f 	bl	80002e0 <__aeabi_uldivmod>
 800f4c2:	4602      	mov	r2, r0
 800f4c4:	460b      	mov	r3, r1
 800f4c6:	4610      	mov	r0, r2
 800f4c8:	4619      	mov	r1, r3
 800f4ca:	f04f 0200 	mov.w	r2, #0
 800f4ce:	f04f 0300 	mov.w	r3, #0
 800f4d2:	020b      	lsls	r3, r1, #8
 800f4d4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f4d8:	0202      	lsls	r2, r0, #8
 800f4da:	6979      	ldr	r1, [r7, #20]
 800f4dc:	6849      	ldr	r1, [r1, #4]
 800f4de:	0849      	lsrs	r1, r1, #1
 800f4e0:	2000      	movs	r0, #0
 800f4e2:	460c      	mov	r4, r1
 800f4e4:	4605      	mov	r5, r0
 800f4e6:	eb12 0804 	adds.w	r8, r2, r4
 800f4ea:	eb43 0905 	adc.w	r9, r3, r5
 800f4ee:	697b      	ldr	r3, [r7, #20]
 800f4f0:	685b      	ldr	r3, [r3, #4]
 800f4f2:	2200      	movs	r2, #0
 800f4f4:	469a      	mov	sl, r3
 800f4f6:	4693      	mov	fp, r2
 800f4f8:	4652      	mov	r2, sl
 800f4fa:	465b      	mov	r3, fp
 800f4fc:	4640      	mov	r0, r8
 800f4fe:	4649      	mov	r1, r9
 800f500:	f7f0 feee 	bl	80002e0 <__aeabi_uldivmod>
 800f504:	4602      	mov	r2, r0
 800f506:	460b      	mov	r3, r1
 800f508:	4613      	mov	r3, r2
 800f50a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f50c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f50e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f512:	d308      	bcc.n	800f526 <UART_SetConfig+0x79a>
 800f514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f516:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f51a:	d204      	bcs.n	800f526 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800f51c:	697b      	ldr	r3, [r7, #20]
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f522:	60da      	str	r2, [r3, #12]
 800f524:	e17c      	b.n	800f820 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800f526:	2301      	movs	r3, #1
 800f528:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f52c:	e178      	b.n	800f820 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f52e:	697b      	ldr	r3, [r7, #20]
 800f530:	69db      	ldr	r3, [r3, #28]
 800f532:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f536:	f040 80c5 	bne.w	800f6c4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800f53a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f53e:	2b20      	cmp	r3, #32
 800f540:	dc48      	bgt.n	800f5d4 <UART_SetConfig+0x848>
 800f542:	2b00      	cmp	r3, #0
 800f544:	db7b      	blt.n	800f63e <UART_SetConfig+0x8b2>
 800f546:	2b20      	cmp	r3, #32
 800f548:	d879      	bhi.n	800f63e <UART_SetConfig+0x8b2>
 800f54a:	a201      	add	r2, pc, #4	; (adr r2, 800f550 <UART_SetConfig+0x7c4>)
 800f54c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f550:	0800f5db 	.word	0x0800f5db
 800f554:	0800f5e3 	.word	0x0800f5e3
 800f558:	0800f63f 	.word	0x0800f63f
 800f55c:	0800f63f 	.word	0x0800f63f
 800f560:	0800f5eb 	.word	0x0800f5eb
 800f564:	0800f63f 	.word	0x0800f63f
 800f568:	0800f63f 	.word	0x0800f63f
 800f56c:	0800f63f 	.word	0x0800f63f
 800f570:	0800f5fb 	.word	0x0800f5fb
 800f574:	0800f63f 	.word	0x0800f63f
 800f578:	0800f63f 	.word	0x0800f63f
 800f57c:	0800f63f 	.word	0x0800f63f
 800f580:	0800f63f 	.word	0x0800f63f
 800f584:	0800f63f 	.word	0x0800f63f
 800f588:	0800f63f 	.word	0x0800f63f
 800f58c:	0800f63f 	.word	0x0800f63f
 800f590:	0800f60b 	.word	0x0800f60b
 800f594:	0800f63f 	.word	0x0800f63f
 800f598:	0800f63f 	.word	0x0800f63f
 800f59c:	0800f63f 	.word	0x0800f63f
 800f5a0:	0800f63f 	.word	0x0800f63f
 800f5a4:	0800f63f 	.word	0x0800f63f
 800f5a8:	0800f63f 	.word	0x0800f63f
 800f5ac:	0800f63f 	.word	0x0800f63f
 800f5b0:	0800f63f 	.word	0x0800f63f
 800f5b4:	0800f63f 	.word	0x0800f63f
 800f5b8:	0800f63f 	.word	0x0800f63f
 800f5bc:	0800f63f 	.word	0x0800f63f
 800f5c0:	0800f63f 	.word	0x0800f63f
 800f5c4:	0800f63f 	.word	0x0800f63f
 800f5c8:	0800f63f 	.word	0x0800f63f
 800f5cc:	0800f63f 	.word	0x0800f63f
 800f5d0:	0800f631 	.word	0x0800f631
 800f5d4:	2b40      	cmp	r3, #64	; 0x40
 800f5d6:	d02e      	beq.n	800f636 <UART_SetConfig+0x8aa>
 800f5d8:	e031      	b.n	800f63e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f5da:	f7fa f839 	bl	8009650 <HAL_RCC_GetPCLK1Freq>
 800f5de:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f5e0:	e033      	b.n	800f64a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f5e2:	f7fa f84b 	bl	800967c <HAL_RCC_GetPCLK2Freq>
 800f5e6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f5e8:	e02f      	b.n	800f64a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f5ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f5ee:	4618      	mov	r0, r3
 800f5f0:	f7fc f83c 	bl	800b66c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f5f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f5f8:	e027      	b.n	800f64a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f5fa:	f107 0318 	add.w	r3, r7, #24
 800f5fe:	4618      	mov	r0, r3
 800f600:	f7fc f988 	bl	800b914 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f604:	69fb      	ldr	r3, [r7, #28]
 800f606:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f608:	e01f      	b.n	800f64a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f60a:	4b2d      	ldr	r3, [pc, #180]	; (800f6c0 <UART_SetConfig+0x934>)
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	f003 0320 	and.w	r3, r3, #32
 800f612:	2b00      	cmp	r3, #0
 800f614:	d009      	beq.n	800f62a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f616:	4b2a      	ldr	r3, [pc, #168]	; (800f6c0 <UART_SetConfig+0x934>)
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	08db      	lsrs	r3, r3, #3
 800f61c:	f003 0303 	and.w	r3, r3, #3
 800f620:	4a24      	ldr	r2, [pc, #144]	; (800f6b4 <UART_SetConfig+0x928>)
 800f622:	fa22 f303 	lsr.w	r3, r2, r3
 800f626:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f628:	e00f      	b.n	800f64a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800f62a:	4b22      	ldr	r3, [pc, #136]	; (800f6b4 <UART_SetConfig+0x928>)
 800f62c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f62e:	e00c      	b.n	800f64a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f630:	4b21      	ldr	r3, [pc, #132]	; (800f6b8 <UART_SetConfig+0x92c>)
 800f632:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f634:	e009      	b.n	800f64a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f636:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f63a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f63c:	e005      	b.n	800f64a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800f63e:	2300      	movs	r3, #0
 800f640:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f642:	2301      	movs	r3, #1
 800f644:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f648:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f64a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	f000 80e7 	beq.w	800f820 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f652:	697b      	ldr	r3, [r7, #20]
 800f654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f656:	4a19      	ldr	r2, [pc, #100]	; (800f6bc <UART_SetConfig+0x930>)
 800f658:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f65c:	461a      	mov	r2, r3
 800f65e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f660:	fbb3 f3f2 	udiv	r3, r3, r2
 800f664:	005a      	lsls	r2, r3, #1
 800f666:	697b      	ldr	r3, [r7, #20]
 800f668:	685b      	ldr	r3, [r3, #4]
 800f66a:	085b      	lsrs	r3, r3, #1
 800f66c:	441a      	add	r2, r3
 800f66e:	697b      	ldr	r3, [r7, #20]
 800f670:	685b      	ldr	r3, [r3, #4]
 800f672:	fbb2 f3f3 	udiv	r3, r2, r3
 800f676:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f67a:	2b0f      	cmp	r3, #15
 800f67c:	d916      	bls.n	800f6ac <UART_SetConfig+0x920>
 800f67e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f680:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f684:	d212      	bcs.n	800f6ac <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f688:	b29b      	uxth	r3, r3
 800f68a:	f023 030f 	bic.w	r3, r3, #15
 800f68e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f692:	085b      	lsrs	r3, r3, #1
 800f694:	b29b      	uxth	r3, r3
 800f696:	f003 0307 	and.w	r3, r3, #7
 800f69a:	b29a      	uxth	r2, r3
 800f69c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f69e:	4313      	orrs	r3, r2
 800f6a0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800f6a2:	697b      	ldr	r3, [r7, #20]
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f6a8:	60da      	str	r2, [r3, #12]
 800f6aa:	e0b9      	b.n	800f820 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f6ac:	2301      	movs	r3, #1
 800f6ae:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f6b2:	e0b5      	b.n	800f820 <UART_SetConfig+0xa94>
 800f6b4:	03d09000 	.word	0x03d09000
 800f6b8:	003d0900 	.word	0x003d0900
 800f6bc:	08014b18 	.word	0x08014b18
 800f6c0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800f6c4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f6c8:	2b20      	cmp	r3, #32
 800f6ca:	dc49      	bgt.n	800f760 <UART_SetConfig+0x9d4>
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	db7c      	blt.n	800f7ca <UART_SetConfig+0xa3e>
 800f6d0:	2b20      	cmp	r3, #32
 800f6d2:	d87a      	bhi.n	800f7ca <UART_SetConfig+0xa3e>
 800f6d4:	a201      	add	r2, pc, #4	; (adr r2, 800f6dc <UART_SetConfig+0x950>)
 800f6d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6da:	bf00      	nop
 800f6dc:	0800f767 	.word	0x0800f767
 800f6e0:	0800f76f 	.word	0x0800f76f
 800f6e4:	0800f7cb 	.word	0x0800f7cb
 800f6e8:	0800f7cb 	.word	0x0800f7cb
 800f6ec:	0800f777 	.word	0x0800f777
 800f6f0:	0800f7cb 	.word	0x0800f7cb
 800f6f4:	0800f7cb 	.word	0x0800f7cb
 800f6f8:	0800f7cb 	.word	0x0800f7cb
 800f6fc:	0800f787 	.word	0x0800f787
 800f700:	0800f7cb 	.word	0x0800f7cb
 800f704:	0800f7cb 	.word	0x0800f7cb
 800f708:	0800f7cb 	.word	0x0800f7cb
 800f70c:	0800f7cb 	.word	0x0800f7cb
 800f710:	0800f7cb 	.word	0x0800f7cb
 800f714:	0800f7cb 	.word	0x0800f7cb
 800f718:	0800f7cb 	.word	0x0800f7cb
 800f71c:	0800f797 	.word	0x0800f797
 800f720:	0800f7cb 	.word	0x0800f7cb
 800f724:	0800f7cb 	.word	0x0800f7cb
 800f728:	0800f7cb 	.word	0x0800f7cb
 800f72c:	0800f7cb 	.word	0x0800f7cb
 800f730:	0800f7cb 	.word	0x0800f7cb
 800f734:	0800f7cb 	.word	0x0800f7cb
 800f738:	0800f7cb 	.word	0x0800f7cb
 800f73c:	0800f7cb 	.word	0x0800f7cb
 800f740:	0800f7cb 	.word	0x0800f7cb
 800f744:	0800f7cb 	.word	0x0800f7cb
 800f748:	0800f7cb 	.word	0x0800f7cb
 800f74c:	0800f7cb 	.word	0x0800f7cb
 800f750:	0800f7cb 	.word	0x0800f7cb
 800f754:	0800f7cb 	.word	0x0800f7cb
 800f758:	0800f7cb 	.word	0x0800f7cb
 800f75c:	0800f7bd 	.word	0x0800f7bd
 800f760:	2b40      	cmp	r3, #64	; 0x40
 800f762:	d02e      	beq.n	800f7c2 <UART_SetConfig+0xa36>
 800f764:	e031      	b.n	800f7ca <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f766:	f7f9 ff73 	bl	8009650 <HAL_RCC_GetPCLK1Freq>
 800f76a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f76c:	e033      	b.n	800f7d6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f76e:	f7f9 ff85 	bl	800967c <HAL_RCC_GetPCLK2Freq>
 800f772:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f774:	e02f      	b.n	800f7d6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f776:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f77a:	4618      	mov	r0, r3
 800f77c:	f7fb ff76 	bl	800b66c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f782:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f784:	e027      	b.n	800f7d6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f786:	f107 0318 	add.w	r3, r7, #24
 800f78a:	4618      	mov	r0, r3
 800f78c:	f7fc f8c2 	bl	800b914 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f790:	69fb      	ldr	r3, [r7, #28]
 800f792:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f794:	e01f      	b.n	800f7d6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f796:	4b2d      	ldr	r3, [pc, #180]	; (800f84c <UART_SetConfig+0xac0>)
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	f003 0320 	and.w	r3, r3, #32
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d009      	beq.n	800f7b6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f7a2:	4b2a      	ldr	r3, [pc, #168]	; (800f84c <UART_SetConfig+0xac0>)
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	08db      	lsrs	r3, r3, #3
 800f7a8:	f003 0303 	and.w	r3, r3, #3
 800f7ac:	4a28      	ldr	r2, [pc, #160]	; (800f850 <UART_SetConfig+0xac4>)
 800f7ae:	fa22 f303 	lsr.w	r3, r2, r3
 800f7b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f7b4:	e00f      	b.n	800f7d6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800f7b6:	4b26      	ldr	r3, [pc, #152]	; (800f850 <UART_SetConfig+0xac4>)
 800f7b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f7ba:	e00c      	b.n	800f7d6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f7bc:	4b25      	ldr	r3, [pc, #148]	; (800f854 <UART_SetConfig+0xac8>)
 800f7be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f7c0:	e009      	b.n	800f7d6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f7c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f7c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f7c8:	e005      	b.n	800f7d6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800f7ca:	2300      	movs	r3, #0
 800f7cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f7ce:	2301      	movs	r3, #1
 800f7d0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f7d4:	bf00      	nop
    }

    if (pclk != 0U)
 800f7d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d021      	beq.n	800f820 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f7dc:	697b      	ldr	r3, [r7, #20]
 800f7de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7e0:	4a1d      	ldr	r2, [pc, #116]	; (800f858 <UART_SetConfig+0xacc>)
 800f7e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f7e6:	461a      	mov	r2, r3
 800f7e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7ea:	fbb3 f2f2 	udiv	r2, r3, r2
 800f7ee:	697b      	ldr	r3, [r7, #20]
 800f7f0:	685b      	ldr	r3, [r3, #4]
 800f7f2:	085b      	lsrs	r3, r3, #1
 800f7f4:	441a      	add	r2, r3
 800f7f6:	697b      	ldr	r3, [r7, #20]
 800f7f8:	685b      	ldr	r3, [r3, #4]
 800f7fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800f7fe:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f802:	2b0f      	cmp	r3, #15
 800f804:	d909      	bls.n	800f81a <UART_SetConfig+0xa8e>
 800f806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f808:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f80c:	d205      	bcs.n	800f81a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f80e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f810:	b29a      	uxth	r2, r3
 800f812:	697b      	ldr	r3, [r7, #20]
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	60da      	str	r2, [r3, #12]
 800f818:	e002      	b.n	800f820 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f81a:	2301      	movs	r3, #1
 800f81c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f820:	697b      	ldr	r3, [r7, #20]
 800f822:	2201      	movs	r2, #1
 800f824:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f828:	697b      	ldr	r3, [r7, #20]
 800f82a:	2201      	movs	r2, #1
 800f82c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f830:	697b      	ldr	r3, [r7, #20]
 800f832:	2200      	movs	r2, #0
 800f834:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800f836:	697b      	ldr	r3, [r7, #20]
 800f838:	2200      	movs	r2, #0
 800f83a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800f83c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800f840:	4618      	mov	r0, r3
 800f842:	3748      	adds	r7, #72	; 0x48
 800f844:	46bd      	mov	sp, r7
 800f846:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f84a:	bf00      	nop
 800f84c:	58024400 	.word	0x58024400
 800f850:	03d09000 	.word	0x03d09000
 800f854:	003d0900 	.word	0x003d0900
 800f858:	08014b18 	.word	0x08014b18

0800f85c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f85c:	b480      	push	{r7}
 800f85e:	b083      	sub	sp, #12
 800f860:	af00      	add	r7, sp, #0
 800f862:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f868:	f003 0308 	and.w	r3, r3, #8
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d00a      	beq.n	800f886 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	685b      	ldr	r3, [r3, #4]
 800f876:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	430a      	orrs	r2, r1
 800f884:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f88a:	f003 0301 	and.w	r3, r3, #1
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d00a      	beq.n	800f8a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	685b      	ldr	r3, [r3, #4]
 800f898:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	430a      	orrs	r2, r1
 800f8a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f8ac:	f003 0302 	and.w	r3, r3, #2
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d00a      	beq.n	800f8ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	685b      	ldr	r3, [r3, #4]
 800f8ba:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	430a      	orrs	r2, r1
 800f8c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f8ce:	f003 0304 	and.w	r3, r3, #4
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d00a      	beq.n	800f8ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	685b      	ldr	r3, [r3, #4]
 800f8dc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	430a      	orrs	r2, r1
 800f8ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f8f0:	f003 0310 	and.w	r3, r3, #16
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d00a      	beq.n	800f90e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	689b      	ldr	r3, [r3, #8]
 800f8fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	430a      	orrs	r2, r1
 800f90c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f912:	f003 0320 	and.w	r3, r3, #32
 800f916:	2b00      	cmp	r3, #0
 800f918:	d00a      	beq.n	800f930 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	681b      	ldr	r3, [r3, #0]
 800f91e:	689b      	ldr	r3, [r3, #8]
 800f920:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	430a      	orrs	r2, r1
 800f92e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d01a      	beq.n	800f972 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	685b      	ldr	r3, [r3, #4]
 800f942:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	430a      	orrs	r2, r1
 800f950:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f956:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f95a:	d10a      	bne.n	800f972 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	685b      	ldr	r3, [r3, #4]
 800f962:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	430a      	orrs	r2, r1
 800f970:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d00a      	beq.n	800f994 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	685b      	ldr	r3, [r3, #4]
 800f984:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	430a      	orrs	r2, r1
 800f992:	605a      	str	r2, [r3, #4]
  }
}
 800f994:	bf00      	nop
 800f996:	370c      	adds	r7, #12
 800f998:	46bd      	mov	sp, r7
 800f99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f99e:	4770      	bx	lr

0800f9a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f9a0:	b580      	push	{r7, lr}
 800f9a2:	b098      	sub	sp, #96	; 0x60
 800f9a4:	af02      	add	r7, sp, #8
 800f9a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	2200      	movs	r2, #0
 800f9ac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f9b0:	f7f3 fbc8 	bl	8003144 <HAL_GetTick>
 800f9b4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	f003 0308 	and.w	r3, r3, #8
 800f9c0:	2b08      	cmp	r3, #8
 800f9c2:	d12f      	bne.n	800fa24 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f9c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f9c8:	9300      	str	r3, [sp, #0]
 800f9ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f9cc:	2200      	movs	r2, #0
 800f9ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f9d2:	6878      	ldr	r0, [r7, #4]
 800f9d4:	f000 f88e 	bl	800faf4 <UART_WaitOnFlagUntilTimeout>
 800f9d8:	4603      	mov	r3, r0
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d022      	beq.n	800fa24 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9e6:	e853 3f00 	ldrex	r3, [r3]
 800f9ea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f9ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f9f2:	653b      	str	r3, [r7, #80]	; 0x50
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	461a      	mov	r2, r3
 800f9fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f9fc:	647b      	str	r3, [r7, #68]	; 0x44
 800f9fe:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa00:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fa02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fa04:	e841 2300 	strex	r3, r2, [r1]
 800fa08:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800fa0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d1e6      	bne.n	800f9de <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	2220      	movs	r2, #32
 800fa14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	2200      	movs	r2, #0
 800fa1c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fa20:	2303      	movs	r3, #3
 800fa22:	e063      	b.n	800faec <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	f003 0304 	and.w	r3, r3, #4
 800fa2e:	2b04      	cmp	r3, #4
 800fa30:	d149      	bne.n	800fac6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fa32:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800fa36:	9300      	str	r3, [sp, #0]
 800fa38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fa3a:	2200      	movs	r2, #0
 800fa3c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800fa40:	6878      	ldr	r0, [r7, #4]
 800fa42:	f000 f857 	bl	800faf4 <UART_WaitOnFlagUntilTimeout>
 800fa46:	4603      	mov	r3, r0
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d03c      	beq.n	800fac6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa54:	e853 3f00 	ldrex	r3, [r3]
 800fa58:	623b      	str	r3, [r7, #32]
   return(result);
 800fa5a:	6a3b      	ldr	r3, [r7, #32]
 800fa5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fa60:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	461a      	mov	r2, r3
 800fa68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fa6a:	633b      	str	r3, [r7, #48]	; 0x30
 800fa6c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fa70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fa72:	e841 2300 	strex	r3, r2, [r1]
 800fa76:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fa78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d1e6      	bne.n	800fa4c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	3308      	adds	r3, #8
 800fa84:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa86:	693b      	ldr	r3, [r7, #16]
 800fa88:	e853 3f00 	ldrex	r3, [r3]
 800fa8c:	60fb      	str	r3, [r7, #12]
   return(result);
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	f023 0301 	bic.w	r3, r3, #1
 800fa94:	64bb      	str	r3, [r7, #72]	; 0x48
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	3308      	adds	r3, #8
 800fa9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fa9e:	61fa      	str	r2, [r7, #28]
 800faa0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800faa2:	69b9      	ldr	r1, [r7, #24]
 800faa4:	69fa      	ldr	r2, [r7, #28]
 800faa6:	e841 2300 	strex	r3, r2, [r1]
 800faaa:	617b      	str	r3, [r7, #20]
   return(result);
 800faac:	697b      	ldr	r3, [r7, #20]
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d1e5      	bne.n	800fa7e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	2220      	movs	r2, #32
 800fab6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	2200      	movs	r2, #0
 800fabe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fac2:	2303      	movs	r3, #3
 800fac4:	e012      	b.n	800faec <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	2220      	movs	r2, #32
 800faca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	2220      	movs	r2, #32
 800fad2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	2200      	movs	r2, #0
 800fada:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	2200      	movs	r2, #0
 800fae0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	2200      	movs	r2, #0
 800fae6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800faea:	2300      	movs	r3, #0
}
 800faec:	4618      	mov	r0, r3
 800faee:	3758      	adds	r7, #88	; 0x58
 800faf0:	46bd      	mov	sp, r7
 800faf2:	bd80      	pop	{r7, pc}

0800faf4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800faf4:	b580      	push	{r7, lr}
 800faf6:	b084      	sub	sp, #16
 800faf8:	af00      	add	r7, sp, #0
 800fafa:	60f8      	str	r0, [r7, #12]
 800fafc:	60b9      	str	r1, [r7, #8]
 800fafe:	603b      	str	r3, [r7, #0]
 800fb00:	4613      	mov	r3, r2
 800fb02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fb04:	e04f      	b.n	800fba6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fb06:	69bb      	ldr	r3, [r7, #24]
 800fb08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fb0c:	d04b      	beq.n	800fba6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fb0e:	f7f3 fb19 	bl	8003144 <HAL_GetTick>
 800fb12:	4602      	mov	r2, r0
 800fb14:	683b      	ldr	r3, [r7, #0]
 800fb16:	1ad3      	subs	r3, r2, r3
 800fb18:	69ba      	ldr	r2, [r7, #24]
 800fb1a:	429a      	cmp	r2, r3
 800fb1c:	d302      	bcc.n	800fb24 <UART_WaitOnFlagUntilTimeout+0x30>
 800fb1e:	69bb      	ldr	r3, [r7, #24]
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d101      	bne.n	800fb28 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800fb24:	2303      	movs	r3, #3
 800fb26:	e04e      	b.n	800fbc6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	f003 0304 	and.w	r3, r3, #4
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d037      	beq.n	800fba6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800fb36:	68bb      	ldr	r3, [r7, #8]
 800fb38:	2b80      	cmp	r3, #128	; 0x80
 800fb3a:	d034      	beq.n	800fba6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800fb3c:	68bb      	ldr	r3, [r7, #8]
 800fb3e:	2b40      	cmp	r3, #64	; 0x40
 800fb40:	d031      	beq.n	800fba6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	69db      	ldr	r3, [r3, #28]
 800fb48:	f003 0308 	and.w	r3, r3, #8
 800fb4c:	2b08      	cmp	r3, #8
 800fb4e:	d110      	bne.n	800fb72 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800fb50:	68fb      	ldr	r3, [r7, #12]
 800fb52:	681b      	ldr	r3, [r3, #0]
 800fb54:	2208      	movs	r2, #8
 800fb56:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fb58:	68f8      	ldr	r0, [r7, #12]
 800fb5a:	f000 f95b 	bl	800fe14 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	2208      	movs	r2, #8
 800fb62:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	2200      	movs	r2, #0
 800fb6a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800fb6e:	2301      	movs	r3, #1
 800fb70:	e029      	b.n	800fbc6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	69db      	ldr	r3, [r3, #28]
 800fb78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fb7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fb80:	d111      	bne.n	800fba6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fb8a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fb8c:	68f8      	ldr	r0, [r7, #12]
 800fb8e:	f000 f941 	bl	800fe14 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	2220      	movs	r2, #32
 800fb96:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	2200      	movs	r2, #0
 800fb9e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800fba2:	2303      	movs	r3, #3
 800fba4:	e00f      	b.n	800fbc6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	69da      	ldr	r2, [r3, #28]
 800fbac:	68bb      	ldr	r3, [r7, #8]
 800fbae:	4013      	ands	r3, r2
 800fbb0:	68ba      	ldr	r2, [r7, #8]
 800fbb2:	429a      	cmp	r2, r3
 800fbb4:	bf0c      	ite	eq
 800fbb6:	2301      	moveq	r3, #1
 800fbb8:	2300      	movne	r3, #0
 800fbba:	b2db      	uxtb	r3, r3
 800fbbc:	461a      	mov	r2, r3
 800fbbe:	79fb      	ldrb	r3, [r7, #7]
 800fbc0:	429a      	cmp	r2, r3
 800fbc2:	d0a0      	beq.n	800fb06 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800fbc4:	2300      	movs	r3, #0
}
 800fbc6:	4618      	mov	r0, r3
 800fbc8:	3710      	adds	r7, #16
 800fbca:	46bd      	mov	sp, r7
 800fbcc:	bd80      	pop	{r7, pc}
	...

0800fbd0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fbd0:	b480      	push	{r7}
 800fbd2:	b0a3      	sub	sp, #140	; 0x8c
 800fbd4:	af00      	add	r7, sp, #0
 800fbd6:	60f8      	str	r0, [r7, #12]
 800fbd8:	60b9      	str	r1, [r7, #8]
 800fbda:	4613      	mov	r3, r2
 800fbdc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	68ba      	ldr	r2, [r7, #8]
 800fbe2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	88fa      	ldrh	r2, [r7, #6]
 800fbe8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	88fa      	ldrh	r2, [r7, #6]
 800fbf0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	2200      	movs	r2, #0
 800fbf8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800fbfa:	68fb      	ldr	r3, [r7, #12]
 800fbfc:	689b      	ldr	r3, [r3, #8]
 800fbfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fc02:	d10e      	bne.n	800fc22 <UART_Start_Receive_IT+0x52>
 800fc04:	68fb      	ldr	r3, [r7, #12]
 800fc06:	691b      	ldr	r3, [r3, #16]
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d105      	bne.n	800fc18 <UART_Start_Receive_IT+0x48>
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800fc12:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fc16:	e02d      	b.n	800fc74 <UART_Start_Receive_IT+0xa4>
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	22ff      	movs	r2, #255	; 0xff
 800fc1c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fc20:	e028      	b.n	800fc74 <UART_Start_Receive_IT+0xa4>
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	689b      	ldr	r3, [r3, #8]
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d10d      	bne.n	800fc46 <UART_Start_Receive_IT+0x76>
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	691b      	ldr	r3, [r3, #16]
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d104      	bne.n	800fc3c <UART_Start_Receive_IT+0x6c>
 800fc32:	68fb      	ldr	r3, [r7, #12]
 800fc34:	22ff      	movs	r2, #255	; 0xff
 800fc36:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fc3a:	e01b      	b.n	800fc74 <UART_Start_Receive_IT+0xa4>
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	227f      	movs	r2, #127	; 0x7f
 800fc40:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fc44:	e016      	b.n	800fc74 <UART_Start_Receive_IT+0xa4>
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	689b      	ldr	r3, [r3, #8]
 800fc4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fc4e:	d10d      	bne.n	800fc6c <UART_Start_Receive_IT+0x9c>
 800fc50:	68fb      	ldr	r3, [r7, #12]
 800fc52:	691b      	ldr	r3, [r3, #16]
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d104      	bne.n	800fc62 <UART_Start_Receive_IT+0x92>
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	227f      	movs	r2, #127	; 0x7f
 800fc5c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fc60:	e008      	b.n	800fc74 <UART_Start_Receive_IT+0xa4>
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	223f      	movs	r2, #63	; 0x3f
 800fc66:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fc6a:	e003      	b.n	800fc74 <UART_Start_Receive_IT+0xa4>
 800fc6c:	68fb      	ldr	r3, [r7, #12]
 800fc6e:	2200      	movs	r2, #0
 800fc70:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	2200      	movs	r2, #0
 800fc78:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	2222      	movs	r2, #34	; 0x22
 800fc80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	3308      	adds	r3, #8
 800fc8a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fc8e:	e853 3f00 	ldrex	r3, [r3]
 800fc92:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800fc94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fc96:	f043 0301 	orr.w	r3, r3, #1
 800fc9a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	3308      	adds	r3, #8
 800fca4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800fca8:	673a      	str	r2, [r7, #112]	; 0x70
 800fcaa:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcac:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800fcae:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800fcb0:	e841 2300 	strex	r3, r2, [r1]
 800fcb4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800fcb6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d1e3      	bne.n	800fc84 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fcc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fcc4:	d14f      	bne.n	800fd66 <UART_Start_Receive_IT+0x196>
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800fccc:	88fa      	ldrh	r2, [r7, #6]
 800fcce:	429a      	cmp	r2, r3
 800fcd0:	d349      	bcc.n	800fd66 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	689b      	ldr	r3, [r3, #8]
 800fcd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fcda:	d107      	bne.n	800fcec <UART_Start_Receive_IT+0x11c>
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	691b      	ldr	r3, [r3, #16]
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d103      	bne.n	800fcec <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	4a47      	ldr	r2, [pc, #284]	; (800fe04 <UART_Start_Receive_IT+0x234>)
 800fce8:	675a      	str	r2, [r3, #116]	; 0x74
 800fcea:	e002      	b.n	800fcf2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	4a46      	ldr	r2, [pc, #280]	; (800fe08 <UART_Start_Receive_IT+0x238>)
 800fcf0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	691b      	ldr	r3, [r3, #16]
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d01a      	beq.n	800fd30 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fd02:	e853 3f00 	ldrex	r3, [r3]
 800fd06:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800fd08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fd0e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	461a      	mov	r2, r3
 800fd18:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fd1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fd1e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd20:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fd22:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fd24:	e841 2300 	strex	r3, r2, [r1]
 800fd28:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800fd2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d1e4      	bne.n	800fcfa <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800fd30:	68fb      	ldr	r3, [r7, #12]
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	3308      	adds	r3, #8
 800fd36:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd3a:	e853 3f00 	ldrex	r3, [r3]
 800fd3e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fd40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fd46:	67fb      	str	r3, [r7, #124]	; 0x7c
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	3308      	adds	r3, #8
 800fd4e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800fd50:	64ba      	str	r2, [r7, #72]	; 0x48
 800fd52:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd54:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fd56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fd58:	e841 2300 	strex	r3, r2, [r1]
 800fd5c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800fd5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d1e5      	bne.n	800fd30 <UART_Start_Receive_IT+0x160>
 800fd64:	e046      	b.n	800fdf4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	689b      	ldr	r3, [r3, #8]
 800fd6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fd6e:	d107      	bne.n	800fd80 <UART_Start_Receive_IT+0x1b0>
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	691b      	ldr	r3, [r3, #16]
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d103      	bne.n	800fd80 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	4a24      	ldr	r2, [pc, #144]	; (800fe0c <UART_Start_Receive_IT+0x23c>)
 800fd7c:	675a      	str	r2, [r3, #116]	; 0x74
 800fd7e:	e002      	b.n	800fd86 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	4a23      	ldr	r2, [pc, #140]	; (800fe10 <UART_Start_Receive_IT+0x240>)
 800fd84:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	691b      	ldr	r3, [r3, #16]
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d019      	beq.n	800fdc2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd96:	e853 3f00 	ldrex	r3, [r3]
 800fd9a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fd9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd9e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800fda2:	677b      	str	r3, [r7, #116]	; 0x74
 800fda4:	68fb      	ldr	r3, [r7, #12]
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	461a      	mov	r2, r3
 800fdaa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fdac:	637b      	str	r3, [r7, #52]	; 0x34
 800fdae:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdb0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fdb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fdb4:	e841 2300 	strex	r3, r2, [r1]
 800fdb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800fdba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d1e6      	bne.n	800fd8e <UART_Start_Receive_IT+0x1be>
 800fdc0:	e018      	b.n	800fdf4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800fdc2:	68fb      	ldr	r3, [r7, #12]
 800fdc4:	681b      	ldr	r3, [r3, #0]
 800fdc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fdc8:	697b      	ldr	r3, [r7, #20]
 800fdca:	e853 3f00 	ldrex	r3, [r3]
 800fdce:	613b      	str	r3, [r7, #16]
   return(result);
 800fdd0:	693b      	ldr	r3, [r7, #16]
 800fdd2:	f043 0320 	orr.w	r3, r3, #32
 800fdd6:	67bb      	str	r3, [r7, #120]	; 0x78
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	681b      	ldr	r3, [r3, #0]
 800fddc:	461a      	mov	r2, r3
 800fdde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fde0:	623b      	str	r3, [r7, #32]
 800fde2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fde4:	69f9      	ldr	r1, [r7, #28]
 800fde6:	6a3a      	ldr	r2, [r7, #32]
 800fde8:	e841 2300 	strex	r3, r2, [r1]
 800fdec:	61bb      	str	r3, [r7, #24]
   return(result);
 800fdee:	69bb      	ldr	r3, [r7, #24]
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d1e6      	bne.n	800fdc2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800fdf4:	2300      	movs	r3, #0
}
 800fdf6:	4618      	mov	r0, r3
 800fdf8:	378c      	adds	r7, #140	; 0x8c
 800fdfa:	46bd      	mov	sp, r7
 800fdfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe00:	4770      	bx	lr
 800fe02:	bf00      	nop
 800fe04:	08010635 	.word	0x08010635
 800fe08:	080102d5 	.word	0x080102d5
 800fe0c:	0801011d 	.word	0x0801011d
 800fe10:	0800ff65 	.word	0x0800ff65

0800fe14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fe14:	b480      	push	{r7}
 800fe16:	b095      	sub	sp, #84	; 0x54
 800fe18:	af00      	add	r7, sp, #0
 800fe1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe24:	e853 3f00 	ldrex	r3, [r3]
 800fe28:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800fe2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fe30:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	461a      	mov	r2, r3
 800fe38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe3a:	643b      	str	r3, [r7, #64]	; 0x40
 800fe3c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe3e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fe40:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fe42:	e841 2300 	strex	r3, r2, [r1]
 800fe46:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fe48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d1e6      	bne.n	800fe1c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	3308      	adds	r3, #8
 800fe54:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe56:	6a3b      	ldr	r3, [r7, #32]
 800fe58:	e853 3f00 	ldrex	r3, [r3]
 800fe5c:	61fb      	str	r3, [r7, #28]
   return(result);
 800fe5e:	69fa      	ldr	r2, [r7, #28]
 800fe60:	4b1e      	ldr	r3, [pc, #120]	; (800fedc <UART_EndRxTransfer+0xc8>)
 800fe62:	4013      	ands	r3, r2
 800fe64:	64bb      	str	r3, [r7, #72]	; 0x48
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	3308      	adds	r3, #8
 800fe6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fe6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fe70:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fe74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fe76:	e841 2300 	strex	r3, r2, [r1]
 800fe7a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fe7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d1e5      	bne.n	800fe4e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe86:	2b01      	cmp	r3, #1
 800fe88:	d118      	bne.n	800febc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	e853 3f00 	ldrex	r3, [r3]
 800fe96:	60bb      	str	r3, [r7, #8]
   return(result);
 800fe98:	68bb      	ldr	r3, [r7, #8]
 800fe9a:	f023 0310 	bic.w	r3, r3, #16
 800fe9e:	647b      	str	r3, [r7, #68]	; 0x44
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	461a      	mov	r2, r3
 800fea6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fea8:	61bb      	str	r3, [r7, #24]
 800feaa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800feac:	6979      	ldr	r1, [r7, #20]
 800feae:	69ba      	ldr	r2, [r7, #24]
 800feb0:	e841 2300 	strex	r3, r2, [r1]
 800feb4:	613b      	str	r3, [r7, #16]
   return(result);
 800feb6:	693b      	ldr	r3, [r7, #16]
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d1e6      	bne.n	800fe8a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	2220      	movs	r2, #32
 800fec0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	2200      	movs	r2, #0
 800fec8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	2200      	movs	r2, #0
 800fece:	675a      	str	r2, [r3, #116]	; 0x74
}
 800fed0:	bf00      	nop
 800fed2:	3754      	adds	r7, #84	; 0x54
 800fed4:	46bd      	mov	sp, r7
 800fed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feda:	4770      	bx	lr
 800fedc:	effffffe 	.word	0xeffffffe

0800fee0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800fee0:	b580      	push	{r7, lr}
 800fee2:	b084      	sub	sp, #16
 800fee4:	af00      	add	r7, sp, #0
 800fee6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800feec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	2200      	movs	r2, #0
 800fef2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	2200      	movs	r2, #0
 800fefa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fefe:	68f8      	ldr	r0, [r7, #12]
 800ff00:	f7fe ff2e 	bl	800ed60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ff04:	bf00      	nop
 800ff06:	3710      	adds	r7, #16
 800ff08:	46bd      	mov	sp, r7
 800ff0a:	bd80      	pop	{r7, pc}

0800ff0c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ff0c:	b580      	push	{r7, lr}
 800ff0e:	b088      	sub	sp, #32
 800ff10:	af00      	add	r7, sp, #0
 800ff12:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	e853 3f00 	ldrex	r3, [r3]
 800ff20:	60bb      	str	r3, [r7, #8]
   return(result);
 800ff22:	68bb      	ldr	r3, [r7, #8]
 800ff24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ff28:	61fb      	str	r3, [r7, #28]
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	461a      	mov	r2, r3
 800ff30:	69fb      	ldr	r3, [r7, #28]
 800ff32:	61bb      	str	r3, [r7, #24]
 800ff34:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff36:	6979      	ldr	r1, [r7, #20]
 800ff38:	69ba      	ldr	r2, [r7, #24]
 800ff3a:	e841 2300 	strex	r3, r2, [r1]
 800ff3e:	613b      	str	r3, [r7, #16]
   return(result);
 800ff40:	693b      	ldr	r3, [r7, #16]
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d1e6      	bne.n	800ff14 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	2220      	movs	r2, #32
 800ff4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	2200      	movs	r2, #0
 800ff52:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ff54:	6878      	ldr	r0, [r7, #4]
 800ff56:	f7fe fef9 	bl	800ed4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ff5a:	bf00      	nop
 800ff5c:	3720      	adds	r7, #32
 800ff5e:	46bd      	mov	sp, r7
 800ff60:	bd80      	pop	{r7, pc}
	...

0800ff64 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ff64:	b580      	push	{r7, lr}
 800ff66:	b09c      	sub	sp, #112	; 0x70
 800ff68:	af00      	add	r7, sp, #0
 800ff6a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ff72:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ff7c:	2b22      	cmp	r3, #34	; 0x22
 800ff7e:	f040 80be 	bne.w	80100fe <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff88:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ff8c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800ff90:	b2d9      	uxtb	r1, r3
 800ff92:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800ff96:	b2da      	uxtb	r2, r3
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ff9c:	400a      	ands	r2, r1
 800ff9e:	b2d2      	uxtb	r2, r2
 800ffa0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ffa6:	1c5a      	adds	r2, r3, #1
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ffb2:	b29b      	uxth	r3, r3
 800ffb4:	3b01      	subs	r3, #1
 800ffb6:	b29a      	uxth	r2, r3
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ffc4:	b29b      	uxth	r3, r3
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	f040 80a1 	bne.w	801010e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ffd4:	e853 3f00 	ldrex	r3, [r3]
 800ffd8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ffda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ffdc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ffe0:	66bb      	str	r3, [r7, #104]	; 0x68
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	461a      	mov	r2, r3
 800ffe8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ffea:	65bb      	str	r3, [r7, #88]	; 0x58
 800ffec:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ffee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fff0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fff2:	e841 2300 	strex	r3, r2, [r1]
 800fff6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800fff8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d1e6      	bne.n	800ffcc <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	3308      	adds	r3, #8
 8010004:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010008:	e853 3f00 	ldrex	r3, [r3]
 801000c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801000e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010010:	f023 0301 	bic.w	r3, r3, #1
 8010014:	667b      	str	r3, [r7, #100]	; 0x64
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	3308      	adds	r3, #8
 801001c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801001e:	647a      	str	r2, [r7, #68]	; 0x44
 8010020:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010022:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010024:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010026:	e841 2300 	strex	r3, r2, [r1]
 801002a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801002c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801002e:	2b00      	cmp	r3, #0
 8010030:	d1e5      	bne.n	800fffe <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	2220      	movs	r2, #32
 8010036:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	2200      	movs	r2, #0
 801003e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	2200      	movs	r2, #0
 8010044:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	4a33      	ldr	r2, [pc, #204]	; (8010118 <UART_RxISR_8BIT+0x1b4>)
 801004c:	4293      	cmp	r3, r2
 801004e:	d01f      	beq.n	8010090 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	685b      	ldr	r3, [r3, #4]
 8010056:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801005a:	2b00      	cmp	r3, #0
 801005c:	d018      	beq.n	8010090 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010066:	e853 3f00 	ldrex	r3, [r3]
 801006a:	623b      	str	r3, [r7, #32]
   return(result);
 801006c:	6a3b      	ldr	r3, [r7, #32]
 801006e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8010072:	663b      	str	r3, [r7, #96]	; 0x60
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	461a      	mov	r2, r3
 801007a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801007c:	633b      	str	r3, [r7, #48]	; 0x30
 801007e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010080:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010082:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010084:	e841 2300 	strex	r3, r2, [r1]
 8010088:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801008a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801008c:	2b00      	cmp	r3, #0
 801008e:	d1e6      	bne.n	801005e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010094:	2b01      	cmp	r3, #1
 8010096:	d12e      	bne.n	80100f6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	2200      	movs	r2, #0
 801009c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100a4:	693b      	ldr	r3, [r7, #16]
 80100a6:	e853 3f00 	ldrex	r3, [r3]
 80100aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	f023 0310 	bic.w	r3, r3, #16
 80100b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	461a      	mov	r2, r3
 80100ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80100bc:	61fb      	str	r3, [r7, #28]
 80100be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100c0:	69b9      	ldr	r1, [r7, #24]
 80100c2:	69fa      	ldr	r2, [r7, #28]
 80100c4:	e841 2300 	strex	r3, r2, [r1]
 80100c8:	617b      	str	r3, [r7, #20]
   return(result);
 80100ca:	697b      	ldr	r3, [r7, #20]
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d1e6      	bne.n	801009e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	69db      	ldr	r3, [r3, #28]
 80100d6:	f003 0310 	and.w	r3, r3, #16
 80100da:	2b10      	cmp	r3, #16
 80100dc:	d103      	bne.n	80100e6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	2210      	movs	r2, #16
 80100e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80100ec:	4619      	mov	r1, r3
 80100ee:	6878      	ldr	r0, [r7, #4]
 80100f0:	f7fe fe40 	bl	800ed74 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80100f4:	e00b      	b.n	801010e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80100f6:	6878      	ldr	r0, [r7, #4]
 80100f8:	f7f1 f83c 	bl	8001174 <HAL_UART_RxCpltCallback>
}
 80100fc:	e007      	b.n	801010e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	699a      	ldr	r2, [r3, #24]
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	f042 0208 	orr.w	r2, r2, #8
 801010c:	619a      	str	r2, [r3, #24]
}
 801010e:	bf00      	nop
 8010110:	3770      	adds	r7, #112	; 0x70
 8010112:	46bd      	mov	sp, r7
 8010114:	bd80      	pop	{r7, pc}
 8010116:	bf00      	nop
 8010118:	58000c00 	.word	0x58000c00

0801011c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801011c:	b580      	push	{r7, lr}
 801011e:	b09c      	sub	sp, #112	; 0x70
 8010120:	af00      	add	r7, sp, #0
 8010122:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801012a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010134:	2b22      	cmp	r3, #34	; 0x22
 8010136:	f040 80be 	bne.w	80102b6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010140:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010148:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 801014a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 801014e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8010152:	4013      	ands	r3, r2
 8010154:	b29a      	uxth	r2, r3
 8010156:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010158:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801015e:	1c9a      	adds	r2, r3, #2
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801016a:	b29b      	uxth	r3, r3
 801016c:	3b01      	subs	r3, #1
 801016e:	b29a      	uxth	r2, r3
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801017c:	b29b      	uxth	r3, r3
 801017e:	2b00      	cmp	r3, #0
 8010180:	f040 80a1 	bne.w	80102c6 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801018a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801018c:	e853 3f00 	ldrex	r3, [r3]
 8010190:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8010192:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010194:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010198:	667b      	str	r3, [r7, #100]	; 0x64
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	461a      	mov	r2, r3
 80101a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80101a2:	657b      	str	r3, [r7, #84]	; 0x54
 80101a4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101a6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80101a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80101aa:	e841 2300 	strex	r3, r2, [r1]
 80101ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80101b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d1e6      	bne.n	8010184 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	3308      	adds	r3, #8
 80101bc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101c0:	e853 3f00 	ldrex	r3, [r3]
 80101c4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80101c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101c8:	f023 0301 	bic.w	r3, r3, #1
 80101cc:	663b      	str	r3, [r7, #96]	; 0x60
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	3308      	adds	r3, #8
 80101d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80101d6:	643a      	str	r2, [r7, #64]	; 0x40
 80101d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101da:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80101dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80101de:	e841 2300 	strex	r3, r2, [r1]
 80101e2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80101e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d1e5      	bne.n	80101b6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	2220      	movs	r2, #32
 80101ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	2200      	movs	r2, #0
 80101f6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	2200      	movs	r2, #0
 80101fc:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	4a33      	ldr	r2, [pc, #204]	; (80102d0 <UART_RxISR_16BIT+0x1b4>)
 8010204:	4293      	cmp	r3, r2
 8010206:	d01f      	beq.n	8010248 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	685b      	ldr	r3, [r3, #4]
 801020e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010212:	2b00      	cmp	r3, #0
 8010214:	d018      	beq.n	8010248 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801021c:	6a3b      	ldr	r3, [r7, #32]
 801021e:	e853 3f00 	ldrex	r3, [r3]
 8010222:	61fb      	str	r3, [r7, #28]
   return(result);
 8010224:	69fb      	ldr	r3, [r7, #28]
 8010226:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801022a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	681b      	ldr	r3, [r3, #0]
 8010230:	461a      	mov	r2, r3
 8010232:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010234:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010236:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010238:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801023a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801023c:	e841 2300 	strex	r3, r2, [r1]
 8010240:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010244:	2b00      	cmp	r3, #0
 8010246:	d1e6      	bne.n	8010216 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801024c:	2b01      	cmp	r3, #1
 801024e:	d12e      	bne.n	80102ae <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	2200      	movs	r2, #0
 8010254:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	e853 3f00 	ldrex	r3, [r3]
 8010262:	60bb      	str	r3, [r7, #8]
   return(result);
 8010264:	68bb      	ldr	r3, [r7, #8]
 8010266:	f023 0310 	bic.w	r3, r3, #16
 801026a:	65bb      	str	r3, [r7, #88]	; 0x58
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	461a      	mov	r2, r3
 8010272:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010274:	61bb      	str	r3, [r7, #24]
 8010276:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010278:	6979      	ldr	r1, [r7, #20]
 801027a:	69ba      	ldr	r2, [r7, #24]
 801027c:	e841 2300 	strex	r3, r2, [r1]
 8010280:	613b      	str	r3, [r7, #16]
   return(result);
 8010282:	693b      	ldr	r3, [r7, #16]
 8010284:	2b00      	cmp	r3, #0
 8010286:	d1e6      	bne.n	8010256 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	69db      	ldr	r3, [r3, #28]
 801028e:	f003 0310 	and.w	r3, r3, #16
 8010292:	2b10      	cmp	r3, #16
 8010294:	d103      	bne.n	801029e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	2210      	movs	r2, #16
 801029c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80102a4:	4619      	mov	r1, r3
 80102a6:	6878      	ldr	r0, [r7, #4]
 80102a8:	f7fe fd64 	bl	800ed74 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80102ac:	e00b      	b.n	80102c6 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80102ae:	6878      	ldr	r0, [r7, #4]
 80102b0:	f7f0 ff60 	bl	8001174 <HAL_UART_RxCpltCallback>
}
 80102b4:	e007      	b.n	80102c6 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	699a      	ldr	r2, [r3, #24]
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	f042 0208 	orr.w	r2, r2, #8
 80102c4:	619a      	str	r2, [r3, #24]
}
 80102c6:	bf00      	nop
 80102c8:	3770      	adds	r7, #112	; 0x70
 80102ca:	46bd      	mov	sp, r7
 80102cc:	bd80      	pop	{r7, pc}
 80102ce:	bf00      	nop
 80102d0:	58000c00 	.word	0x58000c00

080102d4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80102d4:	b580      	push	{r7, lr}
 80102d6:	b0ac      	sub	sp, #176	; 0xb0
 80102d8:	af00      	add	r7, sp, #0
 80102da:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80102e2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	69db      	ldr	r3, [r3, #28]
 80102ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	681b      	ldr	r3, [r3, #0]
 80102f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	689b      	ldr	r3, [r3, #8]
 8010300:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801030a:	2b22      	cmp	r3, #34	; 0x22
 801030c:	f040 8180 	bne.w	8010610 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010316:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801031a:	e123      	b.n	8010564 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010322:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8010326:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 801032a:	b2d9      	uxtb	r1, r3
 801032c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8010330:	b2da      	uxtb	r2, r3
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010336:	400a      	ands	r2, r1
 8010338:	b2d2      	uxtb	r2, r2
 801033a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010340:	1c5a      	adds	r2, r3, #1
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801034c:	b29b      	uxth	r3, r3
 801034e:	3b01      	subs	r3, #1
 8010350:	b29a      	uxth	r2, r3
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	69db      	ldr	r3, [r3, #28]
 801035e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8010362:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010366:	f003 0307 	and.w	r3, r3, #7
 801036a:	2b00      	cmp	r3, #0
 801036c:	d053      	beq.n	8010416 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801036e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010372:	f003 0301 	and.w	r3, r3, #1
 8010376:	2b00      	cmp	r3, #0
 8010378:	d011      	beq.n	801039e <UART_RxISR_8BIT_FIFOEN+0xca>
 801037a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801037e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010382:	2b00      	cmp	r3, #0
 8010384:	d00b      	beq.n	801039e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	681b      	ldr	r3, [r3, #0]
 801038a:	2201      	movs	r2, #1
 801038c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010394:	f043 0201 	orr.w	r2, r3, #1
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801039e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80103a2:	f003 0302 	and.w	r3, r3, #2
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d011      	beq.n	80103ce <UART_RxISR_8BIT_FIFOEN+0xfa>
 80103aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80103ae:	f003 0301 	and.w	r3, r3, #1
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d00b      	beq.n	80103ce <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	2202      	movs	r2, #2
 80103bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80103c4:	f043 0204 	orr.w	r2, r3, #4
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80103ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80103d2:	f003 0304 	and.w	r3, r3, #4
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d011      	beq.n	80103fe <UART_RxISR_8BIT_FIFOEN+0x12a>
 80103da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80103de:	f003 0301 	and.w	r3, r3, #1
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	d00b      	beq.n	80103fe <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	2204      	movs	r2, #4
 80103ec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80103f4:	f043 0202 	orr.w	r2, r3, #2
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010404:	2b00      	cmp	r3, #0
 8010406:	d006      	beq.n	8010416 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010408:	6878      	ldr	r0, [r7, #4]
 801040a:	f7fe fca9 	bl	800ed60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	2200      	movs	r2, #0
 8010412:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801041c:	b29b      	uxth	r3, r3
 801041e:	2b00      	cmp	r3, #0
 8010420:	f040 80a0 	bne.w	8010564 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801042a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801042c:	e853 3f00 	ldrex	r3, [r3]
 8010430:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8010432:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010434:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010438:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	461a      	mov	r2, r3
 8010442:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010446:	67fb      	str	r3, [r7, #124]	; 0x7c
 8010448:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801044a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 801044c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801044e:	e841 2300 	strex	r3, r2, [r1]
 8010452:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8010454:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010456:	2b00      	cmp	r3, #0
 8010458:	d1e4      	bne.n	8010424 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	681b      	ldr	r3, [r3, #0]
 801045e:	3308      	adds	r3, #8
 8010460:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010462:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010464:	e853 3f00 	ldrex	r3, [r3]
 8010468:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 801046a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801046c:	4b6e      	ldr	r3, [pc, #440]	; (8010628 <UART_RxISR_8BIT_FIFOEN+0x354>)
 801046e:	4013      	ands	r3, r2
 8010470:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	3308      	adds	r3, #8
 801047a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801047e:	66ba      	str	r2, [r7, #104]	; 0x68
 8010480:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010482:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8010484:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010486:	e841 2300 	strex	r3, r2, [r1]
 801048a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 801048c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801048e:	2b00      	cmp	r3, #0
 8010490:	d1e3      	bne.n	801045a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	2220      	movs	r2, #32
 8010496:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	2200      	movs	r2, #0
 801049e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	2200      	movs	r2, #0
 80104a4:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	681b      	ldr	r3, [r3, #0]
 80104aa:	4a60      	ldr	r2, [pc, #384]	; (801062c <UART_RxISR_8BIT_FIFOEN+0x358>)
 80104ac:	4293      	cmp	r3, r2
 80104ae:	d021      	beq.n	80104f4 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	685b      	ldr	r3, [r3, #4]
 80104b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d01a      	beq.n	80104f4 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	681b      	ldr	r3, [r3, #0]
 80104c2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80104c6:	e853 3f00 	ldrex	r3, [r3]
 80104ca:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80104cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80104ce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80104d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	461a      	mov	r2, r3
 80104dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80104e0:	657b      	str	r3, [r7, #84]	; 0x54
 80104e2:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104e4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80104e6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80104e8:	e841 2300 	strex	r3, r2, [r1]
 80104ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80104ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d1e4      	bne.n	80104be <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80104f8:	2b01      	cmp	r3, #1
 80104fa:	d130      	bne.n	801055e <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	2200      	movs	r2, #0
 8010500:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	681b      	ldr	r3, [r3, #0]
 8010506:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801050a:	e853 3f00 	ldrex	r3, [r3]
 801050e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010512:	f023 0310 	bic.w	r3, r3, #16
 8010516:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	461a      	mov	r2, r3
 8010520:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010524:	643b      	str	r3, [r7, #64]	; 0x40
 8010526:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010528:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801052a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801052c:	e841 2300 	strex	r3, r2, [r1]
 8010530:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010534:	2b00      	cmp	r3, #0
 8010536:	d1e4      	bne.n	8010502 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	69db      	ldr	r3, [r3, #28]
 801053e:	f003 0310 	and.w	r3, r3, #16
 8010542:	2b10      	cmp	r3, #16
 8010544:	d103      	bne.n	801054e <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	2210      	movs	r2, #16
 801054c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010554:	4619      	mov	r1, r3
 8010556:	6878      	ldr	r0, [r7, #4]
 8010558:	f7fe fc0c 	bl	800ed74 <HAL_UARTEx_RxEventCallback>
 801055c:	e002      	b.n	8010564 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 801055e:	6878      	ldr	r0, [r7, #4]
 8010560:	f7f0 fe08 	bl	8001174 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010564:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8010568:	2b00      	cmp	r3, #0
 801056a:	d006      	beq.n	801057a <UART_RxISR_8BIT_FIFOEN+0x2a6>
 801056c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010570:	f003 0320 	and.w	r3, r3, #32
 8010574:	2b00      	cmp	r3, #0
 8010576:	f47f aed1 	bne.w	801031c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010580:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8010584:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8010588:	2b00      	cmp	r3, #0
 801058a:	d049      	beq.n	8010620 <UART_RxISR_8BIT_FIFOEN+0x34c>
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010592:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8010596:	429a      	cmp	r2, r3
 8010598:	d242      	bcs.n	8010620 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	3308      	adds	r3, #8
 80105a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105a2:	6a3b      	ldr	r3, [r7, #32]
 80105a4:	e853 3f00 	ldrex	r3, [r3]
 80105a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80105aa:	69fb      	ldr	r3, [r7, #28]
 80105ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80105b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	3308      	adds	r3, #8
 80105ba:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80105be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80105c0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80105c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80105c6:	e841 2300 	strex	r3, r2, [r1]
 80105ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80105cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d1e3      	bne.n	801059a <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	4a16      	ldr	r2, [pc, #88]	; (8010630 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80105d6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105de:	68fb      	ldr	r3, [r7, #12]
 80105e0:	e853 3f00 	ldrex	r3, [r3]
 80105e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80105e6:	68bb      	ldr	r3, [r7, #8]
 80105e8:	f043 0320 	orr.w	r3, r3, #32
 80105ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	461a      	mov	r2, r3
 80105f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80105fa:	61bb      	str	r3, [r7, #24]
 80105fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105fe:	6979      	ldr	r1, [r7, #20]
 8010600:	69ba      	ldr	r2, [r7, #24]
 8010602:	e841 2300 	strex	r3, r2, [r1]
 8010606:	613b      	str	r3, [r7, #16]
   return(result);
 8010608:	693b      	ldr	r3, [r7, #16]
 801060a:	2b00      	cmp	r3, #0
 801060c:	d1e4      	bne.n	80105d8 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801060e:	e007      	b.n	8010620 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	699a      	ldr	r2, [r3, #24]
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	f042 0208 	orr.w	r2, r2, #8
 801061e:	619a      	str	r2, [r3, #24]
}
 8010620:	bf00      	nop
 8010622:	37b0      	adds	r7, #176	; 0xb0
 8010624:	46bd      	mov	sp, r7
 8010626:	bd80      	pop	{r7, pc}
 8010628:	effffffe 	.word	0xeffffffe
 801062c:	58000c00 	.word	0x58000c00
 8010630:	0800ff65 	.word	0x0800ff65

08010634 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010634:	b580      	push	{r7, lr}
 8010636:	b0ae      	sub	sp, #184	; 0xb8
 8010638:	af00      	add	r7, sp, #0
 801063a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010642:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	69db      	ldr	r3, [r3, #28]
 801064c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	681b      	ldr	r3, [r3, #0]
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	689b      	ldr	r3, [r3, #8]
 8010660:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801066a:	2b22      	cmp	r3, #34	; 0x22
 801066c:	f040 8184 	bne.w	8010978 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010676:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801067a:	e127      	b.n	80108cc <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010682:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801068a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 801068e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8010692:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8010696:	4013      	ands	r3, r2
 8010698:	b29a      	uxth	r2, r3
 801069a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801069e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80106a4:	1c9a      	adds	r2, r3, #2
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80106b0:	b29b      	uxth	r3, r3
 80106b2:	3b01      	subs	r3, #1
 80106b4:	b29a      	uxth	r2, r3
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	69db      	ldr	r3, [r3, #28]
 80106c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80106c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80106ca:	f003 0307 	and.w	r3, r3, #7
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d053      	beq.n	801077a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80106d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80106d6:	f003 0301 	and.w	r3, r3, #1
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d011      	beq.n	8010702 <UART_RxISR_16BIT_FIFOEN+0xce>
 80106de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80106e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d00b      	beq.n	8010702 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	681b      	ldr	r3, [r3, #0]
 80106ee:	2201      	movs	r2, #1
 80106f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80106f8:	f043 0201 	orr.w	r2, r3, #1
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010702:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010706:	f003 0302 	and.w	r3, r3, #2
 801070a:	2b00      	cmp	r3, #0
 801070c:	d011      	beq.n	8010732 <UART_RxISR_16BIT_FIFOEN+0xfe>
 801070e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010712:	f003 0301 	and.w	r3, r3, #1
 8010716:	2b00      	cmp	r3, #0
 8010718:	d00b      	beq.n	8010732 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	2202      	movs	r2, #2
 8010720:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010728:	f043 0204 	orr.w	r2, r3, #4
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010732:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010736:	f003 0304 	and.w	r3, r3, #4
 801073a:	2b00      	cmp	r3, #0
 801073c:	d011      	beq.n	8010762 <UART_RxISR_16BIT_FIFOEN+0x12e>
 801073e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010742:	f003 0301 	and.w	r3, r3, #1
 8010746:	2b00      	cmp	r3, #0
 8010748:	d00b      	beq.n	8010762 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	2204      	movs	r2, #4
 8010750:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010758:	f043 0202 	orr.w	r2, r3, #2
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010768:	2b00      	cmp	r3, #0
 801076a:	d006      	beq.n	801077a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801076c:	6878      	ldr	r0, [r7, #4]
 801076e:	f7fe faf7 	bl	800ed60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	2200      	movs	r2, #0
 8010776:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010780:	b29b      	uxth	r3, r3
 8010782:	2b00      	cmp	r3, #0
 8010784:	f040 80a2 	bne.w	80108cc <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801078e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010790:	e853 3f00 	ldrex	r3, [r3]
 8010794:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8010796:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010798:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801079c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	461a      	mov	r2, r3
 80107a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80107aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80107ae:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107b0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80107b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80107b6:	e841 2300 	strex	r3, r2, [r1]
 80107ba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80107bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d1e2      	bne.n	8010788 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	3308      	adds	r3, #8
 80107c8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80107cc:	e853 3f00 	ldrex	r3, [r3]
 80107d0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80107d2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80107d4:	4b6e      	ldr	r3, [pc, #440]	; (8010990 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 80107d6:	4013      	ands	r3, r2
 80107d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	3308      	adds	r3, #8
 80107e2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80107e6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80107e8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107ea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80107ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80107ee:	e841 2300 	strex	r3, r2, [r1]
 80107f2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80107f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d1e3      	bne.n	80107c2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	2220      	movs	r2, #32
 80107fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	2200      	movs	r2, #0
 8010806:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	2200      	movs	r2, #0
 801080c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	4a60      	ldr	r2, [pc, #384]	; (8010994 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8010814:	4293      	cmp	r3, r2
 8010816:	d021      	beq.n	801085c <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	681b      	ldr	r3, [r3, #0]
 801081c:	685b      	ldr	r3, [r3, #4]
 801081e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010822:	2b00      	cmp	r3, #0
 8010824:	d01a      	beq.n	801085c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801082c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801082e:	e853 3f00 	ldrex	r3, [r3]
 8010832:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010834:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010836:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801083a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	681b      	ldr	r3, [r3, #0]
 8010842:	461a      	mov	r2, r3
 8010844:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010848:	65bb      	str	r3, [r7, #88]	; 0x58
 801084a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801084c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801084e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010850:	e841 2300 	strex	r3, r2, [r1]
 8010854:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010856:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010858:	2b00      	cmp	r3, #0
 801085a:	d1e4      	bne.n	8010826 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010860:	2b01      	cmp	r3, #1
 8010862:	d130      	bne.n	80108c6 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	2200      	movs	r2, #0
 8010868:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010872:	e853 3f00 	ldrex	r3, [r3]
 8010876:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801087a:	f023 0310 	bic.w	r3, r3, #16
 801087e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	681b      	ldr	r3, [r3, #0]
 8010886:	461a      	mov	r2, r3
 8010888:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801088c:	647b      	str	r3, [r7, #68]	; 0x44
 801088e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010890:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010892:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010894:	e841 2300 	strex	r3, r2, [r1]
 8010898:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801089a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801089c:	2b00      	cmp	r3, #0
 801089e:	d1e4      	bne.n	801086a <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	681b      	ldr	r3, [r3, #0]
 80108a4:	69db      	ldr	r3, [r3, #28]
 80108a6:	f003 0310 	and.w	r3, r3, #16
 80108aa:	2b10      	cmp	r3, #16
 80108ac:	d103      	bne.n	80108b6 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	2210      	movs	r2, #16
 80108b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80108bc:	4619      	mov	r1, r3
 80108be:	6878      	ldr	r0, [r7, #4]
 80108c0:	f7fe fa58 	bl	800ed74 <HAL_UARTEx_RxEventCallback>
 80108c4:	e002      	b.n	80108cc <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80108c6:	6878      	ldr	r0, [r7, #4]
 80108c8:	f7f0 fc54 	bl	8001174 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80108cc:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d006      	beq.n	80108e2 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 80108d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80108d8:	f003 0320 	and.w	r3, r3, #32
 80108dc:	2b00      	cmp	r3, #0
 80108de:	f47f aecd 	bne.w	801067c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80108e8:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80108ec:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d049      	beq.n	8010988 <UART_RxISR_16BIT_FIFOEN+0x354>
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80108fa:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 80108fe:	429a      	cmp	r2, r3
 8010900:	d242      	bcs.n	8010988 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	3308      	adds	r3, #8
 8010908:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801090a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801090c:	e853 3f00 	ldrex	r3, [r3]
 8010910:	623b      	str	r3, [r7, #32]
   return(result);
 8010912:	6a3b      	ldr	r3, [r7, #32]
 8010914:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010918:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	3308      	adds	r3, #8
 8010922:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8010926:	633a      	str	r2, [r7, #48]	; 0x30
 8010928:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801092a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801092c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801092e:	e841 2300 	strex	r3, r2, [r1]
 8010932:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010936:	2b00      	cmp	r3, #0
 8010938:	d1e3      	bne.n	8010902 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	4a16      	ldr	r2, [pc, #88]	; (8010998 <UART_RxISR_16BIT_FIFOEN+0x364>)
 801093e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010946:	693b      	ldr	r3, [r7, #16]
 8010948:	e853 3f00 	ldrex	r3, [r3]
 801094c:	60fb      	str	r3, [r7, #12]
   return(result);
 801094e:	68fb      	ldr	r3, [r7, #12]
 8010950:	f043 0320 	orr.w	r3, r3, #32
 8010954:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	461a      	mov	r2, r3
 801095e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010962:	61fb      	str	r3, [r7, #28]
 8010964:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010966:	69b9      	ldr	r1, [r7, #24]
 8010968:	69fa      	ldr	r2, [r7, #28]
 801096a:	e841 2300 	strex	r3, r2, [r1]
 801096e:	617b      	str	r3, [r7, #20]
   return(result);
 8010970:	697b      	ldr	r3, [r7, #20]
 8010972:	2b00      	cmp	r3, #0
 8010974:	d1e4      	bne.n	8010940 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010976:	e007      	b.n	8010988 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	699a      	ldr	r2, [r3, #24]
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	681b      	ldr	r3, [r3, #0]
 8010982:	f042 0208 	orr.w	r2, r2, #8
 8010986:	619a      	str	r2, [r3, #24]
}
 8010988:	bf00      	nop
 801098a:	37b8      	adds	r7, #184	; 0xb8
 801098c:	46bd      	mov	sp, r7
 801098e:	bd80      	pop	{r7, pc}
 8010990:	effffffe 	.word	0xeffffffe
 8010994:	58000c00 	.word	0x58000c00
 8010998:	0801011d 	.word	0x0801011d

0801099c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801099c:	b480      	push	{r7}
 801099e:	b083      	sub	sp, #12
 80109a0:	af00      	add	r7, sp, #0
 80109a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80109a4:	bf00      	nop
 80109a6:	370c      	adds	r7, #12
 80109a8:	46bd      	mov	sp, r7
 80109aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ae:	4770      	bx	lr

080109b0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80109b0:	b480      	push	{r7}
 80109b2:	b083      	sub	sp, #12
 80109b4:	af00      	add	r7, sp, #0
 80109b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80109b8:	bf00      	nop
 80109ba:	370c      	adds	r7, #12
 80109bc:	46bd      	mov	sp, r7
 80109be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109c2:	4770      	bx	lr

080109c4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80109c4:	b480      	push	{r7}
 80109c6:	b083      	sub	sp, #12
 80109c8:	af00      	add	r7, sp, #0
 80109ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80109cc:	bf00      	nop
 80109ce:	370c      	adds	r7, #12
 80109d0:	46bd      	mov	sp, r7
 80109d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109d6:	4770      	bx	lr

080109d8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80109d8:	b480      	push	{r7}
 80109da:	b085      	sub	sp, #20
 80109dc:	af00      	add	r7, sp, #0
 80109de:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80109e6:	2b01      	cmp	r3, #1
 80109e8:	d101      	bne.n	80109ee <HAL_UARTEx_DisableFifoMode+0x16>
 80109ea:	2302      	movs	r3, #2
 80109ec:	e027      	b.n	8010a3e <HAL_UARTEx_DisableFifoMode+0x66>
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	2201      	movs	r2, #1
 80109f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	2224      	movs	r2, #36	; 0x24
 80109fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	681b      	ldr	r3, [r3, #0]
 8010a04:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	681a      	ldr	r2, [r3, #0]
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	f022 0201 	bic.w	r2, r2, #1
 8010a14:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010a16:	68fb      	ldr	r3, [r7, #12]
 8010a18:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8010a1c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	2200      	movs	r2, #0
 8010a22:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	68fa      	ldr	r2, [r7, #12]
 8010a2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	2220      	movs	r2, #32
 8010a30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	2200      	movs	r2, #0
 8010a38:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8010a3c:	2300      	movs	r3, #0
}
 8010a3e:	4618      	mov	r0, r3
 8010a40:	3714      	adds	r7, #20
 8010a42:	46bd      	mov	sp, r7
 8010a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a48:	4770      	bx	lr

08010a4a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010a4a:	b580      	push	{r7, lr}
 8010a4c:	b084      	sub	sp, #16
 8010a4e:	af00      	add	r7, sp, #0
 8010a50:	6078      	str	r0, [r7, #4]
 8010a52:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8010a5a:	2b01      	cmp	r3, #1
 8010a5c:	d101      	bne.n	8010a62 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010a5e:	2302      	movs	r3, #2
 8010a60:	e02d      	b.n	8010abe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	2201      	movs	r2, #1
 8010a66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	2224      	movs	r2, #36	; 0x24
 8010a6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	681a      	ldr	r2, [r3, #0]
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	f022 0201 	bic.w	r2, r2, #1
 8010a88:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	681b      	ldr	r3, [r3, #0]
 8010a8e:	689b      	ldr	r3, [r3, #8]
 8010a90:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	681b      	ldr	r3, [r3, #0]
 8010a98:	683a      	ldr	r2, [r7, #0]
 8010a9a:	430a      	orrs	r2, r1
 8010a9c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010a9e:	6878      	ldr	r0, [r7, #4]
 8010aa0:	f000 f850 	bl	8010b44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	681b      	ldr	r3, [r3, #0]
 8010aa8:	68fa      	ldr	r2, [r7, #12]
 8010aaa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	2220      	movs	r2, #32
 8010ab0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	2200      	movs	r2, #0
 8010ab8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8010abc:	2300      	movs	r3, #0
}
 8010abe:	4618      	mov	r0, r3
 8010ac0:	3710      	adds	r7, #16
 8010ac2:	46bd      	mov	sp, r7
 8010ac4:	bd80      	pop	{r7, pc}

08010ac6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010ac6:	b580      	push	{r7, lr}
 8010ac8:	b084      	sub	sp, #16
 8010aca:	af00      	add	r7, sp, #0
 8010acc:	6078      	str	r0, [r7, #4]
 8010ace:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8010ad6:	2b01      	cmp	r3, #1
 8010ad8:	d101      	bne.n	8010ade <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010ada:	2302      	movs	r3, #2
 8010adc:	e02d      	b.n	8010b3a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	2201      	movs	r2, #1
 8010ae2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	2224      	movs	r2, #36	; 0x24
 8010aea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	681a      	ldr	r2, [r3, #0]
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	f022 0201 	bic.w	r2, r2, #1
 8010b04:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	689b      	ldr	r3, [r3, #8]
 8010b0c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	683a      	ldr	r2, [r7, #0]
 8010b16:	430a      	orrs	r2, r1
 8010b18:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010b1a:	6878      	ldr	r0, [r7, #4]
 8010b1c:	f000 f812 	bl	8010b44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	68fa      	ldr	r2, [r7, #12]
 8010b26:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	2220      	movs	r2, #32
 8010b2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	2200      	movs	r2, #0
 8010b34:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8010b38:	2300      	movs	r3, #0
}
 8010b3a:	4618      	mov	r0, r3
 8010b3c:	3710      	adds	r7, #16
 8010b3e:	46bd      	mov	sp, r7
 8010b40:	bd80      	pop	{r7, pc}
	...

08010b44 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010b44:	b480      	push	{r7}
 8010b46:	b085      	sub	sp, #20
 8010b48:	af00      	add	r7, sp, #0
 8010b4a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d108      	bne.n	8010b66 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	2201      	movs	r2, #1
 8010b58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	2201      	movs	r2, #1
 8010b60:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010b64:	e031      	b.n	8010bca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010b66:	2310      	movs	r3, #16
 8010b68:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010b6a:	2310      	movs	r3, #16
 8010b6c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	681b      	ldr	r3, [r3, #0]
 8010b72:	689b      	ldr	r3, [r3, #8]
 8010b74:	0e5b      	lsrs	r3, r3, #25
 8010b76:	b2db      	uxtb	r3, r3
 8010b78:	f003 0307 	and.w	r3, r3, #7
 8010b7c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	681b      	ldr	r3, [r3, #0]
 8010b82:	689b      	ldr	r3, [r3, #8]
 8010b84:	0f5b      	lsrs	r3, r3, #29
 8010b86:	b2db      	uxtb	r3, r3
 8010b88:	f003 0307 	and.w	r3, r3, #7
 8010b8c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010b8e:	7bbb      	ldrb	r3, [r7, #14]
 8010b90:	7b3a      	ldrb	r2, [r7, #12]
 8010b92:	4911      	ldr	r1, [pc, #68]	; (8010bd8 <UARTEx_SetNbDataToProcess+0x94>)
 8010b94:	5c8a      	ldrb	r2, [r1, r2]
 8010b96:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010b9a:	7b3a      	ldrb	r2, [r7, #12]
 8010b9c:	490f      	ldr	r1, [pc, #60]	; (8010bdc <UARTEx_SetNbDataToProcess+0x98>)
 8010b9e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010ba0:	fb93 f3f2 	sdiv	r3, r3, r2
 8010ba4:	b29a      	uxth	r2, r3
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010bac:	7bfb      	ldrb	r3, [r7, #15]
 8010bae:	7b7a      	ldrb	r2, [r7, #13]
 8010bb0:	4909      	ldr	r1, [pc, #36]	; (8010bd8 <UARTEx_SetNbDataToProcess+0x94>)
 8010bb2:	5c8a      	ldrb	r2, [r1, r2]
 8010bb4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010bb8:	7b7a      	ldrb	r2, [r7, #13]
 8010bba:	4908      	ldr	r1, [pc, #32]	; (8010bdc <UARTEx_SetNbDataToProcess+0x98>)
 8010bbc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010bbe:	fb93 f3f2 	sdiv	r3, r3, r2
 8010bc2:	b29a      	uxth	r2, r3
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8010bca:	bf00      	nop
 8010bcc:	3714      	adds	r7, #20
 8010bce:	46bd      	mov	sp, r7
 8010bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bd4:	4770      	bx	lr
 8010bd6:	bf00      	nop
 8010bd8:	08014b30 	.word	0x08014b30
 8010bdc:	08014b38 	.word	0x08014b38

08010be0 <__NVIC_SetPriority>:
{
 8010be0:	b480      	push	{r7}
 8010be2:	b083      	sub	sp, #12
 8010be4:	af00      	add	r7, sp, #0
 8010be6:	4603      	mov	r3, r0
 8010be8:	6039      	str	r1, [r7, #0]
 8010bea:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8010bec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	db0a      	blt.n	8010c0a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010bf4:	683b      	ldr	r3, [r7, #0]
 8010bf6:	b2da      	uxtb	r2, r3
 8010bf8:	490c      	ldr	r1, [pc, #48]	; (8010c2c <__NVIC_SetPriority+0x4c>)
 8010bfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010bfe:	0112      	lsls	r2, r2, #4
 8010c00:	b2d2      	uxtb	r2, r2
 8010c02:	440b      	add	r3, r1
 8010c04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8010c08:	e00a      	b.n	8010c20 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010c0a:	683b      	ldr	r3, [r7, #0]
 8010c0c:	b2da      	uxtb	r2, r3
 8010c0e:	4908      	ldr	r1, [pc, #32]	; (8010c30 <__NVIC_SetPriority+0x50>)
 8010c10:	88fb      	ldrh	r3, [r7, #6]
 8010c12:	f003 030f 	and.w	r3, r3, #15
 8010c16:	3b04      	subs	r3, #4
 8010c18:	0112      	lsls	r2, r2, #4
 8010c1a:	b2d2      	uxtb	r2, r2
 8010c1c:	440b      	add	r3, r1
 8010c1e:	761a      	strb	r2, [r3, #24]
}
 8010c20:	bf00      	nop
 8010c22:	370c      	adds	r7, #12
 8010c24:	46bd      	mov	sp, r7
 8010c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c2a:	4770      	bx	lr
 8010c2c:	e000e100 	.word	0xe000e100
 8010c30:	e000ed00 	.word	0xe000ed00

08010c34 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8010c34:	b580      	push	{r7, lr}
 8010c36:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8010c38:	4b05      	ldr	r3, [pc, #20]	; (8010c50 <SysTick_Handler+0x1c>)
 8010c3a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8010c3c:	f001 ff96 	bl	8012b6c <xTaskGetSchedulerState>
 8010c40:	4603      	mov	r3, r0
 8010c42:	2b01      	cmp	r3, #1
 8010c44:	d001      	beq.n	8010c4a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8010c46:	f002 fd9f 	bl	8013788 <xPortSysTickHandler>
  }
}
 8010c4a:	bf00      	nop
 8010c4c:	bd80      	pop	{r7, pc}
 8010c4e:	bf00      	nop
 8010c50:	e000e010 	.word	0xe000e010

08010c54 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8010c54:	b580      	push	{r7, lr}
 8010c56:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8010c58:	2100      	movs	r1, #0
 8010c5a:	f06f 0004 	mvn.w	r0, #4
 8010c5e:	f7ff ffbf 	bl	8010be0 <__NVIC_SetPriority>
#endif
}
 8010c62:	bf00      	nop
 8010c64:	bd80      	pop	{r7, pc}
	...

08010c68 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8010c68:	b480      	push	{r7}
 8010c6a:	b083      	sub	sp, #12
 8010c6c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010c6e:	f3ef 8305 	mrs	r3, IPSR
 8010c72:	603b      	str	r3, [r7, #0]
  return(result);
 8010c74:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d003      	beq.n	8010c82 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8010c7a:	f06f 0305 	mvn.w	r3, #5
 8010c7e:	607b      	str	r3, [r7, #4]
 8010c80:	e00c      	b.n	8010c9c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8010c82:	4b0a      	ldr	r3, [pc, #40]	; (8010cac <osKernelInitialize+0x44>)
 8010c84:	681b      	ldr	r3, [r3, #0]
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d105      	bne.n	8010c96 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8010c8a:	4b08      	ldr	r3, [pc, #32]	; (8010cac <osKernelInitialize+0x44>)
 8010c8c:	2201      	movs	r2, #1
 8010c8e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8010c90:	2300      	movs	r3, #0
 8010c92:	607b      	str	r3, [r7, #4]
 8010c94:	e002      	b.n	8010c9c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8010c96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010c9a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8010c9c:	687b      	ldr	r3, [r7, #4]
}
 8010c9e:	4618      	mov	r0, r3
 8010ca0:	370c      	adds	r7, #12
 8010ca2:	46bd      	mov	sp, r7
 8010ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ca8:	4770      	bx	lr
 8010caa:	bf00      	nop
 8010cac:	24000890 	.word	0x24000890

08010cb0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8010cb0:	b580      	push	{r7, lr}
 8010cb2:	b082      	sub	sp, #8
 8010cb4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010cb6:	f3ef 8305 	mrs	r3, IPSR
 8010cba:	603b      	str	r3, [r7, #0]
  return(result);
 8010cbc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d003      	beq.n	8010cca <osKernelStart+0x1a>
    stat = osErrorISR;
 8010cc2:	f06f 0305 	mvn.w	r3, #5
 8010cc6:	607b      	str	r3, [r7, #4]
 8010cc8:	e010      	b.n	8010cec <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8010cca:	4b0b      	ldr	r3, [pc, #44]	; (8010cf8 <osKernelStart+0x48>)
 8010ccc:	681b      	ldr	r3, [r3, #0]
 8010cce:	2b01      	cmp	r3, #1
 8010cd0:	d109      	bne.n	8010ce6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8010cd2:	f7ff ffbf 	bl	8010c54 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8010cd6:	4b08      	ldr	r3, [pc, #32]	; (8010cf8 <osKernelStart+0x48>)
 8010cd8:	2202      	movs	r2, #2
 8010cda:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8010cdc:	f001 fa94 	bl	8012208 <vTaskStartScheduler>
      stat = osOK;
 8010ce0:	2300      	movs	r3, #0
 8010ce2:	607b      	str	r3, [r7, #4]
 8010ce4:	e002      	b.n	8010cec <osKernelStart+0x3c>
    } else {
      stat = osError;
 8010ce6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010cea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8010cec:	687b      	ldr	r3, [r7, #4]
}
 8010cee:	4618      	mov	r0, r3
 8010cf0:	3708      	adds	r7, #8
 8010cf2:	46bd      	mov	sp, r7
 8010cf4:	bd80      	pop	{r7, pc}
 8010cf6:	bf00      	nop
 8010cf8:	24000890 	.word	0x24000890

08010cfc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8010cfc:	b580      	push	{r7, lr}
 8010cfe:	b08e      	sub	sp, #56	; 0x38
 8010d00:	af04      	add	r7, sp, #16
 8010d02:	60f8      	str	r0, [r7, #12]
 8010d04:	60b9      	str	r1, [r7, #8]
 8010d06:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8010d08:	2300      	movs	r3, #0
 8010d0a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010d0c:	f3ef 8305 	mrs	r3, IPSR
 8010d10:	617b      	str	r3, [r7, #20]
  return(result);
 8010d12:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	d17e      	bne.n	8010e16 <osThreadNew+0x11a>
 8010d18:	68fb      	ldr	r3, [r7, #12]
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d07b      	beq.n	8010e16 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8010d1e:	2380      	movs	r3, #128	; 0x80
 8010d20:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8010d22:	2318      	movs	r3, #24
 8010d24:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8010d26:	2300      	movs	r3, #0
 8010d28:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8010d2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010d2e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d045      	beq.n	8010dc2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d002      	beq.n	8010d44 <osThreadNew+0x48>
        name = attr->name;
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	681b      	ldr	r3, [r3, #0]
 8010d42:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	699b      	ldr	r3, [r3, #24]
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d002      	beq.n	8010d52 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	699b      	ldr	r3, [r3, #24]
 8010d50:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8010d52:	69fb      	ldr	r3, [r7, #28]
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	d008      	beq.n	8010d6a <osThreadNew+0x6e>
 8010d58:	69fb      	ldr	r3, [r7, #28]
 8010d5a:	2b38      	cmp	r3, #56	; 0x38
 8010d5c:	d805      	bhi.n	8010d6a <osThreadNew+0x6e>
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	685b      	ldr	r3, [r3, #4]
 8010d62:	f003 0301 	and.w	r3, r3, #1
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d001      	beq.n	8010d6e <osThreadNew+0x72>
        return (NULL);
 8010d6a:	2300      	movs	r3, #0
 8010d6c:	e054      	b.n	8010e18 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	695b      	ldr	r3, [r3, #20]
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d003      	beq.n	8010d7e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	695b      	ldr	r3, [r3, #20]
 8010d7a:	089b      	lsrs	r3, r3, #2
 8010d7c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	689b      	ldr	r3, [r3, #8]
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d00e      	beq.n	8010da4 <osThreadNew+0xa8>
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	68db      	ldr	r3, [r3, #12]
 8010d8a:	2b5b      	cmp	r3, #91	; 0x5b
 8010d8c:	d90a      	bls.n	8010da4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d006      	beq.n	8010da4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	695b      	ldr	r3, [r3, #20]
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d002      	beq.n	8010da4 <osThreadNew+0xa8>
        mem = 1;
 8010d9e:	2301      	movs	r3, #1
 8010da0:	61bb      	str	r3, [r7, #24]
 8010da2:	e010      	b.n	8010dc6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	689b      	ldr	r3, [r3, #8]
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	d10c      	bne.n	8010dc6 <osThreadNew+0xca>
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	68db      	ldr	r3, [r3, #12]
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	d108      	bne.n	8010dc6 <osThreadNew+0xca>
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	691b      	ldr	r3, [r3, #16]
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d104      	bne.n	8010dc6 <osThreadNew+0xca>
          mem = 0;
 8010dbc:	2300      	movs	r3, #0
 8010dbe:	61bb      	str	r3, [r7, #24]
 8010dc0:	e001      	b.n	8010dc6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8010dc2:	2300      	movs	r3, #0
 8010dc4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8010dc6:	69bb      	ldr	r3, [r7, #24]
 8010dc8:	2b01      	cmp	r3, #1
 8010dca:	d110      	bne.n	8010dee <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8010dd0:	687a      	ldr	r2, [r7, #4]
 8010dd2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010dd4:	9202      	str	r2, [sp, #8]
 8010dd6:	9301      	str	r3, [sp, #4]
 8010dd8:	69fb      	ldr	r3, [r7, #28]
 8010dda:	9300      	str	r3, [sp, #0]
 8010ddc:	68bb      	ldr	r3, [r7, #8]
 8010dde:	6a3a      	ldr	r2, [r7, #32]
 8010de0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010de2:	68f8      	ldr	r0, [r7, #12]
 8010de4:	f001 f83a 	bl	8011e5c <xTaskCreateStatic>
 8010de8:	4603      	mov	r3, r0
 8010dea:	613b      	str	r3, [r7, #16]
 8010dec:	e013      	b.n	8010e16 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8010dee:	69bb      	ldr	r3, [r7, #24]
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d110      	bne.n	8010e16 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8010df4:	6a3b      	ldr	r3, [r7, #32]
 8010df6:	b29a      	uxth	r2, r3
 8010df8:	f107 0310 	add.w	r3, r7, #16
 8010dfc:	9301      	str	r3, [sp, #4]
 8010dfe:	69fb      	ldr	r3, [r7, #28]
 8010e00:	9300      	str	r3, [sp, #0]
 8010e02:	68bb      	ldr	r3, [r7, #8]
 8010e04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010e06:	68f8      	ldr	r0, [r7, #12]
 8010e08:	f001 f885 	bl	8011f16 <xTaskCreate>
 8010e0c:	4603      	mov	r3, r0
 8010e0e:	2b01      	cmp	r3, #1
 8010e10:	d001      	beq.n	8010e16 <osThreadNew+0x11a>
            hTask = NULL;
 8010e12:	2300      	movs	r3, #0
 8010e14:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8010e16:	693b      	ldr	r3, [r7, #16]
}
 8010e18:	4618      	mov	r0, r3
 8010e1a:	3728      	adds	r7, #40	; 0x28
 8010e1c:	46bd      	mov	sp, r7
 8010e1e:	bd80      	pop	{r7, pc}

08010e20 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8010e20:	b580      	push	{r7, lr}
 8010e22:	b084      	sub	sp, #16
 8010e24:	af00      	add	r7, sp, #0
 8010e26:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010e28:	f3ef 8305 	mrs	r3, IPSR
 8010e2c:	60bb      	str	r3, [r7, #8]
  return(result);
 8010e2e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d003      	beq.n	8010e3c <osDelay+0x1c>
    stat = osErrorISR;
 8010e34:	f06f 0305 	mvn.w	r3, #5
 8010e38:	60fb      	str	r3, [r7, #12]
 8010e3a:	e007      	b.n	8010e4c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8010e3c:	2300      	movs	r3, #0
 8010e3e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d002      	beq.n	8010e4c <osDelay+0x2c>
      vTaskDelay(ticks);
 8010e46:	6878      	ldr	r0, [r7, #4]
 8010e48:	f001 f9aa 	bl	80121a0 <vTaskDelay>
    }
  }

  return (stat);
 8010e4c:	68fb      	ldr	r3, [r7, #12]
}
 8010e4e:	4618      	mov	r0, r3
 8010e50:	3710      	adds	r7, #16
 8010e52:	46bd      	mov	sp, r7
 8010e54:	bd80      	pop	{r7, pc}

08010e56 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8010e56:	b580      	push	{r7, lr}
 8010e58:	b086      	sub	sp, #24
 8010e5a:	af00      	add	r7, sp, #0
 8010e5c:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8010e5e:	2300      	movs	r3, #0
 8010e60:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010e62:	f3ef 8305 	mrs	r3, IPSR
 8010e66:	60fb      	str	r3, [r7, #12]
  return(result);
 8010e68:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d12d      	bne.n	8010eca <osEventFlagsNew+0x74>
    mem = -1;
 8010e6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010e72:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d015      	beq.n	8010ea6 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	689b      	ldr	r3, [r3, #8]
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d006      	beq.n	8010e90 <osEventFlagsNew+0x3a>
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	68db      	ldr	r3, [r3, #12]
 8010e86:	2b1f      	cmp	r3, #31
 8010e88:	d902      	bls.n	8010e90 <osEventFlagsNew+0x3a>
        mem = 1;
 8010e8a:	2301      	movs	r3, #1
 8010e8c:	613b      	str	r3, [r7, #16]
 8010e8e:	e00c      	b.n	8010eaa <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	689b      	ldr	r3, [r3, #8]
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d108      	bne.n	8010eaa <osEventFlagsNew+0x54>
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	68db      	ldr	r3, [r3, #12]
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d104      	bne.n	8010eaa <osEventFlagsNew+0x54>
          mem = 0;
 8010ea0:	2300      	movs	r3, #0
 8010ea2:	613b      	str	r3, [r7, #16]
 8010ea4:	e001      	b.n	8010eaa <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8010ea6:	2300      	movs	r3, #0
 8010ea8:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8010eaa:	693b      	ldr	r3, [r7, #16]
 8010eac:	2b01      	cmp	r3, #1
 8010eae:	d106      	bne.n	8010ebe <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	689b      	ldr	r3, [r3, #8]
 8010eb4:	4618      	mov	r0, r3
 8010eb6:	f000 f8f9 	bl	80110ac <xEventGroupCreateStatic>
 8010eba:	6178      	str	r0, [r7, #20]
 8010ebc:	e005      	b.n	8010eca <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8010ebe:	693b      	ldr	r3, [r7, #16]
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d102      	bne.n	8010eca <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8010ec4:	f000 f929 	bl	801111a <xEventGroupCreate>
 8010ec8:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8010eca:	697b      	ldr	r3, [r7, #20]
}
 8010ecc:	4618      	mov	r0, r3
 8010ece:	3718      	adds	r7, #24
 8010ed0:	46bd      	mov	sp, r7
 8010ed2:	bd80      	pop	{r7, pc}

08010ed4 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8010ed4:	b580      	push	{r7, lr}
 8010ed6:	b086      	sub	sp, #24
 8010ed8:	af00      	add	r7, sp, #0
 8010eda:	6078      	str	r0, [r7, #4]
 8010edc:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8010ee2:	693b      	ldr	r3, [r7, #16]
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d004      	beq.n	8010ef2 <osEventFlagsSet+0x1e>
 8010ee8:	683b      	ldr	r3, [r7, #0]
 8010eea:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d003      	beq.n	8010efa <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8010ef2:	f06f 0303 	mvn.w	r3, #3
 8010ef6:	617b      	str	r3, [r7, #20]
 8010ef8:	e028      	b.n	8010f4c <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010efa:	f3ef 8305 	mrs	r3, IPSR
 8010efe:	60fb      	str	r3, [r7, #12]
  return(result);
 8010f00:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d01d      	beq.n	8010f42 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8010f06:	2300      	movs	r3, #0
 8010f08:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8010f0a:	f107 0308 	add.w	r3, r7, #8
 8010f0e:	461a      	mov	r2, r3
 8010f10:	6839      	ldr	r1, [r7, #0]
 8010f12:	6938      	ldr	r0, [r7, #16]
 8010f14:	f000 f9b4 	bl	8011280 <xEventGroupSetBitsFromISR>
 8010f18:	4603      	mov	r3, r0
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d103      	bne.n	8010f26 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8010f1e:	f06f 0302 	mvn.w	r3, #2
 8010f22:	617b      	str	r3, [r7, #20]
 8010f24:	e012      	b.n	8010f4c <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8010f26:	683b      	ldr	r3, [r7, #0]
 8010f28:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8010f2a:	68bb      	ldr	r3, [r7, #8]
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d00d      	beq.n	8010f4c <osEventFlagsSet+0x78>
 8010f30:	4b09      	ldr	r3, [pc, #36]	; (8010f58 <osEventFlagsSet+0x84>)
 8010f32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010f36:	601a      	str	r2, [r3, #0]
 8010f38:	f3bf 8f4f 	dsb	sy
 8010f3c:	f3bf 8f6f 	isb	sy
 8010f40:	e004      	b.n	8010f4c <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8010f42:	6839      	ldr	r1, [r7, #0]
 8010f44:	6938      	ldr	r0, [r7, #16]
 8010f46:	f000 f902 	bl	801114e <xEventGroupSetBits>
 8010f4a:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8010f4c:	697b      	ldr	r3, [r7, #20]
}
 8010f4e:	4618      	mov	r0, r3
 8010f50:	3718      	adds	r7, #24
 8010f52:	46bd      	mov	sp, r7
 8010f54:	bd80      	pop	{r7, pc}
 8010f56:	bf00      	nop
 8010f58:	e000ed04 	.word	0xe000ed04

08010f5c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8010f5c:	b580      	push	{r7, lr}
 8010f5e:	b08a      	sub	sp, #40	; 0x28
 8010f60:	af02      	add	r7, sp, #8
 8010f62:	60f8      	str	r0, [r7, #12]
 8010f64:	60b9      	str	r1, [r7, #8]
 8010f66:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8010f68:	2300      	movs	r3, #0
 8010f6a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010f6c:	f3ef 8305 	mrs	r3, IPSR
 8010f70:	613b      	str	r3, [r7, #16]
  return(result);
 8010f72:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d15f      	bne.n	8011038 <osMessageQueueNew+0xdc>
 8010f78:	68fb      	ldr	r3, [r7, #12]
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d05c      	beq.n	8011038 <osMessageQueueNew+0xdc>
 8010f7e:	68bb      	ldr	r3, [r7, #8]
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d059      	beq.n	8011038 <osMessageQueueNew+0xdc>
    mem = -1;
 8010f84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010f88:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d029      	beq.n	8010fe4 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	689b      	ldr	r3, [r3, #8]
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d012      	beq.n	8010fbe <osMessageQueueNew+0x62>
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	68db      	ldr	r3, [r3, #12]
 8010f9c:	2b4f      	cmp	r3, #79	; 0x4f
 8010f9e:	d90e      	bls.n	8010fbe <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	d00a      	beq.n	8010fbe <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	695a      	ldr	r2, [r3, #20]
 8010fac:	68fb      	ldr	r3, [r7, #12]
 8010fae:	68b9      	ldr	r1, [r7, #8]
 8010fb0:	fb01 f303 	mul.w	r3, r1, r3
 8010fb4:	429a      	cmp	r2, r3
 8010fb6:	d302      	bcc.n	8010fbe <osMessageQueueNew+0x62>
        mem = 1;
 8010fb8:	2301      	movs	r3, #1
 8010fba:	61bb      	str	r3, [r7, #24]
 8010fbc:	e014      	b.n	8010fe8 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	689b      	ldr	r3, [r3, #8]
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d110      	bne.n	8010fe8 <osMessageQueueNew+0x8c>
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	68db      	ldr	r3, [r3, #12]
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d10c      	bne.n	8010fe8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d108      	bne.n	8010fe8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	695b      	ldr	r3, [r3, #20]
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d104      	bne.n	8010fe8 <osMessageQueueNew+0x8c>
          mem = 0;
 8010fde:	2300      	movs	r3, #0
 8010fe0:	61bb      	str	r3, [r7, #24]
 8010fe2:	e001      	b.n	8010fe8 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8010fe4:	2300      	movs	r3, #0
 8010fe6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8010fe8:	69bb      	ldr	r3, [r7, #24]
 8010fea:	2b01      	cmp	r3, #1
 8010fec:	d10b      	bne.n	8011006 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	691a      	ldr	r2, [r3, #16]
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	689b      	ldr	r3, [r3, #8]
 8010ff6:	2100      	movs	r1, #0
 8010ff8:	9100      	str	r1, [sp, #0]
 8010ffa:	68b9      	ldr	r1, [r7, #8]
 8010ffc:	68f8      	ldr	r0, [r7, #12]
 8010ffe:	f000 fa6f 	bl	80114e0 <xQueueGenericCreateStatic>
 8011002:	61f8      	str	r0, [r7, #28]
 8011004:	e008      	b.n	8011018 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8011006:	69bb      	ldr	r3, [r7, #24]
 8011008:	2b00      	cmp	r3, #0
 801100a:	d105      	bne.n	8011018 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 801100c:	2200      	movs	r2, #0
 801100e:	68b9      	ldr	r1, [r7, #8]
 8011010:	68f8      	ldr	r0, [r7, #12]
 8011012:	f000 fadd 	bl	80115d0 <xQueueGenericCreate>
 8011016:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8011018:	69fb      	ldr	r3, [r7, #28]
 801101a:	2b00      	cmp	r3, #0
 801101c:	d00c      	beq.n	8011038 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	2b00      	cmp	r3, #0
 8011022:	d003      	beq.n	801102c <osMessageQueueNew+0xd0>
        name = attr->name;
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	681b      	ldr	r3, [r3, #0]
 8011028:	617b      	str	r3, [r7, #20]
 801102a:	e001      	b.n	8011030 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 801102c:	2300      	movs	r3, #0
 801102e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8011030:	6979      	ldr	r1, [r7, #20]
 8011032:	69f8      	ldr	r0, [r7, #28]
 8011034:	f000 feb4 	bl	8011da0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8011038:	69fb      	ldr	r3, [r7, #28]
}
 801103a:	4618      	mov	r0, r3
 801103c:	3720      	adds	r7, #32
 801103e:	46bd      	mov	sp, r7
 8011040:	bd80      	pop	{r7, pc}
	...

08011044 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8011044:	b480      	push	{r7}
 8011046:	b085      	sub	sp, #20
 8011048:	af00      	add	r7, sp, #0
 801104a:	60f8      	str	r0, [r7, #12]
 801104c:	60b9      	str	r1, [r7, #8]
 801104e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	4a07      	ldr	r2, [pc, #28]	; (8011070 <vApplicationGetIdleTaskMemory+0x2c>)
 8011054:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8011056:	68bb      	ldr	r3, [r7, #8]
 8011058:	4a06      	ldr	r2, [pc, #24]	; (8011074 <vApplicationGetIdleTaskMemory+0x30>)
 801105a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	2280      	movs	r2, #128	; 0x80
 8011060:	601a      	str	r2, [r3, #0]
}
 8011062:	bf00      	nop
 8011064:	3714      	adds	r7, #20
 8011066:	46bd      	mov	sp, r7
 8011068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801106c:	4770      	bx	lr
 801106e:	bf00      	nop
 8011070:	24000894 	.word	0x24000894
 8011074:	240008f0 	.word	0x240008f0

08011078 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8011078:	b480      	push	{r7}
 801107a:	b085      	sub	sp, #20
 801107c:	af00      	add	r7, sp, #0
 801107e:	60f8      	str	r0, [r7, #12]
 8011080:	60b9      	str	r1, [r7, #8]
 8011082:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8011084:	68fb      	ldr	r3, [r7, #12]
 8011086:	4a07      	ldr	r2, [pc, #28]	; (80110a4 <vApplicationGetTimerTaskMemory+0x2c>)
 8011088:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801108a:	68bb      	ldr	r3, [r7, #8]
 801108c:	4a06      	ldr	r2, [pc, #24]	; (80110a8 <vApplicationGetTimerTaskMemory+0x30>)
 801108e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011096:	601a      	str	r2, [r3, #0]
}
 8011098:	bf00      	nop
 801109a:	3714      	adds	r7, #20
 801109c:	46bd      	mov	sp, r7
 801109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110a2:	4770      	bx	lr
 80110a4:	24000af0 	.word	0x24000af0
 80110a8:	24000b4c 	.word	0x24000b4c

080110ac <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 80110ac:	b580      	push	{r7, lr}
 80110ae:	b086      	sub	sp, #24
 80110b0:	af00      	add	r7, sp, #0
 80110b2:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d10a      	bne.n	80110d0 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80110ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110be:	f383 8811 	msr	BASEPRI, r3
 80110c2:	f3bf 8f6f 	isb	sy
 80110c6:	f3bf 8f4f 	dsb	sy
 80110ca:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80110cc:	bf00      	nop
 80110ce:	e7fe      	b.n	80110ce <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80110d0:	2320      	movs	r3, #32
 80110d2:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80110d4:	68bb      	ldr	r3, [r7, #8]
 80110d6:	2b20      	cmp	r3, #32
 80110d8:	d00a      	beq.n	80110f0 <xEventGroupCreateStatic+0x44>
	__asm volatile
 80110da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110de:	f383 8811 	msr	BASEPRI, r3
 80110e2:	f3bf 8f6f 	isb	sy
 80110e6:	f3bf 8f4f 	dsb	sy
 80110ea:	60fb      	str	r3, [r7, #12]
}
 80110ec:	bf00      	nop
 80110ee:	e7fe      	b.n	80110ee <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 80110f4:	697b      	ldr	r3, [r7, #20]
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d00a      	beq.n	8011110 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 80110fa:	697b      	ldr	r3, [r7, #20]
 80110fc:	2200      	movs	r2, #0
 80110fe:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8011100:	697b      	ldr	r3, [r7, #20]
 8011102:	3304      	adds	r3, #4
 8011104:	4618      	mov	r0, r3
 8011106:	f000 f8cf 	bl	80112a8 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 801110a:	697b      	ldr	r3, [r7, #20]
 801110c:	2201      	movs	r2, #1
 801110e:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8011110:	697b      	ldr	r3, [r7, #20]
	}
 8011112:	4618      	mov	r0, r3
 8011114:	3718      	adds	r7, #24
 8011116:	46bd      	mov	sp, r7
 8011118:	bd80      	pop	{r7, pc}

0801111a <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 801111a:	b580      	push	{r7, lr}
 801111c:	b082      	sub	sp, #8
 801111e:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8011120:	2020      	movs	r0, #32
 8011122:	f002 fbc1 	bl	80138a8 <pvPortMalloc>
 8011126:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	2b00      	cmp	r3, #0
 801112c:	d00a      	beq.n	8011144 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	2200      	movs	r2, #0
 8011132:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	3304      	adds	r3, #4
 8011138:	4618      	mov	r0, r3
 801113a:	f000 f8b5 	bl	80112a8 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	2200      	movs	r2, #0
 8011142:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8011144:	687b      	ldr	r3, [r7, #4]
	}
 8011146:	4618      	mov	r0, r3
 8011148:	3708      	adds	r7, #8
 801114a:	46bd      	mov	sp, r7
 801114c:	bd80      	pop	{r7, pc}

0801114e <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 801114e:	b580      	push	{r7, lr}
 8011150:	b08e      	sub	sp, #56	; 0x38
 8011152:	af00      	add	r7, sp, #0
 8011154:	6078      	str	r0, [r7, #4]
 8011156:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8011158:	2300      	movs	r3, #0
 801115a:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8011160:	2300      	movs	r3, #0
 8011162:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	2b00      	cmp	r3, #0
 8011168:	d10a      	bne.n	8011180 <xEventGroupSetBits+0x32>
	__asm volatile
 801116a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801116e:	f383 8811 	msr	BASEPRI, r3
 8011172:	f3bf 8f6f 	isb	sy
 8011176:	f3bf 8f4f 	dsb	sy
 801117a:	613b      	str	r3, [r7, #16]
}
 801117c:	bf00      	nop
 801117e:	e7fe      	b.n	801117e <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8011180:	683b      	ldr	r3, [r7, #0]
 8011182:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8011186:	2b00      	cmp	r3, #0
 8011188:	d00a      	beq.n	80111a0 <xEventGroupSetBits+0x52>
	__asm volatile
 801118a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801118e:	f383 8811 	msr	BASEPRI, r3
 8011192:	f3bf 8f6f 	isb	sy
 8011196:	f3bf 8f4f 	dsb	sy
 801119a:	60fb      	str	r3, [r7, #12]
}
 801119c:	bf00      	nop
 801119e:	e7fe      	b.n	801119e <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80111a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111a2:	3304      	adds	r3, #4
 80111a4:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80111a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111a8:	3308      	adds	r3, #8
 80111aa:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80111ac:	f001 f892 	bl	80122d4 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80111b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111b2:	68db      	ldr	r3, [r3, #12]
 80111b4:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80111b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111b8:	681a      	ldr	r2, [r3, #0]
 80111ba:	683b      	ldr	r3, [r7, #0]
 80111bc:	431a      	orrs	r2, r3
 80111be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111c0:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80111c2:	e03c      	b.n	801123e <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 80111c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111c6:	685b      	ldr	r3, [r3, #4]
 80111c8:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80111ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111cc:	681b      	ldr	r3, [r3, #0]
 80111ce:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80111d0:	2300      	movs	r3, #0
 80111d2:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80111d4:	69bb      	ldr	r3, [r7, #24]
 80111d6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80111da:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80111dc:	69bb      	ldr	r3, [r7, #24]
 80111de:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80111e2:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80111e4:	697b      	ldr	r3, [r7, #20]
 80111e6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d108      	bne.n	8011200 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80111ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111f0:	681a      	ldr	r2, [r3, #0]
 80111f2:	69bb      	ldr	r3, [r7, #24]
 80111f4:	4013      	ands	r3, r2
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d00b      	beq.n	8011212 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 80111fa:	2301      	movs	r3, #1
 80111fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80111fe:	e008      	b.n	8011212 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8011200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011202:	681a      	ldr	r2, [r3, #0]
 8011204:	69bb      	ldr	r3, [r7, #24]
 8011206:	4013      	ands	r3, r2
 8011208:	69ba      	ldr	r2, [r7, #24]
 801120a:	429a      	cmp	r2, r3
 801120c:	d101      	bne.n	8011212 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 801120e:	2301      	movs	r3, #1
 8011210:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8011212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011214:	2b00      	cmp	r3, #0
 8011216:	d010      	beq.n	801123a <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8011218:	697b      	ldr	r3, [r7, #20]
 801121a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801121e:	2b00      	cmp	r3, #0
 8011220:	d003      	beq.n	801122a <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8011222:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011224:	69bb      	ldr	r3, [r7, #24]
 8011226:	4313      	orrs	r3, r2
 8011228:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 801122a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801122c:	681b      	ldr	r3, [r3, #0]
 801122e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8011232:	4619      	mov	r1, r3
 8011234:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011236:	f001 fadd 	bl	80127f4 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 801123a:	69fb      	ldr	r3, [r7, #28]
 801123c:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 801123e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011240:	6a3b      	ldr	r3, [r7, #32]
 8011242:	429a      	cmp	r2, r3
 8011244:	d1be      	bne.n	80111c4 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8011246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011248:	681a      	ldr	r2, [r3, #0]
 801124a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801124c:	43db      	mvns	r3, r3
 801124e:	401a      	ands	r2, r3
 8011250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011252:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8011254:	f001 f84c 	bl	80122f0 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8011258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801125a:	681b      	ldr	r3, [r3, #0]
}
 801125c:	4618      	mov	r0, r3
 801125e:	3738      	adds	r7, #56	; 0x38
 8011260:	46bd      	mov	sp, r7
 8011262:	bd80      	pop	{r7, pc}

08011264 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8011264:	b580      	push	{r7, lr}
 8011266:	b082      	sub	sp, #8
 8011268:	af00      	add	r7, sp, #0
 801126a:	6078      	str	r0, [r7, #4]
 801126c:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 801126e:	6839      	ldr	r1, [r7, #0]
 8011270:	6878      	ldr	r0, [r7, #4]
 8011272:	f7ff ff6c 	bl	801114e <xEventGroupSetBits>
}
 8011276:	bf00      	nop
 8011278:	3708      	adds	r7, #8
 801127a:	46bd      	mov	sp, r7
 801127c:	bd80      	pop	{r7, pc}
	...

08011280 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8011280:	b580      	push	{r7, lr}
 8011282:	b086      	sub	sp, #24
 8011284:	af00      	add	r7, sp, #0
 8011286:	60f8      	str	r0, [r7, #12]
 8011288:	60b9      	str	r1, [r7, #8]
 801128a:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	68ba      	ldr	r2, [r7, #8]
 8011290:	68f9      	ldr	r1, [r7, #12]
 8011292:	4804      	ldr	r0, [pc, #16]	; (80112a4 <xEventGroupSetBitsFromISR+0x24>)
 8011294:	f002 f898 	bl	80133c8 <xTimerPendFunctionCallFromISR>
 8011298:	6178      	str	r0, [r7, #20]

		return xReturn;
 801129a:	697b      	ldr	r3, [r7, #20]
	}
 801129c:	4618      	mov	r0, r3
 801129e:	3718      	adds	r7, #24
 80112a0:	46bd      	mov	sp, r7
 80112a2:	bd80      	pop	{r7, pc}
 80112a4:	08011265 	.word	0x08011265

080112a8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80112a8:	b480      	push	{r7}
 80112aa:	b083      	sub	sp, #12
 80112ac:	af00      	add	r7, sp, #0
 80112ae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	f103 0208 	add.w	r2, r3, #8
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80112c0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	f103 0208 	add.w	r2, r3, #8
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	f103 0208 	add.w	r2, r3, #8
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	2200      	movs	r2, #0
 80112da:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80112dc:	bf00      	nop
 80112de:	370c      	adds	r7, #12
 80112e0:	46bd      	mov	sp, r7
 80112e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112e6:	4770      	bx	lr

080112e8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80112e8:	b480      	push	{r7}
 80112ea:	b083      	sub	sp, #12
 80112ec:	af00      	add	r7, sp, #0
 80112ee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	2200      	movs	r2, #0
 80112f4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80112f6:	bf00      	nop
 80112f8:	370c      	adds	r7, #12
 80112fa:	46bd      	mov	sp, r7
 80112fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011300:	4770      	bx	lr

08011302 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011302:	b480      	push	{r7}
 8011304:	b085      	sub	sp, #20
 8011306:	af00      	add	r7, sp, #0
 8011308:	6078      	str	r0, [r7, #4]
 801130a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	685b      	ldr	r3, [r3, #4]
 8011310:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8011312:	683b      	ldr	r3, [r7, #0]
 8011314:	68fa      	ldr	r2, [r7, #12]
 8011316:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8011318:	68fb      	ldr	r3, [r7, #12]
 801131a:	689a      	ldr	r2, [r3, #8]
 801131c:	683b      	ldr	r3, [r7, #0]
 801131e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8011320:	68fb      	ldr	r3, [r7, #12]
 8011322:	689b      	ldr	r3, [r3, #8]
 8011324:	683a      	ldr	r2, [r7, #0]
 8011326:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8011328:	68fb      	ldr	r3, [r7, #12]
 801132a:	683a      	ldr	r2, [r7, #0]
 801132c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801132e:	683b      	ldr	r3, [r7, #0]
 8011330:	687a      	ldr	r2, [r7, #4]
 8011332:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	681b      	ldr	r3, [r3, #0]
 8011338:	1c5a      	adds	r2, r3, #1
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	601a      	str	r2, [r3, #0]
}
 801133e:	bf00      	nop
 8011340:	3714      	adds	r7, #20
 8011342:	46bd      	mov	sp, r7
 8011344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011348:	4770      	bx	lr

0801134a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801134a:	b480      	push	{r7}
 801134c:	b085      	sub	sp, #20
 801134e:	af00      	add	r7, sp, #0
 8011350:	6078      	str	r0, [r7, #4]
 8011352:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8011354:	683b      	ldr	r3, [r7, #0]
 8011356:	681b      	ldr	r3, [r3, #0]
 8011358:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801135a:	68bb      	ldr	r3, [r7, #8]
 801135c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011360:	d103      	bne.n	801136a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	691b      	ldr	r3, [r3, #16]
 8011366:	60fb      	str	r3, [r7, #12]
 8011368:	e00c      	b.n	8011384 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	3308      	adds	r3, #8
 801136e:	60fb      	str	r3, [r7, #12]
 8011370:	e002      	b.n	8011378 <vListInsert+0x2e>
 8011372:	68fb      	ldr	r3, [r7, #12]
 8011374:	685b      	ldr	r3, [r3, #4]
 8011376:	60fb      	str	r3, [r7, #12]
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	685b      	ldr	r3, [r3, #4]
 801137c:	681b      	ldr	r3, [r3, #0]
 801137e:	68ba      	ldr	r2, [r7, #8]
 8011380:	429a      	cmp	r2, r3
 8011382:	d2f6      	bcs.n	8011372 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8011384:	68fb      	ldr	r3, [r7, #12]
 8011386:	685a      	ldr	r2, [r3, #4]
 8011388:	683b      	ldr	r3, [r7, #0]
 801138a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801138c:	683b      	ldr	r3, [r7, #0]
 801138e:	685b      	ldr	r3, [r3, #4]
 8011390:	683a      	ldr	r2, [r7, #0]
 8011392:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8011394:	683b      	ldr	r3, [r7, #0]
 8011396:	68fa      	ldr	r2, [r7, #12]
 8011398:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801139a:	68fb      	ldr	r3, [r7, #12]
 801139c:	683a      	ldr	r2, [r7, #0]
 801139e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80113a0:	683b      	ldr	r3, [r7, #0]
 80113a2:	687a      	ldr	r2, [r7, #4]
 80113a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	681b      	ldr	r3, [r3, #0]
 80113aa:	1c5a      	adds	r2, r3, #1
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	601a      	str	r2, [r3, #0]
}
 80113b0:	bf00      	nop
 80113b2:	3714      	adds	r7, #20
 80113b4:	46bd      	mov	sp, r7
 80113b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ba:	4770      	bx	lr

080113bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80113bc:	b480      	push	{r7}
 80113be:	b085      	sub	sp, #20
 80113c0:	af00      	add	r7, sp, #0
 80113c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	691b      	ldr	r3, [r3, #16]
 80113c8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	685b      	ldr	r3, [r3, #4]
 80113ce:	687a      	ldr	r2, [r7, #4]
 80113d0:	6892      	ldr	r2, [r2, #8]
 80113d2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	689b      	ldr	r3, [r3, #8]
 80113d8:	687a      	ldr	r2, [r7, #4]
 80113da:	6852      	ldr	r2, [r2, #4]
 80113dc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80113de:	68fb      	ldr	r3, [r7, #12]
 80113e0:	685b      	ldr	r3, [r3, #4]
 80113e2:	687a      	ldr	r2, [r7, #4]
 80113e4:	429a      	cmp	r2, r3
 80113e6:	d103      	bne.n	80113f0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	689a      	ldr	r2, [r3, #8]
 80113ec:	68fb      	ldr	r3, [r7, #12]
 80113ee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	2200      	movs	r2, #0
 80113f4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80113f6:	68fb      	ldr	r3, [r7, #12]
 80113f8:	681b      	ldr	r3, [r3, #0]
 80113fa:	1e5a      	subs	r2, r3, #1
 80113fc:	68fb      	ldr	r3, [r7, #12]
 80113fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8011400:	68fb      	ldr	r3, [r7, #12]
 8011402:	681b      	ldr	r3, [r3, #0]
}
 8011404:	4618      	mov	r0, r3
 8011406:	3714      	adds	r7, #20
 8011408:	46bd      	mov	sp, r7
 801140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801140e:	4770      	bx	lr

08011410 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8011410:	b580      	push	{r7, lr}
 8011412:	b084      	sub	sp, #16
 8011414:	af00      	add	r7, sp, #0
 8011416:	6078      	str	r0, [r7, #4]
 8011418:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801141e:	68fb      	ldr	r3, [r7, #12]
 8011420:	2b00      	cmp	r3, #0
 8011422:	d10a      	bne.n	801143a <xQueueGenericReset+0x2a>
	__asm volatile
 8011424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011428:	f383 8811 	msr	BASEPRI, r3
 801142c:	f3bf 8f6f 	isb	sy
 8011430:	f3bf 8f4f 	dsb	sy
 8011434:	60bb      	str	r3, [r7, #8]
}
 8011436:	bf00      	nop
 8011438:	e7fe      	b.n	8011438 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801143a:	f002 f913 	bl	8013664 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801143e:	68fb      	ldr	r3, [r7, #12]
 8011440:	681a      	ldr	r2, [r3, #0]
 8011442:	68fb      	ldr	r3, [r7, #12]
 8011444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011446:	68f9      	ldr	r1, [r7, #12]
 8011448:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801144a:	fb01 f303 	mul.w	r3, r1, r3
 801144e:	441a      	add	r2, r3
 8011450:	68fb      	ldr	r3, [r7, #12]
 8011452:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8011454:	68fb      	ldr	r3, [r7, #12]
 8011456:	2200      	movs	r2, #0
 8011458:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801145a:	68fb      	ldr	r3, [r7, #12]
 801145c:	681a      	ldr	r2, [r3, #0]
 801145e:	68fb      	ldr	r3, [r7, #12]
 8011460:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011462:	68fb      	ldr	r3, [r7, #12]
 8011464:	681a      	ldr	r2, [r3, #0]
 8011466:	68fb      	ldr	r3, [r7, #12]
 8011468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801146a:	3b01      	subs	r3, #1
 801146c:	68f9      	ldr	r1, [r7, #12]
 801146e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011470:	fb01 f303 	mul.w	r3, r1, r3
 8011474:	441a      	add	r2, r3
 8011476:	68fb      	ldr	r3, [r7, #12]
 8011478:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	22ff      	movs	r2, #255	; 0xff
 801147e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8011482:	68fb      	ldr	r3, [r7, #12]
 8011484:	22ff      	movs	r2, #255	; 0xff
 8011486:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801148a:	683b      	ldr	r3, [r7, #0]
 801148c:	2b00      	cmp	r3, #0
 801148e:	d114      	bne.n	80114ba <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011490:	68fb      	ldr	r3, [r7, #12]
 8011492:	691b      	ldr	r3, [r3, #16]
 8011494:	2b00      	cmp	r3, #0
 8011496:	d01a      	beq.n	80114ce <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011498:	68fb      	ldr	r3, [r7, #12]
 801149a:	3310      	adds	r3, #16
 801149c:	4618      	mov	r0, r3
 801149e:	f001 f945 	bl	801272c <xTaskRemoveFromEventList>
 80114a2:	4603      	mov	r3, r0
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d012      	beq.n	80114ce <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80114a8:	4b0c      	ldr	r3, [pc, #48]	; (80114dc <xQueueGenericReset+0xcc>)
 80114aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80114ae:	601a      	str	r2, [r3, #0]
 80114b0:	f3bf 8f4f 	dsb	sy
 80114b4:	f3bf 8f6f 	isb	sy
 80114b8:	e009      	b.n	80114ce <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80114ba:	68fb      	ldr	r3, [r7, #12]
 80114bc:	3310      	adds	r3, #16
 80114be:	4618      	mov	r0, r3
 80114c0:	f7ff fef2 	bl	80112a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80114c4:	68fb      	ldr	r3, [r7, #12]
 80114c6:	3324      	adds	r3, #36	; 0x24
 80114c8:	4618      	mov	r0, r3
 80114ca:	f7ff feed 	bl	80112a8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80114ce:	f002 f8f9 	bl	80136c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80114d2:	2301      	movs	r3, #1
}
 80114d4:	4618      	mov	r0, r3
 80114d6:	3710      	adds	r7, #16
 80114d8:	46bd      	mov	sp, r7
 80114da:	bd80      	pop	{r7, pc}
 80114dc:	e000ed04 	.word	0xe000ed04

080114e0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80114e0:	b580      	push	{r7, lr}
 80114e2:	b08e      	sub	sp, #56	; 0x38
 80114e4:	af02      	add	r7, sp, #8
 80114e6:	60f8      	str	r0, [r7, #12]
 80114e8:	60b9      	str	r1, [r7, #8]
 80114ea:	607a      	str	r2, [r7, #4]
 80114ec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80114ee:	68fb      	ldr	r3, [r7, #12]
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	d10a      	bne.n	801150a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80114f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114f8:	f383 8811 	msr	BASEPRI, r3
 80114fc:	f3bf 8f6f 	isb	sy
 8011500:	f3bf 8f4f 	dsb	sy
 8011504:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8011506:	bf00      	nop
 8011508:	e7fe      	b.n	8011508 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801150a:	683b      	ldr	r3, [r7, #0]
 801150c:	2b00      	cmp	r3, #0
 801150e:	d10a      	bne.n	8011526 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8011510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011514:	f383 8811 	msr	BASEPRI, r3
 8011518:	f3bf 8f6f 	isb	sy
 801151c:	f3bf 8f4f 	dsb	sy
 8011520:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011522:	bf00      	nop
 8011524:	e7fe      	b.n	8011524 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	2b00      	cmp	r3, #0
 801152a:	d002      	beq.n	8011532 <xQueueGenericCreateStatic+0x52>
 801152c:	68bb      	ldr	r3, [r7, #8]
 801152e:	2b00      	cmp	r3, #0
 8011530:	d001      	beq.n	8011536 <xQueueGenericCreateStatic+0x56>
 8011532:	2301      	movs	r3, #1
 8011534:	e000      	b.n	8011538 <xQueueGenericCreateStatic+0x58>
 8011536:	2300      	movs	r3, #0
 8011538:	2b00      	cmp	r3, #0
 801153a:	d10a      	bne.n	8011552 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 801153c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011540:	f383 8811 	msr	BASEPRI, r3
 8011544:	f3bf 8f6f 	isb	sy
 8011548:	f3bf 8f4f 	dsb	sy
 801154c:	623b      	str	r3, [r7, #32]
}
 801154e:	bf00      	nop
 8011550:	e7fe      	b.n	8011550 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	2b00      	cmp	r3, #0
 8011556:	d102      	bne.n	801155e <xQueueGenericCreateStatic+0x7e>
 8011558:	68bb      	ldr	r3, [r7, #8]
 801155a:	2b00      	cmp	r3, #0
 801155c:	d101      	bne.n	8011562 <xQueueGenericCreateStatic+0x82>
 801155e:	2301      	movs	r3, #1
 8011560:	e000      	b.n	8011564 <xQueueGenericCreateStatic+0x84>
 8011562:	2300      	movs	r3, #0
 8011564:	2b00      	cmp	r3, #0
 8011566:	d10a      	bne.n	801157e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8011568:	f04f 0350 	mov.w	r3, #80	; 0x50
 801156c:	f383 8811 	msr	BASEPRI, r3
 8011570:	f3bf 8f6f 	isb	sy
 8011574:	f3bf 8f4f 	dsb	sy
 8011578:	61fb      	str	r3, [r7, #28]
}
 801157a:	bf00      	nop
 801157c:	e7fe      	b.n	801157c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801157e:	2350      	movs	r3, #80	; 0x50
 8011580:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8011582:	697b      	ldr	r3, [r7, #20]
 8011584:	2b50      	cmp	r3, #80	; 0x50
 8011586:	d00a      	beq.n	801159e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8011588:	f04f 0350 	mov.w	r3, #80	; 0x50
 801158c:	f383 8811 	msr	BASEPRI, r3
 8011590:	f3bf 8f6f 	isb	sy
 8011594:	f3bf 8f4f 	dsb	sy
 8011598:	61bb      	str	r3, [r7, #24]
}
 801159a:	bf00      	nop
 801159c:	e7fe      	b.n	801159c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801159e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80115a0:	683b      	ldr	r3, [r7, #0]
 80115a2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80115a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d00d      	beq.n	80115c6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80115aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115ac:	2201      	movs	r2, #1
 80115ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80115b2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80115b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115b8:	9300      	str	r3, [sp, #0]
 80115ba:	4613      	mov	r3, r2
 80115bc:	687a      	ldr	r2, [r7, #4]
 80115be:	68b9      	ldr	r1, [r7, #8]
 80115c0:	68f8      	ldr	r0, [r7, #12]
 80115c2:	f000 f83f 	bl	8011644 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80115c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80115c8:	4618      	mov	r0, r3
 80115ca:	3730      	adds	r7, #48	; 0x30
 80115cc:	46bd      	mov	sp, r7
 80115ce:	bd80      	pop	{r7, pc}

080115d0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80115d0:	b580      	push	{r7, lr}
 80115d2:	b08a      	sub	sp, #40	; 0x28
 80115d4:	af02      	add	r7, sp, #8
 80115d6:	60f8      	str	r0, [r7, #12]
 80115d8:	60b9      	str	r1, [r7, #8]
 80115da:	4613      	mov	r3, r2
 80115dc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80115de:	68fb      	ldr	r3, [r7, #12]
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d10a      	bne.n	80115fa <xQueueGenericCreate+0x2a>
	__asm volatile
 80115e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115e8:	f383 8811 	msr	BASEPRI, r3
 80115ec:	f3bf 8f6f 	isb	sy
 80115f0:	f3bf 8f4f 	dsb	sy
 80115f4:	613b      	str	r3, [r7, #16]
}
 80115f6:	bf00      	nop
 80115f8:	e7fe      	b.n	80115f8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80115fa:	68fb      	ldr	r3, [r7, #12]
 80115fc:	68ba      	ldr	r2, [r7, #8]
 80115fe:	fb02 f303 	mul.w	r3, r2, r3
 8011602:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8011604:	69fb      	ldr	r3, [r7, #28]
 8011606:	3350      	adds	r3, #80	; 0x50
 8011608:	4618      	mov	r0, r3
 801160a:	f002 f94d 	bl	80138a8 <pvPortMalloc>
 801160e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8011610:	69bb      	ldr	r3, [r7, #24]
 8011612:	2b00      	cmp	r3, #0
 8011614:	d011      	beq.n	801163a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8011616:	69bb      	ldr	r3, [r7, #24]
 8011618:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801161a:	697b      	ldr	r3, [r7, #20]
 801161c:	3350      	adds	r3, #80	; 0x50
 801161e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8011620:	69bb      	ldr	r3, [r7, #24]
 8011622:	2200      	movs	r2, #0
 8011624:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011628:	79fa      	ldrb	r2, [r7, #7]
 801162a:	69bb      	ldr	r3, [r7, #24]
 801162c:	9300      	str	r3, [sp, #0]
 801162e:	4613      	mov	r3, r2
 8011630:	697a      	ldr	r2, [r7, #20]
 8011632:	68b9      	ldr	r1, [r7, #8]
 8011634:	68f8      	ldr	r0, [r7, #12]
 8011636:	f000 f805 	bl	8011644 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801163a:	69bb      	ldr	r3, [r7, #24]
	}
 801163c:	4618      	mov	r0, r3
 801163e:	3720      	adds	r7, #32
 8011640:	46bd      	mov	sp, r7
 8011642:	bd80      	pop	{r7, pc}

08011644 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8011644:	b580      	push	{r7, lr}
 8011646:	b084      	sub	sp, #16
 8011648:	af00      	add	r7, sp, #0
 801164a:	60f8      	str	r0, [r7, #12]
 801164c:	60b9      	str	r1, [r7, #8]
 801164e:	607a      	str	r2, [r7, #4]
 8011650:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8011652:	68bb      	ldr	r3, [r7, #8]
 8011654:	2b00      	cmp	r3, #0
 8011656:	d103      	bne.n	8011660 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8011658:	69bb      	ldr	r3, [r7, #24]
 801165a:	69ba      	ldr	r2, [r7, #24]
 801165c:	601a      	str	r2, [r3, #0]
 801165e:	e002      	b.n	8011666 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8011660:	69bb      	ldr	r3, [r7, #24]
 8011662:	687a      	ldr	r2, [r7, #4]
 8011664:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8011666:	69bb      	ldr	r3, [r7, #24]
 8011668:	68fa      	ldr	r2, [r7, #12]
 801166a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801166c:	69bb      	ldr	r3, [r7, #24]
 801166e:	68ba      	ldr	r2, [r7, #8]
 8011670:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8011672:	2101      	movs	r1, #1
 8011674:	69b8      	ldr	r0, [r7, #24]
 8011676:	f7ff fecb 	bl	8011410 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801167a:	69bb      	ldr	r3, [r7, #24]
 801167c:	78fa      	ldrb	r2, [r7, #3]
 801167e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8011682:	bf00      	nop
 8011684:	3710      	adds	r7, #16
 8011686:	46bd      	mov	sp, r7
 8011688:	bd80      	pop	{r7, pc}
	...

0801168c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801168c:	b580      	push	{r7, lr}
 801168e:	b08e      	sub	sp, #56	; 0x38
 8011690:	af00      	add	r7, sp, #0
 8011692:	60f8      	str	r0, [r7, #12]
 8011694:	60b9      	str	r1, [r7, #8]
 8011696:	607a      	str	r2, [r7, #4]
 8011698:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801169a:	2300      	movs	r3, #0
 801169c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801169e:	68fb      	ldr	r3, [r7, #12]
 80116a0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80116a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d10a      	bne.n	80116be <xQueueGenericSend+0x32>
	__asm volatile
 80116a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116ac:	f383 8811 	msr	BASEPRI, r3
 80116b0:	f3bf 8f6f 	isb	sy
 80116b4:	f3bf 8f4f 	dsb	sy
 80116b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80116ba:	bf00      	nop
 80116bc:	e7fe      	b.n	80116bc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80116be:	68bb      	ldr	r3, [r7, #8]
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d103      	bne.n	80116cc <xQueueGenericSend+0x40>
 80116c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d101      	bne.n	80116d0 <xQueueGenericSend+0x44>
 80116cc:	2301      	movs	r3, #1
 80116ce:	e000      	b.n	80116d2 <xQueueGenericSend+0x46>
 80116d0:	2300      	movs	r3, #0
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d10a      	bne.n	80116ec <xQueueGenericSend+0x60>
	__asm volatile
 80116d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116da:	f383 8811 	msr	BASEPRI, r3
 80116de:	f3bf 8f6f 	isb	sy
 80116e2:	f3bf 8f4f 	dsb	sy
 80116e6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80116e8:	bf00      	nop
 80116ea:	e7fe      	b.n	80116ea <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80116ec:	683b      	ldr	r3, [r7, #0]
 80116ee:	2b02      	cmp	r3, #2
 80116f0:	d103      	bne.n	80116fa <xQueueGenericSend+0x6e>
 80116f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80116f6:	2b01      	cmp	r3, #1
 80116f8:	d101      	bne.n	80116fe <xQueueGenericSend+0x72>
 80116fa:	2301      	movs	r3, #1
 80116fc:	e000      	b.n	8011700 <xQueueGenericSend+0x74>
 80116fe:	2300      	movs	r3, #0
 8011700:	2b00      	cmp	r3, #0
 8011702:	d10a      	bne.n	801171a <xQueueGenericSend+0x8e>
	__asm volatile
 8011704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011708:	f383 8811 	msr	BASEPRI, r3
 801170c:	f3bf 8f6f 	isb	sy
 8011710:	f3bf 8f4f 	dsb	sy
 8011714:	623b      	str	r3, [r7, #32]
}
 8011716:	bf00      	nop
 8011718:	e7fe      	b.n	8011718 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801171a:	f001 fa27 	bl	8012b6c <xTaskGetSchedulerState>
 801171e:	4603      	mov	r3, r0
 8011720:	2b00      	cmp	r3, #0
 8011722:	d102      	bne.n	801172a <xQueueGenericSend+0x9e>
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	2b00      	cmp	r3, #0
 8011728:	d101      	bne.n	801172e <xQueueGenericSend+0xa2>
 801172a:	2301      	movs	r3, #1
 801172c:	e000      	b.n	8011730 <xQueueGenericSend+0xa4>
 801172e:	2300      	movs	r3, #0
 8011730:	2b00      	cmp	r3, #0
 8011732:	d10a      	bne.n	801174a <xQueueGenericSend+0xbe>
	__asm volatile
 8011734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011738:	f383 8811 	msr	BASEPRI, r3
 801173c:	f3bf 8f6f 	isb	sy
 8011740:	f3bf 8f4f 	dsb	sy
 8011744:	61fb      	str	r3, [r7, #28]
}
 8011746:	bf00      	nop
 8011748:	e7fe      	b.n	8011748 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801174a:	f001 ff8b 	bl	8013664 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801174e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011750:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011756:	429a      	cmp	r2, r3
 8011758:	d302      	bcc.n	8011760 <xQueueGenericSend+0xd4>
 801175a:	683b      	ldr	r3, [r7, #0]
 801175c:	2b02      	cmp	r3, #2
 801175e:	d129      	bne.n	80117b4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011760:	683a      	ldr	r2, [r7, #0]
 8011762:	68b9      	ldr	r1, [r7, #8]
 8011764:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011766:	f000 fa0b 	bl	8011b80 <prvCopyDataToQueue>
 801176a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801176c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801176e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011770:	2b00      	cmp	r3, #0
 8011772:	d010      	beq.n	8011796 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011776:	3324      	adds	r3, #36	; 0x24
 8011778:	4618      	mov	r0, r3
 801177a:	f000 ffd7 	bl	801272c <xTaskRemoveFromEventList>
 801177e:	4603      	mov	r3, r0
 8011780:	2b00      	cmp	r3, #0
 8011782:	d013      	beq.n	80117ac <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8011784:	4b3f      	ldr	r3, [pc, #252]	; (8011884 <xQueueGenericSend+0x1f8>)
 8011786:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801178a:	601a      	str	r2, [r3, #0]
 801178c:	f3bf 8f4f 	dsb	sy
 8011790:	f3bf 8f6f 	isb	sy
 8011794:	e00a      	b.n	80117ac <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8011796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011798:	2b00      	cmp	r3, #0
 801179a:	d007      	beq.n	80117ac <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801179c:	4b39      	ldr	r3, [pc, #228]	; (8011884 <xQueueGenericSend+0x1f8>)
 801179e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80117a2:	601a      	str	r2, [r3, #0]
 80117a4:	f3bf 8f4f 	dsb	sy
 80117a8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80117ac:	f001 ff8a 	bl	80136c4 <vPortExitCritical>
				return pdPASS;
 80117b0:	2301      	movs	r3, #1
 80117b2:	e063      	b.n	801187c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d103      	bne.n	80117c2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80117ba:	f001 ff83 	bl	80136c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80117be:	2300      	movs	r3, #0
 80117c0:	e05c      	b.n	801187c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80117c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d106      	bne.n	80117d6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80117c8:	f107 0314 	add.w	r3, r7, #20
 80117cc:	4618      	mov	r0, r3
 80117ce:	f001 f873 	bl	80128b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80117d2:	2301      	movs	r3, #1
 80117d4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80117d6:	f001 ff75 	bl	80136c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80117da:	f000 fd7b 	bl	80122d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80117de:	f001 ff41 	bl	8013664 <vPortEnterCritical>
 80117e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80117e8:	b25b      	sxtb	r3, r3
 80117ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80117ee:	d103      	bne.n	80117f8 <xQueueGenericSend+0x16c>
 80117f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117f2:	2200      	movs	r2, #0
 80117f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80117f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80117fe:	b25b      	sxtb	r3, r3
 8011800:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011804:	d103      	bne.n	801180e <xQueueGenericSend+0x182>
 8011806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011808:	2200      	movs	r2, #0
 801180a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801180e:	f001 ff59 	bl	80136c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011812:	1d3a      	adds	r2, r7, #4
 8011814:	f107 0314 	add.w	r3, r7, #20
 8011818:	4611      	mov	r1, r2
 801181a:	4618      	mov	r0, r3
 801181c:	f001 f862 	bl	80128e4 <xTaskCheckForTimeOut>
 8011820:	4603      	mov	r3, r0
 8011822:	2b00      	cmp	r3, #0
 8011824:	d124      	bne.n	8011870 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8011826:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011828:	f000 faa2 	bl	8011d70 <prvIsQueueFull>
 801182c:	4603      	mov	r3, r0
 801182e:	2b00      	cmp	r3, #0
 8011830:	d018      	beq.n	8011864 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8011832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011834:	3310      	adds	r3, #16
 8011836:	687a      	ldr	r2, [r7, #4]
 8011838:	4611      	mov	r1, r2
 801183a:	4618      	mov	r0, r3
 801183c:	f000 ff26 	bl	801268c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8011840:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011842:	f000 fa2d 	bl	8011ca0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8011846:	f000 fd53 	bl	80122f0 <xTaskResumeAll>
 801184a:	4603      	mov	r3, r0
 801184c:	2b00      	cmp	r3, #0
 801184e:	f47f af7c 	bne.w	801174a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8011852:	4b0c      	ldr	r3, [pc, #48]	; (8011884 <xQueueGenericSend+0x1f8>)
 8011854:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011858:	601a      	str	r2, [r3, #0]
 801185a:	f3bf 8f4f 	dsb	sy
 801185e:	f3bf 8f6f 	isb	sy
 8011862:	e772      	b.n	801174a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8011864:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011866:	f000 fa1b 	bl	8011ca0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801186a:	f000 fd41 	bl	80122f0 <xTaskResumeAll>
 801186e:	e76c      	b.n	801174a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8011870:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011872:	f000 fa15 	bl	8011ca0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011876:	f000 fd3b 	bl	80122f0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801187a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801187c:	4618      	mov	r0, r3
 801187e:	3738      	adds	r7, #56	; 0x38
 8011880:	46bd      	mov	sp, r7
 8011882:	bd80      	pop	{r7, pc}
 8011884:	e000ed04 	.word	0xe000ed04

08011888 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8011888:	b580      	push	{r7, lr}
 801188a:	b090      	sub	sp, #64	; 0x40
 801188c:	af00      	add	r7, sp, #0
 801188e:	60f8      	str	r0, [r7, #12]
 8011890:	60b9      	str	r1, [r7, #8]
 8011892:	607a      	str	r2, [r7, #4]
 8011894:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011896:	68fb      	ldr	r3, [r7, #12]
 8011898:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 801189a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801189c:	2b00      	cmp	r3, #0
 801189e:	d10a      	bne.n	80118b6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80118a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118a4:	f383 8811 	msr	BASEPRI, r3
 80118a8:	f3bf 8f6f 	isb	sy
 80118ac:	f3bf 8f4f 	dsb	sy
 80118b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80118b2:	bf00      	nop
 80118b4:	e7fe      	b.n	80118b4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80118b6:	68bb      	ldr	r3, [r7, #8]
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d103      	bne.n	80118c4 <xQueueGenericSendFromISR+0x3c>
 80118bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d101      	bne.n	80118c8 <xQueueGenericSendFromISR+0x40>
 80118c4:	2301      	movs	r3, #1
 80118c6:	e000      	b.n	80118ca <xQueueGenericSendFromISR+0x42>
 80118c8:	2300      	movs	r3, #0
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d10a      	bne.n	80118e4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80118ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118d2:	f383 8811 	msr	BASEPRI, r3
 80118d6:	f3bf 8f6f 	isb	sy
 80118da:	f3bf 8f4f 	dsb	sy
 80118de:	627b      	str	r3, [r7, #36]	; 0x24
}
 80118e0:	bf00      	nop
 80118e2:	e7fe      	b.n	80118e2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80118e4:	683b      	ldr	r3, [r7, #0]
 80118e6:	2b02      	cmp	r3, #2
 80118e8:	d103      	bne.n	80118f2 <xQueueGenericSendFromISR+0x6a>
 80118ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80118ee:	2b01      	cmp	r3, #1
 80118f0:	d101      	bne.n	80118f6 <xQueueGenericSendFromISR+0x6e>
 80118f2:	2301      	movs	r3, #1
 80118f4:	e000      	b.n	80118f8 <xQueueGenericSendFromISR+0x70>
 80118f6:	2300      	movs	r3, #0
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	d10a      	bne.n	8011912 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80118fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011900:	f383 8811 	msr	BASEPRI, r3
 8011904:	f3bf 8f6f 	isb	sy
 8011908:	f3bf 8f4f 	dsb	sy
 801190c:	623b      	str	r3, [r7, #32]
}
 801190e:	bf00      	nop
 8011910:	e7fe      	b.n	8011910 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011912:	f001 ff89 	bl	8013828 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8011916:	f3ef 8211 	mrs	r2, BASEPRI
 801191a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801191e:	f383 8811 	msr	BASEPRI, r3
 8011922:	f3bf 8f6f 	isb	sy
 8011926:	f3bf 8f4f 	dsb	sy
 801192a:	61fa      	str	r2, [r7, #28]
 801192c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801192e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011930:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011934:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801193a:	429a      	cmp	r2, r3
 801193c:	d302      	bcc.n	8011944 <xQueueGenericSendFromISR+0xbc>
 801193e:	683b      	ldr	r3, [r7, #0]
 8011940:	2b02      	cmp	r3, #2
 8011942:	d12f      	bne.n	80119a4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011946:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801194a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801194e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011952:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011954:	683a      	ldr	r2, [r7, #0]
 8011956:	68b9      	ldr	r1, [r7, #8]
 8011958:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801195a:	f000 f911 	bl	8011b80 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801195e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8011962:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011966:	d112      	bne.n	801198e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801196a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801196c:	2b00      	cmp	r3, #0
 801196e:	d016      	beq.n	801199e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011972:	3324      	adds	r3, #36	; 0x24
 8011974:	4618      	mov	r0, r3
 8011976:	f000 fed9 	bl	801272c <xTaskRemoveFromEventList>
 801197a:	4603      	mov	r3, r0
 801197c:	2b00      	cmp	r3, #0
 801197e:	d00e      	beq.n	801199e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	2b00      	cmp	r3, #0
 8011984:	d00b      	beq.n	801199e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	2201      	movs	r2, #1
 801198a:	601a      	str	r2, [r3, #0]
 801198c:	e007      	b.n	801199e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801198e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8011992:	3301      	adds	r3, #1
 8011994:	b2db      	uxtb	r3, r3
 8011996:	b25a      	sxtb	r2, r3
 8011998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801199a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801199e:	2301      	movs	r3, #1
 80119a0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80119a2:	e001      	b.n	80119a8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80119a4:	2300      	movs	r3, #0
 80119a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80119a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80119aa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80119ac:	697b      	ldr	r3, [r7, #20]
 80119ae:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80119b2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80119b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80119b6:	4618      	mov	r0, r3
 80119b8:	3740      	adds	r7, #64	; 0x40
 80119ba:	46bd      	mov	sp, r7
 80119bc:	bd80      	pop	{r7, pc}
	...

080119c0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80119c0:	b580      	push	{r7, lr}
 80119c2:	b08c      	sub	sp, #48	; 0x30
 80119c4:	af00      	add	r7, sp, #0
 80119c6:	60f8      	str	r0, [r7, #12]
 80119c8:	60b9      	str	r1, [r7, #8]
 80119ca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80119cc:	2300      	movs	r3, #0
 80119ce:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80119d0:	68fb      	ldr	r3, [r7, #12]
 80119d2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80119d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d10a      	bne.n	80119f0 <xQueueReceive+0x30>
	__asm volatile
 80119da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119de:	f383 8811 	msr	BASEPRI, r3
 80119e2:	f3bf 8f6f 	isb	sy
 80119e6:	f3bf 8f4f 	dsb	sy
 80119ea:	623b      	str	r3, [r7, #32]
}
 80119ec:	bf00      	nop
 80119ee:	e7fe      	b.n	80119ee <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80119f0:	68bb      	ldr	r3, [r7, #8]
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	d103      	bne.n	80119fe <xQueueReceive+0x3e>
 80119f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d101      	bne.n	8011a02 <xQueueReceive+0x42>
 80119fe:	2301      	movs	r3, #1
 8011a00:	e000      	b.n	8011a04 <xQueueReceive+0x44>
 8011a02:	2300      	movs	r3, #0
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d10a      	bne.n	8011a1e <xQueueReceive+0x5e>
	__asm volatile
 8011a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a0c:	f383 8811 	msr	BASEPRI, r3
 8011a10:	f3bf 8f6f 	isb	sy
 8011a14:	f3bf 8f4f 	dsb	sy
 8011a18:	61fb      	str	r3, [r7, #28]
}
 8011a1a:	bf00      	nop
 8011a1c:	e7fe      	b.n	8011a1c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011a1e:	f001 f8a5 	bl	8012b6c <xTaskGetSchedulerState>
 8011a22:	4603      	mov	r3, r0
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d102      	bne.n	8011a2e <xQueueReceive+0x6e>
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d101      	bne.n	8011a32 <xQueueReceive+0x72>
 8011a2e:	2301      	movs	r3, #1
 8011a30:	e000      	b.n	8011a34 <xQueueReceive+0x74>
 8011a32:	2300      	movs	r3, #0
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	d10a      	bne.n	8011a4e <xQueueReceive+0x8e>
	__asm volatile
 8011a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a3c:	f383 8811 	msr	BASEPRI, r3
 8011a40:	f3bf 8f6f 	isb	sy
 8011a44:	f3bf 8f4f 	dsb	sy
 8011a48:	61bb      	str	r3, [r7, #24]
}
 8011a4a:	bf00      	nop
 8011a4c:	e7fe      	b.n	8011a4c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011a4e:	f001 fe09 	bl	8013664 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011a56:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d01f      	beq.n	8011a9e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011a5e:	68b9      	ldr	r1, [r7, #8]
 8011a60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011a62:	f000 f8f7 	bl	8011c54 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a68:	1e5a      	subs	r2, r3, #1
 8011a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a6c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a70:	691b      	ldr	r3, [r3, #16]
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d00f      	beq.n	8011a96 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a78:	3310      	adds	r3, #16
 8011a7a:	4618      	mov	r0, r3
 8011a7c:	f000 fe56 	bl	801272c <xTaskRemoveFromEventList>
 8011a80:	4603      	mov	r3, r0
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	d007      	beq.n	8011a96 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011a86:	4b3d      	ldr	r3, [pc, #244]	; (8011b7c <xQueueReceive+0x1bc>)
 8011a88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011a8c:	601a      	str	r2, [r3, #0]
 8011a8e:	f3bf 8f4f 	dsb	sy
 8011a92:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011a96:	f001 fe15 	bl	80136c4 <vPortExitCritical>
				return pdPASS;
 8011a9a:	2301      	movs	r3, #1
 8011a9c:	e069      	b.n	8011b72 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d103      	bne.n	8011aac <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011aa4:	f001 fe0e 	bl	80136c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011aa8:	2300      	movs	r3, #0
 8011aaa:	e062      	b.n	8011b72 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d106      	bne.n	8011ac0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011ab2:	f107 0310 	add.w	r3, r7, #16
 8011ab6:	4618      	mov	r0, r3
 8011ab8:	f000 fefe 	bl	80128b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011abc:	2301      	movs	r3, #1
 8011abe:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011ac0:	f001 fe00 	bl	80136c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011ac4:	f000 fc06 	bl	80122d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011ac8:	f001 fdcc 	bl	8013664 <vPortEnterCritical>
 8011acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ace:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011ad2:	b25b      	sxtb	r3, r3
 8011ad4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011ad8:	d103      	bne.n	8011ae2 <xQueueReceive+0x122>
 8011ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011adc:	2200      	movs	r2, #0
 8011ade:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ae4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011ae8:	b25b      	sxtb	r3, r3
 8011aea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011aee:	d103      	bne.n	8011af8 <xQueueReceive+0x138>
 8011af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011af2:	2200      	movs	r2, #0
 8011af4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011af8:	f001 fde4 	bl	80136c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011afc:	1d3a      	adds	r2, r7, #4
 8011afe:	f107 0310 	add.w	r3, r7, #16
 8011b02:	4611      	mov	r1, r2
 8011b04:	4618      	mov	r0, r3
 8011b06:	f000 feed 	bl	80128e4 <xTaskCheckForTimeOut>
 8011b0a:	4603      	mov	r3, r0
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	d123      	bne.n	8011b58 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011b10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011b12:	f000 f917 	bl	8011d44 <prvIsQueueEmpty>
 8011b16:	4603      	mov	r3, r0
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d017      	beq.n	8011b4c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b1e:	3324      	adds	r3, #36	; 0x24
 8011b20:	687a      	ldr	r2, [r7, #4]
 8011b22:	4611      	mov	r1, r2
 8011b24:	4618      	mov	r0, r3
 8011b26:	f000 fdb1 	bl	801268c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011b2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011b2c:	f000 f8b8 	bl	8011ca0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011b30:	f000 fbde 	bl	80122f0 <xTaskResumeAll>
 8011b34:	4603      	mov	r3, r0
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	d189      	bne.n	8011a4e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8011b3a:	4b10      	ldr	r3, [pc, #64]	; (8011b7c <xQueueReceive+0x1bc>)
 8011b3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011b40:	601a      	str	r2, [r3, #0]
 8011b42:	f3bf 8f4f 	dsb	sy
 8011b46:	f3bf 8f6f 	isb	sy
 8011b4a:	e780      	b.n	8011a4e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8011b4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011b4e:	f000 f8a7 	bl	8011ca0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011b52:	f000 fbcd 	bl	80122f0 <xTaskResumeAll>
 8011b56:	e77a      	b.n	8011a4e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8011b58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011b5a:	f000 f8a1 	bl	8011ca0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011b5e:	f000 fbc7 	bl	80122f0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011b62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011b64:	f000 f8ee 	bl	8011d44 <prvIsQueueEmpty>
 8011b68:	4603      	mov	r3, r0
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	f43f af6f 	beq.w	8011a4e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011b70:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8011b72:	4618      	mov	r0, r3
 8011b74:	3730      	adds	r7, #48	; 0x30
 8011b76:	46bd      	mov	sp, r7
 8011b78:	bd80      	pop	{r7, pc}
 8011b7a:	bf00      	nop
 8011b7c:	e000ed04 	.word	0xe000ed04

08011b80 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8011b80:	b580      	push	{r7, lr}
 8011b82:	b086      	sub	sp, #24
 8011b84:	af00      	add	r7, sp, #0
 8011b86:	60f8      	str	r0, [r7, #12]
 8011b88:	60b9      	str	r1, [r7, #8]
 8011b8a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8011b8c:	2300      	movs	r3, #0
 8011b8e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011b90:	68fb      	ldr	r3, [r7, #12]
 8011b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b94:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8011b96:	68fb      	ldr	r3, [r7, #12]
 8011b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d10d      	bne.n	8011bba <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011b9e:	68fb      	ldr	r3, [r7, #12]
 8011ba0:	681b      	ldr	r3, [r3, #0]
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	d14d      	bne.n	8011c42 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011ba6:	68fb      	ldr	r3, [r7, #12]
 8011ba8:	689b      	ldr	r3, [r3, #8]
 8011baa:	4618      	mov	r0, r3
 8011bac:	f000 fffc 	bl	8012ba8 <xTaskPriorityDisinherit>
 8011bb0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8011bb2:	68fb      	ldr	r3, [r7, #12]
 8011bb4:	2200      	movs	r2, #0
 8011bb6:	609a      	str	r2, [r3, #8]
 8011bb8:	e043      	b.n	8011c42 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	d119      	bne.n	8011bf4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011bc0:	68fb      	ldr	r3, [r7, #12]
 8011bc2:	6858      	ldr	r0, [r3, #4]
 8011bc4:	68fb      	ldr	r3, [r7, #12]
 8011bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011bc8:	461a      	mov	r2, r3
 8011bca:	68b9      	ldr	r1, [r7, #8]
 8011bcc:	f002 f880 	bl	8013cd0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011bd0:	68fb      	ldr	r3, [r7, #12]
 8011bd2:	685a      	ldr	r2, [r3, #4]
 8011bd4:	68fb      	ldr	r3, [r7, #12]
 8011bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011bd8:	441a      	add	r2, r3
 8011bda:	68fb      	ldr	r3, [r7, #12]
 8011bdc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011bde:	68fb      	ldr	r3, [r7, #12]
 8011be0:	685a      	ldr	r2, [r3, #4]
 8011be2:	68fb      	ldr	r3, [r7, #12]
 8011be4:	689b      	ldr	r3, [r3, #8]
 8011be6:	429a      	cmp	r2, r3
 8011be8:	d32b      	bcc.n	8011c42 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8011bea:	68fb      	ldr	r3, [r7, #12]
 8011bec:	681a      	ldr	r2, [r3, #0]
 8011bee:	68fb      	ldr	r3, [r7, #12]
 8011bf0:	605a      	str	r2, [r3, #4]
 8011bf2:	e026      	b.n	8011c42 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8011bf4:	68fb      	ldr	r3, [r7, #12]
 8011bf6:	68d8      	ldr	r0, [r3, #12]
 8011bf8:	68fb      	ldr	r3, [r7, #12]
 8011bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011bfc:	461a      	mov	r2, r3
 8011bfe:	68b9      	ldr	r1, [r7, #8]
 8011c00:	f002 f866 	bl	8013cd0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8011c04:	68fb      	ldr	r3, [r7, #12]
 8011c06:	68da      	ldr	r2, [r3, #12]
 8011c08:	68fb      	ldr	r3, [r7, #12]
 8011c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c0c:	425b      	negs	r3, r3
 8011c0e:	441a      	add	r2, r3
 8011c10:	68fb      	ldr	r3, [r7, #12]
 8011c12:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011c14:	68fb      	ldr	r3, [r7, #12]
 8011c16:	68da      	ldr	r2, [r3, #12]
 8011c18:	68fb      	ldr	r3, [r7, #12]
 8011c1a:	681b      	ldr	r3, [r3, #0]
 8011c1c:	429a      	cmp	r2, r3
 8011c1e:	d207      	bcs.n	8011c30 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8011c20:	68fb      	ldr	r3, [r7, #12]
 8011c22:	689a      	ldr	r2, [r3, #8]
 8011c24:	68fb      	ldr	r3, [r7, #12]
 8011c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c28:	425b      	negs	r3, r3
 8011c2a:	441a      	add	r2, r3
 8011c2c:	68fb      	ldr	r3, [r7, #12]
 8011c2e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	2b02      	cmp	r3, #2
 8011c34:	d105      	bne.n	8011c42 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011c36:	693b      	ldr	r3, [r7, #16]
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	d002      	beq.n	8011c42 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8011c3c:	693b      	ldr	r3, [r7, #16]
 8011c3e:	3b01      	subs	r3, #1
 8011c40:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011c42:	693b      	ldr	r3, [r7, #16]
 8011c44:	1c5a      	adds	r2, r3, #1
 8011c46:	68fb      	ldr	r3, [r7, #12]
 8011c48:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8011c4a:	697b      	ldr	r3, [r7, #20]
}
 8011c4c:	4618      	mov	r0, r3
 8011c4e:	3718      	adds	r7, #24
 8011c50:	46bd      	mov	sp, r7
 8011c52:	bd80      	pop	{r7, pc}

08011c54 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8011c54:	b580      	push	{r7, lr}
 8011c56:	b082      	sub	sp, #8
 8011c58:	af00      	add	r7, sp, #0
 8011c5a:	6078      	str	r0, [r7, #4]
 8011c5c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d018      	beq.n	8011c98 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	68da      	ldr	r2, [r3, #12]
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c6e:	441a      	add	r2, r3
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	68da      	ldr	r2, [r3, #12]
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	689b      	ldr	r3, [r3, #8]
 8011c7c:	429a      	cmp	r2, r3
 8011c7e:	d303      	bcc.n	8011c88 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	681a      	ldr	r2, [r3, #0]
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	68d9      	ldr	r1, [r3, #12]
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c90:	461a      	mov	r2, r3
 8011c92:	6838      	ldr	r0, [r7, #0]
 8011c94:	f002 f81c 	bl	8013cd0 <memcpy>
	}
}
 8011c98:	bf00      	nop
 8011c9a:	3708      	adds	r7, #8
 8011c9c:	46bd      	mov	sp, r7
 8011c9e:	bd80      	pop	{r7, pc}

08011ca0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8011ca0:	b580      	push	{r7, lr}
 8011ca2:	b084      	sub	sp, #16
 8011ca4:	af00      	add	r7, sp, #0
 8011ca6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8011ca8:	f001 fcdc 	bl	8013664 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011cb2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011cb4:	e011      	b.n	8011cda <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d012      	beq.n	8011ce4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	3324      	adds	r3, #36	; 0x24
 8011cc2:	4618      	mov	r0, r3
 8011cc4:	f000 fd32 	bl	801272c <xTaskRemoveFromEventList>
 8011cc8:	4603      	mov	r3, r0
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d001      	beq.n	8011cd2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8011cce:	f000 fe6b 	bl	80129a8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8011cd2:	7bfb      	ldrb	r3, [r7, #15]
 8011cd4:	3b01      	subs	r3, #1
 8011cd6:	b2db      	uxtb	r3, r3
 8011cd8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011cda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	dce9      	bgt.n	8011cb6 <prvUnlockQueue+0x16>
 8011ce2:	e000      	b.n	8011ce6 <prvUnlockQueue+0x46>
					break;
 8011ce4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	22ff      	movs	r2, #255	; 0xff
 8011cea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8011cee:	f001 fce9 	bl	80136c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8011cf2:	f001 fcb7 	bl	8013664 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011cfc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011cfe:	e011      	b.n	8011d24 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	691b      	ldr	r3, [r3, #16]
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d012      	beq.n	8011d2e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	3310      	adds	r3, #16
 8011d0c:	4618      	mov	r0, r3
 8011d0e:	f000 fd0d 	bl	801272c <xTaskRemoveFromEventList>
 8011d12:	4603      	mov	r3, r0
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d001      	beq.n	8011d1c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8011d18:	f000 fe46 	bl	80129a8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8011d1c:	7bbb      	ldrb	r3, [r7, #14]
 8011d1e:	3b01      	subs	r3, #1
 8011d20:	b2db      	uxtb	r3, r3
 8011d22:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011d24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	dce9      	bgt.n	8011d00 <prvUnlockQueue+0x60>
 8011d2c:	e000      	b.n	8011d30 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8011d2e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	22ff      	movs	r2, #255	; 0xff
 8011d34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8011d38:	f001 fcc4 	bl	80136c4 <vPortExitCritical>
}
 8011d3c:	bf00      	nop
 8011d3e:	3710      	adds	r7, #16
 8011d40:	46bd      	mov	sp, r7
 8011d42:	bd80      	pop	{r7, pc}

08011d44 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8011d44:	b580      	push	{r7, lr}
 8011d46:	b084      	sub	sp, #16
 8011d48:	af00      	add	r7, sp, #0
 8011d4a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011d4c:	f001 fc8a 	bl	8013664 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	d102      	bne.n	8011d5e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8011d58:	2301      	movs	r3, #1
 8011d5a:	60fb      	str	r3, [r7, #12]
 8011d5c:	e001      	b.n	8011d62 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8011d5e:	2300      	movs	r3, #0
 8011d60:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011d62:	f001 fcaf 	bl	80136c4 <vPortExitCritical>

	return xReturn;
 8011d66:	68fb      	ldr	r3, [r7, #12]
}
 8011d68:	4618      	mov	r0, r3
 8011d6a:	3710      	adds	r7, #16
 8011d6c:	46bd      	mov	sp, r7
 8011d6e:	bd80      	pop	{r7, pc}

08011d70 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8011d70:	b580      	push	{r7, lr}
 8011d72:	b084      	sub	sp, #16
 8011d74:	af00      	add	r7, sp, #0
 8011d76:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011d78:	f001 fc74 	bl	8013664 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011d84:	429a      	cmp	r2, r3
 8011d86:	d102      	bne.n	8011d8e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8011d88:	2301      	movs	r3, #1
 8011d8a:	60fb      	str	r3, [r7, #12]
 8011d8c:	e001      	b.n	8011d92 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8011d8e:	2300      	movs	r3, #0
 8011d90:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011d92:	f001 fc97 	bl	80136c4 <vPortExitCritical>

	return xReturn;
 8011d96:	68fb      	ldr	r3, [r7, #12]
}
 8011d98:	4618      	mov	r0, r3
 8011d9a:	3710      	adds	r7, #16
 8011d9c:	46bd      	mov	sp, r7
 8011d9e:	bd80      	pop	{r7, pc}

08011da0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8011da0:	b480      	push	{r7}
 8011da2:	b085      	sub	sp, #20
 8011da4:	af00      	add	r7, sp, #0
 8011da6:	6078      	str	r0, [r7, #4]
 8011da8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011daa:	2300      	movs	r3, #0
 8011dac:	60fb      	str	r3, [r7, #12]
 8011dae:	e014      	b.n	8011dda <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8011db0:	4a0f      	ldr	r2, [pc, #60]	; (8011df0 <vQueueAddToRegistry+0x50>)
 8011db2:	68fb      	ldr	r3, [r7, #12]
 8011db4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d10b      	bne.n	8011dd4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8011dbc:	490c      	ldr	r1, [pc, #48]	; (8011df0 <vQueueAddToRegistry+0x50>)
 8011dbe:	68fb      	ldr	r3, [r7, #12]
 8011dc0:	683a      	ldr	r2, [r7, #0]
 8011dc2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8011dc6:	4a0a      	ldr	r2, [pc, #40]	; (8011df0 <vQueueAddToRegistry+0x50>)
 8011dc8:	68fb      	ldr	r3, [r7, #12]
 8011dca:	00db      	lsls	r3, r3, #3
 8011dcc:	4413      	add	r3, r2
 8011dce:	687a      	ldr	r2, [r7, #4]
 8011dd0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8011dd2:	e006      	b.n	8011de2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011dd4:	68fb      	ldr	r3, [r7, #12]
 8011dd6:	3301      	adds	r3, #1
 8011dd8:	60fb      	str	r3, [r7, #12]
 8011dda:	68fb      	ldr	r3, [r7, #12]
 8011ddc:	2b07      	cmp	r3, #7
 8011dde:	d9e7      	bls.n	8011db0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8011de0:	bf00      	nop
 8011de2:	bf00      	nop
 8011de4:	3714      	adds	r7, #20
 8011de6:	46bd      	mov	sp, r7
 8011de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dec:	4770      	bx	lr
 8011dee:	bf00      	nop
 8011df0:	24000f4c 	.word	0x24000f4c

08011df4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011df4:	b580      	push	{r7, lr}
 8011df6:	b086      	sub	sp, #24
 8011df8:	af00      	add	r7, sp, #0
 8011dfa:	60f8      	str	r0, [r7, #12]
 8011dfc:	60b9      	str	r1, [r7, #8]
 8011dfe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8011e00:	68fb      	ldr	r3, [r7, #12]
 8011e02:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8011e04:	f001 fc2e 	bl	8013664 <vPortEnterCritical>
 8011e08:	697b      	ldr	r3, [r7, #20]
 8011e0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011e0e:	b25b      	sxtb	r3, r3
 8011e10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011e14:	d103      	bne.n	8011e1e <vQueueWaitForMessageRestricted+0x2a>
 8011e16:	697b      	ldr	r3, [r7, #20]
 8011e18:	2200      	movs	r2, #0
 8011e1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011e1e:	697b      	ldr	r3, [r7, #20]
 8011e20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011e24:	b25b      	sxtb	r3, r3
 8011e26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011e2a:	d103      	bne.n	8011e34 <vQueueWaitForMessageRestricted+0x40>
 8011e2c:	697b      	ldr	r3, [r7, #20]
 8011e2e:	2200      	movs	r2, #0
 8011e30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011e34:	f001 fc46 	bl	80136c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8011e38:	697b      	ldr	r3, [r7, #20]
 8011e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d106      	bne.n	8011e4e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8011e40:	697b      	ldr	r3, [r7, #20]
 8011e42:	3324      	adds	r3, #36	; 0x24
 8011e44:	687a      	ldr	r2, [r7, #4]
 8011e46:	68b9      	ldr	r1, [r7, #8]
 8011e48:	4618      	mov	r0, r3
 8011e4a:	f000 fc43 	bl	80126d4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8011e4e:	6978      	ldr	r0, [r7, #20]
 8011e50:	f7ff ff26 	bl	8011ca0 <prvUnlockQueue>
	}
 8011e54:	bf00      	nop
 8011e56:	3718      	adds	r7, #24
 8011e58:	46bd      	mov	sp, r7
 8011e5a:	bd80      	pop	{r7, pc}

08011e5c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8011e5c:	b580      	push	{r7, lr}
 8011e5e:	b08e      	sub	sp, #56	; 0x38
 8011e60:	af04      	add	r7, sp, #16
 8011e62:	60f8      	str	r0, [r7, #12]
 8011e64:	60b9      	str	r1, [r7, #8]
 8011e66:	607a      	str	r2, [r7, #4]
 8011e68:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8011e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d10a      	bne.n	8011e86 <xTaskCreateStatic+0x2a>
	__asm volatile
 8011e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e74:	f383 8811 	msr	BASEPRI, r3
 8011e78:	f3bf 8f6f 	isb	sy
 8011e7c:	f3bf 8f4f 	dsb	sy
 8011e80:	623b      	str	r3, [r7, #32]
}
 8011e82:	bf00      	nop
 8011e84:	e7fe      	b.n	8011e84 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8011e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d10a      	bne.n	8011ea2 <xTaskCreateStatic+0x46>
	__asm volatile
 8011e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e90:	f383 8811 	msr	BASEPRI, r3
 8011e94:	f3bf 8f6f 	isb	sy
 8011e98:	f3bf 8f4f 	dsb	sy
 8011e9c:	61fb      	str	r3, [r7, #28]
}
 8011e9e:	bf00      	nop
 8011ea0:	e7fe      	b.n	8011ea0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8011ea2:	235c      	movs	r3, #92	; 0x5c
 8011ea4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8011ea6:	693b      	ldr	r3, [r7, #16]
 8011ea8:	2b5c      	cmp	r3, #92	; 0x5c
 8011eaa:	d00a      	beq.n	8011ec2 <xTaskCreateStatic+0x66>
	__asm volatile
 8011eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011eb0:	f383 8811 	msr	BASEPRI, r3
 8011eb4:	f3bf 8f6f 	isb	sy
 8011eb8:	f3bf 8f4f 	dsb	sy
 8011ebc:	61bb      	str	r3, [r7, #24]
}
 8011ebe:	bf00      	nop
 8011ec0:	e7fe      	b.n	8011ec0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8011ec2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8011ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d01e      	beq.n	8011f08 <xTaskCreateStatic+0xac>
 8011eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	d01b      	beq.n	8011f08 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ed2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8011ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ed6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011ed8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011edc:	2202      	movs	r2, #2
 8011ede:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8011ee2:	2300      	movs	r3, #0
 8011ee4:	9303      	str	r3, [sp, #12]
 8011ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ee8:	9302      	str	r3, [sp, #8]
 8011eea:	f107 0314 	add.w	r3, r7, #20
 8011eee:	9301      	str	r3, [sp, #4]
 8011ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ef2:	9300      	str	r3, [sp, #0]
 8011ef4:	683b      	ldr	r3, [r7, #0]
 8011ef6:	687a      	ldr	r2, [r7, #4]
 8011ef8:	68b9      	ldr	r1, [r7, #8]
 8011efa:	68f8      	ldr	r0, [r7, #12]
 8011efc:	f000 f850 	bl	8011fa0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011f00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011f02:	f000 f8dd 	bl	80120c0 <prvAddNewTaskToReadyList>
 8011f06:	e001      	b.n	8011f0c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8011f08:	2300      	movs	r3, #0
 8011f0a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8011f0c:	697b      	ldr	r3, [r7, #20]
	}
 8011f0e:	4618      	mov	r0, r3
 8011f10:	3728      	adds	r7, #40	; 0x28
 8011f12:	46bd      	mov	sp, r7
 8011f14:	bd80      	pop	{r7, pc}

08011f16 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8011f16:	b580      	push	{r7, lr}
 8011f18:	b08c      	sub	sp, #48	; 0x30
 8011f1a:	af04      	add	r7, sp, #16
 8011f1c:	60f8      	str	r0, [r7, #12]
 8011f1e:	60b9      	str	r1, [r7, #8]
 8011f20:	603b      	str	r3, [r7, #0]
 8011f22:	4613      	mov	r3, r2
 8011f24:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8011f26:	88fb      	ldrh	r3, [r7, #6]
 8011f28:	009b      	lsls	r3, r3, #2
 8011f2a:	4618      	mov	r0, r3
 8011f2c:	f001 fcbc 	bl	80138a8 <pvPortMalloc>
 8011f30:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8011f32:	697b      	ldr	r3, [r7, #20]
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d00e      	beq.n	8011f56 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8011f38:	205c      	movs	r0, #92	; 0x5c
 8011f3a:	f001 fcb5 	bl	80138a8 <pvPortMalloc>
 8011f3e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8011f40:	69fb      	ldr	r3, [r7, #28]
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	d003      	beq.n	8011f4e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8011f46:	69fb      	ldr	r3, [r7, #28]
 8011f48:	697a      	ldr	r2, [r7, #20]
 8011f4a:	631a      	str	r2, [r3, #48]	; 0x30
 8011f4c:	e005      	b.n	8011f5a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8011f4e:	6978      	ldr	r0, [r7, #20]
 8011f50:	f001 fd76 	bl	8013a40 <vPortFree>
 8011f54:	e001      	b.n	8011f5a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8011f56:	2300      	movs	r3, #0
 8011f58:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8011f5a:	69fb      	ldr	r3, [r7, #28]
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d017      	beq.n	8011f90 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8011f60:	69fb      	ldr	r3, [r7, #28]
 8011f62:	2200      	movs	r2, #0
 8011f64:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011f68:	88fa      	ldrh	r2, [r7, #6]
 8011f6a:	2300      	movs	r3, #0
 8011f6c:	9303      	str	r3, [sp, #12]
 8011f6e:	69fb      	ldr	r3, [r7, #28]
 8011f70:	9302      	str	r3, [sp, #8]
 8011f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f74:	9301      	str	r3, [sp, #4]
 8011f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f78:	9300      	str	r3, [sp, #0]
 8011f7a:	683b      	ldr	r3, [r7, #0]
 8011f7c:	68b9      	ldr	r1, [r7, #8]
 8011f7e:	68f8      	ldr	r0, [r7, #12]
 8011f80:	f000 f80e 	bl	8011fa0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011f84:	69f8      	ldr	r0, [r7, #28]
 8011f86:	f000 f89b 	bl	80120c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8011f8a:	2301      	movs	r3, #1
 8011f8c:	61bb      	str	r3, [r7, #24]
 8011f8e:	e002      	b.n	8011f96 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8011f90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011f94:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8011f96:	69bb      	ldr	r3, [r7, #24]
	}
 8011f98:	4618      	mov	r0, r3
 8011f9a:	3720      	adds	r7, #32
 8011f9c:	46bd      	mov	sp, r7
 8011f9e:	bd80      	pop	{r7, pc}

08011fa0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8011fa0:	b580      	push	{r7, lr}
 8011fa2:	b088      	sub	sp, #32
 8011fa4:	af00      	add	r7, sp, #0
 8011fa6:	60f8      	str	r0, [r7, #12]
 8011fa8:	60b9      	str	r1, [r7, #8]
 8011faa:	607a      	str	r2, [r7, #4]
 8011fac:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8011fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fb0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	009b      	lsls	r3, r3, #2
 8011fb6:	461a      	mov	r2, r3
 8011fb8:	21a5      	movs	r1, #165	; 0xa5
 8011fba:	f001 fe97 	bl	8013cec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8011fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011fc2:	6879      	ldr	r1, [r7, #4]
 8011fc4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8011fc8:	440b      	add	r3, r1
 8011fca:	009b      	lsls	r3, r3, #2
 8011fcc:	4413      	add	r3, r2
 8011fce:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8011fd0:	69bb      	ldr	r3, [r7, #24]
 8011fd2:	f023 0307 	bic.w	r3, r3, #7
 8011fd6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8011fd8:	69bb      	ldr	r3, [r7, #24]
 8011fda:	f003 0307 	and.w	r3, r3, #7
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d00a      	beq.n	8011ff8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8011fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fe6:	f383 8811 	msr	BASEPRI, r3
 8011fea:	f3bf 8f6f 	isb	sy
 8011fee:	f3bf 8f4f 	dsb	sy
 8011ff2:	617b      	str	r3, [r7, #20]
}
 8011ff4:	bf00      	nop
 8011ff6:	e7fe      	b.n	8011ff6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8011ff8:	68bb      	ldr	r3, [r7, #8]
 8011ffa:	2b00      	cmp	r3, #0
 8011ffc:	d01f      	beq.n	801203e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011ffe:	2300      	movs	r3, #0
 8012000:	61fb      	str	r3, [r7, #28]
 8012002:	e012      	b.n	801202a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8012004:	68ba      	ldr	r2, [r7, #8]
 8012006:	69fb      	ldr	r3, [r7, #28]
 8012008:	4413      	add	r3, r2
 801200a:	7819      	ldrb	r1, [r3, #0]
 801200c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801200e:	69fb      	ldr	r3, [r7, #28]
 8012010:	4413      	add	r3, r2
 8012012:	3334      	adds	r3, #52	; 0x34
 8012014:	460a      	mov	r2, r1
 8012016:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8012018:	68ba      	ldr	r2, [r7, #8]
 801201a:	69fb      	ldr	r3, [r7, #28]
 801201c:	4413      	add	r3, r2
 801201e:	781b      	ldrb	r3, [r3, #0]
 8012020:	2b00      	cmp	r3, #0
 8012022:	d006      	beq.n	8012032 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012024:	69fb      	ldr	r3, [r7, #28]
 8012026:	3301      	adds	r3, #1
 8012028:	61fb      	str	r3, [r7, #28]
 801202a:	69fb      	ldr	r3, [r7, #28]
 801202c:	2b0f      	cmp	r3, #15
 801202e:	d9e9      	bls.n	8012004 <prvInitialiseNewTask+0x64>
 8012030:	e000      	b.n	8012034 <prvInitialiseNewTask+0x94>
			{
				break;
 8012032:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8012034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012036:	2200      	movs	r2, #0
 8012038:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801203c:	e003      	b.n	8012046 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801203e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012040:	2200      	movs	r2, #0
 8012042:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8012046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012048:	2b37      	cmp	r3, #55	; 0x37
 801204a:	d901      	bls.n	8012050 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801204c:	2337      	movs	r3, #55	; 0x37
 801204e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8012050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012052:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012054:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8012056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012058:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801205a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801205c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801205e:	2200      	movs	r2, #0
 8012060:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8012062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012064:	3304      	adds	r3, #4
 8012066:	4618      	mov	r0, r3
 8012068:	f7ff f93e 	bl	80112e8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801206c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801206e:	3318      	adds	r3, #24
 8012070:	4618      	mov	r0, r3
 8012072:	f7ff f939 	bl	80112e8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8012076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012078:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801207a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801207c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801207e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012084:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8012086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012088:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801208a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801208c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801208e:	2200      	movs	r2, #0
 8012090:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012094:	2200      	movs	r2, #0
 8012096:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801209a:	683a      	ldr	r2, [r7, #0]
 801209c:	68f9      	ldr	r1, [r7, #12]
 801209e:	69b8      	ldr	r0, [r7, #24]
 80120a0:	f001 f9b2 	bl	8013408 <pxPortInitialiseStack>
 80120a4:	4602      	mov	r2, r0
 80120a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120a8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80120aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d002      	beq.n	80120b6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80120b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80120b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80120b6:	bf00      	nop
 80120b8:	3720      	adds	r7, #32
 80120ba:	46bd      	mov	sp, r7
 80120bc:	bd80      	pop	{r7, pc}
	...

080120c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80120c0:	b580      	push	{r7, lr}
 80120c2:	b082      	sub	sp, #8
 80120c4:	af00      	add	r7, sp, #0
 80120c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80120c8:	f001 facc 	bl	8013664 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80120cc:	4b2d      	ldr	r3, [pc, #180]	; (8012184 <prvAddNewTaskToReadyList+0xc4>)
 80120ce:	681b      	ldr	r3, [r3, #0]
 80120d0:	3301      	adds	r3, #1
 80120d2:	4a2c      	ldr	r2, [pc, #176]	; (8012184 <prvAddNewTaskToReadyList+0xc4>)
 80120d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80120d6:	4b2c      	ldr	r3, [pc, #176]	; (8012188 <prvAddNewTaskToReadyList+0xc8>)
 80120d8:	681b      	ldr	r3, [r3, #0]
 80120da:	2b00      	cmp	r3, #0
 80120dc:	d109      	bne.n	80120f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80120de:	4a2a      	ldr	r2, [pc, #168]	; (8012188 <prvAddNewTaskToReadyList+0xc8>)
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80120e4:	4b27      	ldr	r3, [pc, #156]	; (8012184 <prvAddNewTaskToReadyList+0xc4>)
 80120e6:	681b      	ldr	r3, [r3, #0]
 80120e8:	2b01      	cmp	r3, #1
 80120ea:	d110      	bne.n	801210e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80120ec:	f000 fc80 	bl	80129f0 <prvInitialiseTaskLists>
 80120f0:	e00d      	b.n	801210e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80120f2:	4b26      	ldr	r3, [pc, #152]	; (801218c <prvAddNewTaskToReadyList+0xcc>)
 80120f4:	681b      	ldr	r3, [r3, #0]
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d109      	bne.n	801210e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80120fa:	4b23      	ldr	r3, [pc, #140]	; (8012188 <prvAddNewTaskToReadyList+0xc8>)
 80120fc:	681b      	ldr	r3, [r3, #0]
 80120fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012104:	429a      	cmp	r2, r3
 8012106:	d802      	bhi.n	801210e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8012108:	4a1f      	ldr	r2, [pc, #124]	; (8012188 <prvAddNewTaskToReadyList+0xc8>)
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801210e:	4b20      	ldr	r3, [pc, #128]	; (8012190 <prvAddNewTaskToReadyList+0xd0>)
 8012110:	681b      	ldr	r3, [r3, #0]
 8012112:	3301      	adds	r3, #1
 8012114:	4a1e      	ldr	r2, [pc, #120]	; (8012190 <prvAddNewTaskToReadyList+0xd0>)
 8012116:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8012118:	4b1d      	ldr	r3, [pc, #116]	; (8012190 <prvAddNewTaskToReadyList+0xd0>)
 801211a:	681a      	ldr	r2, [r3, #0]
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012124:	4b1b      	ldr	r3, [pc, #108]	; (8012194 <prvAddNewTaskToReadyList+0xd4>)
 8012126:	681b      	ldr	r3, [r3, #0]
 8012128:	429a      	cmp	r2, r3
 801212a:	d903      	bls.n	8012134 <prvAddNewTaskToReadyList+0x74>
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012130:	4a18      	ldr	r2, [pc, #96]	; (8012194 <prvAddNewTaskToReadyList+0xd4>)
 8012132:	6013      	str	r3, [r2, #0]
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012138:	4613      	mov	r3, r2
 801213a:	009b      	lsls	r3, r3, #2
 801213c:	4413      	add	r3, r2
 801213e:	009b      	lsls	r3, r3, #2
 8012140:	4a15      	ldr	r2, [pc, #84]	; (8012198 <prvAddNewTaskToReadyList+0xd8>)
 8012142:	441a      	add	r2, r3
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	3304      	adds	r3, #4
 8012148:	4619      	mov	r1, r3
 801214a:	4610      	mov	r0, r2
 801214c:	f7ff f8d9 	bl	8011302 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8012150:	f001 fab8 	bl	80136c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8012154:	4b0d      	ldr	r3, [pc, #52]	; (801218c <prvAddNewTaskToReadyList+0xcc>)
 8012156:	681b      	ldr	r3, [r3, #0]
 8012158:	2b00      	cmp	r3, #0
 801215a:	d00e      	beq.n	801217a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801215c:	4b0a      	ldr	r3, [pc, #40]	; (8012188 <prvAddNewTaskToReadyList+0xc8>)
 801215e:	681b      	ldr	r3, [r3, #0]
 8012160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012166:	429a      	cmp	r2, r3
 8012168:	d207      	bcs.n	801217a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801216a:	4b0c      	ldr	r3, [pc, #48]	; (801219c <prvAddNewTaskToReadyList+0xdc>)
 801216c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012170:	601a      	str	r2, [r3, #0]
 8012172:	f3bf 8f4f 	dsb	sy
 8012176:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801217a:	bf00      	nop
 801217c:	3708      	adds	r7, #8
 801217e:	46bd      	mov	sp, r7
 8012180:	bd80      	pop	{r7, pc}
 8012182:	bf00      	nop
 8012184:	24001460 	.word	0x24001460
 8012188:	24000f8c 	.word	0x24000f8c
 801218c:	2400146c 	.word	0x2400146c
 8012190:	2400147c 	.word	0x2400147c
 8012194:	24001468 	.word	0x24001468
 8012198:	24000f90 	.word	0x24000f90
 801219c:	e000ed04 	.word	0xe000ed04

080121a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80121a0:	b580      	push	{r7, lr}
 80121a2:	b084      	sub	sp, #16
 80121a4:	af00      	add	r7, sp, #0
 80121a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80121a8:	2300      	movs	r3, #0
 80121aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d017      	beq.n	80121e2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80121b2:	4b13      	ldr	r3, [pc, #76]	; (8012200 <vTaskDelay+0x60>)
 80121b4:	681b      	ldr	r3, [r3, #0]
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d00a      	beq.n	80121d0 <vTaskDelay+0x30>
	__asm volatile
 80121ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121be:	f383 8811 	msr	BASEPRI, r3
 80121c2:	f3bf 8f6f 	isb	sy
 80121c6:	f3bf 8f4f 	dsb	sy
 80121ca:	60bb      	str	r3, [r7, #8]
}
 80121cc:	bf00      	nop
 80121ce:	e7fe      	b.n	80121ce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80121d0:	f000 f880 	bl	80122d4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80121d4:	2100      	movs	r1, #0
 80121d6:	6878      	ldr	r0, [r7, #4]
 80121d8:	f000 fd54 	bl	8012c84 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80121dc:	f000 f888 	bl	80122f0 <xTaskResumeAll>
 80121e0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80121e2:	68fb      	ldr	r3, [r7, #12]
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d107      	bne.n	80121f8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80121e8:	4b06      	ldr	r3, [pc, #24]	; (8012204 <vTaskDelay+0x64>)
 80121ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80121ee:	601a      	str	r2, [r3, #0]
 80121f0:	f3bf 8f4f 	dsb	sy
 80121f4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80121f8:	bf00      	nop
 80121fa:	3710      	adds	r7, #16
 80121fc:	46bd      	mov	sp, r7
 80121fe:	bd80      	pop	{r7, pc}
 8012200:	24001488 	.word	0x24001488
 8012204:	e000ed04 	.word	0xe000ed04

08012208 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8012208:	b580      	push	{r7, lr}
 801220a:	b08a      	sub	sp, #40	; 0x28
 801220c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801220e:	2300      	movs	r3, #0
 8012210:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8012212:	2300      	movs	r3, #0
 8012214:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8012216:	463a      	mov	r2, r7
 8012218:	1d39      	adds	r1, r7, #4
 801221a:	f107 0308 	add.w	r3, r7, #8
 801221e:	4618      	mov	r0, r3
 8012220:	f7fe ff10 	bl	8011044 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8012224:	6839      	ldr	r1, [r7, #0]
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	68ba      	ldr	r2, [r7, #8]
 801222a:	9202      	str	r2, [sp, #8]
 801222c:	9301      	str	r3, [sp, #4]
 801222e:	2300      	movs	r3, #0
 8012230:	9300      	str	r3, [sp, #0]
 8012232:	2300      	movs	r3, #0
 8012234:	460a      	mov	r2, r1
 8012236:	4921      	ldr	r1, [pc, #132]	; (80122bc <vTaskStartScheduler+0xb4>)
 8012238:	4821      	ldr	r0, [pc, #132]	; (80122c0 <vTaskStartScheduler+0xb8>)
 801223a:	f7ff fe0f 	bl	8011e5c <xTaskCreateStatic>
 801223e:	4603      	mov	r3, r0
 8012240:	4a20      	ldr	r2, [pc, #128]	; (80122c4 <vTaskStartScheduler+0xbc>)
 8012242:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8012244:	4b1f      	ldr	r3, [pc, #124]	; (80122c4 <vTaskStartScheduler+0xbc>)
 8012246:	681b      	ldr	r3, [r3, #0]
 8012248:	2b00      	cmp	r3, #0
 801224a:	d002      	beq.n	8012252 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801224c:	2301      	movs	r3, #1
 801224e:	617b      	str	r3, [r7, #20]
 8012250:	e001      	b.n	8012256 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8012252:	2300      	movs	r3, #0
 8012254:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8012256:	697b      	ldr	r3, [r7, #20]
 8012258:	2b01      	cmp	r3, #1
 801225a:	d102      	bne.n	8012262 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801225c:	f000 fd66 	bl	8012d2c <xTimerCreateTimerTask>
 8012260:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8012262:	697b      	ldr	r3, [r7, #20]
 8012264:	2b01      	cmp	r3, #1
 8012266:	d116      	bne.n	8012296 <vTaskStartScheduler+0x8e>
	__asm volatile
 8012268:	f04f 0350 	mov.w	r3, #80	; 0x50
 801226c:	f383 8811 	msr	BASEPRI, r3
 8012270:	f3bf 8f6f 	isb	sy
 8012274:	f3bf 8f4f 	dsb	sy
 8012278:	613b      	str	r3, [r7, #16]
}
 801227a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801227c:	4b12      	ldr	r3, [pc, #72]	; (80122c8 <vTaskStartScheduler+0xc0>)
 801227e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012282:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8012284:	4b11      	ldr	r3, [pc, #68]	; (80122cc <vTaskStartScheduler+0xc4>)
 8012286:	2201      	movs	r2, #1
 8012288:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801228a:	4b11      	ldr	r3, [pc, #68]	; (80122d0 <vTaskStartScheduler+0xc8>)
 801228c:	2200      	movs	r2, #0
 801228e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8012290:	f001 f946 	bl	8013520 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8012294:	e00e      	b.n	80122b4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8012296:	697b      	ldr	r3, [r7, #20]
 8012298:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801229c:	d10a      	bne.n	80122b4 <vTaskStartScheduler+0xac>
	__asm volatile
 801229e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122a2:	f383 8811 	msr	BASEPRI, r3
 80122a6:	f3bf 8f6f 	isb	sy
 80122aa:	f3bf 8f4f 	dsb	sy
 80122ae:	60fb      	str	r3, [r7, #12]
}
 80122b0:	bf00      	nop
 80122b2:	e7fe      	b.n	80122b2 <vTaskStartScheduler+0xaa>
}
 80122b4:	bf00      	nop
 80122b6:	3718      	adds	r7, #24
 80122b8:	46bd      	mov	sp, r7
 80122ba:	bd80      	pop	{r7, pc}
 80122bc:	08014938 	.word	0x08014938
 80122c0:	080129c1 	.word	0x080129c1
 80122c4:	24001484 	.word	0x24001484
 80122c8:	24001480 	.word	0x24001480
 80122cc:	2400146c 	.word	0x2400146c
 80122d0:	24001464 	.word	0x24001464

080122d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80122d4:	b480      	push	{r7}
 80122d6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80122d8:	4b04      	ldr	r3, [pc, #16]	; (80122ec <vTaskSuspendAll+0x18>)
 80122da:	681b      	ldr	r3, [r3, #0]
 80122dc:	3301      	adds	r3, #1
 80122de:	4a03      	ldr	r2, [pc, #12]	; (80122ec <vTaskSuspendAll+0x18>)
 80122e0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80122e2:	bf00      	nop
 80122e4:	46bd      	mov	sp, r7
 80122e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ea:	4770      	bx	lr
 80122ec:	24001488 	.word	0x24001488

080122f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80122f0:	b580      	push	{r7, lr}
 80122f2:	b084      	sub	sp, #16
 80122f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80122f6:	2300      	movs	r3, #0
 80122f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80122fa:	2300      	movs	r3, #0
 80122fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80122fe:	4b42      	ldr	r3, [pc, #264]	; (8012408 <xTaskResumeAll+0x118>)
 8012300:	681b      	ldr	r3, [r3, #0]
 8012302:	2b00      	cmp	r3, #0
 8012304:	d10a      	bne.n	801231c <xTaskResumeAll+0x2c>
	__asm volatile
 8012306:	f04f 0350 	mov.w	r3, #80	; 0x50
 801230a:	f383 8811 	msr	BASEPRI, r3
 801230e:	f3bf 8f6f 	isb	sy
 8012312:	f3bf 8f4f 	dsb	sy
 8012316:	603b      	str	r3, [r7, #0]
}
 8012318:	bf00      	nop
 801231a:	e7fe      	b.n	801231a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801231c:	f001 f9a2 	bl	8013664 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8012320:	4b39      	ldr	r3, [pc, #228]	; (8012408 <xTaskResumeAll+0x118>)
 8012322:	681b      	ldr	r3, [r3, #0]
 8012324:	3b01      	subs	r3, #1
 8012326:	4a38      	ldr	r2, [pc, #224]	; (8012408 <xTaskResumeAll+0x118>)
 8012328:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801232a:	4b37      	ldr	r3, [pc, #220]	; (8012408 <xTaskResumeAll+0x118>)
 801232c:	681b      	ldr	r3, [r3, #0]
 801232e:	2b00      	cmp	r3, #0
 8012330:	d162      	bne.n	80123f8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8012332:	4b36      	ldr	r3, [pc, #216]	; (801240c <xTaskResumeAll+0x11c>)
 8012334:	681b      	ldr	r3, [r3, #0]
 8012336:	2b00      	cmp	r3, #0
 8012338:	d05e      	beq.n	80123f8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801233a:	e02f      	b.n	801239c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801233c:	4b34      	ldr	r3, [pc, #208]	; (8012410 <xTaskResumeAll+0x120>)
 801233e:	68db      	ldr	r3, [r3, #12]
 8012340:	68db      	ldr	r3, [r3, #12]
 8012342:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012344:	68fb      	ldr	r3, [r7, #12]
 8012346:	3318      	adds	r3, #24
 8012348:	4618      	mov	r0, r3
 801234a:	f7ff f837 	bl	80113bc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801234e:	68fb      	ldr	r3, [r7, #12]
 8012350:	3304      	adds	r3, #4
 8012352:	4618      	mov	r0, r3
 8012354:	f7ff f832 	bl	80113bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012358:	68fb      	ldr	r3, [r7, #12]
 801235a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801235c:	4b2d      	ldr	r3, [pc, #180]	; (8012414 <xTaskResumeAll+0x124>)
 801235e:	681b      	ldr	r3, [r3, #0]
 8012360:	429a      	cmp	r2, r3
 8012362:	d903      	bls.n	801236c <xTaskResumeAll+0x7c>
 8012364:	68fb      	ldr	r3, [r7, #12]
 8012366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012368:	4a2a      	ldr	r2, [pc, #168]	; (8012414 <xTaskResumeAll+0x124>)
 801236a:	6013      	str	r3, [r2, #0]
 801236c:	68fb      	ldr	r3, [r7, #12]
 801236e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012370:	4613      	mov	r3, r2
 8012372:	009b      	lsls	r3, r3, #2
 8012374:	4413      	add	r3, r2
 8012376:	009b      	lsls	r3, r3, #2
 8012378:	4a27      	ldr	r2, [pc, #156]	; (8012418 <xTaskResumeAll+0x128>)
 801237a:	441a      	add	r2, r3
 801237c:	68fb      	ldr	r3, [r7, #12]
 801237e:	3304      	adds	r3, #4
 8012380:	4619      	mov	r1, r3
 8012382:	4610      	mov	r0, r2
 8012384:	f7fe ffbd 	bl	8011302 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012388:	68fb      	ldr	r3, [r7, #12]
 801238a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801238c:	4b23      	ldr	r3, [pc, #140]	; (801241c <xTaskResumeAll+0x12c>)
 801238e:	681b      	ldr	r3, [r3, #0]
 8012390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012392:	429a      	cmp	r2, r3
 8012394:	d302      	bcc.n	801239c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8012396:	4b22      	ldr	r3, [pc, #136]	; (8012420 <xTaskResumeAll+0x130>)
 8012398:	2201      	movs	r2, #1
 801239a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801239c:	4b1c      	ldr	r3, [pc, #112]	; (8012410 <xTaskResumeAll+0x120>)
 801239e:	681b      	ldr	r3, [r3, #0]
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	d1cb      	bne.n	801233c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80123a4:	68fb      	ldr	r3, [r7, #12]
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d001      	beq.n	80123ae <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80123aa:	f000 fbbf 	bl	8012b2c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80123ae:	4b1d      	ldr	r3, [pc, #116]	; (8012424 <xTaskResumeAll+0x134>)
 80123b0:	681b      	ldr	r3, [r3, #0]
 80123b2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	d010      	beq.n	80123dc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80123ba:	f000 f847 	bl	801244c <xTaskIncrementTick>
 80123be:	4603      	mov	r3, r0
 80123c0:	2b00      	cmp	r3, #0
 80123c2:	d002      	beq.n	80123ca <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80123c4:	4b16      	ldr	r3, [pc, #88]	; (8012420 <xTaskResumeAll+0x130>)
 80123c6:	2201      	movs	r2, #1
 80123c8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	3b01      	subs	r3, #1
 80123ce:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	d1f1      	bne.n	80123ba <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80123d6:	4b13      	ldr	r3, [pc, #76]	; (8012424 <xTaskResumeAll+0x134>)
 80123d8:	2200      	movs	r2, #0
 80123da:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80123dc:	4b10      	ldr	r3, [pc, #64]	; (8012420 <xTaskResumeAll+0x130>)
 80123de:	681b      	ldr	r3, [r3, #0]
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	d009      	beq.n	80123f8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80123e4:	2301      	movs	r3, #1
 80123e6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80123e8:	4b0f      	ldr	r3, [pc, #60]	; (8012428 <xTaskResumeAll+0x138>)
 80123ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80123ee:	601a      	str	r2, [r3, #0]
 80123f0:	f3bf 8f4f 	dsb	sy
 80123f4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80123f8:	f001 f964 	bl	80136c4 <vPortExitCritical>

	return xAlreadyYielded;
 80123fc:	68bb      	ldr	r3, [r7, #8]
}
 80123fe:	4618      	mov	r0, r3
 8012400:	3710      	adds	r7, #16
 8012402:	46bd      	mov	sp, r7
 8012404:	bd80      	pop	{r7, pc}
 8012406:	bf00      	nop
 8012408:	24001488 	.word	0x24001488
 801240c:	24001460 	.word	0x24001460
 8012410:	24001420 	.word	0x24001420
 8012414:	24001468 	.word	0x24001468
 8012418:	24000f90 	.word	0x24000f90
 801241c:	24000f8c 	.word	0x24000f8c
 8012420:	24001474 	.word	0x24001474
 8012424:	24001470 	.word	0x24001470
 8012428:	e000ed04 	.word	0xe000ed04

0801242c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801242c:	b480      	push	{r7}
 801242e:	b083      	sub	sp, #12
 8012430:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8012432:	4b05      	ldr	r3, [pc, #20]	; (8012448 <xTaskGetTickCount+0x1c>)
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8012438:	687b      	ldr	r3, [r7, #4]
}
 801243a:	4618      	mov	r0, r3
 801243c:	370c      	adds	r7, #12
 801243e:	46bd      	mov	sp, r7
 8012440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012444:	4770      	bx	lr
 8012446:	bf00      	nop
 8012448:	24001464 	.word	0x24001464

0801244c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801244c:	b580      	push	{r7, lr}
 801244e:	b086      	sub	sp, #24
 8012450:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8012452:	2300      	movs	r3, #0
 8012454:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012456:	4b53      	ldr	r3, [pc, #332]	; (80125a4 <xTaskIncrementTick+0x158>)
 8012458:	681b      	ldr	r3, [r3, #0]
 801245a:	2b00      	cmp	r3, #0
 801245c:	f040 8095 	bne.w	801258a <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8012460:	4b51      	ldr	r3, [pc, #324]	; (80125a8 <xTaskIncrementTick+0x15c>)
 8012462:	681b      	ldr	r3, [r3, #0]
 8012464:	3301      	adds	r3, #1
 8012466:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8012468:	4a4f      	ldr	r2, [pc, #316]	; (80125a8 <xTaskIncrementTick+0x15c>)
 801246a:	693b      	ldr	r3, [r7, #16]
 801246c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801246e:	693b      	ldr	r3, [r7, #16]
 8012470:	2b00      	cmp	r3, #0
 8012472:	d120      	bne.n	80124b6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8012474:	4b4d      	ldr	r3, [pc, #308]	; (80125ac <xTaskIncrementTick+0x160>)
 8012476:	681b      	ldr	r3, [r3, #0]
 8012478:	681b      	ldr	r3, [r3, #0]
 801247a:	2b00      	cmp	r3, #0
 801247c:	d00a      	beq.n	8012494 <xTaskIncrementTick+0x48>
	__asm volatile
 801247e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012482:	f383 8811 	msr	BASEPRI, r3
 8012486:	f3bf 8f6f 	isb	sy
 801248a:	f3bf 8f4f 	dsb	sy
 801248e:	603b      	str	r3, [r7, #0]
}
 8012490:	bf00      	nop
 8012492:	e7fe      	b.n	8012492 <xTaskIncrementTick+0x46>
 8012494:	4b45      	ldr	r3, [pc, #276]	; (80125ac <xTaskIncrementTick+0x160>)
 8012496:	681b      	ldr	r3, [r3, #0]
 8012498:	60fb      	str	r3, [r7, #12]
 801249a:	4b45      	ldr	r3, [pc, #276]	; (80125b0 <xTaskIncrementTick+0x164>)
 801249c:	681b      	ldr	r3, [r3, #0]
 801249e:	4a43      	ldr	r2, [pc, #268]	; (80125ac <xTaskIncrementTick+0x160>)
 80124a0:	6013      	str	r3, [r2, #0]
 80124a2:	4a43      	ldr	r2, [pc, #268]	; (80125b0 <xTaskIncrementTick+0x164>)
 80124a4:	68fb      	ldr	r3, [r7, #12]
 80124a6:	6013      	str	r3, [r2, #0]
 80124a8:	4b42      	ldr	r3, [pc, #264]	; (80125b4 <xTaskIncrementTick+0x168>)
 80124aa:	681b      	ldr	r3, [r3, #0]
 80124ac:	3301      	adds	r3, #1
 80124ae:	4a41      	ldr	r2, [pc, #260]	; (80125b4 <xTaskIncrementTick+0x168>)
 80124b0:	6013      	str	r3, [r2, #0]
 80124b2:	f000 fb3b 	bl	8012b2c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80124b6:	4b40      	ldr	r3, [pc, #256]	; (80125b8 <xTaskIncrementTick+0x16c>)
 80124b8:	681b      	ldr	r3, [r3, #0]
 80124ba:	693a      	ldr	r2, [r7, #16]
 80124bc:	429a      	cmp	r2, r3
 80124be:	d349      	bcc.n	8012554 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80124c0:	4b3a      	ldr	r3, [pc, #232]	; (80125ac <xTaskIncrementTick+0x160>)
 80124c2:	681b      	ldr	r3, [r3, #0]
 80124c4:	681b      	ldr	r3, [r3, #0]
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d104      	bne.n	80124d4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80124ca:	4b3b      	ldr	r3, [pc, #236]	; (80125b8 <xTaskIncrementTick+0x16c>)
 80124cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80124d0:	601a      	str	r2, [r3, #0]
					break;
 80124d2:	e03f      	b.n	8012554 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80124d4:	4b35      	ldr	r3, [pc, #212]	; (80125ac <xTaskIncrementTick+0x160>)
 80124d6:	681b      	ldr	r3, [r3, #0]
 80124d8:	68db      	ldr	r3, [r3, #12]
 80124da:	68db      	ldr	r3, [r3, #12]
 80124dc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80124de:	68bb      	ldr	r3, [r7, #8]
 80124e0:	685b      	ldr	r3, [r3, #4]
 80124e2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80124e4:	693a      	ldr	r2, [r7, #16]
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	429a      	cmp	r2, r3
 80124ea:	d203      	bcs.n	80124f4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80124ec:	4a32      	ldr	r2, [pc, #200]	; (80125b8 <xTaskIncrementTick+0x16c>)
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80124f2:	e02f      	b.n	8012554 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80124f4:	68bb      	ldr	r3, [r7, #8]
 80124f6:	3304      	adds	r3, #4
 80124f8:	4618      	mov	r0, r3
 80124fa:	f7fe ff5f 	bl	80113bc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80124fe:	68bb      	ldr	r3, [r7, #8]
 8012500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012502:	2b00      	cmp	r3, #0
 8012504:	d004      	beq.n	8012510 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012506:	68bb      	ldr	r3, [r7, #8]
 8012508:	3318      	adds	r3, #24
 801250a:	4618      	mov	r0, r3
 801250c:	f7fe ff56 	bl	80113bc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8012510:	68bb      	ldr	r3, [r7, #8]
 8012512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012514:	4b29      	ldr	r3, [pc, #164]	; (80125bc <xTaskIncrementTick+0x170>)
 8012516:	681b      	ldr	r3, [r3, #0]
 8012518:	429a      	cmp	r2, r3
 801251a:	d903      	bls.n	8012524 <xTaskIncrementTick+0xd8>
 801251c:	68bb      	ldr	r3, [r7, #8]
 801251e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012520:	4a26      	ldr	r2, [pc, #152]	; (80125bc <xTaskIncrementTick+0x170>)
 8012522:	6013      	str	r3, [r2, #0]
 8012524:	68bb      	ldr	r3, [r7, #8]
 8012526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012528:	4613      	mov	r3, r2
 801252a:	009b      	lsls	r3, r3, #2
 801252c:	4413      	add	r3, r2
 801252e:	009b      	lsls	r3, r3, #2
 8012530:	4a23      	ldr	r2, [pc, #140]	; (80125c0 <xTaskIncrementTick+0x174>)
 8012532:	441a      	add	r2, r3
 8012534:	68bb      	ldr	r3, [r7, #8]
 8012536:	3304      	adds	r3, #4
 8012538:	4619      	mov	r1, r3
 801253a:	4610      	mov	r0, r2
 801253c:	f7fe fee1 	bl	8011302 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012540:	68bb      	ldr	r3, [r7, #8]
 8012542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012544:	4b1f      	ldr	r3, [pc, #124]	; (80125c4 <xTaskIncrementTick+0x178>)
 8012546:	681b      	ldr	r3, [r3, #0]
 8012548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801254a:	429a      	cmp	r2, r3
 801254c:	d3b8      	bcc.n	80124c0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 801254e:	2301      	movs	r3, #1
 8012550:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012552:	e7b5      	b.n	80124c0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8012554:	4b1b      	ldr	r3, [pc, #108]	; (80125c4 <xTaskIncrementTick+0x178>)
 8012556:	681b      	ldr	r3, [r3, #0]
 8012558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801255a:	4919      	ldr	r1, [pc, #100]	; (80125c0 <xTaskIncrementTick+0x174>)
 801255c:	4613      	mov	r3, r2
 801255e:	009b      	lsls	r3, r3, #2
 8012560:	4413      	add	r3, r2
 8012562:	009b      	lsls	r3, r3, #2
 8012564:	440b      	add	r3, r1
 8012566:	681b      	ldr	r3, [r3, #0]
 8012568:	2b01      	cmp	r3, #1
 801256a:	d901      	bls.n	8012570 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 801256c:	2301      	movs	r3, #1
 801256e:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 8012570:	4b15      	ldr	r3, [pc, #84]	; (80125c8 <xTaskIncrementTick+0x17c>)
 8012572:	681b      	ldr	r3, [r3, #0]
 8012574:	2b00      	cmp	r3, #0
 8012576:	d101      	bne.n	801257c <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 8012578:	f7ee fbee 	bl	8000d58 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801257c:	4b13      	ldr	r3, [pc, #76]	; (80125cc <xTaskIncrementTick+0x180>)
 801257e:	681b      	ldr	r3, [r3, #0]
 8012580:	2b00      	cmp	r3, #0
 8012582:	d009      	beq.n	8012598 <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 8012584:	2301      	movs	r3, #1
 8012586:	617b      	str	r3, [r7, #20]
 8012588:	e006      	b.n	8012598 <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801258a:	4b0f      	ldr	r3, [pc, #60]	; (80125c8 <xTaskIncrementTick+0x17c>)
 801258c:	681b      	ldr	r3, [r3, #0]
 801258e:	3301      	adds	r3, #1
 8012590:	4a0d      	ldr	r2, [pc, #52]	; (80125c8 <xTaskIncrementTick+0x17c>)
 8012592:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8012594:	f7ee fbe0 	bl	8000d58 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 8012598:	697b      	ldr	r3, [r7, #20]
}
 801259a:	4618      	mov	r0, r3
 801259c:	3718      	adds	r7, #24
 801259e:	46bd      	mov	sp, r7
 80125a0:	bd80      	pop	{r7, pc}
 80125a2:	bf00      	nop
 80125a4:	24001488 	.word	0x24001488
 80125a8:	24001464 	.word	0x24001464
 80125ac:	24001418 	.word	0x24001418
 80125b0:	2400141c 	.word	0x2400141c
 80125b4:	24001478 	.word	0x24001478
 80125b8:	24001480 	.word	0x24001480
 80125bc:	24001468 	.word	0x24001468
 80125c0:	24000f90 	.word	0x24000f90
 80125c4:	24000f8c 	.word	0x24000f8c
 80125c8:	24001470 	.word	0x24001470
 80125cc:	24001474 	.word	0x24001474

080125d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80125d0:	b480      	push	{r7}
 80125d2:	b085      	sub	sp, #20
 80125d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80125d6:	4b28      	ldr	r3, [pc, #160]	; (8012678 <vTaskSwitchContext+0xa8>)
 80125d8:	681b      	ldr	r3, [r3, #0]
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d003      	beq.n	80125e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80125de:	4b27      	ldr	r3, [pc, #156]	; (801267c <vTaskSwitchContext+0xac>)
 80125e0:	2201      	movs	r2, #1
 80125e2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80125e4:	e041      	b.n	801266a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80125e6:	4b25      	ldr	r3, [pc, #148]	; (801267c <vTaskSwitchContext+0xac>)
 80125e8:	2200      	movs	r2, #0
 80125ea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80125ec:	4b24      	ldr	r3, [pc, #144]	; (8012680 <vTaskSwitchContext+0xb0>)
 80125ee:	681b      	ldr	r3, [r3, #0]
 80125f0:	60fb      	str	r3, [r7, #12]
 80125f2:	e010      	b.n	8012616 <vTaskSwitchContext+0x46>
 80125f4:	68fb      	ldr	r3, [r7, #12]
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d10a      	bne.n	8012610 <vTaskSwitchContext+0x40>
	__asm volatile
 80125fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125fe:	f383 8811 	msr	BASEPRI, r3
 8012602:	f3bf 8f6f 	isb	sy
 8012606:	f3bf 8f4f 	dsb	sy
 801260a:	607b      	str	r3, [r7, #4]
}
 801260c:	bf00      	nop
 801260e:	e7fe      	b.n	801260e <vTaskSwitchContext+0x3e>
 8012610:	68fb      	ldr	r3, [r7, #12]
 8012612:	3b01      	subs	r3, #1
 8012614:	60fb      	str	r3, [r7, #12]
 8012616:	491b      	ldr	r1, [pc, #108]	; (8012684 <vTaskSwitchContext+0xb4>)
 8012618:	68fa      	ldr	r2, [r7, #12]
 801261a:	4613      	mov	r3, r2
 801261c:	009b      	lsls	r3, r3, #2
 801261e:	4413      	add	r3, r2
 8012620:	009b      	lsls	r3, r3, #2
 8012622:	440b      	add	r3, r1
 8012624:	681b      	ldr	r3, [r3, #0]
 8012626:	2b00      	cmp	r3, #0
 8012628:	d0e4      	beq.n	80125f4 <vTaskSwitchContext+0x24>
 801262a:	68fa      	ldr	r2, [r7, #12]
 801262c:	4613      	mov	r3, r2
 801262e:	009b      	lsls	r3, r3, #2
 8012630:	4413      	add	r3, r2
 8012632:	009b      	lsls	r3, r3, #2
 8012634:	4a13      	ldr	r2, [pc, #76]	; (8012684 <vTaskSwitchContext+0xb4>)
 8012636:	4413      	add	r3, r2
 8012638:	60bb      	str	r3, [r7, #8]
 801263a:	68bb      	ldr	r3, [r7, #8]
 801263c:	685b      	ldr	r3, [r3, #4]
 801263e:	685a      	ldr	r2, [r3, #4]
 8012640:	68bb      	ldr	r3, [r7, #8]
 8012642:	605a      	str	r2, [r3, #4]
 8012644:	68bb      	ldr	r3, [r7, #8]
 8012646:	685a      	ldr	r2, [r3, #4]
 8012648:	68bb      	ldr	r3, [r7, #8]
 801264a:	3308      	adds	r3, #8
 801264c:	429a      	cmp	r2, r3
 801264e:	d104      	bne.n	801265a <vTaskSwitchContext+0x8a>
 8012650:	68bb      	ldr	r3, [r7, #8]
 8012652:	685b      	ldr	r3, [r3, #4]
 8012654:	685a      	ldr	r2, [r3, #4]
 8012656:	68bb      	ldr	r3, [r7, #8]
 8012658:	605a      	str	r2, [r3, #4]
 801265a:	68bb      	ldr	r3, [r7, #8]
 801265c:	685b      	ldr	r3, [r3, #4]
 801265e:	68db      	ldr	r3, [r3, #12]
 8012660:	4a09      	ldr	r2, [pc, #36]	; (8012688 <vTaskSwitchContext+0xb8>)
 8012662:	6013      	str	r3, [r2, #0]
 8012664:	4a06      	ldr	r2, [pc, #24]	; (8012680 <vTaskSwitchContext+0xb0>)
 8012666:	68fb      	ldr	r3, [r7, #12]
 8012668:	6013      	str	r3, [r2, #0]
}
 801266a:	bf00      	nop
 801266c:	3714      	adds	r7, #20
 801266e:	46bd      	mov	sp, r7
 8012670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012674:	4770      	bx	lr
 8012676:	bf00      	nop
 8012678:	24001488 	.word	0x24001488
 801267c:	24001474 	.word	0x24001474
 8012680:	24001468 	.word	0x24001468
 8012684:	24000f90 	.word	0x24000f90
 8012688:	24000f8c 	.word	0x24000f8c

0801268c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801268c:	b580      	push	{r7, lr}
 801268e:	b084      	sub	sp, #16
 8012690:	af00      	add	r7, sp, #0
 8012692:	6078      	str	r0, [r7, #4]
 8012694:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	2b00      	cmp	r3, #0
 801269a:	d10a      	bne.n	80126b2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 801269c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126a0:	f383 8811 	msr	BASEPRI, r3
 80126a4:	f3bf 8f6f 	isb	sy
 80126a8:	f3bf 8f4f 	dsb	sy
 80126ac:	60fb      	str	r3, [r7, #12]
}
 80126ae:	bf00      	nop
 80126b0:	e7fe      	b.n	80126b0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80126b2:	4b07      	ldr	r3, [pc, #28]	; (80126d0 <vTaskPlaceOnEventList+0x44>)
 80126b4:	681b      	ldr	r3, [r3, #0]
 80126b6:	3318      	adds	r3, #24
 80126b8:	4619      	mov	r1, r3
 80126ba:	6878      	ldr	r0, [r7, #4]
 80126bc:	f7fe fe45 	bl	801134a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80126c0:	2101      	movs	r1, #1
 80126c2:	6838      	ldr	r0, [r7, #0]
 80126c4:	f000 fade 	bl	8012c84 <prvAddCurrentTaskToDelayedList>
}
 80126c8:	bf00      	nop
 80126ca:	3710      	adds	r7, #16
 80126cc:	46bd      	mov	sp, r7
 80126ce:	bd80      	pop	{r7, pc}
 80126d0:	24000f8c 	.word	0x24000f8c

080126d4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80126d4:	b580      	push	{r7, lr}
 80126d6:	b086      	sub	sp, #24
 80126d8:	af00      	add	r7, sp, #0
 80126da:	60f8      	str	r0, [r7, #12]
 80126dc:	60b9      	str	r1, [r7, #8]
 80126de:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80126e0:	68fb      	ldr	r3, [r7, #12]
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d10a      	bne.n	80126fc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80126e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126ea:	f383 8811 	msr	BASEPRI, r3
 80126ee:	f3bf 8f6f 	isb	sy
 80126f2:	f3bf 8f4f 	dsb	sy
 80126f6:	617b      	str	r3, [r7, #20]
}
 80126f8:	bf00      	nop
 80126fa:	e7fe      	b.n	80126fa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80126fc:	4b0a      	ldr	r3, [pc, #40]	; (8012728 <vTaskPlaceOnEventListRestricted+0x54>)
 80126fe:	681b      	ldr	r3, [r3, #0]
 8012700:	3318      	adds	r3, #24
 8012702:	4619      	mov	r1, r3
 8012704:	68f8      	ldr	r0, [r7, #12]
 8012706:	f7fe fdfc 	bl	8011302 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	2b00      	cmp	r3, #0
 801270e:	d002      	beq.n	8012716 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8012710:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012714:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8012716:	6879      	ldr	r1, [r7, #4]
 8012718:	68b8      	ldr	r0, [r7, #8]
 801271a:	f000 fab3 	bl	8012c84 <prvAddCurrentTaskToDelayedList>
	}
 801271e:	bf00      	nop
 8012720:	3718      	adds	r7, #24
 8012722:	46bd      	mov	sp, r7
 8012724:	bd80      	pop	{r7, pc}
 8012726:	bf00      	nop
 8012728:	24000f8c 	.word	0x24000f8c

0801272c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801272c:	b580      	push	{r7, lr}
 801272e:	b086      	sub	sp, #24
 8012730:	af00      	add	r7, sp, #0
 8012732:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	68db      	ldr	r3, [r3, #12]
 8012738:	68db      	ldr	r3, [r3, #12]
 801273a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801273c:	693b      	ldr	r3, [r7, #16]
 801273e:	2b00      	cmp	r3, #0
 8012740:	d10a      	bne.n	8012758 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8012742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012746:	f383 8811 	msr	BASEPRI, r3
 801274a:	f3bf 8f6f 	isb	sy
 801274e:	f3bf 8f4f 	dsb	sy
 8012752:	60fb      	str	r3, [r7, #12]
}
 8012754:	bf00      	nop
 8012756:	e7fe      	b.n	8012756 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8012758:	693b      	ldr	r3, [r7, #16]
 801275a:	3318      	adds	r3, #24
 801275c:	4618      	mov	r0, r3
 801275e:	f7fe fe2d 	bl	80113bc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012762:	4b1e      	ldr	r3, [pc, #120]	; (80127dc <xTaskRemoveFromEventList+0xb0>)
 8012764:	681b      	ldr	r3, [r3, #0]
 8012766:	2b00      	cmp	r3, #0
 8012768:	d11d      	bne.n	80127a6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801276a:	693b      	ldr	r3, [r7, #16]
 801276c:	3304      	adds	r3, #4
 801276e:	4618      	mov	r0, r3
 8012770:	f7fe fe24 	bl	80113bc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8012774:	693b      	ldr	r3, [r7, #16]
 8012776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012778:	4b19      	ldr	r3, [pc, #100]	; (80127e0 <xTaskRemoveFromEventList+0xb4>)
 801277a:	681b      	ldr	r3, [r3, #0]
 801277c:	429a      	cmp	r2, r3
 801277e:	d903      	bls.n	8012788 <xTaskRemoveFromEventList+0x5c>
 8012780:	693b      	ldr	r3, [r7, #16]
 8012782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012784:	4a16      	ldr	r2, [pc, #88]	; (80127e0 <xTaskRemoveFromEventList+0xb4>)
 8012786:	6013      	str	r3, [r2, #0]
 8012788:	693b      	ldr	r3, [r7, #16]
 801278a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801278c:	4613      	mov	r3, r2
 801278e:	009b      	lsls	r3, r3, #2
 8012790:	4413      	add	r3, r2
 8012792:	009b      	lsls	r3, r3, #2
 8012794:	4a13      	ldr	r2, [pc, #76]	; (80127e4 <xTaskRemoveFromEventList+0xb8>)
 8012796:	441a      	add	r2, r3
 8012798:	693b      	ldr	r3, [r7, #16]
 801279a:	3304      	adds	r3, #4
 801279c:	4619      	mov	r1, r3
 801279e:	4610      	mov	r0, r2
 80127a0:	f7fe fdaf 	bl	8011302 <vListInsertEnd>
 80127a4:	e005      	b.n	80127b2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80127a6:	693b      	ldr	r3, [r7, #16]
 80127a8:	3318      	adds	r3, #24
 80127aa:	4619      	mov	r1, r3
 80127ac:	480e      	ldr	r0, [pc, #56]	; (80127e8 <xTaskRemoveFromEventList+0xbc>)
 80127ae:	f7fe fda8 	bl	8011302 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80127b2:	693b      	ldr	r3, [r7, #16]
 80127b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80127b6:	4b0d      	ldr	r3, [pc, #52]	; (80127ec <xTaskRemoveFromEventList+0xc0>)
 80127b8:	681b      	ldr	r3, [r3, #0]
 80127ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80127bc:	429a      	cmp	r2, r3
 80127be:	d905      	bls.n	80127cc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80127c0:	2301      	movs	r3, #1
 80127c2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80127c4:	4b0a      	ldr	r3, [pc, #40]	; (80127f0 <xTaskRemoveFromEventList+0xc4>)
 80127c6:	2201      	movs	r2, #1
 80127c8:	601a      	str	r2, [r3, #0]
 80127ca:	e001      	b.n	80127d0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80127cc:	2300      	movs	r3, #0
 80127ce:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80127d0:	697b      	ldr	r3, [r7, #20]
}
 80127d2:	4618      	mov	r0, r3
 80127d4:	3718      	adds	r7, #24
 80127d6:	46bd      	mov	sp, r7
 80127d8:	bd80      	pop	{r7, pc}
 80127da:	bf00      	nop
 80127dc:	24001488 	.word	0x24001488
 80127e0:	24001468 	.word	0x24001468
 80127e4:	24000f90 	.word	0x24000f90
 80127e8:	24001420 	.word	0x24001420
 80127ec:	24000f8c 	.word	0x24000f8c
 80127f0:	24001474 	.word	0x24001474

080127f4 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80127f4:	b580      	push	{r7, lr}
 80127f6:	b086      	sub	sp, #24
 80127f8:	af00      	add	r7, sp, #0
 80127fa:	6078      	str	r0, [r7, #4]
 80127fc:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80127fe:	4b29      	ldr	r3, [pc, #164]	; (80128a4 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8012800:	681b      	ldr	r3, [r3, #0]
 8012802:	2b00      	cmp	r3, #0
 8012804:	d10a      	bne.n	801281c <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8012806:	f04f 0350 	mov.w	r3, #80	; 0x50
 801280a:	f383 8811 	msr	BASEPRI, r3
 801280e:	f3bf 8f6f 	isb	sy
 8012812:	f3bf 8f4f 	dsb	sy
 8012816:	613b      	str	r3, [r7, #16]
}
 8012818:	bf00      	nop
 801281a:	e7fe      	b.n	801281a <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 801281c:	683b      	ldr	r3, [r7, #0]
 801281e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	68db      	ldr	r3, [r3, #12]
 801282a:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 801282c:	697b      	ldr	r3, [r7, #20]
 801282e:	2b00      	cmp	r3, #0
 8012830:	d10a      	bne.n	8012848 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8012832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012836:	f383 8811 	msr	BASEPRI, r3
 801283a:	f3bf 8f6f 	isb	sy
 801283e:	f3bf 8f4f 	dsb	sy
 8012842:	60fb      	str	r3, [r7, #12]
}
 8012844:	bf00      	nop
 8012846:	e7fe      	b.n	8012846 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8012848:	6878      	ldr	r0, [r7, #4]
 801284a:	f7fe fdb7 	bl	80113bc <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801284e:	697b      	ldr	r3, [r7, #20]
 8012850:	3304      	adds	r3, #4
 8012852:	4618      	mov	r0, r3
 8012854:	f7fe fdb2 	bl	80113bc <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8012858:	697b      	ldr	r3, [r7, #20]
 801285a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801285c:	4b12      	ldr	r3, [pc, #72]	; (80128a8 <vTaskRemoveFromUnorderedEventList+0xb4>)
 801285e:	681b      	ldr	r3, [r3, #0]
 8012860:	429a      	cmp	r2, r3
 8012862:	d903      	bls.n	801286c <vTaskRemoveFromUnorderedEventList+0x78>
 8012864:	697b      	ldr	r3, [r7, #20]
 8012866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012868:	4a0f      	ldr	r2, [pc, #60]	; (80128a8 <vTaskRemoveFromUnorderedEventList+0xb4>)
 801286a:	6013      	str	r3, [r2, #0]
 801286c:	697b      	ldr	r3, [r7, #20]
 801286e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012870:	4613      	mov	r3, r2
 8012872:	009b      	lsls	r3, r3, #2
 8012874:	4413      	add	r3, r2
 8012876:	009b      	lsls	r3, r3, #2
 8012878:	4a0c      	ldr	r2, [pc, #48]	; (80128ac <vTaskRemoveFromUnorderedEventList+0xb8>)
 801287a:	441a      	add	r2, r3
 801287c:	697b      	ldr	r3, [r7, #20]
 801287e:	3304      	adds	r3, #4
 8012880:	4619      	mov	r1, r3
 8012882:	4610      	mov	r0, r2
 8012884:	f7fe fd3d 	bl	8011302 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012888:	697b      	ldr	r3, [r7, #20]
 801288a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801288c:	4b08      	ldr	r3, [pc, #32]	; (80128b0 <vTaskRemoveFromUnorderedEventList+0xbc>)
 801288e:	681b      	ldr	r3, [r3, #0]
 8012890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012892:	429a      	cmp	r2, r3
 8012894:	d902      	bls.n	801289c <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8012896:	4b07      	ldr	r3, [pc, #28]	; (80128b4 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8012898:	2201      	movs	r2, #1
 801289a:	601a      	str	r2, [r3, #0]
	}
}
 801289c:	bf00      	nop
 801289e:	3718      	adds	r7, #24
 80128a0:	46bd      	mov	sp, r7
 80128a2:	bd80      	pop	{r7, pc}
 80128a4:	24001488 	.word	0x24001488
 80128a8:	24001468 	.word	0x24001468
 80128ac:	24000f90 	.word	0x24000f90
 80128b0:	24000f8c 	.word	0x24000f8c
 80128b4:	24001474 	.word	0x24001474

080128b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80128b8:	b480      	push	{r7}
 80128ba:	b083      	sub	sp, #12
 80128bc:	af00      	add	r7, sp, #0
 80128be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80128c0:	4b06      	ldr	r3, [pc, #24]	; (80128dc <vTaskInternalSetTimeOutState+0x24>)
 80128c2:	681a      	ldr	r2, [r3, #0]
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80128c8:	4b05      	ldr	r3, [pc, #20]	; (80128e0 <vTaskInternalSetTimeOutState+0x28>)
 80128ca:	681a      	ldr	r2, [r3, #0]
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	605a      	str	r2, [r3, #4]
}
 80128d0:	bf00      	nop
 80128d2:	370c      	adds	r7, #12
 80128d4:	46bd      	mov	sp, r7
 80128d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128da:	4770      	bx	lr
 80128dc:	24001478 	.word	0x24001478
 80128e0:	24001464 	.word	0x24001464

080128e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80128e4:	b580      	push	{r7, lr}
 80128e6:	b088      	sub	sp, #32
 80128e8:	af00      	add	r7, sp, #0
 80128ea:	6078      	str	r0, [r7, #4]
 80128ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	d10a      	bne.n	801290a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80128f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128f8:	f383 8811 	msr	BASEPRI, r3
 80128fc:	f3bf 8f6f 	isb	sy
 8012900:	f3bf 8f4f 	dsb	sy
 8012904:	613b      	str	r3, [r7, #16]
}
 8012906:	bf00      	nop
 8012908:	e7fe      	b.n	8012908 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801290a:	683b      	ldr	r3, [r7, #0]
 801290c:	2b00      	cmp	r3, #0
 801290e:	d10a      	bne.n	8012926 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8012910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012914:	f383 8811 	msr	BASEPRI, r3
 8012918:	f3bf 8f6f 	isb	sy
 801291c:	f3bf 8f4f 	dsb	sy
 8012920:	60fb      	str	r3, [r7, #12]
}
 8012922:	bf00      	nop
 8012924:	e7fe      	b.n	8012924 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8012926:	f000 fe9d 	bl	8013664 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801292a:	4b1d      	ldr	r3, [pc, #116]	; (80129a0 <xTaskCheckForTimeOut+0xbc>)
 801292c:	681b      	ldr	r3, [r3, #0]
 801292e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	685b      	ldr	r3, [r3, #4]
 8012934:	69ba      	ldr	r2, [r7, #24]
 8012936:	1ad3      	subs	r3, r2, r3
 8012938:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801293a:	683b      	ldr	r3, [r7, #0]
 801293c:	681b      	ldr	r3, [r3, #0]
 801293e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012942:	d102      	bne.n	801294a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8012944:	2300      	movs	r3, #0
 8012946:	61fb      	str	r3, [r7, #28]
 8012948:	e023      	b.n	8012992 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	681a      	ldr	r2, [r3, #0]
 801294e:	4b15      	ldr	r3, [pc, #84]	; (80129a4 <xTaskCheckForTimeOut+0xc0>)
 8012950:	681b      	ldr	r3, [r3, #0]
 8012952:	429a      	cmp	r2, r3
 8012954:	d007      	beq.n	8012966 <xTaskCheckForTimeOut+0x82>
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	685b      	ldr	r3, [r3, #4]
 801295a:	69ba      	ldr	r2, [r7, #24]
 801295c:	429a      	cmp	r2, r3
 801295e:	d302      	bcc.n	8012966 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8012960:	2301      	movs	r3, #1
 8012962:	61fb      	str	r3, [r7, #28]
 8012964:	e015      	b.n	8012992 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8012966:	683b      	ldr	r3, [r7, #0]
 8012968:	681b      	ldr	r3, [r3, #0]
 801296a:	697a      	ldr	r2, [r7, #20]
 801296c:	429a      	cmp	r2, r3
 801296e:	d20b      	bcs.n	8012988 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8012970:	683b      	ldr	r3, [r7, #0]
 8012972:	681a      	ldr	r2, [r3, #0]
 8012974:	697b      	ldr	r3, [r7, #20]
 8012976:	1ad2      	subs	r2, r2, r3
 8012978:	683b      	ldr	r3, [r7, #0]
 801297a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801297c:	6878      	ldr	r0, [r7, #4]
 801297e:	f7ff ff9b 	bl	80128b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8012982:	2300      	movs	r3, #0
 8012984:	61fb      	str	r3, [r7, #28]
 8012986:	e004      	b.n	8012992 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8012988:	683b      	ldr	r3, [r7, #0]
 801298a:	2200      	movs	r2, #0
 801298c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801298e:	2301      	movs	r3, #1
 8012990:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8012992:	f000 fe97 	bl	80136c4 <vPortExitCritical>

	return xReturn;
 8012996:	69fb      	ldr	r3, [r7, #28]
}
 8012998:	4618      	mov	r0, r3
 801299a:	3720      	adds	r7, #32
 801299c:	46bd      	mov	sp, r7
 801299e:	bd80      	pop	{r7, pc}
 80129a0:	24001464 	.word	0x24001464
 80129a4:	24001478 	.word	0x24001478

080129a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80129a8:	b480      	push	{r7}
 80129aa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80129ac:	4b03      	ldr	r3, [pc, #12]	; (80129bc <vTaskMissedYield+0x14>)
 80129ae:	2201      	movs	r2, #1
 80129b0:	601a      	str	r2, [r3, #0]
}
 80129b2:	bf00      	nop
 80129b4:	46bd      	mov	sp, r7
 80129b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129ba:	4770      	bx	lr
 80129bc:	24001474 	.word	0x24001474

080129c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80129c0:	b580      	push	{r7, lr}
 80129c2:	b082      	sub	sp, #8
 80129c4:	af00      	add	r7, sp, #0
 80129c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80129c8:	f000 f852 	bl	8012a70 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80129cc:	4b06      	ldr	r3, [pc, #24]	; (80129e8 <prvIdleTask+0x28>)
 80129ce:	681b      	ldr	r3, [r3, #0]
 80129d0:	2b01      	cmp	r3, #1
 80129d2:	d9f9      	bls.n	80129c8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80129d4:	4b05      	ldr	r3, [pc, #20]	; (80129ec <prvIdleTask+0x2c>)
 80129d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80129da:	601a      	str	r2, [r3, #0]
 80129dc:	f3bf 8f4f 	dsb	sy
 80129e0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80129e4:	e7f0      	b.n	80129c8 <prvIdleTask+0x8>
 80129e6:	bf00      	nop
 80129e8:	24000f90 	.word	0x24000f90
 80129ec:	e000ed04 	.word	0xe000ed04

080129f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80129f0:	b580      	push	{r7, lr}
 80129f2:	b082      	sub	sp, #8
 80129f4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80129f6:	2300      	movs	r3, #0
 80129f8:	607b      	str	r3, [r7, #4]
 80129fa:	e00c      	b.n	8012a16 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80129fc:	687a      	ldr	r2, [r7, #4]
 80129fe:	4613      	mov	r3, r2
 8012a00:	009b      	lsls	r3, r3, #2
 8012a02:	4413      	add	r3, r2
 8012a04:	009b      	lsls	r3, r3, #2
 8012a06:	4a12      	ldr	r2, [pc, #72]	; (8012a50 <prvInitialiseTaskLists+0x60>)
 8012a08:	4413      	add	r3, r2
 8012a0a:	4618      	mov	r0, r3
 8012a0c:	f7fe fc4c 	bl	80112a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	3301      	adds	r3, #1
 8012a14:	607b      	str	r3, [r7, #4]
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	2b37      	cmp	r3, #55	; 0x37
 8012a1a:	d9ef      	bls.n	80129fc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8012a1c:	480d      	ldr	r0, [pc, #52]	; (8012a54 <prvInitialiseTaskLists+0x64>)
 8012a1e:	f7fe fc43 	bl	80112a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8012a22:	480d      	ldr	r0, [pc, #52]	; (8012a58 <prvInitialiseTaskLists+0x68>)
 8012a24:	f7fe fc40 	bl	80112a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8012a28:	480c      	ldr	r0, [pc, #48]	; (8012a5c <prvInitialiseTaskLists+0x6c>)
 8012a2a:	f7fe fc3d 	bl	80112a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8012a2e:	480c      	ldr	r0, [pc, #48]	; (8012a60 <prvInitialiseTaskLists+0x70>)
 8012a30:	f7fe fc3a 	bl	80112a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8012a34:	480b      	ldr	r0, [pc, #44]	; (8012a64 <prvInitialiseTaskLists+0x74>)
 8012a36:	f7fe fc37 	bl	80112a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8012a3a:	4b0b      	ldr	r3, [pc, #44]	; (8012a68 <prvInitialiseTaskLists+0x78>)
 8012a3c:	4a05      	ldr	r2, [pc, #20]	; (8012a54 <prvInitialiseTaskLists+0x64>)
 8012a3e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8012a40:	4b0a      	ldr	r3, [pc, #40]	; (8012a6c <prvInitialiseTaskLists+0x7c>)
 8012a42:	4a05      	ldr	r2, [pc, #20]	; (8012a58 <prvInitialiseTaskLists+0x68>)
 8012a44:	601a      	str	r2, [r3, #0]
}
 8012a46:	bf00      	nop
 8012a48:	3708      	adds	r7, #8
 8012a4a:	46bd      	mov	sp, r7
 8012a4c:	bd80      	pop	{r7, pc}
 8012a4e:	bf00      	nop
 8012a50:	24000f90 	.word	0x24000f90
 8012a54:	240013f0 	.word	0x240013f0
 8012a58:	24001404 	.word	0x24001404
 8012a5c:	24001420 	.word	0x24001420
 8012a60:	24001434 	.word	0x24001434
 8012a64:	2400144c 	.word	0x2400144c
 8012a68:	24001418 	.word	0x24001418
 8012a6c:	2400141c 	.word	0x2400141c

08012a70 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8012a70:	b580      	push	{r7, lr}
 8012a72:	b082      	sub	sp, #8
 8012a74:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012a76:	e019      	b.n	8012aac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8012a78:	f000 fdf4 	bl	8013664 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012a7c:	4b10      	ldr	r3, [pc, #64]	; (8012ac0 <prvCheckTasksWaitingTermination+0x50>)
 8012a7e:	68db      	ldr	r3, [r3, #12]
 8012a80:	68db      	ldr	r3, [r3, #12]
 8012a82:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	3304      	adds	r3, #4
 8012a88:	4618      	mov	r0, r3
 8012a8a:	f7fe fc97 	bl	80113bc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8012a8e:	4b0d      	ldr	r3, [pc, #52]	; (8012ac4 <prvCheckTasksWaitingTermination+0x54>)
 8012a90:	681b      	ldr	r3, [r3, #0]
 8012a92:	3b01      	subs	r3, #1
 8012a94:	4a0b      	ldr	r2, [pc, #44]	; (8012ac4 <prvCheckTasksWaitingTermination+0x54>)
 8012a96:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8012a98:	4b0b      	ldr	r3, [pc, #44]	; (8012ac8 <prvCheckTasksWaitingTermination+0x58>)
 8012a9a:	681b      	ldr	r3, [r3, #0]
 8012a9c:	3b01      	subs	r3, #1
 8012a9e:	4a0a      	ldr	r2, [pc, #40]	; (8012ac8 <prvCheckTasksWaitingTermination+0x58>)
 8012aa0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8012aa2:	f000 fe0f 	bl	80136c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8012aa6:	6878      	ldr	r0, [r7, #4]
 8012aa8:	f000 f810 	bl	8012acc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012aac:	4b06      	ldr	r3, [pc, #24]	; (8012ac8 <prvCheckTasksWaitingTermination+0x58>)
 8012aae:	681b      	ldr	r3, [r3, #0]
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	d1e1      	bne.n	8012a78 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8012ab4:	bf00      	nop
 8012ab6:	bf00      	nop
 8012ab8:	3708      	adds	r7, #8
 8012aba:	46bd      	mov	sp, r7
 8012abc:	bd80      	pop	{r7, pc}
 8012abe:	bf00      	nop
 8012ac0:	24001434 	.word	0x24001434
 8012ac4:	24001460 	.word	0x24001460
 8012ac8:	24001448 	.word	0x24001448

08012acc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8012acc:	b580      	push	{r7, lr}
 8012ace:	b084      	sub	sp, #16
 8012ad0:	af00      	add	r7, sp, #0
 8012ad2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	d108      	bne.n	8012af0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012ae2:	4618      	mov	r0, r3
 8012ae4:	f000 ffac 	bl	8013a40 <vPortFree>
				vPortFree( pxTCB );
 8012ae8:	6878      	ldr	r0, [r7, #4]
 8012aea:	f000 ffa9 	bl	8013a40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8012aee:	e018      	b.n	8012b22 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8012af6:	2b01      	cmp	r3, #1
 8012af8:	d103      	bne.n	8012b02 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8012afa:	6878      	ldr	r0, [r7, #4]
 8012afc:	f000 ffa0 	bl	8013a40 <vPortFree>
	}
 8012b00:	e00f      	b.n	8012b22 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8012b08:	2b02      	cmp	r3, #2
 8012b0a:	d00a      	beq.n	8012b22 <prvDeleteTCB+0x56>
	__asm volatile
 8012b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b10:	f383 8811 	msr	BASEPRI, r3
 8012b14:	f3bf 8f6f 	isb	sy
 8012b18:	f3bf 8f4f 	dsb	sy
 8012b1c:	60fb      	str	r3, [r7, #12]
}
 8012b1e:	bf00      	nop
 8012b20:	e7fe      	b.n	8012b20 <prvDeleteTCB+0x54>
	}
 8012b22:	bf00      	nop
 8012b24:	3710      	adds	r7, #16
 8012b26:	46bd      	mov	sp, r7
 8012b28:	bd80      	pop	{r7, pc}
	...

08012b2c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8012b2c:	b480      	push	{r7}
 8012b2e:	b083      	sub	sp, #12
 8012b30:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012b32:	4b0c      	ldr	r3, [pc, #48]	; (8012b64 <prvResetNextTaskUnblockTime+0x38>)
 8012b34:	681b      	ldr	r3, [r3, #0]
 8012b36:	681b      	ldr	r3, [r3, #0]
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d104      	bne.n	8012b46 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8012b3c:	4b0a      	ldr	r3, [pc, #40]	; (8012b68 <prvResetNextTaskUnblockTime+0x3c>)
 8012b3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012b42:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8012b44:	e008      	b.n	8012b58 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012b46:	4b07      	ldr	r3, [pc, #28]	; (8012b64 <prvResetNextTaskUnblockTime+0x38>)
 8012b48:	681b      	ldr	r3, [r3, #0]
 8012b4a:	68db      	ldr	r3, [r3, #12]
 8012b4c:	68db      	ldr	r3, [r3, #12]
 8012b4e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	685b      	ldr	r3, [r3, #4]
 8012b54:	4a04      	ldr	r2, [pc, #16]	; (8012b68 <prvResetNextTaskUnblockTime+0x3c>)
 8012b56:	6013      	str	r3, [r2, #0]
}
 8012b58:	bf00      	nop
 8012b5a:	370c      	adds	r7, #12
 8012b5c:	46bd      	mov	sp, r7
 8012b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b62:	4770      	bx	lr
 8012b64:	24001418 	.word	0x24001418
 8012b68:	24001480 	.word	0x24001480

08012b6c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8012b6c:	b480      	push	{r7}
 8012b6e:	b083      	sub	sp, #12
 8012b70:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8012b72:	4b0b      	ldr	r3, [pc, #44]	; (8012ba0 <xTaskGetSchedulerState+0x34>)
 8012b74:	681b      	ldr	r3, [r3, #0]
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	d102      	bne.n	8012b80 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8012b7a:	2301      	movs	r3, #1
 8012b7c:	607b      	str	r3, [r7, #4]
 8012b7e:	e008      	b.n	8012b92 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012b80:	4b08      	ldr	r3, [pc, #32]	; (8012ba4 <xTaskGetSchedulerState+0x38>)
 8012b82:	681b      	ldr	r3, [r3, #0]
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	d102      	bne.n	8012b8e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8012b88:	2302      	movs	r3, #2
 8012b8a:	607b      	str	r3, [r7, #4]
 8012b8c:	e001      	b.n	8012b92 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8012b8e:	2300      	movs	r3, #0
 8012b90:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8012b92:	687b      	ldr	r3, [r7, #4]
	}
 8012b94:	4618      	mov	r0, r3
 8012b96:	370c      	adds	r7, #12
 8012b98:	46bd      	mov	sp, r7
 8012b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b9e:	4770      	bx	lr
 8012ba0:	2400146c 	.word	0x2400146c
 8012ba4:	24001488 	.word	0x24001488

08012ba8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8012ba8:	b580      	push	{r7, lr}
 8012baa:	b086      	sub	sp, #24
 8012bac:	af00      	add	r7, sp, #0
 8012bae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8012bb4:	2300      	movs	r3, #0
 8012bb6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	d056      	beq.n	8012c6c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8012bbe:	4b2e      	ldr	r3, [pc, #184]	; (8012c78 <xTaskPriorityDisinherit+0xd0>)
 8012bc0:	681b      	ldr	r3, [r3, #0]
 8012bc2:	693a      	ldr	r2, [r7, #16]
 8012bc4:	429a      	cmp	r2, r3
 8012bc6:	d00a      	beq.n	8012bde <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8012bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bcc:	f383 8811 	msr	BASEPRI, r3
 8012bd0:	f3bf 8f6f 	isb	sy
 8012bd4:	f3bf 8f4f 	dsb	sy
 8012bd8:	60fb      	str	r3, [r7, #12]
}
 8012bda:	bf00      	nop
 8012bdc:	e7fe      	b.n	8012bdc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8012bde:	693b      	ldr	r3, [r7, #16]
 8012be0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	d10a      	bne.n	8012bfc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8012be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bea:	f383 8811 	msr	BASEPRI, r3
 8012bee:	f3bf 8f6f 	isb	sy
 8012bf2:	f3bf 8f4f 	dsb	sy
 8012bf6:	60bb      	str	r3, [r7, #8]
}
 8012bf8:	bf00      	nop
 8012bfa:	e7fe      	b.n	8012bfa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8012bfc:	693b      	ldr	r3, [r7, #16]
 8012bfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012c00:	1e5a      	subs	r2, r3, #1
 8012c02:	693b      	ldr	r3, [r7, #16]
 8012c04:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8012c06:	693b      	ldr	r3, [r7, #16]
 8012c08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c0a:	693b      	ldr	r3, [r7, #16]
 8012c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012c0e:	429a      	cmp	r2, r3
 8012c10:	d02c      	beq.n	8012c6c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8012c12:	693b      	ldr	r3, [r7, #16]
 8012c14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d128      	bne.n	8012c6c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012c1a:	693b      	ldr	r3, [r7, #16]
 8012c1c:	3304      	adds	r3, #4
 8012c1e:	4618      	mov	r0, r3
 8012c20:	f7fe fbcc 	bl	80113bc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8012c24:	693b      	ldr	r3, [r7, #16]
 8012c26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012c28:	693b      	ldr	r3, [r7, #16]
 8012c2a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012c2c:	693b      	ldr	r3, [r7, #16]
 8012c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c30:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012c34:	693b      	ldr	r3, [r7, #16]
 8012c36:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8012c38:	693b      	ldr	r3, [r7, #16]
 8012c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c3c:	4b0f      	ldr	r3, [pc, #60]	; (8012c7c <xTaskPriorityDisinherit+0xd4>)
 8012c3e:	681b      	ldr	r3, [r3, #0]
 8012c40:	429a      	cmp	r2, r3
 8012c42:	d903      	bls.n	8012c4c <xTaskPriorityDisinherit+0xa4>
 8012c44:	693b      	ldr	r3, [r7, #16]
 8012c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c48:	4a0c      	ldr	r2, [pc, #48]	; (8012c7c <xTaskPriorityDisinherit+0xd4>)
 8012c4a:	6013      	str	r3, [r2, #0]
 8012c4c:	693b      	ldr	r3, [r7, #16]
 8012c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c50:	4613      	mov	r3, r2
 8012c52:	009b      	lsls	r3, r3, #2
 8012c54:	4413      	add	r3, r2
 8012c56:	009b      	lsls	r3, r3, #2
 8012c58:	4a09      	ldr	r2, [pc, #36]	; (8012c80 <xTaskPriorityDisinherit+0xd8>)
 8012c5a:	441a      	add	r2, r3
 8012c5c:	693b      	ldr	r3, [r7, #16]
 8012c5e:	3304      	adds	r3, #4
 8012c60:	4619      	mov	r1, r3
 8012c62:	4610      	mov	r0, r2
 8012c64:	f7fe fb4d 	bl	8011302 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8012c68:	2301      	movs	r3, #1
 8012c6a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012c6c:	697b      	ldr	r3, [r7, #20]
	}
 8012c6e:	4618      	mov	r0, r3
 8012c70:	3718      	adds	r7, #24
 8012c72:	46bd      	mov	sp, r7
 8012c74:	bd80      	pop	{r7, pc}
 8012c76:	bf00      	nop
 8012c78:	24000f8c 	.word	0x24000f8c
 8012c7c:	24001468 	.word	0x24001468
 8012c80:	24000f90 	.word	0x24000f90

08012c84 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8012c84:	b580      	push	{r7, lr}
 8012c86:	b084      	sub	sp, #16
 8012c88:	af00      	add	r7, sp, #0
 8012c8a:	6078      	str	r0, [r7, #4]
 8012c8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8012c8e:	4b21      	ldr	r3, [pc, #132]	; (8012d14 <prvAddCurrentTaskToDelayedList+0x90>)
 8012c90:	681b      	ldr	r3, [r3, #0]
 8012c92:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012c94:	4b20      	ldr	r3, [pc, #128]	; (8012d18 <prvAddCurrentTaskToDelayedList+0x94>)
 8012c96:	681b      	ldr	r3, [r3, #0]
 8012c98:	3304      	adds	r3, #4
 8012c9a:	4618      	mov	r0, r3
 8012c9c:	f7fe fb8e 	bl	80113bc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012ca6:	d10a      	bne.n	8012cbe <prvAddCurrentTaskToDelayedList+0x3a>
 8012ca8:	683b      	ldr	r3, [r7, #0]
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	d007      	beq.n	8012cbe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012cae:	4b1a      	ldr	r3, [pc, #104]	; (8012d18 <prvAddCurrentTaskToDelayedList+0x94>)
 8012cb0:	681b      	ldr	r3, [r3, #0]
 8012cb2:	3304      	adds	r3, #4
 8012cb4:	4619      	mov	r1, r3
 8012cb6:	4819      	ldr	r0, [pc, #100]	; (8012d1c <prvAddCurrentTaskToDelayedList+0x98>)
 8012cb8:	f7fe fb23 	bl	8011302 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8012cbc:	e026      	b.n	8012d0c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8012cbe:	68fa      	ldr	r2, [r7, #12]
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	4413      	add	r3, r2
 8012cc4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8012cc6:	4b14      	ldr	r3, [pc, #80]	; (8012d18 <prvAddCurrentTaskToDelayedList+0x94>)
 8012cc8:	681b      	ldr	r3, [r3, #0]
 8012cca:	68ba      	ldr	r2, [r7, #8]
 8012ccc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8012cce:	68ba      	ldr	r2, [r7, #8]
 8012cd0:	68fb      	ldr	r3, [r7, #12]
 8012cd2:	429a      	cmp	r2, r3
 8012cd4:	d209      	bcs.n	8012cea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012cd6:	4b12      	ldr	r3, [pc, #72]	; (8012d20 <prvAddCurrentTaskToDelayedList+0x9c>)
 8012cd8:	681a      	ldr	r2, [r3, #0]
 8012cda:	4b0f      	ldr	r3, [pc, #60]	; (8012d18 <prvAddCurrentTaskToDelayedList+0x94>)
 8012cdc:	681b      	ldr	r3, [r3, #0]
 8012cde:	3304      	adds	r3, #4
 8012ce0:	4619      	mov	r1, r3
 8012ce2:	4610      	mov	r0, r2
 8012ce4:	f7fe fb31 	bl	801134a <vListInsert>
}
 8012ce8:	e010      	b.n	8012d0c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012cea:	4b0e      	ldr	r3, [pc, #56]	; (8012d24 <prvAddCurrentTaskToDelayedList+0xa0>)
 8012cec:	681a      	ldr	r2, [r3, #0]
 8012cee:	4b0a      	ldr	r3, [pc, #40]	; (8012d18 <prvAddCurrentTaskToDelayedList+0x94>)
 8012cf0:	681b      	ldr	r3, [r3, #0]
 8012cf2:	3304      	adds	r3, #4
 8012cf4:	4619      	mov	r1, r3
 8012cf6:	4610      	mov	r0, r2
 8012cf8:	f7fe fb27 	bl	801134a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8012cfc:	4b0a      	ldr	r3, [pc, #40]	; (8012d28 <prvAddCurrentTaskToDelayedList+0xa4>)
 8012cfe:	681b      	ldr	r3, [r3, #0]
 8012d00:	68ba      	ldr	r2, [r7, #8]
 8012d02:	429a      	cmp	r2, r3
 8012d04:	d202      	bcs.n	8012d0c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8012d06:	4a08      	ldr	r2, [pc, #32]	; (8012d28 <prvAddCurrentTaskToDelayedList+0xa4>)
 8012d08:	68bb      	ldr	r3, [r7, #8]
 8012d0a:	6013      	str	r3, [r2, #0]
}
 8012d0c:	bf00      	nop
 8012d0e:	3710      	adds	r7, #16
 8012d10:	46bd      	mov	sp, r7
 8012d12:	bd80      	pop	{r7, pc}
 8012d14:	24001464 	.word	0x24001464
 8012d18:	24000f8c 	.word	0x24000f8c
 8012d1c:	2400144c 	.word	0x2400144c
 8012d20:	2400141c 	.word	0x2400141c
 8012d24:	24001418 	.word	0x24001418
 8012d28:	24001480 	.word	0x24001480

08012d2c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8012d2c:	b580      	push	{r7, lr}
 8012d2e:	b08a      	sub	sp, #40	; 0x28
 8012d30:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8012d32:	2300      	movs	r3, #0
 8012d34:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8012d36:	f000 fb07 	bl	8013348 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8012d3a:	4b1c      	ldr	r3, [pc, #112]	; (8012dac <xTimerCreateTimerTask+0x80>)
 8012d3c:	681b      	ldr	r3, [r3, #0]
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d021      	beq.n	8012d86 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8012d42:	2300      	movs	r3, #0
 8012d44:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8012d46:	2300      	movs	r3, #0
 8012d48:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8012d4a:	1d3a      	adds	r2, r7, #4
 8012d4c:	f107 0108 	add.w	r1, r7, #8
 8012d50:	f107 030c 	add.w	r3, r7, #12
 8012d54:	4618      	mov	r0, r3
 8012d56:	f7fe f98f 	bl	8011078 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8012d5a:	6879      	ldr	r1, [r7, #4]
 8012d5c:	68bb      	ldr	r3, [r7, #8]
 8012d5e:	68fa      	ldr	r2, [r7, #12]
 8012d60:	9202      	str	r2, [sp, #8]
 8012d62:	9301      	str	r3, [sp, #4]
 8012d64:	2302      	movs	r3, #2
 8012d66:	9300      	str	r3, [sp, #0]
 8012d68:	2300      	movs	r3, #0
 8012d6a:	460a      	mov	r2, r1
 8012d6c:	4910      	ldr	r1, [pc, #64]	; (8012db0 <xTimerCreateTimerTask+0x84>)
 8012d6e:	4811      	ldr	r0, [pc, #68]	; (8012db4 <xTimerCreateTimerTask+0x88>)
 8012d70:	f7ff f874 	bl	8011e5c <xTaskCreateStatic>
 8012d74:	4603      	mov	r3, r0
 8012d76:	4a10      	ldr	r2, [pc, #64]	; (8012db8 <xTimerCreateTimerTask+0x8c>)
 8012d78:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8012d7a:	4b0f      	ldr	r3, [pc, #60]	; (8012db8 <xTimerCreateTimerTask+0x8c>)
 8012d7c:	681b      	ldr	r3, [r3, #0]
 8012d7e:	2b00      	cmp	r3, #0
 8012d80:	d001      	beq.n	8012d86 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8012d82:	2301      	movs	r3, #1
 8012d84:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8012d86:	697b      	ldr	r3, [r7, #20]
 8012d88:	2b00      	cmp	r3, #0
 8012d8a:	d10a      	bne.n	8012da2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8012d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d90:	f383 8811 	msr	BASEPRI, r3
 8012d94:	f3bf 8f6f 	isb	sy
 8012d98:	f3bf 8f4f 	dsb	sy
 8012d9c:	613b      	str	r3, [r7, #16]
}
 8012d9e:	bf00      	nop
 8012da0:	e7fe      	b.n	8012da0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8012da2:	697b      	ldr	r3, [r7, #20]
}
 8012da4:	4618      	mov	r0, r3
 8012da6:	3718      	adds	r7, #24
 8012da8:	46bd      	mov	sp, r7
 8012daa:	bd80      	pop	{r7, pc}
 8012dac:	240014bc 	.word	0x240014bc
 8012db0:	08014940 	.word	0x08014940
 8012db4:	08012ef1 	.word	0x08012ef1
 8012db8:	240014c0 	.word	0x240014c0

08012dbc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8012dbc:	b580      	push	{r7, lr}
 8012dbe:	b08a      	sub	sp, #40	; 0x28
 8012dc0:	af00      	add	r7, sp, #0
 8012dc2:	60f8      	str	r0, [r7, #12]
 8012dc4:	60b9      	str	r1, [r7, #8]
 8012dc6:	607a      	str	r2, [r7, #4]
 8012dc8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8012dca:	2300      	movs	r3, #0
 8012dcc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8012dce:	68fb      	ldr	r3, [r7, #12]
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	d10a      	bne.n	8012dea <xTimerGenericCommand+0x2e>
	__asm volatile
 8012dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012dd8:	f383 8811 	msr	BASEPRI, r3
 8012ddc:	f3bf 8f6f 	isb	sy
 8012de0:	f3bf 8f4f 	dsb	sy
 8012de4:	623b      	str	r3, [r7, #32]
}
 8012de6:	bf00      	nop
 8012de8:	e7fe      	b.n	8012de8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8012dea:	4b1a      	ldr	r3, [pc, #104]	; (8012e54 <xTimerGenericCommand+0x98>)
 8012dec:	681b      	ldr	r3, [r3, #0]
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	d02a      	beq.n	8012e48 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8012df2:	68bb      	ldr	r3, [r7, #8]
 8012df4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8012dfa:	68fb      	ldr	r3, [r7, #12]
 8012dfc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8012dfe:	68bb      	ldr	r3, [r7, #8]
 8012e00:	2b05      	cmp	r3, #5
 8012e02:	dc18      	bgt.n	8012e36 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8012e04:	f7ff feb2 	bl	8012b6c <xTaskGetSchedulerState>
 8012e08:	4603      	mov	r3, r0
 8012e0a:	2b02      	cmp	r3, #2
 8012e0c:	d109      	bne.n	8012e22 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8012e0e:	4b11      	ldr	r3, [pc, #68]	; (8012e54 <xTimerGenericCommand+0x98>)
 8012e10:	6818      	ldr	r0, [r3, #0]
 8012e12:	f107 0110 	add.w	r1, r7, #16
 8012e16:	2300      	movs	r3, #0
 8012e18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012e1a:	f7fe fc37 	bl	801168c <xQueueGenericSend>
 8012e1e:	6278      	str	r0, [r7, #36]	; 0x24
 8012e20:	e012      	b.n	8012e48 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8012e22:	4b0c      	ldr	r3, [pc, #48]	; (8012e54 <xTimerGenericCommand+0x98>)
 8012e24:	6818      	ldr	r0, [r3, #0]
 8012e26:	f107 0110 	add.w	r1, r7, #16
 8012e2a:	2300      	movs	r3, #0
 8012e2c:	2200      	movs	r2, #0
 8012e2e:	f7fe fc2d 	bl	801168c <xQueueGenericSend>
 8012e32:	6278      	str	r0, [r7, #36]	; 0x24
 8012e34:	e008      	b.n	8012e48 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8012e36:	4b07      	ldr	r3, [pc, #28]	; (8012e54 <xTimerGenericCommand+0x98>)
 8012e38:	6818      	ldr	r0, [r3, #0]
 8012e3a:	f107 0110 	add.w	r1, r7, #16
 8012e3e:	2300      	movs	r3, #0
 8012e40:	683a      	ldr	r2, [r7, #0]
 8012e42:	f7fe fd21 	bl	8011888 <xQueueGenericSendFromISR>
 8012e46:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8012e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012e4a:	4618      	mov	r0, r3
 8012e4c:	3728      	adds	r7, #40	; 0x28
 8012e4e:	46bd      	mov	sp, r7
 8012e50:	bd80      	pop	{r7, pc}
 8012e52:	bf00      	nop
 8012e54:	240014bc 	.word	0x240014bc

08012e58 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8012e58:	b580      	push	{r7, lr}
 8012e5a:	b088      	sub	sp, #32
 8012e5c:	af02      	add	r7, sp, #8
 8012e5e:	6078      	str	r0, [r7, #4]
 8012e60:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012e62:	4b22      	ldr	r3, [pc, #136]	; (8012eec <prvProcessExpiredTimer+0x94>)
 8012e64:	681b      	ldr	r3, [r3, #0]
 8012e66:	68db      	ldr	r3, [r3, #12]
 8012e68:	68db      	ldr	r3, [r3, #12]
 8012e6a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012e6c:	697b      	ldr	r3, [r7, #20]
 8012e6e:	3304      	adds	r3, #4
 8012e70:	4618      	mov	r0, r3
 8012e72:	f7fe faa3 	bl	80113bc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012e76:	697b      	ldr	r3, [r7, #20]
 8012e78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012e7c:	f003 0304 	and.w	r3, r3, #4
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	d022      	beq.n	8012eca <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8012e84:	697b      	ldr	r3, [r7, #20]
 8012e86:	699a      	ldr	r2, [r3, #24]
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	18d1      	adds	r1, r2, r3
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	683a      	ldr	r2, [r7, #0]
 8012e90:	6978      	ldr	r0, [r7, #20]
 8012e92:	f000 f8d1 	bl	8013038 <prvInsertTimerInActiveList>
 8012e96:	4603      	mov	r3, r0
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	d01f      	beq.n	8012edc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012e9c:	2300      	movs	r3, #0
 8012e9e:	9300      	str	r3, [sp, #0]
 8012ea0:	2300      	movs	r3, #0
 8012ea2:	687a      	ldr	r2, [r7, #4]
 8012ea4:	2100      	movs	r1, #0
 8012ea6:	6978      	ldr	r0, [r7, #20]
 8012ea8:	f7ff ff88 	bl	8012dbc <xTimerGenericCommand>
 8012eac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8012eae:	693b      	ldr	r3, [r7, #16]
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	d113      	bne.n	8012edc <prvProcessExpiredTimer+0x84>
	__asm volatile
 8012eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012eb8:	f383 8811 	msr	BASEPRI, r3
 8012ebc:	f3bf 8f6f 	isb	sy
 8012ec0:	f3bf 8f4f 	dsb	sy
 8012ec4:	60fb      	str	r3, [r7, #12]
}
 8012ec6:	bf00      	nop
 8012ec8:	e7fe      	b.n	8012ec8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012eca:	697b      	ldr	r3, [r7, #20]
 8012ecc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012ed0:	f023 0301 	bic.w	r3, r3, #1
 8012ed4:	b2da      	uxtb	r2, r3
 8012ed6:	697b      	ldr	r3, [r7, #20]
 8012ed8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012edc:	697b      	ldr	r3, [r7, #20]
 8012ede:	6a1b      	ldr	r3, [r3, #32]
 8012ee0:	6978      	ldr	r0, [r7, #20]
 8012ee2:	4798      	blx	r3
}
 8012ee4:	bf00      	nop
 8012ee6:	3718      	adds	r7, #24
 8012ee8:	46bd      	mov	sp, r7
 8012eea:	bd80      	pop	{r7, pc}
 8012eec:	240014b4 	.word	0x240014b4

08012ef0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8012ef0:	b580      	push	{r7, lr}
 8012ef2:	b084      	sub	sp, #16
 8012ef4:	af00      	add	r7, sp, #0
 8012ef6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012ef8:	f107 0308 	add.w	r3, r7, #8
 8012efc:	4618      	mov	r0, r3
 8012efe:	f000 f857 	bl	8012fb0 <prvGetNextExpireTime>
 8012f02:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8012f04:	68bb      	ldr	r3, [r7, #8]
 8012f06:	4619      	mov	r1, r3
 8012f08:	68f8      	ldr	r0, [r7, #12]
 8012f0a:	f000 f803 	bl	8012f14 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8012f0e:	f000 f8d5 	bl	80130bc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012f12:	e7f1      	b.n	8012ef8 <prvTimerTask+0x8>

08012f14 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8012f14:	b580      	push	{r7, lr}
 8012f16:	b084      	sub	sp, #16
 8012f18:	af00      	add	r7, sp, #0
 8012f1a:	6078      	str	r0, [r7, #4]
 8012f1c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8012f1e:	f7ff f9d9 	bl	80122d4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012f22:	f107 0308 	add.w	r3, r7, #8
 8012f26:	4618      	mov	r0, r3
 8012f28:	f000 f866 	bl	8012ff8 <prvSampleTimeNow>
 8012f2c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8012f2e:	68bb      	ldr	r3, [r7, #8]
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	d130      	bne.n	8012f96 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8012f34:	683b      	ldr	r3, [r7, #0]
 8012f36:	2b00      	cmp	r3, #0
 8012f38:	d10a      	bne.n	8012f50 <prvProcessTimerOrBlockTask+0x3c>
 8012f3a:	687a      	ldr	r2, [r7, #4]
 8012f3c:	68fb      	ldr	r3, [r7, #12]
 8012f3e:	429a      	cmp	r2, r3
 8012f40:	d806      	bhi.n	8012f50 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8012f42:	f7ff f9d5 	bl	80122f0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8012f46:	68f9      	ldr	r1, [r7, #12]
 8012f48:	6878      	ldr	r0, [r7, #4]
 8012f4a:	f7ff ff85 	bl	8012e58 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8012f4e:	e024      	b.n	8012f9a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8012f50:	683b      	ldr	r3, [r7, #0]
 8012f52:	2b00      	cmp	r3, #0
 8012f54:	d008      	beq.n	8012f68 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8012f56:	4b13      	ldr	r3, [pc, #76]	; (8012fa4 <prvProcessTimerOrBlockTask+0x90>)
 8012f58:	681b      	ldr	r3, [r3, #0]
 8012f5a:	681b      	ldr	r3, [r3, #0]
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	d101      	bne.n	8012f64 <prvProcessTimerOrBlockTask+0x50>
 8012f60:	2301      	movs	r3, #1
 8012f62:	e000      	b.n	8012f66 <prvProcessTimerOrBlockTask+0x52>
 8012f64:	2300      	movs	r3, #0
 8012f66:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8012f68:	4b0f      	ldr	r3, [pc, #60]	; (8012fa8 <prvProcessTimerOrBlockTask+0x94>)
 8012f6a:	6818      	ldr	r0, [r3, #0]
 8012f6c:	687a      	ldr	r2, [r7, #4]
 8012f6e:	68fb      	ldr	r3, [r7, #12]
 8012f70:	1ad3      	subs	r3, r2, r3
 8012f72:	683a      	ldr	r2, [r7, #0]
 8012f74:	4619      	mov	r1, r3
 8012f76:	f7fe ff3d 	bl	8011df4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8012f7a:	f7ff f9b9 	bl	80122f0 <xTaskResumeAll>
 8012f7e:	4603      	mov	r3, r0
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	d10a      	bne.n	8012f9a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8012f84:	4b09      	ldr	r3, [pc, #36]	; (8012fac <prvProcessTimerOrBlockTask+0x98>)
 8012f86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012f8a:	601a      	str	r2, [r3, #0]
 8012f8c:	f3bf 8f4f 	dsb	sy
 8012f90:	f3bf 8f6f 	isb	sy
}
 8012f94:	e001      	b.n	8012f9a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8012f96:	f7ff f9ab 	bl	80122f0 <xTaskResumeAll>
}
 8012f9a:	bf00      	nop
 8012f9c:	3710      	adds	r7, #16
 8012f9e:	46bd      	mov	sp, r7
 8012fa0:	bd80      	pop	{r7, pc}
 8012fa2:	bf00      	nop
 8012fa4:	240014b8 	.word	0x240014b8
 8012fa8:	240014bc 	.word	0x240014bc
 8012fac:	e000ed04 	.word	0xe000ed04

08012fb0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8012fb0:	b480      	push	{r7}
 8012fb2:	b085      	sub	sp, #20
 8012fb4:	af00      	add	r7, sp, #0
 8012fb6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8012fb8:	4b0e      	ldr	r3, [pc, #56]	; (8012ff4 <prvGetNextExpireTime+0x44>)
 8012fba:	681b      	ldr	r3, [r3, #0]
 8012fbc:	681b      	ldr	r3, [r3, #0]
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	d101      	bne.n	8012fc6 <prvGetNextExpireTime+0x16>
 8012fc2:	2201      	movs	r2, #1
 8012fc4:	e000      	b.n	8012fc8 <prvGetNextExpireTime+0x18>
 8012fc6:	2200      	movs	r2, #0
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	681b      	ldr	r3, [r3, #0]
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	d105      	bne.n	8012fe0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012fd4:	4b07      	ldr	r3, [pc, #28]	; (8012ff4 <prvGetNextExpireTime+0x44>)
 8012fd6:	681b      	ldr	r3, [r3, #0]
 8012fd8:	68db      	ldr	r3, [r3, #12]
 8012fda:	681b      	ldr	r3, [r3, #0]
 8012fdc:	60fb      	str	r3, [r7, #12]
 8012fde:	e001      	b.n	8012fe4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8012fe0:	2300      	movs	r3, #0
 8012fe2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8012fe4:	68fb      	ldr	r3, [r7, #12]
}
 8012fe6:	4618      	mov	r0, r3
 8012fe8:	3714      	adds	r7, #20
 8012fea:	46bd      	mov	sp, r7
 8012fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ff0:	4770      	bx	lr
 8012ff2:	bf00      	nop
 8012ff4:	240014b4 	.word	0x240014b4

08012ff8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8012ff8:	b580      	push	{r7, lr}
 8012ffa:	b084      	sub	sp, #16
 8012ffc:	af00      	add	r7, sp, #0
 8012ffe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8013000:	f7ff fa14 	bl	801242c <xTaskGetTickCount>
 8013004:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8013006:	4b0b      	ldr	r3, [pc, #44]	; (8013034 <prvSampleTimeNow+0x3c>)
 8013008:	681b      	ldr	r3, [r3, #0]
 801300a:	68fa      	ldr	r2, [r7, #12]
 801300c:	429a      	cmp	r2, r3
 801300e:	d205      	bcs.n	801301c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8013010:	f000 f936 	bl	8013280 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	2201      	movs	r2, #1
 8013018:	601a      	str	r2, [r3, #0]
 801301a:	e002      	b.n	8013022 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	2200      	movs	r2, #0
 8013020:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8013022:	4a04      	ldr	r2, [pc, #16]	; (8013034 <prvSampleTimeNow+0x3c>)
 8013024:	68fb      	ldr	r3, [r7, #12]
 8013026:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8013028:	68fb      	ldr	r3, [r7, #12]
}
 801302a:	4618      	mov	r0, r3
 801302c:	3710      	adds	r7, #16
 801302e:	46bd      	mov	sp, r7
 8013030:	bd80      	pop	{r7, pc}
 8013032:	bf00      	nop
 8013034:	240014c4 	.word	0x240014c4

08013038 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8013038:	b580      	push	{r7, lr}
 801303a:	b086      	sub	sp, #24
 801303c:	af00      	add	r7, sp, #0
 801303e:	60f8      	str	r0, [r7, #12]
 8013040:	60b9      	str	r1, [r7, #8]
 8013042:	607a      	str	r2, [r7, #4]
 8013044:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8013046:	2300      	movs	r3, #0
 8013048:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801304a:	68fb      	ldr	r3, [r7, #12]
 801304c:	68ba      	ldr	r2, [r7, #8]
 801304e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013050:	68fb      	ldr	r3, [r7, #12]
 8013052:	68fa      	ldr	r2, [r7, #12]
 8013054:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8013056:	68ba      	ldr	r2, [r7, #8]
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	429a      	cmp	r2, r3
 801305c:	d812      	bhi.n	8013084 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801305e:	687a      	ldr	r2, [r7, #4]
 8013060:	683b      	ldr	r3, [r7, #0]
 8013062:	1ad2      	subs	r2, r2, r3
 8013064:	68fb      	ldr	r3, [r7, #12]
 8013066:	699b      	ldr	r3, [r3, #24]
 8013068:	429a      	cmp	r2, r3
 801306a:	d302      	bcc.n	8013072 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801306c:	2301      	movs	r3, #1
 801306e:	617b      	str	r3, [r7, #20]
 8013070:	e01b      	b.n	80130aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8013072:	4b10      	ldr	r3, [pc, #64]	; (80130b4 <prvInsertTimerInActiveList+0x7c>)
 8013074:	681a      	ldr	r2, [r3, #0]
 8013076:	68fb      	ldr	r3, [r7, #12]
 8013078:	3304      	adds	r3, #4
 801307a:	4619      	mov	r1, r3
 801307c:	4610      	mov	r0, r2
 801307e:	f7fe f964 	bl	801134a <vListInsert>
 8013082:	e012      	b.n	80130aa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8013084:	687a      	ldr	r2, [r7, #4]
 8013086:	683b      	ldr	r3, [r7, #0]
 8013088:	429a      	cmp	r2, r3
 801308a:	d206      	bcs.n	801309a <prvInsertTimerInActiveList+0x62>
 801308c:	68ba      	ldr	r2, [r7, #8]
 801308e:	683b      	ldr	r3, [r7, #0]
 8013090:	429a      	cmp	r2, r3
 8013092:	d302      	bcc.n	801309a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8013094:	2301      	movs	r3, #1
 8013096:	617b      	str	r3, [r7, #20]
 8013098:	e007      	b.n	80130aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801309a:	4b07      	ldr	r3, [pc, #28]	; (80130b8 <prvInsertTimerInActiveList+0x80>)
 801309c:	681a      	ldr	r2, [r3, #0]
 801309e:	68fb      	ldr	r3, [r7, #12]
 80130a0:	3304      	adds	r3, #4
 80130a2:	4619      	mov	r1, r3
 80130a4:	4610      	mov	r0, r2
 80130a6:	f7fe f950 	bl	801134a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80130aa:	697b      	ldr	r3, [r7, #20]
}
 80130ac:	4618      	mov	r0, r3
 80130ae:	3718      	adds	r7, #24
 80130b0:	46bd      	mov	sp, r7
 80130b2:	bd80      	pop	{r7, pc}
 80130b4:	240014b8 	.word	0x240014b8
 80130b8:	240014b4 	.word	0x240014b4

080130bc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80130bc:	b580      	push	{r7, lr}
 80130be:	b08e      	sub	sp, #56	; 0x38
 80130c0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80130c2:	e0ca      	b.n	801325a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	da18      	bge.n	80130fc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80130ca:	1d3b      	adds	r3, r7, #4
 80130cc:	3304      	adds	r3, #4
 80130ce:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80130d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130d2:	2b00      	cmp	r3, #0
 80130d4:	d10a      	bne.n	80130ec <prvProcessReceivedCommands+0x30>
	__asm volatile
 80130d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130da:	f383 8811 	msr	BASEPRI, r3
 80130de:	f3bf 8f6f 	isb	sy
 80130e2:	f3bf 8f4f 	dsb	sy
 80130e6:	61fb      	str	r3, [r7, #28]
}
 80130e8:	bf00      	nop
 80130ea:	e7fe      	b.n	80130ea <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80130ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130ee:	681b      	ldr	r3, [r3, #0]
 80130f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80130f2:	6850      	ldr	r0, [r2, #4]
 80130f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80130f6:	6892      	ldr	r2, [r2, #8]
 80130f8:	4611      	mov	r1, r2
 80130fa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	2b00      	cmp	r3, #0
 8013100:	f2c0 80aa 	blt.w	8013258 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8013104:	68fb      	ldr	r3, [r7, #12]
 8013106:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8013108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801310a:	695b      	ldr	r3, [r3, #20]
 801310c:	2b00      	cmp	r3, #0
 801310e:	d004      	beq.n	801311a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013112:	3304      	adds	r3, #4
 8013114:	4618      	mov	r0, r3
 8013116:	f7fe f951 	bl	80113bc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801311a:	463b      	mov	r3, r7
 801311c:	4618      	mov	r0, r3
 801311e:	f7ff ff6b 	bl	8012ff8 <prvSampleTimeNow>
 8013122:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	2b09      	cmp	r3, #9
 8013128:	f200 8097 	bhi.w	801325a <prvProcessReceivedCommands+0x19e>
 801312c:	a201      	add	r2, pc, #4	; (adr r2, 8013134 <prvProcessReceivedCommands+0x78>)
 801312e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013132:	bf00      	nop
 8013134:	0801315d 	.word	0x0801315d
 8013138:	0801315d 	.word	0x0801315d
 801313c:	0801315d 	.word	0x0801315d
 8013140:	080131d1 	.word	0x080131d1
 8013144:	080131e5 	.word	0x080131e5
 8013148:	0801322f 	.word	0x0801322f
 801314c:	0801315d 	.word	0x0801315d
 8013150:	0801315d 	.word	0x0801315d
 8013154:	080131d1 	.word	0x080131d1
 8013158:	080131e5 	.word	0x080131e5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801315c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801315e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013162:	f043 0301 	orr.w	r3, r3, #1
 8013166:	b2da      	uxtb	r2, r3
 8013168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801316a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801316e:	68ba      	ldr	r2, [r7, #8]
 8013170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013172:	699b      	ldr	r3, [r3, #24]
 8013174:	18d1      	adds	r1, r2, r3
 8013176:	68bb      	ldr	r3, [r7, #8]
 8013178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801317a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801317c:	f7ff ff5c 	bl	8013038 <prvInsertTimerInActiveList>
 8013180:	4603      	mov	r3, r0
 8013182:	2b00      	cmp	r3, #0
 8013184:	d069      	beq.n	801325a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013188:	6a1b      	ldr	r3, [r3, #32]
 801318a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801318c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801318e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013190:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013194:	f003 0304 	and.w	r3, r3, #4
 8013198:	2b00      	cmp	r3, #0
 801319a:	d05e      	beq.n	801325a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801319c:	68ba      	ldr	r2, [r7, #8]
 801319e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131a0:	699b      	ldr	r3, [r3, #24]
 80131a2:	441a      	add	r2, r3
 80131a4:	2300      	movs	r3, #0
 80131a6:	9300      	str	r3, [sp, #0]
 80131a8:	2300      	movs	r3, #0
 80131aa:	2100      	movs	r1, #0
 80131ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80131ae:	f7ff fe05 	bl	8012dbc <xTimerGenericCommand>
 80131b2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80131b4:	6a3b      	ldr	r3, [r7, #32]
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	d14f      	bne.n	801325a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80131ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131be:	f383 8811 	msr	BASEPRI, r3
 80131c2:	f3bf 8f6f 	isb	sy
 80131c6:	f3bf 8f4f 	dsb	sy
 80131ca:	61bb      	str	r3, [r7, #24]
}
 80131cc:	bf00      	nop
 80131ce:	e7fe      	b.n	80131ce <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80131d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80131d6:	f023 0301 	bic.w	r3, r3, #1
 80131da:	b2da      	uxtb	r2, r3
 80131dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80131e2:	e03a      	b.n	801325a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80131e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80131ea:	f043 0301 	orr.w	r3, r3, #1
 80131ee:	b2da      	uxtb	r2, r3
 80131f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80131f6:	68ba      	ldr	r2, [r7, #8]
 80131f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131fa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80131fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131fe:	699b      	ldr	r3, [r3, #24]
 8013200:	2b00      	cmp	r3, #0
 8013202:	d10a      	bne.n	801321a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8013204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013208:	f383 8811 	msr	BASEPRI, r3
 801320c:	f3bf 8f6f 	isb	sy
 8013210:	f3bf 8f4f 	dsb	sy
 8013214:	617b      	str	r3, [r7, #20]
}
 8013216:	bf00      	nop
 8013218:	e7fe      	b.n	8013218 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801321a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801321c:	699a      	ldr	r2, [r3, #24]
 801321e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013220:	18d1      	adds	r1, r2, r3
 8013222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013224:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013226:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013228:	f7ff ff06 	bl	8013038 <prvInsertTimerInActiveList>
					break;
 801322c:	e015      	b.n	801325a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801322e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013230:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013234:	f003 0302 	and.w	r3, r3, #2
 8013238:	2b00      	cmp	r3, #0
 801323a:	d103      	bne.n	8013244 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 801323c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801323e:	f000 fbff 	bl	8013a40 <vPortFree>
 8013242:	e00a      	b.n	801325a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013246:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801324a:	f023 0301 	bic.w	r3, r3, #1
 801324e:	b2da      	uxtb	r2, r3
 8013250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013252:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8013256:	e000      	b.n	801325a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8013258:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801325a:	4b08      	ldr	r3, [pc, #32]	; (801327c <prvProcessReceivedCommands+0x1c0>)
 801325c:	681b      	ldr	r3, [r3, #0]
 801325e:	1d39      	adds	r1, r7, #4
 8013260:	2200      	movs	r2, #0
 8013262:	4618      	mov	r0, r3
 8013264:	f7fe fbac 	bl	80119c0 <xQueueReceive>
 8013268:	4603      	mov	r3, r0
 801326a:	2b00      	cmp	r3, #0
 801326c:	f47f af2a 	bne.w	80130c4 <prvProcessReceivedCommands+0x8>
	}
}
 8013270:	bf00      	nop
 8013272:	bf00      	nop
 8013274:	3730      	adds	r7, #48	; 0x30
 8013276:	46bd      	mov	sp, r7
 8013278:	bd80      	pop	{r7, pc}
 801327a:	bf00      	nop
 801327c:	240014bc 	.word	0x240014bc

08013280 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8013280:	b580      	push	{r7, lr}
 8013282:	b088      	sub	sp, #32
 8013284:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8013286:	e048      	b.n	801331a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013288:	4b2d      	ldr	r3, [pc, #180]	; (8013340 <prvSwitchTimerLists+0xc0>)
 801328a:	681b      	ldr	r3, [r3, #0]
 801328c:	68db      	ldr	r3, [r3, #12]
 801328e:	681b      	ldr	r3, [r3, #0]
 8013290:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013292:	4b2b      	ldr	r3, [pc, #172]	; (8013340 <prvSwitchTimerLists+0xc0>)
 8013294:	681b      	ldr	r3, [r3, #0]
 8013296:	68db      	ldr	r3, [r3, #12]
 8013298:	68db      	ldr	r3, [r3, #12]
 801329a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801329c:	68fb      	ldr	r3, [r7, #12]
 801329e:	3304      	adds	r3, #4
 80132a0:	4618      	mov	r0, r3
 80132a2:	f7fe f88b 	bl	80113bc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80132a6:	68fb      	ldr	r3, [r7, #12]
 80132a8:	6a1b      	ldr	r3, [r3, #32]
 80132aa:	68f8      	ldr	r0, [r7, #12]
 80132ac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80132ae:	68fb      	ldr	r3, [r7, #12]
 80132b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80132b4:	f003 0304 	and.w	r3, r3, #4
 80132b8:	2b00      	cmp	r3, #0
 80132ba:	d02e      	beq.n	801331a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80132bc:	68fb      	ldr	r3, [r7, #12]
 80132be:	699b      	ldr	r3, [r3, #24]
 80132c0:	693a      	ldr	r2, [r7, #16]
 80132c2:	4413      	add	r3, r2
 80132c4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80132c6:	68ba      	ldr	r2, [r7, #8]
 80132c8:	693b      	ldr	r3, [r7, #16]
 80132ca:	429a      	cmp	r2, r3
 80132cc:	d90e      	bls.n	80132ec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80132ce:	68fb      	ldr	r3, [r7, #12]
 80132d0:	68ba      	ldr	r2, [r7, #8]
 80132d2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80132d4:	68fb      	ldr	r3, [r7, #12]
 80132d6:	68fa      	ldr	r2, [r7, #12]
 80132d8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80132da:	4b19      	ldr	r3, [pc, #100]	; (8013340 <prvSwitchTimerLists+0xc0>)
 80132dc:	681a      	ldr	r2, [r3, #0]
 80132de:	68fb      	ldr	r3, [r7, #12]
 80132e0:	3304      	adds	r3, #4
 80132e2:	4619      	mov	r1, r3
 80132e4:	4610      	mov	r0, r2
 80132e6:	f7fe f830 	bl	801134a <vListInsert>
 80132ea:	e016      	b.n	801331a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80132ec:	2300      	movs	r3, #0
 80132ee:	9300      	str	r3, [sp, #0]
 80132f0:	2300      	movs	r3, #0
 80132f2:	693a      	ldr	r2, [r7, #16]
 80132f4:	2100      	movs	r1, #0
 80132f6:	68f8      	ldr	r0, [r7, #12]
 80132f8:	f7ff fd60 	bl	8012dbc <xTimerGenericCommand>
 80132fc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	2b00      	cmp	r3, #0
 8013302:	d10a      	bne.n	801331a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8013304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013308:	f383 8811 	msr	BASEPRI, r3
 801330c:	f3bf 8f6f 	isb	sy
 8013310:	f3bf 8f4f 	dsb	sy
 8013314:	603b      	str	r3, [r7, #0]
}
 8013316:	bf00      	nop
 8013318:	e7fe      	b.n	8013318 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801331a:	4b09      	ldr	r3, [pc, #36]	; (8013340 <prvSwitchTimerLists+0xc0>)
 801331c:	681b      	ldr	r3, [r3, #0]
 801331e:	681b      	ldr	r3, [r3, #0]
 8013320:	2b00      	cmp	r3, #0
 8013322:	d1b1      	bne.n	8013288 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8013324:	4b06      	ldr	r3, [pc, #24]	; (8013340 <prvSwitchTimerLists+0xc0>)
 8013326:	681b      	ldr	r3, [r3, #0]
 8013328:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801332a:	4b06      	ldr	r3, [pc, #24]	; (8013344 <prvSwitchTimerLists+0xc4>)
 801332c:	681b      	ldr	r3, [r3, #0]
 801332e:	4a04      	ldr	r2, [pc, #16]	; (8013340 <prvSwitchTimerLists+0xc0>)
 8013330:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8013332:	4a04      	ldr	r2, [pc, #16]	; (8013344 <prvSwitchTimerLists+0xc4>)
 8013334:	697b      	ldr	r3, [r7, #20]
 8013336:	6013      	str	r3, [r2, #0]
}
 8013338:	bf00      	nop
 801333a:	3718      	adds	r7, #24
 801333c:	46bd      	mov	sp, r7
 801333e:	bd80      	pop	{r7, pc}
 8013340:	240014b4 	.word	0x240014b4
 8013344:	240014b8 	.word	0x240014b8

08013348 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8013348:	b580      	push	{r7, lr}
 801334a:	b082      	sub	sp, #8
 801334c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801334e:	f000 f989 	bl	8013664 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8013352:	4b15      	ldr	r3, [pc, #84]	; (80133a8 <prvCheckForValidListAndQueue+0x60>)
 8013354:	681b      	ldr	r3, [r3, #0]
 8013356:	2b00      	cmp	r3, #0
 8013358:	d120      	bne.n	801339c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801335a:	4814      	ldr	r0, [pc, #80]	; (80133ac <prvCheckForValidListAndQueue+0x64>)
 801335c:	f7fd ffa4 	bl	80112a8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8013360:	4813      	ldr	r0, [pc, #76]	; (80133b0 <prvCheckForValidListAndQueue+0x68>)
 8013362:	f7fd ffa1 	bl	80112a8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8013366:	4b13      	ldr	r3, [pc, #76]	; (80133b4 <prvCheckForValidListAndQueue+0x6c>)
 8013368:	4a10      	ldr	r2, [pc, #64]	; (80133ac <prvCheckForValidListAndQueue+0x64>)
 801336a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801336c:	4b12      	ldr	r3, [pc, #72]	; (80133b8 <prvCheckForValidListAndQueue+0x70>)
 801336e:	4a10      	ldr	r2, [pc, #64]	; (80133b0 <prvCheckForValidListAndQueue+0x68>)
 8013370:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8013372:	2300      	movs	r3, #0
 8013374:	9300      	str	r3, [sp, #0]
 8013376:	4b11      	ldr	r3, [pc, #68]	; (80133bc <prvCheckForValidListAndQueue+0x74>)
 8013378:	4a11      	ldr	r2, [pc, #68]	; (80133c0 <prvCheckForValidListAndQueue+0x78>)
 801337a:	2110      	movs	r1, #16
 801337c:	200a      	movs	r0, #10
 801337e:	f7fe f8af 	bl	80114e0 <xQueueGenericCreateStatic>
 8013382:	4603      	mov	r3, r0
 8013384:	4a08      	ldr	r2, [pc, #32]	; (80133a8 <prvCheckForValidListAndQueue+0x60>)
 8013386:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8013388:	4b07      	ldr	r3, [pc, #28]	; (80133a8 <prvCheckForValidListAndQueue+0x60>)
 801338a:	681b      	ldr	r3, [r3, #0]
 801338c:	2b00      	cmp	r3, #0
 801338e:	d005      	beq.n	801339c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8013390:	4b05      	ldr	r3, [pc, #20]	; (80133a8 <prvCheckForValidListAndQueue+0x60>)
 8013392:	681b      	ldr	r3, [r3, #0]
 8013394:	490b      	ldr	r1, [pc, #44]	; (80133c4 <prvCheckForValidListAndQueue+0x7c>)
 8013396:	4618      	mov	r0, r3
 8013398:	f7fe fd02 	bl	8011da0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801339c:	f000 f992 	bl	80136c4 <vPortExitCritical>
}
 80133a0:	bf00      	nop
 80133a2:	46bd      	mov	sp, r7
 80133a4:	bd80      	pop	{r7, pc}
 80133a6:	bf00      	nop
 80133a8:	240014bc 	.word	0x240014bc
 80133ac:	2400148c 	.word	0x2400148c
 80133b0:	240014a0 	.word	0x240014a0
 80133b4:	240014b4 	.word	0x240014b4
 80133b8:	240014b8 	.word	0x240014b8
 80133bc:	24001568 	.word	0x24001568
 80133c0:	240014c8 	.word	0x240014c8
 80133c4:	08014948 	.word	0x08014948

080133c8 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80133c8:	b580      	push	{r7, lr}
 80133ca:	b08a      	sub	sp, #40	; 0x28
 80133cc:	af00      	add	r7, sp, #0
 80133ce:	60f8      	str	r0, [r7, #12]
 80133d0:	60b9      	str	r1, [r7, #8]
 80133d2:	607a      	str	r2, [r7, #4]
 80133d4:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 80133d6:	f06f 0301 	mvn.w	r3, #1
 80133da:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 80133dc:	68fb      	ldr	r3, [r7, #12]
 80133de:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 80133e0:	68bb      	ldr	r3, [r7, #8]
 80133e2:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80133e8:	4b06      	ldr	r3, [pc, #24]	; (8013404 <xTimerPendFunctionCallFromISR+0x3c>)
 80133ea:	6818      	ldr	r0, [r3, #0]
 80133ec:	f107 0114 	add.w	r1, r7, #20
 80133f0:	2300      	movs	r3, #0
 80133f2:	683a      	ldr	r2, [r7, #0]
 80133f4:	f7fe fa48 	bl	8011888 <xQueueGenericSendFromISR>
 80133f8:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 80133fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80133fc:	4618      	mov	r0, r3
 80133fe:	3728      	adds	r7, #40	; 0x28
 8013400:	46bd      	mov	sp, r7
 8013402:	bd80      	pop	{r7, pc}
 8013404:	240014bc 	.word	0x240014bc

08013408 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8013408:	b480      	push	{r7}
 801340a:	b085      	sub	sp, #20
 801340c:	af00      	add	r7, sp, #0
 801340e:	60f8      	str	r0, [r7, #12]
 8013410:	60b9      	str	r1, [r7, #8]
 8013412:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8013414:	68fb      	ldr	r3, [r7, #12]
 8013416:	3b04      	subs	r3, #4
 8013418:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801341a:	68fb      	ldr	r3, [r7, #12]
 801341c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8013420:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013422:	68fb      	ldr	r3, [r7, #12]
 8013424:	3b04      	subs	r3, #4
 8013426:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8013428:	68bb      	ldr	r3, [r7, #8]
 801342a:	f023 0201 	bic.w	r2, r3, #1
 801342e:	68fb      	ldr	r3, [r7, #12]
 8013430:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013432:	68fb      	ldr	r3, [r7, #12]
 8013434:	3b04      	subs	r3, #4
 8013436:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8013438:	4a0c      	ldr	r2, [pc, #48]	; (801346c <pxPortInitialiseStack+0x64>)
 801343a:	68fb      	ldr	r3, [r7, #12]
 801343c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801343e:	68fb      	ldr	r3, [r7, #12]
 8013440:	3b14      	subs	r3, #20
 8013442:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8013444:	687a      	ldr	r2, [r7, #4]
 8013446:	68fb      	ldr	r3, [r7, #12]
 8013448:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801344a:	68fb      	ldr	r3, [r7, #12]
 801344c:	3b04      	subs	r3, #4
 801344e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8013450:	68fb      	ldr	r3, [r7, #12]
 8013452:	f06f 0202 	mvn.w	r2, #2
 8013456:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8013458:	68fb      	ldr	r3, [r7, #12]
 801345a:	3b20      	subs	r3, #32
 801345c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801345e:	68fb      	ldr	r3, [r7, #12]
}
 8013460:	4618      	mov	r0, r3
 8013462:	3714      	adds	r7, #20
 8013464:	46bd      	mov	sp, r7
 8013466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801346a:	4770      	bx	lr
 801346c:	08013471 	.word	0x08013471

08013470 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8013470:	b480      	push	{r7}
 8013472:	b085      	sub	sp, #20
 8013474:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8013476:	2300      	movs	r3, #0
 8013478:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801347a:	4b12      	ldr	r3, [pc, #72]	; (80134c4 <prvTaskExitError+0x54>)
 801347c:	681b      	ldr	r3, [r3, #0]
 801347e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013482:	d00a      	beq.n	801349a <prvTaskExitError+0x2a>
	__asm volatile
 8013484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013488:	f383 8811 	msr	BASEPRI, r3
 801348c:	f3bf 8f6f 	isb	sy
 8013490:	f3bf 8f4f 	dsb	sy
 8013494:	60fb      	str	r3, [r7, #12]
}
 8013496:	bf00      	nop
 8013498:	e7fe      	b.n	8013498 <prvTaskExitError+0x28>
	__asm volatile
 801349a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801349e:	f383 8811 	msr	BASEPRI, r3
 80134a2:	f3bf 8f6f 	isb	sy
 80134a6:	f3bf 8f4f 	dsb	sy
 80134aa:	60bb      	str	r3, [r7, #8]
}
 80134ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80134ae:	bf00      	nop
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	d0fc      	beq.n	80134b0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80134b6:	bf00      	nop
 80134b8:	bf00      	nop
 80134ba:	3714      	adds	r7, #20
 80134bc:	46bd      	mov	sp, r7
 80134be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134c2:	4770      	bx	lr
 80134c4:	24000098 	.word	0x24000098
	...

080134d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80134d0:	4b07      	ldr	r3, [pc, #28]	; (80134f0 <pxCurrentTCBConst2>)
 80134d2:	6819      	ldr	r1, [r3, #0]
 80134d4:	6808      	ldr	r0, [r1, #0]
 80134d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134da:	f380 8809 	msr	PSP, r0
 80134de:	f3bf 8f6f 	isb	sy
 80134e2:	f04f 0000 	mov.w	r0, #0
 80134e6:	f380 8811 	msr	BASEPRI, r0
 80134ea:	4770      	bx	lr
 80134ec:	f3af 8000 	nop.w

080134f0 <pxCurrentTCBConst2>:
 80134f0:	24000f8c 	.word	0x24000f8c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80134f4:	bf00      	nop
 80134f6:	bf00      	nop

080134f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80134f8:	4808      	ldr	r0, [pc, #32]	; (801351c <prvPortStartFirstTask+0x24>)
 80134fa:	6800      	ldr	r0, [r0, #0]
 80134fc:	6800      	ldr	r0, [r0, #0]
 80134fe:	f380 8808 	msr	MSP, r0
 8013502:	f04f 0000 	mov.w	r0, #0
 8013506:	f380 8814 	msr	CONTROL, r0
 801350a:	b662      	cpsie	i
 801350c:	b661      	cpsie	f
 801350e:	f3bf 8f4f 	dsb	sy
 8013512:	f3bf 8f6f 	isb	sy
 8013516:	df00      	svc	0
 8013518:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801351a:	bf00      	nop
 801351c:	e000ed08 	.word	0xe000ed08

08013520 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8013520:	b580      	push	{r7, lr}
 8013522:	b086      	sub	sp, #24
 8013524:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8013526:	4b46      	ldr	r3, [pc, #280]	; (8013640 <xPortStartScheduler+0x120>)
 8013528:	681b      	ldr	r3, [r3, #0]
 801352a:	4a46      	ldr	r2, [pc, #280]	; (8013644 <xPortStartScheduler+0x124>)
 801352c:	4293      	cmp	r3, r2
 801352e:	d10a      	bne.n	8013546 <xPortStartScheduler+0x26>
	__asm volatile
 8013530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013534:	f383 8811 	msr	BASEPRI, r3
 8013538:	f3bf 8f6f 	isb	sy
 801353c:	f3bf 8f4f 	dsb	sy
 8013540:	613b      	str	r3, [r7, #16]
}
 8013542:	bf00      	nop
 8013544:	e7fe      	b.n	8013544 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8013546:	4b3e      	ldr	r3, [pc, #248]	; (8013640 <xPortStartScheduler+0x120>)
 8013548:	681b      	ldr	r3, [r3, #0]
 801354a:	4a3f      	ldr	r2, [pc, #252]	; (8013648 <xPortStartScheduler+0x128>)
 801354c:	4293      	cmp	r3, r2
 801354e:	d10a      	bne.n	8013566 <xPortStartScheduler+0x46>
	__asm volatile
 8013550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013554:	f383 8811 	msr	BASEPRI, r3
 8013558:	f3bf 8f6f 	isb	sy
 801355c:	f3bf 8f4f 	dsb	sy
 8013560:	60fb      	str	r3, [r7, #12]
}
 8013562:	bf00      	nop
 8013564:	e7fe      	b.n	8013564 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8013566:	4b39      	ldr	r3, [pc, #228]	; (801364c <xPortStartScheduler+0x12c>)
 8013568:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801356a:	697b      	ldr	r3, [r7, #20]
 801356c:	781b      	ldrb	r3, [r3, #0]
 801356e:	b2db      	uxtb	r3, r3
 8013570:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8013572:	697b      	ldr	r3, [r7, #20]
 8013574:	22ff      	movs	r2, #255	; 0xff
 8013576:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8013578:	697b      	ldr	r3, [r7, #20]
 801357a:	781b      	ldrb	r3, [r3, #0]
 801357c:	b2db      	uxtb	r3, r3
 801357e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8013580:	78fb      	ldrb	r3, [r7, #3]
 8013582:	b2db      	uxtb	r3, r3
 8013584:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8013588:	b2da      	uxtb	r2, r3
 801358a:	4b31      	ldr	r3, [pc, #196]	; (8013650 <xPortStartScheduler+0x130>)
 801358c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801358e:	4b31      	ldr	r3, [pc, #196]	; (8013654 <xPortStartScheduler+0x134>)
 8013590:	2207      	movs	r2, #7
 8013592:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013594:	e009      	b.n	80135aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8013596:	4b2f      	ldr	r3, [pc, #188]	; (8013654 <xPortStartScheduler+0x134>)
 8013598:	681b      	ldr	r3, [r3, #0]
 801359a:	3b01      	subs	r3, #1
 801359c:	4a2d      	ldr	r2, [pc, #180]	; (8013654 <xPortStartScheduler+0x134>)
 801359e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80135a0:	78fb      	ldrb	r3, [r7, #3]
 80135a2:	b2db      	uxtb	r3, r3
 80135a4:	005b      	lsls	r3, r3, #1
 80135a6:	b2db      	uxtb	r3, r3
 80135a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80135aa:	78fb      	ldrb	r3, [r7, #3]
 80135ac:	b2db      	uxtb	r3, r3
 80135ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80135b2:	2b80      	cmp	r3, #128	; 0x80
 80135b4:	d0ef      	beq.n	8013596 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80135b6:	4b27      	ldr	r3, [pc, #156]	; (8013654 <xPortStartScheduler+0x134>)
 80135b8:	681b      	ldr	r3, [r3, #0]
 80135ba:	f1c3 0307 	rsb	r3, r3, #7
 80135be:	2b04      	cmp	r3, #4
 80135c0:	d00a      	beq.n	80135d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80135c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135c6:	f383 8811 	msr	BASEPRI, r3
 80135ca:	f3bf 8f6f 	isb	sy
 80135ce:	f3bf 8f4f 	dsb	sy
 80135d2:	60bb      	str	r3, [r7, #8]
}
 80135d4:	bf00      	nop
 80135d6:	e7fe      	b.n	80135d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80135d8:	4b1e      	ldr	r3, [pc, #120]	; (8013654 <xPortStartScheduler+0x134>)
 80135da:	681b      	ldr	r3, [r3, #0]
 80135dc:	021b      	lsls	r3, r3, #8
 80135de:	4a1d      	ldr	r2, [pc, #116]	; (8013654 <xPortStartScheduler+0x134>)
 80135e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80135e2:	4b1c      	ldr	r3, [pc, #112]	; (8013654 <xPortStartScheduler+0x134>)
 80135e4:	681b      	ldr	r3, [r3, #0]
 80135e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80135ea:	4a1a      	ldr	r2, [pc, #104]	; (8013654 <xPortStartScheduler+0x134>)
 80135ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	b2da      	uxtb	r2, r3
 80135f2:	697b      	ldr	r3, [r7, #20]
 80135f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80135f6:	4b18      	ldr	r3, [pc, #96]	; (8013658 <xPortStartScheduler+0x138>)
 80135f8:	681b      	ldr	r3, [r3, #0]
 80135fa:	4a17      	ldr	r2, [pc, #92]	; (8013658 <xPortStartScheduler+0x138>)
 80135fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8013600:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8013602:	4b15      	ldr	r3, [pc, #84]	; (8013658 <xPortStartScheduler+0x138>)
 8013604:	681b      	ldr	r3, [r3, #0]
 8013606:	4a14      	ldr	r2, [pc, #80]	; (8013658 <xPortStartScheduler+0x138>)
 8013608:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801360c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801360e:	f000 f8dd 	bl	80137cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8013612:	4b12      	ldr	r3, [pc, #72]	; (801365c <xPortStartScheduler+0x13c>)
 8013614:	2200      	movs	r2, #0
 8013616:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8013618:	f000 f8fc 	bl	8013814 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801361c:	4b10      	ldr	r3, [pc, #64]	; (8013660 <xPortStartScheduler+0x140>)
 801361e:	681b      	ldr	r3, [r3, #0]
 8013620:	4a0f      	ldr	r2, [pc, #60]	; (8013660 <xPortStartScheduler+0x140>)
 8013622:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8013626:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8013628:	f7ff ff66 	bl	80134f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801362c:	f7fe ffd0 	bl	80125d0 <vTaskSwitchContext>
	prvTaskExitError();
 8013630:	f7ff ff1e 	bl	8013470 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8013634:	2300      	movs	r3, #0
}
 8013636:	4618      	mov	r0, r3
 8013638:	3718      	adds	r7, #24
 801363a:	46bd      	mov	sp, r7
 801363c:	bd80      	pop	{r7, pc}
 801363e:	bf00      	nop
 8013640:	e000ed00 	.word	0xe000ed00
 8013644:	410fc271 	.word	0x410fc271
 8013648:	410fc270 	.word	0x410fc270
 801364c:	e000e400 	.word	0xe000e400
 8013650:	240015b8 	.word	0x240015b8
 8013654:	240015bc 	.word	0x240015bc
 8013658:	e000ed20 	.word	0xe000ed20
 801365c:	24000098 	.word	0x24000098
 8013660:	e000ef34 	.word	0xe000ef34

08013664 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8013664:	b480      	push	{r7}
 8013666:	b083      	sub	sp, #12
 8013668:	af00      	add	r7, sp, #0
	__asm volatile
 801366a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801366e:	f383 8811 	msr	BASEPRI, r3
 8013672:	f3bf 8f6f 	isb	sy
 8013676:	f3bf 8f4f 	dsb	sy
 801367a:	607b      	str	r3, [r7, #4]
}
 801367c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801367e:	4b0f      	ldr	r3, [pc, #60]	; (80136bc <vPortEnterCritical+0x58>)
 8013680:	681b      	ldr	r3, [r3, #0]
 8013682:	3301      	adds	r3, #1
 8013684:	4a0d      	ldr	r2, [pc, #52]	; (80136bc <vPortEnterCritical+0x58>)
 8013686:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8013688:	4b0c      	ldr	r3, [pc, #48]	; (80136bc <vPortEnterCritical+0x58>)
 801368a:	681b      	ldr	r3, [r3, #0]
 801368c:	2b01      	cmp	r3, #1
 801368e:	d10f      	bne.n	80136b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8013690:	4b0b      	ldr	r3, [pc, #44]	; (80136c0 <vPortEnterCritical+0x5c>)
 8013692:	681b      	ldr	r3, [r3, #0]
 8013694:	b2db      	uxtb	r3, r3
 8013696:	2b00      	cmp	r3, #0
 8013698:	d00a      	beq.n	80136b0 <vPortEnterCritical+0x4c>
	__asm volatile
 801369a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801369e:	f383 8811 	msr	BASEPRI, r3
 80136a2:	f3bf 8f6f 	isb	sy
 80136a6:	f3bf 8f4f 	dsb	sy
 80136aa:	603b      	str	r3, [r7, #0]
}
 80136ac:	bf00      	nop
 80136ae:	e7fe      	b.n	80136ae <vPortEnterCritical+0x4a>
	}
}
 80136b0:	bf00      	nop
 80136b2:	370c      	adds	r7, #12
 80136b4:	46bd      	mov	sp, r7
 80136b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136ba:	4770      	bx	lr
 80136bc:	24000098 	.word	0x24000098
 80136c0:	e000ed04 	.word	0xe000ed04

080136c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80136c4:	b480      	push	{r7}
 80136c6:	b083      	sub	sp, #12
 80136c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80136ca:	4b12      	ldr	r3, [pc, #72]	; (8013714 <vPortExitCritical+0x50>)
 80136cc:	681b      	ldr	r3, [r3, #0]
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	d10a      	bne.n	80136e8 <vPortExitCritical+0x24>
	__asm volatile
 80136d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136d6:	f383 8811 	msr	BASEPRI, r3
 80136da:	f3bf 8f6f 	isb	sy
 80136de:	f3bf 8f4f 	dsb	sy
 80136e2:	607b      	str	r3, [r7, #4]
}
 80136e4:	bf00      	nop
 80136e6:	e7fe      	b.n	80136e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80136e8:	4b0a      	ldr	r3, [pc, #40]	; (8013714 <vPortExitCritical+0x50>)
 80136ea:	681b      	ldr	r3, [r3, #0]
 80136ec:	3b01      	subs	r3, #1
 80136ee:	4a09      	ldr	r2, [pc, #36]	; (8013714 <vPortExitCritical+0x50>)
 80136f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80136f2:	4b08      	ldr	r3, [pc, #32]	; (8013714 <vPortExitCritical+0x50>)
 80136f4:	681b      	ldr	r3, [r3, #0]
 80136f6:	2b00      	cmp	r3, #0
 80136f8:	d105      	bne.n	8013706 <vPortExitCritical+0x42>
 80136fa:	2300      	movs	r3, #0
 80136fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80136fe:	683b      	ldr	r3, [r7, #0]
 8013700:	f383 8811 	msr	BASEPRI, r3
}
 8013704:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8013706:	bf00      	nop
 8013708:	370c      	adds	r7, #12
 801370a:	46bd      	mov	sp, r7
 801370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013710:	4770      	bx	lr
 8013712:	bf00      	nop
 8013714:	24000098 	.word	0x24000098
	...

08013720 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8013720:	f3ef 8009 	mrs	r0, PSP
 8013724:	f3bf 8f6f 	isb	sy
 8013728:	4b15      	ldr	r3, [pc, #84]	; (8013780 <pxCurrentTCBConst>)
 801372a:	681a      	ldr	r2, [r3, #0]
 801372c:	f01e 0f10 	tst.w	lr, #16
 8013730:	bf08      	it	eq
 8013732:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8013736:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801373a:	6010      	str	r0, [r2, #0]
 801373c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8013740:	f04f 0050 	mov.w	r0, #80	; 0x50
 8013744:	f380 8811 	msr	BASEPRI, r0
 8013748:	f3bf 8f4f 	dsb	sy
 801374c:	f3bf 8f6f 	isb	sy
 8013750:	f7fe ff3e 	bl	80125d0 <vTaskSwitchContext>
 8013754:	f04f 0000 	mov.w	r0, #0
 8013758:	f380 8811 	msr	BASEPRI, r0
 801375c:	bc09      	pop	{r0, r3}
 801375e:	6819      	ldr	r1, [r3, #0]
 8013760:	6808      	ldr	r0, [r1, #0]
 8013762:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013766:	f01e 0f10 	tst.w	lr, #16
 801376a:	bf08      	it	eq
 801376c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8013770:	f380 8809 	msr	PSP, r0
 8013774:	f3bf 8f6f 	isb	sy
 8013778:	4770      	bx	lr
 801377a:	bf00      	nop
 801377c:	f3af 8000 	nop.w

08013780 <pxCurrentTCBConst>:
 8013780:	24000f8c 	.word	0x24000f8c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8013784:	bf00      	nop
 8013786:	bf00      	nop

08013788 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8013788:	b580      	push	{r7, lr}
 801378a:	b082      	sub	sp, #8
 801378c:	af00      	add	r7, sp, #0
	__asm volatile
 801378e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013792:	f383 8811 	msr	BASEPRI, r3
 8013796:	f3bf 8f6f 	isb	sy
 801379a:	f3bf 8f4f 	dsb	sy
 801379e:	607b      	str	r3, [r7, #4]
}
 80137a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80137a2:	f7fe fe53 	bl	801244c <xTaskIncrementTick>
 80137a6:	4603      	mov	r3, r0
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	d003      	beq.n	80137b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80137ac:	4b06      	ldr	r3, [pc, #24]	; (80137c8 <xPortSysTickHandler+0x40>)
 80137ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80137b2:	601a      	str	r2, [r3, #0]
 80137b4:	2300      	movs	r3, #0
 80137b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80137b8:	683b      	ldr	r3, [r7, #0]
 80137ba:	f383 8811 	msr	BASEPRI, r3
}
 80137be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80137c0:	bf00      	nop
 80137c2:	3708      	adds	r7, #8
 80137c4:	46bd      	mov	sp, r7
 80137c6:	bd80      	pop	{r7, pc}
 80137c8:	e000ed04 	.word	0xe000ed04

080137cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80137cc:	b480      	push	{r7}
 80137ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80137d0:	4b0b      	ldr	r3, [pc, #44]	; (8013800 <vPortSetupTimerInterrupt+0x34>)
 80137d2:	2200      	movs	r2, #0
 80137d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80137d6:	4b0b      	ldr	r3, [pc, #44]	; (8013804 <vPortSetupTimerInterrupt+0x38>)
 80137d8:	2200      	movs	r2, #0
 80137da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80137dc:	4b0a      	ldr	r3, [pc, #40]	; (8013808 <vPortSetupTimerInterrupt+0x3c>)
 80137de:	681b      	ldr	r3, [r3, #0]
 80137e0:	4a0a      	ldr	r2, [pc, #40]	; (801380c <vPortSetupTimerInterrupt+0x40>)
 80137e2:	fba2 2303 	umull	r2, r3, r2, r3
 80137e6:	099b      	lsrs	r3, r3, #6
 80137e8:	4a09      	ldr	r2, [pc, #36]	; (8013810 <vPortSetupTimerInterrupt+0x44>)
 80137ea:	3b01      	subs	r3, #1
 80137ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80137ee:	4b04      	ldr	r3, [pc, #16]	; (8013800 <vPortSetupTimerInterrupt+0x34>)
 80137f0:	2207      	movs	r2, #7
 80137f2:	601a      	str	r2, [r3, #0]
}
 80137f4:	bf00      	nop
 80137f6:	46bd      	mov	sp, r7
 80137f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137fc:	4770      	bx	lr
 80137fe:	bf00      	nop
 8013800:	e000e010 	.word	0xe000e010
 8013804:	e000e018 	.word	0xe000e018
 8013808:	24000088 	.word	0x24000088
 801380c:	10624dd3 	.word	0x10624dd3
 8013810:	e000e014 	.word	0xe000e014

08013814 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8013814:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8013824 <vPortEnableVFP+0x10>
 8013818:	6801      	ldr	r1, [r0, #0]
 801381a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801381e:	6001      	str	r1, [r0, #0]
 8013820:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8013822:	bf00      	nop
 8013824:	e000ed88 	.word	0xe000ed88

08013828 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8013828:	b480      	push	{r7}
 801382a:	b085      	sub	sp, #20
 801382c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801382e:	f3ef 8305 	mrs	r3, IPSR
 8013832:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8013834:	68fb      	ldr	r3, [r7, #12]
 8013836:	2b0f      	cmp	r3, #15
 8013838:	d914      	bls.n	8013864 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801383a:	4a17      	ldr	r2, [pc, #92]	; (8013898 <vPortValidateInterruptPriority+0x70>)
 801383c:	68fb      	ldr	r3, [r7, #12]
 801383e:	4413      	add	r3, r2
 8013840:	781b      	ldrb	r3, [r3, #0]
 8013842:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8013844:	4b15      	ldr	r3, [pc, #84]	; (801389c <vPortValidateInterruptPriority+0x74>)
 8013846:	781b      	ldrb	r3, [r3, #0]
 8013848:	7afa      	ldrb	r2, [r7, #11]
 801384a:	429a      	cmp	r2, r3
 801384c:	d20a      	bcs.n	8013864 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801384e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013852:	f383 8811 	msr	BASEPRI, r3
 8013856:	f3bf 8f6f 	isb	sy
 801385a:	f3bf 8f4f 	dsb	sy
 801385e:	607b      	str	r3, [r7, #4]
}
 8013860:	bf00      	nop
 8013862:	e7fe      	b.n	8013862 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8013864:	4b0e      	ldr	r3, [pc, #56]	; (80138a0 <vPortValidateInterruptPriority+0x78>)
 8013866:	681b      	ldr	r3, [r3, #0]
 8013868:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801386c:	4b0d      	ldr	r3, [pc, #52]	; (80138a4 <vPortValidateInterruptPriority+0x7c>)
 801386e:	681b      	ldr	r3, [r3, #0]
 8013870:	429a      	cmp	r2, r3
 8013872:	d90a      	bls.n	801388a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8013874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013878:	f383 8811 	msr	BASEPRI, r3
 801387c:	f3bf 8f6f 	isb	sy
 8013880:	f3bf 8f4f 	dsb	sy
 8013884:	603b      	str	r3, [r7, #0]
}
 8013886:	bf00      	nop
 8013888:	e7fe      	b.n	8013888 <vPortValidateInterruptPriority+0x60>
	}
 801388a:	bf00      	nop
 801388c:	3714      	adds	r7, #20
 801388e:	46bd      	mov	sp, r7
 8013890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013894:	4770      	bx	lr
 8013896:	bf00      	nop
 8013898:	e000e3f0 	.word	0xe000e3f0
 801389c:	240015b8 	.word	0x240015b8
 80138a0:	e000ed0c 	.word	0xe000ed0c
 80138a4:	240015bc 	.word	0x240015bc

080138a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80138a8:	b580      	push	{r7, lr}
 80138aa:	b08a      	sub	sp, #40	; 0x28
 80138ac:	af00      	add	r7, sp, #0
 80138ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80138b0:	2300      	movs	r3, #0
 80138b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80138b4:	f7fe fd0e 	bl	80122d4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80138b8:	4b5b      	ldr	r3, [pc, #364]	; (8013a28 <pvPortMalloc+0x180>)
 80138ba:	681b      	ldr	r3, [r3, #0]
 80138bc:	2b00      	cmp	r3, #0
 80138be:	d101      	bne.n	80138c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80138c0:	f000 f920 	bl	8013b04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80138c4:	4b59      	ldr	r3, [pc, #356]	; (8013a2c <pvPortMalloc+0x184>)
 80138c6:	681a      	ldr	r2, [r3, #0]
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	4013      	ands	r3, r2
 80138cc:	2b00      	cmp	r3, #0
 80138ce:	f040 8093 	bne.w	80139f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	2b00      	cmp	r3, #0
 80138d6:	d01d      	beq.n	8013914 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80138d8:	2208      	movs	r2, #8
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	4413      	add	r3, r2
 80138de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80138e0:	687b      	ldr	r3, [r7, #4]
 80138e2:	f003 0307 	and.w	r3, r3, #7
 80138e6:	2b00      	cmp	r3, #0
 80138e8:	d014      	beq.n	8013914 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80138ea:	687b      	ldr	r3, [r7, #4]
 80138ec:	f023 0307 	bic.w	r3, r3, #7
 80138f0:	3308      	adds	r3, #8
 80138f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	f003 0307 	and.w	r3, r3, #7
 80138fa:	2b00      	cmp	r3, #0
 80138fc:	d00a      	beq.n	8013914 <pvPortMalloc+0x6c>
	__asm volatile
 80138fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013902:	f383 8811 	msr	BASEPRI, r3
 8013906:	f3bf 8f6f 	isb	sy
 801390a:	f3bf 8f4f 	dsb	sy
 801390e:	617b      	str	r3, [r7, #20]
}
 8013910:	bf00      	nop
 8013912:	e7fe      	b.n	8013912 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	2b00      	cmp	r3, #0
 8013918:	d06e      	beq.n	80139f8 <pvPortMalloc+0x150>
 801391a:	4b45      	ldr	r3, [pc, #276]	; (8013a30 <pvPortMalloc+0x188>)
 801391c:	681b      	ldr	r3, [r3, #0]
 801391e:	687a      	ldr	r2, [r7, #4]
 8013920:	429a      	cmp	r2, r3
 8013922:	d869      	bhi.n	80139f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8013924:	4b43      	ldr	r3, [pc, #268]	; (8013a34 <pvPortMalloc+0x18c>)
 8013926:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8013928:	4b42      	ldr	r3, [pc, #264]	; (8013a34 <pvPortMalloc+0x18c>)
 801392a:	681b      	ldr	r3, [r3, #0]
 801392c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801392e:	e004      	b.n	801393a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8013930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013932:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8013934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013936:	681b      	ldr	r3, [r3, #0]
 8013938:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801393a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801393c:	685b      	ldr	r3, [r3, #4]
 801393e:	687a      	ldr	r2, [r7, #4]
 8013940:	429a      	cmp	r2, r3
 8013942:	d903      	bls.n	801394c <pvPortMalloc+0xa4>
 8013944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013946:	681b      	ldr	r3, [r3, #0]
 8013948:	2b00      	cmp	r3, #0
 801394a:	d1f1      	bne.n	8013930 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801394c:	4b36      	ldr	r3, [pc, #216]	; (8013a28 <pvPortMalloc+0x180>)
 801394e:	681b      	ldr	r3, [r3, #0]
 8013950:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013952:	429a      	cmp	r2, r3
 8013954:	d050      	beq.n	80139f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8013956:	6a3b      	ldr	r3, [r7, #32]
 8013958:	681b      	ldr	r3, [r3, #0]
 801395a:	2208      	movs	r2, #8
 801395c:	4413      	add	r3, r2
 801395e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8013960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013962:	681a      	ldr	r2, [r3, #0]
 8013964:	6a3b      	ldr	r3, [r7, #32]
 8013966:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8013968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801396a:	685a      	ldr	r2, [r3, #4]
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	1ad2      	subs	r2, r2, r3
 8013970:	2308      	movs	r3, #8
 8013972:	005b      	lsls	r3, r3, #1
 8013974:	429a      	cmp	r2, r3
 8013976:	d91f      	bls.n	80139b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8013978:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	4413      	add	r3, r2
 801397e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013980:	69bb      	ldr	r3, [r7, #24]
 8013982:	f003 0307 	and.w	r3, r3, #7
 8013986:	2b00      	cmp	r3, #0
 8013988:	d00a      	beq.n	80139a0 <pvPortMalloc+0xf8>
	__asm volatile
 801398a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801398e:	f383 8811 	msr	BASEPRI, r3
 8013992:	f3bf 8f6f 	isb	sy
 8013996:	f3bf 8f4f 	dsb	sy
 801399a:	613b      	str	r3, [r7, #16]
}
 801399c:	bf00      	nop
 801399e:	e7fe      	b.n	801399e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80139a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139a2:	685a      	ldr	r2, [r3, #4]
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	1ad2      	subs	r2, r2, r3
 80139a8:	69bb      	ldr	r3, [r7, #24]
 80139aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80139ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139ae:	687a      	ldr	r2, [r7, #4]
 80139b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80139b2:	69b8      	ldr	r0, [r7, #24]
 80139b4:	f000 f908 	bl	8013bc8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80139b8:	4b1d      	ldr	r3, [pc, #116]	; (8013a30 <pvPortMalloc+0x188>)
 80139ba:	681a      	ldr	r2, [r3, #0]
 80139bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139be:	685b      	ldr	r3, [r3, #4]
 80139c0:	1ad3      	subs	r3, r2, r3
 80139c2:	4a1b      	ldr	r2, [pc, #108]	; (8013a30 <pvPortMalloc+0x188>)
 80139c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80139c6:	4b1a      	ldr	r3, [pc, #104]	; (8013a30 <pvPortMalloc+0x188>)
 80139c8:	681a      	ldr	r2, [r3, #0]
 80139ca:	4b1b      	ldr	r3, [pc, #108]	; (8013a38 <pvPortMalloc+0x190>)
 80139cc:	681b      	ldr	r3, [r3, #0]
 80139ce:	429a      	cmp	r2, r3
 80139d0:	d203      	bcs.n	80139da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80139d2:	4b17      	ldr	r3, [pc, #92]	; (8013a30 <pvPortMalloc+0x188>)
 80139d4:	681b      	ldr	r3, [r3, #0]
 80139d6:	4a18      	ldr	r2, [pc, #96]	; (8013a38 <pvPortMalloc+0x190>)
 80139d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80139da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139dc:	685a      	ldr	r2, [r3, #4]
 80139de:	4b13      	ldr	r3, [pc, #76]	; (8013a2c <pvPortMalloc+0x184>)
 80139e0:	681b      	ldr	r3, [r3, #0]
 80139e2:	431a      	orrs	r2, r3
 80139e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80139e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139ea:	2200      	movs	r2, #0
 80139ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80139ee:	4b13      	ldr	r3, [pc, #76]	; (8013a3c <pvPortMalloc+0x194>)
 80139f0:	681b      	ldr	r3, [r3, #0]
 80139f2:	3301      	adds	r3, #1
 80139f4:	4a11      	ldr	r2, [pc, #68]	; (8013a3c <pvPortMalloc+0x194>)
 80139f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80139f8:	f7fe fc7a 	bl	80122f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80139fc:	69fb      	ldr	r3, [r7, #28]
 80139fe:	f003 0307 	and.w	r3, r3, #7
 8013a02:	2b00      	cmp	r3, #0
 8013a04:	d00a      	beq.n	8013a1c <pvPortMalloc+0x174>
	__asm volatile
 8013a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a0a:	f383 8811 	msr	BASEPRI, r3
 8013a0e:	f3bf 8f6f 	isb	sy
 8013a12:	f3bf 8f4f 	dsb	sy
 8013a16:	60fb      	str	r3, [r7, #12]
}
 8013a18:	bf00      	nop
 8013a1a:	e7fe      	b.n	8013a1a <pvPortMalloc+0x172>
	return pvReturn;
 8013a1c:	69fb      	ldr	r3, [r7, #28]
}
 8013a1e:	4618      	mov	r0, r3
 8013a20:	3728      	adds	r7, #40	; 0x28
 8013a22:	46bd      	mov	sp, r7
 8013a24:	bd80      	pop	{r7, pc}
 8013a26:	bf00      	nop
 8013a28:	240051c8 	.word	0x240051c8
 8013a2c:	240051dc 	.word	0x240051dc
 8013a30:	240051cc 	.word	0x240051cc
 8013a34:	240051c0 	.word	0x240051c0
 8013a38:	240051d0 	.word	0x240051d0
 8013a3c:	240051d4 	.word	0x240051d4

08013a40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8013a40:	b580      	push	{r7, lr}
 8013a42:	b086      	sub	sp, #24
 8013a44:	af00      	add	r7, sp, #0
 8013a46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8013a4c:	687b      	ldr	r3, [r7, #4]
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	d04d      	beq.n	8013aee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8013a52:	2308      	movs	r3, #8
 8013a54:	425b      	negs	r3, r3
 8013a56:	697a      	ldr	r2, [r7, #20]
 8013a58:	4413      	add	r3, r2
 8013a5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8013a5c:	697b      	ldr	r3, [r7, #20]
 8013a5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8013a60:	693b      	ldr	r3, [r7, #16]
 8013a62:	685a      	ldr	r2, [r3, #4]
 8013a64:	4b24      	ldr	r3, [pc, #144]	; (8013af8 <vPortFree+0xb8>)
 8013a66:	681b      	ldr	r3, [r3, #0]
 8013a68:	4013      	ands	r3, r2
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	d10a      	bne.n	8013a84 <vPortFree+0x44>
	__asm volatile
 8013a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a72:	f383 8811 	msr	BASEPRI, r3
 8013a76:	f3bf 8f6f 	isb	sy
 8013a7a:	f3bf 8f4f 	dsb	sy
 8013a7e:	60fb      	str	r3, [r7, #12]
}
 8013a80:	bf00      	nop
 8013a82:	e7fe      	b.n	8013a82 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8013a84:	693b      	ldr	r3, [r7, #16]
 8013a86:	681b      	ldr	r3, [r3, #0]
 8013a88:	2b00      	cmp	r3, #0
 8013a8a:	d00a      	beq.n	8013aa2 <vPortFree+0x62>
	__asm volatile
 8013a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a90:	f383 8811 	msr	BASEPRI, r3
 8013a94:	f3bf 8f6f 	isb	sy
 8013a98:	f3bf 8f4f 	dsb	sy
 8013a9c:	60bb      	str	r3, [r7, #8]
}
 8013a9e:	bf00      	nop
 8013aa0:	e7fe      	b.n	8013aa0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8013aa2:	693b      	ldr	r3, [r7, #16]
 8013aa4:	685a      	ldr	r2, [r3, #4]
 8013aa6:	4b14      	ldr	r3, [pc, #80]	; (8013af8 <vPortFree+0xb8>)
 8013aa8:	681b      	ldr	r3, [r3, #0]
 8013aaa:	4013      	ands	r3, r2
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	d01e      	beq.n	8013aee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8013ab0:	693b      	ldr	r3, [r7, #16]
 8013ab2:	681b      	ldr	r3, [r3, #0]
 8013ab4:	2b00      	cmp	r3, #0
 8013ab6:	d11a      	bne.n	8013aee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8013ab8:	693b      	ldr	r3, [r7, #16]
 8013aba:	685a      	ldr	r2, [r3, #4]
 8013abc:	4b0e      	ldr	r3, [pc, #56]	; (8013af8 <vPortFree+0xb8>)
 8013abe:	681b      	ldr	r3, [r3, #0]
 8013ac0:	43db      	mvns	r3, r3
 8013ac2:	401a      	ands	r2, r3
 8013ac4:	693b      	ldr	r3, [r7, #16]
 8013ac6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8013ac8:	f7fe fc04 	bl	80122d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8013acc:	693b      	ldr	r3, [r7, #16]
 8013ace:	685a      	ldr	r2, [r3, #4]
 8013ad0:	4b0a      	ldr	r3, [pc, #40]	; (8013afc <vPortFree+0xbc>)
 8013ad2:	681b      	ldr	r3, [r3, #0]
 8013ad4:	4413      	add	r3, r2
 8013ad6:	4a09      	ldr	r2, [pc, #36]	; (8013afc <vPortFree+0xbc>)
 8013ad8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8013ada:	6938      	ldr	r0, [r7, #16]
 8013adc:	f000 f874 	bl	8013bc8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8013ae0:	4b07      	ldr	r3, [pc, #28]	; (8013b00 <vPortFree+0xc0>)
 8013ae2:	681b      	ldr	r3, [r3, #0]
 8013ae4:	3301      	adds	r3, #1
 8013ae6:	4a06      	ldr	r2, [pc, #24]	; (8013b00 <vPortFree+0xc0>)
 8013ae8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8013aea:	f7fe fc01 	bl	80122f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8013aee:	bf00      	nop
 8013af0:	3718      	adds	r7, #24
 8013af2:	46bd      	mov	sp, r7
 8013af4:	bd80      	pop	{r7, pc}
 8013af6:	bf00      	nop
 8013af8:	240051dc 	.word	0x240051dc
 8013afc:	240051cc 	.word	0x240051cc
 8013b00:	240051d8 	.word	0x240051d8

08013b04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8013b04:	b480      	push	{r7}
 8013b06:	b085      	sub	sp, #20
 8013b08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8013b0a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8013b0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8013b10:	4b27      	ldr	r3, [pc, #156]	; (8013bb0 <prvHeapInit+0xac>)
 8013b12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8013b14:	68fb      	ldr	r3, [r7, #12]
 8013b16:	f003 0307 	and.w	r3, r3, #7
 8013b1a:	2b00      	cmp	r3, #0
 8013b1c:	d00c      	beq.n	8013b38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8013b1e:	68fb      	ldr	r3, [r7, #12]
 8013b20:	3307      	adds	r3, #7
 8013b22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013b24:	68fb      	ldr	r3, [r7, #12]
 8013b26:	f023 0307 	bic.w	r3, r3, #7
 8013b2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8013b2c:	68ba      	ldr	r2, [r7, #8]
 8013b2e:	68fb      	ldr	r3, [r7, #12]
 8013b30:	1ad3      	subs	r3, r2, r3
 8013b32:	4a1f      	ldr	r2, [pc, #124]	; (8013bb0 <prvHeapInit+0xac>)
 8013b34:	4413      	add	r3, r2
 8013b36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8013b38:	68fb      	ldr	r3, [r7, #12]
 8013b3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8013b3c:	4a1d      	ldr	r2, [pc, #116]	; (8013bb4 <prvHeapInit+0xb0>)
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8013b42:	4b1c      	ldr	r3, [pc, #112]	; (8013bb4 <prvHeapInit+0xb0>)
 8013b44:	2200      	movs	r2, #0
 8013b46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8013b48:	687b      	ldr	r3, [r7, #4]
 8013b4a:	68ba      	ldr	r2, [r7, #8]
 8013b4c:	4413      	add	r3, r2
 8013b4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8013b50:	2208      	movs	r2, #8
 8013b52:	68fb      	ldr	r3, [r7, #12]
 8013b54:	1a9b      	subs	r3, r3, r2
 8013b56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013b58:	68fb      	ldr	r3, [r7, #12]
 8013b5a:	f023 0307 	bic.w	r3, r3, #7
 8013b5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8013b60:	68fb      	ldr	r3, [r7, #12]
 8013b62:	4a15      	ldr	r2, [pc, #84]	; (8013bb8 <prvHeapInit+0xb4>)
 8013b64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8013b66:	4b14      	ldr	r3, [pc, #80]	; (8013bb8 <prvHeapInit+0xb4>)
 8013b68:	681b      	ldr	r3, [r3, #0]
 8013b6a:	2200      	movs	r2, #0
 8013b6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8013b6e:	4b12      	ldr	r3, [pc, #72]	; (8013bb8 <prvHeapInit+0xb4>)
 8013b70:	681b      	ldr	r3, [r3, #0]
 8013b72:	2200      	movs	r2, #0
 8013b74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8013b7a:	683b      	ldr	r3, [r7, #0]
 8013b7c:	68fa      	ldr	r2, [r7, #12]
 8013b7e:	1ad2      	subs	r2, r2, r3
 8013b80:	683b      	ldr	r3, [r7, #0]
 8013b82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8013b84:	4b0c      	ldr	r3, [pc, #48]	; (8013bb8 <prvHeapInit+0xb4>)
 8013b86:	681a      	ldr	r2, [r3, #0]
 8013b88:	683b      	ldr	r3, [r7, #0]
 8013b8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013b8c:	683b      	ldr	r3, [r7, #0]
 8013b8e:	685b      	ldr	r3, [r3, #4]
 8013b90:	4a0a      	ldr	r2, [pc, #40]	; (8013bbc <prvHeapInit+0xb8>)
 8013b92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013b94:	683b      	ldr	r3, [r7, #0]
 8013b96:	685b      	ldr	r3, [r3, #4]
 8013b98:	4a09      	ldr	r2, [pc, #36]	; (8013bc0 <prvHeapInit+0xbc>)
 8013b9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8013b9c:	4b09      	ldr	r3, [pc, #36]	; (8013bc4 <prvHeapInit+0xc0>)
 8013b9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8013ba2:	601a      	str	r2, [r3, #0]
}
 8013ba4:	bf00      	nop
 8013ba6:	3714      	adds	r7, #20
 8013ba8:	46bd      	mov	sp, r7
 8013baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bae:	4770      	bx	lr
 8013bb0:	240015c0 	.word	0x240015c0
 8013bb4:	240051c0 	.word	0x240051c0
 8013bb8:	240051c8 	.word	0x240051c8
 8013bbc:	240051d0 	.word	0x240051d0
 8013bc0:	240051cc 	.word	0x240051cc
 8013bc4:	240051dc 	.word	0x240051dc

08013bc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8013bc8:	b480      	push	{r7}
 8013bca:	b085      	sub	sp, #20
 8013bcc:	af00      	add	r7, sp, #0
 8013bce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8013bd0:	4b28      	ldr	r3, [pc, #160]	; (8013c74 <prvInsertBlockIntoFreeList+0xac>)
 8013bd2:	60fb      	str	r3, [r7, #12]
 8013bd4:	e002      	b.n	8013bdc <prvInsertBlockIntoFreeList+0x14>
 8013bd6:	68fb      	ldr	r3, [r7, #12]
 8013bd8:	681b      	ldr	r3, [r3, #0]
 8013bda:	60fb      	str	r3, [r7, #12]
 8013bdc:	68fb      	ldr	r3, [r7, #12]
 8013bde:	681b      	ldr	r3, [r3, #0]
 8013be0:	687a      	ldr	r2, [r7, #4]
 8013be2:	429a      	cmp	r2, r3
 8013be4:	d8f7      	bhi.n	8013bd6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8013be6:	68fb      	ldr	r3, [r7, #12]
 8013be8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8013bea:	68fb      	ldr	r3, [r7, #12]
 8013bec:	685b      	ldr	r3, [r3, #4]
 8013bee:	68ba      	ldr	r2, [r7, #8]
 8013bf0:	4413      	add	r3, r2
 8013bf2:	687a      	ldr	r2, [r7, #4]
 8013bf4:	429a      	cmp	r2, r3
 8013bf6:	d108      	bne.n	8013c0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8013bf8:	68fb      	ldr	r3, [r7, #12]
 8013bfa:	685a      	ldr	r2, [r3, #4]
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	685b      	ldr	r3, [r3, #4]
 8013c00:	441a      	add	r2, r3
 8013c02:	68fb      	ldr	r3, [r7, #12]
 8013c04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8013c06:	68fb      	ldr	r3, [r7, #12]
 8013c08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	685b      	ldr	r3, [r3, #4]
 8013c12:	68ba      	ldr	r2, [r7, #8]
 8013c14:	441a      	add	r2, r3
 8013c16:	68fb      	ldr	r3, [r7, #12]
 8013c18:	681b      	ldr	r3, [r3, #0]
 8013c1a:	429a      	cmp	r2, r3
 8013c1c:	d118      	bne.n	8013c50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8013c1e:	68fb      	ldr	r3, [r7, #12]
 8013c20:	681a      	ldr	r2, [r3, #0]
 8013c22:	4b15      	ldr	r3, [pc, #84]	; (8013c78 <prvInsertBlockIntoFreeList+0xb0>)
 8013c24:	681b      	ldr	r3, [r3, #0]
 8013c26:	429a      	cmp	r2, r3
 8013c28:	d00d      	beq.n	8013c46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8013c2a:	687b      	ldr	r3, [r7, #4]
 8013c2c:	685a      	ldr	r2, [r3, #4]
 8013c2e:	68fb      	ldr	r3, [r7, #12]
 8013c30:	681b      	ldr	r3, [r3, #0]
 8013c32:	685b      	ldr	r3, [r3, #4]
 8013c34:	441a      	add	r2, r3
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8013c3a:	68fb      	ldr	r3, [r7, #12]
 8013c3c:	681b      	ldr	r3, [r3, #0]
 8013c3e:	681a      	ldr	r2, [r3, #0]
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	601a      	str	r2, [r3, #0]
 8013c44:	e008      	b.n	8013c58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8013c46:	4b0c      	ldr	r3, [pc, #48]	; (8013c78 <prvInsertBlockIntoFreeList+0xb0>)
 8013c48:	681a      	ldr	r2, [r3, #0]
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	601a      	str	r2, [r3, #0]
 8013c4e:	e003      	b.n	8013c58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8013c50:	68fb      	ldr	r3, [r7, #12]
 8013c52:	681a      	ldr	r2, [r3, #0]
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8013c58:	68fa      	ldr	r2, [r7, #12]
 8013c5a:	687b      	ldr	r3, [r7, #4]
 8013c5c:	429a      	cmp	r2, r3
 8013c5e:	d002      	beq.n	8013c66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8013c60:	68fb      	ldr	r3, [r7, #12]
 8013c62:	687a      	ldr	r2, [r7, #4]
 8013c64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013c66:	bf00      	nop
 8013c68:	3714      	adds	r7, #20
 8013c6a:	46bd      	mov	sp, r7
 8013c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c70:	4770      	bx	lr
 8013c72:	bf00      	nop
 8013c74:	240051c0 	.word	0x240051c0
 8013c78:	240051c8 	.word	0x240051c8

08013c7c <__errno>:
 8013c7c:	4b01      	ldr	r3, [pc, #4]	; (8013c84 <__errno+0x8>)
 8013c7e:	6818      	ldr	r0, [r3, #0]
 8013c80:	4770      	bx	lr
 8013c82:	bf00      	nop
 8013c84:	2400009c 	.word	0x2400009c

08013c88 <__libc_init_array>:
 8013c88:	b570      	push	{r4, r5, r6, lr}
 8013c8a:	4d0d      	ldr	r5, [pc, #52]	; (8013cc0 <__libc_init_array+0x38>)
 8013c8c:	4c0d      	ldr	r4, [pc, #52]	; (8013cc4 <__libc_init_array+0x3c>)
 8013c8e:	1b64      	subs	r4, r4, r5
 8013c90:	10a4      	asrs	r4, r4, #2
 8013c92:	2600      	movs	r6, #0
 8013c94:	42a6      	cmp	r6, r4
 8013c96:	d109      	bne.n	8013cac <__libc_init_array+0x24>
 8013c98:	4d0b      	ldr	r5, [pc, #44]	; (8013cc8 <__libc_init_array+0x40>)
 8013c9a:	4c0c      	ldr	r4, [pc, #48]	; (8013ccc <__libc_init_array+0x44>)
 8013c9c:	f000 fd2c 	bl	80146f8 <_init>
 8013ca0:	1b64      	subs	r4, r4, r5
 8013ca2:	10a4      	asrs	r4, r4, #2
 8013ca4:	2600      	movs	r6, #0
 8013ca6:	42a6      	cmp	r6, r4
 8013ca8:	d105      	bne.n	8013cb6 <__libc_init_array+0x2e>
 8013caa:	bd70      	pop	{r4, r5, r6, pc}
 8013cac:	f855 3b04 	ldr.w	r3, [r5], #4
 8013cb0:	4798      	blx	r3
 8013cb2:	3601      	adds	r6, #1
 8013cb4:	e7ee      	b.n	8013c94 <__libc_init_array+0xc>
 8013cb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8013cba:	4798      	blx	r3
 8013cbc:	3601      	adds	r6, #1
 8013cbe:	e7f2      	b.n	8013ca6 <__libc_init_array+0x1e>
 8013cc0:	08014bac 	.word	0x08014bac
 8013cc4:	08014bac 	.word	0x08014bac
 8013cc8:	08014bac 	.word	0x08014bac
 8013ccc:	08014bb0 	.word	0x08014bb0

08013cd0 <memcpy>:
 8013cd0:	440a      	add	r2, r1
 8013cd2:	4291      	cmp	r1, r2
 8013cd4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8013cd8:	d100      	bne.n	8013cdc <memcpy+0xc>
 8013cda:	4770      	bx	lr
 8013cdc:	b510      	push	{r4, lr}
 8013cde:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013ce2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013ce6:	4291      	cmp	r1, r2
 8013ce8:	d1f9      	bne.n	8013cde <memcpy+0xe>
 8013cea:	bd10      	pop	{r4, pc}

08013cec <memset>:
 8013cec:	4402      	add	r2, r0
 8013cee:	4603      	mov	r3, r0
 8013cf0:	4293      	cmp	r3, r2
 8013cf2:	d100      	bne.n	8013cf6 <memset+0xa>
 8013cf4:	4770      	bx	lr
 8013cf6:	f803 1b01 	strb.w	r1, [r3], #1
 8013cfa:	e7f9      	b.n	8013cf0 <memset+0x4>

08013cfc <_puts_r>:
 8013cfc:	b570      	push	{r4, r5, r6, lr}
 8013cfe:	460e      	mov	r6, r1
 8013d00:	4605      	mov	r5, r0
 8013d02:	b118      	cbz	r0, 8013d0c <_puts_r+0x10>
 8013d04:	6983      	ldr	r3, [r0, #24]
 8013d06:	b90b      	cbnz	r3, 8013d0c <_puts_r+0x10>
 8013d08:	f000 fa48 	bl	801419c <__sinit>
 8013d0c:	69ab      	ldr	r3, [r5, #24]
 8013d0e:	68ac      	ldr	r4, [r5, #8]
 8013d10:	b913      	cbnz	r3, 8013d18 <_puts_r+0x1c>
 8013d12:	4628      	mov	r0, r5
 8013d14:	f000 fa42 	bl	801419c <__sinit>
 8013d18:	4b2c      	ldr	r3, [pc, #176]	; (8013dcc <_puts_r+0xd0>)
 8013d1a:	429c      	cmp	r4, r3
 8013d1c:	d120      	bne.n	8013d60 <_puts_r+0x64>
 8013d1e:	686c      	ldr	r4, [r5, #4]
 8013d20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013d22:	07db      	lsls	r3, r3, #31
 8013d24:	d405      	bmi.n	8013d32 <_puts_r+0x36>
 8013d26:	89a3      	ldrh	r3, [r4, #12]
 8013d28:	0598      	lsls	r0, r3, #22
 8013d2a:	d402      	bmi.n	8013d32 <_puts_r+0x36>
 8013d2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013d2e:	f000 fad3 	bl	80142d8 <__retarget_lock_acquire_recursive>
 8013d32:	89a3      	ldrh	r3, [r4, #12]
 8013d34:	0719      	lsls	r1, r3, #28
 8013d36:	d51d      	bpl.n	8013d74 <_puts_r+0x78>
 8013d38:	6923      	ldr	r3, [r4, #16]
 8013d3a:	b1db      	cbz	r3, 8013d74 <_puts_r+0x78>
 8013d3c:	3e01      	subs	r6, #1
 8013d3e:	68a3      	ldr	r3, [r4, #8]
 8013d40:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8013d44:	3b01      	subs	r3, #1
 8013d46:	60a3      	str	r3, [r4, #8]
 8013d48:	bb39      	cbnz	r1, 8013d9a <_puts_r+0x9e>
 8013d4a:	2b00      	cmp	r3, #0
 8013d4c:	da38      	bge.n	8013dc0 <_puts_r+0xc4>
 8013d4e:	4622      	mov	r2, r4
 8013d50:	210a      	movs	r1, #10
 8013d52:	4628      	mov	r0, r5
 8013d54:	f000 f848 	bl	8013de8 <__swbuf_r>
 8013d58:	3001      	adds	r0, #1
 8013d5a:	d011      	beq.n	8013d80 <_puts_r+0x84>
 8013d5c:	250a      	movs	r5, #10
 8013d5e:	e011      	b.n	8013d84 <_puts_r+0x88>
 8013d60:	4b1b      	ldr	r3, [pc, #108]	; (8013dd0 <_puts_r+0xd4>)
 8013d62:	429c      	cmp	r4, r3
 8013d64:	d101      	bne.n	8013d6a <_puts_r+0x6e>
 8013d66:	68ac      	ldr	r4, [r5, #8]
 8013d68:	e7da      	b.n	8013d20 <_puts_r+0x24>
 8013d6a:	4b1a      	ldr	r3, [pc, #104]	; (8013dd4 <_puts_r+0xd8>)
 8013d6c:	429c      	cmp	r4, r3
 8013d6e:	bf08      	it	eq
 8013d70:	68ec      	ldreq	r4, [r5, #12]
 8013d72:	e7d5      	b.n	8013d20 <_puts_r+0x24>
 8013d74:	4621      	mov	r1, r4
 8013d76:	4628      	mov	r0, r5
 8013d78:	f000 f888 	bl	8013e8c <__swsetup_r>
 8013d7c:	2800      	cmp	r0, #0
 8013d7e:	d0dd      	beq.n	8013d3c <_puts_r+0x40>
 8013d80:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8013d84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013d86:	07da      	lsls	r2, r3, #31
 8013d88:	d405      	bmi.n	8013d96 <_puts_r+0x9a>
 8013d8a:	89a3      	ldrh	r3, [r4, #12]
 8013d8c:	059b      	lsls	r3, r3, #22
 8013d8e:	d402      	bmi.n	8013d96 <_puts_r+0x9a>
 8013d90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013d92:	f000 faa2 	bl	80142da <__retarget_lock_release_recursive>
 8013d96:	4628      	mov	r0, r5
 8013d98:	bd70      	pop	{r4, r5, r6, pc}
 8013d9a:	2b00      	cmp	r3, #0
 8013d9c:	da04      	bge.n	8013da8 <_puts_r+0xac>
 8013d9e:	69a2      	ldr	r2, [r4, #24]
 8013da0:	429a      	cmp	r2, r3
 8013da2:	dc06      	bgt.n	8013db2 <_puts_r+0xb6>
 8013da4:	290a      	cmp	r1, #10
 8013da6:	d004      	beq.n	8013db2 <_puts_r+0xb6>
 8013da8:	6823      	ldr	r3, [r4, #0]
 8013daa:	1c5a      	adds	r2, r3, #1
 8013dac:	6022      	str	r2, [r4, #0]
 8013dae:	7019      	strb	r1, [r3, #0]
 8013db0:	e7c5      	b.n	8013d3e <_puts_r+0x42>
 8013db2:	4622      	mov	r2, r4
 8013db4:	4628      	mov	r0, r5
 8013db6:	f000 f817 	bl	8013de8 <__swbuf_r>
 8013dba:	3001      	adds	r0, #1
 8013dbc:	d1bf      	bne.n	8013d3e <_puts_r+0x42>
 8013dbe:	e7df      	b.n	8013d80 <_puts_r+0x84>
 8013dc0:	6823      	ldr	r3, [r4, #0]
 8013dc2:	250a      	movs	r5, #10
 8013dc4:	1c5a      	adds	r2, r3, #1
 8013dc6:	6022      	str	r2, [r4, #0]
 8013dc8:	701d      	strb	r5, [r3, #0]
 8013dca:	e7db      	b.n	8013d84 <_puts_r+0x88>
 8013dcc:	08014b64 	.word	0x08014b64
 8013dd0:	08014b84 	.word	0x08014b84
 8013dd4:	08014b44 	.word	0x08014b44

08013dd8 <puts>:
 8013dd8:	4b02      	ldr	r3, [pc, #8]	; (8013de4 <puts+0xc>)
 8013dda:	4601      	mov	r1, r0
 8013ddc:	6818      	ldr	r0, [r3, #0]
 8013dde:	f7ff bf8d 	b.w	8013cfc <_puts_r>
 8013de2:	bf00      	nop
 8013de4:	2400009c 	.word	0x2400009c

08013de8 <__swbuf_r>:
 8013de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013dea:	460e      	mov	r6, r1
 8013dec:	4614      	mov	r4, r2
 8013dee:	4605      	mov	r5, r0
 8013df0:	b118      	cbz	r0, 8013dfa <__swbuf_r+0x12>
 8013df2:	6983      	ldr	r3, [r0, #24]
 8013df4:	b90b      	cbnz	r3, 8013dfa <__swbuf_r+0x12>
 8013df6:	f000 f9d1 	bl	801419c <__sinit>
 8013dfa:	4b21      	ldr	r3, [pc, #132]	; (8013e80 <__swbuf_r+0x98>)
 8013dfc:	429c      	cmp	r4, r3
 8013dfe:	d12b      	bne.n	8013e58 <__swbuf_r+0x70>
 8013e00:	686c      	ldr	r4, [r5, #4]
 8013e02:	69a3      	ldr	r3, [r4, #24]
 8013e04:	60a3      	str	r3, [r4, #8]
 8013e06:	89a3      	ldrh	r3, [r4, #12]
 8013e08:	071a      	lsls	r2, r3, #28
 8013e0a:	d52f      	bpl.n	8013e6c <__swbuf_r+0x84>
 8013e0c:	6923      	ldr	r3, [r4, #16]
 8013e0e:	b36b      	cbz	r3, 8013e6c <__swbuf_r+0x84>
 8013e10:	6923      	ldr	r3, [r4, #16]
 8013e12:	6820      	ldr	r0, [r4, #0]
 8013e14:	1ac0      	subs	r0, r0, r3
 8013e16:	6963      	ldr	r3, [r4, #20]
 8013e18:	b2f6      	uxtb	r6, r6
 8013e1a:	4283      	cmp	r3, r0
 8013e1c:	4637      	mov	r7, r6
 8013e1e:	dc04      	bgt.n	8013e2a <__swbuf_r+0x42>
 8013e20:	4621      	mov	r1, r4
 8013e22:	4628      	mov	r0, r5
 8013e24:	f000 f926 	bl	8014074 <_fflush_r>
 8013e28:	bb30      	cbnz	r0, 8013e78 <__swbuf_r+0x90>
 8013e2a:	68a3      	ldr	r3, [r4, #8]
 8013e2c:	3b01      	subs	r3, #1
 8013e2e:	60a3      	str	r3, [r4, #8]
 8013e30:	6823      	ldr	r3, [r4, #0]
 8013e32:	1c5a      	adds	r2, r3, #1
 8013e34:	6022      	str	r2, [r4, #0]
 8013e36:	701e      	strb	r6, [r3, #0]
 8013e38:	6963      	ldr	r3, [r4, #20]
 8013e3a:	3001      	adds	r0, #1
 8013e3c:	4283      	cmp	r3, r0
 8013e3e:	d004      	beq.n	8013e4a <__swbuf_r+0x62>
 8013e40:	89a3      	ldrh	r3, [r4, #12]
 8013e42:	07db      	lsls	r3, r3, #31
 8013e44:	d506      	bpl.n	8013e54 <__swbuf_r+0x6c>
 8013e46:	2e0a      	cmp	r6, #10
 8013e48:	d104      	bne.n	8013e54 <__swbuf_r+0x6c>
 8013e4a:	4621      	mov	r1, r4
 8013e4c:	4628      	mov	r0, r5
 8013e4e:	f000 f911 	bl	8014074 <_fflush_r>
 8013e52:	b988      	cbnz	r0, 8013e78 <__swbuf_r+0x90>
 8013e54:	4638      	mov	r0, r7
 8013e56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013e58:	4b0a      	ldr	r3, [pc, #40]	; (8013e84 <__swbuf_r+0x9c>)
 8013e5a:	429c      	cmp	r4, r3
 8013e5c:	d101      	bne.n	8013e62 <__swbuf_r+0x7a>
 8013e5e:	68ac      	ldr	r4, [r5, #8]
 8013e60:	e7cf      	b.n	8013e02 <__swbuf_r+0x1a>
 8013e62:	4b09      	ldr	r3, [pc, #36]	; (8013e88 <__swbuf_r+0xa0>)
 8013e64:	429c      	cmp	r4, r3
 8013e66:	bf08      	it	eq
 8013e68:	68ec      	ldreq	r4, [r5, #12]
 8013e6a:	e7ca      	b.n	8013e02 <__swbuf_r+0x1a>
 8013e6c:	4621      	mov	r1, r4
 8013e6e:	4628      	mov	r0, r5
 8013e70:	f000 f80c 	bl	8013e8c <__swsetup_r>
 8013e74:	2800      	cmp	r0, #0
 8013e76:	d0cb      	beq.n	8013e10 <__swbuf_r+0x28>
 8013e78:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8013e7c:	e7ea      	b.n	8013e54 <__swbuf_r+0x6c>
 8013e7e:	bf00      	nop
 8013e80:	08014b64 	.word	0x08014b64
 8013e84:	08014b84 	.word	0x08014b84
 8013e88:	08014b44 	.word	0x08014b44

08013e8c <__swsetup_r>:
 8013e8c:	4b32      	ldr	r3, [pc, #200]	; (8013f58 <__swsetup_r+0xcc>)
 8013e8e:	b570      	push	{r4, r5, r6, lr}
 8013e90:	681d      	ldr	r5, [r3, #0]
 8013e92:	4606      	mov	r6, r0
 8013e94:	460c      	mov	r4, r1
 8013e96:	b125      	cbz	r5, 8013ea2 <__swsetup_r+0x16>
 8013e98:	69ab      	ldr	r3, [r5, #24]
 8013e9a:	b913      	cbnz	r3, 8013ea2 <__swsetup_r+0x16>
 8013e9c:	4628      	mov	r0, r5
 8013e9e:	f000 f97d 	bl	801419c <__sinit>
 8013ea2:	4b2e      	ldr	r3, [pc, #184]	; (8013f5c <__swsetup_r+0xd0>)
 8013ea4:	429c      	cmp	r4, r3
 8013ea6:	d10f      	bne.n	8013ec8 <__swsetup_r+0x3c>
 8013ea8:	686c      	ldr	r4, [r5, #4]
 8013eaa:	89a3      	ldrh	r3, [r4, #12]
 8013eac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013eb0:	0719      	lsls	r1, r3, #28
 8013eb2:	d42c      	bmi.n	8013f0e <__swsetup_r+0x82>
 8013eb4:	06dd      	lsls	r5, r3, #27
 8013eb6:	d411      	bmi.n	8013edc <__swsetup_r+0x50>
 8013eb8:	2309      	movs	r3, #9
 8013eba:	6033      	str	r3, [r6, #0]
 8013ebc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013ec0:	81a3      	strh	r3, [r4, #12]
 8013ec2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013ec6:	e03e      	b.n	8013f46 <__swsetup_r+0xba>
 8013ec8:	4b25      	ldr	r3, [pc, #148]	; (8013f60 <__swsetup_r+0xd4>)
 8013eca:	429c      	cmp	r4, r3
 8013ecc:	d101      	bne.n	8013ed2 <__swsetup_r+0x46>
 8013ece:	68ac      	ldr	r4, [r5, #8]
 8013ed0:	e7eb      	b.n	8013eaa <__swsetup_r+0x1e>
 8013ed2:	4b24      	ldr	r3, [pc, #144]	; (8013f64 <__swsetup_r+0xd8>)
 8013ed4:	429c      	cmp	r4, r3
 8013ed6:	bf08      	it	eq
 8013ed8:	68ec      	ldreq	r4, [r5, #12]
 8013eda:	e7e6      	b.n	8013eaa <__swsetup_r+0x1e>
 8013edc:	0758      	lsls	r0, r3, #29
 8013ede:	d512      	bpl.n	8013f06 <__swsetup_r+0x7a>
 8013ee0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013ee2:	b141      	cbz	r1, 8013ef6 <__swsetup_r+0x6a>
 8013ee4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013ee8:	4299      	cmp	r1, r3
 8013eea:	d002      	beq.n	8013ef2 <__swsetup_r+0x66>
 8013eec:	4630      	mov	r0, r6
 8013eee:	f000 fa5b 	bl	80143a8 <_free_r>
 8013ef2:	2300      	movs	r3, #0
 8013ef4:	6363      	str	r3, [r4, #52]	; 0x34
 8013ef6:	89a3      	ldrh	r3, [r4, #12]
 8013ef8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013efc:	81a3      	strh	r3, [r4, #12]
 8013efe:	2300      	movs	r3, #0
 8013f00:	6063      	str	r3, [r4, #4]
 8013f02:	6923      	ldr	r3, [r4, #16]
 8013f04:	6023      	str	r3, [r4, #0]
 8013f06:	89a3      	ldrh	r3, [r4, #12]
 8013f08:	f043 0308 	orr.w	r3, r3, #8
 8013f0c:	81a3      	strh	r3, [r4, #12]
 8013f0e:	6923      	ldr	r3, [r4, #16]
 8013f10:	b94b      	cbnz	r3, 8013f26 <__swsetup_r+0x9a>
 8013f12:	89a3      	ldrh	r3, [r4, #12]
 8013f14:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013f18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013f1c:	d003      	beq.n	8013f26 <__swsetup_r+0x9a>
 8013f1e:	4621      	mov	r1, r4
 8013f20:	4630      	mov	r0, r6
 8013f22:	f000 fa01 	bl	8014328 <__smakebuf_r>
 8013f26:	89a0      	ldrh	r0, [r4, #12]
 8013f28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013f2c:	f010 0301 	ands.w	r3, r0, #1
 8013f30:	d00a      	beq.n	8013f48 <__swsetup_r+0xbc>
 8013f32:	2300      	movs	r3, #0
 8013f34:	60a3      	str	r3, [r4, #8]
 8013f36:	6963      	ldr	r3, [r4, #20]
 8013f38:	425b      	negs	r3, r3
 8013f3a:	61a3      	str	r3, [r4, #24]
 8013f3c:	6923      	ldr	r3, [r4, #16]
 8013f3e:	b943      	cbnz	r3, 8013f52 <__swsetup_r+0xc6>
 8013f40:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013f44:	d1ba      	bne.n	8013ebc <__swsetup_r+0x30>
 8013f46:	bd70      	pop	{r4, r5, r6, pc}
 8013f48:	0781      	lsls	r1, r0, #30
 8013f4a:	bf58      	it	pl
 8013f4c:	6963      	ldrpl	r3, [r4, #20]
 8013f4e:	60a3      	str	r3, [r4, #8]
 8013f50:	e7f4      	b.n	8013f3c <__swsetup_r+0xb0>
 8013f52:	2000      	movs	r0, #0
 8013f54:	e7f7      	b.n	8013f46 <__swsetup_r+0xba>
 8013f56:	bf00      	nop
 8013f58:	2400009c 	.word	0x2400009c
 8013f5c:	08014b64 	.word	0x08014b64
 8013f60:	08014b84 	.word	0x08014b84
 8013f64:	08014b44 	.word	0x08014b44

08013f68 <__sflush_r>:
 8013f68:	898a      	ldrh	r2, [r1, #12]
 8013f6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f6e:	4605      	mov	r5, r0
 8013f70:	0710      	lsls	r0, r2, #28
 8013f72:	460c      	mov	r4, r1
 8013f74:	d458      	bmi.n	8014028 <__sflush_r+0xc0>
 8013f76:	684b      	ldr	r3, [r1, #4]
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	dc05      	bgt.n	8013f88 <__sflush_r+0x20>
 8013f7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	dc02      	bgt.n	8013f88 <__sflush_r+0x20>
 8013f82:	2000      	movs	r0, #0
 8013f84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013f8a:	2e00      	cmp	r6, #0
 8013f8c:	d0f9      	beq.n	8013f82 <__sflush_r+0x1a>
 8013f8e:	2300      	movs	r3, #0
 8013f90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013f94:	682f      	ldr	r7, [r5, #0]
 8013f96:	602b      	str	r3, [r5, #0]
 8013f98:	d032      	beq.n	8014000 <__sflush_r+0x98>
 8013f9a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013f9c:	89a3      	ldrh	r3, [r4, #12]
 8013f9e:	075a      	lsls	r2, r3, #29
 8013fa0:	d505      	bpl.n	8013fae <__sflush_r+0x46>
 8013fa2:	6863      	ldr	r3, [r4, #4]
 8013fa4:	1ac0      	subs	r0, r0, r3
 8013fa6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013fa8:	b10b      	cbz	r3, 8013fae <__sflush_r+0x46>
 8013faa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013fac:	1ac0      	subs	r0, r0, r3
 8013fae:	2300      	movs	r3, #0
 8013fb0:	4602      	mov	r2, r0
 8013fb2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013fb4:	6a21      	ldr	r1, [r4, #32]
 8013fb6:	4628      	mov	r0, r5
 8013fb8:	47b0      	blx	r6
 8013fba:	1c43      	adds	r3, r0, #1
 8013fbc:	89a3      	ldrh	r3, [r4, #12]
 8013fbe:	d106      	bne.n	8013fce <__sflush_r+0x66>
 8013fc0:	6829      	ldr	r1, [r5, #0]
 8013fc2:	291d      	cmp	r1, #29
 8013fc4:	d82c      	bhi.n	8014020 <__sflush_r+0xb8>
 8013fc6:	4a2a      	ldr	r2, [pc, #168]	; (8014070 <__sflush_r+0x108>)
 8013fc8:	40ca      	lsrs	r2, r1
 8013fca:	07d6      	lsls	r6, r2, #31
 8013fcc:	d528      	bpl.n	8014020 <__sflush_r+0xb8>
 8013fce:	2200      	movs	r2, #0
 8013fd0:	6062      	str	r2, [r4, #4]
 8013fd2:	04d9      	lsls	r1, r3, #19
 8013fd4:	6922      	ldr	r2, [r4, #16]
 8013fd6:	6022      	str	r2, [r4, #0]
 8013fd8:	d504      	bpl.n	8013fe4 <__sflush_r+0x7c>
 8013fda:	1c42      	adds	r2, r0, #1
 8013fdc:	d101      	bne.n	8013fe2 <__sflush_r+0x7a>
 8013fde:	682b      	ldr	r3, [r5, #0]
 8013fe0:	b903      	cbnz	r3, 8013fe4 <__sflush_r+0x7c>
 8013fe2:	6560      	str	r0, [r4, #84]	; 0x54
 8013fe4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013fe6:	602f      	str	r7, [r5, #0]
 8013fe8:	2900      	cmp	r1, #0
 8013fea:	d0ca      	beq.n	8013f82 <__sflush_r+0x1a>
 8013fec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013ff0:	4299      	cmp	r1, r3
 8013ff2:	d002      	beq.n	8013ffa <__sflush_r+0x92>
 8013ff4:	4628      	mov	r0, r5
 8013ff6:	f000 f9d7 	bl	80143a8 <_free_r>
 8013ffa:	2000      	movs	r0, #0
 8013ffc:	6360      	str	r0, [r4, #52]	; 0x34
 8013ffe:	e7c1      	b.n	8013f84 <__sflush_r+0x1c>
 8014000:	6a21      	ldr	r1, [r4, #32]
 8014002:	2301      	movs	r3, #1
 8014004:	4628      	mov	r0, r5
 8014006:	47b0      	blx	r6
 8014008:	1c41      	adds	r1, r0, #1
 801400a:	d1c7      	bne.n	8013f9c <__sflush_r+0x34>
 801400c:	682b      	ldr	r3, [r5, #0]
 801400e:	2b00      	cmp	r3, #0
 8014010:	d0c4      	beq.n	8013f9c <__sflush_r+0x34>
 8014012:	2b1d      	cmp	r3, #29
 8014014:	d001      	beq.n	801401a <__sflush_r+0xb2>
 8014016:	2b16      	cmp	r3, #22
 8014018:	d101      	bne.n	801401e <__sflush_r+0xb6>
 801401a:	602f      	str	r7, [r5, #0]
 801401c:	e7b1      	b.n	8013f82 <__sflush_r+0x1a>
 801401e:	89a3      	ldrh	r3, [r4, #12]
 8014020:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014024:	81a3      	strh	r3, [r4, #12]
 8014026:	e7ad      	b.n	8013f84 <__sflush_r+0x1c>
 8014028:	690f      	ldr	r7, [r1, #16]
 801402a:	2f00      	cmp	r7, #0
 801402c:	d0a9      	beq.n	8013f82 <__sflush_r+0x1a>
 801402e:	0793      	lsls	r3, r2, #30
 8014030:	680e      	ldr	r6, [r1, #0]
 8014032:	bf08      	it	eq
 8014034:	694b      	ldreq	r3, [r1, #20]
 8014036:	600f      	str	r7, [r1, #0]
 8014038:	bf18      	it	ne
 801403a:	2300      	movne	r3, #0
 801403c:	eba6 0807 	sub.w	r8, r6, r7
 8014040:	608b      	str	r3, [r1, #8]
 8014042:	f1b8 0f00 	cmp.w	r8, #0
 8014046:	dd9c      	ble.n	8013f82 <__sflush_r+0x1a>
 8014048:	6a21      	ldr	r1, [r4, #32]
 801404a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801404c:	4643      	mov	r3, r8
 801404e:	463a      	mov	r2, r7
 8014050:	4628      	mov	r0, r5
 8014052:	47b0      	blx	r6
 8014054:	2800      	cmp	r0, #0
 8014056:	dc06      	bgt.n	8014066 <__sflush_r+0xfe>
 8014058:	89a3      	ldrh	r3, [r4, #12]
 801405a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801405e:	81a3      	strh	r3, [r4, #12]
 8014060:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014064:	e78e      	b.n	8013f84 <__sflush_r+0x1c>
 8014066:	4407      	add	r7, r0
 8014068:	eba8 0800 	sub.w	r8, r8, r0
 801406c:	e7e9      	b.n	8014042 <__sflush_r+0xda>
 801406e:	bf00      	nop
 8014070:	20400001 	.word	0x20400001

08014074 <_fflush_r>:
 8014074:	b538      	push	{r3, r4, r5, lr}
 8014076:	690b      	ldr	r3, [r1, #16]
 8014078:	4605      	mov	r5, r0
 801407a:	460c      	mov	r4, r1
 801407c:	b913      	cbnz	r3, 8014084 <_fflush_r+0x10>
 801407e:	2500      	movs	r5, #0
 8014080:	4628      	mov	r0, r5
 8014082:	bd38      	pop	{r3, r4, r5, pc}
 8014084:	b118      	cbz	r0, 801408e <_fflush_r+0x1a>
 8014086:	6983      	ldr	r3, [r0, #24]
 8014088:	b90b      	cbnz	r3, 801408e <_fflush_r+0x1a>
 801408a:	f000 f887 	bl	801419c <__sinit>
 801408e:	4b14      	ldr	r3, [pc, #80]	; (80140e0 <_fflush_r+0x6c>)
 8014090:	429c      	cmp	r4, r3
 8014092:	d11b      	bne.n	80140cc <_fflush_r+0x58>
 8014094:	686c      	ldr	r4, [r5, #4]
 8014096:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801409a:	2b00      	cmp	r3, #0
 801409c:	d0ef      	beq.n	801407e <_fflush_r+0xa>
 801409e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80140a0:	07d0      	lsls	r0, r2, #31
 80140a2:	d404      	bmi.n	80140ae <_fflush_r+0x3a>
 80140a4:	0599      	lsls	r1, r3, #22
 80140a6:	d402      	bmi.n	80140ae <_fflush_r+0x3a>
 80140a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80140aa:	f000 f915 	bl	80142d8 <__retarget_lock_acquire_recursive>
 80140ae:	4628      	mov	r0, r5
 80140b0:	4621      	mov	r1, r4
 80140b2:	f7ff ff59 	bl	8013f68 <__sflush_r>
 80140b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80140b8:	07da      	lsls	r2, r3, #31
 80140ba:	4605      	mov	r5, r0
 80140bc:	d4e0      	bmi.n	8014080 <_fflush_r+0xc>
 80140be:	89a3      	ldrh	r3, [r4, #12]
 80140c0:	059b      	lsls	r3, r3, #22
 80140c2:	d4dd      	bmi.n	8014080 <_fflush_r+0xc>
 80140c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80140c6:	f000 f908 	bl	80142da <__retarget_lock_release_recursive>
 80140ca:	e7d9      	b.n	8014080 <_fflush_r+0xc>
 80140cc:	4b05      	ldr	r3, [pc, #20]	; (80140e4 <_fflush_r+0x70>)
 80140ce:	429c      	cmp	r4, r3
 80140d0:	d101      	bne.n	80140d6 <_fflush_r+0x62>
 80140d2:	68ac      	ldr	r4, [r5, #8]
 80140d4:	e7df      	b.n	8014096 <_fflush_r+0x22>
 80140d6:	4b04      	ldr	r3, [pc, #16]	; (80140e8 <_fflush_r+0x74>)
 80140d8:	429c      	cmp	r4, r3
 80140da:	bf08      	it	eq
 80140dc:	68ec      	ldreq	r4, [r5, #12]
 80140de:	e7da      	b.n	8014096 <_fflush_r+0x22>
 80140e0:	08014b64 	.word	0x08014b64
 80140e4:	08014b84 	.word	0x08014b84
 80140e8:	08014b44 	.word	0x08014b44

080140ec <std>:
 80140ec:	2300      	movs	r3, #0
 80140ee:	b510      	push	{r4, lr}
 80140f0:	4604      	mov	r4, r0
 80140f2:	e9c0 3300 	strd	r3, r3, [r0]
 80140f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80140fa:	6083      	str	r3, [r0, #8]
 80140fc:	8181      	strh	r1, [r0, #12]
 80140fe:	6643      	str	r3, [r0, #100]	; 0x64
 8014100:	81c2      	strh	r2, [r0, #14]
 8014102:	6183      	str	r3, [r0, #24]
 8014104:	4619      	mov	r1, r3
 8014106:	2208      	movs	r2, #8
 8014108:	305c      	adds	r0, #92	; 0x5c
 801410a:	f7ff fdef 	bl	8013cec <memset>
 801410e:	4b05      	ldr	r3, [pc, #20]	; (8014124 <std+0x38>)
 8014110:	6263      	str	r3, [r4, #36]	; 0x24
 8014112:	4b05      	ldr	r3, [pc, #20]	; (8014128 <std+0x3c>)
 8014114:	62a3      	str	r3, [r4, #40]	; 0x28
 8014116:	4b05      	ldr	r3, [pc, #20]	; (801412c <std+0x40>)
 8014118:	62e3      	str	r3, [r4, #44]	; 0x2c
 801411a:	4b05      	ldr	r3, [pc, #20]	; (8014130 <std+0x44>)
 801411c:	6224      	str	r4, [r4, #32]
 801411e:	6323      	str	r3, [r4, #48]	; 0x30
 8014120:	bd10      	pop	{r4, pc}
 8014122:	bf00      	nop
 8014124:	08014589 	.word	0x08014589
 8014128:	080145ab 	.word	0x080145ab
 801412c:	080145e3 	.word	0x080145e3
 8014130:	08014607 	.word	0x08014607

08014134 <_cleanup_r>:
 8014134:	4901      	ldr	r1, [pc, #4]	; (801413c <_cleanup_r+0x8>)
 8014136:	f000 b8af 	b.w	8014298 <_fwalk_reent>
 801413a:	bf00      	nop
 801413c:	08014075 	.word	0x08014075

08014140 <__sfmoreglue>:
 8014140:	b570      	push	{r4, r5, r6, lr}
 8014142:	2268      	movs	r2, #104	; 0x68
 8014144:	1e4d      	subs	r5, r1, #1
 8014146:	4355      	muls	r5, r2
 8014148:	460e      	mov	r6, r1
 801414a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801414e:	f000 f997 	bl	8014480 <_malloc_r>
 8014152:	4604      	mov	r4, r0
 8014154:	b140      	cbz	r0, 8014168 <__sfmoreglue+0x28>
 8014156:	2100      	movs	r1, #0
 8014158:	e9c0 1600 	strd	r1, r6, [r0]
 801415c:	300c      	adds	r0, #12
 801415e:	60a0      	str	r0, [r4, #8]
 8014160:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014164:	f7ff fdc2 	bl	8013cec <memset>
 8014168:	4620      	mov	r0, r4
 801416a:	bd70      	pop	{r4, r5, r6, pc}

0801416c <__sfp_lock_acquire>:
 801416c:	4801      	ldr	r0, [pc, #4]	; (8014174 <__sfp_lock_acquire+0x8>)
 801416e:	f000 b8b3 	b.w	80142d8 <__retarget_lock_acquire_recursive>
 8014172:	bf00      	nop
 8014174:	240051e1 	.word	0x240051e1

08014178 <__sfp_lock_release>:
 8014178:	4801      	ldr	r0, [pc, #4]	; (8014180 <__sfp_lock_release+0x8>)
 801417a:	f000 b8ae 	b.w	80142da <__retarget_lock_release_recursive>
 801417e:	bf00      	nop
 8014180:	240051e1 	.word	0x240051e1

08014184 <__sinit_lock_acquire>:
 8014184:	4801      	ldr	r0, [pc, #4]	; (801418c <__sinit_lock_acquire+0x8>)
 8014186:	f000 b8a7 	b.w	80142d8 <__retarget_lock_acquire_recursive>
 801418a:	bf00      	nop
 801418c:	240051e2 	.word	0x240051e2

08014190 <__sinit_lock_release>:
 8014190:	4801      	ldr	r0, [pc, #4]	; (8014198 <__sinit_lock_release+0x8>)
 8014192:	f000 b8a2 	b.w	80142da <__retarget_lock_release_recursive>
 8014196:	bf00      	nop
 8014198:	240051e2 	.word	0x240051e2

0801419c <__sinit>:
 801419c:	b510      	push	{r4, lr}
 801419e:	4604      	mov	r4, r0
 80141a0:	f7ff fff0 	bl	8014184 <__sinit_lock_acquire>
 80141a4:	69a3      	ldr	r3, [r4, #24]
 80141a6:	b11b      	cbz	r3, 80141b0 <__sinit+0x14>
 80141a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80141ac:	f7ff bff0 	b.w	8014190 <__sinit_lock_release>
 80141b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80141b4:	6523      	str	r3, [r4, #80]	; 0x50
 80141b6:	4b13      	ldr	r3, [pc, #76]	; (8014204 <__sinit+0x68>)
 80141b8:	4a13      	ldr	r2, [pc, #76]	; (8014208 <__sinit+0x6c>)
 80141ba:	681b      	ldr	r3, [r3, #0]
 80141bc:	62a2      	str	r2, [r4, #40]	; 0x28
 80141be:	42a3      	cmp	r3, r4
 80141c0:	bf04      	itt	eq
 80141c2:	2301      	moveq	r3, #1
 80141c4:	61a3      	streq	r3, [r4, #24]
 80141c6:	4620      	mov	r0, r4
 80141c8:	f000 f820 	bl	801420c <__sfp>
 80141cc:	6060      	str	r0, [r4, #4]
 80141ce:	4620      	mov	r0, r4
 80141d0:	f000 f81c 	bl	801420c <__sfp>
 80141d4:	60a0      	str	r0, [r4, #8]
 80141d6:	4620      	mov	r0, r4
 80141d8:	f000 f818 	bl	801420c <__sfp>
 80141dc:	2200      	movs	r2, #0
 80141de:	60e0      	str	r0, [r4, #12]
 80141e0:	2104      	movs	r1, #4
 80141e2:	6860      	ldr	r0, [r4, #4]
 80141e4:	f7ff ff82 	bl	80140ec <std>
 80141e8:	68a0      	ldr	r0, [r4, #8]
 80141ea:	2201      	movs	r2, #1
 80141ec:	2109      	movs	r1, #9
 80141ee:	f7ff ff7d 	bl	80140ec <std>
 80141f2:	68e0      	ldr	r0, [r4, #12]
 80141f4:	2202      	movs	r2, #2
 80141f6:	2112      	movs	r1, #18
 80141f8:	f7ff ff78 	bl	80140ec <std>
 80141fc:	2301      	movs	r3, #1
 80141fe:	61a3      	str	r3, [r4, #24]
 8014200:	e7d2      	b.n	80141a8 <__sinit+0xc>
 8014202:	bf00      	nop
 8014204:	08014b40 	.word	0x08014b40
 8014208:	08014135 	.word	0x08014135

0801420c <__sfp>:
 801420c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801420e:	4607      	mov	r7, r0
 8014210:	f7ff ffac 	bl	801416c <__sfp_lock_acquire>
 8014214:	4b1e      	ldr	r3, [pc, #120]	; (8014290 <__sfp+0x84>)
 8014216:	681e      	ldr	r6, [r3, #0]
 8014218:	69b3      	ldr	r3, [r6, #24]
 801421a:	b913      	cbnz	r3, 8014222 <__sfp+0x16>
 801421c:	4630      	mov	r0, r6
 801421e:	f7ff ffbd 	bl	801419c <__sinit>
 8014222:	3648      	adds	r6, #72	; 0x48
 8014224:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014228:	3b01      	subs	r3, #1
 801422a:	d503      	bpl.n	8014234 <__sfp+0x28>
 801422c:	6833      	ldr	r3, [r6, #0]
 801422e:	b30b      	cbz	r3, 8014274 <__sfp+0x68>
 8014230:	6836      	ldr	r6, [r6, #0]
 8014232:	e7f7      	b.n	8014224 <__sfp+0x18>
 8014234:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014238:	b9d5      	cbnz	r5, 8014270 <__sfp+0x64>
 801423a:	4b16      	ldr	r3, [pc, #88]	; (8014294 <__sfp+0x88>)
 801423c:	60e3      	str	r3, [r4, #12]
 801423e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014242:	6665      	str	r5, [r4, #100]	; 0x64
 8014244:	f000 f847 	bl	80142d6 <__retarget_lock_init_recursive>
 8014248:	f7ff ff96 	bl	8014178 <__sfp_lock_release>
 801424c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014250:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014254:	6025      	str	r5, [r4, #0]
 8014256:	61a5      	str	r5, [r4, #24]
 8014258:	2208      	movs	r2, #8
 801425a:	4629      	mov	r1, r5
 801425c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014260:	f7ff fd44 	bl	8013cec <memset>
 8014264:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014268:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801426c:	4620      	mov	r0, r4
 801426e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014270:	3468      	adds	r4, #104	; 0x68
 8014272:	e7d9      	b.n	8014228 <__sfp+0x1c>
 8014274:	2104      	movs	r1, #4
 8014276:	4638      	mov	r0, r7
 8014278:	f7ff ff62 	bl	8014140 <__sfmoreglue>
 801427c:	4604      	mov	r4, r0
 801427e:	6030      	str	r0, [r6, #0]
 8014280:	2800      	cmp	r0, #0
 8014282:	d1d5      	bne.n	8014230 <__sfp+0x24>
 8014284:	f7ff ff78 	bl	8014178 <__sfp_lock_release>
 8014288:	230c      	movs	r3, #12
 801428a:	603b      	str	r3, [r7, #0]
 801428c:	e7ee      	b.n	801426c <__sfp+0x60>
 801428e:	bf00      	nop
 8014290:	08014b40 	.word	0x08014b40
 8014294:	ffff0001 	.word	0xffff0001

08014298 <_fwalk_reent>:
 8014298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801429c:	4606      	mov	r6, r0
 801429e:	4688      	mov	r8, r1
 80142a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80142a4:	2700      	movs	r7, #0
 80142a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80142aa:	f1b9 0901 	subs.w	r9, r9, #1
 80142ae:	d505      	bpl.n	80142bc <_fwalk_reent+0x24>
 80142b0:	6824      	ldr	r4, [r4, #0]
 80142b2:	2c00      	cmp	r4, #0
 80142b4:	d1f7      	bne.n	80142a6 <_fwalk_reent+0xe>
 80142b6:	4638      	mov	r0, r7
 80142b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80142bc:	89ab      	ldrh	r3, [r5, #12]
 80142be:	2b01      	cmp	r3, #1
 80142c0:	d907      	bls.n	80142d2 <_fwalk_reent+0x3a>
 80142c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80142c6:	3301      	adds	r3, #1
 80142c8:	d003      	beq.n	80142d2 <_fwalk_reent+0x3a>
 80142ca:	4629      	mov	r1, r5
 80142cc:	4630      	mov	r0, r6
 80142ce:	47c0      	blx	r8
 80142d0:	4307      	orrs	r7, r0
 80142d2:	3568      	adds	r5, #104	; 0x68
 80142d4:	e7e9      	b.n	80142aa <_fwalk_reent+0x12>

080142d6 <__retarget_lock_init_recursive>:
 80142d6:	4770      	bx	lr

080142d8 <__retarget_lock_acquire_recursive>:
 80142d8:	4770      	bx	lr

080142da <__retarget_lock_release_recursive>:
 80142da:	4770      	bx	lr

080142dc <__swhatbuf_r>:
 80142dc:	b570      	push	{r4, r5, r6, lr}
 80142de:	460e      	mov	r6, r1
 80142e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80142e4:	2900      	cmp	r1, #0
 80142e6:	b096      	sub	sp, #88	; 0x58
 80142e8:	4614      	mov	r4, r2
 80142ea:	461d      	mov	r5, r3
 80142ec:	da08      	bge.n	8014300 <__swhatbuf_r+0x24>
 80142ee:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80142f2:	2200      	movs	r2, #0
 80142f4:	602a      	str	r2, [r5, #0]
 80142f6:	061a      	lsls	r2, r3, #24
 80142f8:	d410      	bmi.n	801431c <__swhatbuf_r+0x40>
 80142fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80142fe:	e00e      	b.n	801431e <__swhatbuf_r+0x42>
 8014300:	466a      	mov	r2, sp
 8014302:	f000 f9a7 	bl	8014654 <_fstat_r>
 8014306:	2800      	cmp	r0, #0
 8014308:	dbf1      	blt.n	80142ee <__swhatbuf_r+0x12>
 801430a:	9a01      	ldr	r2, [sp, #4]
 801430c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014310:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014314:	425a      	negs	r2, r3
 8014316:	415a      	adcs	r2, r3
 8014318:	602a      	str	r2, [r5, #0]
 801431a:	e7ee      	b.n	80142fa <__swhatbuf_r+0x1e>
 801431c:	2340      	movs	r3, #64	; 0x40
 801431e:	2000      	movs	r0, #0
 8014320:	6023      	str	r3, [r4, #0]
 8014322:	b016      	add	sp, #88	; 0x58
 8014324:	bd70      	pop	{r4, r5, r6, pc}
	...

08014328 <__smakebuf_r>:
 8014328:	898b      	ldrh	r3, [r1, #12]
 801432a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801432c:	079d      	lsls	r5, r3, #30
 801432e:	4606      	mov	r6, r0
 8014330:	460c      	mov	r4, r1
 8014332:	d507      	bpl.n	8014344 <__smakebuf_r+0x1c>
 8014334:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014338:	6023      	str	r3, [r4, #0]
 801433a:	6123      	str	r3, [r4, #16]
 801433c:	2301      	movs	r3, #1
 801433e:	6163      	str	r3, [r4, #20]
 8014340:	b002      	add	sp, #8
 8014342:	bd70      	pop	{r4, r5, r6, pc}
 8014344:	ab01      	add	r3, sp, #4
 8014346:	466a      	mov	r2, sp
 8014348:	f7ff ffc8 	bl	80142dc <__swhatbuf_r>
 801434c:	9900      	ldr	r1, [sp, #0]
 801434e:	4605      	mov	r5, r0
 8014350:	4630      	mov	r0, r6
 8014352:	f000 f895 	bl	8014480 <_malloc_r>
 8014356:	b948      	cbnz	r0, 801436c <__smakebuf_r+0x44>
 8014358:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801435c:	059a      	lsls	r2, r3, #22
 801435e:	d4ef      	bmi.n	8014340 <__smakebuf_r+0x18>
 8014360:	f023 0303 	bic.w	r3, r3, #3
 8014364:	f043 0302 	orr.w	r3, r3, #2
 8014368:	81a3      	strh	r3, [r4, #12]
 801436a:	e7e3      	b.n	8014334 <__smakebuf_r+0xc>
 801436c:	4b0d      	ldr	r3, [pc, #52]	; (80143a4 <__smakebuf_r+0x7c>)
 801436e:	62b3      	str	r3, [r6, #40]	; 0x28
 8014370:	89a3      	ldrh	r3, [r4, #12]
 8014372:	6020      	str	r0, [r4, #0]
 8014374:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014378:	81a3      	strh	r3, [r4, #12]
 801437a:	9b00      	ldr	r3, [sp, #0]
 801437c:	6163      	str	r3, [r4, #20]
 801437e:	9b01      	ldr	r3, [sp, #4]
 8014380:	6120      	str	r0, [r4, #16]
 8014382:	b15b      	cbz	r3, 801439c <__smakebuf_r+0x74>
 8014384:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014388:	4630      	mov	r0, r6
 801438a:	f000 f975 	bl	8014678 <_isatty_r>
 801438e:	b128      	cbz	r0, 801439c <__smakebuf_r+0x74>
 8014390:	89a3      	ldrh	r3, [r4, #12]
 8014392:	f023 0303 	bic.w	r3, r3, #3
 8014396:	f043 0301 	orr.w	r3, r3, #1
 801439a:	81a3      	strh	r3, [r4, #12]
 801439c:	89a0      	ldrh	r0, [r4, #12]
 801439e:	4305      	orrs	r5, r0
 80143a0:	81a5      	strh	r5, [r4, #12]
 80143a2:	e7cd      	b.n	8014340 <__smakebuf_r+0x18>
 80143a4:	08014135 	.word	0x08014135

080143a8 <_free_r>:
 80143a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80143aa:	2900      	cmp	r1, #0
 80143ac:	d044      	beq.n	8014438 <_free_r+0x90>
 80143ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80143b2:	9001      	str	r0, [sp, #4]
 80143b4:	2b00      	cmp	r3, #0
 80143b6:	f1a1 0404 	sub.w	r4, r1, #4
 80143ba:	bfb8      	it	lt
 80143bc:	18e4      	addlt	r4, r4, r3
 80143be:	f000 f97d 	bl	80146bc <__malloc_lock>
 80143c2:	4a1e      	ldr	r2, [pc, #120]	; (801443c <_free_r+0x94>)
 80143c4:	9801      	ldr	r0, [sp, #4]
 80143c6:	6813      	ldr	r3, [r2, #0]
 80143c8:	b933      	cbnz	r3, 80143d8 <_free_r+0x30>
 80143ca:	6063      	str	r3, [r4, #4]
 80143cc:	6014      	str	r4, [r2, #0]
 80143ce:	b003      	add	sp, #12
 80143d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80143d4:	f000 b978 	b.w	80146c8 <__malloc_unlock>
 80143d8:	42a3      	cmp	r3, r4
 80143da:	d908      	bls.n	80143ee <_free_r+0x46>
 80143dc:	6825      	ldr	r5, [r4, #0]
 80143de:	1961      	adds	r1, r4, r5
 80143e0:	428b      	cmp	r3, r1
 80143e2:	bf01      	itttt	eq
 80143e4:	6819      	ldreq	r1, [r3, #0]
 80143e6:	685b      	ldreq	r3, [r3, #4]
 80143e8:	1949      	addeq	r1, r1, r5
 80143ea:	6021      	streq	r1, [r4, #0]
 80143ec:	e7ed      	b.n	80143ca <_free_r+0x22>
 80143ee:	461a      	mov	r2, r3
 80143f0:	685b      	ldr	r3, [r3, #4]
 80143f2:	b10b      	cbz	r3, 80143f8 <_free_r+0x50>
 80143f4:	42a3      	cmp	r3, r4
 80143f6:	d9fa      	bls.n	80143ee <_free_r+0x46>
 80143f8:	6811      	ldr	r1, [r2, #0]
 80143fa:	1855      	adds	r5, r2, r1
 80143fc:	42a5      	cmp	r5, r4
 80143fe:	d10b      	bne.n	8014418 <_free_r+0x70>
 8014400:	6824      	ldr	r4, [r4, #0]
 8014402:	4421      	add	r1, r4
 8014404:	1854      	adds	r4, r2, r1
 8014406:	42a3      	cmp	r3, r4
 8014408:	6011      	str	r1, [r2, #0]
 801440a:	d1e0      	bne.n	80143ce <_free_r+0x26>
 801440c:	681c      	ldr	r4, [r3, #0]
 801440e:	685b      	ldr	r3, [r3, #4]
 8014410:	6053      	str	r3, [r2, #4]
 8014412:	4421      	add	r1, r4
 8014414:	6011      	str	r1, [r2, #0]
 8014416:	e7da      	b.n	80143ce <_free_r+0x26>
 8014418:	d902      	bls.n	8014420 <_free_r+0x78>
 801441a:	230c      	movs	r3, #12
 801441c:	6003      	str	r3, [r0, #0]
 801441e:	e7d6      	b.n	80143ce <_free_r+0x26>
 8014420:	6825      	ldr	r5, [r4, #0]
 8014422:	1961      	adds	r1, r4, r5
 8014424:	428b      	cmp	r3, r1
 8014426:	bf04      	itt	eq
 8014428:	6819      	ldreq	r1, [r3, #0]
 801442a:	685b      	ldreq	r3, [r3, #4]
 801442c:	6063      	str	r3, [r4, #4]
 801442e:	bf04      	itt	eq
 8014430:	1949      	addeq	r1, r1, r5
 8014432:	6021      	streq	r1, [r4, #0]
 8014434:	6054      	str	r4, [r2, #4]
 8014436:	e7ca      	b.n	80143ce <_free_r+0x26>
 8014438:	b003      	add	sp, #12
 801443a:	bd30      	pop	{r4, r5, pc}
 801443c:	240051e4 	.word	0x240051e4

08014440 <sbrk_aligned>:
 8014440:	b570      	push	{r4, r5, r6, lr}
 8014442:	4e0e      	ldr	r6, [pc, #56]	; (801447c <sbrk_aligned+0x3c>)
 8014444:	460c      	mov	r4, r1
 8014446:	6831      	ldr	r1, [r6, #0]
 8014448:	4605      	mov	r5, r0
 801444a:	b911      	cbnz	r1, 8014452 <sbrk_aligned+0x12>
 801444c:	f000 f88c 	bl	8014568 <_sbrk_r>
 8014450:	6030      	str	r0, [r6, #0]
 8014452:	4621      	mov	r1, r4
 8014454:	4628      	mov	r0, r5
 8014456:	f000 f887 	bl	8014568 <_sbrk_r>
 801445a:	1c43      	adds	r3, r0, #1
 801445c:	d00a      	beq.n	8014474 <sbrk_aligned+0x34>
 801445e:	1cc4      	adds	r4, r0, #3
 8014460:	f024 0403 	bic.w	r4, r4, #3
 8014464:	42a0      	cmp	r0, r4
 8014466:	d007      	beq.n	8014478 <sbrk_aligned+0x38>
 8014468:	1a21      	subs	r1, r4, r0
 801446a:	4628      	mov	r0, r5
 801446c:	f000 f87c 	bl	8014568 <_sbrk_r>
 8014470:	3001      	adds	r0, #1
 8014472:	d101      	bne.n	8014478 <sbrk_aligned+0x38>
 8014474:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8014478:	4620      	mov	r0, r4
 801447a:	bd70      	pop	{r4, r5, r6, pc}
 801447c:	240051e8 	.word	0x240051e8

08014480 <_malloc_r>:
 8014480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014484:	1ccd      	adds	r5, r1, #3
 8014486:	f025 0503 	bic.w	r5, r5, #3
 801448a:	3508      	adds	r5, #8
 801448c:	2d0c      	cmp	r5, #12
 801448e:	bf38      	it	cc
 8014490:	250c      	movcc	r5, #12
 8014492:	2d00      	cmp	r5, #0
 8014494:	4607      	mov	r7, r0
 8014496:	db01      	blt.n	801449c <_malloc_r+0x1c>
 8014498:	42a9      	cmp	r1, r5
 801449a:	d905      	bls.n	80144a8 <_malloc_r+0x28>
 801449c:	230c      	movs	r3, #12
 801449e:	603b      	str	r3, [r7, #0]
 80144a0:	2600      	movs	r6, #0
 80144a2:	4630      	mov	r0, r6
 80144a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80144a8:	4e2e      	ldr	r6, [pc, #184]	; (8014564 <_malloc_r+0xe4>)
 80144aa:	f000 f907 	bl	80146bc <__malloc_lock>
 80144ae:	6833      	ldr	r3, [r6, #0]
 80144b0:	461c      	mov	r4, r3
 80144b2:	bb34      	cbnz	r4, 8014502 <_malloc_r+0x82>
 80144b4:	4629      	mov	r1, r5
 80144b6:	4638      	mov	r0, r7
 80144b8:	f7ff ffc2 	bl	8014440 <sbrk_aligned>
 80144bc:	1c43      	adds	r3, r0, #1
 80144be:	4604      	mov	r4, r0
 80144c0:	d14d      	bne.n	801455e <_malloc_r+0xde>
 80144c2:	6834      	ldr	r4, [r6, #0]
 80144c4:	4626      	mov	r6, r4
 80144c6:	2e00      	cmp	r6, #0
 80144c8:	d140      	bne.n	801454c <_malloc_r+0xcc>
 80144ca:	6823      	ldr	r3, [r4, #0]
 80144cc:	4631      	mov	r1, r6
 80144ce:	4638      	mov	r0, r7
 80144d0:	eb04 0803 	add.w	r8, r4, r3
 80144d4:	f000 f848 	bl	8014568 <_sbrk_r>
 80144d8:	4580      	cmp	r8, r0
 80144da:	d13a      	bne.n	8014552 <_malloc_r+0xd2>
 80144dc:	6821      	ldr	r1, [r4, #0]
 80144de:	3503      	adds	r5, #3
 80144e0:	1a6d      	subs	r5, r5, r1
 80144e2:	f025 0503 	bic.w	r5, r5, #3
 80144e6:	3508      	adds	r5, #8
 80144e8:	2d0c      	cmp	r5, #12
 80144ea:	bf38      	it	cc
 80144ec:	250c      	movcc	r5, #12
 80144ee:	4629      	mov	r1, r5
 80144f0:	4638      	mov	r0, r7
 80144f2:	f7ff ffa5 	bl	8014440 <sbrk_aligned>
 80144f6:	3001      	adds	r0, #1
 80144f8:	d02b      	beq.n	8014552 <_malloc_r+0xd2>
 80144fa:	6823      	ldr	r3, [r4, #0]
 80144fc:	442b      	add	r3, r5
 80144fe:	6023      	str	r3, [r4, #0]
 8014500:	e00e      	b.n	8014520 <_malloc_r+0xa0>
 8014502:	6822      	ldr	r2, [r4, #0]
 8014504:	1b52      	subs	r2, r2, r5
 8014506:	d41e      	bmi.n	8014546 <_malloc_r+0xc6>
 8014508:	2a0b      	cmp	r2, #11
 801450a:	d916      	bls.n	801453a <_malloc_r+0xba>
 801450c:	1961      	adds	r1, r4, r5
 801450e:	42a3      	cmp	r3, r4
 8014510:	6025      	str	r5, [r4, #0]
 8014512:	bf18      	it	ne
 8014514:	6059      	strne	r1, [r3, #4]
 8014516:	6863      	ldr	r3, [r4, #4]
 8014518:	bf08      	it	eq
 801451a:	6031      	streq	r1, [r6, #0]
 801451c:	5162      	str	r2, [r4, r5]
 801451e:	604b      	str	r3, [r1, #4]
 8014520:	4638      	mov	r0, r7
 8014522:	f104 060b 	add.w	r6, r4, #11
 8014526:	f000 f8cf 	bl	80146c8 <__malloc_unlock>
 801452a:	f026 0607 	bic.w	r6, r6, #7
 801452e:	1d23      	adds	r3, r4, #4
 8014530:	1af2      	subs	r2, r6, r3
 8014532:	d0b6      	beq.n	80144a2 <_malloc_r+0x22>
 8014534:	1b9b      	subs	r3, r3, r6
 8014536:	50a3      	str	r3, [r4, r2]
 8014538:	e7b3      	b.n	80144a2 <_malloc_r+0x22>
 801453a:	6862      	ldr	r2, [r4, #4]
 801453c:	42a3      	cmp	r3, r4
 801453e:	bf0c      	ite	eq
 8014540:	6032      	streq	r2, [r6, #0]
 8014542:	605a      	strne	r2, [r3, #4]
 8014544:	e7ec      	b.n	8014520 <_malloc_r+0xa0>
 8014546:	4623      	mov	r3, r4
 8014548:	6864      	ldr	r4, [r4, #4]
 801454a:	e7b2      	b.n	80144b2 <_malloc_r+0x32>
 801454c:	4634      	mov	r4, r6
 801454e:	6876      	ldr	r6, [r6, #4]
 8014550:	e7b9      	b.n	80144c6 <_malloc_r+0x46>
 8014552:	230c      	movs	r3, #12
 8014554:	603b      	str	r3, [r7, #0]
 8014556:	4638      	mov	r0, r7
 8014558:	f000 f8b6 	bl	80146c8 <__malloc_unlock>
 801455c:	e7a1      	b.n	80144a2 <_malloc_r+0x22>
 801455e:	6025      	str	r5, [r4, #0]
 8014560:	e7de      	b.n	8014520 <_malloc_r+0xa0>
 8014562:	bf00      	nop
 8014564:	240051e4 	.word	0x240051e4

08014568 <_sbrk_r>:
 8014568:	b538      	push	{r3, r4, r5, lr}
 801456a:	4d06      	ldr	r5, [pc, #24]	; (8014584 <_sbrk_r+0x1c>)
 801456c:	2300      	movs	r3, #0
 801456e:	4604      	mov	r4, r0
 8014570:	4608      	mov	r0, r1
 8014572:	602b      	str	r3, [r5, #0]
 8014574:	f7ed ff90 	bl	8002498 <_sbrk>
 8014578:	1c43      	adds	r3, r0, #1
 801457a:	d102      	bne.n	8014582 <_sbrk_r+0x1a>
 801457c:	682b      	ldr	r3, [r5, #0]
 801457e:	b103      	cbz	r3, 8014582 <_sbrk_r+0x1a>
 8014580:	6023      	str	r3, [r4, #0]
 8014582:	bd38      	pop	{r3, r4, r5, pc}
 8014584:	240051ec 	.word	0x240051ec

08014588 <__sread>:
 8014588:	b510      	push	{r4, lr}
 801458a:	460c      	mov	r4, r1
 801458c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014590:	f000 f8a0 	bl	80146d4 <_read_r>
 8014594:	2800      	cmp	r0, #0
 8014596:	bfab      	itete	ge
 8014598:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801459a:	89a3      	ldrhlt	r3, [r4, #12]
 801459c:	181b      	addge	r3, r3, r0
 801459e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80145a2:	bfac      	ite	ge
 80145a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80145a6:	81a3      	strhlt	r3, [r4, #12]
 80145a8:	bd10      	pop	{r4, pc}

080145aa <__swrite>:
 80145aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80145ae:	461f      	mov	r7, r3
 80145b0:	898b      	ldrh	r3, [r1, #12]
 80145b2:	05db      	lsls	r3, r3, #23
 80145b4:	4605      	mov	r5, r0
 80145b6:	460c      	mov	r4, r1
 80145b8:	4616      	mov	r6, r2
 80145ba:	d505      	bpl.n	80145c8 <__swrite+0x1e>
 80145bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80145c0:	2302      	movs	r3, #2
 80145c2:	2200      	movs	r2, #0
 80145c4:	f000 f868 	bl	8014698 <_lseek_r>
 80145c8:	89a3      	ldrh	r3, [r4, #12]
 80145ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80145ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80145d2:	81a3      	strh	r3, [r4, #12]
 80145d4:	4632      	mov	r2, r6
 80145d6:	463b      	mov	r3, r7
 80145d8:	4628      	mov	r0, r5
 80145da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80145de:	f000 b817 	b.w	8014610 <_write_r>

080145e2 <__sseek>:
 80145e2:	b510      	push	{r4, lr}
 80145e4:	460c      	mov	r4, r1
 80145e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80145ea:	f000 f855 	bl	8014698 <_lseek_r>
 80145ee:	1c43      	adds	r3, r0, #1
 80145f0:	89a3      	ldrh	r3, [r4, #12]
 80145f2:	bf15      	itete	ne
 80145f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80145f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80145fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80145fe:	81a3      	strheq	r3, [r4, #12]
 8014600:	bf18      	it	ne
 8014602:	81a3      	strhne	r3, [r4, #12]
 8014604:	bd10      	pop	{r4, pc}

08014606 <__sclose>:
 8014606:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801460a:	f000 b813 	b.w	8014634 <_close_r>
	...

08014610 <_write_r>:
 8014610:	b538      	push	{r3, r4, r5, lr}
 8014612:	4d07      	ldr	r5, [pc, #28]	; (8014630 <_write_r+0x20>)
 8014614:	4604      	mov	r4, r0
 8014616:	4608      	mov	r0, r1
 8014618:	4611      	mov	r1, r2
 801461a:	2200      	movs	r2, #0
 801461c:	602a      	str	r2, [r5, #0]
 801461e:	461a      	mov	r2, r3
 8014620:	f7ed fee9 	bl	80023f6 <_write>
 8014624:	1c43      	adds	r3, r0, #1
 8014626:	d102      	bne.n	801462e <_write_r+0x1e>
 8014628:	682b      	ldr	r3, [r5, #0]
 801462a:	b103      	cbz	r3, 801462e <_write_r+0x1e>
 801462c:	6023      	str	r3, [r4, #0]
 801462e:	bd38      	pop	{r3, r4, r5, pc}
 8014630:	240051ec 	.word	0x240051ec

08014634 <_close_r>:
 8014634:	b538      	push	{r3, r4, r5, lr}
 8014636:	4d06      	ldr	r5, [pc, #24]	; (8014650 <_close_r+0x1c>)
 8014638:	2300      	movs	r3, #0
 801463a:	4604      	mov	r4, r0
 801463c:	4608      	mov	r0, r1
 801463e:	602b      	str	r3, [r5, #0]
 8014640:	f7ed fef5 	bl	800242e <_close>
 8014644:	1c43      	adds	r3, r0, #1
 8014646:	d102      	bne.n	801464e <_close_r+0x1a>
 8014648:	682b      	ldr	r3, [r5, #0]
 801464a:	b103      	cbz	r3, 801464e <_close_r+0x1a>
 801464c:	6023      	str	r3, [r4, #0]
 801464e:	bd38      	pop	{r3, r4, r5, pc}
 8014650:	240051ec 	.word	0x240051ec

08014654 <_fstat_r>:
 8014654:	b538      	push	{r3, r4, r5, lr}
 8014656:	4d07      	ldr	r5, [pc, #28]	; (8014674 <_fstat_r+0x20>)
 8014658:	2300      	movs	r3, #0
 801465a:	4604      	mov	r4, r0
 801465c:	4608      	mov	r0, r1
 801465e:	4611      	mov	r1, r2
 8014660:	602b      	str	r3, [r5, #0]
 8014662:	f7ed fef0 	bl	8002446 <_fstat>
 8014666:	1c43      	adds	r3, r0, #1
 8014668:	d102      	bne.n	8014670 <_fstat_r+0x1c>
 801466a:	682b      	ldr	r3, [r5, #0]
 801466c:	b103      	cbz	r3, 8014670 <_fstat_r+0x1c>
 801466e:	6023      	str	r3, [r4, #0]
 8014670:	bd38      	pop	{r3, r4, r5, pc}
 8014672:	bf00      	nop
 8014674:	240051ec 	.word	0x240051ec

08014678 <_isatty_r>:
 8014678:	b538      	push	{r3, r4, r5, lr}
 801467a:	4d06      	ldr	r5, [pc, #24]	; (8014694 <_isatty_r+0x1c>)
 801467c:	2300      	movs	r3, #0
 801467e:	4604      	mov	r4, r0
 8014680:	4608      	mov	r0, r1
 8014682:	602b      	str	r3, [r5, #0]
 8014684:	f7ed feef 	bl	8002466 <_isatty>
 8014688:	1c43      	adds	r3, r0, #1
 801468a:	d102      	bne.n	8014692 <_isatty_r+0x1a>
 801468c:	682b      	ldr	r3, [r5, #0]
 801468e:	b103      	cbz	r3, 8014692 <_isatty_r+0x1a>
 8014690:	6023      	str	r3, [r4, #0]
 8014692:	bd38      	pop	{r3, r4, r5, pc}
 8014694:	240051ec 	.word	0x240051ec

08014698 <_lseek_r>:
 8014698:	b538      	push	{r3, r4, r5, lr}
 801469a:	4d07      	ldr	r5, [pc, #28]	; (80146b8 <_lseek_r+0x20>)
 801469c:	4604      	mov	r4, r0
 801469e:	4608      	mov	r0, r1
 80146a0:	4611      	mov	r1, r2
 80146a2:	2200      	movs	r2, #0
 80146a4:	602a      	str	r2, [r5, #0]
 80146a6:	461a      	mov	r2, r3
 80146a8:	f7ed fee8 	bl	800247c <_lseek>
 80146ac:	1c43      	adds	r3, r0, #1
 80146ae:	d102      	bne.n	80146b6 <_lseek_r+0x1e>
 80146b0:	682b      	ldr	r3, [r5, #0]
 80146b2:	b103      	cbz	r3, 80146b6 <_lseek_r+0x1e>
 80146b4:	6023      	str	r3, [r4, #0]
 80146b6:	bd38      	pop	{r3, r4, r5, pc}
 80146b8:	240051ec 	.word	0x240051ec

080146bc <__malloc_lock>:
 80146bc:	4801      	ldr	r0, [pc, #4]	; (80146c4 <__malloc_lock+0x8>)
 80146be:	f7ff be0b 	b.w	80142d8 <__retarget_lock_acquire_recursive>
 80146c2:	bf00      	nop
 80146c4:	240051e0 	.word	0x240051e0

080146c8 <__malloc_unlock>:
 80146c8:	4801      	ldr	r0, [pc, #4]	; (80146d0 <__malloc_unlock+0x8>)
 80146ca:	f7ff be06 	b.w	80142da <__retarget_lock_release_recursive>
 80146ce:	bf00      	nop
 80146d0:	240051e0 	.word	0x240051e0

080146d4 <_read_r>:
 80146d4:	b538      	push	{r3, r4, r5, lr}
 80146d6:	4d07      	ldr	r5, [pc, #28]	; (80146f4 <_read_r+0x20>)
 80146d8:	4604      	mov	r4, r0
 80146da:	4608      	mov	r0, r1
 80146dc:	4611      	mov	r1, r2
 80146de:	2200      	movs	r2, #0
 80146e0:	602a      	str	r2, [r5, #0]
 80146e2:	461a      	mov	r2, r3
 80146e4:	f7ed fe6a 	bl	80023bc <_read>
 80146e8:	1c43      	adds	r3, r0, #1
 80146ea:	d102      	bne.n	80146f2 <_read_r+0x1e>
 80146ec:	682b      	ldr	r3, [r5, #0]
 80146ee:	b103      	cbz	r3, 80146f2 <_read_r+0x1e>
 80146f0:	6023      	str	r3, [r4, #0]
 80146f2:	bd38      	pop	{r3, r4, r5, pc}
 80146f4:	240051ec 	.word	0x240051ec

080146f8 <_init>:
 80146f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80146fa:	bf00      	nop
 80146fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80146fe:	bc08      	pop	{r3}
 8014700:	469e      	mov	lr, r3
 8014702:	4770      	bx	lr

08014704 <_fini>:
 8014704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014706:	bf00      	nop
 8014708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801470a:	bc08      	pop	{r3}
 801470c:	469e      	mov	lr, r3
 801470e:	4770      	bx	lr
